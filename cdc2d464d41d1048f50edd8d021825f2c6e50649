{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fb3a33a5_bedbcd81",
        "filename": "libartbase/arch/instruction_set.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-10-24T19:25:07Z",
      "side": 1,
      "message": "(i\u0027ve added an entry to my to-do list to find a canonical answer to this question, not just for here...)",
      "revId": "cdc2d464d41d1048f50edd8d021825f2c6e50649",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65b85952_8aa56558",
        "filename": "libartbase/arch/instruction_set.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2022-10-24T21:32:40Z",
      "side": 1,
      "message": "I measured this empirically by looking at the alignment of functions in libc.so for now.",
      "parentUuid": "fb3a33a5_bedbcd81",
      "revId": "cdc2d464d41d1048f50edd8d021825f2c6e50649",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41338b03_46e11b46",
        "filename": "libartbase/arch/instruction_set.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2022-10-25T10:18:51Z",
      "side": 1,
      "message": "My understanding is that the stack alignment for procedures (and ART entrypoints) should be 16: https://github.com/riscv-non-isa/riscv-elf-psabi-doc/issues/21, resolved as https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/7fb442b039d1cfc70d0dcd4f03dfa9b6f942d80b/riscv-elf.md.\n```\nThe stack grows downwards and the stack pointer shall be aligned to a 128-bit\nboundary upon procedure entry, except for the RV32E ABI, where it need only be \naligned to 32 bits.\n```",
      "parentUuid": "65b85952_8aa56558",
      "revId": "cdc2d464d41d1048f50edd8d021825f2c6e50649",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db2135ef_79c4d07d",
        "filename": "libartbase/arch/instruction_set.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-10-25T15:40:55Z",
      "side": 1,
      "message": "that\u0027s the *stack* alignment.\n\nccross (and this variable) is talking about what alignment the first instruction of a function should have (usually for maximum performance rather than correctness; anything will work, but on some cpus, some alignments will perform better; see also the head of a loop).",
      "parentUuid": "41338b03_46e11b46",
      "revId": "cdc2d464d41d1048f50edd8d021825f2c6e50649",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ffeca4a_2658b429",
        "filename": "libartbase/arch/instruction_set.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2022-10-25T16:32:27Z",
      "side": 1,
      "message": "Right, that is irrelevant.\n\nI got confused because ART methods headers that DCHECK this alignment are both code and data (although not on stack). Theoretically one can generate a function, put it on stack and jump to it (if stack was executable). But then \"stack alignment on procedure entry\" would still mean a different thing (the value of stack pointer when jumping to that generated function).",
      "parentUuid": "db2135ef_79c4d07d",
      "revId": "cdc2d464d41d1048f50edd8d021825f2c6e50649",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50756b96_9a249f0e",
        "filename": "libartbase/arch/instruction_set.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2022-10-25T10:47:12Z",
      "side": 1,
      "message": "Can you add a comment that we use 2 bytes not 4 due to targeting RVGC that includes the compressed extension?",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 57
      },
      "revId": "cdc2d464d41d1048f50edd8d021825f2c6e50649",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a343db84_7684ed4c",
        "filename": "libartbase/arch/instruction_set.h",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2022-10-25T10:18:51Z",
      "side": 1,
      "message": "Please fix formatting (the other lines are aligned at `\u003d`, only riscv64 is not).",
      "range": {
        "startLine": 266,
        "startChar": 0,
        "endLine": 266,
        "endChar": 93
      },
      "revId": "cdc2d464d41d1048f50edd8d021825f2c6e50649",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}