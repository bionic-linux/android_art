{
  "comments": [
    {
      "key": {
        "uuid": "dcca7990_1c3fd935",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-03-19T22:36:17Z",
      "side": 1,
      "message": "I think this is implied. No comment necessary.",
      "range": {
        "startLine": 362,
        "startChar": 0,
        "endLine": 362,
        "endChar": 41
      },
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc26f94e_f3d31048",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 399,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-03-20T10:16:46Z",
      "side": 1,
      "message": "Why are we guaranteed?",
      "range": {
        "startLine": 399,
        "startChar": 46,
        "endLine": 399,
        "endChar": 47
      },
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc4d1911_6a1ce7c6",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 399,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-03-20T16:56:55Z",
      "side": 1,
      "message": "I guess its never guaranteed, but its pretty reasonable.",
      "parentUuid": "dc26f94e_f3d31048",
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc26f94e_369896a7",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 399,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-03-20T17:49:16Z",
      "side": 1,
      "message": "Sorry the question was too generic. I was also wondering how we handle a call stack of methods that use \"small enough\" stack space? Or recursive calls on such a method?",
      "parentUuid": "dc4d1911_6a1ce7c6",
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c904999_af62f9e7",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-03-20T10:16:46Z",
      "side": 1,
      "message": "I don\u0027t understand this comment. What\u0027s the relation between \"enough space\" and signals?",
      "range": {
        "startLine": 400,
        "startChar": 32,
        "endLine": 400,
        "endChar": 33
      },
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc4d1911_af01a163",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-03-20T12:17:48Z",
      "side": 1,
      "message": "The point of this is to ensure that the thread\u0027s stack has sufficient space to allow the OS to drop down a sigcontext in the event a signal happens to arrive.  In the large frame case above, unless we move to using an altstack for signal delivery we can\u0027t be sure the stack will be valid so SP must be tested for overflow before being updated.",
      "parentUuid": "5c904999_af62f9e7",
      "range": {
        "startLine": 400,
        "startChar": 32,
        "endLine": 400,
        "endChar": 33
      },
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c904999_8f67f5a9",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-03-20T12:31:43Z",
      "side": 1,
      "message": "OK, thanks Bill for the explanation. What guarantees that the signal processing just requires 2 KB?",
      "parentUuid": "dc4d1911_af01a163",
      "range": {
        "startLine": 400,
        "startChar": 32,
        "endLine": 400,
        "endChar": 33
      },
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c21e133_ad01b563",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-03-20T12:49:44Z",
      "side": 1,
      "message": "Because signal handlers are user-defined and thus could use an arbitrary amount of stack, we can\u0027t guarantee that sigcontext + handler\u0027s memory use will fit in 2K.  However, in that event the error would be in the user\u0027s signal handler (who probably ought to be using an altstack).  The runtime system, however, does have a responsibility to ensure that there is sufficient space for the OS to drop a sigcontext and at least begin execution of the user\u0027s handler.  If the user\u0027s handler blows through the stack once it starts running - not our problem.  The choice of 2K is somewhat arbitrary, but is plenty of room for sigcontext plus a simple handler.  It\u0027s also large enough that the vast majority of methods will fit in the fast pass case.",
      "parentUuid": "5c904999_8f67f5a9",
      "range": {
        "startLine": 400,
        "startChar": 32,
        "endLine": 400,
        "endChar": 33
      },
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c21e133_68162bd8",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-03-20T16:46:19Z",
      "side": 1,
      "message": "Would a choice of something like PTHREAD_STACK_MIN be less arbitrary?",
      "parentUuid": "9c21e133_ad01b563",
      "range": {
        "startLine": 400,
        "startChar": 32,
        "endLine": 400,
        "endChar": 33
      },
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c30f57d_0adf6ba7",
        "filename": "compiler/dex/quick/arm/call_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-03-20T16:56:55Z",
      "side": 1,
      "message": "PTHREAD_STACK_MIN is 2 * page size, that would probably also work. Since the largest method frame in boot.oat/core.oat is only around 1k, it should cause no regressions.",
      "parentUuid": "9c21e133_68162bd8",
      "revId": "0d507d1e0441e6bd6f3affca3a60774ea920f317",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}