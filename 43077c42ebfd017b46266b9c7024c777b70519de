{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "22cb67cc_891eff76",
        "filename": "odrefresh/odr_config.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-01T17:33:38Z",
      "side": 1,
      "message": "why not use_compilation_os_ ?",
      "range": {
        "startLine": 57,
        "startChar": 7,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4bb4a3a_881e921e",
        "filename": "odrefresh/odr_config.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-06-01T19:11:00Z",
      "side": 1,
      "message": "I\u0027m open to rename, but the rationale for the name is the OS can in theory handle any kind of \"comp\"utational tasks, compilation being an example.  The APEX is also named com.android.compos.  Let me know if you prefer to rename.",
      "parentUuid": "22cb67cc_891eff76",
      "range": {
        "startLine": 57,
        "startChar": 7,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f70f1b5b_b6e14c28",
        "filename": "odrefresh/odr_config.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-02T07:55:51Z",
      "side": 1,
      "message": "SGTM given apex is named compos.",
      "parentUuid": "c4bb4a3a_881e921e",
      "range": {
        "startLine": 57,
        "startChar": 7,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1631ecc7_676d4ecc",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 695,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-03T12:56:56Z",
      "side": 1,
      "message": "Can you expand on why? And explain what PVM is here.",
      "range": {
        "startLine": 695,
        "startChar": 9,
        "endLine": 695,
        "endChar": 50
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f1b946f_ee9eb6f3",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 695,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-06-14T20:13:21Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "1631ecc7_676d4ecc",
      "range": {
        "startLine": 695,
        "startChar": 9,
        "endLine": 695,
        "endChar": 50
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "146687b7_7ee4c736",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-01T17:33:38Z",
      "side": 1,
      "message": "Would it make sense to pass FDs for those, so we consistenly only pass fds with compilation os?",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d0dbb94_f2c66575",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-06-01T19:11:00Z",
      "side": 1,
      "message": "I\u0027m a bit torn between consistency and avoid unnecessary setup here, but prefer the current implementation.\n\nSo the problem we\u0027re solving here is to ensure the input/BCP jars integrity by trusted signature.  For the VM to verify the signatures, for each BCP jars we need to generate the fs-verity signature and Merkle tree as files next to each jar (so bcp-foo.jar would come with bcp-foo.jar.{fsv_sig, merkle_tree}.  We need this for JARs in /system.  The question here is whether we want to apply the same method to JARs in APEXes.\n\nSince APEX is already signed, the extra signature would be not necessary from security perspective.  Instead of generating additional files and changing the build/release signing for JARs in APEX, my current preference is to isolate the complexity here in one place.\n\nAny thoughts?",
      "parentUuid": "146687b7_7ee4c736",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23faf9bc_74693468",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-02T07:55:51Z",
      "side": 1,
      "message": "So passing a fd has the side effect that some system (which one?) will try to generate or open these metadata files?",
      "parentUuid": "4d0dbb94_f2c66575",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b8935da_cac8585e",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-06-02T15:56:40Z",
      "side": 1,
      "message": "We need either dm-verity or fs-verity to verify the input file.  For BCP jars in /system, we need fs-verity.  For BCP jars in APEX, we can use dm-verity naturally, or fs-verity with more work.\n\nLet me share some details if that helps, using the following example generated by odrefresh:\n\n  dex2oat ...\n  --runtime-arg -Xbootclasspath:\n    /apex/com.android.art/javalib/core-oj.jar:\n    /apex/com.android.art/javalib/coreibart.jar:\n    /apex/com.android.art/javalib/okhttp.jar:\n    /apex/com.android.art/javalib/bouncycastle.jar:\n    /apex/com.android.art/javalib/apache-xml.jar:\n    /system/framework/framework.jar:\n    /system/framework/ext.jar:\n    /system/framework/telephony-common.jar:\n    /system/framework/voip-common.jar:\n    /system/framework/ims-common.jar:\n    /apex/com.android.i18n/javalib/core-icu4j.jar\n  --runtime-arg -Xbootclasspathfds:\n    -1:-1:-1:-1:-1:9:10:11:12:13:-1\n\nJars in /system will come with adjacent metadata files.  There will be a \"file server\" on Android that passes the file content and the metadata to a FUSE filesystem in the VM.  The FUSE will guarantee the read from FD 9-13 to verify against trusted key.  Those FDs are opened from the FUSE.\n\nWe could do the same for jars those /apex (possibly jars in other apexes later.  IIUC they are currently JIT\u0027ed?).  Or we rely on dm-verity of APEX.",
      "parentUuid": "23faf9bc_74693468",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15a23543_7804453d",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-02T21:03:36Z",
      "side": 1,
      "message": "Actually, this is getting very confusing to me :)  For BCP jars in /system why isn\u0027t the dm-verity for /system enough?",
      "parentUuid": "3b8935da_cac8585e",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66b1ecf8_ceaef746",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-06-02T22:08:17Z",
      "side": 1,
      "message": "The way to think about this is a secure computer/VM with an untrusted remote storage (Android).  Files on the remote storage can still be proven safe with signature.  /system is verified by Android with dm-verity, but it\u0027s still an untrusted remote.\n\n(Though I suspect it might not be impossible to pass raw block devices as files to the VM, then apply dm-verity inside the VM... We\u0027d need to punch a lot of holes and add exceptions to the existing SELinux rules, etc. to achieve that though.  +David to keep me honest)",
      "parentUuid": "15a23543_7804453d",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5da84ebe_7a242f50",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-03T12:56:56Z",
      "side": 1,
      "message": "Right, but then whether it\u0027s an apex file from /system or a jar file from /system that doesn\u0027t make a different, when it comes to untrusted remote storage?",
      "parentUuid": "66b1ecf8_ceaef746",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2a1b79_3cad99cc",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-06-03T17:42:17Z",
      "side": 1,
      "message": "APEX is signed as part of the format, so it can be verified in the trusted VM.  The APEXes are actually mounted by apexd in microdroid, with dm-verity just like on Android.  So it\u0027s safe to access the JARs by path in the VM.\n\nThough +Alan Stokes and I are now considering about also generate fs-verity metadata for JARs in all APEXes, just like for JARs in /system.  That\u0027ll give us the consistency to avoid this hack, i.e. we can always pass BCP JARs as FDs unconditionally.  Will ping this thread once we reach the conclusion.",
      "parentUuid": "5da84ebe_7a242f50",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27a8444b_48cc3077",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-04T13:36:05Z",
      "side": 1,
      "message": "Ack, thanks!",
      "parentUuid": "df2a1b79_3cad99cc",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d63cd15a_c0fc328b",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-06-14T20:13:21Z",
      "side": 1,
      "message": "The exception is removed.  We decided to pass JARs in APEX as FD remotely in the same way, even though it\u0027s available by path in the VM.  Actually, this change now passes BCP FDs to dex2oat regardless of CompOS (but please let me know if you have concerns).\n\nSee the actual CompOS change in aosp/1736084.",
      "parentUuid": "27a8444b_48cc3077",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 697,
        "endChar": 16
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aacd0e4_9dcda5bb",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 1482,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-01T17:33:38Z",
      "side": 1,
      "message": "--use-compilation-os?",
      "range": {
        "startLine": 1482,
        "startChar": 31,
        "endLine": 1482,
        "endChar": 41
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f7ee977_f5ce62e3",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 1482,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-02T07:55:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3aacd0e4_9dcda5bb",
      "range": {
        "startLine": 1482,
        "startChar": 31,
        "endLine": 1482,
        "endChar": 41
      },
      "revId": "43077c42ebfd017b46266b9c7024c777b70519de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}