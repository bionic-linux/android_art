{
  "comments": [
    {
      "key": {
        "uuid": "ab1f2d45_736cff34",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-04-18T15:52:58Z",
      "side": 1,
      "message": "This has only one user file - don\u0027t put it into a widely distributed header.",
      "range": {
        "startLine": 261,
        "startChar": 19,
        "endLine": 261,
        "endChar": 27
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77e200ce_0a2ae177",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-04-18T15:52:58Z",
      "side": 1,
      "message": "You probably want to put an always-inline on here.",
      "range": {
        "startLine": 261,
        "startChar": 0,
        "endLine": 261,
        "endChar": 6
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb7219ef_1c7d9f38",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-04-18T17:48:27Z",
      "side": 1,
      "message": "I thought about that. Then I thought that this routine being a function call wouldn\u0027t be disastrous for performance, so I might as well trust the inliner\u0027s judgement. But it doesn\u0027t really matter --- I added the ALWAYS_INLINE.",
      "parentUuid": "77e200ce_0a2ae177",
      "range": {
        "startLine": 261,
        "startChar": 0,
        "endLine": 261,
        "endChar": 6
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03fe66e8_bd62531f",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-04-18T17:48:27Z",
      "side": 1,
      "message": "The function gains another user in a subsequent CL.",
      "parentUuid": "ab1f2d45_736cff34",
      "range": {
        "startLine": 261,
        "startChar": 19,
        "endLine": 261,
        "endChar": 27
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55d172ef_91e58dcb",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-04-18T17:52:26Z",
      "side": 1,
      "message": "Not very happy with that reasoning, but oh well.",
      "parentUuid": "03fe66e8_bd62531f",
      "range": {
        "startLine": 261,
        "startChar": 19,
        "endLine": 261,
        "endChar": 27
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f9fb764_b7ab6b15",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-04-18T18:00:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "55d172ef_91e58dcb",
      "range": {
        "startLine": 261,
        "startChar": 19,
        "endLine": 261,
        "endChar": 27
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d596c315_15eae14a",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-04-18T15:52:58Z",
      "side": 1,
      "message": "Add an #else case with sched_yield?",
      "range": {
        "startLine": 267,
        "startChar": 1,
        "endLine": 267,
        "endChar": 6
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cab3b2a_99c47d97",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-04-18T17:48:27Z",
      "side": 1,
      "message": "No, that\u0027s the wrong thing. The point of this function is to make CPU spin loops more efficient, not to do something completely different and yield to the scheduler. Doing nothing is exactly the right thing if the architecture doesn\u0027t have some kind of pause- or yield-like instruction.",
      "parentUuid": "d596c315_15eae14a",
      "range": {
        "startLine": 267,
        "startChar": 1,
        "endLine": 267,
        "endChar": 6
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "252e363f_429c2b40",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-04-18T17:52:26Z",
      "side": 1,
      "message": "It\u0027s not a replacement for a trivial counting loop to do nothing. E.g., with that argument I should reject your second CL.",
      "parentUuid": "5cab3b2a_99c47d97",
      "range": {
        "startLine": 267,
        "startChar": 1,
        "endLine": 267,
        "endChar": 6
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3b949b7_9f52129f",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-04-18T18:00:33Z",
      "side": 1,
      "message": "Because if we literally do nothing, the compiler will optimize away the loop entirely? That\u0027s fair. I\u0027ll add a asm volatile nop or something.",
      "parentUuid": "252e363f_429c2b40",
      "range": {
        "startLine": 267,
        "startChar": 1,
        "endLine": 267,
        "endChar": 6
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "427c688b_8fa8ce7e",
        "filename": "runtime/monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 1062,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-04-18T16:29:23Z",
      "side": 1,
      "message": "max_spins \u003d\u003d 0",
      "range": {
        "startLine": 1062,
        "startChar": 15,
        "endLine": 1062,
        "endChar": 24
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d583fe1_7e12c41d",
        "filename": "runtime/monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 1062,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-04-18T17:48:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "427c688b_8fa8ce7e",
      "range": {
        "startLine": 1062,
        "startChar": 15,
        "endLine": 1062,
        "endChar": 24
      },
      "revId": "4c3cca46b006df5ac4a2c20b8910d2845376cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}