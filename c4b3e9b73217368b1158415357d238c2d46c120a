{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9fa63998_7f32fef8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-12-17T14:51:35Z",
      "side": 1,
      "message": "I think we should try to use the GraphVisualizer instead. (We can extend it with more attributes if we need to, or have an option to print a dense format for blocks, or collect all inputs of an instruction and print it together.)",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9d3b77c_c69ae2bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T15:29:43Z",
      "side": 1,
      "message": "GraphVisualizer is annoying since it is a whole separate system that needs to be setup independently from the nodes\u0026graph. Also there are dependencies on its output that I\u0027d like to avoid having to deal with.",
      "parentUuid": "9fa63998_7f32fef8",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5911492a_adfddf14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-12-17T15:33:37Z",
      "side": 1,
      "message": "It may require some effort, but so far we\u0027ve all been using it and working around it to fit our needs (including the ARM team who implemented the disassembly) - I\u0027m also not fond of adding duplicated dumping code unless we have a plan to move off graphvisualizer.",
      "parentUuid": "a9d3b77c_c69ae2bf",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a65117a_ddb7c545",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T16:02:52Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s a good use of time. The main goal of this is just to be able to have gtests print useful error messages about individual instructions (mostly about what the arguments to phis are etc). This is something that graph-visualizer is terrible at and would require significant work to bolt on. Fundamentally graph-visualizer is designed to produce machine-readable files that represent a whole graph and are processed and examined using tools like irhydra. This is more for a simple debugging and logging tool without any of the strict format requirements.",
      "parentUuid": "5911492a_adfddf14",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60161689_48c0b937",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-12-17T16:52:49Z",
      "side": 1,
      "message": "The GraphVisualizer does show you all the information you need. We should just add a few helpers, so that you can simply call it to, for example, print a single instruction with or without attributes.\n\nI do care about the size of libart-compiler.so. How much does this CL add?",
      "parentUuid": "a9d3b77c_c69ae2bf",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b5ac7ea_46959dac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T18:29:56Z",
      "side": 1,
      "message": "The main thing this adds is recursive printing of arguments, which is useful for figuring out what the pass did quickly. The basic design of graph-visulaizer as a graph-visitor makes adding support for this very difficult.\n\nPre-change: \n\n2292    ../fast-out/target/product/blueline/apex/com.android.art/lib/libart-compiler.so\n3184    ../fast-out/target/product/blueline/apex/com.android.art/lib64/libart-compiler.so\n\nPost-change: \n\n2300    ../fast-out/target/product/blueline/apex/com.android.art/lib/libart-compiler.so\n3200    ../fast-out/target/product/blueline/apex/com.android.art/lib64/libart-compiler.so\n\nSo ~0.1mb (\u003c1%) difference",
      "parentUuid": "60161689_48c0b937",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f70dbdbe_d38fa625",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-28T15:29:36Z",
      "side": 1,
      "message": "Ok I\u0027ve looked a lot more into this than I really wanted to. In order to add the recursive printing of arguments (which is really the entire point of this CL) to the graph-visualizer would require a fairly substantial rewrite of the core graph-visualizer code. The main issue is that a lot of the logic involves creating std::ostringstreams that are formatted for each of the various attribtues that are then put onto a big instruction line. This is fine but whether a particular print is put on the main instruction line or an attribute list is hardcoded pretty much everywhere. This means that adding recursive printing would need to change all of these. I predict this will take a few days to do and be at least 2x the size of this CL. \n\nSpecifically the basic loop for the graph-visualizer is as a graph-visitor which on each block does [PrintInstructions](https://cs.android.com/android/platform/superproject/+/master:art/compiler/optimizing/graph_visualizer.cc;drc\u003dmaster;l\u003d742?q\u003dGraphVisualizer\u0026ss\u003dandroid%2Fplatform%2Fsuperproject). This calls into PrintInstruction where we would want to put the recursive prints somewhere around here: https://cs.android.com/android/platform/superproject/+/master:art/compiler/optimizing/graph_visualizer.cc;l\u003d617;drc\u003dmaster?q\u003dGraphVisualizer\u0026ss\u003dandroid%2Fplatform%2Fsuperproject but for those we need to (1) pass through the new StringList stream to all the visit functions or (2) re-implement all the visit functions. This is something where a small mistake could easily leave the graph-visualizer broken for some inputs.\n\nFurthermore, the fact that the output format for the GraphVisualizer has to conform to the C1Visualizer format and we have no tests to validate that we meet this spec makes performing such invasive changes to the visualizer a risky proposition.",
      "parentUuid": "4b5ac7ea_46959dac",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e326fbe_4f951da2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-05T17:27:55Z",
      "side": 1,
      "message": "I don\u0027t think we need any invasive changes. I\u0027ve prepared a CL: https://android-review.googlesource.com/1539976 . You can build on top of that by adding any attributes you need. (And changing the \u003ctype\u003e\u003cid\u003e instruction label to \u003ctype\u003e\u003cid\u003e/B\u003cblock-id\u003e if you really need it.)",
      "parentUuid": "f70dbdbe_d38fa625",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "912ab97a_4ce63610",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2021-01-05T21:44:54Z",
      "side": 1,
      "message": "I don\u0027t really like the multi-line style that has but it\u0027s not really a hill I\u0027m going to die on. Lets try and get yours in quickly and I\u0027ll rebase onto it.",
      "parentUuid": "3e326fbe_4f951da2",
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d69e9a46_663965bb",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 10
      },
      "lineNbr": 1988,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-12-17T14:51:35Z",
      "side": 1,
      "message": "What does the second \u0027s\u0027 stand for?",
      "range": {
        "startLine": 1988,
        "startChar": 32,
        "endLine": 1988,
        "endChar": 35
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39e46c9f_6fa44d29",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 10
      },
      "lineNbr": 1988,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T16:41:08Z",
      "side": 1,
      "message": "used to be ostringstream. removed.",
      "parentUuid": "d69e9a46_663965bb",
      "range": {
        "startLine": 1988,
        "startChar": 32,
        "endLine": 1988,
        "endChar": 35
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0432f85_804a0be1",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 377,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-12-17T14:51:35Z",
      "side": 1,
      "message": "This is not a useful name. What about\n\n  virtual void PrintName(std::ostream\u0026 os, HBasicBlock* block) const {\n    os \u003c\u003c \"B\" \u003c\u003c block-\u003eGetBlockId();\n  }",
      "range": {
        "startLine": 375,
        "startChar": 2,
        "endLine": 377,
        "endChar": 3
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2d68087_ed82958c",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 377,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T16:41:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0432f85_804a0be1",
      "range": {
        "startLine": 375,
        "startChar": 2,
        "endLine": 377,
        "endChar": 3
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7218d6d_0536e5f1",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 380,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-12-17T14:51:35Z",
      "side": 1,
      "message": "Every compilation unit that #includes nodes.h shall get its own variable with relocations and a destructor that would be invoked if we returned from main(). This is undesirable.",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 380,
        "endChar": 36
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd745638_ea55914b",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 380,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T16:41:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7218d6d_0536e5f1",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 380,
        "endChar": 36
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01ce448f_ce89534f",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 4407,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-12-17T14:51:35Z",
      "side": 1,
      "message": "Revert to `kFlagFinalizable`. These fields are deliberately chained.",
      "range": {
        "startLine": 4407,
        "startChar": 59,
        "endLine": 4407,
        "endChar": 85
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d96c4d8_3ae69a01",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 4407,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T16:41:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01ce448f_ce89534f",
      "range": {
        "startLine": 4407,
        "startChar": 59,
        "endLine": 4407,
        "endChar": 85
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a276486_d381281e",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 6103,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-12-17T14:51:35Z",
      "side": 1,
      "message": "Unrelated style change.",
      "range": {
        "startLine": 6101,
        "startChar": 2,
        "endLine": 6103,
        "endChar": 3
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c405eef5_e11d38d2",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 10
      },
      "lineNbr": 6103,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-17T16:41:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a276486_d381281e",
      "range": {
        "startLine": 6101,
        "startChar": 2,
        "endLine": 6103,
        "endChar": 3
      },
      "revId": "c4b3e9b73217368b1158415357d238c2d46c120a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}