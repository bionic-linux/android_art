{
  "comments": [
    {
      "key": {
        "uuid": "7b976875_a6b52265",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2018-07-11T01:58:10Z",
      "side": 1,
      "message": "HNullCheck",
      "range": {
        "startLine": 58,
        "startChar": 68,
        "endLine": 58,
        "endChar": 79
      },
      "revId": "f6b0f038d5910dc5df8c016116887c01b950525d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fab91bdc_e14639b0",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-07-10T12:25:35Z",
      "side": 1,
      "message": "An alternative approach would be to\n\n  check-\u003eMarkEmittedAtUseSite();\n\nand replace the `next`\u0027s input with the `check`. Though we would have change codegen to hunt for the actual input for instructions that emit the implicit null check.",
      "range": {
        "startLine": 57,
        "startChar": 6,
        "endLine": 70,
        "endChar": 50
      },
      "revId": "f6b0f038d5910dc5df8c016116887c01b950525d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da05b5bd_461360c0",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-07-10T17:02:34Z",
      "side": 1,
      "message": "Good point. We would still need to copy the environment, but that will indeed avoid adding the flag in HInstruction. It will also make the CanThrow/NeedsEnvironment more than just boolean check.\n\nDo you have a strong preference for emitted at use site?",
      "parentUuid": "fab91bdc_e14639b0",
      "range": {
        "startLine": 57,
        "startChar": 6,
        "endLine": 70,
        "endChar": 50
      },
      "revId": "f6b0f038d5910dc5df8c016116887c01b950525d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f35d8eb2_2a5667c6",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2018-07-11T01:58:10Z",
      "side": 1,
      "message": "I\u0027m ok with any of the two.",
      "parentUuid": "da05b5bd_461360c0",
      "range": {
        "startLine": 57,
        "startChar": 6,
        "endLine": 70,
        "endChar": 50
      },
      "revId": "f6b0f038d5910dc5df8c016116887c01b950525d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28ffb5ed_e40d85f6",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-07-11T09:48:27Z",
      "side": 1,
      "message": "Why would we need to copy the environment? The environment shall still have locations allocated even if the check.IsEmittedAtUseSite() and we can use that environment to emit the stack map for the null check, right?\n\nAnd why would we need to change \"CanThrow/NeedsEnvironment\"? I\u0027d expect these to be unchanged, the check and the next keeping their own properties.\n\nI have a mild preference for the MarkEmittedAtUseSite() approach as I believe it will be cleaner. (If we do need to copy the environment or change CanThrow/NeedsEnvironment, this may not be the case.)",
      "parentUuid": "f35d8eb2_2a5667c6",
      "range": {
        "startLine": 57,
        "startChar": 6,
        "endLine": 70,
        "endChar": 50
      },
      "revId": "f6b0f038d5910dc5df8c016116887c01b950525d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a627fbd_c663cf67",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-07-11T13:18:54Z",
      "side": 1,
      "message": "Even with keeping the HNullCheck in the graph, we still need to copy the environment, as register allocators can insert HParallelMove between the null check and its first user (which is what this CL is fixing).",
      "parentUuid": "28ffb5ed_e40d85f6",
      "range": {
        "startLine": 57,
        "startChar": 6,
        "endLine": 70,
        "endChar": 50
      },
      "revId": "f6b0f038d5910dc5df8c016116887c01b950525d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}