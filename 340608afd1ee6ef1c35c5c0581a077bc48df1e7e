{
  "comments": [
    {
      "key": {
        "uuid": "bf505ca5_f7f6903f",
        "filename": "runtime/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "add \n\nLIBART_HOST_LDFLAGS :\u003d\n\nto be clear its currently unused?",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 21
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf505ca5_d7259413",
        "filename": "runtime/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-09T06:52:19Z",
      "side": 1,
      "message": "agreed",
      "parentUuid": "bf505ca5_f7f6903f",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 21
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f8a489d_a51caa57",
        "filename": "runtime/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-11T00:25:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf505ca5_d7259413",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 21
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf505ca5_17fc5c1e",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "remove? or explain why disabled?",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 55
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf505ca5_b72808ee",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-09T06:52:19Z",
      "side": 1,
      "message": "doh, I\u0027ll put it back.. I was trying to discover the other way to unlock a Mutex, the answer being to call Wait on a ConditionVariable..",
      "parentUuid": "bf505ca5_17fc5c1e",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 55
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f8a489d_c521ae94",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-11T00:25:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf505ca5_b72808ee",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 55
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f33447f_94228d96",
        "filename": "runtime/base/unix_file/fd_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "its unclear if the delta is needed, but it depends on if bionic is doing the right thing, so I think its better to keep this...",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 96,
        "endChar": 1
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf505ca5_770b608c",
        "filename": "runtime/base/unix_file/mapped_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 68,
        "endChar": 6
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff749443_1d0a5f40",
        "filename": "runtime/base/unix_file/mapped_file.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "sigh, more losage. I wonder if enh can confirm if we need this on bionic. probably.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 41,
        "endChar": 6
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff749443_3d071b37",
        "filename": "runtime/elf_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "micro-API? is that the right term still",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 68
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f804079_470da256",
        "filename": "runtime/elf_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-11T00:25:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff749443_3d071b37",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 68
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfefd030_3d6c0fd8",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1510,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-06-09T20:09:18Z",
      "side": 1,
      "message": "There are two madvise calls in rosalloc.h. I think we need to add this memset call there, too.",
      "range": {
        "startLine": 1510,
        "startChar": 6,
        "endLine": 1510,
        "endChar": 8
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f8a489d_05439626",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1510,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-11T00:25:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfefd030_3d6c0fd8",
      "range": {
        "startLine": 1510,
        "startChar": 6,
        "endLine": 1510,
        "endChar": 8
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff749443_9d308f0d",
        "filename": "runtime/mem_map.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "the other oddities were linux specific. is this more of an apple vs unix issue?",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff749443_9d7acf94",
        "filename": "runtime/mem_map.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-09T06:52:19Z",
      "side": 1,
      "message": "From the Linux man pages its not clear that posix_madvise is the same behavior for DONTNEED as regular madvise. I think the Apple implementation does as much as the specification requires.\n\nPOSIX_MADV_DONTNEED\n\n              Specifies  that  the application expects that it will not access\n              the specified range in the near future.\n\nvs.\n\nMADV_DONTNEED\n              Do not expect access in the near future.  (For the  time  being,\n              the  application is finished with the given range, so the kernel\n              can free resources associated with it.)  Subsequent accesses  of\n              pages  in this range will succeed, but will result either in re-\n              loading of the memory contents from the underlying  mapped  file\n              (see  mmap(2)) or zero-fill-on-demand pages for mappings without\n              an underlying file.",
      "parentUuid": "ff749443_9d308f0d",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f33447f_542c0589",
        "filename": "runtime/utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 1101,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-06-09T06:26:21Z",
      "side": 1,
      "message": "should we include something, even if just \"(native stack not support on darwin)\"?",
      "range": {
        "startLine": 1101,
        "startChar": 1,
        "endLine": 1101,
        "endChar": 6
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f33447f_343e21aa",
        "filename": "runtime/utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 1101,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-09T06:52:19Z",
      "side": 1,
      "message": "agreed",
      "parentUuid": "7f33447f_542c0589",
      "range": {
        "startLine": 1101,
        "startChar": 1,
        "endLine": 1101,
        "endChar": 6
      },
      "revId": "340608afd1ee6ef1c35c5c0581a077bc48df1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}