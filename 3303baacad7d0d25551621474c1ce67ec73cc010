{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "91797240_cd1e8d4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 13,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "typo: Arithmetic",
      "range": {
        "startLine": 13,
        "startChar": 10,
        "endLine": 13,
        "endChar": 22
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb645a22_d2fe2caa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 3190653
      },
      "writtenOn": "2024-02-06T12:52:44Z",
      "side": 1,
      "message": "There is one question left which I didn\u0027t get. Could you please explain it a bit more?",
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2af482e_55c67d3b",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 90,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "style: use lowercase `u`. Same in the other cases",
      "range": {
        "startLine": 90,
        "startChar": 79,
        "endLine": 90,
        "endChar": 81
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "215d8216_833184b5",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 430,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "style: lowercase `m` in mnemonic",
      "range": {
        "startLine": 430,
        "startChar": 45,
        "endLine": 430,
        "endChar": 58
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "210b908e_86a32963",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 430,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:35:27Z",
      "side": 1,
      "message": "Why lower case `m`? I\u0027d think that our style is `kVusMnemonics` (or possibly `kVUSMnemonics`).",
      "parentUuid": "215d8216_833184b5",
      "range": {
        "startLine": 430,
        "startChar": 45,
        "endLine": 430,
        "endChar": 58
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb648618_0d5b54a2",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 441,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "`/Store`",
      "range": {
        "startLine": 441,
        "startChar": 50,
        "endLine": 441,
        "endChar": 54
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66e2a4fa_3e8012e2",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 442,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "`[8]` for consistency with the others",
      "range": {
        "startLine": 442,
        "startChar": 58,
        "endLine": 442,
        "endChar": 60
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e389fb_38427f25",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 452,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "Needs special handling for stores. If we wanted to print the `vl\u003cN\u003er.v` pseudo-instruction instead of `vl\u003cN\u003ere8.v`, this would be simply\n\n    return (is_load || width_index \u003d\u003d 0u)\n        ? VWH_Mnemonics[enum_cast\u003cuint32_t\u003e(nf)][width_index]\n        : nullptr;\n\nBut if you prefer the full `vl\u003cN\u003ere8.v`, then you need a separate table for stores.",
      "range": {
        "startLine": 452,
        "startChar": 17,
        "endLine": 452,
        "endChar": 69
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2013c515_3b9d6eb2",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 521,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "style: `kfpMemMnemonics`",
      "range": {
        "startLine": 521,
        "startChar": 35,
        "endLine": 521,
        "endChar": 49
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e343b5cc_c601fb09",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 521,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "Is the second const in `const char* const` needed? The other `static constexpr const char*` arrays defined in the codebase don\u0027t have it.",
      "range": {
        "startLine": 521,
        "startChar": 29,
        "endLine": 521,
        "endChar": 34
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2bb4152_f2dbb63f",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 521,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "Style: `kFpMemMnemonics`.",
      "range": {
        "startLine": 521,
        "startChar": 35,
        "endLine": 521,
        "endChar": 49
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e74e8ed8_c9395eaf",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 521,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:35:27Z",
      "side": 1,
      "message": "The `constexpr` implies that the variable is `const`, so the top-level `const` is indeed unnecessary.",
      "parentUuid": "e343b5cc_c601fb09",
      "range": {
        "startLine": 521,
        "startChar": 29,
        "endLine": 521,
        "endChar": 34
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "158135f4_ddcea300",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 871,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "No need to change but for the next time: personally I find it better to have early breaks for unexpected values e.g.\n```\nif ((vsew_v \u0026 0x4u) !\u003d 0u || lmul_v \u003d\u003d 0b100) {\n  os_ \u003c\u003c StringPrintf(\"0x%08x\", vtype) \u003c\u003c \"\\t# incorrect VType literal\";\n}\n\n... rest of the code ...\n```\n\nIt also helps to not have so many indentations.",
      "range": {
        "startLine": 871,
        "startChar": 35,
        "endLine": 871,
        "endChar": 46
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4c32053_8f8dde13",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 882,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "Fits on one line. Indentation +2 spaces.",
      "range": {
        "startLine": 881,
        "startChar": 8,
        "endLine": 882,
        "endChar": 36
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "016b65b9_41dc8328",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 887,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "missing `u`",
      "range": {
        "startLine": 887,
        "startChar": 42,
        "endLine": 887,
        "endChar": 43
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "203772cf_9e8a9b7a",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 898,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "Not sure I understand these comments. What do they represent?",
      "range": {
        "startLine": 898,
        "startChar": 45,
        "endLine": 898,
        "endChar": 55
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "048c32c4_732dc4e6",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 909,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "This is the same as `funct6 \u003d\u003d 0x28u || funct6 \u003d\u003d 0x29u`, right?",
      "range": {
        "startLine": 909,
        "startChar": 6,
        "endLine": 909,
        "endChar": 41
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20472137_92424c87",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 909,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:35:27Z",
      "side": 1,
      "message": "No, this is hexadecimal, so it includes 0x2a..0x2f.",
      "parentUuid": "048c32c4_732dc4e6",
      "range": {
        "startLine": 909,
        "startChar": 6,
        "endLine": 909,
        "endChar": 41
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "964146f3_660612fc",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 917,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "typo `vai`?",
      "range": {
        "startLine": 917,
        "startChar": 26,
        "endLine": 917,
        "endChar": 29
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11d7ce61_fef45206",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 920,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "Suggestion: You could define `const bool masked \u003d (funct7 \u0026 1) \u003d\u003d 0;` and use it in a couple of places in this method",
      "range": {
        "startLine": 920,
        "startChar": 19,
        "endLine": 920,
        "endChar": 36
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1343acd_3495bfa5",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 927,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "Not sure I understand these comments",
      "range": {
        "startLine": 927,
        "startChar": 34,
        "endLine": 927,
        "endChar": 49
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac03ceb6_ea977304",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 934,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "Why the angled brackets? Is it because it is special cased below?",
      "range": {
        "startLine": 934,
        "startChar": 61,
        "endLine": 934,
        "endChar": 73
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c222346f_a5753234",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1044,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "This could be all on one line. But if you prefer to keep 4 per line for consistency, that\u0027s also OK.",
      "range": {
        "startLine": 1043,
        "startChar": 12,
        "endLine": 1044,
        "endChar": 53
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45d0b6be_bdacbfaf",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1067,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "Could be 8 per line but 4 per line is also OK to keep. (Same a few times below.)",
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c9ca4a3_58e4ca4a",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1194,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "Indentation +2 spaces.",
      "range": {
        "startLine": 1194,
        "startChar": 10,
        "endLine": 1194,
        "endChar": 12
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78017e1b_02e7894b",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1231,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "nullptr",
      "range": {
        "startLine": 1231,
        "startChar": 61,
        "endLine": 1231,
        "endChar": 75
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c27db763_485c88e6",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1231,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:35:27Z",
      "side": 1,
      "message": "Oh, right. My suggestion in PS17 was wrong for OPFVV.",
      "parentUuid": "78017e1b_02e7894b",
      "range": {
        "startLine": 1231,
        "startChar": 61,
        "endLine": 1231,
        "endChar": 75
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb48cc25_16efe053",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1269,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "Shift the column by one space (to have one space before this comma)?",
      "range": {
        "startLine": 1269,
        "startChar": 28,
        "endLine": 1269,
        "endChar": 29
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "008dd1b2_e96d3525",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1320,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T17:05:50Z",
      "side": 1,
      "message": "`!\u003d 0u` and remove the comment",
      "range": {
        "startLine": 1320,
        "startChar": 14,
        "endLine": 1320,
        "endChar": 44
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf3a3805_81caf578",
        "filename": "disassembler/disassembler_riscv64.cc",
        "patchSetId": 18
      },
      "lineNbr": 1349,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T17:19:57Z",
      "side": 1,
      "message": "Those instructions where `MaybeSwapOperands()` did not swap should be printed as\n\n    vop rd, rs2, rs1\n\nFor example,\n\n    vdiv.vv vd, vs2, vs1\n\nWe need to either reorder the printing here, or flip the condition in `MaybeSwapOperands()`.",
      "range": {
        "startLine": 1347,
        "startChar": 2,
        "endLine": 1349,
        "endChar": 3
      },
      "revId": "3303baacad7d0d25551621474c1ce67ec73cc010",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}