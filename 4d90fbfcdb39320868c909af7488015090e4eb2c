{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4f2c9cf1_f0bec584",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1331,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-18T21:14:05Z",
      "side": 1,
      "message": "Suggest `create` or `getNew`, since it never returns an existing instance.\n\nBtw, why is this injector wrapper necessary? I don\u0027t see it being overridden in any tests.",
      "range": {
        "startLine": 1331,
        "startChar": 32,
        "endLine": 1331,
        "endChar": 35
      },
      "revId": "4d90fbfcdb39320868c909af7488015090e4eb2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5db914e7_846003a0",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-18T21:14:05Z",
      "side": 1,
      "message": "This means we\u0027re not timeout caching the artd instance if `getArtd` is called outside a pinned section. Why not do that?\n\nAnother option is to make it an error to call `getArtd` when there are no pins. That\u0027d enforce the pattern to pin at all entry points, rather than relying on the timeout cache.",
      "range": {
        "startLine": 92,
        "startChar": 12,
        "endLine": 92,
        "endChar": 30
      },
      "revId": "4d90fbfcdb39320868c909af7488015090e4eb2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f0575ac_7d67231e",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-18T21:14:05Z",
      "side": 1,
      "message": "Please fix this WARNING reported by Error Prone: [ReachabilityFenceUsage] reachabilityFence should always be called inside a finally block\n\nAnalyzer Description: Warnings generated by errorprone.\nOwner: farivar@google.com\n\n    [ReachabilityFenceUsage] reachabilityFence should always be called inside a finally block\n                Reference.reachabilityFence(this);\n                                           ^\n        (see https://errorprone.info/bugpattern/ReachabilityFenceUsage)\n\nUse `m RUN_ERROR_PRONE\u003dtrue MyModule` to reproduce locally.\n\nThis finding was found on https://android-build.googleplex.com/builds/build-details/P68180093/targets/errorprone-trunk_staging, but may also be present on other builds.\n\nThis is a different branch than your cl originated on (it was automerged), and thus might better reflect the state of the code in the git_main branch.",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 149,
        "endChar": 46
      },
      "revId": "4d90fbfcdb39320868c909af7488015090e4eb2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65946492_2ac4ecdd",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-18T21:14:05Z",
      "side": 1,
      "message": "This looks like a false positive. Is it possible to suppress errorprone warnings? Does `@SuppressWarnings` work here?\n\n---\n\nAnalyzer Description: Warnings generated by errorprone.\nOwner: farivar@google.com\n\n    [Finalize] Do not override finalize\n            protected void finalize() throws Throwable {\n                           ^\n        (see https://errorprone.info/bugpattern/Finalize)\n\nUse `m RUN_ERROR_PRONE\u003dtrue MyModule` to reproduce locally.\n\nThis finding was found on https://android-build.googleplex.com/builds/build-details/P68180093/targets/errorprone-trunk_staging, but may also be present on other builds.\n\nThis is a different branch than your cl originated on (it was automerged), and thus might better reflect the state of the code in the git_main branch.",
      "range": {
        "startLine": 152,
        "startChar": 0,
        "endLine": 152,
        "endChar": 52
      },
      "revId": "4d90fbfcdb39320868c909af7488015090e4eb2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "650135cb_1941d99f",
        "filename": "libartservice/service/javatests/com/android/server/art/ArtdRefCacheTest.java",
        "patchSetId": 4
      },
      "lineNbr": 158,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-18T21:14:05Z",
      "side": 1,
      "message": "Please test a call with a different binder instance.",
      "range": {
        "startLine": 158,
        "startChar": 38,
        "endLine": 158,
        "endChar": 57
      },
      "revId": "4d90fbfcdb39320868c909af7488015090e4eb2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "322a76e3_9d8c24af",
        "filename": "libartservice/service/javatests/com/android/server/art/ArtdRefCacheTest.java",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-18T21:14:05Z",
      "side": 1,
      "message": "Please comment the locations where instances get created.",
      "range": {
        "startLine": 201,
        "startChar": 26,
        "endLine": 201,
        "endChar": 34
      },
      "revId": "4d90fbfcdb39320868c909af7488015090e4eb2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}