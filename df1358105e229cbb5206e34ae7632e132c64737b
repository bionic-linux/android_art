{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8adb8dcc_cd150327",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1952265
      },
      "writtenOn": "2022-10-31T16:55:26Z",
      "side": 1,
      "message": "FYI this is a follow up from https://android-review.googlesource.com/c/platform/art/+/2229627 as I was unable to upload a new patchset to that CL.",
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0e742eb_79ff48fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-10-31T17:09:44Z",
      "side": 1,
      "message": "Do you have any code size improvements that you saw with these extra optimizations?",
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f32b742_b86db701",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1952265
      },
      "writtenOn": "2022-11-01T18:36:52Z",
      "side": 1,
      "message": "Yes, we saw ~3kb improvement with DuckDuckGo and ~2kb improvement with Signal with no noticeable degradation in compilation time. Let me know if you\u0027d like to see the full results and I can share these with you.",
      "parentUuid": "c0e742eb_79ff48fd",
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbeb9705_feddeb11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-02T08:33:32Z",
      "side": 1,
      "message": "Did you check just those two apps? Or did you test more apps and those are the ones that saw benefit. If you can share % saved that would also be a good indicator. All code saves are good to have but e.g. also we don\u0027t want to run DCE after every pass and so on.",
      "parentUuid": "4f32b742_b86db701",
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38e566ed_757d1f91",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1952265
      },
      "writtenOn": "2022-11-02T19:52:00Z",
      "side": 1,
      "message": "| Did you check just those two apps?\n\nIn total 7 apps were tested (not including boot.oat). No apps showed any noticeable degradation in compile time, note that this DCE pass is only run if loop optimization is successful to try and reduce the amount of times this DCE pass is run.\n\nOf the apps tested 4 showed no change in code size while the other three had reductions of 0.0073%, 0.0040% and 0.0040% while boot-bouncycastle.oat had a reduction of 0.0091%.",
      "parentUuid": "bbeb9705_feddeb11",
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e935cec5_ac6769f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-04T15:56:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "38e566ed_757d1f91",
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c89b6d3d_756b5498",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-10-31T17:09:44Z",
      "side": 1,
      "message": "We usually run: constant folding, instruction simplifier, dead code elimination (in that order). WDYT about moving this before LSE for consistency? You could then remove `dead_code_elimination$after_loop_opt` and not introduce a new pass.\n\nThe dead code we could be missing would be the ones we create in LSE and CHAGuardOptimization which I wouldn\u0027t expect to impact CodeSinking negatively.",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 680,
        "endChar": 46
      },
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f82eb909_d09aae5e",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1952265
      },
      "writtenOn": "2022-11-01T18:36:52Z",
      "side": 1,
      "message": "Generally I agree with the idea however I just tried this change and it has created a code size increase of 176 bytes as opposed to a ~3kb decrease, on a test apk. I have not investigated exactly why this is the case, but there seems to be an issue with this approach.\n\nLet me know if you\u0027d like me to investigate this further or if this empirical increase is enough to discount this approach.",
      "parentUuid": "c89b6d3d_756b5498",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 680,
        "endChar": 46
      },
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a55bce2_a1085f27",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-02T08:33:32Z",
      "side": 1,
      "message": "\u003e tried this change\n\nDo you mean both moving `dead_code_elimination$after_loop_opt` and removing `dead_code_elimination$after_bce`? If so:\n\nThat would mean that either:\nA) DCE is needed before `constant_folding$after_bce` or `instruction_simplifier$after_bce` so that they can be useful\nB) LSE/CHA optimizations generate code that DCE can clean up and it is useful for code sinking or `instruction_simplifier$before_codegen`\nC) both A) and B)\n\nIf you are willing to investigate you can check A) but just moving `dead_code_elimination$after_loop_opt`, and you can check B) by keeping `dead_code_elimination$after_loop_opt` where it is in this patchset and remove `dead_code_elimination$after_bce`.\n\nOnce you find something that locally works I can launch some tests in an internal test suite that we have and report the results. I\u0027d like to have a bit more broad testing before we change the passes.",
      "parentUuid": "f82eb909_d09aae5e",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 680,
        "endChar": 46
      },
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b6abad4_7363421c",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1952265
      },
      "writtenOn": "2022-11-02T19:52:00Z",
      "side": 1,
      "message": "| Do you mean both moving dead_code_elimination$after_loop_opt and removing dead_code_elimination$after_bce?\n\nYes that is what I meant.\n\nI had actually already investigated A) and found that there appears to cause no difference in example apk compilation results. The only difference I could see was a few checker tests that had a few extra instructions removed hence why `dead_code_elimination$after_loop_opt` was placed before `constant_folding$after_bce` and `instruction_simplifier$after_bce` but ultimately the difference appears to be tiny.\n\nB) however is true, removing `dead_code_elimination$after_bce` resulted in a large increase of (~8kb - ~22kb) on example apks.",
      "parentUuid": "7a55bce2_a1085f27",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 680,
        "endChar": 46
      },
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "245b671e_4aa688ca",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-04T15:56:47Z",
      "side": 1,
      "message": "Based on what you said I\u0027d be more partial to:\n1) move `dead_code_elimination$after_loop_opt` after `instruction_simplifier$after_bce` and rename it to `dead_code_elimination$after_bce` and not make it conditional. This would have consistency with the other simplifications we do: constant folding -\u003e instruction simplifier -\u003e DCE.\n2) Rename the old `dead_code_elimination$after_bce` to `dead_code_elimination$after_cha_guard_optimization`, to avoid name clashing.\n3) (optional) It would be interesting to see if `dead_code_elimination$after_cha_guard_optimization` can be conditional on LSE or CHA running.\n\nFYI I ran our test suite and the results were small but with this CL we have a 1K reduction in services.odex. Some apps saw improvements and we even saw slight regressions (e.g. compiling Docs regresses 144 bytes).\n\nvmarko@ do you have an opinion on adding more DCE passes?",
      "parentUuid": "2b6abad4_7363421c",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 680,
        "endChar": 46
      },
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac670d09_94ad1c32",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-04T16:28:13Z",
      "side": 1,
      "message": "I\u0027m OK with adding a few, they are not extremely expensive. But they do add up.\n\nI believe the current DCE is doing a lot of things outside actual dead code elimination. I would prefer to split these out to their own pass (CodeFlowSimplifier?), making actual DCE cheaper. Then we could have more DCE passes.",
      "parentUuid": "245b671e_4aa688ca",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 680,
        "endChar": 46
      },
      "revId": "df1358105e229cbb5206e34ae7632e132c64737b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}