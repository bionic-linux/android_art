{
  "comments": [
    {
      "key": {
        "uuid": "5c94e5c0_9bf46ba3",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 14
      },
      "lineNbr": 1093,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "Maybe list what\u0027s missing?",
      "range": {
        "startLine": 1093,
        "startChar": 13,
        "endLine": 1093,
        "endChar": 37
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21146a32_f92a77ab",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 14
      },
      "lineNbr": 1093,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c94e5c0_9bf46ba3",
      "range": {
        "startLine": 1093,
        "startChar": 13,
        "endLine": 1093,
        "endChar": 37
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "610022f0_7be53f28",
        "filename": "runtime/check_reference_map_visitor.h",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "Because the value can be compressed (for example stack offset, but also you\u0027re mentioning VIP constants), I think we should not offer such an interface of fetching both kind and value.",
      "range": {
        "startLine": 76,
        "startChar": 55,
        "endLine": 76,
        "endChar": 78
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21146a32_7958a761",
        "filename": "runtime/check_reference_map_visitor.h",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "I\u0027m not sure to follow.  Could you be more specific?  FYI, DexRegisterLocation is a \"high-level\" data structure: it doesn\u0027t show implementation details such as stack offsets divided by 4.",
      "parentUuid": "610022f0_7be53f28",
      "range": {
        "startLine": 76,
        "startChar": 55,
        "endLine": 76,
        "endChar": 78
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "610022f0_bbd98771",
        "filename": "runtime/check_reference_map_visitor.h",
        "patchSetId": 14
      },
      "lineNbr": 83,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "To avoid this, we should always use a dex_register_map.GetStackOffsetInBytes",
      "range": {
        "startLine": 83,
        "startChar": 35,
        "endLine": 83,
        "endChar": 54
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1246ea6_56c1347e",
        "filename": "runtime/check_reference_map_visitor.h",
        "patchSetId": 14
      },
      "lineNbr": 83,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "Changed to `location.value / kFrameSlotSize\u0027 in PS15.\n\n`stack_mask.LoadBit\u0027 expects a stack slot value, while `dex_register_map.GetStackOffsetInBytes\u0027 provides a stack offset value (in bytes). Are you suggesting adding a DexRegisterMap::GetStackSlotOffset method?",
      "parentUuid": "610022f0_bbd98771",
      "range": {
        "startLine": 83,
        "startChar": 35,
        "endLine": 83,
        "endChar": 54
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb06509_9e1ab967",
        "filename": "runtime/stack.cc",
        "patchSetId": 14
      },
      "lineNbr": 397,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "Shouldn\u0027t we make this implementation dependent, and therefore not expose it?",
      "range": {
        "startLine": 397,
        "startChar": 5,
        "endLine": 397,
        "endChar": 55
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2162aaee_69bc6502",
        "filename": "runtime/stack.cc",
        "patchSetId": 14
      },
      "lineNbr": 397,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "I think it\u0027s useful to have this information, e.g. in oatdump to display finer statistics.  But we can probably improve this and make the implementation details less visible.  I suggest doing this in another CL.",
      "parentUuid": "5cb06509_9e1ab967",
      "range": {
        "startLine": 397,
        "startChar": 5,
        "endLine": 397,
        "endChar": 55
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612e6292_eb9df166",
        "filename": "runtime/stack.cc",
        "patchSetId": 14
      },
      "lineNbr": 397,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T16:28:50Z",
      "side": 1,
      "message": "sgtm. good point about being useful for oatdump",
      "parentUuid": "2162aaee_69bc6502",
      "range": {
        "startLine": 397,
        "startChar": 5,
        "endLine": 397,
        "endChar": 55
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c94e5c0_3b06f71b",
        "filename": "runtime/stack.cc",
        "patchSetId": 14
      },
      "lineNbr": 409,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 409,
        "startChar": 36,
        "endLine": 409,
        "endChar": 55
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c94e5c0_7bacff6d",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 212,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:25:36Z",
      "side": 1,
      "message": "Just thought about this: isn\u0027t this potentially unaligned? ARM can complain about it. I\u0027d be surprised if target tests pass with this. Maybe we need to read byte by byte?",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 80
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "415f9e27_cacc63b5",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 212,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "I\u0027ll test this on an ARM device and change it to a per-byte I/O if it is an issue.",
      "parentUuid": "5c94e5c0_7bacff6d",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 80
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81a19660_bc2161cf",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 212,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T17:42:46Z",
      "side": 1,
      "message": "FYI I compared the result of `oatdumpd` for the same oat file on the host and the target (Nexus 9) and they were identical.  Here\u0027s the recipe I used:\n\n  m -j30 out/host/linux-x86/bin/oatdumpd\n  m -j30 out/target/product/armv8/data/art-test/arm64/core-optimizing.art\n  out/host/linux-x86/bin/oatdumpd --oat-file\u003dout/target/product/armv8/data/art-test/arm64/core-optimizing.oat \u003eoatdumpd-host.out\n  \n  m -j30 out/target/product/armv8/system/bin/oatdumpd\n  adb push out/target/product/armv8/data/art-test/arm64/core-optimizing.art /data/art-test/arm64\n  adb push out/target/product/armv8/system/bin/oatdumpd /data/art-test/arm64\n  adb push out/target/product/armv8/system/lib64/libartd.so /data/art-test/arm64\n  adb push out/target/product/armv8/system/lib64/libartd-compiler.so /data/art-test/arm64\n  adb push out/target/product/armv8/system/lib64/libartd-disassembler.so /data/art-test/arm64\n  adb push out/target/product/armv8/system/lib64/libvixld.so /data/art-test/arm64\n  adb shell \u0027LD_LIBRARY_PATH\u003d/data/art-test/arm64 /data/art-test/arm64/oatdumpd --oat-file\u003d/data/art-test/arm64/core-optimizing.oat\u0027 \u003eoatdumpd-target-dos.out\n  \n  recode dos.. \u003coatdumpd-target-dos.out \u003eoatdumpd-target.out\n  cmp oatdumpd-host.out oatdumpd-target.out\n\n(I don\u0027t know why the target\u0027s `oatdumpd\u0027 emitted DOS CR-LF end-of-line markers though.)\n\nThe unaligned accessed didn\u0027t seem to cause trouble on ARM64.  Should I try on (32-bit) ARM as well?",
      "parentUuid": "415f9e27_cacc63b5",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 80
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb06509_3e2a857c",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 217,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "dex_register_index?",
      "range": {
        "startLine": 217,
        "startChar": 37,
        "endLine": 217,
        "endChar": 51
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "415f9e27_aad92f71",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 217,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cb06509_3e2a857c",
      "range": {
        "startLine": 217,
        "startChar": 37,
        "endLine": 217,
        "endChar": 51
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "610022f0_bb7507cb",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 255,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:25:36Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 255,
        "startChar": 22,
        "endLine": 255,
        "endChar": 43
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "610022f0_dbf573d3",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 288,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "CanBeEncodedInShortLocation?",
      "range": {
        "startLine": 288,
        "startChar": 14,
        "endLine": 288,
        "endChar": 28
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "415f9e27_2adf7f52",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 288,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "Yes, that\u0027s admittedly better.  Renamed as CanBeEncodedAsShortLocation.",
      "parentUuid": "610022f0_dbf573d3",
      "range": {
        "startLine": 288,
        "startChar": 14,
        "endLine": 288,
        "endChar": 28
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c94e5c0_bb2047a0",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 335,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "size_t?",
      "range": {
        "startLine": 335,
        "startChar": 19,
        "endLine": 335,
        "endChar": 27
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2162aaee_49eac1f8",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 335,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "I opted for uint8_t as it is the underlying type of the art::DexRegisterLocation::kind enum value, which is masked by kKindMask.",
      "parentUuid": "5c94e5c0_bb2047a0",
      "range": {
        "startLine": 335,
        "startChar": 19,
        "endLine": 335,
        "endChar": 27
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "610022f0_bbf2a7e7",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 336,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "size_t?",
      "range": {
        "startLine": 336,
        "startChar": 19,
        "endLine": 336,
        "endChar": 26
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612e6292_0be4bd28",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 336,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "I kept int32_t as it is the type of art::DexRegisterLocation::value, which is masked by kValueMask.",
      "parentUuid": "610022f0_bbf2a7e7",
      "range": {
        "startLine": 336,
        "startChar": 19,
        "endLine": 336,
        "endChar": 26
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612e6292_aba7e9ba",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 336,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T16:28:50Z",
      "side": 1,
      "message": "OK, the comment came by seeing different types for all these constexpr, and that they could be made consistent.",
      "parentUuid": "612e6292_0be4bd28",
      "range": {
        "startLine": 336,
        "startChar": 19,
        "endLine": 336,
        "endChar": 26
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb06509_1e27c9b2",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 340,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "MakeShortLocation?",
      "range": {
        "startLine": 340,
        "startChar": 23,
        "endLine": 340,
        "endChar": 39
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "415f9e27_8aef8b01",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 340,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cb06509_1e27c9b2",
      "range": {
        "startLine": 340,
        "startChar": 23,
        "endLine": 340,
        "endChar": 39
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb06509_decba14f",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 358,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-11T10:05:17Z",
      "side": 1,
      "message": "ExtraKindFromShortLocationOffset?",
      "range": {
        "startLine": 358,
        "startChar": 28,
        "endLine": 358,
        "endChar": 39
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "415f9e27_6a0e976a",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 358,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-11T16:14:18Z",
      "side": 1,
      "message": "Renamed as ExtractKindAtOffset, as the kind may also be the one of a large location.",
      "parentUuid": "5cb06509_decba14f",
      "range": {
        "startLine": 358,
        "startChar": 28,
        "endLine": 358,
        "endChar": 39
      },
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c9d0d70_54c7a292",
        "filename": "tools/generate-operator-out.py",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-03-11T10:08:38Z",
      "side": 1,
      "message": "I don\u0027t think it is necessary to change this file. It only removes blank lines.",
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1ec123e_7f3b2f4d",
        "filename": "tools/generate-operator-out.py",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-12T15:31:01Z",
      "side": 1,
      "message": "Reverted in PS15.",
      "parentUuid": "1c9d0d70_54c7a292",
      "revId": "21b0db4c5e48ff2d16b07b79a4a7c1a336d1357c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}