.<= public static native void art.Trace.enableTracing(java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Thread) -> <null: null>
<= public static void art.Trace.enableMethodTracing(java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Thread) -> <null: null>
=> art.Test988$IterOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> <null: null>
<= art.Test988$IterOp() -> <null: null>
=> public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$IterOp.applyAsInt(int)
..=> static int art.Test988.iter_fibonacci(int)
..<= static int art.Test988.iter_fibonacci(int) -> <class java.lang.Integer: 832040>
.<= public int art.Test988$IterOp.applyAsInt(int) -> <class java.lang.Integer: 832040>
.=> public art.Test988$FibResult(java.lang.String,int,int)
..=> public java.lang.Object()
..<= public java.lang.Object() -> <null: null>
.<= public art.Test988$FibResult(java.lang.String,int,int) -> <null: null>
.=> public boolean java.util.ArrayList.add(java.lang.Object)
..=> private void java.util.ArrayList.ensureCapacityInternal(int)
...=> private void java.util.ArrayList.ensureExplicitCapacity(int)
...<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> <null: null>
..<= private void java.util.ArrayList.ensureCapacityInternal(int) -> <null: null>
fibonacci(30)=832040
.<= public boolean java.util.ArrayList.add(java.lang.Object) -> <class java.lang.Boolean: true>
<= public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator) -> <null: null>
=> art.Test988$RecurOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> <null: null>
<= art.Test988$RecurOp() -> <null: null>
=> public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$RecurOp.applyAsInt(int)
..=> static int art.Test988.fibonacci(int)
...=> static int art.Test988.fibonacci(int)
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
......=> static int art.Test988.fibonacci(int)
......<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
......=> static int art.Test988.fibonacci(int)
......<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 0>
.....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 2>
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 0>
....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
...<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 3>
...=> static int art.Test988.fibonacci(int)
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 0>
....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
....=> static int art.Test988.fibonacci(int)
....<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 1>
...<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 2>
..<= static int art.Test988.fibonacci(int) -> <class java.lang.Integer: 5>
.<= public int art.Test988$RecurOp.applyAsInt(int) -> <class java.lang.Integer: 5>
.=> public art.Test988$FibResult(java.lang.String,int,int)
..=> public java.lang.Object()
..<= public java.lang.Object() -> <null: null>
.<= public art.Test988$FibResult(java.lang.String,int,int) -> <null: null>
.=> public boolean java.util.ArrayList.add(java.lang.Object)
..=> private void java.util.ArrayList.ensureCapacityInternal(int)
...=> private void java.util.ArrayList.ensureExplicitCapacity(int)
...<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> <null: null>
..<= private void java.util.ArrayList.ensureCapacityInternal(int) -> <null: null>
fibonacci(5)=5
.<= public boolean java.util.ArrayList.add(java.lang.Object) -> <class java.lang.Boolean: true>
<= public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator) -> <null: null>
=> art.Test988$IterOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> <null: null>
<= art.Test988$IterOp() -> <null: null>
=> public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$IterOp.applyAsInt(int)
..=> static int art.Test988.iter_fibonacci(int)
...=> public java.lang.StringBuilder()
....=> java.lang.AbstractStringBuilder(int)
.....=> public java.lang.Object()
.....<= public java.lang.Object() -> <null: null>
....<= java.lang.AbstractStringBuilder(int) -> <null: null>
...<= public java.lang.StringBuilder() -> <null: null>
...=> public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)
....=> public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String)
.....=> public int java.lang.String.length()
.....<= public int java.lang.String.length() -> <class java.lang.Integer: 14>
.....=> private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)
.....<= private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int) -> <null: null>
.....=> public void java.lang.String.getChars(int,int,char[],int)
......=> public int java.lang.String.length()
......<= public int java.lang.String.length() -> <class java.lang.Integer: 14>
......=> native void java.lang.String.getCharsNoCheck(int,int,char[],int)
......<= native void java.lang.String.getCharsNoCheck(int,int,char[],int) -> <null: null>
.....<= public void java.lang.String.getChars(int,int,char[],int) -> <null: null>
....<= public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...<= public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...=> public java.lang.StringBuilder java.lang.StringBuilder.append(int)
....=> public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(int)
.....=> static int java.lang.Integer.stringSize(int)
.....<= static int java.lang.Integer.stringSize(int) -> <class java.lang.Integer: 2>
.....=> private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)
......=> private int java.lang.AbstractStringBuilder.newCapacity(int)
......<= private int java.lang.AbstractStringBuilder.newCapacity(int) -> <class java.lang.Integer: 34>
......=> public static char[] java.util.Arrays.copyOf(char[],int)
.......=> public static int java.lang.Math.min(int,int)
.......<= public static int java.lang.Math.min(int,int) -> <class java.lang.Integer: 16>
.......=> public static void java.lang.System.arraycopy(char[],int,char[],int,int)
.......<= public static void java.lang.System.arraycopy(char[],int,char[],int,int) -> <null: null>
......<= public static char[] java.util.Arrays.copyOf(char[],int) -> <class [C: [B, a, d,  , a, r, g, u, m, e, n, t, :,  , -, 1, 9,  , <,  , 0, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>]>
.....<= private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int) -> <null: null>
.....=> static void java.lang.Integer.getChars(int,int,char[])
.....<= static void java.lang.Integer.getChars(int,int,char[]) -> <null: null>
....<= public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(int) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...<= public java.lang.StringBuilder java.lang.StringBuilder.append(int) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...=> public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)
....=> public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String)
.....=> public int java.lang.String.length()
.....<= public int java.lang.String.length() -> <class java.lang.Integer: 4>
.....=> private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)
.....<= private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int) -> <null: null>
.....=> public void java.lang.String.getChars(int,int,char[],int)
......=> public int java.lang.String.length()
......<= public int java.lang.String.length() -> <class java.lang.Integer: 4>
......=> native void java.lang.String.getCharsNoCheck(int,int,char[],int)
......<= native void java.lang.String.getCharsNoCheck(int,int,char[],int) -> <null: null>
.....<= public void java.lang.String.getChars(int,int,char[],int) -> <null: null>
....<= public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...<= public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...=> public java.lang.String java.lang.StringBuilder.toString()
....=> static native java.lang.String java.lang.StringFactory.newStringFromChars(int,int,char[])
....<= static native java.lang.String java.lang.StringFactory.newStringFromChars(int,int,char[]) -> <class java.lang.String: Bad argument: -19 < 0>
...<= public java.lang.String java.lang.StringBuilder.toString() -> <class java.lang.String: Bad argument: -19 < 0>
...=> public java.lang.Error(java.lang.String)
....=> public java.lang.Throwable(java.lang.String)
.....=> public java.lang.Object()
.....<= public java.lang.Object() -> <null: null>
.....=> public static final java.util.List java.util.Collections.emptyList()
.....<= public static final java.util.List java.util.Collections.emptyList() -> <class java.util.Collections$EmptyList: []>
.....=> public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
......=> private static native java.lang.Object java.lang.Throwable.nativeFillInStackTrace()
......<= private static native java.lang.Object java.lang.Throwable.nativeFillInStackTrace() -> <class [Ljava.lang.Object;: <non-deterministic>>
.....<= public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace() -> <class java.lang.Error: java.lang.Error: Bad argument: -19 < 0
	at art.Test988.iter_fibonacci(Test988.java:209)
	at art.Test988$IterOp.applyAsInt(Test988.java:204)
	at art.Test988.doFibTest(Test988.java:297)
	at art.Test988.run(Test988.java:267)
	at Main.main(Main.java:19)
>
....<= public java.lang.Throwable(java.lang.String) -> <null: null>
...<= public java.lang.Error(java.lang.String) -> <null: null>
..<= static int art.Test988.iter_fibonacci(int) EXCEPTION
.<= public int art.Test988$IterOp.applyAsInt(int) EXCEPTION
.=> public art.Test988$FibThrow(java.lang.String,int,java.lang.Throwable)
..=> public java.lang.Object()
..<= public java.lang.Object() -> <null: null>
.<= public art.Test988$FibThrow(java.lang.String,int,java.lang.Throwable) -> <null: null>
.=> public boolean java.util.ArrayList.add(java.lang.Object)
..=> private void java.util.ArrayList.ensureCapacityInternal(int)
...=> private void java.util.ArrayList.ensureExplicitCapacity(int)
...<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> <null: null>
..<= private void java.util.ArrayList.ensureCapacityInternal(int) -> <null: null>
fibonacci(-19) -> java.lang.Error: Bad argument: -19 < 0
	at art.Test988.iter_fibonacci(Test988.java:209)
	at art.Test988$IterOp.applyAsInt(Test988.java:204)
	at art.Test988.doFibTest(Test988.java:297)
	at art.Test988.run(Test988.java:267)
	at Main.main(Main.java:19)

.<= public boolean java.util.ArrayList.add(java.lang.Object) -> <class java.lang.Boolean: true>
<= public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator) -> <null: null>
=> art.Test988$RecurOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> <null: null>
<= art.Test988$RecurOp() -> <null: null>
=> public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$RecurOp.applyAsInt(int)
..=> static int art.Test988.fibonacci(int)
...=> public java.lang.StringBuilder()
....=> java.lang.AbstractStringBuilder(int)
.....=> public java.lang.Object()
.....<= public java.lang.Object() -> <null: null>
....<= java.lang.AbstractStringBuilder(int) -> <null: null>
...<= public java.lang.StringBuilder() -> <null: null>
...=> public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)
....=> public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String)
.....=> public int java.lang.String.length()
.....<= public int java.lang.String.length() -> <class java.lang.Integer: 14>
.....=> private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)
.....<= private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int) -> <null: null>
.....=> public void java.lang.String.getChars(int,int,char[],int)
......=> public int java.lang.String.length()
......<= public int java.lang.String.length() -> <class java.lang.Integer: 14>
......=> native void java.lang.String.getCharsNoCheck(int,int,char[],int)
......<= native void java.lang.String.getCharsNoCheck(int,int,char[],int) -> <null: null>
.....<= public void java.lang.String.getChars(int,int,char[],int) -> <null: null>
....<= public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...<= public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...=> public java.lang.StringBuilder java.lang.StringBuilder.append(int)
....=> public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(int)
.....=> static int java.lang.Integer.stringSize(int)
.....<= static int java.lang.Integer.stringSize(int) -> <class java.lang.Integer: 2>
.....=> private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)
......=> private int java.lang.AbstractStringBuilder.newCapacity(int)
......<= private int java.lang.AbstractStringBuilder.newCapacity(int) -> <class java.lang.Integer: 34>
......=> public static char[] java.util.Arrays.copyOf(char[],int)
.......=> public static int java.lang.Math.min(int,int)
.......<= public static int java.lang.Math.min(int,int) -> <class java.lang.Integer: 16>
.......=> public static void java.lang.System.arraycopy(char[],int,char[],int,int)
.......<= public static void java.lang.System.arraycopy(char[],int,char[],int,int) -> <null: null>
......<= public static char[] java.util.Arrays.copyOf(char[],int) -> <class [C: [B, a, d,  , a, r, g, u, m, e, n, t, :,  , -, 1, 9,  , <,  , 0, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>, <control-0000>]>
.....<= private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int) -> <null: null>
.....=> static void java.lang.Integer.getChars(int,int,char[])
.....<= static void java.lang.Integer.getChars(int,int,char[]) -> <null: null>
....<= public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(int) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...<= public java.lang.StringBuilder java.lang.StringBuilder.append(int) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...=> public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)
....=> public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String)
.....=> public int java.lang.String.length()
.....<= public int java.lang.String.length() -> <class java.lang.Integer: 4>
.....=> private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)
.....<= private void java.lang.AbstractStringBuilder.ensureCapacityInternal(int) -> <null: null>
.....=> public void java.lang.String.getChars(int,int,char[],int)
......=> public int java.lang.String.length()
......<= public int java.lang.String.length() -> <class java.lang.Integer: 4>
......=> native void java.lang.String.getCharsNoCheck(int,int,char[],int)
......<= native void java.lang.String.getCharsNoCheck(int,int,char[],int) -> <null: null>
.....<= public void java.lang.String.getChars(int,int,char[],int) -> <null: null>
....<= public java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...<= public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String) -> <class java.lang.StringBuilder: Bad argument: -19 < 0>
...=> public java.lang.String java.lang.StringBuilder.toString()
....=> static native java.lang.String java.lang.StringFactory.newStringFromChars(int,int,char[])
....<= static native java.lang.String java.lang.StringFactory.newStringFromChars(int,int,char[]) -> <class java.lang.String: Bad argument: -19 < 0>
...<= public java.lang.String java.lang.StringBuilder.toString() -> <class java.lang.String: Bad argument: -19 < 0>
...=> public java.lang.Error(java.lang.String)
....=> public java.lang.Throwable(java.lang.String)
.....=> public java.lang.Object()
.....<= public java.lang.Object() -> <null: null>
.....=> public static final java.util.List java.util.Collections.emptyList()
.....<= public static final java.util.List java.util.Collections.emptyList() -> <class java.util.Collections$EmptyList: []>
.....=> public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
......=> private static native java.lang.Object java.lang.Throwable.nativeFillInStackTrace()
......<= private static native java.lang.Object java.lang.Throwable.nativeFillInStackTrace() -> <class [Ljava.lang.Object;: <non-deterministic>>
.....<= public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace() -> <class java.lang.Error: java.lang.Error: Bad argument: -19 < 0
	at art.Test988.fibonacci(Test988.java:231)
	at art.Test988$RecurOp.applyAsInt(Test988.java:226)
	at art.Test988.doFibTest(Test988.java:297)
	at art.Test988.run(Test988.java:268)
	at Main.main(Main.java:19)
>
....<= public java.lang.Throwable(java.lang.String) -> <null: null>
...<= public java.lang.Error(java.lang.String) -> <null: null>
..<= static int art.Test988.fibonacci(int) EXCEPTION
.<= public int art.Test988$RecurOp.applyAsInt(int) EXCEPTION
.=> public art.Test988$FibThrow(java.lang.String,int,java.lang.Throwable)
..=> public java.lang.Object()
..<= public java.lang.Object() -> <null: null>
.<= public art.Test988$FibThrow(java.lang.String,int,java.lang.Throwable) -> <null: null>
.=> public boolean java.util.ArrayList.add(java.lang.Object)
..=> private void java.util.ArrayList.ensureCapacityInternal(int)
...=> private void java.util.ArrayList.ensureExplicitCapacity(int)
...<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> <null: null>
..<= private void java.util.ArrayList.ensureCapacityInternal(int) -> <null: null>
fibonacci(-19) -> java.lang.Error: Bad argument: -19 < 0
	at art.Test988.fibonacci(Test988.java:231)
	at art.Test988$RecurOp.applyAsInt(Test988.java:226)
	at art.Test988.doFibTest(Test988.java:297)
	at art.Test988.run(Test988.java:268)
	at Main.main(Main.java:19)

.<= public boolean java.util.ArrayList.add(java.lang.Object) -> <class java.lang.Boolean: true>
<= public static void art.Test988.doFibTest(int,java.util.function.IntUnaryOperator) -> <null: null>
=> public static native java.lang.Thread java.lang.Thread.currentThread()
<= public static native java.lang.Thread java.lang.Thread.currentThread() -> <class java.lang.Thread: <non-deterministic>>
=> public static native void art.Trace.disableTracing(java.lang.Thread)
