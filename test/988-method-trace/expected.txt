<= private static native void art.Test988.enableMethodTracing(java.lang.reflect.Method,java.lang.reflect.Method) -> null
=> art.Test988$IterOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> null
<= art.Test988$IterOp() -> null
=> public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$IterOp.applyAsInt(int)
..=> static int art.Test988.iter_fibonacci(int)
..<= static int art.Test988.iter_fibonacci(int) -> 832040
.<= public int art.Test988$IterOp.applyAsInt(int) -> 832040
.=> private static void art.Test988.pushResult(java.lang.String,int,int)
..=> public art.Test988$FibResult(java.lang.String,int,int)
...=> public java.lang.Object()
...<= public java.lang.Object() -> null
..<= public art.Test988$FibResult(java.lang.String,int,int) -> null
..=> public boolean java.util.ArrayList.add(java.lang.Object)
...=> private void java.util.ArrayList.ensureCapacityInternal(int)
....=> private void java.util.ArrayList.ensureExplicitCapacity(int)
....<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> null
...<= private void java.util.ArrayList.ensureCapacityInternal(int) -> null
fibonacci(30)=832040
..<= public boolean java.util.ArrayList.add(java.lang.Object) -> true
.<= private static void art.Test988.pushResult(java.lang.String,int,int) -> null
<= public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator) -> null
=> art.Test988$MemoOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> null
<= art.Test988$MemoOp() -> null
=> public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$MemoOp.applyAsInt(int)
..=> static int art.Test988.memo_fibonacci(int)
...=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 15
...=> public boolean java.util.HashMap.containsKey(java.lang.Object)
....=> static final int java.util.HashMap.hash(java.lang.Object)
.....=> public int java.lang.Integer.hashCode()
......=> public static int java.lang.Integer.hashCode(int)
......<= public static int java.lang.Integer.hashCode(int) -> 15
.....<= public int java.lang.Integer.hashCode() -> 15
....<= static final int java.util.HashMap.hash(java.lang.Object) -> 15
....=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
....<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
...<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
...=> static int art.Test988.memo_fibonacci(int)
....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 14
....=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.....=> static final int java.util.HashMap.hash(java.lang.Object)
......=> public int java.lang.Integer.hashCode()
.......=> public static int java.lang.Integer.hashCode(int)
.......<= public static int java.lang.Integer.hashCode(int) -> 14
......<= public int java.lang.Integer.hashCode() -> 14
.....<= static final int java.util.HashMap.hash(java.lang.Object) -> 14
.....=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.....<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
....<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
....=> static int art.Test988.memo_fibonacci(int)
.....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 13
.....=> public boolean java.util.HashMap.containsKey(java.lang.Object)
......=> static final int java.util.HashMap.hash(java.lang.Object)
.......=> public int java.lang.Integer.hashCode()
........=> public static int java.lang.Integer.hashCode(int)
........<= public static int java.lang.Integer.hashCode(int) -> 13
.......<= public int java.lang.Integer.hashCode() -> 13
......<= static final int java.util.HashMap.hash(java.lang.Object) -> 13
......=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
......<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
.....<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
.....=> static int art.Test988.memo_fibonacci(int)
......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 12
......=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.......=> static final int java.util.HashMap.hash(java.lang.Object)
........=> public int java.lang.Integer.hashCode()
.........=> public static int java.lang.Integer.hashCode(int)
.........<= public static int java.lang.Integer.hashCode(int) -> 12
........<= public int java.lang.Integer.hashCode() -> 12
.......<= static final int java.util.HashMap.hash(java.lang.Object) -> 12
.......=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.......<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
......<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
......=> static int art.Test988.memo_fibonacci(int)
.......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 11
.......=> public boolean java.util.HashMap.containsKey(java.lang.Object)
........=> static final int java.util.HashMap.hash(java.lang.Object)
.........=> public int java.lang.Integer.hashCode()
..........=> public static int java.lang.Integer.hashCode(int)
..........<= public static int java.lang.Integer.hashCode(int) -> 11
.........<= public int java.lang.Integer.hashCode() -> 11
........<= static final int java.util.HashMap.hash(java.lang.Object) -> 11
........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
.......<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
.......=> static int art.Test988.memo_fibonacci(int)
........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 10
........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.........=> static final int java.util.HashMap.hash(java.lang.Object)
..........=> public int java.lang.Integer.hashCode()
...........=> public static int java.lang.Integer.hashCode(int)
...........<= public static int java.lang.Integer.hashCode(int) -> 10
..........<= public int java.lang.Integer.hashCode() -> 10
.........<= static final int java.util.HashMap.hash(java.lang.Object) -> 10
.........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
........=> static int art.Test988.memo_fibonacci(int)
.........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 9
.........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
..........=> static final int java.util.HashMap.hash(java.lang.Object)
...........=> public int java.lang.Integer.hashCode()
............=> public static int java.lang.Integer.hashCode(int)
............<= public static int java.lang.Integer.hashCode(int) -> 9
...........<= public int java.lang.Integer.hashCode() -> 9
..........<= static final int java.util.HashMap.hash(java.lang.Object) -> 9
..........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
.........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
.........=> static int art.Test988.memo_fibonacci(int)
..........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 8
..........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
...........=> static final int java.util.HashMap.hash(java.lang.Object)
............=> public int java.lang.Integer.hashCode()
.............=> public static int java.lang.Integer.hashCode(int)
.............<= public static int java.lang.Integer.hashCode(int) -> 8
............<= public int java.lang.Integer.hashCode() -> 8
...........<= static final int java.util.HashMap.hash(java.lang.Object) -> 8
...........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
...........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
..........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
..........=> static int art.Test988.memo_fibonacci(int)
...........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 7
...........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
............=> static final int java.util.HashMap.hash(java.lang.Object)
.............=> public int java.lang.Integer.hashCode()
..............=> public static int java.lang.Integer.hashCode(int)
..............<= public static int java.lang.Integer.hashCode(int) -> 7
.............<= public int java.lang.Integer.hashCode() -> 7
............<= static final int java.util.HashMap.hash(java.lang.Object) -> 7
............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
...........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
...........=> static int art.Test988.memo_fibonacci(int)
............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 6
............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.............=> static final int java.util.HashMap.hash(java.lang.Object)
..............=> public int java.lang.Integer.hashCode()
...............=> public static int java.lang.Integer.hashCode(int)
...............<= public static int java.lang.Integer.hashCode(int) -> 6
..............<= public int java.lang.Integer.hashCode() -> 6
.............<= static final int java.util.HashMap.hash(java.lang.Object) -> 6
.............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
............=> static int art.Test988.memo_fibonacci(int)
.............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 5
.............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
..............=> static final int java.util.HashMap.hash(java.lang.Object)
...............=> public int java.lang.Integer.hashCode()
................=> public static int java.lang.Integer.hashCode(int)
................<= public static int java.lang.Integer.hashCode(int) -> 5
...............<= public int java.lang.Integer.hashCode() -> 5
..............<= static final int java.util.HashMap.hash(java.lang.Object) -> 5
..............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
.............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
.............=> static int art.Test988.memo_fibonacci(int)
..............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 4
..............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
...............=> static final int java.util.HashMap.hash(java.lang.Object)
................=> public int java.lang.Integer.hashCode()
.................=> public static int java.lang.Integer.hashCode(int)
.................<= public static int java.lang.Integer.hashCode(int) -> 4
................<= public int java.lang.Integer.hashCode() -> 4
...............<= static final int java.util.HashMap.hash(java.lang.Object) -> 4
...............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
...............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
..............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
..............=> static int art.Test988.memo_fibonacci(int)
...............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 3
...............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
................=> static final int java.util.HashMap.hash(java.lang.Object)
.................=> public int java.lang.Integer.hashCode()
..................=> public static int java.lang.Integer.hashCode(int)
..................<= public static int java.lang.Integer.hashCode(int) -> 3
.................<= public int java.lang.Integer.hashCode() -> 3
................<= static final int java.util.HashMap.hash(java.lang.Object) -> 3
................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
...............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
...............=> static int art.Test988.memo_fibonacci(int)
................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 2
................=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.................=> static final int java.util.HashMap.hash(java.lang.Object)
..................=> public int java.lang.Integer.hashCode()
...................=> public static int java.lang.Integer.hashCode(int)
...................<= public static int java.lang.Integer.hashCode(int) -> 2
..................<= public int java.lang.Integer.hashCode() -> 2
.................<= static final int java.util.HashMap.hash(java.lang.Object) -> 2
.................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> null
................<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> false
................=> static int art.Test988.memo_fibonacci(int)
.................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 1
.................=> public boolean java.util.HashMap.containsKey(java.lang.Object)
..................=> static final int java.util.HashMap.hash(java.lang.Object)
...................=> public int java.lang.Integer.hashCode()
....................=> public static int java.lang.Integer.hashCode(int)
....................<= public static int java.lang.Integer.hashCode(int) -> 1
...................<= public int java.lang.Integer.hashCode() -> 1
..................<= static final int java.util.HashMap.hash(java.lang.Object) -> 1
..................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 1=1
.................<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
.................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 1
.................=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
..................=> static final int java.util.HashMap.hash(java.lang.Object)
...................=> public int java.lang.Integer.hashCode()
....................=> public static int java.lang.Integer.hashCode(int)
....................<= public static int java.lang.Integer.hashCode(int) -> 1
...................<= public int java.lang.Integer.hashCode() -> 1
..................<= static final int java.util.HashMap.hash(java.lang.Object) -> 1
..................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 1=1
.................<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 1
.................=> public int java.lang.Integer.intValue()
.................<= public int java.lang.Integer.intValue() -> 1
................<= static int art.Test988.memo_fibonacci(int) -> 1
................=> static int art.Test988.memo_fibonacci(int)
.................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 0
.................=> public boolean java.util.HashMap.containsKey(java.lang.Object)
..................=> static final int java.util.HashMap.hash(java.lang.Object)
...................=> public int java.lang.Integer.hashCode()
....................=> public static int java.lang.Integer.hashCode(int)
....................<= public static int java.lang.Integer.hashCode(int) -> 0
...................<= public int java.lang.Integer.hashCode() -> 0
..................<= static final int java.util.HashMap.hash(java.lang.Object) -> 0
..................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 0=0
.................<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
.................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 0
.................=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
..................=> static final int java.util.HashMap.hash(java.lang.Object)
...................=> public int java.lang.Integer.hashCode()
....................=> public static int java.lang.Integer.hashCode(int)
....................<= public static int java.lang.Integer.hashCode(int) -> 0
...................<= public int java.lang.Integer.hashCode() -> 0
..................<= static final int java.util.HashMap.hash(java.lang.Object) -> 0
..................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 0=0
.................<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 0
.................=> public int java.lang.Integer.intValue()
.................<= public int java.lang.Integer.intValue() -> 0
................<= static int art.Test988.memo_fibonacci(int) -> 0
................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 2
................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 1
................=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
.................=> static final int java.util.HashMap.hash(java.lang.Object)
..................=> public int java.lang.Integer.hashCode()
...................=> public static int java.lang.Integer.hashCode(int)
...................<= public static int java.lang.Integer.hashCode(int) -> 2
..................<= public int java.lang.Integer.hashCode() -> 2
.................<= static final int java.util.HashMap.hash(java.lang.Object) -> 2
.................=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
..................=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
...................=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
....................=> public java.lang.Object()
....................<= public java.lang.Object() -> null
...................<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
..................<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 2=1
..................=> void java.util.HashMap.afterNodeInsertion(boolean)
..................<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
.................<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
................<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
...............<= static int art.Test988.memo_fibonacci(int) -> 1
...............=> static int art.Test988.memo_fibonacci(int)
................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 1
................=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.................=> static final int java.util.HashMap.hash(java.lang.Object)
..................=> public int java.lang.Integer.hashCode()
...................=> public static int java.lang.Integer.hashCode(int)
...................<= public static int java.lang.Integer.hashCode(int) -> 1
..................<= public int java.lang.Integer.hashCode() -> 1
.................<= static final int java.util.HashMap.hash(java.lang.Object) -> 1
.................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 1=1
................<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
................=> public static java.lang.Integer java.lang.Integer.valueOf(int)
................<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 1
................=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
.................=> static final int java.util.HashMap.hash(java.lang.Object)
..................=> public int java.lang.Integer.hashCode()
...................=> public static int java.lang.Integer.hashCode(int)
...................<= public static int java.lang.Integer.hashCode(int) -> 1
..................<= public int java.lang.Integer.hashCode() -> 1
.................<= static final int java.util.HashMap.hash(java.lang.Object) -> 1
.................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 1=1
................<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 1
................=> public int java.lang.Integer.intValue()
................<= public int java.lang.Integer.intValue() -> 1
...............<= static int art.Test988.memo_fibonacci(int) -> 1
...............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 3
...............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 2
...............=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
................=> static final int java.util.HashMap.hash(java.lang.Object)
.................=> public int java.lang.Integer.hashCode()
..................=> public static int java.lang.Integer.hashCode(int)
..................<= public static int java.lang.Integer.hashCode(int) -> 3
.................<= public int java.lang.Integer.hashCode() -> 3
................<= static final int java.util.HashMap.hash(java.lang.Object) -> 3
................=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
.................=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
..................=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
...................=> public java.lang.Object()
...................<= public java.lang.Object() -> null
..................<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
.................<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 3=2
.................=> void java.util.HashMap.afterNodeInsertion(boolean)
.................<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
................<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
...............<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
..............<= static int art.Test988.memo_fibonacci(int) -> 2
..............=> static int art.Test988.memo_fibonacci(int)
...............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 2
...............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
................=> static final int java.util.HashMap.hash(java.lang.Object)
.................=> public int java.lang.Integer.hashCode()
..................=> public static int java.lang.Integer.hashCode(int)
..................<= public static int java.lang.Integer.hashCode(int) -> 2
.................<= public int java.lang.Integer.hashCode() -> 2
................<= static final int java.util.HashMap.hash(java.lang.Object) -> 2
................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 2=1
...............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
...............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 2
...............=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
................=> static final int java.util.HashMap.hash(java.lang.Object)
.................=> public int java.lang.Integer.hashCode()
..................=> public static int java.lang.Integer.hashCode(int)
..................<= public static int java.lang.Integer.hashCode(int) -> 2
.................<= public int java.lang.Integer.hashCode() -> 2
................<= static final int java.util.HashMap.hash(java.lang.Object) -> 2
................=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
................<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 2=1
...............<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 1
...............=> public int java.lang.Integer.intValue()
...............<= public int java.lang.Integer.intValue() -> 1
..............<= static int art.Test988.memo_fibonacci(int) -> 1
..............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 4
..............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 3
..............=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
...............=> static final int java.util.HashMap.hash(java.lang.Object)
................=> public int java.lang.Integer.hashCode()
.................=> public static int java.lang.Integer.hashCode(int)
.................<= public static int java.lang.Integer.hashCode(int) -> 4
................<= public int java.lang.Integer.hashCode() -> 4
...............<= static final int java.util.HashMap.hash(java.lang.Object) -> 4
...............=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
................=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.................=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
..................=> public java.lang.Object()
..................<= public java.lang.Object() -> null
.................<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
................<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 4=3
................=> void java.util.HashMap.afterNodeInsertion(boolean)
................<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
...............<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
..............<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
.............<= static int art.Test988.memo_fibonacci(int) -> 3
.............=> static int art.Test988.memo_fibonacci(int)
..............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 3
..............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
...............=> static final int java.util.HashMap.hash(java.lang.Object)
................=> public int java.lang.Integer.hashCode()
.................=> public static int java.lang.Integer.hashCode(int)
.................<= public static int java.lang.Integer.hashCode(int) -> 3
................<= public int java.lang.Integer.hashCode() -> 3
...............<= static final int java.util.HashMap.hash(java.lang.Object) -> 3
...............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
...............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 3=2
..............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
..............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 3
..............=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
...............=> static final int java.util.HashMap.hash(java.lang.Object)
................=> public int java.lang.Integer.hashCode()
.................=> public static int java.lang.Integer.hashCode(int)
.................<= public static int java.lang.Integer.hashCode(int) -> 3
................<= public int java.lang.Integer.hashCode() -> 3
...............<= static final int java.util.HashMap.hash(java.lang.Object) -> 3
...............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
...............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 3=2
..............<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 2
..............=> public int java.lang.Integer.intValue()
..............<= public int java.lang.Integer.intValue() -> 2
.............<= static int art.Test988.memo_fibonacci(int) -> 2
.............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 5
.............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 5
.............=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
..............=> static final int java.util.HashMap.hash(java.lang.Object)
...............=> public int java.lang.Integer.hashCode()
................=> public static int java.lang.Integer.hashCode(int)
................<= public static int java.lang.Integer.hashCode(int) -> 5
...............<= public int java.lang.Integer.hashCode() -> 5
..............<= static final int java.util.HashMap.hash(java.lang.Object) -> 5
..............=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
...............=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
................=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.................=> public java.lang.Object()
.................<= public java.lang.Object() -> null
................<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
...............<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 5=5
...............=> void java.util.HashMap.afterNodeInsertion(boolean)
...............<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
..............<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
.............<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
............<= static int art.Test988.memo_fibonacci(int) -> 5
............=> static int art.Test988.memo_fibonacci(int)
.............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 4
.............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
..............=> static final int java.util.HashMap.hash(java.lang.Object)
...............=> public int java.lang.Integer.hashCode()
................=> public static int java.lang.Integer.hashCode(int)
................<= public static int java.lang.Integer.hashCode(int) -> 4
...............<= public int java.lang.Integer.hashCode() -> 4
..............<= static final int java.util.HashMap.hash(java.lang.Object) -> 4
..............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 4=3
.............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
.............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 4
.............=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
..............=> static final int java.util.HashMap.hash(java.lang.Object)
...............=> public int java.lang.Integer.hashCode()
................=> public static int java.lang.Integer.hashCode(int)
................<= public static int java.lang.Integer.hashCode(int) -> 4
...............<= public int java.lang.Integer.hashCode() -> 4
..............<= static final int java.util.HashMap.hash(java.lang.Object) -> 4
..............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 4=3
.............<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 3
.............=> public int java.lang.Integer.intValue()
.............<= public int java.lang.Integer.intValue() -> 3
............<= static int art.Test988.memo_fibonacci(int) -> 3
............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 6
............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 8
............=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
.............=> static final int java.util.HashMap.hash(java.lang.Object)
..............=> public int java.lang.Integer.hashCode()
...............=> public static int java.lang.Integer.hashCode(int)
...............<= public static int java.lang.Integer.hashCode(int) -> 6
..............<= public int java.lang.Integer.hashCode() -> 6
.............<= static final int java.util.HashMap.hash(java.lang.Object) -> 6
.............=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
..............=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
...............=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
................=> public java.lang.Object()
................<= public java.lang.Object() -> null
...............<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
..............<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 6=8
..............=> void java.util.HashMap.afterNodeInsertion(boolean)
..............<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
.............<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
............<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
...........<= static int art.Test988.memo_fibonacci(int) -> 8
...........=> static int art.Test988.memo_fibonacci(int)
............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 5
............=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.............=> static final int java.util.HashMap.hash(java.lang.Object)
..............=> public int java.lang.Integer.hashCode()
...............=> public static int java.lang.Integer.hashCode(int)
...............<= public static int java.lang.Integer.hashCode(int) -> 5
..............<= public int java.lang.Integer.hashCode() -> 5
.............<= static final int java.util.HashMap.hash(java.lang.Object) -> 5
.............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 5=5
............<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
............=> public static java.lang.Integer java.lang.Integer.valueOf(int)
............<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 5
............=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
.............=> static final int java.util.HashMap.hash(java.lang.Object)
..............=> public int java.lang.Integer.hashCode()
...............=> public static int java.lang.Integer.hashCode(int)
...............<= public static int java.lang.Integer.hashCode(int) -> 5
..............<= public int java.lang.Integer.hashCode() -> 5
.............<= static final int java.util.HashMap.hash(java.lang.Object) -> 5
.............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 5=5
............<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 5
............=> public int java.lang.Integer.intValue()
............<= public int java.lang.Integer.intValue() -> 5
...........<= static int art.Test988.memo_fibonacci(int) -> 5
...........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 7
...........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 13
...........=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
............=> static final int java.util.HashMap.hash(java.lang.Object)
.............=> public int java.lang.Integer.hashCode()
..............=> public static int java.lang.Integer.hashCode(int)
..............<= public static int java.lang.Integer.hashCode(int) -> 7
.............<= public int java.lang.Integer.hashCode() -> 7
............<= static final int java.util.HashMap.hash(java.lang.Object) -> 7
............=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
.............=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
..............=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
...............=> public java.lang.Object()
...............<= public java.lang.Object() -> null
..............<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
.............<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 7=13
.............=> void java.util.HashMap.afterNodeInsertion(boolean)
.............<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
............<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
...........<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
..........<= static int art.Test988.memo_fibonacci(int) -> 13
..........=> static int art.Test988.memo_fibonacci(int)
...........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 6
...........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
............=> static final int java.util.HashMap.hash(java.lang.Object)
.............=> public int java.lang.Integer.hashCode()
..............=> public static int java.lang.Integer.hashCode(int)
..............<= public static int java.lang.Integer.hashCode(int) -> 6
.............<= public int java.lang.Integer.hashCode() -> 6
............<= static final int java.util.HashMap.hash(java.lang.Object) -> 6
............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 6=8
...........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
...........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 6
...........=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
............=> static final int java.util.HashMap.hash(java.lang.Object)
.............=> public int java.lang.Integer.hashCode()
..............=> public static int java.lang.Integer.hashCode(int)
..............<= public static int java.lang.Integer.hashCode(int) -> 6
.............<= public int java.lang.Integer.hashCode() -> 6
............<= static final int java.util.HashMap.hash(java.lang.Object) -> 6
............=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
............<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 6=8
...........<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 8
...........=> public int java.lang.Integer.intValue()
...........<= public int java.lang.Integer.intValue() -> 8
..........<= static int art.Test988.memo_fibonacci(int) -> 8
..........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 8
..........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 21
..........=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
...........=> static final int java.util.HashMap.hash(java.lang.Object)
............=> public int java.lang.Integer.hashCode()
.............=> public static int java.lang.Integer.hashCode(int)
.............<= public static int java.lang.Integer.hashCode(int) -> 8
............<= public int java.lang.Integer.hashCode() -> 8
...........<= static final int java.util.HashMap.hash(java.lang.Object) -> 8
...........=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
............=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.............=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
..............=> public java.lang.Object()
..............<= public java.lang.Object() -> null
.............<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
............<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 8=21
............=> void java.util.HashMap.afterNodeInsertion(boolean)
............<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
...........<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
..........<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
.........<= static int art.Test988.memo_fibonacci(int) -> 21
.........=> static int art.Test988.memo_fibonacci(int)
..........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 7
..........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
...........=> static final int java.util.HashMap.hash(java.lang.Object)
............=> public int java.lang.Integer.hashCode()
.............=> public static int java.lang.Integer.hashCode(int)
.............<= public static int java.lang.Integer.hashCode(int) -> 7
............<= public int java.lang.Integer.hashCode() -> 7
...........<= static final int java.util.HashMap.hash(java.lang.Object) -> 7
...........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
...........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 7=13
..........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
..........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
..........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 7
..........=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
...........=> static final int java.util.HashMap.hash(java.lang.Object)
............=> public int java.lang.Integer.hashCode()
.............=> public static int java.lang.Integer.hashCode(int)
.............<= public static int java.lang.Integer.hashCode(int) -> 7
............<= public int java.lang.Integer.hashCode() -> 7
...........<= static final int java.util.HashMap.hash(java.lang.Object) -> 7
...........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
...........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 7=13
..........<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 13
..........=> public int java.lang.Integer.intValue()
..........<= public int java.lang.Integer.intValue() -> 13
.........<= static int art.Test988.memo_fibonacci(int) -> 13
.........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 9
.........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 34
.........=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
..........=> static final int java.util.HashMap.hash(java.lang.Object)
...........=> public int java.lang.Integer.hashCode()
............=> public static int java.lang.Integer.hashCode(int)
............<= public static int java.lang.Integer.hashCode(int) -> 9
...........<= public int java.lang.Integer.hashCode() -> 9
..........<= static final int java.util.HashMap.hash(java.lang.Object) -> 9
..........=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
...........=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
............=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.............=> public java.lang.Object()
.............<= public java.lang.Object() -> null
............<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
...........<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 9=34
...........=> void java.util.HashMap.afterNodeInsertion(boolean)
...........<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
..........<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
.........<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
........<= static int art.Test988.memo_fibonacci(int) -> 34
........=> static int art.Test988.memo_fibonacci(int)
.........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 8
.........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
..........=> static final int java.util.HashMap.hash(java.lang.Object)
...........=> public int java.lang.Integer.hashCode()
............=> public static int java.lang.Integer.hashCode(int)
............<= public static int java.lang.Integer.hashCode(int) -> 8
...........<= public int java.lang.Integer.hashCode() -> 8
..........<= static final int java.util.HashMap.hash(java.lang.Object) -> 8
..........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 8=21
.........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
.........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 8
.........=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
..........=> static final int java.util.HashMap.hash(java.lang.Object)
...........=> public int java.lang.Integer.hashCode()
............=> public static int java.lang.Integer.hashCode(int)
............<= public static int java.lang.Integer.hashCode(int) -> 8
...........<= public int java.lang.Integer.hashCode() -> 8
..........<= static final int java.util.HashMap.hash(java.lang.Object) -> 8
..........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
..........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 8=21
.........<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 21
.........=> public int java.lang.Integer.intValue()
.........<= public int java.lang.Integer.intValue() -> 21
........<= static int art.Test988.memo_fibonacci(int) -> 21
........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 10
........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 55
........=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
.........=> static final int java.util.HashMap.hash(java.lang.Object)
..........=> public int java.lang.Integer.hashCode()
...........=> public static int java.lang.Integer.hashCode(int)
...........<= public static int java.lang.Integer.hashCode(int) -> 10
..........<= public int java.lang.Integer.hashCode() -> 10
.........<= static final int java.util.HashMap.hash(java.lang.Object) -> 10
.........=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
..........=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
...........=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
............=> public java.lang.Object()
............<= public java.lang.Object() -> null
...........<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
..........<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 10=55
..........=> void java.util.HashMap.afterNodeInsertion(boolean)
..........<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
.........<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
........<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
.......<= static int art.Test988.memo_fibonacci(int) -> 55
.......=> static int art.Test988.memo_fibonacci(int)
........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 9
........=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.........=> static final int java.util.HashMap.hash(java.lang.Object)
..........=> public int java.lang.Integer.hashCode()
...........=> public static int java.lang.Integer.hashCode(int)
...........<= public static int java.lang.Integer.hashCode(int) -> 9
..........<= public int java.lang.Integer.hashCode() -> 9
.........<= static final int java.util.HashMap.hash(java.lang.Object) -> 9
.........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 9=34
........<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
........=> public static java.lang.Integer java.lang.Integer.valueOf(int)
........<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 9
........=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
.........=> static final int java.util.HashMap.hash(java.lang.Object)
..........=> public int java.lang.Integer.hashCode()
...........=> public static int java.lang.Integer.hashCode(int)
...........<= public static int java.lang.Integer.hashCode(int) -> 9
..........<= public int java.lang.Integer.hashCode() -> 9
.........<= static final int java.util.HashMap.hash(java.lang.Object) -> 9
.........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 9=34
........<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 34
........=> public int java.lang.Integer.intValue()
........<= public int java.lang.Integer.intValue() -> 34
.......<= static int art.Test988.memo_fibonacci(int) -> 34
.......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 11
.......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 89
.......=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
........=> static final int java.util.HashMap.hash(java.lang.Object)
.........=> public int java.lang.Integer.hashCode()
..........=> public static int java.lang.Integer.hashCode(int)
..........<= public static int java.lang.Integer.hashCode(int) -> 11
.........<= public int java.lang.Integer.hashCode() -> 11
........<= static final int java.util.HashMap.hash(java.lang.Object) -> 11
........=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
.........=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
..........=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
...........=> public java.lang.Object()
...........<= public java.lang.Object() -> null
..........<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
.........<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 11=89
.........=> void java.util.HashMap.afterNodeInsertion(boolean)
.........<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
........<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
.......<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
......<= static int art.Test988.memo_fibonacci(int) -> 89
......=> static int art.Test988.memo_fibonacci(int)
.......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 10
.......=> public boolean java.util.HashMap.containsKey(java.lang.Object)
........=> static final int java.util.HashMap.hash(java.lang.Object)
.........=> public int java.lang.Integer.hashCode()
..........=> public static int java.lang.Integer.hashCode(int)
..........<= public static int java.lang.Integer.hashCode(int) -> 10
.........<= public int java.lang.Integer.hashCode() -> 10
........<= static final int java.util.HashMap.hash(java.lang.Object) -> 10
........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 10=55
.......<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
.......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 10
.......=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
........=> static final int java.util.HashMap.hash(java.lang.Object)
.........=> public int java.lang.Integer.hashCode()
..........=> public static int java.lang.Integer.hashCode(int)
..........<= public static int java.lang.Integer.hashCode(int) -> 10
.........<= public int java.lang.Integer.hashCode() -> 10
........<= static final int java.util.HashMap.hash(java.lang.Object) -> 10
........=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
........<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 10=55
.......<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 55
.......=> public int java.lang.Integer.intValue()
.......<= public int java.lang.Integer.intValue() -> 55
......<= static int art.Test988.memo_fibonacci(int) -> 55
......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 12
......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.......=> public java.lang.Integer(int)
........=> public java.lang.Number()
.........=> public java.lang.Object()
.........<= public java.lang.Object() -> null
........<= public java.lang.Number() -> null
.......<= public java.lang.Integer(int) -> null
......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 144
......=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
.......=> static final int java.util.HashMap.hash(java.lang.Object)
........=> public int java.lang.Integer.hashCode()
.........=> public static int java.lang.Integer.hashCode(int)
.........<= public static int java.lang.Integer.hashCode(int) -> 12
........<= public int java.lang.Integer.hashCode() -> 12
.......<= static final int java.util.HashMap.hash(java.lang.Object) -> 12
.......=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
........=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.........=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
..........=> public java.lang.Object()
..........<= public java.lang.Object() -> null
.........<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
........<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 12=144
........=> final java.util.HashMap$Node[] java.util.HashMap.resize()
........<= final java.util.HashMap$Node[] java.util.HashMap.resize() -> [0=0, 1=1, 2=1, 3=2, 4=3, 5=5, 6=8, 7=13, 8=21, 9=34, 10=55, 11=89, 12=144, 13=233, 14=377, 15=610, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
........=> void java.util.HashMap.afterNodeInsertion(boolean)
........<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
.......<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
......<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
.....<= static int art.Test988.memo_fibonacci(int) -> 144
.....=> static int art.Test988.memo_fibonacci(int)
......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 11
......=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.......=> static final int java.util.HashMap.hash(java.lang.Object)
........=> public int java.lang.Integer.hashCode()
.........=> public static int java.lang.Integer.hashCode(int)
.........<= public static int java.lang.Integer.hashCode(int) -> 11
........<= public int java.lang.Integer.hashCode() -> 11
.......<= static final int java.util.HashMap.hash(java.lang.Object) -> 11
.......=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.......<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 11=89
......<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
......=> public static java.lang.Integer java.lang.Integer.valueOf(int)
......<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 11
......=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
.......=> static final int java.util.HashMap.hash(java.lang.Object)
........=> public int java.lang.Integer.hashCode()
.........=> public static int java.lang.Integer.hashCode(int)
.........<= public static int java.lang.Integer.hashCode(int) -> 11
........<= public int java.lang.Integer.hashCode() -> 11
.......<= static final int java.util.HashMap.hash(java.lang.Object) -> 11
.......=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.......<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 11=89
......<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 89
......=> public int java.lang.Integer.intValue()
......<= public int java.lang.Integer.intValue() -> 89
.....<= static int art.Test988.memo_fibonacci(int) -> 89
.....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 13
.....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
......=> public java.lang.Integer(int)
.......=> public java.lang.Number()
........=> public java.lang.Object()
........<= public java.lang.Object() -> null
.......<= public java.lang.Number() -> null
......<= public java.lang.Integer(int) -> null
.....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 233
.....=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
......=> static final int java.util.HashMap.hash(java.lang.Object)
.......=> public int java.lang.Integer.hashCode()
........=> public static int java.lang.Integer.hashCode(int)
........<= public static int java.lang.Integer.hashCode(int) -> 13
.......<= public int java.lang.Integer.hashCode() -> 13
......<= static final int java.util.HashMap.hash(java.lang.Object) -> 13
......=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
.......=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
........=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.........=> public java.lang.Object()
.........<= public java.lang.Object() -> null
........<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
.......<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 13=233
.......=> void java.util.HashMap.afterNodeInsertion(boolean)
.......<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
......<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
.....<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
....<= static int art.Test988.memo_fibonacci(int) -> 233
....=> static int art.Test988.memo_fibonacci(int)
.....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 12
.....=> public boolean java.util.HashMap.containsKey(java.lang.Object)
......=> static final int java.util.HashMap.hash(java.lang.Object)
.......=> public int java.lang.Integer.hashCode()
........=> public static int java.lang.Integer.hashCode(int)
........<= public static int java.lang.Integer.hashCode(int) -> 12
.......<= public int java.lang.Integer.hashCode() -> 12
......<= static final int java.util.HashMap.hash(java.lang.Object) -> 12
......=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
......<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 12=144
.....<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
.....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 12
.....=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
......=> static final int java.util.HashMap.hash(java.lang.Object)
.......=> public int java.lang.Integer.hashCode()
........=> public static int java.lang.Integer.hashCode(int)
........<= public static int java.lang.Integer.hashCode(int) -> 12
.......<= public int java.lang.Integer.hashCode() -> 12
......<= static final int java.util.HashMap.hash(java.lang.Object) -> 12
......=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
......<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 12=144
.....<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 144
.....=> public int java.lang.Integer.intValue()
.....<= public int java.lang.Integer.intValue() -> 144
....<= static int art.Test988.memo_fibonacci(int) -> 144
....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 14
....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
.....=> public java.lang.Integer(int)
......=> public java.lang.Number()
.......=> public java.lang.Object()
.......<= public java.lang.Object() -> null
......<= public java.lang.Number() -> null
.....<= public java.lang.Integer(int) -> null
....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 377
....=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
.....=> static final int java.util.HashMap.hash(java.lang.Object)
......=> public int java.lang.Integer.hashCode()
.......=> public static int java.lang.Integer.hashCode(int)
.......<= public static int java.lang.Integer.hashCode(int) -> 14
......<= public int java.lang.Integer.hashCode() -> 14
.....<= static final int java.util.HashMap.hash(java.lang.Object) -> 14
.....=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
......=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.......=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
........=> public java.lang.Object()
........<= public java.lang.Object() -> null
.......<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
......<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 14=377
......=> void java.util.HashMap.afterNodeInsertion(boolean)
......<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
.....<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
....<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
...<= static int art.Test988.memo_fibonacci(int) -> 377
...=> static int art.Test988.memo_fibonacci(int)
....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 13
....=> public boolean java.util.HashMap.containsKey(java.lang.Object)
.....=> static final int java.util.HashMap.hash(java.lang.Object)
......=> public int java.lang.Integer.hashCode()
.......=> public static int java.lang.Integer.hashCode(int)
.......<= public static int java.lang.Integer.hashCode(int) -> 13
......<= public int java.lang.Integer.hashCode() -> 13
.....<= static final int java.util.HashMap.hash(java.lang.Object) -> 13
.....=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.....<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 13=233
....<= public boolean java.util.HashMap.containsKey(java.lang.Object) -> true
....=> public static java.lang.Integer java.lang.Integer.valueOf(int)
....<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 13
....=> public java.lang.Object java.util.HashMap.get(java.lang.Object)
.....=> static final int java.util.HashMap.hash(java.lang.Object)
......=> public int java.lang.Integer.hashCode()
.......=> public static int java.lang.Integer.hashCode(int)
.......<= public static int java.lang.Integer.hashCode(int) -> 13
......<= public int java.lang.Integer.hashCode() -> 13
.....<= static final int java.util.HashMap.hash(java.lang.Object) -> 13
.....=> final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object)
.....<= final java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object) -> 13=233
....<= public java.lang.Object java.util.HashMap.get(java.lang.Object) -> 233
....=> public int java.lang.Integer.intValue()
....<= public int java.lang.Integer.intValue() -> 233
...<= static int art.Test988.memo_fibonacci(int) -> 233
...=> public static java.lang.Integer java.lang.Integer.valueOf(int)
...<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 15
...=> public static java.lang.Integer java.lang.Integer.valueOf(int)
....=> public java.lang.Integer(int)
.....=> public java.lang.Number()
......=> public java.lang.Object()
......<= public java.lang.Object() -> null
.....<= public java.lang.Number() -> null
....<= public java.lang.Integer(int) -> null
...<= public static java.lang.Integer java.lang.Integer.valueOf(int) -> 610
...=> public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)
....=> static final int java.util.HashMap.hash(java.lang.Object)
.....=> public int java.lang.Integer.hashCode()
......=> public static int java.lang.Integer.hashCode(int)
......<= public static int java.lang.Integer.hashCode(int) -> 15
.....<= public int java.lang.Integer.hashCode() -> 15
....<= static final int java.util.HashMap.hash(java.lang.Object) -> 15
....=> final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
.....=> java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
......=> java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)
.......=> public java.lang.Object()
.......<= public java.lang.Object() -> null
......<= java.util.HashMap$Node(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> null
.....<= java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node) -> 15=610
.....=> void java.util.HashMap.afterNodeInsertion(boolean)
.....<= void java.util.HashMap.afterNodeInsertion(boolean) -> null
....<= final java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean) -> null
...<= public java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object) -> null
..<= static int art.Test988.memo_fibonacci(int) -> 610
.<= public int art.Test988$MemoOp.applyAsInt(int) -> 610
.=> private static void art.Test988.pushResult(java.lang.String,int,int)
..=> public art.Test988$FibResult(java.lang.String,int,int)
...=> public java.lang.Object()
...<= public java.lang.Object() -> null
..<= public art.Test988$FibResult(java.lang.String,int,int) -> null
..=> public boolean java.util.ArrayList.add(java.lang.Object)
...=> private void java.util.ArrayList.ensureCapacityInternal(int)
....=> private void java.util.ArrayList.ensureExplicitCapacity(int)
....<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> null
...<= private void java.util.ArrayList.ensureCapacityInternal(int) -> null
fibonacci(15)=610
..<= public boolean java.util.ArrayList.add(java.lang.Object) -> true
.<= private static void art.Test988.pushResult(java.lang.String,int,int) -> null
<= public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator) -> null
=> art.Test988$RecurOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> null
<= art.Test988$RecurOp() -> null
=> public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$RecurOp.applyAsInt(int)
..=> static int art.Test988.fibonacci(int)
...=> static int art.Test988.fibonacci(int)
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
......=> static int art.Test988.fibonacci(int)
......<= static int art.Test988.fibonacci(int) -> 1
......=> static int art.Test988.fibonacci(int)
......<= static int art.Test988.fibonacci(int) -> 0
.....<= static int art.Test988.fibonacci(int) -> 1
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 1
....<= static int art.Test988.fibonacci(int) -> 2
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 1
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 0
....<= static int art.Test988.fibonacci(int) -> 1
...<= static int art.Test988.fibonacci(int) -> 3
...=> static int art.Test988.fibonacci(int)
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 1
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 0
....<= static int art.Test988.fibonacci(int) -> 1
....=> static int art.Test988.fibonacci(int)
....<= static int art.Test988.fibonacci(int) -> 1
...<= static int art.Test988.fibonacci(int) -> 2
..<= static int art.Test988.fibonacci(int) -> 5
.<= public int art.Test988$RecurOp.applyAsInt(int) -> 5
.=> private static void art.Test988.pushResult(java.lang.String,int,int)
..=> public art.Test988$FibResult(java.lang.String,int,int)
...=> public java.lang.Object()
...<= public java.lang.Object() -> null
..<= public art.Test988$FibResult(java.lang.String,int,int) -> null
..=> public boolean java.util.ArrayList.add(java.lang.Object)
...=> private void java.util.ArrayList.ensureCapacityInternal(int)
....=> private void java.util.ArrayList.ensureExplicitCapacity(int)
....<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> null
...<= private void java.util.ArrayList.ensureCapacityInternal(int) -> null
fibonacci(5)=5
..<= public boolean java.util.ArrayList.add(java.lang.Object) -> true
.<= private static void art.Test988.pushResult(java.lang.String,int,int) -> null
<= public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator) -> null
=> private static native void art.Test988.disableMethodTracing()
