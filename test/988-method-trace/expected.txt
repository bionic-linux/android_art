<= private static native void art.Test988.enableMethodTracing(java.lang.reflect.Method,java.lang.reflect.Method) -> null
=> art.Test988$IterOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> null
<= art.Test988$IterOp() -> null
=> public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$IterOp.applyAsInt(int)
..=> static int art.Test988.iter_fibonacci(int)
..<= static int art.Test988.iter_fibonacci(int) -> 832040
.<= public int art.Test988$IterOp.applyAsInt(int) -> 832040
.=> private static void art.Test988.pushResult(java.lang.String,int,int)
..=> public art.Test988$FibResult(java.lang.String,int,int)
...=> public java.lang.Object()
...<= public java.lang.Object() -> null
..<= public art.Test988$FibResult(java.lang.String,int,int) -> null
..=> public boolean java.util.ArrayList.add(java.lang.Object)
...=> private void java.util.ArrayList.ensureCapacityInternal(int)
....=> private void java.util.ArrayList.ensureExplicitCapacity(int)
....<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> null
...<= private void java.util.ArrayList.ensureCapacityInternal(int) -> null
fibonacci(30)=832040
..<= public boolean java.util.ArrayList.add(java.lang.Object) -> true
.<= private static void art.Test988.pushResult(java.lang.String,int,int) -> null
<= public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator) -> null
=> art.Test988$RecurOp()
.=> public java.lang.Object()
.<= public java.lang.Object() -> null
<= art.Test988$RecurOp() -> null
=> public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator)
.=> public int art.Test988$RecurOp.applyAsInt(int)
..=> static int art.Test988.fibonacci(int)
...=> static int art.Test988.fibonacci(int)
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
......=> static int art.Test988.fibonacci(int)
......<= static int art.Test988.fibonacci(int) -> 1
......=> static int art.Test988.fibonacci(int)
......<= static int art.Test988.fibonacci(int) -> 0
.....<= static int art.Test988.fibonacci(int) -> 1
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 1
....<= static int art.Test988.fibonacci(int) -> 2
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 1
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 0
....<= static int art.Test988.fibonacci(int) -> 1
...<= static int art.Test988.fibonacci(int) -> 3
...=> static int art.Test988.fibonacci(int)
....=> static int art.Test988.fibonacci(int)
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 1
.....=> static int art.Test988.fibonacci(int)
.....<= static int art.Test988.fibonacci(int) -> 0
....<= static int art.Test988.fibonacci(int) -> 1
....=> static int art.Test988.fibonacci(int)
....<= static int art.Test988.fibonacci(int) -> 1
...<= static int art.Test988.fibonacci(int) -> 2
..<= static int art.Test988.fibonacci(int) -> 5
.<= public int art.Test988$RecurOp.applyAsInt(int) -> 5
.=> private static void art.Test988.pushResult(java.lang.String,int,int)
..=> public art.Test988$FibResult(java.lang.String,int,int)
...=> public java.lang.Object()
...<= public java.lang.Object() -> null
..<= public art.Test988$FibResult(java.lang.String,int,int) -> null
..=> public boolean java.util.ArrayList.add(java.lang.Object)
...=> private void java.util.ArrayList.ensureCapacityInternal(int)
....=> private void java.util.ArrayList.ensureExplicitCapacity(int)
....<= private void java.util.ArrayList.ensureExplicitCapacity(int) -> null
...<= private void java.util.ArrayList.ensureCapacityInternal(int) -> null
fibonacci(5)=5
..<= public boolean java.util.ArrayList.add(java.lang.Object) -> true
.<= private static void art.Test988.pushResult(java.lang.String,int,int) -> null
<= public static void art.Test988.doTest(int,java.util.function.IntUnaryOperator) -> null
=> private static native void art.Test988.disableMethodTracing()
