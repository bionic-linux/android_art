/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import dalvik.system.InMemoryDexClassLoader;

import java.lang.invoke.CallSite;
import java.lang.invoke.MethodType;
import java.lang.invoke.MutableCallSite;

import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.util.Base64;

// This test is a stop-gap until we have support for generating invoke-custom
// in the Android tree.

public class Main {
  private static final String TEST_001_DEX_FILE =
"ZGV4CjAzOAByaZGhS3Q1OTCOP7OA5xBf4sdQQT3IuCLYBwAAcAAAAHhWNBIAAAAAAAAAAPAGAAAs" +
"AAAAcAAAABQAAAAgAQAACAAAAHABAAADAAAA0AEAAAkAAADoAQAAAQAAADQCAAB8BQAAXAIAAEoD" +
"AABSAwAAVQMAAFoDAABpAwAAbAMAAHIDAACnAwAA2gMAAAsEAABABAAAXAQAAHMEAACGBAAAmgQA" +
"AK4EAADCBAAA2QQAAPYEAAAbBQAAPAUAAGUFAACHBQAApgUAALIFAAC1BQAAuQUAAL0FAADSBQAA" +
"1wUAAOYFAAD9BQAADAYAABsGAAAnBgAAOwYAAEEGAABPBgAAVwYAAF0GAABjBgAAaAYAAHEGAAB9" +
"BgAAAQAAAAYAAAAHAAAACAAAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAA8AAAAQAAAAEQAAABIA" +
"AAATAAAAFAAAABUAAAAWAAAAGAAAABsAAAACAAAAAAAAABQDAAAFAAAADAAAABwDAAAFAAAADgAA" +
"ACgDAAAEAAAADwAAAAAAAAAYAAAAEgAAAAAAAAAZAAAAEgAAADQDAAAaAAAAEgAAADwDAAAaAAAA" +
"EgAAAEQDAAADAAMAAwAAAAQADAAgAAAACgAGACgAAAAEAAQAAAAAAAQAAAAcAAAABAABACQAAAAE" +
"AAcAJgAAAAYABQApAAAACAAEAAAAAAANAAYAAAAAAA8AAgAhAAAAEAADACUAAADQBgAABAAAAAEA" +
"AAAIAAAAAAAAABcAAAD0AgAA1wYAAAAAAAAEAAAAAgAAAAEAAACgBgAAAQAAAMgGAAABAAEAAQAA" +
"AIQGAAAEAAAAcBAFAAAADgADAAIAAAAAAIkGAAADAAAAkAABAg8AAAAFAAMABAAAAJAGAAAQAAAA" +
"cQAIAAAADAAcAQQAbkAHABBDDAAiAQ0AcCAGAAEAEQEEAAEAAgAAAJkGAAAMAAAAYgACABIhEjL8" +
"IAAAIQAKAW4gBAAQAA4AAAAAAAAAAAACAAAAAAAAAAEAAABcAgAAAgAAAGQCAAACAAAAAAAAAAMA" +
"AAAPAAkAEQAAAAMAAAAHAAkAEQAAAAEAAAAAAAAAAQAAAA4AAAABAAAAEwAGPGluaXQ+AAFJAANJ" +
"SUkADUlOVk9LRV9TVEFUSUMAAUwABExMTEwAM0xjb20vYW5kcm9pZC9qYWNrL2Fubm90YXRpb25z" +
"L0NhbGxlZEJ5SW52b2tlQ3VzdG9tOwAxTGNvbS9hbmRyb2lkL2phY2svYW5ub3RhdGlvbnMvTGlu" +
"a2VyTWV0aG9kSGFuZGxlOwAvTGNvbS9hbmRyb2lkL2phY2svYW5ub3RhdGlvbnMvTWV0aG9kSGFu" +
"ZGxlS2luZDsAM0xjb20vYW5kcm9pZC9qYWNrL2phdmE3L2ludm9rZWN1c3RvbS90ZXN0MDAxL1Rl" +
"c3RzOwAaTGRhbHZpay9hbm5vdGF0aW9uL1Rocm93czsAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwAR" +
"TGphdmEvbGFuZy9DbGFzczsAEkxqYXZhL2xhbmcvT2JqZWN0OwASTGphdmEvbGFuZy9TdHJpbmc7" +
"ABJMamF2YS9sYW5nL1N5c3RlbTsAFUxqYXZhL2xhbmcvVGhyb3dhYmxlOwAbTGphdmEvbGFuZy9p" +
"bnZva2UvQ2FsbFNpdGU7ACNMamF2YS9sYW5nL2ludm9rZS9Db25zdGFudENhbGxTaXRlOwAfTGph" +
"dmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlOwAnTGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFu" +
"ZGxlcyRMb29rdXA7ACBMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzOwAdTGphdmEvbGFu" +
"Zy9pbnZva2UvTWV0aG9kVHlwZTsAClRlc3RzLmphdmEAAVYAAlZJAAJWTAATW0xqYXZhL2xhbmcv" +
"U3RyaW5nOwADYWRkAA1hcmd1bWVudFR5cGVzABVlbWl0dGVyOiBqYWNrLTQuMC1lbmcADWVuY2xv" +
"c2luZ1R5cGUADWZpZWxkQ2FsbFNpdGUACmZpbmRTdGF0aWMAEmludm9rZU1ldGhvZEhhbmRsZQAE" +
"a2luZAAMbGlua2VyTWV0aG9kAAZsb29rdXAABG1haW4ABG5hbWUAA291dAAHcHJpbnRsbgAKcmV0" +
"dXJuVHlwZQAFdmFsdWUAHgAHDgArAgAABw4AMQMAAAAHDqUANgEABw60AAABBB0cAhgAGAAiHAEd" +
"AgQdHAMYDxgJGBEfGAQjGwAnFyQnFxwqGAACBQErHAEYCwMWABccFQABAAQAAQkAgYAE7AQBCoQF" +
"AQqcBQEJzAUAEwAAAAAAAAABAAAAAAAAAAEAAAAsAAAAcAAAAAIAAAAUAAAAIAEAAAMAAAAIAAAA" +
"cAEAAAQAAAADAAAA0AEAAAUAAAAJAAAA6AEAAAcAAAABAAAAMAIAAAYAAAABAAAANAIAAAgAAAAB" +
"AAAAVAIAAAMQAAACAAAAXAIAAAEgAAAEAAAAbAIAAAYgAAABAAAA9AIAAAEQAAAGAAAAFAMAAAIg" +
"AAAsAAAASgMAAAMgAAAEAAAAhAYAAAQgAAACAAAAoAYAAAUgAAABAAAA0AYAAAAgAAABAAAA1wYA" +
"AAAQAAABAAAA8AYAAA==";


  private static final String TEST_004_DEX_FILE =
"ZGV4CjAzOACPhNSfitm6JOKnGUD64VqdbGfDmoJVzLSwFQAAcAAAAHhWNBIAAAAAAAAAAMgUAACT" +
"AAAAcAAAAB0AAAC8AgAAHQAAADADAAADAAAAjAQAACIAAACkBAAAAQAAALgFAADQDwAA4AUAAEQM" +
"AABHDAAASgwAAFIMAABaDAAAYgwAAGoMAAByDAAAegwAAIIMAACKDAAAkgwAAJwMAACkDAAApwwA" +
"AKoMAACtDAAAsAwAAMYMAADNDAAA0AwAANUMAADkDAAA5wwAAOoMAADuDAAA8gwAAPYMAAD6DAAA" +
"/gwAAAINAAAIDQAAGA0AABwNAABRDQAAeg0AAK0NAADeDQAAEw4AADIOAABODgAAWA4AAG8OAACL" +
"DgAAnQ4AALAOAADGDgAA2g4AAO4OAAAJDwAAHQ8AADQPAABRDwAAdg8AAJcPAADADwAA3w8AAOIP" +
"AADuDwAA8Q8AAPYPAAD7DwAAABAAAAUQAAAJEAAADhAAABMQAAAXEAAAHBAAACEQAAAlEAAAKBAA" +
"ADEQAAA1EAAAOBAAAD0QAABFEAAAVBAAAGIQAAB1EAAAiBAAAJsQAACuEAAAwRAAANQQAADnEAAA" +
"+xAAAAcRAAAbEQAAHhEAACIRAAAmEQAANBEAAEcRAABSEQAAVhEAAFoRAABiEQAAbREAAHkRAAB9" +
"EQAAgREAAI4RAACiEQAAsREAALkRAAC9EQAAwREAAM0RAADZEQAA3REAAOERAADrEQAA/xEAAAUS" +
"AAAJEgAADRIAABsSAAAmEgAAPRIAAEkSAABREgAAVxIAAFoSAABfEgAAYhIAAGsSAAB3EgAAexIA" +
"AH8SAACLEgAAmBIAAJ4SAACkEgAArhIAALISAAC3EgAAuxIAAL8SAADDEgAAxxIAAMsSAADPEgAA" +
"0xIAANcSAADeEgAA4RIAAA0AAAAOAAAADwAAABAAAAATAAAAFgAAACEAAAAiAAAAIwAAACQAAAAl" +
"AAAAJgAAACcAAAApAAAAKgAAACwAAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAANQAAADYA" +
"AAA3AAAAOAAAADoAAABGAAAAEwAAAAQAAAAAAAAAFAAAAAQAAACICwAAFwAAABEAAAAAAAAAGAAA" +
"ABIAAACQCwAAGQAAABIAAACYCwAAGgAAABIAAACgCwAAGwAAABIAAACoCwAAHAAAABIAAACwCwAA" +
"HQAAABIAAAC4CwAAHQAAABIAAADACwAAIAAAABIAAADICwAAHwAAABUAAADQCwAAHgAAABcAAADw" +
"CwAAOgAAABsAAAAAAAAAOwAAABsAAAD8CwAAPAAAABsAAAAEDAAAPQAAABsAAAAMDAAAPgAAABsA" +
"AAAUDAAAPwAAABsAAACoCwAAQAAAABsAAACICwAAQQAAABsAAAAcDAAAQgAAABsAAAC4CwAAQwAA" +
"ABsAAAAkDAAAQgAAABsAAADACwAAQwAAABsAAAAsDAAAQgAAABsAAAA0DAAARAAAABsAAAA8DAAA" +
"RQAAABsAAADICwAASAAAABwAAAC4CwAACQAJABUAAAAKAAQAXAAAABMADQB7AAAACgANAAsAAAAK" +
"AA0ADAAAAAoAAAARAAAACgABAEoAAAAKAA4ATQAAAAoADwBNAAAACgAQAE0AAAAKABEATQAAAAoA" +
"EwBNAAAACgAUAE0AAAAKABYATQAAAAoAGABNAAAACgAaAE0AAAAKABsAVgAAAAoACwB0AAAACgAT" +
"AIMAAAANABIAfQAAAA0AFwB9AAAADgAVAAwAAAAQAA0ADAAAABAAHABoAAAAEQAcAGgAAAASAA0A" +
"DAAAABIAAwBLAAAAEgAEAEsAAAASAAUASwAAABIABgBLAAAAEgAHAEsAAAASAAgASwAAABIACQBL" +
"AAAAEgAKAEsAAAASAAIAhQAAABYAGQAMAAAAGAAMAGsAAABVFAAACgAAAAEAAAAQAAAAAAAAADkA" +
"AABgCwAAfhQAAAAAAAAEAAAADgAAAAEAAACVEwAAAgAAADMUAABMFAAAAQAAAEwUAAABAAAAAAAA" +
"AOQSAAAEAAAAEgBnAAEADgABAAEAAQAAAOoSAAAEAAAAcBATAAAADgADAAIAAAAAAO8SAAADAAAA" +
"kAABAg8AAAAFAAIAAgAAAPYSAAAoAAAAM0MDAA4AIgAOACIBEgBwEBYAAQAbAk4AAABuIB0AIQAM" +
"AW4gGgAxAAwBGwICAAAAbiAdACEADAFuIBoAQQAMAW4QHwABAAwBcCASABAAJwAFAAIAAgAAAP4S" +
"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" +
"aWQvamFjay9hbm5vdGF0aW9ucy9Db25zdGFudDsAMUxjb20vYW5kcm9pZC9qYWNrL2Fubm90YXRp" +
"b25zL0xpbmtlck1ldGhvZEhhbmRsZTsAL0xjb20vYW5kcm9pZC9qYWNrL2Fubm90YXRpb25zL01l" +
"dGhvZEhhbmRsZUtpbmQ7ADNMY29tL2FuZHJvaWQvamFjay9qYXZhNy9pbnZva2VjdXN0b20vdGVz" +
"dDAwNC9UZXN0czsAHUxkYWx2aWsvYW5ub3RhdGlvbi9TaWduYXR1cmU7ABpMZGFsdmlrL2Fubm90" +
"YXRpb24vVGhyb3dzOwAITGlua2luZyAAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwAaTGphdmEvbGFu" +
"Zy9Bc3NlcnRpb25FcnJvcjsAEExqYXZhL2xhbmcvQ2xhc3MAEUxqYXZhL2xhbmcvQ2xhc3M7ABRM" +
"amF2YS9sYW5nL0NsYXNzPCo+OwASTGphdmEvbGFuZy9PYmplY3Q7ABJMamF2YS9sYW5nL1N0cmlu" +
"ZzsAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsAEkxqYXZhL2xhbmcvU3lzdGVtOwAVTGphdmEv" +
"bGFuZy9UaHJvd2FibGU7ABtMamF2YS9sYW5nL2ludm9rZS9DYWxsU2l0ZTsAI0xqYXZhL2xhbmcv" +
"aW52b2tlL0NvbnN0YW50Q2FsbFNpdGU7AB9MamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGU7" +
"ACdMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cDsAHUxqYXZhL2xhbmcvaW52" +
"b2tlL01ldGhvZFR5cGU7AAFTAApUZXN0cy5qYXZhAAFWAANWQkIAA1ZDQwADVkREAANWRkYAAlZJ" +
"AANWSUkAA1ZKSgACVkwAA1ZMTAADVlNTAAJWWgABWgAHWkJDU0lGRAACWkwAAWEAA2FkZAAGYXBw" +
"ZW5kAA1hcmd1bWVudFR5cGVzAAxhc3NlcnRFcXVhbHMAEWFzc2VydEVxdWFscyBiMTogABFhc3Nl" +
"cnRFcXVhbHMgYzE6IAARYXNzZXJ0RXF1YWxzIGQxOiAAEWFzc2VydEVxdWFscyBmMTogABFhc3Nl" +
"cnRFcXVhbHMgaTE6IAARYXNzZXJ0RXF1YWxzIGwxOiAAEWFzc2VydEVxdWFscyBzMTogABJhc3Nl" +
"cnRFcXVhbHM6IG8xOiAACmFzc2VydFRydWUAEmFzc2VydFRydWUgdmFsdWU6IAABYgACYjEAAmIy" +
"AAxib29sZWFuVmFsdWUAEWJvb3RzdHJhcFJ1bkNvdW50AAlieXRlVmFsdWUAAmMxAAJjMgAGY2Fs" +
"bGVyAAljaGFyVmFsdWUACmNsYXNzVmFsdWUAAmQxAAJkMgALZG91YmxlVmFsdWUAEmVtaXR0ZXI6" +
"IGphY2stNC4yNAANZW5jbG9zaW5nVHlwZQAGZXF1YWxzAAJmMQACZjIACmZpbmRTdGF0aWMACmZs" +
"b2F0VmFsdWUAAmkxAAJpMgAIaW50VmFsdWUAEmludm9rZU1ldGhvZEhhbmRsZQAEa2luZAACbDEA" +
"AmwyAAxsaW5rZXJNZXRob2QACWxvbmdWYWx1ZQAVbWV0aG9kSGFuZGxlRXh0cmFBcmdzAAptZXRo" +
"b2RUeXBlAAZtaF9hZGQABG5hbWUAAW8AA291dAABcAAHcHJpbnRsbgAKcmV0dXJuVHlwZQACczEA" +
"AnMyAApzaG9ydFZhbHVlAAtzdHJpbmdWYWx1ZQAEdGVzdAAEdGhpcwAIdG9TdHJpbmcAAnYxAAN2" +
"MTAAAnYyAAJ2MwACdjQAAnY1AAJ2NgACdjcAAnY4AAJ2OQAFdmFsdWUAAXgAAXkAHwAHDjkAHQAH" +
"DgAxAkpZBw4AVwJaWwcOPABcAl9gBw48AHUCZGUHDloAcAJqawcOWgBmAm5vBw48AGsCc3QHDloA" +
"egJ7fQcOPLQAgAECgAGBAQcOLSClIABhAoABgQEHDjwAUQGRAQcOLQEaEAA4DWF6eIcBiQGKAYsB" +
"jAGNAY4BjwEAiAEEE5ABEC4HDgEkDzxLWlpLaaWHeIdpAwJ5GABMApIBkwEHDpZ4AEgABw4AAAYF" +
"TBwCGAQYBHAcAR0IBEwcDRgYGBEYGRgcGAAYARgaGAQYAxgCGBEYDxgFZxgKcRsAeRd0dhwKHQcB" +
"WxwBPx0HAV0cAQABHQcBYRwBA2EdBwGBARwBIgAEHQcBbxwBBAEdBwFsHAFwmpkxQR0HAWUcAfGa" +
"mZmZmZkBQB0HAYIBHAEXEh0HAWIcARgKHQcBdRwBZhXNWwd5F0p+GAQCCwGQARwJFwEXNhcvFzcX" +
"RxcvFysXChczAgwBkAEcARgUDRYAF0oVAQQBBAEEYSQABAQBcJqZMUHxmpmZmZmZAUAXEhgKZhXN" +
"WwcBAA8BAQoAiIAE/AsBgYAElAwCCqwMAQnEDAEJpA0BCYQOAQnoDgEJzA8BCawQAQmQEQEJiBIB" +
"CYATAQngEwEKrBQBCZQWAgHIFhMAAAAAAAAAAQAAAAAAAAABAAAAkwAAAHAAAAACAAAAHQAAALwC" +
"AAADAAAAHQAAADADAAAEAAAAAwAAAIwEAAAFAAAAIgAAAKQEAAAHAAAAAQAAALQFAAAGAAAAAQAA" +
"ALgFAAAIAAAAAQAAANgFAAADEAAAAwAAAOAFAAABIAAAEAAAAPwFAAAGIAAAAQAAAGALAAABEAAA" +
"FAAAAIgLAAACIAAAkwAAAEQMAAADIAAAEAAAAOQSAAAEIAAAAwAAAJUTAAAFIAAAAQAAAFUUAAAA" +
"IAAAAQAAAH4UAAAAEAAAAQAAAMgUAAA=";

  private static void TestUninitializedCallSite() throws Throwable {
    CallSite callSite = new MutableCallSite(MethodType.methodType(int.class));
    try {
      callSite.getTarget().invoke();
      fail();
    } catch (IllegalStateException e) {
      System.out.println("Caught exception from uninitialized call site");
    }

    callSite = new MutableCallSite(MethodType.methodType(String.class, int.class, char.class));
    try {
      callSite.getTarget().invoke(1535, 'd');
      fail();
    } catch (IllegalStateException e) {
      System.out.println("Caught exception from uninitialized call site");
    }
  }

  private static void Test001() throws Throwable {
    // This is simple test of invoke-custom, the linker method takes no additional arguments.
    byte[] base64Data = TEST_001_DEX_FILE.getBytes();
    Base64.Decoder decoder = Base64.getDecoder();
    ByteBuffer dexBuffer = ByteBuffer.wrap(decoder.decode(base64Data));

    InMemoryDexClassLoader classLoader =
        new InMemoryDexClassLoader(dexBuffer,
                                   ClassLoader.getSystemClassLoader());
    Class<?> testClass =
        classLoader.loadClass("com.android.jack.java7.invokecustom.test001.Tests");
    Method testMethod = testClass.getDeclaredMethod("main", String[].class);
    Object[] testArgs = new String[] { "A", "B" };
    testMethod.invoke(null, new Object[] { testArgs });
  }

  private static void Test004() throws Throwable {
    // This is a more comprehensive test of invoke-custom, the linker
    // method takes additional arguments of types boolean, byte, char,
    // short, int, float, double, String, Class, and long (in this order)
    // The test asserts the values passed to the linker method match their
    // expected values.
    byte[] base64Data = TEST_004_DEX_FILE.getBytes();
    Base64.Decoder decoder = Base64.getDecoder();
    ByteBuffer dexBuffer = ByteBuffer.wrap(decoder.decode(base64Data));

    InMemoryDexClassLoader classLoader =
        new InMemoryDexClassLoader(dexBuffer,
                                   ClassLoader.getSystemClassLoader());
    Class<?> testClass =
        classLoader.loadClass("com.android.jack.java7.invokecustom.test004.Tests");
    Method testMethod = testClass.getDeclaredMethod("test", int.class, int.class);
    // First invocation should link via the bootstrap method (outputs "Linking add" ...).
    testMethod.invoke(null, 33, 67);
    // Subsequent invocations use the cached value of the CallSite and do not require linking.
    testMethod.invoke(null, -10000, +1000);
    testMethod.invoke(null, -1000, +10000);
  }

  private static void fail() {
    System.out.println("fail");
    Thread.dumpStack();
  }

  public static void main(String[] args) throws Throwable {
    TestUninitializedCallSite();
    Test001();
    Test004();
  }
}