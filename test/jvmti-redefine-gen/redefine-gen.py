#!/usr/bin/env python3
#
# Copyright 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys

TEMPLATE = """\
/*
 * Generated by art/tools/jvmti-redefine-gen/redefine-gen.py. Do not modify.
 *
 * argv: {argv}
 */

{package}

public final class {class_name} {{
  public static final byte[] CLASS_BYTES = new byte[] {{
    {class_bytes}
  }};
  public static final byte[] DEX_BYTES = new byte[] {{
    {dex_bytes}
  }};
}}
"""


def to_text(bytes):
  """
  Turns a byte list into a string that can be put into a java file. Java bytes are signed because
  things can't just be simple.
  """
  return ", ".join(map(lambda b: str(b if b < 128 else (b - 256)), bytes))


def main():
  argv = sys.argv
  parser = argparse.ArgumentParser(
      description="Generates a DEX_BYTES and CLASS_BYTES arrays in a java file."
  )
  parser.add_argument(
      "name",
      help=
      "The class name the DEX_BYTES and CLASS_BYTES arrays will be in. eg 'art.test_902.Transform"
  )
  parser.add_argument("class_file", help="The class-file version to embed.")
  parser.add_argument("dex_file", help="The dex-file version to embed.")
  parser.add_argument("-o",
                      "--output",
                      nargs=1,
                      help="where to write output. Defaults to stdout.",
                      default=["/proc/self/fd/1"])
  args = parser.parse_args()
  output = open(args.output[0], 'wt')
  dex = open(args.dex_file, "rb").read()
  klass = open(args.class_file, "rb").read()
  name = args.name.split('.')[-1]
  package_name = '.'.join(args.name.split('.')[:-1])
  if package_name != "":
    package = "package {};".format(package_name)
  else:
    package = ""
  print(TEMPLATE.format(argv=argv,
                        package=package,
                        class_name=name,
                        class_bytes=to_text(klass),
                        dex_bytes=to_text(dex)),
        file=output,
        flush=True)


if __name__ == "__main__":
  main()
