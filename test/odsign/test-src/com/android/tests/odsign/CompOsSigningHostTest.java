/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tests.odsign;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.device.ITestDevice;
import com.android.tradefed.invoker.TestInformation;
import com.android.tradefed.testtype.DeviceJUnit4ClassRunner;
import com.android.tradefed.testtype.junit4.AfterClassWithInfo;
import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test;
import com.android.tradefed.testtype.junit4.BeforeClassWithInfo;
import com.android.tradefed.testtype.junit4.DeviceTestRunOptions;
import com.android.tradefed.util.CommandResult;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Arrays;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Test to check if CompOS works properly.
 *
 * @see ActivationTest for actual tests
 * @see OnDeviceSigningHostTest for the same test with compilation happens in early boot
 */
@RunWith(DeviceJUnit4ClassRunner.class)
public class CompOsSigningHostTest extends ActivationTest {

    private static final String COMPOSD_CMD_BIN = "/apex/com.android.compos/bin/composd_cmd";
    private static final String PENDING_ARTIFACTS_DIR =
            "/data/misc/apexdata/com.android.art/compos-pending";

    private static OdsignTestUtils sTestUtils;
    private static String sOriginalChecksums;
    private static String sPendingChecksums;

    @BeforeClassWithInfo
    public static void beforeClassWithDevice(TestInformation testInfo) throws Exception {
        ITestDevice device = testInfo.getDevice();

        sTestUtils = new OdsignTestUtils(testInfo);
        sTestUtils.installTestApex();

        sOriginalChecksums = checksumDirectoryContentPartial(device,
                "/data/misc/apexdata/com.android.art/dalvik-cache/");

        assertCommandSucceeds(device, COMPOSD_CMD_BIN + " staged-apex-compile");

        // Sanity checks the output, then store the hashes of pending files. Only works with root.
        if (sTestUtils.isAdbRootEnabled()) {
            assertThat(device.getChildren(PENDING_ARTIFACTS_DIR)).asList().containsAtLeast(
                    "cache-info.xml", "compos.info");
            sPendingChecksums = checksumDirectoryContentPartial(device,
                    "/data/misc/apexdata/com.android.art/compos-pending/");
        }

        sTestUtils.reboot();
    }

    @AfterClassWithInfo
    public static void afterClassWithDevice(TestInformation testInfo) throws Exception {
        sTestUtils.uninstallTestApex();
        sTestUtils.reboot();
        sTestUtils.restoreAdbRoot();
    }

    @Test
    public void checkFileChecksums() throws Exception {
        String actualChecksums = checksumDirectoryContentPartial(getDevice(),
                "/data/misc/apexdata/com.android.art/dalvik-cache/");
        if (sPendingChecksums != null) {
            assertThat(actualChecksums).isEqualTo(sPendingChecksums);
        }

        // With test apex, the output should be different.
        assertThat(actualChecksums).isNotEqualTo(sOriginalChecksums);
    }

    @Ignore("Override base class. Due to b/211458160 and b/210998761.")
    public void verifyGeneratedArtifactsLoaded() {}

    @Ignore("Override base class. Due to b/211458160 and b/210998761.")
    public void verifyGeneratedArtifactsLoadedAfterPartialCompilation() {}

    @Ignore("Override base class. Due to b/211458160 and b/210998761.")
    public void verifyGeneratedArtifactsLoadedAfterReboot() {}

    private static String checksumDirectoryContentPartial(ITestDevice device, String path) throws Exception {
        // Sort by filename (second column) to make comparison easier.
        // Filter out compos.info* (which will be deleted at boot) and cache-info.xm
        // compos.info.signature since it's only generated by CompOS.
        // TODO(b/210473615): Remove irrelevant APEXes (i.e. those aren't contributing to the
        // classpaths, thus not in the VM) from cache-info.xml.
        return assertCommandSucceeds(device, "cd " + path + "; find -type f -exec sha256sum {} \\;"
                + "| grep -v cache-info.xml | grep -v compos.info"
                + "| sort -k2");
    }

    private static String assertCommandSucceeds(ITestDevice device, String command)
            throws DeviceNotAvailableException {
        CommandResult result = device.executeShellV2Command(command);
        assertWithMessage(result.toString()).that(result.getExitCode()).isEqualTo(0);
        return result.getStdout();
    }
}
