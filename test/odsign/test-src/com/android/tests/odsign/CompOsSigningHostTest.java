/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tests.odsign;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assume.assumeTrue;

import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.invoker.TestInformation;
import com.android.tradefed.testtype.DeviceJUnit4ClassRunner;
import com.android.tradefed.testtype.junit4.AfterClassWithInfo;
import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test;
import com.android.tradefed.testtype.junit4.BeforeClassWithInfo;
import com.android.tradefed.util.CommandResult;

import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Test to check if odrefresh, odsign, fs-verity, and ART runtime work together properly.
 */
@RunWith(DeviceJUnit4ClassRunner.class)
public class CompOsSigningHostTest extends BaseHostJUnit4Test {

    private static final String COMPOSD_CMD_BIN = "/apex/com.android.compos/bin/composd_cmd";
    private static final String PENDING_ARTIFACTS_DIR =
            "/data/misc/apexdata/com.android.art/compos-pending";

    private static OdsignTestUtils sTestUtils;

    @BeforeClassWithInfo
    public static void beforeClassWithDevice(TestInformation testInfo) throws Exception {
        sTestUtils = new OdsignTestUtils(testInfo);
        assumeTrue("CompOS is not supported", sTestUtils.isCompOsPresent());
        sTestUtils.installTestApex();
    }

    @AfterClassWithInfo
    public static void afterClassWithDevice(TestInformation testInfo) throws Exception {
        sTestUtils.uninstallTestApexAndReboot();
    }

    @Test
    public void verifyCompos() throws Exception {
        assertCommandSucceeds(COMPOSD_CMD_BIN + " staged-apex-compile");

        assertThat(getDevice().getChildren(PENDING_ARTIFACTS_DIR)).asList().containsAtLeast(
                "cache-info.xml", "compos.info");

        // TODO - fetch artifact timestamps (not checksums) to compare after boot
        // Ah, but won't odrefresh "refresh" them?
        // Disable that, either for S, or for Compos mode?

        // TODO - Check artifacts are loaded
    }

//    private String checksumDirectoryContentPartial(CommandRunner runner, String path)
//            throws Exception {
//        // Sort by filename (second column) to make comparison easier.
//        // Filter out compos.info* (which will be deleted at boot) and cache-info.xm
//        // compos.info.signature since it's only generated by CompOS.
//        // TODO(b/210473615): Remove irrelevant APEXes (i.e. those aren't contributing to the
//        // classpaths, thus not in the VM) from cache-info.xml.
//        return runner.run("cd " + path + "; find -type f -exec sha256sum {} \\;"
//                + "| grep -v cache-info.xml | grep -v compos.info"
//                + "| sort -k2");
//    }

    private String assertCommandSucceeds(String command) throws DeviceNotAvailableException {
        CommandResult result = getDevice().executeShellV2Command(command);
        assertWithMessage(result.toString()).that(result.getExitCode()).isEqualTo(0);
        return result.getStdout();
    }
}
