#!/usr/bin/env python3
#
# Copyright (C) 2021 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" This script generates the Android.run-test.bp build file"""

import glob
import json
import os
import textwrap
import sys

def main():
  os.chdir(os.path.dirname(__file__))
  with open("Android.run-test.bp", mode="wt") as f:
    f.write(textwrap.dedent(f"""
      // This file was generated by {os.path.basename(__file__)}
      // It is not necessary to regenerate it when tests are added/removed/modified,
      // unless certain properties in the test-metadata.json files are changed.
    """).lstrip())
    for mode in ["host", "target", "jvm"]:
      names = []
      # Group the tests into shards based on the last two digits of the test number.
      # This keeps the number of generated genrules low so we don't overwhelm soong,
      # but it still allows iterating on single test without recompiling all tests.
      for shard in ["{:02}".format(i) for i in range(100)]:

        # Since genrules are sandboxed, we need to construct a list of all sources the tests could
        # need. Unfortunately, since we build many tests in one shard, tests could under-specify
        # their sources if they happen to be in a shard with another test that does specify those
        # sources.
        extra_srcs = set()
        metadata_files = (
            glob.glob(f"?{shard}-*/test-metadata.json") +
            glob.glob(f"??{shard}-*/test-metadata.json")
        )
        for meta_file in metadata_files:
            with open(meta_file, "r") as metadata_f:
                try:
                    metadata = json.load(metadata_f)
                except json.JSONDecodeError as e:
                    sys.exit(f"error: {meta_file}: {e}")
            srcs = metadata.get("test_build_srcs", [])
            if not isinstance(srcs, list):
                sys.exit(f"error: {meta_file}: test_build_srcs must be a list[str]")
            for s in srcs:
                if not isinstance(s, str):
                    sys.exit(f"error: {meta_file}: test_build_srcs must be a list[str]")
                extra_srcs.add(s)
        extra_srcs = sorted(extra_srcs)
        sep = "\n" + " " * 18
        extra_srcs_str = sep + sep.join([f'"{s}",' for s in extra_srcs]) if extra_srcs else ""

        name = "art-run-test-{mode}-data-shard{shard}".format(mode=mode, shard=shard)
        names.append(name)
        f.write(textwrap.dedent(f"""
          java_genrule {{
              name: "{name}-tmp",
              out: ["{name}.zip"],
              srcs: [
                  "?{shard}-*/**/*",
                  "??{shard}-*/**/*",{extra_srcs_str}
              ],
              defaults: ["art-run-test-{mode}-data-defaults"],
          }}

          // Install in the output directory to make it accessible for tests.
          prebuilt_etc_host {{
              name: "{name}",
              defaults: ["art_module_source_build_prebuilt_defaults"],
              src: ":{name}-tmp",
              sub_dir: "art",
              filename: "{name}.zip",
          }}
          """))

      # Build all hiddenapi tests in their own shard.
      # This removes the dependency on hiddenapi from all other shards,
      # which in turn removes dependency on ART C++ source code.
      name = "art-run-test-{mode}-data-shardHiddenApi".format(mode=mode)
      names.append(name)
      f.write(textwrap.dedent(f"""
        java_genrule {{
            name: "{name}-tmp",
            out: ["{name}.zip"],
            srcs: [
                "???-*hiddenapi*/**/*",
                "????-*hiddenapi*/**/*",
            ],
            defaults: ["art-run-test-{mode}-data-defaults"],
            tools: ["hiddenapi"],
            cmd: "$(location run_test_build.py) --out $(out) --mode {mode} " +
                "--bootclasspath $(location :art-run-test-bootclasspath) " +
                "--d8 $(location d8) " +
                "--hiddenapi $(location hiddenapi) " +
                "--jasmin $(location jasmin) " +
                "--rewrapper $(location rewrapper) " +
                "--smali $(location smali) " +
                "--soong_zip $(location soong_zip) " +
                "--zipalign $(location zipalign) " +
                "$(in)",
        }}

        // Install in the output directory to make it accessible for tests.
        prebuilt_etc_host {{
            name: "{name}",
            defaults: ["art_module_source_build_prebuilt_defaults"],
            src: ":{name}-tmp",
            sub_dir: "art",
            filename: "{name}.zip",
        }}
        """))

      f.write(textwrap.dedent(f"""
        genrule_defaults {{
            name: "art-run-test-{mode}-data-defaults",
            defaults: [
                // Enable only in source builds, where com.android.art.testing is
                // available.
                "art_module_source_build_genrule_defaults",
            ],
            tool_files: [
                "run_test_build.py",
                ":art-run-test-bootclasspath",
            ],
            tools: [
                "d8",
                "jasmin",
                "rewrapper",
                "smali",
                "soong_zip",
                "zipalign",
            ],
            cmd: "$(location run_test_build.py) --out $(out) --mode {mode} " +
                "--bootclasspath $(location :art-run-test-bootclasspath) " +
                "--d8 $(location d8) " +
                "--jasmin $(location jasmin) " +
                "--rewrapper $(location rewrapper) " +
                "--smali $(location smali) " +
                "--soong_zip $(location soong_zip) " +
                "--zipalign $(location zipalign) " +
                "$(in)",
        }}
        """))

      name = "art-run-test-{mode}-data-merged".format(mode=mode)
      srcs = ("\n"+" "*16).join('":{}-tmp",'.format(n) for n in names)
      deps = ("\n"+" "*16).join('"{}",'.format(n) for n in names)
      f.write(textwrap.dedent(f"""
        java_genrule {{
            name: "{name}-tmp",
            defaults: ["art_module_source_build_genrule_defaults"],
            out: ["{name}.zip"],
            srcs: [
                {srcs}
            ],
            tools: ["merge_zips"],
            cmd: "$(location merge_zips) $(out) $(in)",
        }}

        // Install in the output directory to make it accessible for tests.
        prebuilt_etc_host {{
            name: "{name}",
            defaults: ["art_module_source_build_prebuilt_defaults"],
            src: ":{name}-tmp",
            required: [
                {deps}
            ],
            sub_dir: "art",
            filename: "{name}.zip",
        }}
        """))

      name = "art-run-test-{mode}-data".format(mode=mode)
      srcs = ("\n"+" "*16).join('":{}-tmp",'.format(n) for n in names)
      deps = ("\n"+" "*16).join('"{}",'.format(n) for n in names)
      f.write(textwrap.dedent(f"""
        // Phony target used to build all shards
        java_genrule {{
            name: "{name}-tmp",
            defaults: ["art-run-test-data-defaults"],
            out: ["{name}.txt"],
            srcs: [
                {srcs}
            ],
            cmd: "echo $(in) > $(out)",
        }}

        // Phony target used to install all shards
        prebuilt_etc_host {{
            name: "{name}",
            defaults: ["art_module_source_build_prebuilt_defaults"],
            src: ":{name}-tmp",
            required: [
                {deps}
            ],
            sub_dir: "art",
            filename: "{name}.txt",
        }}
        """))

if __name__ == "__main__":
  main()
