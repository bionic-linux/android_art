#!/bin/bash
#
# Copyright 2016 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

plugin=libopenjdkjvmtid.so
agent=libtiagentd.so
if  [[ "$@" == *"-O"* ]]; then
  agent=libtiagent.so
  plugin=libopenjdkjvmti.so
fi

if [[ "$@" == *"--interpreter"* ]]; then
  # On interpreter we are fully capable of providing the full jvmti api so we
  # have a slightly different expected output.
  # TODO We should really be changing this in the 'check' script.
  patch -s expected.txt <interpreter-expected.patch
fi

# Provide additional runtime options when running on device.
extra_runtime_options=
if  [[ "$@" != *"--host"* ]]; then
  # Copied from `test/etc/run-test-jar` and adapted.
  # TODO: Refactor this logic to avoid code duplication.
  ARCHITECTURES_32="(arm|x86|mips|none)"
  ARCHITECTURES_64="(arm64|x86_64|mips64|none)"
  # Determine the target ISA.
  if  [[ "$@" == *"--64"* ]]; then
    ARCHITECTURES_PATTERN="${ARCHITECTURES_64}"
    TEST_DIRECTORY="nativetest64"
  else
    ARCHITECTURES_PATTERN="${ARCHITECTURES_32}"
    TEST_DIRECTORY="nativetest"
  fi

  # Need to be root to query /data/dalvik-cache
  adb root > /dev/null
  adb wait-for-device
  ISA=
  ISA_adb_invocation=
  ISA_outcome=
  # We iterate a few times to workaround an adb issue. b/32655576
  for i in {1..10}; do
    ISA_adb_invocation=$(adb shell ls -F /data/dalvik-cache)
    ISA_outcome=$?
    ISA=$(echo $ISA_adb_invocation | grep -Ewo "${ARCHITECTURES_PATTERN}")
    if [ x"$ISA" != "x" ]; then
      break;
    fi
  done
  if [ x"$ISA" = "x" ]; then
    echo "Unable to determine architecture"
    # Print a few things for helping diagnosing the problem.
    echo "adb invocation output: $ISA_adb_invocation"
    echo "adb invocation outcome: $ISA_outcome"
    echo $(adb shell ls -F /data/dalvik-cache)
    echo $(adb shell ls /data/dalvik-cache)
    echo ${ARCHITECTURES_PATTERN}
    echo $(adb shell ls -F /data/dalvik-cache | grep -Ewo "${ARCHITECTURES_PATTERN}")
    exit 1
  fi

  # Path to native libraries installed on the device for testing purposes.
  test_native_lib_path=/data/${TEST_DIRECTORY}/art/${ISA}

  # The linker configuration used for dalvikvm(64) in the Runtime APEX
  # requires us to pass the full path to the agent to the runtime when
  # running on device.
  agent=${test_native_lib_path}/${agent}

  # The above agent path is an absolute one; append the root directory to the
  # library path so that the agent can be found via the `java.library.path`
  # system property (see method `Main.find` in
  # test/909-attach-agent/src-art/Main.java).
  extra_runtime_options="--runtime-option -Djava.library.path=${test_native_lib_path}:/"
fi

export ANDROID_LOG_TAGS='*:f'
./default-run "$@" --android-runtime-option -Xplugin:${plugin} \
                   --android-runtime-option -Xcompiler-option \
                   --android-runtime-option --debuggable \
                   $extra_runtime_options \
                   --args agent:${agent}=909-attach-agent
return_status1=$?

./default-run "$@" --android-runtime-option -Xcompiler-option \
                   --android-runtime-option --debuggable \
                   $extra_runtime_options \
                   --args agent:${agent}=909-attach-agent
return_status2=$?

./default-run "$@" $extra_runtime_options \
                   --args agent:${agent}=909-attach-agent \
                   --external-log-tags
return_status3=$?

./default-run "$@" $extra_runtime_options \
                   --args agent:${agent}=909-attach-agent \
                   --args disallow-debugging \
                   --external-log-tags
return_status4=$?

# Make sure we don't silently ignore an early failure.
(exit $return_status1) && \
  (exit $return_status2) && \
  (exit $return_status3) && \
  (exit $return_status4)
