{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ceb14fca_0086db57",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 998,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T09:04:43Z",
      "side": 1,
      "message": "This is overly pessimistic for small types and off-by-one for long/double (the branch should be JAE instead of JA). The same off-by-one error is in other `COMPUTE_ARRAY_SIZE_*` macros.\n\nI think this check should be done in the `ALLOC_ARRAY_TLAB_FAST_PATH_RESOLVED_WITH_SIZE` as on arm64. In that macro, we finish the exact size calculation (with the ANDQ instruction) and we can do a precise check (the threshold is aligned, so we could compare even before the ANDQ). This would also reduce the amount of almost indentical code across the `COMPUTE_ARRAY_SIZE_*` macros.",
      "range": {
        "startLine": 997,
        "startChar": 4,
        "endLine": 998,
        "endChar": 25
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40325096_2b29eabf",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 998,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T09:12:51Z",
      "side": 1,
      "message": "I see we have the same off-by-one error on x86 and we cannot easily move the check to `ALLOC_ARRAY_TLAB_FAST_PATH_RESOLVED_WITH_SIZE` there. So we should really fix JA to JAE for x86 and we may want to think whether to replace the imprecise check in the `COMPUTE_ARRAY_SIZE_UNKNOWN` with two checks to make it precise; first the same check as in `COMPUTE_ARRAY_SIZE_8` which would avoid overflows in the size calculation, and then a precise check after calculating the size.",
      "parentUuid": "ceb14fca_0086db57",
      "range": {
        "startLine": 997,
        "startChar": 4,
        "endLine": 998,
        "endChar": 25
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1e1e55f_e5e831d1",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 998,
      "author": {
        "id": 3257532
      },
      "writtenOn": "2024-01-26T02:19:54Z",
      "side": 1,
      "message": "Thank you for your review and for catching the off-by-one error. Do you want me to change the x86 code in this CL as well? I\u0027ll change the x86_64 code to be more similar to the arm64 one with only one size check in `ALLOC_ARRAY_TLAB_FAST_PATH_RESOLVED_WITH_SIZE`.",
      "parentUuid": "40325096_2b29eabf",
      "range": {
        "startLine": 997,
        "startChar": 4,
        "endLine": 998,
        "endChar": 25
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2c1b1b1_07ab7089",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 998,
      "author": {
        "id": 3257532
      },
      "writtenOn": "2024-01-26T02:26:44Z",
      "side": 1,
      "message": "Though I\u0027m not sure why you say moving the check to `ALLOC_ARRAY_TLAB_FAST_PATH_RESOLVED_WITH_SIZE` in x86 is not easy? The total size is in the `%edx` register and we could do the size check after aligning the size to 8-bytes. Does that not work?",
      "parentUuid": "f1e1e55f_e5e831d1",
      "range": {
        "startLine": 997,
        "startChar": 4,
        "endLine": 998,
        "endChar": 25
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e92d1790_3f7d4322",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 998,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-29T09:43:24Z",
      "side": 1,
      "message": "Feel free to add x86 changes to this CL or create a separate one.\n\nOn 64-bit architectures, such as x64-64, we\u0027re using 64-bit arithmetic to avoid overflows. On 32-bit architectures, this trick does not work because we have only 32-bit registers and we could have arithmetic overflow for very high or negative input lengths, so it\u0027s better to do the check before calculating the object size.",
      "parentUuid": "d2c1b1b1_07ab7089",
      "range": {
        "startLine": 997,
        "startChar": 4,
        "endLine": 998,
        "endChar": 25
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dec3bdb_3c99b468",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 998,
      "author": {
        "id": 3257532
      },
      "writtenOn": "2024-01-31T01:49:31Z",
      "side": 1,
      "message": "Ah yes of course. Thank you for the clarification. I\u0027ve updated x86_64 to be in-line with arm64, and I\u0027ve fixed the off-by-one error in x86, but `COMPUTE_ARRAY_SIZE_UNKNOWN` is still pessimistic (i.e. it does not perform two size checks). Please let me know if more changes are required for this CL.",
      "parentUuid": "e92d1790_3f7d4322",
      "range": {
        "startLine": 997,
        "startChar": 4,
        "endLine": 998,
        "endChar": 25
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5cb0d94_964c3eb5",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 998,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-31T09:01:25Z",
      "side": 1,
      "message": "This is OK. I may change the pessimistic check on x86 later.",
      "parentUuid": "0dec3bdb_3c99b468",
      "range": {
        "startLine": 997,
        "startChar": 4,
        "endLine": 998,
        "endChar": 25
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7b064e4_c1e2fdde",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 1063,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-01-24T18:31:23Z",
      "side": 1,
      "message": "I don\u0027t fully understand the intent of the macros in asm_support, and whether this is consistent with that. Vladimir?",
      "range": {
        "startLine": 1063,
        "startChar": 4,
        "endLine": 1063,
        "endChar": 51
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "619d0cdb_447e11dd",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 1063,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T09:04:43Z",
      "side": 1,
      "message": "Those macros were useful when we supported Mac builds but I don\u0027t think we support that anymore. But we may want to support them again, so I would not want to get rid of them.",
      "parentUuid": "d7b064e4_c1e2fdde",
      "range": {
        "startLine": 1063,
        "startChar": 4,
        "endLine": 1063,
        "endChar": 51
      },
      "revId": "5d90329dd41360791b1e364db856048563a35cbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}