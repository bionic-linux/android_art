{
  "comments": [
    {
      "key": {
        "uuid": "2e144987_64da0af7",
        "filename": "compiler/driver/compiler_driver_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-01-08T01:02:12Z",
      "side": 1,
      "message": "nit: nullptr for new code?",
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ec80176_590b471b",
        "filename": "compiler/driver/compiler_driver_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-01-08T16:29:15Z",
      "side": 1,
      "message": "I wanted to be consistent with the code around it, which uses NULL. I would rather update the test to use nullptr in a separate change.",
      "parentUuid": "2e144987_64da0af7",
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e17bd8b_68a01baa",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1495,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-01-08T01:02:12Z",
      "side": 1,
      "message": "What\u0027s our stance on adding [D]CHECK(arg !\u003d nullptr) when we assume it\u0027s not null?",
      "range": {
        "startLine": 1495,
        "startChar": 76,
        "endLine": 1495,
        "endChar": 77
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aeae7991_bb961354",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1495,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-01-08T16:29:15Z",
      "side": 1,
      "message": "Because we don\u0027t deference directly in this function, I think it\u0027s better to leave the CHECK to DexFile::Open, where the pointer is dereferenced. I\u0027ll add a CHECK there.",
      "parentUuid": "4e17bd8b_68a01baa",
      "range": {
        "startLine": 1495,
        "startChar": 76,
        "endLine": 1495,
        "endChar": 77
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8eee1533_02672c93",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1495,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-01-12T17:56:10Z",
      "side": 1,
      "message": "I changed my mind. I\u0027ve switched to DCHECKs at the beginning of the functions to check the out parameter, with a short message to indicate what\u0027s wrong if the out parameter pointer is NULL.",
      "parentUuid": "aeae7991_bb961354",
      "range": {
        "startLine": 1495,
        "startChar": 76,
        "endLine": 1495,
        "endChar": 77
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e17bd8b_88963754",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1680,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-01-08T01:02:12Z",
      "side": 1,
      "message": "Wasn\u0027t it typedefd in PS#1? Seems like it\u0027s copied and pasted a few times.\n\nJust curious if this is always the right style to do when writing new code?",
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ec80176_f93253da",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1680,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-01-08T16:29:15Z",
      "side": 1,
      "message": "See the comments on Patch Set 1 regarding the typedefs. I prefer no typedefs.",
      "parentUuid": "4e17bd8b_88963754",
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e17bd8b_28d3c31b",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-01-08T01:02:12Z",
      "side": 1,
      "message": "Does this seem seem to happen often enough it could be put into a wrapper function?",
      "range": {
        "startLine": 1987,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 3
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ec80176_d91e7755",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-01-08T16:29:15Z",
      "side": 1,
      "message": "Patch Set 1 had this as a separate function. I think the three lines are simple enough though, and easier to see that we are calling get on unique pointers.\n\nDoes anyone else have thoughts on this? I also looked into using std::transform or lambdas, but that probably obscures things more than is worth it to save a couple of lines.",
      "parentUuid": "4e17bd8b_28d3c31b",
      "range": {
        "startLine": 1987,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 3
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ec80176_bc38c9be",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-01-08T18:31:07Z",
      "side": 1,
      "message": "Ok, I see the mismatch now. You essentially want a map of dex file unique pointers to raw pointers. Using transform/etc isn\u0027t really clean unless you do it in a helper function (stdlib doesn\u0027t have a map that performs \"t1 -\u003e t2\" operation, only transform which is \"(t1, t2) -\u003e ()\").\n\nCome to think of it, it might be possible to change the signature of SetCompileTimeClassPath to take in \n\n  const std::vector\u003cstd::unique_ptr\u003cconst DexFile\u003e\u003e\u0026 \n\nThat would solve the problem without requiring a map at all since a const std::vector would only return a const std::unique_ptr\u0026 (so it would be illegal to call #release on it or to move it).\n\nThat being said that seems like a huge change in runtime.cc so maybe it\u0027s not worth doing.",
      "parentUuid": "6ec80176_d91e7755",
      "range": {
        "startLine": 1987,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 3
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ec80176_dc83c594",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-01-08T18:52:12Z",
      "side": 1,
      "message": "Actually I kind of doubt using a raw and/or unique pointer is even the right semantics for the SetCompileTimeClassPath.\n\nThe raw pointer just seems to be given out all over the place (Runtime::GetCompileTimeClassPath), but nobody is cleaning it up, so presumably it has to outlive the Runtime and someone else cleans it up? Then this DexFile* gets stored somehow in a Class* and it gets used in even more places.\n\nWhy isn\u0027t it just a shared_ptr?",
      "parentUuid": "6ec80176_bc38c9be",
      "range": {
        "startLine": 1987,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 3
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8eee1533_22db50a8",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-01-12T17:56:10Z",
      "side": 1,
      "message": "Currently the DexFiles passed to SetCompileTimeClassPath must outlive the Runtime. The caller of SetCompileTimeClassPath is responsible for ensuring that. I\u0027ll document that in the comments for SetCompileTimeClassPath.\n\nI don\u0027t know how things should look in a world where the runtime can unload classes that are no longer needed.",
      "parentUuid": "6ec80176_dc83c594",
      "range": {
        "startLine": 1987,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 3
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e17bd8b_88c3d746",
        "filename": "runtime/mirror/dex_cache_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-01-08T01:02:12Z",
      "side": 1,
      "message": "nit: nullptr for new code?",
      "range": {
        "startLine": 37,
        "startChar": 37,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aeae7991_dbbca7db",
        "filename": "runtime/mirror/dex_cache_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-01-08T16:29:15Z",
      "side": 1,
      "message": "As before, NULL is consistent with the code around here.",
      "parentUuid": "4e17bd8b_88c3d746",
      "range": {
        "startLine": 37,
        "startChar": 37,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "6aff121b610491e09c3dc416a3abc4aa8bf97451",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}