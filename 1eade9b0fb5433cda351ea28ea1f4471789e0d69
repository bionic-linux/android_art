{
  "comments": [
    {
      "key": {
        "uuid": "db749f80_fd9d58cb",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 16
      },
      "lineNbr": 878,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-06-12T19:30:59Z",
      "side": 1,
      "message": "For non-moving space, this will only scan objects on dirty cards for which bits are set in \u0027Live\u0027 bitmap (which becomes \u0027Mark\u0027 bitmap due to binding in IntializePhase()). However, it will not cover the objects which are in the \u0027Live\u0027 stack. This stack contains non-moving and large-object space objects that are allocated since last GC, up to STW pause. They are moved to \u0027Live\u0027 bitmap later in Sweep().\n\nAlso, considering that this loop is for only continuous spaces, don\u0027t we need another loop for large-object space, which is a discontinuous space?",
      "range": {
        "startLine": 852,
        "startChar": 4,
        "endLine": 878,
        "endChar": 5
      },
      "revId": "1eade9b0fb5433cda351ea28ea1f4471789e0d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e066c8c5_d255ea81",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 16
      },
      "lineNbr": 878,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-07-11T18:24:43Z",
      "side": 1,
      "message": "\u003e For non-moving space, this will only scan objects on dirty cards for which bits are set in \u0027Live\u0027 bitmap (which becomes \u0027Mark\u0027 bitmap due to binding in IntializePhase()). However, it will not cover the objects which are in the \u0027Live\u0027 stack. This stack contains non-moving and large-object space objects that are allocated since last GC, up to STW pause. They are moved to \u0027Live\u0027 bitmap later in Sweep().\n\nFollowing recent offline discussion, I have uploaded a follow-up change at https://android-review.googlesource.com/c/platform/art/+/715766 that handles newly allocated objects outside of the region space properly.\n\n\u003e Also, considering that this loop is for only continuous spaces, don\u0027t we need another loop for large-object space, which is a discontinuous space?\n\nThe large-object space contains only object with no \"explicit\" reference to other objects (such as large arrays of primitive type values). These objects do however contain an \"implicit\" reference, which is the one to their class object. However, these types (`int[]`, `long[]`, etc.) are all expected to be in the boot image (immune space), so this should be fine. Maybe a comment here could be useful; I\u0027ll add one in a subsequent patch set.",
      "parentUuid": "db749f80_fd9d58cb",
      "range": {
        "startLine": 852,
        "startChar": 4,
        "endLine": 878,
        "endChar": 5
      },
      "revId": "1eade9b0fb5433cda351ea28ea1f4471789e0d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "202bcbdf_b5e27f65",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 16
      },
      "lineNbr": 878,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-07-12T02:28:25Z",
      "side": 1,
      "message": "\u003e \n\u003e Following recent offline discussion, I have uploaded a follow-up change at https://android-review.googlesource.com/c/platform/art/+/715766 that handles newly allocated objects outside of the region space properly.\n\u003e \n\nI had a look at the CL you mentioned above. Is it complete or a WIP? The reason I ask is that live and mark bitmaps are still bound and the logic in MarkNonMoving() is also unchanged.",
      "parentUuid": "e066c8c5_d255ea81",
      "range": {
        "startLine": 852,
        "startChar": 4,
        "endLine": 878,
        "endChar": 5
      },
      "revId": "1eade9b0fb5433cda351ea28ea1f4471789e0d69",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}