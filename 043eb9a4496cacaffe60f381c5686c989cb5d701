{
  "comments": [
    {
      "key": {
        "uuid": "3c2bff7f_ae56d770",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-10-14T20:07:32Z",
      "side": 1,
      "message": "Probably better to just check this in the actual JNI compiled code?",
      "range": {
        "startLine": 32,
        "startChar": 47,
        "endLine": 32,
        "endChar": 57
      },
      "revId": "043eb9a4496cacaffe60f381c5686c989cb5d701",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c2bff7f_2e7f87d1",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-14T20:12:39Z",
      "side": 1,
      "message": "Yeah we could add this in there. Does the marking bit ever get set if it\u0027s not also tls32.is_marking\u003d\u003dtrue ? How would we measure a performance difference?\n\nAlso to check the mark bit from JNI, it\u0027s a bit slower than the tls32 guard because we have to do additional masking operations and the thread is already likely in cache because we have to look up the JNIEnv etc, but the class won\u0027t be.",
      "parentUuid": "3c2bff7f_ae56d770",
      "range": {
        "startLine": 32,
        "startChar": 47,
        "endLine": 32,
        "endChar": 57
      },
      "revId": "043eb9a4496cacaffe60f381c5686c989cb5d701",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c2bff7f_915d7e60",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-14T21:19:02Z",
      "side": 1,
      "message": "Noted the idea of checking the mark bit in the JNI stub in b/30437917",
      "parentUuid": "3c2bff7f_ae56d770",
      "range": {
        "startLine": 32,
        "startChar": 47,
        "endLine": 32,
        "endChar": 57
      },
      "revId": "043eb9a4496cacaffe60f381c5686c989cb5d701",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c2bff7f_d1cb06a9",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-14T21:19:02Z",
      "side": 1,
      "message": "The mark bit may still be set after is_gc_marking is turned back to false when the marking phase is done. The mark bits are cleared in another phase after the marking phase.\n\nAs long as we do the fast path check nested, as in,\n\nif (is_gc_marking) {\n  if (ref.mark_bit \u003d\u003d 0) {\n    \u003ctake-slow-path\u003e\n  }\n}\n\nI think it should be correct.\n\nI agree with the extra overhead of masking and possibility of a cache miss. At least, I think arm64 tbz avoids the need to mask.",
      "parentUuid": "3c2bff7f_2e7f87d1",
      "range": {
        "startLine": 32,
        "startChar": 47,
        "endLine": 32,
        "endChar": 57
      },
      "revId": "043eb9a4496cacaffe60f381c5686c989cb5d701",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcbe0e35_a6e0088e",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-17T08:39:18Z",
      "side": 1,
      "message": "Why isn\u0027t this change checking is_gc_marking?",
      "parentUuid": "3c2bff7f_d1cb06a9",
      "range": {
        "startLine": 32,
        "startChar": 47,
        "endLine": 32,
        "endChar": 57
      },
      "revId": "043eb9a4496cacaffe60f381c5686c989cb5d701",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}