{
  "comments": [
    {
      "key": {
        "uuid": "562a227b_6edc6408",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 651,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-03T17:10:46Z",
      "side": 1,
      "message": "This is hacky. Couldn\u0027t we instead add logic to delete affected loop phis?",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6195673_eb516ce2",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 651,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-03T17:22:12Z",
      "side": 1,
      "message": "This looks like marking `phi` dead on line 291 if `input` is nullptr would do the trick. Correct me if i\u0027m wrong.",
      "parentUuid": "562a227b_6edc6408",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d659b274_3aedc1e7",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 651,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-04T10:13:19Z",
      "side": 1,
      "message": "Actually this does not work in the general case. If the local before is a phi, at this stage it\u0027s typed void so we will mis it.\n\nLet\u0027s discuss about this. Could we give an initial type to a phi? That would make the type propagation convergence faster, but not sure if we handle it (today or even with your DeadPhiHandling change). WDYT?",
      "parentUuid": "f6195673_eb516ce2",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d683721b_8a7c8bca",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 651,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-04T18:47:47Z",
      "side": 1,
      "message": "Ah yeah, that\u0027s nasty. So don\u0027t forget there\u0027s three places where we create phis:\n\n1) visiting a block that\u0027s not a loop header\nThis creates a phi for each vreg defined in all predecessors. It does not do any typing though, so it will create a phi even if the values are of a different size - we rely on DeadPhiHandling to not revive it / will rely on type propagation to mark it dead. But that\u0027s after the StoreLocal was visited.\n\nYou could get away with assigning a type in this case though. You could initialize the phi to kPrimInt if there are only 32-bit inputs, and kPrimLong otherwise. Type propagation will either type it properly or mark the phi dead.\n\n2) visiting a block that is a loop header:\nWe eagerly create empty phis for all vregs defined in the pre-header. The problem is different here, though, because we only have locals for the pre-header. It should work just the same with a single input though. Either you get the type size right and the phi stays in the environments, or you get it wrong, typing will fail anyway and the phi gets removed.\n\n3) requesting locals for a catch block\nEagerly creating catch phis. Again, you could base the initial type for a phi for each vreg based on the current locals.\n\nSo that sounds like it could work. I\u0027d prefer if you waited until my CL goes in, though, because the above relies on dealing with type conflicts.",
      "parentUuid": "d659b274_3aedc1e7",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1698aa84_ac6a43c0",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 651,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-04T19:01:51Z",
      "side": 1,
      "message": "Actually, no... If a vreg is single-width in some predecessors and low/high of a pair in others, you might still miss it if you assume single-width from the first input... Let me think about this more.",
      "parentUuid": "d683721b_8a7c8bca",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7643a650_5df8366e",
        "filename": "test/543-env-long-ref/smali/TestCase.smali",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-03T17:10:46Z",
      "side": 1,
      "message": "Why don\u0027t you just test the environment values with checker?",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f675d6b9_f395d0ff",
        "filename": "test/543-env-long-ref/smali/TestCase.smali",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-03T17:13:03Z",
      "side": 1,
      "message": "I could, but the jdwp debugger doesn\u0027t use checker ;-) so this test is just reproducing the bug you would see with jdwp, which is (I\u0027m sorry) superior than a checker test ;-)",
      "parentUuid": "7643a650_5df8366e",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d63612de_a02db887",
        "filename": "test/543-env-long-ref/smali/TestCase.smali",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-03T17:19:56Z",
      "side": 1,
      "message": "Surely your test is not meant to verify stack map generation and neither simulate the way jdwp accesses vregs, but merely check the fact that a value was removed from the environment. I\u0027m not gonna be a checker-evangelist though, so will leave it to your judgement ;)",
      "parentUuid": "f675d6b9_f395d0ff",
      "revId": "a1246331ec4f86943c10dbc90f4917b310773092",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}