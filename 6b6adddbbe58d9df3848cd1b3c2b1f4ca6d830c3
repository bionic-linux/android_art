{
  "comments": [
    {
      "key": {
        "uuid": "788fe26d_4a783c5e",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 2432,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-30T02:32:41Z",
      "side": 1,
      "message": "This is wrong, I think.\n\nYou cannot do this immediately. You can only do this if either of the following is true:\n* This is a DelegateLast classloader.\n* The *complete* chain is Path or Dex classloaders.\n\nThe recursive nature of FindClassInBaseDexClassLoader took care of that before...",
      "range": {
        "startLine": 2432,
        "startChar": 2,
        "endLine": 2432,
        "endChar": 72
      },
      "revId": "6b6adddbbe58d9df3848cd1b3c2b1f4ca6d830c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2459261b_8fd9e4aa",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 2432,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-06-30T08:53:21Z",
      "side": 1,
      "message": "Hmm, I think you\u0027re right. Good catch! and it looks like we don\u0027t have a regression test to capture it. I\u0027ll add one.\n\nI\u0027ll just add a  full check of the chain before calling this. It will simplify the interface as well.",
      "parentUuid": "788fe26d_4a783c5e",
      "range": {
        "startLine": 2432,
        "startChar": 2,
        "endLine": 2432,
        "endChar": 72
      },
      "revId": "6b6adddbbe58d9df3848cd1b3c2b1f4ca6d830c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19e7c4d0_b910dca1",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 2432,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-30T15:53:14Z",
      "side": 1,
      "message": "Please don\u0027t. Please keep it simple. Keep the original setup of this being the recursive function.\n\n bool Find(cl) {\n   if (IsBootClass(cl)) {\n     return LoadFromBoot()\n   } else if (IsPath(cl) || IsDex(cl)) {\n     if (Find(cl.getParent()) {\n       return true;\n     }\n     return LoadDexPathList(cl);\n   } else if (IsDelegateLast(cl)) {\n     if (LoadDexPathList(cl)) {\n       return true;\n     }\n     if (LoadFromBoot()) {\n       return true;\n     }\n     return Find(cl.getParent());\n   }\n }\n\nYes, that will hit the boot classloader twice for DelegateLast when the class is missing. But at least the loading code is *clean*-ish that way.",
      "parentUuid": "2459261b_8fd9e4aa",
      "range": {
        "startLine": 2432,
        "startChar": 2,
        "endLine": 2432,
        "endChar": 72
      },
      "revId": "6b6adddbbe58d9df3848cd1b3c2b1f4ca6d830c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7265c6ae_182fd2b8",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 2432,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-06-30T19:41:59Z",
      "side": 1,
      "message": "You will hit the boot class path in the order of the number of DelegateLast loaders + 1.   That\u0027s a waste to me. \n\nIt will also makes things more complex because your snippet is not correct. For delegate last you need to first search the boot classpath. Which means that you still need to traverse to the top of the chain to verify that nothing is unsupported (as you noticed in your first reply). Implementing this recursively is doable but it adds much more complexity to make sure that after recursing for the boot classpath you return to the original DelegateLast.",
      "parentUuid": "19e7c4d0_b910dca1",
      "range": {
        "startLine": 2432,
        "startChar": 2,
        "endLine": 2432,
        "endChar": 72
      },
      "revId": "6b6adddbbe58d9df3848cd1b3c2b1f4ca6d830c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "050a004a_2fcd81bc",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 2473,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-30T14:21:16Z",
      "side": 1,
      "message": "From an API standpoint, I do not like this method which walks the parent chain but arbitrarily stops at the boot classpath.",
      "range": {
        "startLine": 2465,
        "startChar": 0,
        "endLine": 2473,
        "endChar": 75
      },
      "revId": "6b6adddbbe58d9df3848cd1b3c2b1f4ca6d830c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33abc7bd_d6536bab",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 2473,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-06-30T19:41:59Z",
      "side": 1,
      "message": "What alternatives do you suggest?\n\n- Andreas suggestions for a pure recursive method (which hits the boot class multiple times and adds complexity imo)? \n- linearizing the chain in a natural search order?\n- others?",
      "parentUuid": "050a004a_2fcd81bc",
      "range": {
        "startLine": 2465,
        "startChar": 0,
        "endLine": 2473,
        "endChar": 75
      },
      "revId": "6b6adddbbe58d9df3848cd1b3c2b1f4ca6d830c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39365284_d8f15633",
        "filename": "runtime/class_linker.h",
        "patchSetId": 1
      },
      "lineNbr": 843,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-30T14:21:16Z",
      "side": 1,
      "message": "From just reading the header, these could sound like doing the same. The difference should be more explicit.",
      "range": {
        "startLine": 822,
        "startChar": 0,
        "endLine": 843,
        "endChar": 34
      },
      "revId": "6b6adddbbe58d9df3848cd1b3c2b1f4ca6d830c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}