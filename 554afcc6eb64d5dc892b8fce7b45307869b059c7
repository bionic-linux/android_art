{
  "comments": [
    {
      "key": {
        "uuid": "79bf0033_234eca8b",
        "filename": "runtime/dex_instruction-inl.h",
        "patchSetId": 11
      },
      "lineNbr": 458,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "Why do you need all this? I thought we would have a invoke-lambda and invoke-lambda-range, to mimic what we already have.",
      "range": {
        "startLine": 458,
        "startChar": 0,
        "endLine": 458,
        "endChar": 76
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "597cfc56_4c6dc029",
        "filename": "runtime/dex_instruction-inl.h",
        "patchSetId": 11
      },
      "lineNbr": 458,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "This is a new format 25x, there wasn\u0027t a 25x format before.\n\nThe rest of the code just follows the rest of the file\u0027s convention.\n\n(and yeah we will have an invoke-lambda and an invoke-lambda-range)",
      "parentUuid": "79bf0033_234eca8b",
      "range": {
        "startLine": 458,
        "startChar": 0,
        "endLine": 458,
        "endChar": 76
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_411d9296",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 11
      },
      "lineNbr": 498,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "Nit: number_of_inputs",
      "range": {
        "startLine": 498,
        "startChar": 34,
        "endLine": 498,
        "endChar": 44
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b98a589d_b1edc888",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 11
      },
      "lineNbr": 498,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "I thought you\u0027d appreciate that I renamed it from num_ins to num_inputs to begin with (see 497 of older file) ;).\n\nIf you could tell me in more detail what the rule is here, I would like to document it so we can expand out the words correctly in the future.\n\nFor example, there are some \"string_init\" here in this method, why not \"string_initialize\" ? \"num_regs\" -\u003e why not \"number_of_registers\"?\n\nIs it because those are local and num_inputs is a parameter?",
      "parentUuid": "397f484e_411d9296",
      "range": {
        "startLine": 498,
        "startChar": 34,
        "endLine": 498,
        "endChar": 44
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "195444e3_33c8f295",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 11
      },
      "lineNbr": 498,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-16T15:17:37Z",
      "side": 1,
      "message": "Yes, thank you for having changed it to num_inputs :-). Changing it to number_of_inputs, I think, makes it clearer what it is. In general, I avoid abbreviations.\n\nstring_init is fine, because the methods are called \u003cinit\u003e, not \u003cinitialize\u003e. I would also have changed num_regs to number_of_vregs.",
      "parentUuid": "b98a589d_b1edc888",
      "range": {
        "startLine": 498,
        "startChar": 34,
        "endLine": 498,
        "endChar": 44
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9733893_b53ea0ea",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 11
      },
      "lineNbr": 720,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "Indentation is off.",
      "range": {
        "startLine": 720,
        "startChar": 12,
        "endLine": 720,
        "endChar": 71
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_81179a74",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 11
      },
      "lineNbr": 739,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "Isn\u0027t all of this handled before the DoLambdaCall?",
      "range": {
        "startLine": 738,
        "startChar": 0,
        "endLine": 739,
        "endChar": 36
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5965dcc2_a3874819",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 11
      },
      "lineNbr": 739,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "Well this gets handled by create-lambda (it only searches for static methods), but I\u0027m not sure if we can rely on that since now that the instructions are split up it\u0027s possible (though unlikely) for something to go wrong in between the create-lambda and invoke-lambda.\n\nI can remove this if you think it\u0027s completely unnecessary. It should really be a proper verifier-like check where it throws an exception.",
      "parentUuid": "397f484e_81179a74",
      "range": {
        "startLine": 738,
        "startChar": 0,
        "endLine": 739,
        "endChar": 36
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_07d63abd",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 11
      },
      "lineNbr": 739,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-16T15:17:37Z",
      "side": 1,
      "message": "Yes, I agree it should be a verifier check. The line is a bit blur between what the interpreter should DCHECK when it comes to things the verifier should have done, so it\u0027s up to you.",
      "parentUuid": "5965dcc2_a3874819",
      "range": {
        "startLine": 738,
        "startChar": 0,
        "endLine": 739,
        "endChar": 36
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79bf0033_c3389600",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "IsValidLambdaTarget ?",
      "range": {
        "startLine": 114,
        "startChar": 19,
        "endLine": 114,
        "endChar": 39
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "597cfc56_6c6a8414",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 114,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "Is that appropriate naming given that this can throw an exception as a side effect? I would expect \"IsX\" to be pure, or at least lazy.\n\nFor example most of the optimizing functions in locations seem to have \"IsX\" being a const function.",
      "parentUuid": "79bf0033_c3389600",
      "range": {
        "startLine": 114,
        "startChar": 19,
        "endLine": 114,
        "endChar": 39
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_27db3ee7",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-16T15:17:37Z",
      "side": 1,
      "message": "It\u0027s mostly a nit, since the method returns bool. You could also name it ValidateLambdaTargetOrThrow, or IsValidLambdaTargetOrThrow. Maybe the former is better, as you can still return false and not throw.",
      "parentUuid": "597cfc56_6c6a8414",
      "range": {
        "startLine": 114,
        "startChar": 19,
        "endLine": 114,
        "endChar": 39
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_a12bbeba",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 135,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "-\u003e creates an exception, puts it in the thread tls, and returns false?",
      "range": {
        "startLine": 135,
        "startChar": 38,
        "endLine": 135,
        "endChar": 44
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_1502f6c6",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 135,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "I am happy to of course change this comment, please help me understand the code better so that I can write the most accurate comments.\n\nCan you elaborate why this extra detail is necessary?\n\nAre there cases when we *don\u0027t* throw the exception in the way you described (by putting it in the thread tls)? Creating an exception too should be quite common, we only want to throw preallocated exceptions in the rare case (eg OOM).",
      "parentUuid": "397f484e_a12bbeba",
      "range": {
        "startLine": 135,
        "startChar": 38,
        "endLine": 135,
        "endChar": 44
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79bf0033_8986bdeb",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 135,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-16T15:17:37Z",
      "side": 1,
      "message": "It\u0027s just that the \"throws\" in my opinion implies that you won\u0027t return from this method. I know some ART methods do not follow this rule but I find it confusing.",
      "parentUuid": "594a3c43_1502f6c6",
      "range": {
        "startLine": 135,
        "startChar": 38,
        "endLine": 135,
        "endChar": 44
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_e125c6e4",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "What\u0027s a method ID?",
      "range": {
        "startLine": 138,
        "startChar": 10,
        "endLine": 138,
        "endChar": 26
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_012b8ab9",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "vA and vA + 1, right?",
      "range": {
        "startLine": 138,
        "startChar": 43,
        "endLine": 138,
        "endChar": 54
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_35061ad2",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "dex method ID (I\u0027ll add a comment). I wasn\u0027t sure if the extra clarification was necessary since this is already at the interpreter scope dealing with dex.",
      "parentUuid": "397f484e_e125c6e4",
      "range": {
        "startLine": 138,
        "startChar": 10,
        "endLine": 138,
        "endChar": 26
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "796d40b3_36f536fb",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "Thanks, I had it just in vA before the art method change. The \u0027vA and vA+1\u0027 is temporary.",
      "parentUuid": "397f484e_012b8ab9",
      "range": {
        "startLine": 138,
        "startChar": 43,
        "endLine": 138,
        "endChar": 54
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "799460c1_5b7103d5",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "How can the method index be a target for invoke-lambda if the invoke-lambda is in another dex file?",
      "range": {
        "startLine": 146,
        "startChar": 65,
        "endLine": 146,
        "endChar": 84
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_c130c229",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "method  ID -\u003e method index in the dex file.",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 146,
        "endChar": 84
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b98a589d_b1cce85f",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "The term for method identifier (method_id_item) is used almost interchangably with the method index (method_idx). I can change it to be less ambiguous (method_idx offset into the method_ids)\n\nSee also https://source.android.com/devices/tech/dalvik/dex-format.html\n\nThat being said the invoke docs refer to method_id instead of method_idx. \n\n\u003e invoke-super is used to invoke the closest superclass\u0027s virtual method (as opposed to the one with the same method_id in the calling class). The same method restrictions hold as for invoke-virtual.\n\nhttps://source.android.com/devices/tech/dalvik/dalvik-bytecode.html",
      "parentUuid": "397f484e_c130c229",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 146,
        "endChar": 84
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "597cfc56_7f9f8867",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "It\u0027s not any different than invoke-virtual, etc (they also take a method index).\n\nI haven\u0027t really looked at the dex file in detail in that case, but I imagine they just have the bare minimum needed to reconstruct the method\u0027s type signature.\n\nSidenote, this is for create-lambda (not invoke-lambda). create-lambda would almost always be in the same dex file (although it\u0027s not a requirement).\n\nIf I did want to add a method_idx to invoke-lambda then that would be purely to make it easier for the verifier to know which single-abstract-method it corresponds to (i.e. we don\u0027t actually need the ID to do the call dispatch).",
      "parentUuid": "799460c1_5b7103d5",
      "range": {
        "startLine": 146,
        "startChar": 65,
        "endLine": 146,
        "endChar": 84
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "195444e3_93043e4f",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-16T15:17:37Z",
      "side": 1,
      "message": "I see. Talk about confusing :-) The compiler code (both driver/quick/optimizing) AFAIK exclusively talk about method_index.",
      "parentUuid": "b98a589d_b1cce85f",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 146,
        "endChar": 84
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "799460c1_a19ada4b",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-16T15:17:37Z",
      "side": 1,
      "message": "My point is that the other dex file, when doing the invoke-lambda, if it only has the method index of where that lambda was defined it is not enough. That method index is irrelevant for the other dex file.",
      "parentUuid": "597cfc56_7f9f8867",
      "range": {
        "startLine": 146,
        "startChar": 65,
        "endLine": 146,
        "endChar": 84
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "799460c1_3b643714",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 168,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "Impossible",
      "range": {
        "startLine": 168,
        "startChar": 56,
        "endLine": 168,
        "endChar": 66
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5965dcc2_4364ac14",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 168,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "(:",
      "parentUuid": "799460c1_3b643714",
      "range": {
        "startLine": 168,
        "startChar": 56,
        "endLine": 168,
        "endChar": 66
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9733893_756ec8f5",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 183,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "I\u0027d drop the \u0027always\u0027",
      "range": {
        "startLine": 183,
        "startChar": 13,
        "endLine": 183,
        "endChar": 19
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9733893_9539a407",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 184,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 184,
        "startChar": 13,
        "endLine": 184,
        "endChar": 19
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "799460c1_7b6ebff5",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 184,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "What does it mean \"up to\" ?",
      "range": {
        "startLine": 184,
        "startChar": 55,
        "endLine": 184,
        "endChar": 74
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "796d40b3_f9dc8f57",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 184,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "It\u0027s like all the other non-range invokes, it encodes the # of vregs in a 4-bit half-word (\"the count\") and then uses the other 5 half-words to potentially encode a vreg#.\n\nThe actual encoding is documented in the CC file.",
      "parentUuid": "799460c1_7b6ebff5",
      "range": {
        "startLine": 184,
        "startChar": 55,
        "endLine": 184,
        "endChar": 74
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_21208ed1",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 191,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "There\u0027s no such notion yet. Please be more explicit.",
      "range": {
        "startLine": 191,
        "startChar": 28,
        "endLine": 191,
        "endChar": 47
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "796d40b3_99047b4f",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 191,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "The full explanation is in the docs, there are pictures of diagrams. \n\nI can make it slightly more detailed without getting very specific:\n\n \u0027this should be a closure that also captures the variables instead of just an ArtMethod\u0027",
      "parentUuid": "397f484e_21208ed1",
      "range": {
        "startLine": 191,
        "startChar": 28,
        "endLine": 191,
        "endChar": 47
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79bf0033_498de502",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 11
      },
      "lineNbr": 191,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-16T15:17:37Z",
      "side": 1,
      "message": "I see. Maybe to make things clearer for the reader, add something like: \"introduce a closure abstraction that will contain the captured variables\".",
      "parentUuid": "796d40b3_99047b4f",
      "range": {
        "startLine": 191,
        "startChar": 28,
        "endLine": 191,
        "endChar": 47
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9733893_d5331c21",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 11
      },
      "lineNbr": 552,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "lambdas",
      "range": {
        "startLine": 552,
        "startChar": 34,
        "endLine": 552,
        "endChar": 41
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_a152de3a",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 11
      },
      "lineNbr": 552,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "Opcodes for lambda implementation have ...",
      "range": {
        "startLine": 552,
        "startChar": 61,
        "endLine": 552,
        "endChar": 85
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "597cfc56_8244efc8",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 11
      },
      "lineNbr": 552,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "397f484e_a152de3a",
      "range": {
        "startLine": 552,
        "startChar": 61,
        "endLine": 552,
        "endChar": 85
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9733893_f5381800",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 11
      },
      "lineNbr": 2845,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "When/How do you plan on implementing these?",
      "range": {
        "startLine": 2832,
        "startChar": 0,
        "endLine": 2845,
        "endChar": 5
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_98b0dd81",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 11
      },
      "lineNbr": 2845,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "All the lambda opcodes working in the interpreter first, then the verifier.",
      "parentUuid": "b9733893_f5381800",
      "range": {
        "startLine": 2832,
        "startChar": 0,
        "endLine": 2845,
        "endChar": 5
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "397f484e_c157e229",
        "filename": "test/etc/default-build",
        "patchSetId": 11
      },
      "lineNbr": 11,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-14T15:11:36Z",
      "side": 1,
      "message": "What happened to your lambda test? You surely can keep it under this change.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 69
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "796d40b3_d98b5374",
        "filename": "test/etc/default-build",
        "patchSetId": 11
      },
      "lineNbr": 11,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-15T21:06:15Z",
      "side": 1,
      "message": "Thanks, I think they got lost after I split up the CLs",
      "parentUuid": "397f484e_c157e229",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 69
      },
      "revId": "554afcc6eb64d5dc892b8fce7b45307869b059c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}