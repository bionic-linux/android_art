{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe2e43e5_667b3863",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-26T14:30:00Z",
      "side": 1,
      "message": "Can you share the code where you saw this improvement? Was it a micro benchmark? Thanks!",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 13,
        "endChar": 23
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b78889b_3c73e8cf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 3544930
      },
      "writtenOn": "2024-07-29T22:16:24Z",
      "side": 1,
      "message": "Hi, Santiago! Sorry for the delay, I decided to double check. \nHere it\u0027s my draft of microbenchmark (obviously no warm-up is needed, but it was written in general). Benchmarking on VisionFive2.\n```\nimport java.lang.Runnable;\n\nclass Main {\n    private static final int workloadSize \u003d 8 * 1024;\n    private static final int warmupIters \u003d 30000;\n    private static final int warmup2Iters \u003d 100;\n    private static final int benchIters \u003d 50000;\n\n    private static void MeasureTime(String mark, int iter, B f) {\n        long start \u003d System.nanoTime();\n        double r \u003d 0;\n        for (int i \u003d 0; i \u003c iter; ++i) {\n            r +\u003d f.run();\n        }\n        long end \u003d System.nanoTime();\n\n        long taken \u003d end - start;\n        long taken_ms \u003d taken / (1000 * 1000);\n        long per_iter \u003d taken / iter;\n        double per_iter_mcs \u003d (double)per_iter / (1000.0);\n        double per_operation \u003d (double)per_iter / workloadSize;\n\n        System.out.printf(\"\u0027%s\u0027 total \u003d %d ms  iter \u003d %.2f mcs  op \u003d %.2f ns\\n\", mark, taken_ms, per_iter_mcs, per_operation);\n    }\n\n    interface B {\n        double run();\n    }\n\n    static class CopySignDoubleRunner implements B {\n        @Override\n        public double run() {\n            double double81 \u003d 81.0d, doubleNegative12 \u003d -12.0d, result \u003d 0;\n            for (int i \u003d 0; i \u003c workloadSize; ++i) {\n                result \u003d Math.copySign(double81, doubleNegative12 - result);\n            }\n\n            return result;\n        }\n    }\n\n    static class CopySignFloatRunner implements B {\n        @Override\n        public double run() {\n            float float1 \u003d 1.0f, floatNegative99 \u003d -99.0f, result \u003d 0;\n            for (int i \u003d 0; i \u003c workloadSize; ++i) {\n                result \u003d Math.copySign(floatNegative99, float1 - result);\n            }\n            return result;\n        }\n    }\n\n    static class SignumDoubleRunner implements B {\n        @Override\n        public double run() {\n            double x \u003d 0.1d;\n            double result \u003d 0;\n            for (int i \u003d 0; i \u003c workloadSize; ++i) {\n                result \u003d Math.signum(x - result);\n            }\n            return result;\n        }\n    }\n\n    static class SignumFloatRunner implements B {\n        @Override\n        public double run() {\n            float x \u003d 0.9f;\n            float result \u003d 0;\n            for (long i \u003d 0; i \u003c workloadSize; ++i) {\n                result \u003d Math.signum(x - result);\n            }\n            return (double)result;\n        }\n    }\n\n    public static void main(String[] args) {\n        { // double copySign\n          MeasureTime(\"warmup (double copySign):\", warmupIters, new CopySignDoubleRunner());\n          MeasureTime(\"bench (double copySign):\", benchIters, new CopySignDoubleRunner());\n        }\n\n        { // float copySign\n          MeasureTime(\"warmup (float copySign):\", warmupIters, new CopySignFloatRunner());\n          MeasureTime(\"bench (float copySign):\", benchIters, new CopySignFloatRunner());\n        }\n\n        { // double signum\n          MeasureTime(\"warmup (double signum):\", warmupIters, new SignumDoubleRunner());\n          MeasureTime(\"bench (double signum):\", benchIters, new SignumDoubleRunner());\n        }\n\n        { // float signum\n          MeasureTime(\"warmup (float signum):\", warmupIters, new SignumFloatRunner());\n          MeasureTime(\"bench (float signum):\", benchIters, new SignumFloatRunner());\n        }\n\n    }\n}\n```",
      "parentUuid": "fe2e43e5_667b3863",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 13,
        "endChar": 23
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e6942aa_18d37ad9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 3544930
      },
      "writtenOn": "2024-07-29T22:26:32Z",
      "side": 1,
      "message": "In addition some logs to show how the microbenchmark was run.\n\n// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n//  no intrinsics\n// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n```\n/home/olga.mikhaltsova/aosp_upstream/art/test/run-test --chroot chroot-riscv64-userdebug-board --64 --optimizing --instruction-set-features rv64gc_zba_zbb -O 001-HelloWorld\n..\n$$  \u0027/apex/com.android.art/bin/dex2oat64\u0027 --compile-art-test --runtime-arg -Xgc:CMC --runtime-arg -Xbootclasspath:/apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/\u003e\n07-29 21:22:42.402 43948 43948 W dex2oat64: instruction_set_features_riscv64.cc:43 Unexpected CPU variant for Riscv64 using defaults: default\n07-29 21:22:42.406 43948 43948 W dex2oat64: dex2oat.cc:671 Generating an app image without a profile. This will result in an app image with no classes. Did you forget to add the profile with either --pro\u003e\n07-29 21:22:42.406 43948 43948 I dex2oat64: dex2oat.cc:3166 /apex/com.android.art/bin/dex2oat64 --compile-art-test --dex-file\u003d/data/run-test/test-2290192/001-HelloWorld.jar --oat-file\u003d/data/run-test/test\u003e\n07-29 21:22:42.407 43948 43948 E cutils-trace: Error opening trace file: No such file or directory (2)\n07-29 21:22:42.411 43948 43948 I dex2oat64: parsed_options.cc:694 setting boot class path to /apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/apex/com.android.art/\u003e\n07-29 21:22:42.415 43948 43948 I dex2oat64: heap.cc:440 Using CollectorTypeCMC GC.\n07-29 21:22:42.478 43948 43955 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n07-29 21:22:42.478 43948 43956 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n07-29 21:22:42.478 43948 43957 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n07-29 21:22:42.484 43948 43948 W dex2oat64: mark_compact.cc:385 Userfaultfd isn\u0027t supported (reason: Function not implemented) and therefore falling back to stop-the-world compaction.\n07-29 21:22:42.484 43948 43948 I dex2oat64: heap.cc:2946 Explicit concurrent mark compact GC freed 124KB AllocSpace bytes, 0(0B) LOS objects, 99% free, 4096B/24MB, paused 52us,156us total 1.503ms\n07-29 21:22:42.509 43948 43948 I dex2oat64: dex2oat.cc:2870 dex2oat took 110.127ms (97.169ms cpu) (threads: 4) arena alloc\u003d209KB (214496B) java alloc\u003d4096B (4096B) native alloc\u003d481KB (493168B) free\u003d909KB\u003e\n07-29 21:22:42.509 43948 43959 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n$$ set -o pipefail; ((timeout -k 120s 600s  /apex/com.android.art/bin/dalvikvm64 -XX:ThreadSuspendTimeout\u003d500000 -Djava.library.path\u003d/data/nativetest64/art/riscv64 -XX:SlowDebug\u003dtrue -Xcompiler-option --\u003e\n07-29 21:22:42.554 43970 43970 I dalvikvm64: parsed_options.cc:694 setting boot class path to /apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/apex/com.android.art\u003e\n07-29 21:22:42.556 43970 43970 I dalvikvm64: heap.cc:440 Using CollectorTypeCMC GC.\n07-29 21:22:42.594 43970 43970 W dalvikvm64: fault_handler.cc:136 FaultHandler: MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED failed: 38 Function not implemented\n\u0027warmup (double copySign):\u0027 total \u003d 2793 ms  iter \u003d 93.13 mcs  op \u003d 11.37 ns\n\u0027bench (double copySign):\u0027 total \u003d 4655 ms  iter \u003d 93.10 mcs  op \u003d 11.36 ns\n\u0027warmup (float copySign):\u0027 total \u003d 2463 ms  iter \u003d 82.13 mcs  op \u003d 10.03 ns\n\u0027bench (float copySign):\u0027 total \u003d 4130 ms  iter \u003d 82.61 mcs  op \u003d 10.08 ns\n\u0027warmup (double signum):\u0027 total \u003d 3938 ms  iter \u003d 131.28 mcs  op \u003d 16.02 ns\n\u0027bench (double signum):\u0027 total \u003d 6563 ms  iter \u003d 131.26 mcs  op \u003d 16.02 ns\n\u0027warmup (float signum):\u0027 total \u003d 3610 ms  iter \u003d 120.36 mcs  op \u003d 14.69 ns\n\u0027bench (float signum):\u0027 total \u003d 6016 ms  iter \u003d 120.33 mcs  op \u003d 14.69 ns\n```\n// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n//  intrinsics\n// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n```\n/home/olga.mikhaltsova/aosp_upstream/art/test/run-test --chroot chroot-riscv64-userdebug-board --64 --optimizing --instruction-set-features rv64gc_zba_zbb -O 001-HelloWorld\n..\n$$  \u0027/apex/com.android.art/bin/dex2oat64\u0027 --compile-art-test --runtime-arg -Xgc:CMC --runtime-arg -Xbootclasspath:/apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/\u003e\n07-29 20:46:30.982 42895 42895 W dex2oat64: instruction_set_features_riscv64.cc:43 Unexpected CPU variant for Riscv64 using defaults: default\n07-29 20:46:30.985 42895 42895 W dex2oat64: dex2oat.cc:671 Generating an app image without a profile. This will result in an app image with no classes. Did you forget to add the profile with either --pro\u003e\n07-29 20:46:30.986 42895 42895 I dex2oat64: dex2oat.cc:3166 /apex/com.android.art/bin/dex2oat64 --compile-art-test --dex-file\u003d/data/run-test/test-2229895/001-HelloWorld.jar --oat-file\u003d/data/run-test/test\u003e\n07-29 20:46:30.986 42895 42895 E cutils-trace: Error opening trace file: No such file or directory (2)\n07-29 20:46:30.991 42895 42895 I dex2oat64: parsed_options.cc:694 setting boot class path to /apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/apex/com.android.art/\u003e\n07-29 20:46:30.995 42895 42895 I dex2oat64: heap.cc:440 Using CollectorTypeCMC GC.\n07-29 20:46:31.058 42895 42909 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n07-29 20:46:31.058 42895 42908 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n07-29 20:46:31.058 42895 42910 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n07-29 20:46:31.064 42895 42895 W dex2oat64: mark_compact.cc:385 Userfaultfd isn\u0027t supported (reason: Function not implemented) and therefore falling back to stop-the-world compaction.\n07-29 20:46:31.064 42895 42895 I dex2oat64: heap.cc:2946 Explicit concurrent mark compact GC freed 124KB AllocSpace bytes, 0(0B) LOS objects, 99% free, 4096B/24MB, paused 50us,151us total 1.533ms\n07-29 20:46:31.088 42895 42895 I dex2oat64: dex2oat.cc:2870 dex2oat took 109.504ms (94.311ms cpu) (threads: 4) arena alloc\u003d166KB (170632B) java alloc\u003d4096B (4096B) native alloc\u003d465KB (476752B) free\u003d980KB\u003e\n07-29 20:46:31.088 42895 42912 W dex2oat64: thread_pool.cc:96 Failed to setpriority to :-8: Permission denied\n$$ set -o pipefail; ((timeout -k 120s 600s  /apex/com.android.art/bin/dalvikvm64 -XX:ThreadSuspendTimeout\u003d500000 -Djava.library.path\u003d/data/nativetest64/art/riscv64 -XX:SlowDebug\u003dtrue -Xcompiler-option --\u003e\n07-29 20:46:31.141 42918 42918 I dalvikvm64: parsed_options.cc:694 setting boot class path to /apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/apex/com.android.art\u003e\n07-29 20:46:31.142 42918 42918 I dalvikvm64: heap.cc:440 Using CollectorTypeCMC GC.\n07-29 20:46:31.180 42918 42918 W dalvikvm64: fault_handler.cc:136 FaultHandler: MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED failed: 38 Function not implemented\n\u0027warmup (double copySign):\u0027 total \u003d 1972 ms  iter \u003d 65.73 mcs  op \u003d 8.02 ns\n\u0027bench (double copySign):\u0027 total \u003d 3285 ms  iter \u003d 65.70 mcs  op \u003d 8.02 ns\n\u0027warmup (float copySign):\u0027 total \u003d 1642 ms  iter \u003d 54.74 mcs  op \u003d 6.68 ns\n\u0027bench (float copySign):\u0027 total \u003d 2737 ms  iter \u003d 54.75 mcs  op \u003d 6.68 ns\n\u0027warmup (double signum):\u0027 total \u003d 3118 ms  iter \u003d 103.96 mcs  op \u003d 12.69 ns\n\u0027bench (double signum):\u0027 total \u003d 5198 ms  iter \u003d 103.97 mcs  op \u003d 12.69 ns\n\u0027warmup (float signum):\u0027 total \u003d 2790 ms  iter \u003d 93.02 mcs  op \u003d 11.36 ns\n\u0027bench (float signum):\u0027 total \u003d 4650 ms  iter \u003d 93.01 mcs  op \u003d 11.35 ns\n```",
      "parentUuid": "6b78889b_3c73e8cf",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 13,
        "endChar": 23
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeec2a5f_dee5b189",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-31T08:06:03Z",
      "side": 1,
      "message": "Thanks for the information. Have you seen this being useful for any apps? or a particular workflow?\n\nI am asking because we try to avoid making intrinsics unless there\u0027s a reason to do it. When we create intrinsics, we take power away from the compiler by hand-creating code, not allowing the compiler to inline these methods, etc. The more intrinsics we have, the less efficient the compiler is.\n\nThere\u0027s also the fact that currently we have a limited possible amount of intrinsics. We have space for 12 more and this CL would use 4 out of that 12.",
      "parentUuid": "2e6942aa_18d37ad9",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 13,
        "endChar": 23
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b50fa281_ee5395e1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 3544930
      },
      "writtenOn": "2024-08-02T08:55:49Z",
      "side": 1,
      "message": "The most frequent usecases are signals processing and math statistics but I also found possible usage for games on stackoverflow and request to add intrinsics for MSVS (unfortunately end usecase is not clear). These methods were added to java.lang.Math by JDK-4406429, JDK-4633024 (1) as recommended by IEEE 754 (2). That shows interest to these methods and gaining enough votes.\nCould you please explain how max amount of intrinsics is calculated? I\u0027d like to think whether it is possible to take somehow 2 instead of 4 by combining implementations. Is there a way to enable/disable intrinsics to tune for special usecase? For example, in java intrinsics can be controled via command line options.\n\n(1) https://bugs.openjdk.org/browse/JDK-4406429\n    https://bugs.openjdk.org/browse/JDK-4633024\n(2) https://math.nist.gov/javanumerics/reports/jgfnwg-01.html",
      "parentUuid": "aeec2a5f_dee5b189",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 13,
        "endChar": 23
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dc1ceb6_3253a0cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-08-05T16:05:11Z",
      "side": 1,
      "message": "We\u0027ll need to deal with the growing number of intrinsics sooner or later, so I do not consider that important for this change.",
      "parentUuid": "aeec2a5f_dee5b189",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 13,
        "endChar": 23
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58754d8c_92a012f6",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 5530,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-08-05T16:05:11Z",
      "side": 1,
      "message": "Use of macros is discouraged. Please rewrite the code similarly to the `MathRound{Float,Double}` intrinsics.",
      "range": {
        "startLine": 5530,
        "startChar": 1,
        "endLine": 5530,
        "endChar": 7
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "105d56a5_0f41c6f9",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 5530,
      "author": {
        "id": 3544930
      },
      "writtenOn": "2024-08-06T16:46:22Z",
      "side": 1,
      "message": "Thanks! Rewrote similarly to MathRound{Float,Double}.\nReran the test and the above benchmark.\nBenchmarking results are almost the same:\n\u0027bench (double copySign):\u0027 total \u003d 3282 ms  iter \u003d 65.66 mcs  op \u003d 8.01 ns\n\u0027bench (float copySign):\u0027  total \u003d 2736 ms  iter \u003d 54.74 mcs  op \u003d 6.68 ns\n\u0027bench (double signum):\u0027   total \u003d 5196 ms  iter \u003d 103.93 mcs  op \u003d 12.69 ns\n\u0027bench (float signum):\u0027    total \u003d 4649 ms  iter \u003d 92.99 mcs  op \u003d 11.35 ns",
      "parentUuid": "58754d8c_92a012f6",
      "range": {
        "startLine": 5530,
        "startChar": 1,
        "endLine": 5530,
        "endChar": 7
      },
      "revId": "14f2929e63f4cde9a288664dd834008ca789e52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}