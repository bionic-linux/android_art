{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "39677249_db180e76",
        "filename": "compiler/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-11T13:42:34Z",
      "side": 1,
      "message": "I think we should move this to the main `srcs` section (before line 171), instead of specifying this for arm and riscv64 and having arm64 rely on the implicit inclusion of arm. (Let the linker eliminate the dead code for x86/x86-64 targets, such as ART on Chrome OS.)\n\nNote that x86/x86-64 has ANDN (but not ORN/XORN) under the feature flag BMI1, so some of that code could theoretically be reused also on x86/x86-64 in the future.",
      "range": {
        "startLine": 241,
        "startChar": 16,
        "endLine": 241,
        "endChar": 61
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d45d313_5b34da55",
        "filename": "compiler/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-06-11T19:04:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39677249_db180e76",
      "range": {
        "startLine": 241,
        "startChar": 16,
        "endLine": 241,
        "endChar": 61
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "275ba131_c79f6c8a",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 9306,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-11T13:42:34Z",
      "side": 1,
      "message": "Use `[[maybe_unused]]` on the argument instead. (Same below and for x86-64.)",
      "range": {
        "startLine": 9306,
        "startChar": 2,
        "endLine": 9306,
        "endChar": 22
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45fb3040_94de1899",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 9306,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-06-11T19:04:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "275ba131_c79f6c8a",
      "range": {
        "startLine": 9306,
        "startChar": 2,
        "endLine": 9306,
        "endChar": 22
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faf9ced5_d1f0cbed",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 1
      },
      "lineNbr": 645,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-11T13:42:34Z",
      "side": 1,
      "message": "Remove the guard? (`HBitwiseNegatedRight` is defined unconditionally now.)",
      "range": {
        "startLine": 644,
        "startChar": 0,
        "endLine": 645,
        "endChar": 39
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07977ceb_41801f4c",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 1
      },
      "lineNbr": 645,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-06-11T19:04:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "faf9ced5_d1f0cbed",
      "range": {
        "startLine": 644,
        "startChar": 0,
        "endLine": 645,
        "endChar": 39
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b2f28fa_02e36bfa",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 1656,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-11T13:42:34Z",
      "side": 1,
      "message": "We\u0027re not using `DataProcWithShifterOp`, `MultiplyAccumulate` and `IntermediateAddressIndex` on riscv64.",
      "range": {
        "startLine": 1656,
        "startChar": 4,
        "endLine": 1656,
        "endChar": 40
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "849da6bd_937a0a82",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 1656,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-06-11T19:04:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b2f28fa_02e36bfa",
      "range": {
        "startLine": 1656,
        "startChar": 4,
        "endLine": 1656,
        "endChar": 40
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "876f6dea_10a6a2dc",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 8489,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-11T13:42:34Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 8489,
        "startChar": 4,
        "endLine": 8489,
        "endChar": 39
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06e9134f_44c46cc8",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 8489,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-06-11T19:04:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "876f6dea_10a6a2dc",
      "range": {
        "startLine": 8489,
        "startChar": 4,
        "endLine": 8489,
        "endChar": 39
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01e0622f_e9f49525",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-11T13:42:34Z",
      "side": 1,
      "message": "This relies on register allocator giving us the `a0-a7` registers. I\u0027m fine with that for these small functions but for more general checks we should probably use the pattern `{{[ast]\\d+}}` or `{{[^, ]+}}`.",
      "range": {
        "startLine": 95,
        "startChar": 45,
        "endLine": 95,
        "endChar": 73
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffef8cc6_2f5f3781",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-06-11T18:52:58Z",
      "side": 1,
      "message": "Thank you for your advice. I just made it like it is for ARM at this file.",
      "parentUuid": "01e0622f_e9f49525",
      "range": {
        "startLine": 95,
        "startChar": 45,
        "endLine": 95,
        "endChar": 73
      },
      "revId": "f86f3c6b2d5768818ff2299c962cdf96e323dc43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}