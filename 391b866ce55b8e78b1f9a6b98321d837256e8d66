{
  "comments": [
    {
      "key": {
        "uuid": "0a2f9f8d_7fa1b764",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 3
      },
      "lineNbr": 893,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-12-18T19:49:12Z",
      "side": 1,
      "message": "I suspect we\u0027re inconsistent about what we generate after a volatile store.  I\u0027m not positive that BarrierReads suffices, but it may well.",
      "range": {
        "startLine": 893,
        "startChar": 33,
        "endLine": 893,
        "endChar": 45
      },
      "revId": "391b866ce55b8e78b1f9a6b98321d837256e8d66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a2517a8_b6362eb9",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 3
      },
      "lineNbr": 1032,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-12-18T19:08:34Z",
      "side": 1,
      "message": "Unrelated to this CL, but if this generates a dmb ishst, then I think this is wrong.  It allows a preceding load to be delayed past the stxr.  If the CAS is used to release a lock, then this allows a critical section load to escape from the critical section.\n\nSame problem in the 32 bit version.",
      "range": {
        "startLine": 1032,
        "startChar": 27,
        "endLine": 1032,
        "endChar": 40
      },
      "revId": "391b866ce55b8e78b1f9a6b98321d837256e8d66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea5fab25_d0fbf42a",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 3
      },
      "lineNbr": 1032,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-12-18T19:49:12Z",
      "side": 1,
      "message": "Hiroshi and I discussed this further.  This indeed seems wrong, and should be fixed asap.  This must say BarrierAll.\n\nThe relevant section of the architecture manual is C2.1.8.  A dmb ishst is generated here and that only orders a store followed by a store.  It is not symmetric with dmb ishld, which does order a load followed by either a load or a store.\n\nI currently believe that the trailing fence could be weakened to BarrierReads, which would hopefully make this change performance neutral.",
      "parentUuid": "4a2517a8_b6362eb9",
      "range": {
        "startLine": 1032,
        "startChar": 27,
        "endLine": 1032,
        "endChar": 40
      },
      "revId": "391b866ce55b8e78b1f9a6b98321d837256e8d66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}