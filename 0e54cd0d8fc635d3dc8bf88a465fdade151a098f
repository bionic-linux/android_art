{
  "comments": [
    {
      "key": {
        "uuid": "1c23318f_a4e2d7f2",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-03-26T18:26:27Z",
      "side": 1,
      "message": "Related question: Does this class ever remove references from the reference cache? If not, I wonder if the cache gets very large over time as different references are written to the image space, in particular with a moving collector?",
      "range": {
        "startLine": 29,
        "startChar": 6,
        "endLine": 29,
        "endChar": 37
      },
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c23318f_4478434e",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-03-26T18:35:18Z",
      "side": 1,
      "message": "The references associated with a card are recomputed each time the card is dirtied.",
      "parentUuid": "1c23318f_a4e2d7f2",
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "392487a3_dce8c520",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-03-26T18:56:34Z",
      "side": 1,
      "message": "Are you sure? :) Does ModUnionTableReferenceCache::references_ get elements *removed* from it ever (I see only references_-\u003epush_back() or -\u003ePut())? And, it looks like we don\u0027t recreate the mod union table object or the references_ map at each gc. No?",
      "parentUuid": "1c23318f_4478434e",
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "590f7b24_dd49db4f",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-03-26T19:07:11Z",
      "side": 1,
      "message": "Well, it is possible that some references could be held live if the card isn\u0027t dirtied. This can happen if you write only nulls into the card. But if it is dirtied, we recompute cards_references and do references_.Put(card, cards_references).",
      "parentUuid": "392487a3_dce8c520",
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc435932_0bb01dd5",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-03-25T20:17:08Z",
      "side": 1,
      "message": "Is ShouldAddReference a better name?\n\nIs this equivalent to \"return !space_-\u003eHasAddress(ref)\" without needing to loop over the spaces?",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 19
      },
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "590f7b24_3abc5d4b",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-03-26T18:35:18Z",
      "side": 1,
      "message": "Nice catch, it is equivalent to !GetHeap()-\u003eGetImageSpace()-\u003eHasAddress(). This won\u0027t work with multiple image spaces however.",
      "parentUuid": "dc435932_0bb01dd5",
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c23318f_44cbe3e8",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-03-26T18:56:34Z",
      "side": 1,
      "message": "As the mod union table object has a reference to its space (ModUnionTable::space_), it\u0027s self-contained, that is, we don\u0027t need to refer back to Heap or assume there\u0027s only one image space.",
      "parentUuid": "590f7b24_3abc5d4b",
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "392487a3_1c64fdf4",
        "filename": "runtime/gc/accounting/mod_union_table-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-03-26T19:07:11Z",
      "side": 1,
      "message": "Nevermind, you are right.",
      "parentUuid": "1c23318f_44cbe3e8",
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c3721c3_69de052e",
        "filename": "runtime/gc/collector/immune_region.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-03-25T20:17:08Z",
      "side": 1,
      "message": "This is fine. Future note: if end_ is dropped (and just size_ is used), then there\u0027s no need for UpdateSize()?",
      "range": {
        "startLine": 70,
        "startChar": 18,
        "endLine": 70,
        "endChar": 22
      },
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "392487a3_39bc6b4b",
        "filename": "runtime/gc/collector/immune_region.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-03-26T18:35:18Z",
      "side": 1,
      "message": "I considered doing that, but decided against it since it would have complicated the AddContinuousSpace code.",
      "parentUuid": "9c3721c3_69de052e",
      "revId": "0e54cd0d8fc635d3dc8bf88a465fdade151a098f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}