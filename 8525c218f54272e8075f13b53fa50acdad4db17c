{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0d90336c_a309850e",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-03-16T19:28:22Z",
      "side": 1,
      "message": "Hmm, can you tell theses from within dex2oat? Or are you planning to write a wrapper?\n\nFor install-time we ended up reporting this from the framework space which is the main dex2oat caller, so it can tell apart these issues.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0166d67c_972f479b",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-03-16T19:31:56Z",
      "side": 1,
      "message": "Nvm, I just saw the other CL and realized you have ODRefresh.\n\nNote that we have DEX2OATResult code: https://android-review.googlesource.com/c/platform/frameworks/proto_logging/+/1612689/2/stats/atoms.proto#12039 that could be reused. Might offer more flexibility than defining error codes as independent metrics.",
      "parentUuid": "0d90336c_a309850e",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b35f82cf_6d89afa4",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-03-17T13:27:29Z",
      "side": 1,
      "message": "We\u0027ve not considered reporting dex2oat metrics directly for odrefresh. It would be easy enough to emit those to a file via a command-line to dex2oat if we wanted to go there. \n\nI don\u0027t think there\u0027s much overlap with these values and dex2oat atoms (dex2oat provides slightly more info for UnexpectedError here, but the exit codes are not very granular anyway).",
      "parentUuid": "0166d67c_972f479b",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbb768ee_33c22b6b",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-03-18T00:02:48Z",
      "side": 1,
      "message": "re: `We\u0027ve not considered reporting dex2oat metrics directly for odrefresh.`\nHmm, not sure I understand :) the odrefresh does report the metrics right now, doesn\u0027t it?",
      "parentUuid": "b35f82cf_6d89afa4",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6fd7cec_5e7e4199",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-03-19T15:47:28Z",
      "side": 1,
      "message": "Okay, let\u0027s return dex2oat status ðŸ˜Š)\n\nI\u0027m working on an updated PS with:\n\n  COUNTER(OnDeviceRefreshStatus)                    \\\n  COUNTER(OnDeviceRefreshTotalCompileTime)          \\\n  COUNTER(OnDeviceRefreshDex2OatResult)             \\\n  COUNTER(OnDeviceRefreshCacheUsedMiB)              \\\n  COUNTER(OnDeviceRefreshCacheFreeMiB)              \\\n  COUNTER(OnDeviceRefreshCacheFileCount)            \\\n\nThe complex one here is the status: it needs to describe both the stage and any error condition that odrefresh identifies. It seems like that could go in the proto or not (ie dex2oat return values aren\u0027t in the proto).\n\nWe don\u0027t currently know this value when we initialize the session data but this can be changed. If not in proto, we\u0027d still need stable values in odrefresh and some way of mapping those in whatever the metrics UI looks like. Seems like proto might be better for this reason.\n\nIn proto there are 2 things we\u0027d want to define (that are currently in the single OnDeviceRefreshStatus count).\n\nStages:\n\n  Preparation\n  BcpPrimaryArchCompilation\n  BcpSecondaryArchCompilation\n  SystemServerCompilation\n  Done\n\nErrors:\n\n  NoError;\n  ErrorInsufficientSpace;\n  ErrorCompileFailed;\n  ErrorCompileTimedOut;\n  ErrorInstallFailed;\n  ErrorStagingDirectoryError;\n\nI\u0027d quite like compilation cause, but that\u0027s currently tricky because we invoke odrefresh twice (once to check artifacts and once to compile and checking does clean-up).\n\n  ApexUpdate\n  FileChecksumsChanged (possible after an OTA)\n  MissingOutputs (possible if ran out of space earlier).\n  ...\n\nThe counters here change quite a bit too, but space is a pretty critical issue for us and dex2oat doesn\u0027t signal out of space cleanly. If we have metrics here we can tune the inevitable heuristics that odrefresh users to determine space limitations.\n\nAppreciate this is a pretty big change of direction. Does it seem reasonable? Preference for proto or counters?\n\nThanks",
      "parentUuid": "cbb768ee_33c22b6b",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c88e634_22e00737",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-03-19T21:53:21Z",
      "side": 1,
      "message": "Overall it seems reasonable to me.\n\nI am encouraging a lot we define the status/error codes in protos. It does require us to stabilize them, and on the surface offer less flexibility, but to make the data analysis sane we need to know which one is which, and going back to code to understand what a value is could cause a lot of headaches. It\u0027s already the case where the compiler-reason/filter are not proto defined but free-range (albeit stable) numerals and it does make it painful to keep that mapping elsewhere.\n\n\nHow would we use the stage information? I feel that can be easily encoded just as status. Completed / FailedCompiler / FailedSpace etc.. and in the compiler case we can again a separate dex2oat status to provide more refinement. \n\nI agree that the out of space is tricky, especially since dex2oat doesn\u0027t do a good job in telling why it failed. My suggestion is that the dex2oat status can itself report out_of_space if needed, even if it seems like a duplication.",
      "parentUuid": "e6fd7cec_5e7e4199",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a7111b7_e51f91ca",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2021-03-19T23:34:49Z",
      "side": 1,
      "message": "This definitely looks like worthwhile information to collect.\n\nIt looks like if we add these as extra fields in the ArtDatumReported atom, we\u0027d need two or three new fields, and these fields won\u0027t really be meaningful in our runtime metrics. I think this is drifting enough from the runtime metrics use case that setting up a new atom (i.e. proto) for the ODRefresh metrics probably makes sense.\n\nOrion - maybe we should chat again to discuss in more detail what this might look like?",
      "parentUuid": "4c88e634_22e00737",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2bfc5a9_8651eb1c",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-03-16T19:28:22Z",
      "side": 1,
      "message": "What are the goals for this one? Do you plan to capture individual dex re-compilation histogram or something else?",
      "range": {
        "startLine": 69,
        "startChar": 12,
        "endLine": 69,
        "endChar": 37
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f04930d_bdd7884d",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-03-17T13:27:29Z",
      "side": 1,
      "message": "We should probably change this, just having the total compilation time is probably sufficient.\n\nThe nuance is that we might fail to completely compile system_server (e.g. due to lack of space) or only compile part of system_server so there may be some low value numbers from those cases, but primarily we care about the total compilation time. There are concerns with how long compilation takes overall since it affects users and other features.",
      "parentUuid": "a2bfc5a9_8651eb1c",
      "range": {
        "startLine": 69,
        "startChar": 12,
        "endLine": 69,
        "endChar": 37
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1efd670d_25721879",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2021-03-17T17:47:47Z",
      "side": 1,
      "message": "How many entries get added to this histogram typically?\n\nIn the case where we fail to completely compile system server, I could image the total count for each bucket is interesting, like if we expected 5 things but only got 4.\n\nAnother aspect to consider is that histograms are not plumbed all the way through statsd yet, so this is mostly useful for on device investigation and lab analysis but not so much for field metrics.",
      "parentUuid": "0f04930d_bdd7884d",
      "range": {
        "startLine": 69,
        "startChar": 12,
        "endLine": 69,
        "endChar": 37
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4344f263_35b3ad18",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-03-18T15:25:52Z",
      "side": 1,
      "message": "As we were talking yesterday, we should replace this with total compilation time as this is key: there is hard time deadline that we have to stick to.",
      "parentUuid": "1efd670d_25721879",
      "range": {
        "startLine": 69,
        "startChar": 12,
        "endLine": 69,
        "endChar": 37
      },
      "revId": "8525c218f54272e8075f13b53fa50acdad4db17c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}