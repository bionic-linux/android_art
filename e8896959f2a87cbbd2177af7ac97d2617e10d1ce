{
  "comments": [
    {
      "key": {
        "uuid": "1709fc9d_5dfc8e89",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-12-06T22:33:32Z",
      "side": 1,
      "message": "c_str strikes again\n\nit could take any type that can be output to ostream\n\n  if(ATRACE_ENABLED()) {\n    std::stringstream ss;\n    ss \u003c\u003c fn();\n    ATRACE_BEGIN(ss.str().c_str());\n  }",
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28b94c1b_c8bf2406",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-12-06T22:43:02Z",
      "side": 1,
      "message": "I\u0027m not sure that\u0027s OK unless it\u0027s rare - is Clang smart enough (and does C++ allow) optimizing the stringstream away when it\u0027s trivial?  (I\u0027m chatting with Tim about a dalvik-slow tag to separate fast and slow.)\n\nTo me it seems easiest to just assume you get a const std::string\u0026 from the Fn, and callers should format correctly...\n\nI wish there was a way to make this work like LOG, but the scope is sadly different.",
      "parentUuid": "1709fc9d_5dfc8e89",
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bff4d85d_3eded5a6",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-12-06T23:11:11Z",
      "side": 1,
      "message": "If you\u0027re really paranoid you can overload the string conversion based on the type\n\n  if (ATRACE_ENABLED()) {\n    ATRACE_BEGIN(convert_to_string(fn());\n  }\n\n  template \u003ctypename T\u003e\n  const char* convert_to_string(T\u0026\u0026 expr) {\n     // default stringstream operation\n     std::stringstream ss;\n     ss \u003c\u003c expr;\n     return ss.str().c_str();\n  }\n\n  const char* convert_to_string(const std::string\u0026 string) {\n    return string.c_str();\n  }\n\n  const char* convert_to_string(const char* c_string) {\n    return c_string;\n  }\n\nI\u0027m not sure it really matters, atrace goes to a syscall when it\u0027s enabled, so what\u0027s a little bit of string formatting?",
      "parentUuid": "28b94c1b_c8bf2406",
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24ac0d6b_caf0ebb3",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-12-07T00:19:20Z",
      "side": 1,
      "message": "Worth it, though? c_str seems good enough, given the macro...\n\n(Out of curiosity: Is the const std::string\u0026 version guaranteed to keep the string live?)",
      "parentUuid": "bff4d85d_3eded5a6",
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f6e96a8_a35345aa",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-12-06T22:33:32Z",
      "side": 1,
      "message": "This is more like an expr.\n\nAlso if we\u0027re just going to use it like an fprintf like in your example, it should probably be like SCOPED_TRACE_FMT(fmtstr, ...) PrintStringf(fmtstr, ...)",
      "range": {
        "startLine": 47,
        "startChar": 21,
        "endLine": 47,
        "endChar": 23
      },
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0baf0f1_622fccca",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-12-06T22:43:02Z",
      "side": 1,
      "message": "Yeah, expr is better.\n\nfmtstr sounds over-complicated to me, but sure.",
      "parentUuid": "9f6e96a8_a35345aa",
      "range": {
        "startLine": 47,
        "startChar": 21,
        "endLine": 47,
        "endChar": 23
      },
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5959074d_885d7534",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-12-06T23:11:11Z",
      "side": 1,
      "message": "The fmtstr was mostly in response to the example\n\n  SCOPED_TRACE(std::string(\"foo\") + bar\n\nis ugly to have to force the std::string usage as the first thing it does.",
      "parentUuid": "a0baf0f1_622fccca",
      "range": {
        "startLine": 47,
        "startChar": 21,
        "endLine": 47,
        "endChar": 23
      },
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff4673ee_edc4a63a",
        "filename": "runtime/base/systrace.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-12-07T00:19:20Z",
      "side": 1,
      "message": "I\u0027m fine with the fmtstr version, that\u0027s why it\u0027s in the latest PS...",
      "parentUuid": "5959074d_885d7534",
      "range": {
        "startLine": 47,
        "startChar": 21,
        "endLine": 47,
        "endChar": 23
      },
      "revId": "e8896959f2a87cbbd2177af7ac97d2617e10d1ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}