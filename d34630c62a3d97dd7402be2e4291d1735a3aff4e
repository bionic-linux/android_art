{
  "comments": [
    {
      "key": {
        "uuid": "dcf58392_6d666cd9",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: lets be consistent about calling this prev_state vs bottomIndex everywhere",
      "range": {
        "startLine": 100,
        "startChar": 51,
        "endLine": 100,
        "endChar": 61
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_4d9c50f9",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "I think you\u0027d want a comment here, with especial emphasis on  why the second || check is necessary.\n\nIIRC it was something about top index staying the same after doing a PopLocalReferences",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_68f81a11",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: I personally find !(hole_at_or-above \u003c segment_state_) a bit less confusing to reason about.\n\nMaybe it will make more sense as-is with more comments. The way I thought about it is that \"the hole is only valid whilst its under the top index\"",
      "range": {
        "startLine": 101,
        "startChar": 50,
        "endLine": 101,
        "endChar": 85
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_6d84aca3",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: top_index",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 19
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_2d9904c8",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: new_num_holes is more elucidating",
      "range": {
        "startLine": 104,
        "startChar": 11,
        "endLine": 104,
        "endChar": 16
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_2da10431",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: Comment here, e.g. \"Count null references in current frame \u003d number of holes\"",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_8d4d98b3",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: confused me, can you just use count here?",
      "range": {
        "startLine": 123,
        "startChar": 8,
        "endLine": 123,
        "endChar": 26
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_ad8cd4c2",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "Is this ever a problem if prev_state \u003d\u003d 0?",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_48f8bea7",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "Not for prev_state. But for the current state. We will always try to recover holes when the table is empty. Considering that the thread code is adding the thread as a local ref, I think this is not important in practice (also, the loop is empty in that case).",
      "parentUuid": "dcf58392_ad8cd4c2",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_2dfd8400",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "I\u0027m not really sure I understand the hole_at_or_above logic?\n\nUnlike in Remove where it actually sets it to a real index that is a hole, if hole_at_or_above_ \u003d\u003d prev_state then it\u0027s not set to a real hole. I\u0027m not sure I understand the need for that extra possible semantic value?\n\nIn other words why does it need to be so complicated instead of just saying\n\n   size_t new_hole_at_or_above \u003d 0;\n   for each hole@index between prev_state and top_index do:\n      new_hole_at_or_above \u003d index\n\n   current_num_holes_ \u003d new_hole_at_or_above\n\n?",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_28bf32b5",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "You don\u0027t need to set it to an actual hole. If you did, then you\u0027d have to keep it correct, which means another scan in Add() when filling the hole.\n\nInstead, it \"just\" denotes the segment that any current_num_holes_ hole is in, which must be invalidated when that segment is popped.",
      "parentUuid": "dcf58392_2dfd8400",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_cd87a05d",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: expected_num_holes",
      "range": {
        "startLine": 135,
        "startChar": 41,
        "endLine": 135,
        "endChar": 54
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_0d82484c",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: top_index",
      "range": {
        "startLine": 137,
        "startChar": 43,
        "endLine": 137,
        "endChar": 51
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_0d3a488b",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: This is the same exact code as in RecoverHoleCount, I think if it was extracted into a separate function (e.g. CountCurrentNumberOfHoles()) it would be more readable",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 144,
        "endChar": 5
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_08935642",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "I wanted it separate for test clarity, but sure, can do.",
      "parentUuid": "dcf58392_0d3a488b",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 144,
        "endChar": 5
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_2382b54c",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:43:35Z",
      "side": 1,
      "message": "I also see no calls anywhere to make this smaller, I think this also needs to shrink occasionally to free up space. Either in GC or when you call remove and the capacity/used ratio is too much.",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_edcedc3f",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "Why isn\u0027t it just using new(nothrow) ? Is it for the name? If it\u0027s for the name, I want to know if it\u0027s a global/weak/local table specifically and not that it\u0027s merely an IRT.\n\nThis will waste most of the page if it never grows past 512, I assume that\u0027s OK?",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_a3c7c52f",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "Note that IrtEntry is storing right now 16B. So you\u0027re not wasting padding.\n\nAnd yes, it\u0027s for the ashmem naming, so it can be attributed. Specific naming makes sense, but shouldn\u0027t be in this CL.",
      "parentUuid": "dcf58392_edcedc3f",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_ed71bc8d",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: top_index",
      "range": {
        "startLine": 179,
        "startChar": 9,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_cdba0075",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "This (and other places resizing fails) should probably be calling FatalError, although I can\u0027t say this with 100% confidence\n\nAccording to JNI spec:\n\n\u003e The VM calls FatalError if no more local references can be created beyond the ensured capacity.\n\nAlso did you update EnsureLocalCapacity for this new dynamic capacity? The old code would fail if asking for \u003e512 capacity.",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_a3dea5f5",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "No, EnsureLocalCapacity isn\u0027t fixed, yet. That\u0027s a dependent change.",
      "parentUuid": "dcf58392_cdba0075",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_edd89cd7",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: use a variable instead of just 2",
      "range": {
        "startLine": 195,
        "startChar": 16,
        "endLine": 195,
        "endChar": 32
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_6d45cc5e",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "These names are very confusing, but I see they are the original names.\n\nCan you at least add a comment for them explaining that it\u0027s an upper/lower bound and also if its inclusive/exclusive?",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_03cfb93d",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "I\u0027ll clean things up.",
      "parentUuid": "dcf58392_6d45cc5e",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_08a1967a",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 303,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: It\u0027s actually scanning down from the top, this comment is outdated?",
      "range": {
        "startLine": 303,
        "startChar": 29,
        "endLine": 303,
        "endChar": 31
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_2800d262",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 316,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "Does anyone know why these reads are without read barriers?",
      "range": {
        "startLine": 316,
        "startChar": 65,
        "endLine": 316,
        "endChar": 84
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_cab4a6da",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "This giant block of comments probably needs to be updated",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_e31eedd4",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "Yes. Please note the RFC state, for the final CL I\u0027ll update the blob.",
      "parentUuid": "dcf58392_cab4a6da",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_6ad01209",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "I\u0027d prefer if this was a struct with a name for what the value represents as the field",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_43f70170",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "Ugh, that will require broader changes, or a memset in the functions here. I\u0027ll see what I can do.",
      "parentUuid": "dcf58392_6ad01209",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_43c0a188",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:43:35Z",
      "side": 1,
      "message": "I think if it was\n\n    struct IRTSegmentState {\n          uint32_t topIndex;\n    };\n\nthen most of the code would be the same as before",
      "parentUuid": "dcf58392_43f70170",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_cd8200e6",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "This could be a subclass that allows resizing or templates (or both).\n\nSubclasses probably make more sense if we had lock annotations, otherwise it doesn\u0027t matter.",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_a3634557",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "I wanted to keep things structured similarly right now, so that Add and Remove functionality is in one place. If you prefer, I\u0027ll break it up now.",
      "parentUuid": "dcf58392_cd8200e6",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_8852a64f",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-10-18T18:20:34Z",
      "side": 1,
      "message": "There is only 18 bits for tableIndex, is that OK?",
      "range": {
        "startLine": 362,
        "startChar": 44,
        "endLine": 362,
        "endChar": 54
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_e806cac9",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:24:10Z",
      "side": 1,
      "message": "I am thinking this won\u0027t work. Also see 360, \u003c65k is not enough.",
      "parentUuid": "dcf58392_8852a64f",
      "range": {
        "startLine": 362,
        "startChar": 44,
        "endLine": 362,
        "endChar": 54
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_08bcf6bc",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:26:39Z",
      "side": 1,
      "message": "kind_ is 2 bits, serialChunk is 2 bits on non-debug, 3 bits on debug\n\nwe should be using 28 bits here and not 18.\n\nEasy fix.",
      "range": {
        "startLine": 362,
        "startChar": 63,
        "endLine": 362,
        "endChar": 68
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_c330114d",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "Yes, that\u0027s my intent. I don\u0027t know why serialChunk was ever this large.",
      "parentUuid": "dcf58392_08bcf6bc",
      "range": {
        "startLine": 362,
        "startChar": 63,
        "endLine": 362,
        "endChar": 68
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_6d95cc18",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "I assume this returns false and set the error message, but maybe update the comment?",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_ada69493",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 369,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "comments?",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_4d11f076",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 396,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "I think all of these need comments for what the value represents.\n\nFor example it\u0027s pretty non obvious current_num_holes_ is only the holes between the current and previous frame.\n\nI\u0027m still not sure what the hole_at_or_above_ means since its only possible values appear to be either 0 or prev_state",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_c3de51c4",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 396,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "I want this to be opaque here, it\u0027s an implementation detail. There will be a comment blurb in the cc file.",
      "parentUuid": "dcf58392_4d11f076",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_03d69951",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 396,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:43:35Z",
      "side": 1,
      "message": "I don\u0027t think that matters, anything in private is an implementation detail, that\u0027s just how C++ is. Why not document it here anyway?",
      "parentUuid": "dcf58392_c3de51c4",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_cdb040c6",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "I am not a fan of this, I would prefer if we had lock annotations or at least lock asserts everywhere it made sense.",
      "range": {
        "startLine": 398,
        "startChar": 0,
        "endLine": 399,
        "endChar": 29
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_a396a5d4",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-18T18:34:50Z",
      "side": 1,
      "message": "That isn\u0027t as simple as you think. What is the lock? What you technically want is to store the Thread* here, and compare the Thread that\u0027s making modifications.",
      "parentUuid": "dcf58392_cdb040c6",
      "range": {
        "startLine": 398,
        "startChar": 0,
        "endLine": 399,
        "endChar": 29
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_c3b2d132",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:43:35Z",
      "side": 1,
      "message": "For global/weak its just the actual mutex lock.\n\nFor local IRTs then yes we\u0027d want to compare the thread, but I\u0027m less worried about that.",
      "parentUuid": "dcf58392_a396a5d4",
      "range": {
        "startLine": 398,
        "startChar": 0,
        "endLine": 399,
        "endChar": 29
      },
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_a8404250",
        "filename": "runtime/jni_env_ext.cc",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:14:48Z",
      "side": 1,
      "message": "nit: comments for the magic true/false please",
      "revId": "d34630c62a3d97dd7402be2e4291d1735a3aff4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}