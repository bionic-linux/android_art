{
  "comments": [
    {
      "key": {
        "uuid": "da6aeb2c_32fb0ec8",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 233,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-12-14T01:23:04Z",
      "side": 1,
      "message": "It\u0027s surprising to me that this suffices. Presumably the caller needs to be able to dereference the pointer contained in the pair? How is it guaranteed that it sees correct values for the pointer target? Does the pointer actually point to statically allocated objects? Is there some other synchronization mechanism?",
      "range": {
        "startLine": 233,
        "startChar": 29,
        "endLine": 233,
        "endChar": 49
      },
      "revId": "7f90d00ba33bdfdf667cd70e819194f9dc95d88f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aa6fbc4_cfe3fd18",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 233,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-12-14T11:59:03Z",
      "side": 1,
      "message": "The status of a class is (Java) volatile, so status updates are StoreSequentiallyConsistent(). The field cache is populated only with fields of resolved classes and these fields are linked before we set the status to kStatusResolved. Is that enough?\n\n(Note: This is historical behavior, I\u0027m not changing anything here.)",
      "parentUuid": "da6aeb2c_32fb0ec8",
      "range": {
        "startLine": 233,
        "startChar": 29,
        "endLine": 233,
        "endChar": 49
      },
      "revId": "7f90d00ba33bdfdf667cd70e819194f9dc95d88f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6aeb2c_5b709eb8",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 233,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-12-14T20:03:01Z",
      "side": 1,
      "message": "Are the reading threads guaranteed to read the class status and see it as resolved before dereferencing the pointer contained here?\n\nIn general, there should be a \"happens before\" chain from the store of the data to the load by another thread. That\u0027s generally established by the storing thread performing a release/seq_cst atomic store after the data store, and the reading thread performing an acquire/seq_cst atomic load of the same atomic before the data load. (A lock release and acquire of the same lock can take the place of the atomic.)\n\nIf this relationship is established by using the class status as the atomic, then we indeed could get away with relaxed here.\n\n(This is complicated by the fact that we sometimes, somewhat optimistically, rely on data dependencies instead of the acquire load on the reader side. This is dubious in C++ code, but works about 99% of the time when the compiler does nothing surprising. We should perhaps discuss all of this in a group meeting, so that we\u0027re all on the same page. Especially since the reasoning here also involves the ART compiler in places.)",
      "parentUuid": "5aa6fbc4_cfe3fd18",
      "range": {
        "startLine": 233,
        "startChar": 29,
        "endLine": 233,
        "endChar": 49
      },
      "revId": "7f90d00ba33bdfdf667cd70e819194f9dc95d88f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "631cfdaf_460a72d9",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 233,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-01-13T18:22:08Z",
      "side": 1,
      "message": "For static field, readers are guaranteed to check the class status but for instance fields they are not.\n\nI\u0027m going to change this to \"store release\" to align with the SetResolvedType(). I\u0027ll keep the \"load relaxed\" in line with GetResolvedType(). See PS10. (PS9 shuashes the custom atomics into this CL.)",
      "parentUuid": "da6aeb2c_5b709eb8",
      "range": {
        "startLine": 233,
        "startChar": 29,
        "endLine": 233,
        "endChar": 49
      },
      "revId": "7f90d00ba33bdfdf667cd70e819194f9dc95d88f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}