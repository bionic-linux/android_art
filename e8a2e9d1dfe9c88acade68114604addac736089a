{
  "comments": [
    {
      "key": {
        "uuid": "eb586371_2048ee8d",
        "filename": "runtime/interpreter/interpreter.cc",
        "patchSetId": 3
      },
      "lineNbr": 508,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:42:11Z",
      "side": 1,
      "message": "Feels like this belongs in interpreter_common(-inl), as it\u0027s shared (it\u0027s a straight-forward copy from switch, isn\u0027t it?).",
      "range": {
        "startLine": 496,
        "startChar": 4,
        "endLine": 508,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_16eba207",
        "filename": "runtime/interpreter/interpreter.cc",
        "patchSetId": 3
      },
      "lineNbr": 508,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-01-20T07:27:26Z",
      "side": 1,
      "message": "It\u0027s similar but not exactly the same. We handle both \"pending exception\" and \"no pending exception\" paths here. In the interpreter, this is shared between the instruction handling (when there is no pending exception) and the exception handling (when there is a pending exception).",
      "parentUuid": "eb586371_2048ee8d",
      "range": {
        "startLine": 496,
        "startChar": 4,
        "endLine": 508,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb586371_803d7ae2",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:42:11Z",
      "side": 1,
      "message": "I think this is actually wrong with deopt (mea culpa). What if the catch handler starts there? It\u0027s not valid Java, but one should be able to construct a dex file for it. (I\u0027m decent with the instruction constraints, but it has been a while for structural constraints.)",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 154,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_60faec80",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-01-20T07:27:26Z",
      "side": 1,
      "message": "I don\u0027t think a catch handler can start at 0x0. A catch handler would need a previous instruction to throw the exception. This instruction could be at 0x0 but not the catch handler. Plus the instruction throwing the instruction itself cannot be part of the catch handler I believe.",
      "parentUuid": "eb586371_803d7ae2",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 154,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b66fb36_3aae5929",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-20T08:33:48Z",
      "side": 1,
      "message": "No. Just like many other bytecode formats, dex defines exception handlers by a (nested) structure containing the starting pc of the handler and the range of PCs covered. So a handler can be lexically before the guarded region. (See dex file format, start at try_item.)\n\nWhat I don\u0027t know is whether the verifier rejects such a thing on the grounds of an exception register conflict (no exception on method entry, but exception on handler entry). But exceptions are not in a regular dalvik register (that\u0027s why move-exception exists), and if the \"catch-block\" doesn\u0027t start with this, I believe the verifier would let that go through as a perfectly fine start of a method.",
      "parentUuid": "4b408f75_60faec80",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 154,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_96179269",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-01-20T08:40:54Z",
      "side": 1,
      "message": "I mean when we invoke a method, we start by its instruction at 0x0. We don\u0027t expect any exception pending at this time so it can\u0027t be the first instruction of a catch handler. The only way is to have jump (with a \"goto\" for instance) after the catch handler. Maybe that\u0027s something we should check at verification time?\n\nAnyway, I can move the check in the Execute method (the caller). It\u0027s the normal interpreter path (not the deoptimization path) starting at DEX pc 0x0 so we know there is no exception pending there.",
      "parentUuid": "2b66fb36_3aae5929",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 154,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b66fb36_5abd1556",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-20T08:47:51Z",
      "side": 1,
      "message": "I mean: catch handlers are not separated in the code by anything, they are just designated by a secondary structure. The only thing possibly distinguishing them is if they use the exception, their first instruction must be a move-exception. Just going of the file format, nothing is stopping you from running \"catch handler\" code like regular code. So imagine a catch handler that just prints \"hello\" and never touches the exception. That code is perfectly fine no matter whether there was an exception or not. So from my view, this is legal:\n\n 0: const-string v0, \"Hello World\"\n 1: invoke-static ...  // setup out, shortcut here\n 2: new-instance v1, RuntimeException\n 3: throw v1\n\nAnd assign pc 0 as the handler for the pc-range [3...3].\n\nDon\u0027t change the check just yet. I still have hope that I just don\u0027t know enough about the verifier and what we sort out. I really like where we check right now (and that it\u0027s not in the caller...).",
      "parentUuid": "4bc24f1f_96179269",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 154,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_17139cca",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-01-20T08:50:51Z",
      "side": 1,
      "message": "Right, I see your point now (thanks for the example).",
      "parentUuid": "2b66fb36_5abd1556",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 154,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bf1d3a1_ce81638f",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-20T18:18:40Z",
      "side": 1,
      "message": "I confirmed that this code passes the verifier and gets compiled (haven\u0027t tested running, obviously...):\n\n .method public static run()V\n .registers 6\n :Label1\n        const v1, 15\n        const v2, 0\n \n :Label2\n        div-int v0, v1, v2\n \n :Label3\n        return-void\n \n .catchall {:Label2 .. :Label3} :Label1\n .end method",
      "parentUuid": "cbd63fdb_17139cca",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 154,
        "endChar": 5
      },
      "revId": "e8a2e9d1dfe9c88acade68114604addac736089a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}