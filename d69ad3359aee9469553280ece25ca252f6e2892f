{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0fd3d038_861aa1a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-11T08:38:55Z",
      "side": 1,
      "message": "PTAL. Thanks!",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e57b46f5_33214214",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-14T08:52:50Z",
      "side": 1,
      "message": "David, ping on this one :) Thanks!",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ce50c16_da350cdd",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-03-14T17:22:58Z",
      "side": 1,
      "message": "So you have not updated the unsigned version, right?\n\nI wonder if we could have just one shared implementation (which supports up to 64bit, uses clang attributes to unroll the loop, or is always-inline template recursive to unroll the loop)",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4f713d_36dc21ba",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-14T17:45:19Z",
      "side": 1,
      "message": "No, I haven\u0027t updated unsigned. I can to make it uniform.\n\nDid you mean one shared implementation for unsigned and signed? I wonder if we have to add some special checks which make unsigned slower but can give it a try.",
      "parentUuid": "9ce50c16_da350cdd",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35a2b7ba_6417d194",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-03-14T17:48:43Z",
      "side": 1,
      "message": "Isn\u0027t the signed just unsinged + extension as post-processing?\n\nSimilarly the check vs non-check can be optional (eg with `std::optional\u003cchar*\u003e end`)",
      "parentUuid": "5b4f713d_36dc21ba",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a224381_8a8e47ba",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-15T17:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35a2b7ba_6417d194",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ca91bbf_d203cd44",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-03-14T16:29:13Z",
      "side": 1,
      "message": "you can make the template argument default to uint32_t",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b3bfc7b_891a6210",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-15T17:35:52Z",
      "side": 1,
      "message": "Done. I made it to int32_t for signed and uint32_t for unsigned.",
      "parentUuid": "3ca91bbf_d203cd44",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4f1160c_4364d069",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-03-14T16:29:13Z",
      "side": 1,
      "message": "I am little concerned the loop was unrolled for a reason in the original implementation.",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6efc533e_a6647072",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-14T17:45:19Z",
      "side": 1,
      "message": "This one is used only for the Checked version (DecodeSignedLeb128Checked) for 32-bit. That is used only in the Dex file verifier. Do you think that could be performance critical? \n\nThe DecodeSignedLeb128 is still unrolled. I didn\u0027t want to touch it because I was unsure. Though, I am not really sure if unrolling manually is much better for performance. I guess clang should unroll right?",
      "parentUuid": "c4f1160c_4364d069",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6e3151e_f1c6a071",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-03-14T17:48:43Z",
      "side": 1,
      "message": "I think the dex file versifier is still important to keep fast.\n\nI wouldn\u0027t assume clang would unroll it unless told so.",
      "parentUuid": "6efc533e_a6647072",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9992e30a_9b569bf6",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-15T17:35:52Z",
      "side": 1,
      "message": "I checked the output of the unrolled version and the loop version in godbolt. For Unsigned it\u0027s mostly the same, infact the loop version has one instruction less. \n\nFor the signed version, the main difference is for (a \u003c\u003c shift) \u003e\u003e shift the unrolled version uses\n\n``\nsbfx    w0, w8, #0, #7\n``\n\nWhere as the loop version uses\n``\nmov     w9, #25   \nlsl     w8, w8, w9\nasr     w0, w8, w9\n``\n\nI am not really sure why maybe some optimization pass ordering issue but I guess it isn\u0027t too much of a problem. So I merged all of them into one. If you think it is a problem, I can run some micro benchmarks or we can specialize the case for the signed 32-bit ones. Let me know.\n\nHere\u0027s the godbolt output for all 4 cases if you want to take a look:\nUnsigned: https://godbolt.org/z/cKKqTq4E8\nUnsignedChecked: https://godbolt.org/z/TeGxYh5dW\nSigned:  https://godbolt.org/z/7q1enjhT6\nSignedChecked: https://godbolt.org/z/PY5zax66a",
      "parentUuid": "f6e3151e_f1c6a071",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8851ce4_2a56c496",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-03-19T16:25:12Z",
      "side": 1,
      "message": "I noticed in the \"UnsignedChecked\" godbolt output that the old unrolled version has a range check before reading the first character but the new version does not.",
      "parentUuid": "9992e30a_9b569bf6",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "791d76ba_f3d903c0",
        "filename": "libartbase/base/leb128.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-03-19T16:42:01Z",
      "side": 1,
      "message": "Thanks for pointing it out. That\u0027s my mistake, I was doing the ptr \u003e\u003d end after the first read. I will update the CL with the new code.\n\nHere\u0027s the correct comparison for checked ones:\nUsignedChecked: https://godbolt.org/z/bn57zxh6o\nSignedChecked: https://godbolt.org/z/9boWYxesb\n\nFor unchecked versions it doesn\u0027t change:\nUnsigned: https://godbolt.org/z/v9ajcvTG1\nSigned: https://godbolt.org/z/PxnEEojhs",
      "parentUuid": "b8851ce4_2a56c496",
      "revId": "d69ad3359aee9469553280ece25ca252f6e2892f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}