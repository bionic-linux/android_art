{
  "comments": [
    {
      "key": {
        "uuid": "6f5e2dff_cdd0e942",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-21T07:23:44Z",
      "side": 1,
      "message": "ws",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 69,
        "endChar": 0
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_2c26c69b",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-24T06:16:24Z",
      "side": 1,
      "message": "unused.",
      "range": {
        "startLine": 71,
        "startChar": 27,
        "endLine": 71,
        "endChar": 36
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f3a11a9_6c30cecf",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-24T06:16:24Z",
      "side": 1,
      "message": "This needs an argument of MemberOffset for the offset of the field or array offset being accessed. If the field happens to lie out reserved low memory we still need an explicit check, and also in the case of a random array index - although we are saved from this in the general case by the load of the array length (which should be in low memory) for the bound check. This assumption should be asserted, ie no implicit null check when there isn\u0027t a bounds check.",
      "range": {
        "startLine": 71,
        "startChar": 14,
        "endLine": 71,
        "endChar": 26
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef469d41_4176801d",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-24T06:16:24Z",
      "side": 1,
      "message": "again this would need an offset argument.",
      "range": {
        "startLine": 81,
        "startChar": 14,
        "endLine": 81,
        "endChar": 46
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f75b176_4a14bf5f",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-21T07:23:44Z",
      "side": 1,
      "message": "cruft?",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 89,
        "endChar": 16
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f5e2dff_2dc0856a",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-21T07:23:44Z",
      "side": 1,
      "message": "This change is self-contained, move to a separate CL.",
      "range": {
        "startLine": 86,
        "startChar": 10,
        "endLine": 86,
        "endChar": 16
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af64a5c8_3aa601d3",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-02-21T10:45:43Z",
      "side": 1,
      "message": "I suggest moving arm-related code to fault_handler_arm.cc.",
      "range": {
        "startLine": 88,
        "startChar": 5,
        "endLine": 88,
        "endChar": 17
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f78b56e_eb6031e3",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-21T07:23:44Z",
      "side": 1,
      "message": "we\u0027re considering potential method as a viable method if its value is non-zero, it could just be random junk on the stack which would make the read from that address below very unsound. I\u0027d prefer if here we used something like the live heap bitmap to say whether this looked like a viable object.",
      "range": {
        "startLine": 130,
        "startChar": 25,
        "endLine": 130,
        "endChar": 26
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f75b176_0a3727fb",
        "filename": "runtime/fault_handler.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-21T07:23:44Z",
      "side": 1,
      "message": "I don\u0027t think the typedef buys anything here (as we use auto for iterators), remove.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 46
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f5e2dff_0db4a1fc",
        "filename": "runtime/fault_handler.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-21T07:23:44Z",
      "side": 1,
      "message": "* const",
      "range": {
        "startLine": 53,
        "startChar": 14,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f5e2dff_2da965a2",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 499,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-21T07:23:44Z",
      "side": 1,
      "message": "should be sound to make this false, but presumably its dependent on getting x86 implicit null checks working.",
      "range": {
        "startLine": 499,
        "startChar": 34,
        "endLine": 499,
        "endChar": 38
      },
      "revId": "ac57737a1b4529ab6926c98da53088dbf57bc5fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}