{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d6b34ae2_d1681167",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-02-17T13:35:30Z",
      "side": 1,
      "message": "PTAL. Thanks!",
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7758728_fe7640cf",
        "filename": "runtime/entrypoints/quick/quick_alloc_entrypoints.cc",
        "patchSetId": 17
      },
      "lineNbr": 77,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-02-17T13:35:30Z",
      "side": 1,
      "message": "Here and in the rest of the places, we could just trigger a deoptimize right here but in some of these runtime functions I guess the stack isn\u0027t set up for walking. For ex this check here could fail: https://cs.android.com/android/platform/superproject/+/master:art/runtime/stack.cc;l\u003d884; \n\nI don\u0027t think there is anything too difficult, and I also wanted to keep it consistent with the existing behaviour. We do a similar thing in QuickToInterpreterBridge.",
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ae72770_192965b2",
        "filename": "runtime/entrypoints/quick/quick_alloc_entrypoints.cc",
        "patchSetId": 17
      },
      "lineNbr": 77,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-02-17T13:49:53Z",
      "side": 1,
      "message": "Could we special case allocations not to have to check deopt? I think most of our allocations go to slow path and not here, but still, it could be consistent to not deopt after an allocation?",
      "parentUuid": "f7758728_fe7640cf",
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "663478cb_d2ce0a18",
        "filename": "runtime/entrypoints/quick/quick_dexcache_entrypoints.cc",
        "patchSetId": 17
      },
      "lineNbr": 170,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-02-17T13:49:53Z",
      "side": 1,
      "message": "Consider adding a macro / helper for this?",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 170,
        "endChar": 3
      },
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bcecd98_97055ea7",
        "filename": "runtime/entrypoints/quick/quick_field_entrypoints.cc",
        "patchSetId": 17
      },
      "lineNbr": 243,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-02-17T13:49:53Z",
      "side": 1,
      "message": "These constant checks in the C++ code may indicate we rather have the check in the runtime method (assembly) instead?",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 243,
        "endChar": 6
      },
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7ee338c_b8be41af",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 17
      },
      "lineNbr": 1555,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-02-17T13:49:53Z",
      "side": 1,
      "message": "Why can we not do this for suspend checks? (and need to pass the sp explicitly)",
      "range": {
        "startLine": 1555,
        "startChar": 0,
        "endLine": 1555,
        "endChar": 63
      },
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86a73f0b_e317386f",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 17
      },
      "lineNbr": 1613,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-02-17T13:49:53Z",
      "side": 1,
      "message": "nit: one condition per line.",
      "range": {
        "startLine": 1613,
        "startChar": 6,
        "endLine": 1613,
        "endChar": 48
      },
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91b6163a_36352c20",
        "filename": "runtime/instrumentation.h",
        "patchSetId": 17
      },
      "lineNbr": 666,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-02-17T13:49:53Z",
      "side": 1,
      "message": "Is this for optimization purposes? For simplicity, could we just do it at any runtime call?",
      "range": {
        "startLine": 663,
        "startChar": 0,
        "endLine": 666,
        "endChar": 33
      },
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a025e204_963659bb",
        "filename": "runtime/thread.cc",
        "patchSetId": 17
      },
      "lineNbr": 3702,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-02-17T13:35:30Z",
      "side": 1,
      "message": "I am not entirely sure why we haven\u0027t seen any problems with this earlier. Maybe because we always do full fragment deopts and ArtMethod::Invoke clears this in DeoptimizeWithDeoptimizeException. If we happen to do a partial fragment we enter QuickToInterpreterBridge which doesn\u0027t clear this exception. That could cause problems when we start executing interpreter code and interpreter tries to handle it as a regular exception.",
      "revId": "3609aac3b04ae7726c4353f70a294122d117790d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}