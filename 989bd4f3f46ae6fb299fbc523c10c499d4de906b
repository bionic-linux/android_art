{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8e4849f8_d15bfa93",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 2831,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "std::replace_if() would be more explicit. And a range-based loop would be just as good.",
      "range": {
        "startLine": 2826,
        "startChar": 2,
        "endLine": 2831,
        "endChar": 9
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8607d4e_c20a8789",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 2897,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "parameter name",
      "range": {
        "startLine": 2897,
        "startChar": 20,
        "endLine": 2897,
        "endChar": 21
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "019208dc_062f7638",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 2986,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Besides often unnecessarily calling resize() with the size(), this could have a really bad behaviour when you need to resize. Do not expect the std::vector\u003c\u003e::resize() to overallocate.",
      "range": {
        "startLine": 2984,
        "startChar": 6,
        "endLine": 2986,
        "endChar": 19
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72031fa1_45094dd6",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3095,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Why? Can there be any uses?",
      "range": {
        "startLine": 3095,
        "startChar": 50,
        "endLine": 3095,
        "endChar": 73
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb8f998b_3948ec13",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3111,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Why? There should be no uses after `ReplaceWith`.",
      "range": {
        "startLine": 3111,
        "startChar": 50,
        "endLine": 3111,
        "endChar": 73
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3722d9d9_b782a5ee",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3147,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Can we actually get here?",
      "range": {
        "startLine": 3147,
        "startChar": 10,
        "endLine": 3147,
        "endChar": 47
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f0be38d_09697026",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3180,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Implicit conversion from bool to int. Add ` ? 1 : 0`.",
      "range": {
        "startLine": 3180,
        "startChar": 56,
        "endLine": 3180,
        "endChar": 70
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4698dacd_fddc3fc6",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3184,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "is_escaped (not null means the partial singleton actually escaped)",
      "range": {
        "startLine": 3184,
        "startChar": 26,
        "endLine": 3184,
        "endChar": 40
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d21ae1bd_daab5c60",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3194,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "This should be ReplaceWith(). The result could be used as a Phi input.",
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d2d08ab_dde61114",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3214,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "We usually use just `use` for use nodes, reserving `user` for `HInstruction* user \u003d use.GetUser()`. That would shorten many expressions below.",
      "range": {
        "startLine": 3214,
        "startChar": 17,
        "endLine": 3214,
        "endChar": 21
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65d73fbf_e9bd6164",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3218,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Used only in LSE_VLOG. Avoid local variable.",
      "range": {
        "startLine": 3218,
        "startChar": 24,
        "endLine": 3218,
        "endChar": 35
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8851bf17_c370e326",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3227,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "One per line.",
      "range": {
        "startLine": 3227,
        "startChar": 68,
        "endLine": 3227,
        "endChar": 96
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0930ae54_c64992f2",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3229,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "It\u0027s faster to check for Phi then all the other checks above.\n\n  if (user-\u003eIsPhi()) {\n    to_replace.push_back({user.GetUser(), user.GetIndex()});\n  } else {\n    DCHECK(user-\u003eIsFieldAccess() || user-\u003eIsEqual() || user-\u003eIsNotEqual()) \u003c\u003c *user;\n    to_predicate.push_back({user.GetUser(), user.GetIndex()});\n  }",
      "range": {
        "startLine": 3229,
        "startChar": 10,
        "endLine": 3229,
        "endChar": 60
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00278231_26fbaacc",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3377,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "You don\u0027t need this. The `HEnvironment::ReplaceInput()` is moving nodes from the old NewInstance\u0027s env uses to the replacement NewInstances\u0027 env uses, so you can simply iterate until the container is empty:\n\n  const auto\u0026 env_uses \u003d ref_data.OriginalNewInstance()-\u003eGetEnvUses();\n  while (!env_uses.empty()) {\n    const HUseListNode\u0026 use \u003d *env_uses.begin();\n    HInstruction* user \u003d use.GetUser();\n    size_t index \u003d use.GetIndex();\n    HInstruction* merged_inst \u003d ref_data.GetMaterialization(user-\u003eGetHolder()-\u003eGetBlock());\n    LSE_VLOG \u003c\u003c \"Replacing env use of \" \u003c\u003c *user-\u003eGetHolder() \u003c\u003c \"@\" \u003c\u003c idx \u003c\u003c \" with \"\n            \u003c\u003c *merged_inst;\n    user-\u003eReplaceInput(merged_inst, idx);  // Moves the `use` node to user\u0027s env uses.\n  }\n\n(That shall make the CHECK() at line 3387 useless.)",
      "range": {
        "startLine": 3377,
        "startChar": 6,
        "endLine": 3377,
        "endChar": 98
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6532a6ef_9b7904cf",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3393,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Move to the start of the loop body?",
      "range": {
        "startLine": 3390,
        "startChar": 6,
        "endLine": 3393,
        "endChar": 60
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6358aca3_64a54652",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3411,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "The comparison for `std::sort()` must be a strict weak ordering. It\u0027s trivial to construct environments in gtest where the below comparison is not. (It may not be possible to construct such environments from _bytecode_ as a new-instance would need to be in a vreg to be live and therefore in environments of all subsequent new-instance instructions and that would translate to the materialized instructions as well. But if we wanted to re-run LSE a second time, we could hit such issues for partial singletons that were hidden in fields rather than vregs and the first LSE eliminated those loads and stores.)\n\n`std::sort` is not \"stable\" and the result is therefore implementation-defined for equivalent elements. However, we want to have the same results whether compiling on host or on target.",
      "range": {
        "startLine": 3411,
        "startChar": 6,
        "endLine": 3411,
        "endChar": 15
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be7e8216_c9256451",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3437,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Can the block really be null here for partial singletons? (If yes, one condition per line.)",
      "range": {
        "startLine": 3437,
        "startChar": 38,
        "endLine": 3437,
        "endChar": 79
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cbc8df4_7e0f5b41",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3498,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Or you could have both PartialLoadStoreEliminationHelper and HeapReferenceData declared as nested classes of LSEVisitor instead of nesting one in the other (but do not move the full definition inside LSEVisitor). You would have to define some member functions outside the class definitions as they seem to call each other.",
      "range": {
        "startLine": 3496,
        "startChar": 0,
        "endLine": 3498,
        "endChar": 93
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad53098d_2092a345",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3507,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "This should not happen. We should abort if we see that.",
      "range": {
        "startLine": 3507,
        "startChar": 6,
        "endLine": 3507,
        "endChar": 55
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "022b1dfa_86b38f99",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3529,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "This should not happen.",
      "range": {
        "startLine": 3529,
        "startChar": 77,
        "endLine": 3529,
        "endChar": 93
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab895756_22c13db1",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3539,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "This should not happen.",
      "range": {
        "startLine": 3539,
        "startChar": 77,
        "endLine": 3539,
        "endChar": 96
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d235da4_9302f6b2",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3582,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "HInstruction*",
      "range": {
        "startLine": 3582,
        "startChar": 4,
        "endLine": 3582,
        "endChar": 8
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67eea677_04a6296e",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3587,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "UNREACHABLE();",
      "range": {
        "startLine": 3587,
        "startChar": 2,
        "endLine": 3587,
        "endChar": 17
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc58772_7d859275",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3610,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Every entry block has a single predecessor. And it\u0027s obviously outside the excluded cohort.\n\nLet\u0027s assume that there exists an entry block `B` of an excluded cohort `C` with multiple predecessors. Due to breaking critical edges, each of its predecessors has a single successor, namely `B`. Then there is no path from such a predecessor to the exit block without going through `B` and therefore through `C`, so it has to be a part of `C`. Thus `B` has no predecessors outside `C` and it\u0027s therefore not an entry block of `C`. That contradicts the original assumption.",
      "range": {
        "startLine": 3610,
        "startChar": 16,
        "endLine": 3610,
        "endChar": 66
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59a2aa06_67ae7ba2",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3642,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "These default values serve only as inputs to Phis that directly or indirectly (through other Phis) feed the default value of predicated gets. The actual value is meaningless as the predicated get shall replace it with the actual value from a field.\n\nPlease add a comment about that.",
      "range": {
        "startLine": 3642,
        "startChar": 10,
        "endLine": 3642,
        "endChar": 80
      },
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d69af580_4623edae",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 63
      },
      "lineNbr": 3661,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Add blank line.",
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f39ad89f_bc632232",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 63
      },
      "lineNbr": 425,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "MakeParam() should insert the instruction into the entry block. That would be in line with Get{Int,Null}Constant and save a lot of lines. (Though I\u0027d like blank lines inserted between the MakeParam+Get{Int,Null}Constant sections and the other instructions that are inserted explicitly.)",
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa57e75e_126b345e",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 63
      },
      "lineNbr": 7880,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-15T16:59:09Z",
      "side": 1,
      "message": "Line too long.",
      "revId": "989bd4f3f46ae6fb299fbc523c10c499d4de906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}