{
  "comments": [
    {
      "key": {
        "uuid": "c283b51b_ad24098f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1866,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "\u003c\u003c instr-\u003eGetType()",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a29b218c_24eb865b",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1866,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c283b51b_ad24098f",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b881d5_dc6e613c",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1874,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "Nit: long line.",
      "range": {
        "startLine": 1874,
        "startChar": 0,
        "endLine": 1874,
        "endChar": 101
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82bb7df1_b1047df9",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1874,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2b881d5_dc6e613c",
      "range": {
        "startLine": 1874,
        "startChar": 0,
        "endLine": 1874,
        "endChar": 101
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a220812e_f9b7771e",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1880,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "Style: one statement per line (here and below).",
      "range": {
        "startLine": 1880,
        "startChar": 4,
        "endLine": 1880,
        "endChar": 57
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02e4ed24_22070f3d",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1880,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a220812e_f9b7771e",
      "range": {
        "startLine": 1880,
        "startChar": 4,
        "endLine": 1880,
        "endChar": 57
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42c98578_3c3679e5",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "Maybe DCHECK the type of `op` here?",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62a5a9c6_b1efdea0",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Is it useful considering that HArm64BitwiseNegatedRight\u0027s constructor already checks that?",
      "parentUuid": "42c98578_3c3679e5",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b881d5_9ff13b8b",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T15:16:52Z",
      "side": 1,
      "message": "Yes, we do that in other places (see e.g. HandleShift methods in code generators).",
      "parentUuid": "62a5a9c6_b1efdea0",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c283b51b_cd313dd0",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "Nit: use operator `?:` instead?",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 258,
        "endChar": 5
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62be89e4_294daf68",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c283b51b_cd313dd0",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 258,
        "endChar": 5
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02c30d5c_fa1b215f",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "\u003c\u003c op-\u003eDebugName()",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62be89e4_e95697fd",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done (I think you just meant `op`).",
      "parentUuid": "02c30d5c_fa1b215f",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02c30d5c_7a5631a8",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T15:16:52Z",
      "side": 1,
      "message": "Right; I read this too fast and thought `op` was a HInstruction at first.",
      "parentUuid": "62be89e4_e95697fd",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b881d5_3f9bcf90",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:44:06Z",
      "side": 1,
      "message": "For consistency with the first return statement (line 172), I\u0027d change that to\n\n  decltype(x \u0026 ~y)",
      "range": {
        "startLine": 170,
        "startChar": 34,
        "endLine": 170,
        "endChar": 49
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02c30d5c_fa196159",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:44:06Z",
      "side": 1,
      "message": "For the sake of completion, could you add static_assert\u0027s to make sure that the result type of `x \u0026 ~y` is the same as the result type of `x | ~y` and `x ^ ~y`?",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62be89e4_e92fb781",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done using some C++11 magic.",
      "parentUuid": "02c30d5c_fa196159",
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22d0113b_2301489e",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2b881d5_3f9bcf90",
      "range": {
        "startLine": 170,
        "startChar": 34,
        "endLine": 170,
        "endChar": 49
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62b209f8_1a6b7983",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 172,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "Style: move `return` statement on its own line (here and below).",
      "range": {
        "startLine": 172,
        "startChar": 6,
        "endLine": 172,
        "endChar": 45
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62be89e4_891f1b4e",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 172,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62b209f8_1a6b7983",
      "range": {
        "startLine": 172,
        "startChar": 6,
        "endLine": 172,
        "endChar": 45
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42c98578_fc424133",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "Replace with\n\n  UNREACHABLE();\n\nand remove comment on line 175.",
      "range": {
        "startLine": 176,
        "startChar": 44,
        "endLine": 176,
        "endChar": 53
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02e4ed24_62aab74a",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42c98578_fc424133",
      "range": {
        "startLine": 176,
        "startChar": 44,
        "endLine": 176,
        "endChar": 53
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c283b51b_0d5d15f4",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:29:14Z",
      "side": 1,
      "message": "Nit: indentation is off.",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 2,
        "endChar": 1
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62be89e4_691cc758",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T14:48:37Z",
      "side": 1,
      "message": "Done. For the record, this was copy/pasted from another test, it appears that these tests have the same indentation issue:\n- 550-checker-multiply-accumulate\n- 551-checker-shifter-operand\n- 565-checker-doublenegbitwise",
      "parentUuid": "c283b51b_0d5d15f4",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 2,
        "endChar": 1
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b881d5_5fe8839b",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T15:16:52Z",
      "side": 1,
      "message": "Thanks for pointing out the issue in other tests!  I\u0027ll take care of them.",
      "parentUuid": "62be89e4_691cc758",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 2,
        "endChar": 1
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82affd8e_bbda935d",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:39:27Z",
      "side": 1,
      "message": "Use DCHECK-DAG instead of DCHECK (here and below).",
      "range": {
        "startLine": 39,
        "startChar": 6,
        "endLine": 39,
        "endChar": 11
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82bb7df1_71826585",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-02-24T14:38:39Z",
      "side": 1,
      "message": "Isn\u0027t the order of ParameterValue instructions expected to be in the same as for arguments? If so I don\u0027t think we should use CHECK-DAG here. And the other instructions below are also strictly ordered due to data dependencies.",
      "parentUuid": "82affd8e_bbda935d",
      "range": {
        "startLine": 39,
        "startChar": 6,
        "endLine": 39,
        "endChar": 11
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22dbb13a_062fa068",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T15:16:52Z",
      "side": 1,
      "message": "Right.  I would keep DCHECKs for ParameterValue instructions, but I think we should switch to DCHECK-DAGs for other instructions, as we do not want to enforce a specific order here (and dependencies introduced by use-def information are enough).",
      "parentUuid": "82bb7df1_71826585",
      "range": {
        "startLine": 39,
        "startChar": 6,
        "endLine": 39,
        "endChar": 11
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82bb7df1_71d02575",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-02-24T15:27:52Z",
      "side": 1,
      "message": "I think CHECK is better below as well. There is no need for CHECK-DAG, since the order is guaranteed thanks to data dependencies and arguments order.\n\nCHECK-DAG is used if we are unsure of the order the instructions appear. For example in\n\n    int foo(int x, int y) {\n      int a \u003d x + y;\n      int b \u003d x - y;\n      int res \u003d a * b;\n      return res;\n    }\n\nwe would need CHECK-DAG because `a` is not necessarily computed before `b`.\n\n    CHECK       \u003c\u003cy\u003e\u003e        ParameterValue\n    CHECK       \u003c\u003cx\u003e\u003e        ParameterValue\n    CHECK-DAG   \u003c\u003ca:i\\d+\u003e\u003e   Add [\u003c\u003cx\u003e\u003e,\u003c\u003cy\u003e\u003e]\n    CHECK-DAG   \u003c\u003cb:i\\d+\u003e\u003e   Sub [\u003c\u003cx\u003e\u003e,\u003c\u003cy\u003e\u003e]\n    CHECK       \u003c\u003cres:i\\d+\u003e\u003e Mul [\u003c\u003ca\u003e\u003e,\u003c\u003cb\u003e\u003e]\n    CHECK                    Return \u003c\u003cres\u003e\u003e\n\nOr correct me if I am wrong. Maybe David can help us conclude here.",
      "parentUuid": "22dbb13a_062fa068",
      "range": {
        "startLine": 39,
        "startChar": 6,
        "endLine": 39,
        "endChar": 11
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62b209f8_1ab37936",
        "filename": "test/564-checker-negbitwise/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T16:02:40Z",
      "side": 1,
      "message": "The intent behind CHECK-DAG is to be robust to potential changes introduced by previous passes (especially if the order of basic blocks has changed).  I agree that in that case, CHECK works as well as CHECK-DAG.  It is less obvious in more complex expressions, such as in lines 158­–163, so I believe the consensus was to use CHECK-DAG by default in most Checker tests.\n\nDavid is out of the office this week.  I\u0027m fine with the current implementation, so we can merge it as-is and maybe change CHECKs to CHECK-DAGs in a follow-up CL if needed. :)",
      "parentUuid": "82bb7df1_71d02575",
      "range": {
        "startLine": 39,
        "startChar": 6,
        "endLine": 39,
        "endChar": 11
      },
      "revId": "f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}