{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d32dc579_d80c792f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-20T14:18:33Z",
      "side": 1,
      "message": "Hi Chris, I think this one is the next in the chain. Do you want to rebase this before I take another look? We cannot run presubmit checks without rebasing too.",
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25379ad5_967c5f1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-06-20T14:45:39Z",
      "side": 1,
      "message": "Yes this is the next one. For patches in this chain I\u0027d ideally like to get a single code approval (CR +2) before rebasing as it should allow me to fix issues earlier by retesting the whole chain of patches on the simulator.",
      "parentUuid": "d32dc579_d80c792f",
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cc740a7_5ceef8fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-21T08:09:44Z",
      "side": 1,
      "message": "I am not sure I follow the single code approval. You still want to land these changes individually right? Or do you want to land the changes from this CL until the first \"Macroise\" symbol access together? Even in that case, I think you would have to rebase those 6 changes so you could land them. Also depending on how involved the rebase was sometimes the review tool drops the CR + 2.",
      "parentUuid": "25379ad5_967c5f1a",
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "056b4b59_1eb73c9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-06-25T11:15:52Z",
      "side": 1,
      "message": "Sorry for the confusion, my plan was as follows:\n\n1. Go through normal code review iteration until a code approval for a single patch.\n2. Rebase that individual change.\n3. Go through normal code review iteration to get 2 code reviews, presubmit, etc... passing\n4. Patch can be merged individually.\n5. Repeat 1-4 for later patches in the chain.\n\nThe reason for receiving a CR before rebasing is because I want to minimise the amount of changes done after the rebase as I can\u0027t (easily) test these changes with the later (non-rebased) patches. Note: we have a \"known-good\" pinned manifest which we are using to develop and test the simulator on. For example, I now can\u0027t easily test some of the latest changes to [the rework exception delivery patch](https://android-review.googlesource.com/c/platform/art/+/2680017/8), on the simulator, now that it\u0027s been rebased.\n\nI am aware that there will be changes made after rebase that may change later patches and would remove the CR+2 but the earlier I can make changes the more confidence we can have that the design of the patch is correct and will hopefully require fewer fixes in the future.\n\nI hope that makes sense and explains some of our reasoning in how these patches are being developed.",
      "parentUuid": "7cc740a7_5ceef8fe",
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70a05f87_b3f135b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-25T11:37:00Z",
      "side": 1,
      "message": "Thanks Chris! That makes sense. I will take a look at these CLs.",
      "parentUuid": "056b4b59_1eb73c9d",
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c43fe99b_305f144c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-27T10:44:04Z",
      "side": 1,
      "message": "Thanks Chris! Just a few clarifications and minor comments.\n\nOne question not directly related to the CL. When we implement simulator stack should we have to update GC to be also aware of this stack to scan and update any references?",
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4927bedd_883c3413",
        "filename": "runtime/common_throws.h",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-27T10:44:04Z",
      "side": 1,
      "message": "Maybe we don\u0027t need this?",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 19
      },
      "fixSuggestions": [
        {
          "fixId": "2b40ce63_19020d6b",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "runtime/common_throws.h",
              "range": {
                "startLine": 24,
                "startChar": 0,
                "endLine": 25,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebb0b753_70d98718",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 2829,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-27T10:44:04Z",
      "side": 1,
      "message": "Is this TODO to add some kind of DCHECK / CHECK to make sure we are not on simulated stack? As far as I understand this code, this is used to check we aren\u0027t double updating roots on stack on debug builds. I was wondering if we should also handle simulator stacks here. I don\u0027t understand how GC handles on-stack references fully so maybe I am missing something too.",
      "range": {
        "startLine": 2828,
        "startChar": 24,
        "endLine": 2829,
        "endChar": 28
      },
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2ee38d9_448f053f",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 3
      },
      "lineNbr": 1494,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-27T10:44:04Z",
      "side": 1,
      "message": "native stack has overflowed / native stack overflows",
      "range": {
        "startLine": 1494,
        "startChar": 5,
        "endLine": 1494,
        "endChar": 31
      },
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75bd9d7e_cf7313ea",
        "filename": "runtime/thread-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 544,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-27T10:44:04Z",
      "side": 1,
      "message": "A quick question, when we implement simulator stack we would use a different set of begin stack_begin and stack_end is it? I think we still want to detect simulator overflow and native stack overflow differently right?",
      "range": {
        "startLine": 544,
        "startChar": 24,
        "endLine": 544,
        "endChar": 59
      },
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e82b21_f955c600",
        "filename": "runtime/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 1203,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-27T10:44:04Z",
      "side": 1,
      "message": "I am sorry, I know I asked to drop template on this but I was wondering if we should reintroduce the template or change the name to IsRawObjOnQuickStack to avoid confusion and using the wrong one. Sorry for going back and forth on this. I am fine with either using templates or name change.",
      "range": {
        "startLine": 1203,
        "startChar": 7,
        "endLine": 1203,
        "endChar": 22
      },
      "revId": "3cf90885b215c06431a906780be506b0029540b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}