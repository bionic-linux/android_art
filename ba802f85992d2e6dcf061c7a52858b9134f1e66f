{
  "comments": [
    {
      "key": {
        "uuid": "343b81c2_7c4e3753",
        "filename": "compiler/utils/x86/assembler_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-11T15:13:19Z",
      "side": 1,
      "message": "EmitLockPrefix();\n\n[ And use this for lock() if you want to keep lock() ].",
      "range": {
        "startLine": 831,
        "startChar": 4,
        "endLine": 831,
        "endChar": 20
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94ee700c_04613b0e",
        "filename": "compiler/utils/x86/assembler_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-14T14:25:02Z",
      "side": 1,
      "message": "This can be set aside.",
      "parentUuid": "343b81c2_7c4e3753",
      "range": {
        "startLine": 831,
        "startChar": 4,
        "endLine": 831,
        "endChar": 20
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcbd310a_69c2a31d",
        "filename": "compiler/utils/x86/assembler_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 838,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-11T15:13:19Z",
      "side": 1,
      "message": "We have all the uses of lock() here for x86. Suggest:\n\nAssemblerBuffer::EnsureCapacity ensured(\u0026buffer_);\nEmitLockPrefix();\ncmpxchgl();\n\nThe problem with LOCK is that it applies to a tiny subset of x86 instructions and incorrect use will raise an undefined exception at runtime. Unfortunately lock() returns a full X86Assembler so it doesn\u0027t avoid this. It looks cool in usage though :-) Given our scarce use this isn\u0027t a huge problem, so you can leave this as-is in this CL if you want since we\u0027re really only doing this to work around llvm-objdump.",
      "range": {
        "startLine": 838,
        "startChar": 4,
        "endLine": 838,
        "endChar": 35
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f309694_dcf16a52",
        "filename": "compiler/utils/x86/assembler_x86_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T14:52:30Z",
      "side": 1,
      "message": "Remove. The H registers are the higher bits from AX, BX, CX, DX instead of the low 8 bits from BP, SP, SI, DI. Our compiler cannot use those registers.",
      "range": {
        "startLine": 117,
        "startChar": 6,
        "endLine": 120,
        "endChar": 70
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68b6cf72_24e1881e",
        "filename": "compiler/utils/x86/assembler_x86_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T14:55:33Z",
      "side": 1,
      "message": "Feel free to remove the AH, BH, CH, DH from art/compiler/utils/x86/constants_x86.h, replacing them with a comment that we are not using them.\n\n(Using them would require enormous effort in the register allocator.)",
      "parentUuid": "4f309694_dcf16a52",
      "range": {
        "startLine": 117,
        "startChar": 6,
        "endLine": 120,
        "endChar": 70
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "478d917e_c1e8a37d",
        "filename": "compiler/utils/x86/assembler_x86_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-11T14:57:32Z",
      "side": 1,
      "message": "Even if we don\u0027t use them in register allocator, clang expects this convention: to use ah as 8bit register for EBP, etc. Without them the test fails",
      "parentUuid": "68b6cf72_24e1881e",
      "range": {
        "startLine": 117,
        "startChar": 6,
        "endLine": 120,
        "endChar": 70
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd13cf2f_37cf9f3a",
        "filename": "compiler/utils/x86/assembler_x86_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T15:07:02Z",
      "side": 1,
      "message": "If the tests fail, that means the RepeatAw() should be fixed to use only those registers that have a tertiary name. That requires some refactoring.\n\nAdd a FIXME comment for now.",
      "parentUuid": "478d917e_c1e8a37d",
      "range": {
        "startLine": 117,
        "startChar": 6,
        "endLine": 120,
        "endChar": 70
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ba4eb05_86cd4127",
        "filename": "compiler/utils/x86/assembler_x86_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-11T15:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd13cf2f_37cf9f3a",
      "range": {
        "startLine": 117,
        "startChar": 6,
        "endLine": 120,
        "endChar": 70
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f7de8d6_698be269",
        "filename": "compiler/utils/x86/assembler_x86_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-11T15:13:19Z",
      "side": 1,
      "message": "Can we remove them and change the generator not to emit them if they are not present?",
      "parentUuid": "478d917e_c1e8a37d",
      "range": {
        "startLine": 117,
        "startChar": 6,
        "endLine": 120,
        "endChar": 70
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9557916d_fc4cefb9",
        "filename": "compiler/utils/x86/assembler_x86_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-11T15:19:39Z",
      "side": 1,
      "message": "gerrit overlaps, treat as done for now.",
      "parentUuid": "7f7de8d6_698be269",
      "range": {
        "startLine": 117,
        "startChar": 6,
        "endLine": 120,
        "endChar": 70
      },
      "revId": "ba802f85992d2e6dcf061c7a52858b9134f1e66f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}