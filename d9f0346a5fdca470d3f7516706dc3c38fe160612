{
  "comments": [
    {
      "key": {
        "uuid": "ddb333b8_88215bca",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-25T17:09:42Z",
      "side": 1,
      "message": "This won\u0027t work, we try to be best effort in non-debuggable.",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e775c169_695249e4",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-25T17:37:17Z",
      "side": 1,
      "message": "Ok, switching all the introduced CHECKs to to DCHECKs?",
      "parentUuid": "ddb333b8_88215bca",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "808bbb7f_88869ef1",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-25T17:51:08Z",
      "side": 1,
      "message": "No, my comment wasn\u0027t about debug/ndebug, but about the \"debuggable\" flag passed to the runtime. GetVRegFromOptimizedCode might be called on a method at a point where the vreg_info isn\u0027t there.",
      "parentUuid": "e775c169_695249e4",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78f2c89e_02a1cd08",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-25T18:21:28Z",
      "side": 1,
      "message": "I might have misunderstood our previous chats on that. Due to my understanding the only cases when GetVRegFromOptimizedCode can be called on \"non-debuggable\" method\u0027s frame is for InstrumentationInstallStack - and for this visitor needs_vreg_info is \u0027false\u0027 thus no check.\n\nDo you mean that something else (like openjdkjvmti) can do that? Could you share what those cases are please?",
      "parentUuid": "808bbb7f_88869ef1",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a56638a0_febc27fa",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-27T12:57:58Z",
      "side": 1,
      "message": "I feel like this isn\u0027t the place to do such checks - I\u0027d much rather have a kIsDebugBuild sanity check in the constructor of the stack walker which will walk the stack and ensure that if needs_vreg_info_ is passed (should this really be called \"expect_stack_maps_to_contain_vregs\" ?) then walks the stack and verifies they all contain vreg info ?",
      "parentUuid": "78f2c89e_02a1cd08",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f844c0d_faf44cb3",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-27T12:58:54Z",
      "side": 1,
      "message": "(eg, we could have a DebuggableStackVisitor that does this check at construction. That will actually be nice to actually differentiate visitors that can only run in debuggable mode).",
      "parentUuid": "a56638a0_febc27fa",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50233b3b_f95c4b9a",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-27T18:00:29Z",
      "side": 1,
      "message": "It seems that what you are suggesting will cause 2 stack frames traversal instead of one and also will bring some implications that stack should be ready to be walked not when \"WalkStack\" is called but at the constructor time.\n\nWhat about checking the stackmap when visiting a particular frame? Something like having a wrapper function and call it instead of VisitFrame in WalkStack?\n\n  // A wrapper for VisitFrame function which conditionally checks the presence of vreg info for\n  // quick frames. See comments for needs_vreg_info_.\n  bool VisitFrameWrapper() REQUIRES_SHARED(Locks::mutator_lock_) {\n    // Check that vreg info is present for the frame.\n    if (kIsDebugBuild \u0026\u0026 needs_vreg_info_) {\n      CheckFrameForVRegInfo();\n    }\n    return VisitFrame();\n  }\n\nThe next step would be to have DebuggableStackVisitor class to replace that needs_vreg_info_ flag.",
      "parentUuid": "4f844c0d_faf44cb3",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c237517_9844c398",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-28T12:45:42Z",
      "side": 1,
      "message": "I wouldn\u0027t want to complexify an already complicated code for this. Maybe it\u0027s just OK to not do the checks, a lot of the code here is best effort, and the burden should be on the caller to ensure it runs on oat files that have the full vregs.",
      "parentUuid": "50233b3b_f95c4b9a",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5f62550_45dfcf3a",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-29T15:17:29Z",
      "side": 1,
      "message": "The issue with a \"burden on caller\" approach is that it breaks the design idea that the client code when calling GetVReg() (or similar)  doesn\u0027t have to care whether it is dealing with quick or interpreter frame; the StackVisitor class offers some level of abstraction. For instance: deoptimization and OSR visitors would be easy to have a DCHECK, but Monitor::VisitLocks method doesn\u0027t really care about the frame type.\n\nAnyway if you believe it is already too complicated to have any extra changes around the visitor we could just have unchecked accesses. If we proceed with further optimizations on stack map and HEnvironments we could consider more safe and easy checks (e.g. saving a type bit in the encoded stackmap itself).",
      "parentUuid": "5c237517_9844c398",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d330d708_cb61ccf3",
        "filename": "runtime/stack.cc",
        "patchSetId": 9
      },
      "lineNbr": 225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-04-01T08:36:09Z",
      "side": 1,
      "message": "Ack. But please keep the current CHECKs and don\u0027t move them to DCHECKs. A debug build will behave the same as non-debug in that respect. If those checks are now obsolete, please replace them with a comment why we\u0027re not doing the check.",
      "parentUuid": "d5f62550_45dfcf3a",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 225,
        "endChar": 3
      },
      "revId": "d9f0346a5fdca470d3f7516706dc3c38fe160612",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}