{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4a74a6fd_bfac6441",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-05-24T12:43:10Z",
      "side": 1,
      "message": "Are the NDK folks still okay with the associated bionic change? API Freeze for S was May 19th.",
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fb78f73_761c3403",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2021-05-24T19:59:48Z",
      "side": 1,
      "message": "danalbert@ since enh@ is OOO this week. Can you comment on this? The bionic CL was API approved in February.",
      "parentUuid": "4a74a6fd_bfac6441",
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a095823_090886ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-05-25T17:11:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fb78f73_761c3403",
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66ba4c4b_9040b57c",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-21T15:13:55Z",
      "side": 1,
      "message": "I thought that adding it on the __ALWAYS_INLINE__ macro will be enough.\n\nI worry that it will be super easy for someone to regress this CL\nIs there an easy way to know where to add these?\n\n(I\u0027m not opposing this, but it seems it will trigger a maintainability issue)",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 18
      },
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7912c50_a6a8b735",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-05-21T18:38:14Z",
      "side": 1,
      "message": "We need to remove the stack protector from all functions that appear in any call stack that leads to the fork code.  It\u0027s easy to identify these functions from the stack dump caused by the __stack_chk_fail function.  After adding the NO_STACK_PROTECTOR attribute this process may need to be iterated several times.\n\nSometimes, after adding the attribute, the failure will still trigger in the same location.  This is an indication that there is an alwaysinline function being called, causing the stack protector to get installed in the function despite our annotation.  There is a document describing the process for identifying them that I will send you.\n\nI\u0027d love to write this all up somewhere for future ART maintainers if you can point me to a place you think is appropriate.",
      "parentUuid": "66ba4c4b_9040b57c",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 18
      },
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "499e000c_7a44ba3c",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-21T19:22:05Z",
      "side": 1,
      "message": "You could:\n\n- write docs in an art/Readme.md\n- add a script to run all those commands in the doc so people contributing can run it\n- add it the script as part of presubmits? assuming this matters a lot we need a way to prevent regression.\n\nI\u0027ll defer to Orion and Nicolas to what extent this should be enforced via presubmits or just handled on a best effort case.",
      "parentUuid": "c7912c50_a6a8b735",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 18
      },
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12998a80_7b4ded20",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2021-05-21T21:42:04Z",
      "side": 1,
      "message": "I\u0027m not sure you need to run a separate script as part of presubmits. If someone regresses this, you will fail other existing tests (at least based on previous discussions with Chris). We should just make sure that those tests aren\u0027t only run as post-submits.",
      "parentUuid": "499e000c_7a44ba3c",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 18
      },
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "033799e2_c76d76a3",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-05-21T23:15:54Z",
      "side": 1,
      "message": "1. I\u0027ve added debugging information to `art/README.md` in a followup CL and added you as a reviewer.\n\n2. The debugging commands are really resistant to scripting and they should only have to be used in rare situations where we add a call to an external library function that is annotated with `alwaysinline`.  Now that our internal macros also use `no_stack_protector` I hope no one has to go through this again (though I did document the process).  I don\u0027t think it\u0027s worth the time to turn this into a standalone script.\n\n3. These commands don\u0027t need to be run on presubmit.  Any change that causes a regression will cause boot tests or WebViewZygote/AppZygote tests to fail in presubmit.  These commands only need to be run in the situation I described in #2.",
      "parentUuid": "499e000c_7a44ba3c",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 18
      },
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d42663d6_d992d033",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-24T14:59:09Z",
      "side": 1,
      "message": "Great, as long as there\u0027s a test that will fail I think we\u0027re good with just the readme.md.\n\nIs this test KeyboardVisibilityControlTest? and does it mean that the test is currently red?",
      "parentUuid": "033799e2_c76d76a3",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 18
      },
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74e9be50_4f08c93c",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-05-24T20:40:14Z",
      "side": 1,
      "message": "Any issue with the main Zygote fork path will cause a boot failure, so that should be easy to detect.\n\nI was using the KeyboardVisibilityControlTest to check the WebViewZygote paths, as it failed before I removed the stack protection from the interpreter.  If any issues arise with the interpreter-based zygote paths any of the existing tests that create a new WebView element from the WebViewZygote will crash.",
      "parentUuid": "d42663d6_d992d033",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 18
      },
      "revId": "e391bab80763b9e1b840fe786a43c0ca56d245ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}