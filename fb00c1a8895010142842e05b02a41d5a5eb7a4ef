{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d3ce0a7_5b7b6559",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-05T15:13:20Z",
      "side": 1,
      "message": "Should we introduce the `PROTECTED` attribute in this CL and use it instead of all the `EXPORT` attributes that we\u0027re adding here?",
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59bc0c6a_8cefb877",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2024-01-08T14:24:47Z",
      "side": 1,
      "message": "There is an example of `protected` visibility in http://aosp/2859955 (see `Runtime::instance_`), it requires some additional macros logic.\n\nI was thinking about alternatives, one of them is to add `-Wl,-Bsymbolic` linker flag to `libart`. That should provide the same benefit as `protected` while not requiring any changes in the macros.",
      "parentUuid": "5d3ce0a7_5b7b6559",
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "561c553c_32128aad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-08T14:43:01Z",
      "side": 1,
      "message": "OK, let\u0027s keep `EXPORT` for now and we can consider the alternatives later.",
      "parentUuid": "59bc0c6a_8cefb877",
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14666d6a_55739b65",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-05T15:13:20Z",
      "side": 1,
      "message": "Why is this needed? Is it used by some inlined `LinearAlloc` function in `dex2oat`?\n\n(Same question for `AllocSingleObjArena` and `FreeSingleObjArena` below.)",
      "range": {
        "startLine": 103,
        "startChar": 2,
        "endLine": 103,
        "endChar": 8
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02093d80_763461d8",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2024-01-05T22:11:14Z",
      "side": 1,
      "message": "`libopenjdkvmti` uses `LinearAlloc::Alloc` https://cs.android.com/android/platform/superproject/main/+/main:art/openjdkjvmti/ti_redefine.cc;l\u003d312\nWhich then calls to `SetFirstObject`.\n\nAllocSingleObjArena is used in `art::linker::ImageWriter::CalculateNewObjectOffsets` and `CopyAndFixupNativeData` through `GcRootArenaAllocator`.",
      "parentUuid": "14666d6a_55739b65",
      "range": {
        "startLine": 103,
        "startChar": 2,
        "endLine": 103,
        "endChar": 8
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c439de5_b5df3388",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-08T09:10:22Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "02093d80_763461d8",
      "range": {
        "startLine": 103,
        "startChar": 2,
        "endLine": 103,
        "endChar": 8
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29fbb46e_2b78dc42",
        "filename": "runtime/base/locks.h",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-05T15:13:20Z",
      "side": 1,
      "message": "I guess this one (and maybe some other functions) could be hidden but given the number of `Mutex`es we need to export, I\u0027m fine with exporting the entire class.",
      "range": {
        "startLine": 169,
        "startChar": 14,
        "endLine": 169,
        "endChar": 28
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f35cb81_97ed2167",
        "filename": "runtime/base/locks.h",
        "patchSetId": 1
      },
      "lineNbr": 383,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-05T15:13:20Z",
      "side": 1,
      "message": "Why do we need to export this static analysis annotation?",
      "range": {
        "startLine": 383,
        "startChar": 2,
        "endLine": 383,
        "endChar": 8
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ef3d654_7152ea41",
        "filename": "runtime/base/locks.h",
        "patchSetId": 1
      },
      "lineNbr": 383,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2024-01-05T22:11:14Z",
      "side": 1,
      "message": "In `libarttest`:\nhttps://cs.android.com/android/platform/superproject/main/+/main:art/test/1985-structural-redefine-stack-scope/stack_scope.cc;l\u003d61\n`Alloc` eventually calls to: https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/gc/heap-inl.h;l\u003d69",
      "parentUuid": "4f35cb81_97ed2167",
      "range": {
        "startLine": 383,
        "startChar": 2,
        "endLine": 383,
        "endChar": 8
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0e5dc79_7a384859",
        "filename": "runtime/base/locks.h",
        "patchSetId": 1
      },
      "lineNbr": 383,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-08T09:10:22Z",
      "side": 1,
      "message": "I don\u0027t understand why we need to export something that\u0027s used only for compile-time static analysis. But maybe we just need to accept that as a fact, acknowledge and move on.",
      "parentUuid": "2ef3d654_7152ea41",
      "range": {
        "startLine": 383,
        "startChar": 2,
        "endLine": 383,
        "endChar": 8
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c79ba2b1_20b651f9",
        "filename": "runtime/base/locks.h",
        "patchSetId": 1
      },
      "lineNbr": 383,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2024-01-08T14:47:55Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d0e5dc79_7a384859",
      "range": {
        "startLine": 383,
        "startChar": 2,
        "endLine": 383,
        "endChar": 8
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3722425d_0eaf5681",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-05T15:13:20Z",
      "side": 1,
      "message": "Should we export the entire class? (There are just a few functions that are neither exported nor inline.)",
      "range": {
        "startLine": 322,
        "startChar": 0,
        "endLine": 322,
        "endChar": 5
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "022daebf_8ca4fa9e",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2024-01-05T22:11:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3722425d_0eaf5681",
      "range": {
        "startLine": 322,
        "startChar": 0,
        "endLine": 322,
        "endChar": 5
      },
      "revId": "fb00c1a8895010142842e05b02a41d5a5eb7a4ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}