{
  "comments": [
    {
      "key": {
        "uuid": "d3bf25fa_853fab40",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 922,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Note that I changed the order but I do not know how to test the difference in a run-test. (Though we could use a gtest if desired.)",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ff549a3_9b75f702",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 922,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "Right, I think we\u0027d need some JNI to expose FindInterfaceMethod to test this from a run-test.\n\nI think it could just return the java.lang.reflect.Method corresponding to the original non-copied ArtMethod after doing a FindInterfaceMethod lookup.\n\nMaybe the Tooling Interface has something for this to avoid ART internals? I\u0027m not sure.",
      "parentUuid": "d3bf25fa_853fab40",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "382a84f6_3e54d0d3",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 922,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "No idea what is the \"Tooling Interface\".",
      "parentUuid": "3ff549a3_9b75f702",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5d69800_2f333b22",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 922,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T18:21:08Z",
      "side": 1,
      "message": "Alex says that using reflection one can call \"Foo.class.getMethod(\"methodName\").getClass()\" and it will always return the class that \"methodName\" is declared in according to method resolution rules.\n\n(And that this works for both RI and ART).\n\nUsing a class will do the class method resolution, and using an interface will do the interface method resolution.",
      "parentUuid": "382a84f6_3e54d0d3",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01c78e87_c075ab9f",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 962,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "In light of your clarification, I think this would be less confusing if it was reworded:\n\nThis method does not itself throw (e.g. IncompatibleClassChangeError, IllegalAccessError), nor does it return a method that (when invoked) would throw (e.g. an IncompatibleClassChangeError/IllegalAccessError). It is the caller\u0027s responsibility to check and handle those error cases.",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda606a3_24a14cff",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 962,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "That would completely miss the purpose of my comment - to point out a strange case.",
      "parentUuid": "01c78e87_c075ab9f",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ed2135f_5f1ac6a5",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 962,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T17:21:42Z",
      "side": 1,
      "message": "Do you think we could use your best judgment here to combine the existing paragraph with elements of the above suggestion? I\u0027m just trying to point out it\u0027s confusing what the API behavior is to the reader.\n\nOf course it\u0027s not confusing to you since you wrote it?\n\nFor example if the above suggestion was added as a new paragraph [at the bottom] then it would still point out the strange case and also be clearer to the reader what it means \"to check for...\"",
      "parentUuid": "fda606a3_24a14cff",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5357c2fa_73fa4f85",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 962,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:36:22Z",
      "side": 1,
      "message": "I don\u0027t think so. We\u0027ve go a one line short description, one paragraph that _precisely_ describes what the function does, and one paragraph that points out an odd case. In my opinion, this can only be made more confusing. (Unless I spend a couple of days working on it.)",
      "parentUuid": "1ed2135f_5f1ac6a5",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40945f76_7305ec79",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 962,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:46:27Z",
      "side": 1,
      "message": "If it\u0027s any consolation, I intend to rewrite this once I fix the \"copied\" methods, so that we do not need to do the weird search described above.",
      "parentUuid": "5357c2fa_73fa4f85",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e89afe97_dc388424",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 962,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:55:34Z",
      "side": 1,
      "message": "Is PS48 better? (I believe it lost half of its meaning but the two things didn\u0027t go together.)",
      "parentUuid": "40945f76_7305ec79",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c5db61_4222a5a9",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 45
      },
      "lineNbr": 962,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T18:04:49Z",
      "side": 1,
      "message": "Yes, PS48 is better, thanks. Sometimes losing a bit of documentation ends up improving it :).",
      "parentUuid": "e89afe97_dc388424",
      "revId": "e4409a61fc46215cf1a2716edad9074b2a79bcf2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}