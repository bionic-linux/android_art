{
  "comments": [
    {
      "key": {
        "uuid": "819c1a95_70aafb02",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1615,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "You don\u0027t have this bit in the vixl backend. That means you\u0027re willing to emit multi-instruction SBCS with the vixl backend but not with the old one (missing SbcsConstant()?). I\u0027d prefer we keep in sync.",
      "range": {
        "startLine": 1598,
        "startChar": 0,
        "endLine": 1615,
        "endChar": 9
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89df58a2_9f490672",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1615,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T15:26:34Z",
      "side": 1,
      "message": "Yes, the VIXL macroassembler makes sure that the instructions materializing a constant do not change the flags (this is the intended behaviour, and any deviation is a bug), while AFAIK this backend can\u0027t make the same guarantee (and I wanted to keep my changes to a minimum), but I will synchronize both code generators, and I will leave a TODO comment in the VIXL-based one.",
      "parentUuid": "819c1a95_70aafb02",
      "range": {
        "startLine": 1598,
        "startChar": 0,
        "endLine": 1615,
        "endChar": 9
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f67e74f_3ca05638",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1625,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "This comment no longer applies here, it should be moved to the IsConstant() branch. We could add a comment about blocking FP registers here instead.",
      "range": {
        "startLine": 1624,
        "startChar": 0,
        "endLine": 1625,
        "endChar": 66
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "557316fc_a6f2d6b6",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1625,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T15:26:34Z",
      "side": 1,
      "message": "Do you mean that the wording can be improved? The code does exactly what the comment says.",
      "parentUuid": "0f67e74f_3ca05638",
      "range": {
        "startLine": 1624,
        "startChar": 0,
        "endLine": 1625,
        "endChar": 66
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11162df9_c8158458",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1625,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-07T17:16:10Z",
      "side": 1,
      "message": "The comment is misplaced. The low reg requirement is checked only in the IsConstant() path and the comment should be there.",
      "parentUuid": "557316fc_a6f2d6b6",
      "range": {
        "startLine": 1624,
        "startChar": 0,
        "endLine": 1625,
        "endChar": 66
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30490f5b_91fb5faa",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1625,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-09T13:28:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11162df9_c8158458",
      "range": {
        "startLine": 1624,
        "startChar": 0,
        "endLine": 1625,
        "endChar": 66
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20b16a65_2c56c601",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1660,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "IsControlFlow?",
      "range": {
        "startLine": 1660,
        "startChar": 23,
        "endLine": 1660,
        "endChar": 29
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ddc8dd2_f5159c26",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1660,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-02T15:10:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20b16a65_2c56c601",
      "range": {
        "startLine": 1660,
        "startChar": 23,
        "endLine": 1660,
        "endChar": 29
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0c9d9d4_f86f93f8",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2477,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "Actually, we really want just [0, 255] as constants because we want to use IT+MOV.",
      "range": {
        "startLine": 2477,
        "startChar": 26,
        "endLine": 2477,
        "endChar": 85
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15adf5a3_c9adbeaa",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2477,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T15:26:34Z",
      "side": 1,
      "message": "If we can\u0027t generate an IT block, the constants can still be embedded in the MOV instructions, which is still beneficial.",
      "parentUuid": "d0c9d9d4_f86f93f8",
      "range": {
        "startLine": 2477,
        "startChar": 26,
        "endLine": 2477,
        "endChar": 85
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0583970_7d195cc9",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2477,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-07T17:16:10Z",
      "side": 1,
      "message": "It can be beneficial due to register pressure. But it\u0027s otherwise likely to be detrimental as it can change a branch-less code to branching code.",
      "parentUuid": "15adf5a3_c9adbeaa",
      "range": {
        "startLine": 2477,
        "startChar": 26,
        "endLine": 2477,
        "endChar": 85
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91471d25_82dbab44",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2477,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-08T17:12:08Z",
      "side": 1,
      "message": "Oh, I see, we were looking at this from different angles. Compared to the current backend (without my changes), it can\u0027t be detrimental because branchless code is never generated, but it might not be optimal.",
      "parentUuid": "a0583970_7d195cc9",
      "range": {
        "startLine": 2477,
        "startChar": 26,
        "endLine": 2477,
        "endChar": 85
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0852e73_04f15540",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2488,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "I\u0027m not convinced that this is a good thing but if you prefer it this way, I\u0027m willing to submit it.",
      "range": {
        "startLine": 2487,
        "startChar": 0,
        "endLine": 2488,
        "endChar": 80
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17492f0b_6e9bc214",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2488,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T15:26:34Z",
      "side": 1,
      "message": "Do you refer just to the input potentially being a constant, or also to the output? What possible problems do you see?\n\nFYI, the intention is to embed constants as much as possible (and not just in the branchless code path).",
      "parentUuid": "e0852e73_04f15540",
      "range": {
        "startLine": 2487,
        "startChar": 0,
        "endLine": 2488,
        "endChar": 80
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94bec003_6dbb29be",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2488,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-07T17:16:10Z",
      "side": 1,
      "message": "There are some subtle trade-offs here. Unlike commutative operations, such as HAdd, we do not normalize HSelect to have the constant input in the second input (\"true value\"), so there is value in embedding the first input\u0027s value if constant. However, it\u0027s a bit odd if both inputs are constant and it may be better to let the register allocator put one of them in a register (maybe it\u0027s already in a register for some other instruction). And then there\u0027s the same question as above about turning branch-less code to branching code.",
      "parentUuid": "17492f0b_6e9bc214",
      "range": {
        "startLine": 2487,
        "startChar": 0,
        "endLine": 2488,
        "endChar": 80
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a68c411a_45a4038c",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2488,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-08T17:12:08Z",
      "side": 1,
      "message": "Yes, there are some subtle trade-offs. Ignoring the branching code issue for a moment, my understanding is that if we have two constant inputs, both of them encodable as immediates (and assuming integers to simplify the discussion), and if we tell the register allocator to put one of them in a register, then there are two options:\n1. The allocator does not reuse the input register for the output - in that case the HSelect visitor will generate a move from a register to a register, a test, and a conditional move (or a branch and an unconditional move). When there is a second constant input instead, the operations will be the same, except that we avoid some data dependencies.\n2. The allocator reuses the input register (since we have kNoOutputOverlap), in which case there are two more options:\n2.1. There are further users of the constant - which implies that the register allocator has made a copy, but, again, making the copy is equivalent to having a second constant input, except that it introduces extra data dependencies.\n2.2. There are no further users of the constant - as far as I can see, the code will be equivalent (modulo data dependencies), except that if there is one user right before the HSelect that is unable to reuse the input register as output (if there is one user unable to do that followed by another one that is, then there is no issue) because it has kOutputOverlap, for example, then there will be an avoidable move (materializing the constant a second time). It is worth mentioning that AFAIK arithmetic and bitwise operations (which seem to be a major consumer of constants) do not have kOutputOverlap.\nSo, unless I am making a mistake somewhere, in most cases the code will be equivalent, but having a second constant reduces data dependencies. In one case, however, there will be an increase in code size. Unfortunately, I don\u0027t know the probability of that pathological case, but so far I have been assuming that it is rare enough.",
      "parentUuid": "94bec003_6dbb29be",
      "range": {
        "startLine": 2487,
        "startChar": 0,
        "endLine": 2488,
        "endChar": 80
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7695be8d_df08a2f9",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2593,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "Maybe \"if (select_end.IsLinked()) { ... }\". (Because of the GetFinalLabel() optimization, select_end may be unused.)",
      "range": {
        "startLine": 2593,
        "startChar": 2,
        "endLine": 2593,
        "endChar": 23
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "872fcd94_d2c1212a",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2593,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-02T15:10:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7695be8d_df08a2f9",
      "range": {
        "startLine": 2593,
        "startChar": 2,
        "endLine": 2593,
        "endChar": 23
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fae9541a_db56d284",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 674,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "Line too long, break before \"2L\".",
      "range": {
        "startLine": 674,
        "startChar": 54,
        "endLine": 674,
        "endChar": 56
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2da6b13b_56bf8e44",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 674,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-02T15:10:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fae9541a_db56d284",
      "range": {
        "startLine": 674,
        "startChar": 54,
        "endLine": 674,
        "endChar": 56
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63e50a55_704c9109",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 676,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-03-01T15:04:54Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 676,
        "startChar": 54,
        "endLine": 676,
        "endChar": 56
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84fc4c99_675477a2",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 676,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-02T15:10:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63e50a55_704c9109",
      "range": {
        "startLine": 676,
        "startChar": 54,
        "endLine": 676,
        "endChar": 56
      },
      "revId": "c1807d10967a3218ce6888891176052593634520",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}