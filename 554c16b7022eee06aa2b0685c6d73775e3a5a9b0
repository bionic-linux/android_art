{
  "comments": [
    {
      "key": {
        "uuid": "317066f4_221abd48",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 651,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-11-22T00:59:52Z",
      "side": 1,
      "message": "Should this be part of the inliner optimization list, instead? In fact, should the inliner optimization list be reordered to first run sharpening and then intrinsic recognition?\n\n(Same in optimizations1, I guess?)",
      "range": {
        "startLine": 650,
        "startChar": 4,
        "endLine": 651,
        "endChar": 94
      },
      "revId": "554c16b7022eee06aa2b0685c6d73775e3a5a9b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd499d4e_a6738648",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 651,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-11-22T01:02:20Z",
      "side": 1,
      "message": "(Maybe detail in the commit message how the invoke-virtuals come to be. Is that inline-cache fallback code? Or non-recursively inlineable calls?)",
      "parentUuid": "317066f4_221abd48",
      "range": {
        "startLine": 650,
        "startChar": 4,
        "endLine": 651,
        "endChar": 94
      },
      "revId": "554c16b7022eee06aa2b0685c6d73775e3a5a9b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a4dab15_2b57740e",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 651,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-22T10:35:56Z",
      "side": 1,
      "message": "Maybe the Sharpening and IntrinsicsRecognizer should be simple helper classes with static functions instead of actual passes? Then the HInstructionBuilder and HInliner can use them directly.\n\nSee also HSharpening::ComputeLoadClassKind() that\u0027s already a static function.",
      "parentUuid": "cd499d4e_a6738648",
      "range": {
        "startLine": 650,
        "startChar": 4,
        "endLine": 651,
        "endChar": 94
      },
      "revId": "554c16b7022eee06aa2b0685c6d73775e3a5a9b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c832d353_8125791d",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 651,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-11-22T18:30:56Z",
      "side": 1,
      "message": "I remember I previously saw inline cache changes invoke-interface CharSequence.charAt() into String.charAt() and inlines the code instead of using intrinsic. Not clear if you are seeing the same. Maybe inliner should try intrinsic first as vmarko pointed out since if the inlining succeeds, we lose track of the call and intrinsic pass won\u0027t help.",
      "parentUuid": "2a4dab15_2b57740e",
      "range": {
        "startLine": 650,
        "startChar": 4,
        "endLine": 651,
        "endChar": 94
      },
      "revId": "554c16b7022eee06aa2b0685c6d73775e3a5a9b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}