{
  "comments": [
    {
      "key": {
        "uuid": "9d85a05b_4596ca02",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-02-17T06:21:00Z",
      "side": 1,
      "message": "ifdef __linux__?",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d8fa87c_1bb7be20",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-02-17T17:29:23Z",
      "side": 1,
      "message": "I wanted it to be consistent with the check below, which is for __APPLE__.",
      "parentUuid": "9d85a05b_4596ca02",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d8fa87c_fbcafa92",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1090553
      },
      "writtenOn": "2016-02-17T17:14:51Z",
      "side": 1,
      "message": "I\u0027m a bit puzzled by this comment.  Sharing a slot between multiple ART runtime instances sounds entirely sensible, but sharing a slot between multiple kernel threads is possibly dangerous is some other library allocates a slot on just one thread.  If you can use __thread here, it would be slightly safer.  Admittedly, this is unlikely to matter in practice.",
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d8fa87c_7874d00f",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-02-17T06:21:00Z",
      "side": 1,
      "message": "note that you\u0027ve set this to 0 (unlike bionic\u0027s 1). not sure whether that\u0027s intentional.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 31
      },
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d85a05b_e0bd6ce1",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1090553
      },
      "writtenOn": "2016-02-17T17:14:51Z",
      "side": 1,
      "message": "What is the actual intended size of the data structure pointed to by the descriptor?  If you want to have an unlimited size (which, if you port to 64-bit, you\u0027ll have no choice about), set limit_in_pages to 1 and limit to 0xFFFFF.  If you want to clamp it to, say, sizeof(Thread), then doing that is fine, too.\n\n(If you port to 64-bit, just use arch_prctl(ARCH_SET_GS, ...) and be done with it.)",
      "parentUuid": "5d8fa87c_7874d00f",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 31
      },
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d8fa87c_7bdfea51",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-02-17T17:29:23Z",
      "side": 1,
      "message": "Yeah, I can clamp it to the Thread size.\n\n(For x86-64, see the corresponding thread_x86_64.cc, where we exactly use ARCH_SET_GS :-) ).",
      "parentUuid": "9d85a05b_e0bd6ce1",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 31
      },
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd255844_7c9eed2d",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-02-17T06:21:00Z",
      "side": 1,
      "message": "comment that you don\u0027t need a lock because you know this happens while there\u0027s still only one thread?",
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd7ab832_344ad126",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1090553
      },
      "writtenOn": "2016-02-17T17:14:51Z",
      "side": 1,
      "message": "If gdt_entry_number were __thread, then this would be a nonissue.",
      "parentUuid": "dd255844_7c9eed2d",
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d76744b_75c8571f",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-02-17T06:21:00Z",
      "side": 1,
      "message": "is it too late for me to be reviewing code, or is there a subtle reason why L100-L104 isn\u0027t just the single line\n\n  gdt_entry.entry_number \u003d gdt_entry_number;\n\n?",
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d76744b_78228e8c",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-02-17T17:29:23Z",
      "side": 1,
      "message": "It\u0027s semantically equivalent. I just like to be expressive about the -1 literal as an input to the syscall (\u0027cause I hate missing inline documentation, I don\u0027t like to have to look up magic values).\n\nIf you strongly prefer the simpler code (which I, btw, would hope to be output by the compiler), I\u0027ll change.",
      "parentUuid": "3d76744b_75c8571f",
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d71b053_074e8a66",
        "filename": "runtime/arch/x86/thread_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-02-17T17:32:39Z",
      "side": 1,
      "message": "how about, as long as you\u0027re not freeing this anyway, moving the static from global scope to here. that addresses the __APPLE__ oddity, reduces the scope, and lets you put the documentation here, where it\u0027s more needed.",
      "parentUuid": "3d76744b_78228e8c",
      "revId": "b81157b6fbaa9f67a554277b20bf280f50516b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}