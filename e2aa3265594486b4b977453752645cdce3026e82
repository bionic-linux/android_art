{
  "comments": [
    {
      "key": {
        "uuid": "19337ad8_c4cb52db",
        "filename": "runtime/base/stringpiece.h",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-22T17:48:53Z",
      "side": 1,
      "message": "Why not just \n\n   return strncmp(data(), rhs.data(), std::min(size(), rhs.size())\n\n(which is very similar to what operator\u003d\u003d already does).",
      "revId": "e2aa3265594486b4b977453752645cdce3026e82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3942fe30_9f18c318",
        "filename": "runtime/base/stringpiece.h",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-22T18:06:52Z",
      "side": 1,
      "message": "strncmp has to check for null characters, its probably slower.",
      "parentUuid": "19337ad8_c4cb52db",
      "revId": "e2aa3265594486b4b977453752645cdce3026e82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79739694_f8180dbe",
        "filename": "runtime/base/stringpiece.h",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-22T18:10:46Z",
      "side": 1,
      "message": "That looks like ignoring the tail and stopping on embedded zeros (we want \"x\\0y\" \u003c \"x\\0z\").",
      "parentUuid": "19337ad8_c4cb52db",
      "revId": "e2aa3265594486b4b977453752645cdce3026e82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3942fe30_df2c0b69",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 580,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-22T17:48:53Z",
      "side": 1,
      "message": "This can overflow, please fix\n\n   size_t mid \u003d low + ((high - low) / 2);\n\nhttp://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html",
      "revId": "e2aa3265594486b4b977453752645cdce3026e82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "369ccd29_9bd6eb24",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 580,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-22T18:06:52Z",
      "side": 1,
      "message": "It actually cant, consider that sizeof(ArtField) \u003e 4 bytes. Therefore on 4GB ram, you can have at most 1B of them which wont cause overflow.",
      "parentUuid": "3942fe30_df2c0b69",
      "revId": "e2aa3265594486b4b977453752645cdce3026e82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "369ccd29_5b1b83ba",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 580,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-22T18:10:17Z",
      "side": 1,
      "message": "Well if that\u0027s the case then maybe it wouldn\u0027t hurt to add a DCHECK?\n\nThat being said why not just write more secure code up front?",
      "parentUuid": "369ccd29_9bd6eb24",
      "revId": "e2aa3265594486b4b977453752645cdce3026e82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}