{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b45db508_4eebe123",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-07-12T08:47:25Z",
      "side": 1,
      "message": "Will, could you PTAL at the comment to verify my understanding.\n\nNicolas, PTAL. Thanks!",
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29d0d836_27324fc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-07-13T12:54:36Z",
      "side": 1,
      "message": "Nicolas, could you take a look at this workaround till I figure out a proper solution for this. Thanks!",
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b51077d_97b439fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-07-13T13:34:09Z",
      "side": 1,
      "message": "Santiago, PTAL. Thanks!",
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d5d0b2d_3c1a625b",
        "filename": "runtime/trace.cc",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1572468
      },
      "writtenOn": "2023-07-13T09:58:09Z",
      "side": 1,
      "message": "For the 64-bit kernel, I think the access should then be emulated by the kernel in response to a trap configured due to a CPU erratum. Are you seeing a SIGILL instead?",
      "range": {
        "startLine": 96,
        "startChar": 85,
        "endLine": 97,
        "endChar": 78
      },
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b21ed77_571236bc",
        "filename": "runtime/trace.cc",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-07-13T10:34:29Z",
      "side": 1,
      "message": "Thanks Will! Yes, I am seeing a SIGILL. I verified that the kernel is 64-bit. The kernel on the device is:\n\nLinux localhost 4.14.113-24823774 #1 SMP PREEMPT Fri Dec 2 17:21:58 KST 2022 aarch64\n\nI am trying to run a simple c code to make sure SIGILL is coming from the timestamp counter and not something else but couldn\u0027t so far. On the local devices I have it seems to be working fine. I just got access to the lab device, I will update this once I have verified this.",
      "parentUuid": "8d5d0b2d_3c1a625b",
      "range": {
        "startLine": 96,
        "startChar": 85,
        "endLine": 97,
        "endChar": 78
      },
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03905521_05d920a0",
        "filename": "runtime/trace.cc",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1572468
      },
      "writtenOn": "2023-07-13T14:31:43Z",
      "side": 1,
      "message": "Oh, how irritating! The upstream kernel should handle the trap, but perhaps there are vendor modifications which defeat that logic on the device you are using.\n\nI think your workaround makes sense, it\u0027s just a pity that the behaviour of one device drives down the performance for everybody. Ho-hum.",
      "parentUuid": "7b21ed77_571236bc",
      "range": {
        "startLine": 96,
        "startChar": 85,
        "endLine": 97,
        "endChar": 78
      },
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52d0ce06_4bf889ac",
        "filename": "runtime/trace.cc",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-07-12T08:47:25Z",
      "side": 1,
      "message": "Will, could you please take a look at the comment if my understanding is correct.",
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c7a691e_ad8855ab",
        "filename": "runtime/trace.cc",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-07-12T08:47:25Z",
      "side": 1,
      "message": "I still left the code in JITed code to read timestamp counter, but we won\u0027t take that path because I am turning off is_fast_trace here. I kept it this way so it would be easy to cherrypick but happy to remove the JIT code support in this CL too.",
      "revId": "ba7bb16718c42cfaf95d54ef2a6f0045af383126",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}