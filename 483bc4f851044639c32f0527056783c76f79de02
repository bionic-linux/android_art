{
  "comments": [
    {
      "key": {
        "uuid": "383666c8_4fd22147",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 1236,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-07-20T22:46:24Z",
      "side": 1,
      "message": "This seems surprisingly permissive.\n\nIf I have tmp1 \u003d x; tmp2 \u003d v; tmp3 \u003d x;\n\nwhere only v is volatile, is this enough to prevent the last load from reusing tmp1?",
      "range": {
        "startLine": 1236,
        "startChar": 10,
        "endLine": 1236,
        "endChar": 20
      },
      "revId": "483bc4f851044639c32f0527056783c76f79de02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "185442e3_d932671d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 1236,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-20T23:10:09Z",
      "side": 1,
      "message": "It suffices for the cases where side effects is used (only potential write-read dependences)\n\nSince a volatile read basically invalidates the \"cache\", we know that any prior write has a potential dependence with anything after at or after the volatile read. Likewise, since a volatile write flushes the \"cache\", we know that any subsequent read may depend on anything at or before that write.\n\nIf the fact that others may start using this in the wrong way worries you, I am happy to make this an All() instead in both cases. It won\u0027t have a very adverse affect.",
      "parentUuid": "383666c8_4fd22147",
      "range": {
        "startLine": 1236,
        "startChar": 10,
        "endLine": 1236,
        "endChar": 20
      },
      "revId": "483bc4f851044639c32f0527056783c76f79de02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d0ec228_d78c1cc0",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 1236,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-20T23:41:43Z",
      "side": 1,
      "message": "Actually you convinced me already :-)\n\nFor example\n\nfor (i ..) {\n      a[i] \u003d mVolatile;\n      b[i] \u003d mNormal\n}\n\nshould not lift the mNormal out of the loop (which would be done with a \"does mNormal depend on anything in the loop\" query), since it could break the happens-before from another thread the writes mNormal and then mVolatile, to the read of of mVolatile and then read of mNormal",
      "parentUuid": "185442e3_d932671d",
      "range": {
        "startLine": 1236,
        "startChar": 10,
        "endLine": 1236,
        "endChar": 20
      },
      "revId": "483bc4f851044639c32f0527056783c76f79de02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78429e31_eeb67f47",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 4277,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-07-20T22:46:24Z",
      "side": 1,
      "message": "This handles monitor entry/exit?",
      "range": {
        "startLine": 4277,
        "startChar": 10,
        "endLine": 4277,
        "endChar": 29
      },
      "revId": "483bc4f851044639c32f0527056783c76f79de02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "185442e3_394a9378",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 4277,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-20T23:11:25Z",
      "side": 1,
      "message": "monitor operations are handled by the MonitorOperation instruction",
      "parentUuid": "78429e31_eeb67f47",
      "range": {
        "startLine": 4277,
        "startChar": 10,
        "endLine": 4277,
        "endChar": 29
      },
      "revId": "483bc4f851044639c32f0527056783c76f79de02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}