{
  "comments": [
    {
      "key": {
        "uuid": "593f80b5_3025a898",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-07-10T09:07:47Z",
      "side": 1,
      "message": "Please handle here cu_-\u003etarget64 case:\n... Thread::ThreadSuspendTriggerOffset\u003c8\u003e ...\nIs rs_rAX still applicable here for 64-bit?..",
      "revId": "da51fb287153ed36e895ef22c5a50ecb82ac9fa4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "395d6c32_2add3f7f",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-07-10T09:11:43Z",
      "side": 1,
      "message": "What\u0027s the issue with rs_rAX? The reason for using the test operation on Intel rather than a load is to avoid needing a temporary register to clobber. The result is not used, we\u0027re relying on the load for a segfault.",
      "parentUuid": "593f80b5_3025a898",
      "revId": "da51fb287153ed36e895ef22c5a50ecb82ac9fa4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "593f80b5_50eeecd7",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-07-10T09:25:01Z",
      "side": 1,
      "message": "Well, sorry, it seems that there is no issue with rAX here. Only Thread::ThreadSuspendTriggerOffset\u003c8\u003e change needed (it is one of cross compilation issues)",
      "parentUuid": "395d6c32_2add3f7f",
      "revId": "da51fb287153ed36e895ef22c5a50ecb82ac9fa4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f97cb4a5_f53858e9",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-07-10T21:00:49Z",
      "side": 1,
      "message": "Surely this is a 32 bit mov.  My understanding is that ...Offset\u003c4\u003e is correct for that.  Am I wrong?",
      "parentUuid": "593f80b5_50eeecd7",
      "revId": "da51fb287153ed36e895ef22c5a50ecb82ac9fa4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1980a8c3_561b5465",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-07-10T21:06:00Z",
      "side": 1,
      "message": "It is a 32 bit move, but the offset that it is to move from is in the 64 bit thread area.  I think Dmitry wants:\nNewLIR2(kX86Mov32RT, rs_rAX.GetReg(),  cu_-\u003etarget64 ? Thread::ThreadSuspendTriggerOffset\u003c8\u003e().Int32Value() : Thread::ThreadSuspendTriggerOffset\u003c4\u003e().Int32Value());",
      "parentUuid": "f97cb4a5_f53858e9",
      "revId": "da51fb287153ed36e895ef22c5a50ecb82ac9fa4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "396bacde_97c00411",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-07-10T21:11:06Z",
      "side": 1,
      "message": "I see.  However, x86_64 is not supported yet for implicit checks.  I guess there\u0027s no harm in thinking ahead to save some pain when we do implement it.",
      "parentUuid": "1980a8c3_561b5465",
      "revId": "da51fb287153ed36e895ef22c5a50ecb82ac9fa4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}