{
  "comments": [
    {
      "key": {
        "uuid": "bf215b5c_af7d9379",
        "filename": "runtime/openjdkjvmti/events.cc",
        "patchSetId": 1
      },
      "lineNbr": 303,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-04-28T22:13:06Z",
      "side": 1,
      "message": "static",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 303,
        "endChar": 4
      },
      "revId": "3e6286a7c84e1d97bf51094cba4a50e060d04609",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2650178c_a33322c7",
        "filename": "runtime/openjdkjvmti/events.cc",
        "patchSetId": 1
      },
      "lineNbr": 356,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-04-28T22:13:06Z",
      "side": 1,
      "message": "Technically it\u0027s the only C++-defined way to get a value out of JValue... :-)",
      "range": {
        "startLine": 356,
        "startChar": 8,
        "endLine": 356,
        "endChar": 80
      },
      "revId": "3e6286a7c84e1d97bf51094cba4a50e060d04609",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eec59eca_b1506697",
        "filename": "runtime/openjdkjvmti/events.cc",
        "patchSetId": 1
      },
      "lineNbr": 369,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-04-28T22:13:06Z",
      "side": 1,
      "message": "Only coincidentally correct. Use JNI_FALSE.",
      "range": {
        "startLine": 369,
        "startChar": 40,
        "endLine": 369,
        "endChar": 68
      },
      "revId": "3e6286a7c84e1d97bf51094cba4a50e060d04609",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "073243fe_5d1c1743",
        "filename": "runtime/openjdkjvmti/events.cc",
        "patchSetId": 1
      },
      "lineNbr": 405,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-04-28T22:13:06Z",
      "side": 1,
      "message": "Use a helper method to reduce code duplication.",
      "range": {
        "startLine": 393,
        "startChar": 6,
        "endLine": 405,
        "endChar": 25
      },
      "revId": "3e6286a7c84e1d97bf51094cba4a50e060d04609",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb6cae72_9e5c3240",
        "filename": "test/988-method-trace/expected.txt",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-04-28T21:41:59Z",
      "side": 1,
      "message": "Would prefer not to hardcode so much libcore internals (and 1000 lines is *a lot*)",
      "revId": "3e6286a7c84e1d97bf51094cba4a50e060d04609",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e70005d1_55975a7b",
        "filename": "test/988-method-trace/expected.txt",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-04-28T21:58:36Z",
      "side": 1,
      "message": "yeah I might just get rid of the memoizing one. That is \u003e2/3 of it I think.",
      "parentUuid": "cb6cae72_9e5c3240",
      "revId": "3e6286a7c84e1d97bf51094cba4a50e060d04609",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}