{
  "comments": [
    {
      "key": {
        "uuid": "37f5e2fe_de99a508",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-09T10:57:52Z",
      "side": 1,
      "message": "just static without polluting  SchedulingGraph?",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 22
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b70ab2d0_ba6951da",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2017-01-10T10:23:19Z",
      "side": 1,
      "message": "Sure. I\u0027ll do it in the next patch.",
      "parentUuid": "37f5e2fe_de99a508",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 22
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57ec163c_3f588771",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 175,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-09T10:57:52Z",
      "side": 1,
      "message": "instructions",
      "range": {
        "startLine": 175,
        "startChar": 12,
        "endLine": 175,
        "endChar": 24
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b59a43_50eaac2e",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 176,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-09T10:57:52Z",
      "side": 1,
      "message": "is a",
      "range": {
        "startLine": 176,
        "startChar": 74,
        "endLine": 176,
        "endChar": 77
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "171b7e2a_d51cdc50",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 194,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-09T10:57:52Z",
      "side": 1,
      "message": "instructions",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 24
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77003ab3_b82cb9c8",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 195,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-09T10:57:52Z",
      "side": 1,
      "message": "is a",
      "range": {
        "startLine": 195,
        "startChar": 73,
        "endLine": 195,
        "endChar": 75
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37f5e2fe_1e630d36",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 278,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2017-01-09T10:49:07Z",
      "side": 1,
      "message": "this change is for cpplint.py\u0027s complain: const or *",
      "range": {
        "startLine": 278,
        "startChar": 4,
        "endLine": 278,
        "endChar": 33
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37f5e2fe_7e7051f5",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 331,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2017-01-09T10:49:07Z",
      "side": 1,
      "message": "this change is for cpplint.py\u0027s complain: const or *",
      "range": {
        "startLine": 318,
        "startChar": 0,
        "endLine": 331,
        "endChar": 51
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b59a43_b017985e",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 552,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-09T10:57:52Z",
      "side": 1,
      "message": "I cannot parse this comment.",
      "range": {
        "startLine": 550,
        "startChar": 0,
        "endLine": 552,
        "endChar": 71
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37f5e2fe_bea499f1",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 552,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2017-01-10T10:23:19Z",
      "side": 1,
      "message": "I was trying to add comment to explain why we don\u0027t schedule blocks that are part of try-catch. How about following comment, does it make things clear?\n\n // Do not schedule blocks that are part of try-catch.\n // Because scheduler cannot see if catch block has assumptions on the instruction order in\n // the try block. In following example, if we enable scheduler for the try block,\n // MulitiplyAccumulate may be scheduled before DivZeroCheck, \n // which can result in an incorrect value in the catch block.\n //   try {\n //     a \u003d a/b;    // DivZeroCheck\n //                 // Div\n //     c \u003d c*d+e;  // MulitiplyAccumulate\n //   } catch {System.out.print(c); }",
      "parentUuid": "77b59a43_b017985e",
      "range": {
        "startLine": 550,
        "startChar": 0,
        "endLine": 552,
        "endChar": 71
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7e1d242_e21cc650",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 24
      },
      "lineNbr": 552,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-10T10:47:04Z",
      "side": 1,
      "message": "Yes, thanks!",
      "parentUuid": "37f5e2fe_bea499f1",
      "range": {
        "startLine": 550,
        "startChar": 0,
        "endLine": 552,
        "endChar": 71
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37f5e2fe_9e76fdf4",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 24
      },
      "lineNbr": 379,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2017-01-09T10:49:07Z",
      "side": 1,
      "message": "Fix cpplint.py\u0027s complain: use rand_r() instead of rand().",
      "range": {
        "startLine": 379,
        "startChar": 20,
        "endLine": 379,
        "endChar": 26
      },
      "revId": "e1fb7360b37f616b92694003cdc67d180cc77faa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}