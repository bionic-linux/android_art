{
  "comments": [
    {
      "key": {
        "uuid": "c22eb46e_943c8963",
        "filename": "openjdkjvmti/OpenjdkJvmTi.cc",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-21T18:41:56Z",
      "side": 1,
      "message": "whether",
      "range": {
        "startLine": 86,
        "startChar": 11,
        "endLine": 86,
        "endChar": 18
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5da31461_3a68a956",
        "filename": "openjdkjvmti/OpenjdkJvmTi.cc",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-01-02T20:24:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c22eb46e_943c8963",
      "range": {
        "startLine": 86,
        "startChar": 11,
        "endLine": 86,
        "endChar": 18
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d761a7e8_32d313ba",
        "filename": "openjdkjvmti/OpenjdkJvmTi.cc",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-21T18:41:56Z",
      "side": 1,
      "message": "IsFullJvmtiAvailable",
      "range": {
        "startLine": 87,
        "startChar": 12,
        "endLine": 87,
        "endChar": 32
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "086c3b41_5fc12a83",
        "filename": "openjdkjvmti/OpenjdkJvmTi.cc",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-01-02T20:24:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d761a7e8_32d313ba",
      "range": {
        "startLine": 87,
        "startChar": 12,
        "endLine": 87,
        "endChar": 32
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7837c8a_675d6b08",
        "filename": "openjdkjvmti/deopt_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-21T18:41:56Z",
      "side": 1,
      "message": "Will that hit developers? When you debug an app on studio, do you have control of what flags get passed to dalvikvm an dex2oat?",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 109,
        "endChar": 80
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2e83000_45de9025",
        "filename": "openjdkjvmti/deopt_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-01-02T14:12:15Z",
      "side": 1,
      "message": "This will only be sent to developers if they use wrap.sh or some similar mechanism to start on a non-zygote-forked process (see the GetPhase() \u003d\u003d JVMTI_PHASE_ONLOAD)",
      "parentUuid": "f7837c8a_675d6b08",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 109,
        "endChar": 80
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51104afc_b23f5aa6",
        "filename": "runtime/oat_file.h",
        "patchSetId": 7
      },
      "lineNbr": 134,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-21T18:41:56Z",
      "side": 1,
      "message": "its",
      "range": {
        "startLine": 134,
        "startChar": 85,
        "endLine": 134,
        "endChar": 89
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65038fbd_75f96e24",
        "filename": "runtime/oat_file.h",
        "patchSetId": 7
      },
      "lineNbr": 134,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-01-02T20:24:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51104afc_b23f5aa6",
      "range": {
        "startLine": 134,
        "startChar": 85,
        "endLine": 134,
        "endChar": 89
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bb7fe3b_c7cd92f8",
        "filename": "runtime/oat_file.h",
        "patchSetId": 7
      },
      "lineNbr": 138,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-21T18:41:56Z",
      "side": 1,
      "message": "I\u0027d much prefer an all or nothing approach (as it is now). Why are native methods so important now?",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 138,
        "endChar": 26
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62eb2744_9c6f3343",
        "filename": "runtime/oat_file.h",
        "patchSetId": 7
      },
      "lineNbr": 138,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-01-02T14:12:15Z",
      "side": 1,
      "message": "The current approach actually also leaves JNI transitions alone so this isn\u0027t actually changing anything too big there.\n\nThis is needed because the StackWalker gets extremely confused if a native method is changed to generic-jni without the jit enabled (if jit is enabled it all works oddly). I\u0027m not entirely sure why this is to be honest. I think it might be due to the jit-compiled jni transitions cl but I\u0027m not fully sure.",
      "parentUuid": "2bb7fe3b_c7cd92f8",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 138,
        "endChar": 26
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1890393_870aef82",
        "filename": "runtime/oat_file.h",
        "patchSetId": 7
      },
      "lineNbr": 138,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-05T15:12:19Z",
      "side": 1,
      "message": "Yeah, the StackVisitor::WalkStack() is messy for native methods. If we rewrite the GenericJNI to create a frame with the same size as the compiled stub, we can simplify the stack walk and avoid the restriction. But for the moment I think this is the best we can do.",
      "parentUuid": "62eb2744_9c6f3343",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 138,
        "endChar": 26
      },
      "revId": "fb881cdfe990d61a62193b3823fbd4dc490d0457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}