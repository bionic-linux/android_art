{
  "comments": [
    {
      "key": {
        "uuid": "05f952fe_bba827b9",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 834,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-12-17T20:08:38Z",
      "side": 1,
      "message": "How about adding a DHECK here that read barriers are disabled?",
      "range": {
        "startLine": 828,
        "startChar": 0,
        "endLine": 834,
        "endChar": 70
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a6aafd7_37f818a1",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 834,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-12-18T11:52:30Z",
      "side": 1,
      "message": "Good idea; done in PS3.",
      "parentUuid": "05f952fe_bba827b9",
      "range": {
        "startLine": 828,
        "startChar": 0,
        "endLine": 834,
        "endChar": 70
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0512320e_6739daaa",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 871,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-12-17T19:01:27Z",
      "side": 1,
      "message": "This intrinsic wasn\u0027t disabled before in the read barrier case? I thought it was. Or we didn\u0027t exercise this code before because we always enabled heap poisoning as well in the tests?",
      "range": {
        "startLine": 871,
        "startChar": 6,
        "endLine": 871,
        "endChar": 30
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a6aafd7_17f394c7",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 871,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-12-18T11:52:30Z",
      "side": 1,
      "message": "So far, this intrinsic was indeed disabled only when heap poisoning was turned on.  And yes, AFAIK, because we always test with heap poisoning + read barriers turned on on our build \u0026 test infrastructures, we were not exercising this code path on the concurrent collection test configurations.\n\nMaybe we could consider turning off heap poisoning or adding new configurations with just read barriers turned on.  What do you think?",
      "parentUuid": "0512320e_6739daaa",
      "range": {
        "startLine": 871,
        "startChar": 6,
        "endLine": 871,
        "endChar": 30
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "651dae1a_16581c04",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1038,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-12-17T20:08:38Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1034,
        "startChar": 0,
        "endLine": 1038,
        "endChar": 6
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a76bfc5_d3dc543b",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1038,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-12-18T11:52:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "651dae1a_16581c04",
      "range": {
        "startLine": 1034,
        "startChar": 0,
        "endLine": 1038,
        "endChar": 6
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5aefef8_b22a006f",
        "filename": "compiler/optimizing/intrinsics_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1302,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-12-17T20:08:38Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1302,
        "startChar": 21,
        "endLine": 1302,
        "endChar": 25
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a6aafd7_d7dc3c3b",
        "filename": "compiler/optimizing/intrinsics_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1302,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-12-18T11:52:30Z",
      "side": 1,
      "message": "This comment is just a reminder for when read barriers are implement on MIPS64.\n\nI don\u0027t think a DCHECK is needed here, as we do not disable the UnsafeCASObject intrinsic on MIPS64 when read barriers are enabled ­– because read barriers are not implemented yet on MIPS64 (and therefore we use the interpreter in that configuration).\n\nI extended the comment to make it more clear.",
      "parentUuid": "e5aefef8_b22a006f",
      "range": {
        "startLine": 1302,
        "startChar": 21,
        "endLine": 1302,
        "endChar": 25
      },
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05f952fe_9bad6bc9",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 2153,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-12-17T20:08:38Z",
      "side": 1,
      "message": "ditto",
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a76bfc5_f3d95048",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 2153,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-12-18T11:52:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05f952fe_9bad6bc9",
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05f952fe_fba2afd6",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2217,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-12-17T20:08:38Z",
      "side": 1,
      "message": "ditto",
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a7b83af_7415288e",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2217,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-12-18T11:52:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05f952fe_fba2afd6",
      "revId": "a66dca117fbf25196f3862c4c34b0db7dda9716b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}