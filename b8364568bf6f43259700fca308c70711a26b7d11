{
  "comments": [
    {
      "key": {
        "uuid": "e041af40_3588b484",
        "filename": "libartbase/base/bit_struct.h",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2020-01-27T22:30:09Z",
      "side": 1,
      "message": "nit: IIUC, this can be replaced/enhanced with a static_cast to make sure BitStructSizeof(ConversionStorageType) \u003e\u003d kBitWidth ?",
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0b9a29a_c5116b30",
        "filename": "libartbase/base/bit_struct.h",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-01-28T14:31:29Z",
      "side": 1,
      "message": "I don\u0027t understand what you\u0027re saying.\n\n(The dchecked_integral_cast\u003c\u003e() is a static_cast\u003c\u003e() with extra checks that we\u0027re not losing relevant bits.)",
      "parentUuid": "e041af40_3588b484",
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f108e01_94caaa54",
        "filename": "libartbase/base/bit_struct.h",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2020-01-27T22:30:09Z",
      "side": 1,
      "message": "nit: If you move the accesses to data members of ConversionValueStorage into detail::ConversionValueStorage, we can get rid of ConversionStorageType and possibly simplify the code here\n\n\n  template \u003ctypename T\u003e\n  struct ConversionValueStorage {\n      ....\n    static constexpr StorageType ToUnderlyingStorage(T value) {\n       write into value_, read from pod_.val_\n    }\n\n    static constexpr T FromUnderlyingStorage(StorageType value) {\n       write to pod_.val_, read from value_\n    }\n  }\n\nnit: it might also be worth renaming ConversionValueStorage to something without the word \u0027Storage\u0027 to further disambiguate it from \u0027StorageType\u0027 in BitStructField (e.g. ConvertBetweenStructAndPrimitive)",
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e7585e_ca483b41",
        "filename": "libartbase/base/bit_struct.h",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-01-28T14:31:29Z",
      "side": 1,
      "message": "Added helpers and renamed ConversionValueStorage. But I still need the ConversionType if I do not want to use `auto` and in this situation I strongly prefer being explicit.",
      "parentUuid": "8f108e01_94caaa54",
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcac9a1c_0f39de48",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2020-01-27T22:30:09Z",
      "side": 1,
      "message": "Do you think maybe this needs to be wrapped in a struct too? Upon re-reading the standard, I can only seem to find the definition of a \"common initial sequence\" w.r.t to structs, not w.r.t to primitives.\n\nhttps://timsong-cpp.github.io/cppwp/n4659/class.union#1\n\n\u003e One special guarantee is made in order to simplify the use of unions: If a standard-layout union contains several standard-layout structs that share a common initial sequence, and if a non-static data member of an object of this standard-layout union type is active and is one of the standard-layout structs, it is permitted to inspect the common initial sequence of any of the standard-layout struct members;",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 77,
        "endChar": 11
      },
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b6927a8_0e4b3b56",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-01-28T14:31:29Z",
      "side": 1,
      "message": "I would expect integral types to be standard layout. If they are not, the static assert below will trigger and we\u0027ll deal with it when upgrading to C++20.",
      "parentUuid": "fcac9a1c_0f39de48",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 77,
        "endChar": 11
      },
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4631b58b_b09d235c",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2020-01-28T21:54:57Z",
      "side": 1,
      "message": "Yes, integral types are *standard layout*.\n\nhttps://timsong-cpp.github.io/cppwp/n4659/basic.types#def:standard-layout_types\n\nThe standard says \u0027standard layout *structs*\u0027, I believe this makes it more specific than the broad jurisdiction of all \u0027standard layout\u0027?\n\nhttps://timsong-cpp.github.io/cppwp/n4659/class#8\n\n\u003e A standard-layout struct is a standard-layout class defined with the class-key struct or the class-key class. A standard-layout union is a standard-layout class defined with the class-key union.\n\nPrimitives are not defined with the class-key struct/class, so it seems like they can\u0027t fall under this definition?",
      "parentUuid": "5b6927a8_0e4b3b56",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 77,
        "endChar": 11
      },
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edcd565f_17221ae0",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-01-29T09:43:15Z",
      "side": 1,
      "message": "File a DR against the C++ standard?",
      "parentUuid": "4631b58b_b09d235c",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 77,
        "endChar": 11
      },
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e64f437_03152ebd",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2020-01-29T21:28:10Z",
      "side": 1,
      "message": "What is a DR? Do you agree with the above interpretation? Without this last change it is still UB.",
      "parentUuid": "edcd565f_17221ae0",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 77,
        "endChar": 11
      },
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01ff2dba_7faf267e",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-01-30T04:36:14Z",
      "side": 1,
      "message": "DR is defect report (https://isocpp.org/std/submit-issue).\n\nhttps://timsong-cpp.github.io/cppwp/n4659/class.union#2\n\n\u003e Each non-static data member is allocated as if it were the sole member of a struct.\n\nThis may be sufficient to treat it as a struct, such that they could simplify wording elsewhere. Of course, it might be better for them to make it perfectly clear for future readers of the standard. In any case, I think that the code as written will be sufficient for now (and will either continue to work in C++20 or break more obviously due to the `static_assert`).",
      "parentUuid": "6e64f437_03152ebd",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 77,
        "endChar": 11
      },
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcd338ed_18576ee1",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-01-30T11:03:11Z",
      "side": 1,
      "message": "I\u0027ve wrapped it anyway in PS5.",
      "parentUuid": "01ff2dba_7faf267e",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 77,
        "endChar": 11
      },
      "revId": "b8364568bf6f43259700fca308c70711a26b7d11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}