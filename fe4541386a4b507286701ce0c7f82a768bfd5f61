{
  "comments": [
    {
      "key": {
        "uuid": "6a4e2058_c8a8bc02",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-16T20:14:51Z",
      "side": 1,
      "message": "Any bug number?",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f0aac14_f81151e2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "I suppose I can add the moving fields / methods bug.\nThe compaction bug may not be related to any existing open bug reports.",
      "parentUuid": "6a4e2058_c8a8bc02",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_8be06ee4",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-16T20:14:51Z",
      "side": 1,
      "message": "I think this should drop \u0027\u0026\u0027 as we pass it as a value.",
      "range": {
        "startLine": 424,
        "startChar": 66,
        "endLine": 424,
        "endChar": 78
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f0aac14_5846fde0",
        "filename": "oatdump/oatdump.cc",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Can I do it in another CL? This one is already fairly large.",
      "parentUuid": "6a4e2058_8be06ee4",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_d4413cc8",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-16T17:51:04Z",
      "side": 1,
      "message": "I don\u0027t think this is WAI, you want to resolve when there is no dex-cache hit. oh.. you\u0027re just abstracting the dex-cache lookup. Make this private. Similarly for GetResolvedField. Prefer LookupResolvedMethod, LookupResolvedField to make it more distinct from ResolveMethod.",
      "range": {
        "startLine": 117,
        "startChar": 18,
        "endLine": 117,
        "endChar": 19
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8840e2_21c3ee3f",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "This is called from FindMethodFromCode to avoid needing to have a handle scope unless we go slow path, is it OK to leave it public?",
      "parentUuid": "6a4e2058_d4413cc8",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fffad42e_e4240e19",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-16T17:51:04Z",
      "side": 1,
      "message": "on the else side of this we should assert an exception is pending.",
      "range": {
        "startLine": 139,
        "startChar": 2,
        "endLine": 139,
        "endChar": 3
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f48f879_f841354c",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fffad42e_e4240e19",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_cbba765a",
        "filename": "runtime/entrypoints/interpreter/interpreter_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-16T20:14:51Z",
      "side": 1,
      "message": "Does this assume that the method in shadow_frame gets updated when GC happens (along the line of my CL)? I guess the above TODO covers this.",
      "range": {
        "startLine": 48,
        "startChar": 6,
        "endLine": 48,
        "endChar": 41
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8840e2_2101ae9d",
        "filename": "runtime/entrypoints/interpreter/interpreter_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "A main goal is to use Handles inside of the method helpers in the near future.",
      "parentUuid": "6a4e2058_cbba765a",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_349fe80a",
        "filename": "runtime/entrypoints/portable/portable_trampoline_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 320,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-16T17:51:04Z",
      "side": 1,
      "message": "s/thread/self/",
      "range": {
        "startLine": 320,
        "startChar": 63,
        "endLine": 320,
        "endChar": 69
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f5ee42c_3e74610f",
        "filename": "runtime/entrypoints/portable/portable_trampoline_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 320,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a4e2058_349fe80a",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_b436786c",
        "filename": "runtime/entrypoints/portable/portable_trampoline_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-16T17:51:04Z",
      "side": 1,
      "message": "self",
      "range": {
        "startLine": 382,
        "startChar": 35,
        "endLine": 382,
        "endChar": 52
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f3f0cb7_ba384ee8",
        "filename": "runtime/entrypoints/portable/portable_trampoline_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a4e2058_b436786c",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dff7d045_66c484d7",
        "filename": "runtime/handle.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-16T20:14:51Z",
      "side": 1,
      "message": "There\u0027s a slight chance that someone could accidentally call Assign() with a non-null value on a NullHandle and call ToJObject() to get the internal NullHandle::null_ref_ pointer as a jobject. \n\nIs there a way to prevent this without extra performance cost?\n\nMaybe, if we get rid of Assign() and use operator\u003d or the copy constructor instead, would it work?",
      "range": {
        "startLine": 57,
        "startChar": 17,
        "endLine": 57,
        "endChar": 53
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f48f879_b8c29d14",
        "filename": "runtime/handle.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "I am thinking of adding a super class to Handle called ConstHandle which doesn\u0027t have an Assign function. We can pass that one around to avoid these problems.",
      "parentUuid": "dff7d045_66c484d7",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_ab6c52d5",
        "filename": "runtime/handle_scope.h",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-16T20:14:51Z",
      "side": 1,
      "message": "Is this equivalent to just \"Get()\"?",
      "range": {
        "startLine": 154,
        "startChar": 12,
        "endLine": 154,
        "endChar": 26
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f48f879_d8e799ba",
        "filename": "runtime/handle_scope.h",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Yes, but when I had tried to do just Get() it didn\u0027t compile.",
      "parentUuid": "6a4e2058_ab6c52d5",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dff7d045_26155c0f",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-16T20:14:51Z",
      "side": 1,
      "message": "I think we\u0027d want to pass in shadow_frame.GetMethodAddress() (or call shadow_frame.SetMethod() later) if the reason to pass in ArtMethod** is that it may get moved (in the future when we move methods)?",
      "range": {
        "startLine": 109,
        "startChar": 30,
        "endLine": 109,
        "endChar": 39
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fffad42e_b2e9a8cf",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-16T20:14:51Z",
      "side": 1,
      "message": "If we pass in \u0026receiver (a pointer to a local variable), we would want to update the one in shadow_frame by doing something like:\n\nshadow_frame.SetVRegReference(vregC, receiver)\n\nafter the FindMethodFromCode call?",
      "range": {
        "startLine": 109,
        "startChar": 19,
        "endLine": 109,
        "endChar": 27
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8840e2_419872ef",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "The shadow frame should already be pushed, so we don\u0027t need to update it.",
      "parentUuid": "fffad42e_b2e9a8cf",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8840e2_019a6ae6",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Shadow frame should be pushed, so the roots will get updated.",
      "parentUuid": "dff7d045_26155c0f",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_141104b7",
        "filename": "runtime/stack.h",
        "patchSetId": 2
      },
      "lineNbr": 401,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-16T17:51:04Z",
      "side": 1,
      "message": "as with hiroshi\u0027s change, just lose the ifdef",
      "range": {
        "startLine": 401,
        "startChar": 8,
        "endLine": 401,
        "endChar": 10
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f48f879_1879b107",
        "filename": "runtime/stack.h",
        "patchSetId": 2
      },
      "lineNbr": 401,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a4e2058_141104b7",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_b4091891",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1967,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-16T17:51:04Z",
      "side": 1,
      "message": "I\u0027m\n\nwhy are we hitting this?",
      "range": {
        "startLine": 1967,
        "startChar": 15,
        "endLine": 1967,
        "endChar": 18
      },
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8840e2_e1350613",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1967,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-21T23:50:02Z",
      "side": 1,
      "message": "Deleted.",
      "parentUuid": "6a4e2058_b4091891",
      "revId": "fe4541386a4b507286701ce0c7f82a768bfd5f61",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}