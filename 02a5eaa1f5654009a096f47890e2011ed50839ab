{
  "comments": [
    {
      "key": {
        "uuid": "52ee8b42_6abf3cf9",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 833,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-08T09:31:58Z",
      "side": 1,
      "message": "Probably a helper in ArtMethod would be beneficial here, eg:\nArtMethod::IsDeadReferenceSafe().",
      "range": {
        "startLine": 833,
        "startChar": 2,
        "endLine": 833,
        "endChar": 74
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4f99574_1da308f9",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 838,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-08T09:31:58Z",
      "side": 1,
      "message": "We should find a way to cache this, or track it when building the graph. Inlining is already pretty expensive :(",
      "range": {
        "startLine": 838,
        "startChar": 23,
        "endLine": 838,
        "endChar": 53
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6cc30db_d8ab71a0",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-08T09:31:58Z",
      "side": 1,
      "message": "This has the potential to be very expensive (doing annotation lookups on all field/method accesses).",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4834180_e04fba0a",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2019-01-09T06:31:26Z",
      "side": 1,
      "message": "I should probably first compute whether the class has any ReachabilitySensitive accesses, which should be rare. Do you think the is important for the initial version? This code should only be called if there is a DeadReferenceSafe annotation, which will initially be extremely rare.\n\nMy mental model was that this may increase cost by percents rather than integral multiples when there is a DeadReferenceSafe annotation. Is that likely to be wrong?",
      "parentUuid": "f6cc30db_d8ab71a0",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "525b5ac6_9f4b3b4b",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-09T09:25:44Z",
      "side": 1,
      "message": "Should it be a (javac? dx?) compile time error if a method has DeadReferenceSafe though accesses a ReachabilitySensitive field?",
      "parentUuid": "f4834180_e04fba0a",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}