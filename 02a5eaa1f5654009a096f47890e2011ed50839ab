{
  "comments": [
    {
      "key": {
        "uuid": "52ee8b42_6abf3cf9",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 833,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-08T09:31:58Z",
      "side": 1,
      "message": "Probably a helper in ArtMethod would be beneficial here, eg:\nArtMethod::IsDeadReferenceSafe().",
      "range": {
        "startLine": 833,
        "startChar": 2,
        "endLine": 833,
        "endChar": 74
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4f99574_1da308f9",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 838,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-08T09:31:58Z",
      "side": 1,
      "message": "We should find a way to cache this, or track it when building the graph. Inlining is already pretty expensive :(",
      "range": {
        "startLine": 838,
        "startChar": 23,
        "endLine": 838,
        "endChar": 53
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6cc30db_d8ab71a0",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-08T09:31:58Z",
      "side": 1,
      "message": "This has the potential to be very expensive (doing annotation lookups on all field/method accesses).",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4834180_e04fba0a",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2019-01-09T06:31:26Z",
      "side": 1,
      "message": "I should probably first compute whether the class has any ReachabilitySensitive accesses, which should be rare. Do you think the is important for the initial version? This code should only be called if there is a DeadReferenceSafe annotation, which will initially be extremely rare.\n\nMy mental model was that this may increase cost by percents rather than integral multiples when there is a DeadReferenceSafe annotation. Is that likely to be wrong?",
      "parentUuid": "f6cc30db_d8ab71a0",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "525b5ac6_9f4b3b4b",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-09T09:25:44Z",
      "side": 1,
      "message": "Should it be a (javac? dx?) compile time error if a method has DeadReferenceSafe though accesses a ReachabilitySensitive field?",
      "parentUuid": "f4834180_e04fba0a",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "413ecc48_1025e4ec",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2019-01-09T19:36:46Z",
      "side": 1,
      "message": "I should better document the overall plan here. The intent is to (for now, temporarily in Q) annotate classes with @DeadReferenceSafe, if we have determined that they are sufficiently annotated with @ReachabilitySensitive/reachabilityFence() that it is OK to perform dead reference elimination. The CL is intended to be a cheap no-op on any class that is not annotated with @DeadReferenceSafe.\n\n@ReachabilitySensitive mostly makes sense only in the presence of @DeadReferenceSafe. And the intent is to eventually (in R?) make @DeadReferenceSafe the default, at which point all your performance concerns definitely matter. (I say \"mostly\", because the d8/r8 situation is a bit different. But for ART this is completely true.)\n\nThe only benefit in Q is that we can get experience, and if we get another \"leaks due to a retained dead reference bug\", we\u0027ll have an easy fix available. And it probably makes sense to enable it in a few selective cases, where we know that we have loops containing blocking calls that are prone to this.\n\nI now copied you on the CL that defines @DeadReferenceSafe. But I\u0027m getting convinced that this isn\u0027t quite right, in that it should also implicitly apply to inner classes. Even my tests are a bit painful to write otherwise.",
      "parentUuid": "525b5ac6_9f4b3b4b",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7b085bd_81573888",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-01-11T11:35:27Z",
      "side": 1,
      "message": "I see, thanks for explaining the context.\n\nIn the first version, could we make it a compile time / verification error to have a DeadReferenceSafe class use a @ReachabilitySensitive access?",
      "parentUuid": "413ecc48_1025e4ec",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "579ad2c9_dfdfc069",
        "filename": "runtime/dex/dex_file_annotations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1344,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2019-01-11T18:47:47Z",
      "side": 1,
      "message": "That\u0027s not really consistent with my usage model. I want to be able to add @ReachabilitySensitive declarations in the right places, and then add @DeadReferenceSafe to indicate that I\u0027m done and the class is now sufficiently annotated to be safely compiled with dead reference elimination. This gives us a way to incrementally annotate e.g. frameworks classes until we\u0027re ready to throw the switch and make @DeadReferenceSafe the default.\n\nI attempted to clarify this in go/aog/859850. (Tobias again has a bunch of good comments, but I think we\u0027re converging.)\n\nThe (currently still non-functional) test case I just added this CL is an illustration.",
      "parentUuid": "c7b085bd_81573888",
      "range": {
        "startLine": 1344,
        "startChar": 5,
        "endLine": 1344,
        "endChar": 35
      },
      "revId": "02a5eaa1f5654009a096f47890e2011ed50839ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}