{
  "comments": [
    {
      "key": {
        "uuid": "7f627c43_9840a34f",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1965,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-11T13:54:15Z",
      "side": 1,
      "message": "There is very little common code here between the reference and primitive cases, so this could be split into two methods.",
      "range": {
        "startLine": 1965,
        "startChar": 12,
        "endLine": 1965,
        "endChar": 19
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c754bbf_5d51c02a",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1965,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-12T16:16:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f627c43_9840a34f",
      "range": {
        "startLine": 1965,
        "startChar": 12,
        "endLine": 1965,
        "endChar": 19
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23604b54_f3a51646",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1969,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T13:14:19Z",
      "side": 1,
      "message": "These are always the last 2 arguments, so we could get them from the `invoke-\u003eGetLocations()`.",
      "range": {
        "startLine": 1968,
        "startChar": 19,
        "endLine": 1969,
        "endChar": 38
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f939a05_23b35db8",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1969,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-11T13:48:05Z",
      "side": 1,
      "message": "I agree that these should be the last 2 arguments but what if the method is called wrong? In VarHandle.compareAndSet we make sure in locations builder that this does not happen, but for UnsafeCAS I am not sure if this is ensured.",
      "parentUuid": "23604b54_f3a51646",
      "range": {
        "startLine": 1968,
        "startChar": 19,
        "endLine": 1969,
        "endChar": 38
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e548cb4b_c6e3c1b8",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1969,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T14:04:26Z",
      "side": 1,
      "message": "ACK. OK keep as is.",
      "parentUuid": "6f939a05_23b35db8",
      "range": {
        "startLine": 1968,
        "startChar": 19,
        "endLine": 1969,
        "endChar": 38
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "384afe25_b200dd6a",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1984,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-11T13:54:15Z",
      "side": 1,
      "message": "We\u0027ll fail later on anyway if this is the case, perhaps better to check !temp.Equals(temp2) which might be silently undetected.",
      "range": {
        "startLine": 1983,
        "startChar": 0,
        "endLine": 1984,
        "endChar": 44
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a43acb8_afcff86f",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1984,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-12T16:16:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "384afe25_b200dd6a",
      "range": {
        "startLine": 1983,
        "startChar": 0,
        "endLine": 1984,
        "endChar": 44
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5c18df6_34af396f",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 2056,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T13:14:19Z",
      "side": 1,
      "message": "We should not see Uint8 here.",
      "range": {
        "startLine": 2056,
        "startChar": 6,
        "endLine": 2056,
        "endChar": 33
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "110eabd9_ab50f4cc",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 2056,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-12T16:16:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5c18df6_34af396f",
      "range": {
        "startLine": 2056,
        "startChar": 6,
        "endLine": 2056,
        "endChar": 33
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "546f82dc_d1d6f797",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 2056,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-12T17:52:19Z",
      "side": 1,
      "message": "I removed the uint8 and then I saw this in HandleFieldSet:\nhttps://cs.android.com/android/platform/superproject/+/master:art/compiler/optimizing/code_generator_x86.cc;l\u003d5743\n\nAre you sure this is unnecessary?",
      "parentUuid": "110eabd9_ab50f4cc",
      "range": {
        "startLine": 2056,
        "startChar": 6,
        "endLine": 2056,
        "endChar": 33
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d53c1ed2_b2b3cb61",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 2056,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-14T08:13:51Z",
      "side": 1,
      "message": "In this specific case these values come directly from Java primitive types. \u0027byte\u0027 maps to kInt8, there is no corresponding 8-bit unsigned type:\n\nhttps://cs.android.com/android/platform/superproject/+/master:art/libdexfile/dex/primitive.h;l\u003d39;bpv\u003d1;bpt\u003d1?q\u003dPrimitive::Type\n\nkUint8 is introduced by the compiler during some analysis, e.g. InstructionSimplifierVisitor::VisitAnd().",
      "parentUuid": "546f82dc_d1d6f797",
      "range": {
        "startLine": 2056,
        "startChar": 6,
        "endLine": 2056,
        "endChar": 33
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a8f6e28_c0dc5bcc",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3608,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T13:14:19Z",
      "side": 1,
      "message": "We should explicitly place output in EAX. CMPXCHG clobbers EAX on failure and the register allocator is unaware of that, so it could try to reuse the clobbered `expected_value` for another instruction afterwards.\n\nWith output in EAX we can also avoid unpoisoning `expected` in GenCAS(), see my comment there about your removal of an important code comment. And we shall not clobber the `varhandle_object` which shall benefit code that uses the same VarHandle repeatedly.",
      "range": {
        "startLine": 3608,
        "startChar": 30,
        "endLine": 3608,
        "endChar": 48
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aedaf20_c39167c5",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3608,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-11T13:48:05Z",
      "side": 1,
      "message": "If we place output in EAX then we can\u0027t use the out register for the field offset, as we currently do because both the offset and expected value are needed at the same time. We will need another register and we don\u0027t have one, all 6 are used. We can\u0027t place the offset in one of the two temps because both are modified by MarkGCCard and GenerateReferenceLoadWithBakerReadBarrier.\n\nMaybe it would be better to go back to the solution were the expected value was put on the stack and moved in EAX. Then I think we are able to put out in EAX",
      "parentUuid": "9a8f6e28_c0dc5bcc",
      "range": {
        "startLine": 3608,
        "startChar": 30,
        "endLine": 3608,
        "endChar": 48
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2b2dafa_b9c21e0e",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3608,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-11T14:04:26Z",
      "side": 1,
      "message": "Let\u0027s count the core registers we need:\n\n  EAX \u003d out \u003d expected (temp for float)\n  new_value (temp for float)\n  varhandle\n  object (temp for static field)\n  index\n\nAnd we need 2 temps for references. As far as I know, we have 7 available registers: EAX, EBX, ECX, EDX, ESI, EDI, EBP. Is any of them blocked for some reason?",
      "parentUuid": "2aedaf20_c39167c5",
      "range": {
        "startLine": 3608,
        "startChar": 30,
        "endLine": 3608,
        "endChar": 48
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87e3efc7_482e93e6",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3608,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-12T16:16:38Z",
      "side": 1,
      "message": "I didn\u0027t know EBP is an option. I fixed the allocation.",
      "parentUuid": "b2b2dafa_b9c21e0e",
      "range": {
        "startLine": 3608,
        "startChar": 30,
        "endLine": 3608,
        "endChar": 48
      },
      "revId": "935e266bfd65a4258e58f9b7f2df979b914b7e56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}