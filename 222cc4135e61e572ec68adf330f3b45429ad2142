{
  "comments": [
    {
      "key": {
        "uuid": "62d3e6eb_2603f4f9",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 422,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-09T13:53:27Z",
      "side": 1,
      "message": "We\u0027re trying to cut down on our dependencies. What are you using from this, and can you avoid it?",
      "range": {
        "startLine": 422,
        "startChar": 9,
        "endLine": 422,
        "endChar": 20
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e59a962b_41ca8d12",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 422,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-01-17T09:01:16Z",
      "side": 1,
      "message": "The capstone lib is the one that we use for doing the disassembling of the native functions.\nSo this lib is needed for this feature of binary analysis.",
      "parentUuid": "62d3e6eb_2603f4f9",
      "range": {
        "startLine": 422,
        "startChar": 9,
        "endLine": 422,
        "endChar": 20
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35331a3b_10610dc2",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 422,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-17T09:19:58Z",
      "side": 1,
      "message": "We already have a disassembly library, can we use that instead?",
      "parentUuid": "e59a962b_41ca8d12",
      "range": {
        "startLine": 422,
        "startChar": 9,
        "endLine": 422,
        "endChar": 20
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94376d8d_1b9f961b",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 422,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-03-05T10:22:09Z",
      "side": 1,
      "message": "Hi Nicolas,\n\nWe agree that art-disassembler also can be used for dumping the instructions.\nWe utilized the capstone as it was more of a disassembly engine for binary analysis and it includes iterative disassembly to get the related instruction specific details.Capstone is also available in the android stack.\n\nDo you see any advantage of art-disassembler over capstone to use with regards to instruction analysis as right now we see art-disassembler to being mostly used for dumping the opcodes and register information?",
      "parentUuid": "35331a3b_10610dc2",
      "range": {
        "startLine": 422,
        "startChar": 9,
        "endLine": 422,
        "endChar": 20
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6979cd45_ee7d7321",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 422,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-03-05T10:26:04Z",
      "side": 1,
      "message": "My main worry is the addition of a new library as dependency. With the work on being a mainline module, the library being available in the android stack is not relevant as that library is not guaranteed to be backwards compatible.",
      "parentUuid": "94376d8d_1b9f961b",
      "range": {
        "startLine": 422,
        "startChar": 9,
        "endLine": 422,
        "endChar": 20
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7205cdbc_59feac3c",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-09T13:53:27Z",
      "side": 1,
      "message": "Why do you need this?",
      "range": {
        "startLine": 440,
        "startChar": 9,
        "endLine": 440,
        "endChar": 18
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2296640c_343c9ac3",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-01-17T09:01:16Z",
      "side": 1,
      "message": "We have two options to set this auto fast jni flag set either via the runtime option or using the system  property option on the host. So for the system property related , we use the                                     property_get() function to check the flag in file \"runtime.cc\".This function is defined in the libcutils module.",
      "parentUuid": "7205cdbc_59feac3c",
      "range": {
        "startLine": 440,
        "startChar": 9,
        "endLine": 440,
        "endChar": 18
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "013f7f6e_028be8ab",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-17T09:19:58Z",
      "side": 1,
      "message": "I see. Please use android::Base::GetProperty instead.",
      "parentUuid": "2296640c_343c9ac3",
      "range": {
        "startLine": 440,
        "startChar": 9,
        "endLine": 440,
        "endChar": 18
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "543316ea_c35d4a72",
        "filename": "runtime/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-03-05T10:22:09Z",
      "side": 1,
      "message": "Have removed this dependency in the last patch uploaded.",
      "parentUuid": "013f7f6e_028be8ab",
      "range": {
        "startLine": 440,
        "startChar": 9,
        "endLine": 440,
        "endChar": 18
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d76ea07_3933572b",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 431,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-09T13:53:27Z",
      "side": 1,
      "message": "Add a comment why this means it\u0027s not going to be unregistered.",
      "range": {
        "startLine": 431,
        "startChar": 42,
        "endLine": 431,
        "endChar": 85
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "955fac6a_1c2249a9",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 431,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-01-17T09:01:16Z",
      "side": 1,
      "message": "We do the disassembling and the binary analysis during native method registration.We do not want to  do this analysis for methods being unregistered. Will add a comment as mentioned",
      "parentUuid": "9d76ea07_3933572b",
      "range": {
        "startLine": 431,
        "startChar": 42,
        "endLine": 431,
        "endChar": 85
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03ba2195_d2f2d524",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 576,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-09T13:53:27Z",
      "side": 1,
      "message": "not needed.",
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89ca83de_b0026059",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 846,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-09T13:53:27Z",
      "side": 1,
      "message": "not needed",
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7ed95cb_fe4c72ab",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 846,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-01-17T09:01:16Z",
      "side": 1,
      "message": "This is the runtime option that we have added to enable the feature. This was in relation to the previous review comment on this patch where a runtime option was needed to enable/diable this auto fast jni",
      "parentUuid": "89ca83de_b0026059",
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f254abec_d4716177",
        "filename": "runtime/runtime.cc",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-09T13:53:27Z",
      "side": 1,
      "message": "false by default.",
      "range": {
        "startLine": 298,
        "startChar": 24,
        "endLine": 298,
        "endChar": 28
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d517b36d_87cfef37",
        "filename": "runtime/runtime.cc",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-01-17T09:01:16Z",
      "side": 1,
      "message": "Ok we can change",
      "parentUuid": "f254abec_d4716177",
      "range": {
        "startLine": 298,
        "startChar": 24,
        "endLine": 298,
        "endChar": 28
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e586a8_14c4457b",
        "filename": "runtime/runtime.cc",
        "patchSetId": 4
      },
      "lineNbr": 1253,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-09T13:53:27Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 1253,
        "startChar": 0,
        "endLine": 1253,
        "endChar": 44
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80c3dad3_7b33df49",
        "filename": "runtime/runtime.cc",
        "patchSetId": 4
      },
      "lineNbr": 1253,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-01-17T09:01:16Z",
      "side": 1,
      "message": "In that case regardless of arm \u0026 x86 we will be making this call to fetch the runtime option by default. We can do that if that\u0027s okay to have this additional check at startup during runtime.",
      "parentUuid": "f2e586a8_14c4457b",
      "range": {
        "startLine": 1253,
        "startChar": 0,
        "endLine": 1253,
        "endChar": 44
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b23a499_71703d25",
        "filename": "runtime/runtime.cc",
        "patchSetId": 4
      },
      "lineNbr": 1253,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-17T09:19:58Z",
      "side": 1,
      "message": "Yes, that\u0027s OK.",
      "parentUuid": "80c3dad3_7b33df49",
      "range": {
        "startLine": 1253,
        "startChar": 0,
        "endLine": 1253,
        "endChar": 44
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb94c3e8_8d12090e",
        "filename": "runtime/runtime.cc",
        "patchSetId": 4
      },
      "lineNbr": 1253,
      "author": {
        "id": 1275029
      },
      "writtenOn": "2020-03-05T10:22:09Z",
      "side": 1,
      "message": "Have fixed this in the last patch uploaded to make the FastJni false by default",
      "parentUuid": "3b23a499_71703d25",
      "range": {
        "startLine": 1253,
        "startChar": 0,
        "endLine": 1253,
        "endChar": 44
      },
      "revId": "222cc4135e61e572ec68adf330f3b45429ad2142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}