{
  "comments": [
    {
      "key": {
        "uuid": "0904398a_3ab021dc",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-15T08:51:24Z",
      "side": 1,
      "message": "Why would the static analyzer warn about this? Did it look at all places last_instruction_ is set and shown that when calling AddInstruction it can be null?",
      "range": {
        "startLine": 971,
        "startChar": 4,
        "endLine": 971,
        "endChar": 43
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e83d1825_707e0f65",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-15T15:32:26Z",
      "side": 1,
      "message": "Pretty sure that the analyzer isn\u0027t doing full interprocedural analysis to understand that first_instruction_ !\u003d nullptr means last_instruction_ !\u003d nullptr.",
      "parentUuid": "0904398a_3ab021dc",
      "range": {
        "startLine": 971,
        "startChar": 4,
        "endLine": 971,
        "endChar": 43
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "930c4b6d_d2ccd6af",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-15T15:35:06Z",
      "side": 1,
      "message": "Of course, but then why is the analyzer complaining about that one access? It\u0027s just a field access that I\u0027m sure there\u0027s plenty others it cannot certify they\u0027re never null.",
      "parentUuid": "e83d1825_707e0f65",
      "range": {
        "startLine": 971,
        "startChar": 4,
        "endLine": 971,
        "endChar": 43
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b53da7c_2b495715",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-15T15:40:13Z",
      "side": 1,
      "message": "Don\u0027t know. You\u0027ll have to ask the analysis writers, then.\n\nThe other two syntactically similar points actually do a similar thing. The branch condition there is !IsEmpty (which, btw, probably should have been used in line 966 :-) ).",
      "parentUuid": "930c4b6d_d2ccd6af",
      "range": {
        "startLine": 971,
        "startChar": 4,
        "endLine": 971,
        "endChar": 43
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "880953e6_50ddc3a8",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-15T18:52:05Z",
      "side": 1,
      "message": "The complaint that I\u0027m looking at is caused by a call from HGraph::InsertConstant from nodes.cc.\n\nIn particular, we call entry_block_-\u003eGetLastInstruction(), which just returns last_instruction_. The analyzer assumes this is null, since we have a null check for it directly after the call.\n\nWe then flow into entry_block_-\u003eAddInstruction(...), and the analyzer assumes that first_instruction_ in AddInstruction can either be null or non-null.",
      "parentUuid": "8b53da7c_2b495715",
      "range": {
        "startLine": 971,
        "startChar": 4,
        "endLine": 971,
        "endChar": 43
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c62cafbf_dbb6f30e",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-23T09:36:28Z",
      "side": 1,
      "message": "Looks like the analyzer has an issue? Code in question is:\n\nHInstruction* gota \u003d entry_block_-\u003eGetLastInstruction();\nif (gota !\u003d nullptr \u0026\u0026 gota-\u003eIsGoto()) {\n   ...\n}\n\nWhy does the analyzer think gota is null? goto may not be null and not be a Goto.",
      "parentUuid": "880953e6_50ddc3a8",
      "range": {
        "startLine": 971,
        "startChar": 4,
        "endLine": 971,
        "endChar": 43
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "921b5b04_090c371e",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-23T18:13:17Z",
      "side": 1,
      "message": "\u003e Code in question is:\n\nI should\u0027ve been more clear; the code the analyzer gets upset with is below the block you mentioned:\n\n  if (insert_before \u003d\u003d nullptr) {\n    entry_block_-\u003eAddInstruction(constant);\n  }\n\n\u003e Why does the analyzer think gota is null?\n\nBecause there\u0027s a null check in the code you referenced, so the analyzer assumes `gota` may be null until it\u0027s next assigned. If `gota` happens to be null, `insert_before \u003d\u003d nullptr` is always true, so we always end up calling `entry_block_-\u003eAddInstruction(constant);`.\n\n...And AddInstruction is where the analyzer gets tripped up and assumes that `first_instruction_ !\u003d nullptr` is independent of whether `last_instruction_ !\u003d nullptr`. :)",
      "parentUuid": "c62cafbf_dbb6f30e",
      "range": {
        "startLine": 971,
        "startChar": 4,
        "endLine": 971,
        "endChar": 43
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "788c9869_a5c09d4b",
        "filename": "runtime/arch/arm64/context_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T16:54:06Z",
      "side": 1,
      "message": "What\u0027s the point of adding this? None of the methods are virtual?",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0afa1c54_bbce5411",
        "filename": "runtime/arch/arm64/context_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-15T18:52:05Z",
      "side": 1,
      "message": "Every virtual method in a base class is virtual in its derived class, whether it\u0027s marked virtual or not in the derived class: http://eel.is/c++draft/class.virtual#2 . Looks like the convention here is to mark them with OVERRIDE (e.g. Reset(), FillCalleeSaves()...).\n\nIn particular, the analyzer complained about the Reset call in the constructor \"not going to the most derived class\".\n\nPersonally, I\u0027m ambivalent about the usefulness of that warning, so if you all would rather have me filter it, I\u0027m happy to do so.\n\n(FWIW, even without the static analyzer, the virtual methods on `final` classes are more optimizer-friendly than non-`final` classes. Dunno how much it matters in this case, but if these classes are effectively-final anyway...)",
      "parentUuid": "788c9869_a5c09d4b",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900fe5d7_0a179136",
        "filename": "runtime/arch/arm64/context_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T22:08:38Z",
      "side": 1,
      "message": "Thanks, this is good to know. I was under the wrong impression that removing \u0027virtual\u0027 from a member function effectively made it final (or more accurately, the equivalent of the C# new keyword which lets one continue to extend but starting a new virtual chain).\n\nIt\u0027s true these classes are effectively final, but I don\u0027t know if we can trust the virtual analysis in the C++ compiler optimizer to be that great (it\u0027s not java after all), so it seems good to add these specifiers in here.",
      "parentUuid": "0afa1c54_bbce5411",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e2a0de3_7195ca7f",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T16:54:06Z",
      "side": 1,
      "message": "This seems utterly redundant, of course inserted will be true since it\u0027s first removed on 281. Why is this necessary?",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9493569_bc65fd41",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-15T17:59:39Z",
      "side": 1,
      "message": "Because the analyzer isn\u0027t smart enough to follow Remove, is my guess. I don\u0027t think it\u0027s interprocedural.",
      "parentUuid": "5e2a0de3_7195ca7f",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6648a516_5063f717",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T18:10:49Z",
      "side": 1,
      "message": "If the problem is that it\u0027s warning that the return value is ignored, perhaps we should explicitly ignore the return value.\n\nAnyway I\u0027d just like to understand this a little better to we can write code in the future that doesn\u0027t warn.",
      "parentUuid": "e9493569_bc65fd41",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b60aa598_d14eac4a",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-15T18:52:05Z",
      "side": 1,
      "message": "\u003e Why is this necessary?\n\nI can\u0027t say for sure; normally the analyzer gives me notes about why it thinks something happens, but I receive none here. That we\u0027re using virtual functions to compare and clone keys probably plays into it, but again, that\u0027s just a guess.\n\nSince this is a \"potential memory leak\" warning, the only other reasonable approach I\u0027ve been able to find is NOLINT\u0027ing the insert line, which I think is worse. \n\nHappy to add a comment explaining that this is the analyzer\u0027s fault when I come back with NDEBUG results.\n\n\u003e I don\u0027t think it\u0027s interprocedural\n\nIt\u0027s a little interprocedural, but I don\u0027t know what the limits are. I\u0027ve seen a number of complaints in foo() because bar(baz) ends up returning a certain value. (e.g. in my comment on the nodes.cc DCHECK :) )",
      "parentUuid": "6648a516_5063f717",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85afaa21_d6ed734b",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T22:08:38Z",
      "side": 1,
      "message": "Ok, I suppose if it\u0027s tracking lifetimes then key.Clone() could leak if the insert failed.\n\nClever analyzer, but not clever enough to see the remove.\n\nCan you add a \"DCHECK(inserted);  // ensure key.Clone() does not leak memory\" comment here so we don\u0027t have to wonder why this DCHECK is there?",
      "parentUuid": "b60aa598_d14eac4a",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9df157a0_d0628c74",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-16T00:52:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85afaa21_d6ed734b",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78130d4c_b7040659",
        "filename": "runtime/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-15T15:32:26Z",
      "side": 1,
      "message": "Please make this standalone with a very descriptive commit comment.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 56,
        "endChar": 51
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02b744cc_63cee811",
        "filename": "runtime/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T16:54:06Z",
      "side": 1,
      "message": "Or perhaps clang analyzer builds should always unset NDEBUG when building ART?",
      "parentUuid": "78130d4c_b7040659",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 56,
        "endChar": 51
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d13fae13_715419af",
        "filename": "runtime/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-15T18:52:05Z",
      "side": 1,
      "message": "Will give Igor\u0027s suggestion a shot and get back to you on this one. :)",
      "parentUuid": "02b744cc_63cee811",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 56,
        "endChar": 51
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcd2a6b7_b6d6cc48",
        "filename": "runtime/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-16T00:52:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d13fae13_715419af",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 56,
        "endChar": 51
      },
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ef6b063_10a59dcb",
        "filename": "runtime/jni_internal.cc",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T22:08:38Z",
      "side": 1,
      "message": "Can you please add a comment here so we don\u0027t forget why it\u0027s necessary?\n\n   // Also guards the returns from inside of the CHECK_NON_NULL_ARGUMENTs.",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a72cc11_fe629f22",
        "filename": "runtime/jni_internal.cc",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-16T00:52:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ef6b063_10a59dcb",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd661e2d_488fc0a0",
        "filename": "runtime/jni_internal.cc",
        "patchSetId": 1
      },
      "lineNbr": 628,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T16:54:06Z",
      "side": 1,
      "message": "I really like this abstraction. However it does change the logic of va_end to come after the return. Is that necessary for correctness or just a coincidence?",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89a6aa20_7af94e12",
        "filename": "runtime/jni_internal.cc",
        "patchSetId": 1
      },
      "lineNbr": 628,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-15T18:52:05Z",
      "side": 1,
      "message": "va_end coming after return isn\u0027t necessary for correctness. va_end being called when CHECK_NON_NULL_ARGUMENT `return`s is. :)",
      "parentUuid": "bd661e2d_488fc0a0",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f87a0b7c_08e2207f",
        "filename": "runtime/jni_internal.cc",
        "patchSetId": 1
      },
      "lineNbr": 628,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-15T22:08:38Z",
      "side": 1,
      "message": "Ah, yeah, we don\u0027t have that \"return if error\" pattern elsewhere so I forgot about it. Thanks.",
      "parentUuid": "89a6aa20_7af94e12",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5912aeb_b296d8a2",
        "filename": "runtime/jni_internal.cc",
        "patchSetId": 1
      },
      "lineNbr": 628,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-06-16T00:52:48Z",
      "side": 1,
      "message": "Yup, that tripped me up at first, too. :)",
      "parentUuid": "f87a0b7c_08e2207f",
      "revId": "43bbe02ff80b0b5d4f06def97721eac668ff2b3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}