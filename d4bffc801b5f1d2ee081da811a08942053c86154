{
  "comments": [
    {
      "key": {
        "uuid": "a3706250_ed456506",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 8
      },
      "lineNbr": 1562,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-04-07T15:56:09Z",
      "side": 1,
      "message": "Maybe move these assertions as a postcondition of art::LiveInterval::GetSiblingAt?",
      "range": {
        "startLine": 1561,
        "startChar": 0,
        "endLine": 1562,
        "endChar": 33
      },
      "revId": "d4bffc801b5f1d2ee081da811a08942053c86154",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "837fde20_2c8933bb",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 8
      },
      "lineNbr": 1562,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-04-07T17:32:14Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s a good place for it. If we change the return type to a pointer we might as well allow the use case of testing against nullptr to see if a sibling exists at that point.",
      "parentUuid": "a3706250_ed456506",
      "range": {
        "startLine": 1561,
        "startChar": 0,
        "endLine": 1562,
        "endChar": 33
      },
      "revId": "d4bffc801b5f1d2ee081da811a08942053c86154",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63a66a29_eeaf7fde",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 8
      },
      "lineNbr": 1562,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-04-09T14:49:19Z",
      "side": 1,
      "message": "Actually, I just noticed that art::LiveInterval::GetSiblingsAt already has this check as invariant in its while-loop, so it is fine.  Maybe it should be part of art::LiveInterval::GetSiblingsAt\u0027s documentation?\n\nFeel free to keep the DCHECKs in art::RegisterAllocator::ConnectSplitSiblings as well.",
      "parentUuid": "837fde20_2c8933bb",
      "range": {
        "startLine": 1561,
        "startChar": 0,
        "endLine": 1562,
        "endChar": 33
      },
      "revId": "d4bffc801b5f1d2ee081da811a08942053c86154",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50e84e65_855d4459",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 8
      },
      "lineNbr": 1562,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-04-13T11:24:04Z",
      "side": 1,
      "message": "I\u0027ve now removed the DCHECK from GetSiblingAt, so that it can return a nullptr if there isn\u0027t a sibling defined at the given position. That\u0027s what this algorithm originally permitted (even though i don\u0027t see a scenario when that could happen). Is that okay with you?",
      "parentUuid": "63a66a29_eeaf7fde",
      "range": {
        "startLine": 1561,
        "startChar": 0,
        "endLine": 1562,
        "endChar": 33
      },
      "revId": "d4bffc801b5f1d2ee081da811a08942053c86154",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90a1e660_564114f7",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 8
      },
      "lineNbr": 1562,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-04-17T15:42:04Z",
      "side": 1,
      "message": "Yes, sounds good.",
      "parentUuid": "50e84e65_855d4459",
      "range": {
        "startLine": 1561,
        "startChar": 0,
        "endLine": 1562,
        "endChar": 33
      },
      "revId": "d4bffc801b5f1d2ee081da811a08942053c86154",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}