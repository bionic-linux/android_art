{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b4a439e5_7f4693d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-17T16:20:06Z",
      "side": 1,
      "message": "Halfway through the .cc. Should finish tomorrow.",
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f78e2d3_ece05488",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2569,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-17T16:20:06Z",
      "side": 1,
      "message": "Where did this restriction come from? Can\u0027t find it in the `7.9. Vector Load/Store Whole Register Instructions` section of the manual",
      "range": {
        "startLine": 2569,
        "startChar": 2,
        "endLine": 2569,
        "endChar": 47
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72a6691f_5dbcb03a",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2569,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-17T16:33:46Z",
      "side": 1,
      "message": "That section contains the following: \"The encoded number of registers must be a power of 2 and the vector register numbers must be aligned as with a vector register group, otherwise the instruction encoding is reserved.\"",
      "parentUuid": "9f78e2d3_ece05488",
      "range": {
        "startLine": 2569,
        "startChar": 2,
        "endLine": 2569,
        "endChar": 47
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25f4fd27_55f13c30",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2569,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T15:52:25Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "72a6691f_5dbcb03a",
      "range": {
        "startLine": 2569,
        "startChar": 2,
        "endLine": 2569,
        "endChar": 47
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d28c82b4_85b1f229",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2684,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T15:52:25Z",
      "side": 1,
      "message": "Is there a table (or one place in particular) where they mention whether the immediate can be negative or not? In the instruction\u0027s sections sometimes it is not clear whether the immediate can be negative or not (besides common sense).\n\nFor example `vxor` explicitly mentions `-1` as an input, but that could have been `31` (`0x1F` or however) instead and everything would work as normal.",
      "range": {
        "startLine": 2684,
        "startChar": 60,
        "endLine": 2684,
        "endChar": 72
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a77333ff_09f13a6b",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2684,
      "author": {
        "id": 3190653
      },
      "writtenOn": "2024-01-18T16:34:57Z",
      "side": 1,
      "message": "Probably yes\nIn spec this `vadd.vi vd, vs2, imm, vm   # vector-immediate` usually stands for singed imm in contrast to i.e. `vsll.vi vd, vs2, uimm, vm   # vector-immediate` where immediate is unsinged.",
      "parentUuid": "d28c82b4_85b1f229",
      "range": {
        "startLine": 2684,
        "startChar": 60,
        "endLine": 2684,
        "endChar": 72
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1810e885_fd1f3c49",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2684,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-18T16:57:20Z",
      "side": 1,
      "message": "Section 10.1. contains:\n\n    1. For integer operations, the scalar can be a 5-bit immediate, imm[4:0],\n       encoded in the rs1 field. The value is sign-extended to SEW bits, unless\n       otherwise specified.\n\nThe unsigned immediate is essentially used only by vsetivli, many shift instructions, vrgather and vslide{up,down}.",
      "parentUuid": "d28c82b4_85b1f229",
      "range": {
        "startLine": 2684,
        "startChar": 60,
        "endLine": 2684,
        "endChar": 72
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "012ef369_d6515dfe",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2684,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T17:00:08Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a77333ff_09f13a6b",
      "range": {
        "startLine": 2684,
        "startChar": 60,
        "endLine": 2684,
        "endChar": 72
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1c55e0d_d8523a0a",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2821,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T15:52:25Z",
      "side": 1,
      "message": "nit: this can be two separate DCHECKs. The benefit is that if/when the DCHECK is triggered, then we know which one of the two comparisons was the faulty one.\n\nSimilar comment for other `DCHECK(vd !\u003d vs1 \u0026\u0026 vd !\u003d vs2);`",
      "range": {
        "startLine": 2821,
        "startChar": 2,
        "endLine": 2821,
        "endChar": 33
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cf36457_a0cb36a7",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2821,
      "author": {
        "id": 3190653
      },
      "writtenOn": "2024-01-18T16:34:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1c55e0d_d8523a0a",
      "range": {
        "startLine": 2821,
        "startChar": 2,
        "endLine": 2821,
        "endChar": 33
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61896e6b_9460d5c7",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2956,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T15:52:25Z",
      "side": 1,
      "message": "Not sure why some lines have comments like `/* 0 */` or `/* 1 */`. I\u0027d favor of removing them for consistency (unless there\u0027s a reason I am missing)",
      "range": {
        "startLine": 2956,
        "startChar": 58,
        "endLine": 2956,
        "endChar": 65
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f9c9e60_a660b6e5",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2956,
      "author": {
        "id": 3190653
      },
      "writtenOn": "2024-01-18T16:34:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61896e6b_9460d5c7",
      "range": {
        "startLine": 2956,
        "startChar": 58,
        "endLine": 2956,
        "endChar": 65
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfd76c76_a5b1f5fc",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 3078,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T15:52:25Z",
      "side": 1,
      "message": "Add the same DCHECK for `VMslt_vi` and `VMsge_vi` below?",
      "range": {
        "startLine": 3078,
        "startChar": 0,
        "endLine": 3078,
        "endChar": 70
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43493b15_82b497d1",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 3078,
      "author": {
        "id": 3190653
      },
      "writtenOn": "2024-01-18T16:34:57Z",
      "side": 1,
      "message": "This check is required for unsigned compare because of \n`an effective vmsltu.vi range of 1 to 16 (Note, vmsltu.vi with immediate 0 is not useful as it is always false).`\n\nhttps://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#118-vector-integer-compare-instructions\n\nMore general check about imm width is made in `VMsleu_vi` (See `EncodeInt5(..)`)",
      "parentUuid": "bfd76c76_a5b1f5fc",
      "range": {
        "startLine": 3078,
        "startChar": 0,
        "endLine": 3078,
        "endChar": 70
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bbeeb16_413d268a",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 3078,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-18T16:57:20Z",
      "side": 1,
      "message": "Those signed comparisons support the full adjusted range [-15, 16] with a very natural meaning. Unsigned comparisons are different - see also my comments in PS6.",
      "parentUuid": "bfd76c76_a5b1f5fc",
      "range": {
        "startLine": 3078,
        "startChar": 0,
        "endLine": 3078,
        "endChar": 70
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7139a93a_e8383883",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 3078,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T17:00:08Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "43493b15_82b497d1",
      "range": {
        "startLine": 3078,
        "startChar": 0,
        "endLine": 3078,
        "endChar": 70
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6392f1a4_1714b139",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 10
      },
      "lineNbr": 4054,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-01-18T15:52:25Z",
      "side": 1,
      "message": "Just FYI but the manual says `This instruction is encoded as a masked\ninstruction (vm\u003d1).` which is inconsistent as masked instructions are `vm\u003d0`. It looks like a typo in the manual (it should read `unmasked`) as later it says `The vfmv.v.f instruction shares the encoding with the vfmerge.vfm instruction, but with vm\u003d1 and vs2\u003dv0.`.",
      "range": {
        "startLine": 4054,
        "startChar": 48,
        "endLine": 4054,
        "endChar": 61
      },
      "revId": "4cd527f1b4cd784efba68281715a52633418f8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}