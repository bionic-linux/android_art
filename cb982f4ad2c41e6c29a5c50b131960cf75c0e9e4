{
  "comments": [
    {
      "key": {
        "uuid": "71c75982_9969bbf2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-31T22:33:14Z",
      "side": 1,
      "message": "I guess a key idea here is to combine checking two fields, the status and the access flag (for finalizability) into one check.",
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1e00515_8cd3a7fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-08-31T23:14:02Z",
      "side": 1,
      "message": "Actually into 0 checks since we already need the size check.",
      "parentUuid": "71c75982_9969bbf2",
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51a175a9_e48d4236",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-31T21:44:20Z",
      "side": 1,
      "message": "Where is that number coming from?",
      "range": {
        "startLine": 21,
        "startChar": 35,
        "endLine": 22,
        "endChar": 20
      },
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71c75982_999c1b5f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-08-31T22:16:03Z",
      "side": 1,
      "message": "Good question, the 10k was loosely based off of svelte device. On Angler it should be closer to 30k.",
      "parentUuid": "51a175a9_e48d4236",
      "range": {
        "startLine": 21,
        "startChar": 35,
        "endLine": 22,
        "endChar": 20
      },
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1b2c510_bc1c61d7",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-31T21:59:37Z",
      "side": 1,
      "message": "Doesn\u0027t look safe. Why not ::max() ?",
      "range": {
        "startLine": 111,
        "startChar": 20,
        "endLine": 111,
        "endChar": 36
      },
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71c75982_f9767733",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-08-31T22:16:03Z",
      "side": 1,
      "message": "True, I was thinking of overflows in asm code, but that shouldn\u0027t happen since the 64 bit ones use 64 bit comparisons.",
      "parentUuid": "d1b2c510_bc1c61d7",
      "range": {
        "startLine": 111,
        "startChar": 20,
        "endLine": 111,
        "endChar": 36
      },
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71c75982_990e5b43",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 1467,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-31T22:33:14Z",
      "side": 1,
      "message": "Did you consider changing the behavior of object_size_ (setting it early to a very large number, and set it to the valid *aligned* size later) without adding this field?",
      "range": {
        "startLine": 1467,
        "startChar": 11,
        "endLine": 1467,
        "endChar": 39
      },
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1e00515_ec9d8b5d",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 1467,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-08-31T23:14:02Z",
      "side": 1,
      "message": "I think that may cause some issues when doing SizeOf on uninitialized objects. Hans had the idea of using the high bit for signalling uninitialized which could work.",
      "parentUuid": "71c75982_990e5b43",
      "range": {
        "startLine": 1467,
        "startChar": 11,
        "endLine": 1467,
        "endChar": 39
      },
      "revId": "cb982f4ad2c41e6c29a5c50b131960cf75c0e9e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}