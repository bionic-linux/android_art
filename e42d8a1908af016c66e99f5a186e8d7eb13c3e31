{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ad0747ea_6daf1e73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-12-13T14:42:22Z",
      "side": 1,
      "message": "Adding Mathew to the review, and marking -2 before this gets in - the consequences of this AFAIU is that we\u0027re making the HIDDEN_API_* values in Application more or less public, at least SystemApi, when they are today just internal to the framework.\n\nMaybe that\u0027s OK, and we\u0027re ready to promote those values to external users such as studion, but I\u0027m flagging it in case it\u0027s not clear for everyone.",
      "revId": "e42d8a1908af016c66e99f5a186e8d7eb13c3e31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc112d18_b84511b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-13T16:55:04Z",
      "side": 1,
      "message": "This is limited to debuggable where you can mostly turn hiddenapi off in other ways. Also these extensions are not really a part of any api and are meant (and only really available) for tools that reach deep into the runtime and are expected to have far deeper knowledge of internals than real apps.\n\nIf you wish it would be pretty easy to change this to not rely on knowing the values (basically just give values in the description text and translated instead of cast) but this seemed easier given that studio would be able to easily check them for every release and the entire point of this is to quiet down some logspam so failure isn\u0027t disastrous.",
      "parentUuid": "ad0747ea_6daf1e73",
      "revId": "e42d8a1908af016c66e99f5a186e8d7eb13c3e31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "238b4066_78006439",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2020-12-14T10:07:14Z",
      "side": 1,
      "message": "As I said on the thread, I\u0027d rather not expose this. The problem with this approach is that is allows hidden API access to the whole app, meaning app developers will miss other usages in their app, so therefore miss bugs elsewhere.\n\nCan we instead create a parallel of VMDebug.allowHiddenApiReflectionFrom() which allows hidden API access from a *single class*? That can then be called before the debugger redefines any class, keeping the scope of the change to just what\u0027s needed.",
      "revId": "e42d8a1908af016c66e99f5a186e8d7eb13c3e31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc36a295_be72773b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-14T15:32:54Z",
      "side": 1,
      "message": "AIUI The accesses being warned are from relinking the class, there is no reflection and no similar way to know where we are coming from like with reflection. The idea for this then was to allow studio to quickly toggle this off and on as it does its setup. This is the same thing art itself does btw https://cs.android.com/android/platform/superproject/+/master:art/runtime/well_known_classes.cc;l\u003d331;bpv\u003d1;bpt\u003d1\n\nAs long as studio is relatively quick there shouldn\u0027t be much danger if missing major hiddenapi use.",
      "parentUuid": "238b4066_78006439",
      "revId": "e42d8a1908af016c66e99f5a186e8d7eb13c3e31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "431d372c_7242e041",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2020-12-14T16:37:19Z",
      "side": 1,
      "message": "Does the linker not know *which* class it is linking?\n\nIf the intent is to scope it like in well_known_classes, can that be reflected in the API, perhaps by exposing something like ScopedHiddenApiEnforcementPolicySetting ?\n\nIf the setting is reset once the class definition is complete that is much better, but that\u0027s not reflected in this CL in the API structure or even the docs.",
      "parentUuid": "bc36a295_be72773b",
      "revId": "e42d8a1908af016c66e99f5a186e8d7eb13c3e31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}