{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b1c70de9_91a5dde7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2024-07-23T12:39:26Z",
      "side": 1,
      "message": "Can you add a test to exercise this new code path (and make sure we don\u0027t regress on line coverage)?",
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8eda5510_c7aeaa94",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2024-07-23T19:36:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b1c70de9_91a5dde7",
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37c50018_10debe2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2024-07-22T23:38:09Z",
      "side": 1,
      "message": "Hey @hboehm@google.com @ilkos@google.com @scianciulli@google.com - Need your help in more review.\n\nI\u0027ve updated the two CLs, one in `art` for the native code, the other in `libcore/libart` in VMRuntime.java. Both have passed presubmit.",
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "281d99c9_e5c5b6e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-07-23T00:32:55Z",
      "side": 1,
      "message": "I\u0027m probably not the right reviewer for making Value public. I don\u0027t know whether this violates some principle of the original design. Otherwise LGTM.",
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e7f696d_e87877a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2024-07-23T10:02:10Z",
      "side": 1,
      "message": "I think the change is acceptable, because it is effectively the only way to retrieve this information at the moment - there are similar counters (e.g., https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/gc/heap.h;l\u003d1675;drc\u003d3796be3b545daae6b9a572b3860fbae2431dd5dc), but they usually don\u0027t distinguish between full heap or young generation collection, which seems to be quite an important distinction here.\n\nUnfortunately this makes the `Value()` method public for all metrics while it would be only needed for one - CCing @rpl@google.com to share his opinion on this.",
      "parentUuid": "281d99c9_e5c5b6e2",
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d12240d0_5181c73a",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2024-07-23T12:39:26Z",
      "side": 1,
      "message": "Can you use `friend` instead of making this method `public` (and adjust the commit message)? I think that\u0027s the pattern we have tried to follow in this file.",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 74
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a9d95b_c6998c3f",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2024-07-23T19:36:42Z",
      "side": 1,
      "message": "That\u0027s a good proposal. However, I did face a few problems here: 1) `friend` requires a class and `dalvik_system_VMRuntime.cc` is a place for JNI calls, and there isn\u0027t really a class, and 2) `class ArtMetrics` itself is a `friend` class of `MetricCounter` so from within ArtMetrics we could access MetricsCounter, and so another option is to introduce something like `ArtMetrics.getValue(...)` but then again I guess that\u0027s less straightforward than exposing `MetricsCounter.Value()` to be public\n\nI understand the encapsulation/visibility concern of exposing Value(), however, is there any strong reason behind this?",
      "parentUuid": "d12240d0_5181c73a",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 74
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f43c899_2f1afb32",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2024-07-23T19:43:14Z",
      "side": 1,
      "message": "option 3) we could add a simple MetricsBackend just like in metrics_test.h, and use counter-\u003ereport() method to get the counter value",
      "parentUuid": "19a9d95b_c6998c3f",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 74
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "652f7aac_420c24c6",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2024-07-24T11:19:34Z",
      "side": 1,
      "message": "You can declare (standalone) functions as `friend` too (see https://en.cppreference.com/w/cpp/language/friend).\n\nSomething like this should do the trick:\n\n```\nfriend jlong VMRuntime_getFullGcCount(JNIEnv* env, jclass klass);\n```\n\nLet me know if this doesn\u0027t work.",
      "parentUuid": "2f43c899_2f1afb32",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 74
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8279ff37_0d4ce4b4",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2024-07-24T20:14:24Z",
      "side": 1,
      "message": "Simply adding this doesn\u0027t seem to work, and the error is the same as before, that Value() is protected. I suspect there are a few things here:\n\n1. different namespaces, VMRuntime_getFullGcCount() is within `namespace art`\nwhile `class MetricCounter` is included in `metrics_common.cc` so it\u0027s in `namespace art::metrics`\n\n2. visibility/scope across files, `VMRuntime_getFullGcCount()` is defined (as other similar functions as static in `dalvik_system_VMRuntime.cc`, which has visibility local to the file (and likely no external symbol), I\u0027m not sure what that means for a friend reference to this function from another file in a class\n\nPS: I tried to remove static from VMRuntime_getFullGcCount() and add a extern declaration in metrics.h for this function before making it a friend, but ended up having the same error\n\n3. for some reason the subtle `namespace art HIDDEN {...}` for VMRuntime_* that could potentially block the visibility of these functions further from the toolchain perspective?\n\n4. and lastly I have to add `#include \u003cjni.h\u003e` in metrics.h which feels a bit odd, that I guess that\u0027s not a big deal.\n\nOne other thing I could think of is to have a friend function declared in metrics.h directly to access `Value()`, however, I guess that also breaches the intention of data encapsulation.",
      "parentUuid": "652f7aac_420c24c6",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 74
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0724513c_77ef295c",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2024-07-26T15:23:29Z",
      "side": 1,
      "message": "You can keep `Value()` protected if you apply the suggested edits I made on this patch set (around lines 33–34, 108–110, 332–335, and 343–344).",
      "parentUuid": "8279ff37_0d4ce4b4",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 74
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f0b9b21_8a2c1e5e",
        "filename": "runtime/native/dalvik_system_VMRuntime.cc",
        "patchSetId": 3
      },
      "lineNbr": 539,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2024-07-24T11:19:34Z",
      "side": 1,
      "message": "Style change:\n\n```suggestion\nstatic jlong VMRuntime_getFullGcCount([[maybe_unused]] JNIEnv* env, [[maybe_unused]] jclass klass) {\n```",
      "range": {
        "startLine": 539,
        "startChar": 38,
        "endLine": 539,
        "endChar": 53
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50575844_bab5b8ba",
        "filename": "runtime/native/dalvik_system_VMRuntime.cc",
        "patchSetId": 3
      },
      "lineNbr": 539,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2024-07-25T17:37:25Z",
      "side": 1,
      "message": "do we think that we need to change the style for other functions as well?",
      "parentUuid": "4f0b9b21_8a2c1e5e",
      "range": {
        "startLine": 539,
        "startChar": 38,
        "endLine": 539,
        "endChar": 53
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed3ec8b_9c1b4ed9",
        "filename": "runtime/native/dalvik_system_VMRuntime.cc",
        "patchSetId": 3
      },
      "lineNbr": 539,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-07-25T20:47:49Z",
      "side": 1,
      "message": "It looks like we\u0027re already quite inconsistent here, presumably because this isn\u0027t yet being compiled with -Werror? I vote for making the change in new code, but leaving old code for later.",
      "parentUuid": "50575844_bab5b8ba",
      "range": {
        "startLine": 539,
        "startChar": 38,
        "endLine": 539,
        "endChar": 53
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5e9023b_fce5d579",
        "filename": "runtime/native/dalvik_system_VMRuntime.cc",
        "patchSetId": 3
      },
      "lineNbr": 539,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2024-07-26T00:12:02Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9ed3ec8b_9c1b4ed9",
      "range": {
        "startLine": 539,
        "startChar": 38,
        "endLine": 539,
        "endChar": 53
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e33f2683_09112ebf",
        "filename": "runtime/native/dalvik_system_VMRuntime.cc",
        "patchSetId": 3
      },
      "lineNbr": 539,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2024-07-26T15:23:29Z",
      "side": 1,
      "message": "\u003e It looks like we\u0027re already quite inconsistent here, presumably because this isn\u0027t yet being compiled with -Werror? I vote for making the change in new code, but leaving old code for later.\n\nAgreed.",
      "parentUuid": "c5e9023b_fce5d579",
      "range": {
        "startLine": 539,
        "startChar": 38,
        "endLine": 539,
        "endChar": 53
      },
      "revId": "6be8956a1066485b990766045dad18332a2bcf45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}