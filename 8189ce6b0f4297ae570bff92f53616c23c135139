{
  "comments": [
    {
      "key": {
        "uuid": "51a4d129_0bc89eed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "improper",
      "range": {
        "startLine": 7,
        "startChar": 25,
        "endLine": 7,
        "endChar": 33
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5fb68e5_caf5ca68",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51a4d129_0bc89eed",
      "range": {
        "startLine": 7,
        "startChar": 25,
        "endLine": 7,
        "endChar": 33
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca563dd0_c5b5bd91",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-22T15:26:40Z",
      "side": 1,
      "message": "breaking (I find it odd to attribute emotions to GC)",
      "range": {
        "startLine": 11,
        "startChar": 63,
        "endLine": 11,
        "endChar": 71
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f985599e_2eecfe47",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca563dd0_c5b5bd91",
      "range": {
        "startLine": 11,
        "startChar": 63,
        "endLine": 11,
        "endChar": 71
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc31d92a_5bd057a4",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "the second",
      "range": {
        "startLine": 292,
        "startChar": 22,
        "endLine": 292,
        "endChar": 28
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ccbba00_ea7c5c82",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc31d92a_5bd057a4",
      "range": {
        "startLine": 292,
        "startChar": 22,
        "endLine": 292,
        "endChar": 28
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c69b669_ed6246bb",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "While you\u0027re changing this line, could you also change this comment to:\n\n  /*kVisitNativeRoots\u003d*/\n\n?",
      "range": {
        "startLine": 418,
        "startChar": 32,
        "endLine": 418,
        "endChar": 55
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfe5be7c_cec94aca",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-10-22T16:25:49Z",
      "side": 1,
      "message": "I would also find it less confusing if the other arguments were lined up at the beginning of the comment, since the comment is logically part of the first argument. I don\u0027t know if our formatting checker allows that.",
      "parentUuid": "0c69b669_ed6246bb",
      "range": {
        "startLine": 418,
        "startChar": 32,
        "endLine": 418,
        "endChar": 55
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e39b79d_6bd24bba",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Adding an equals sign seems to be inconsistent with other instances of labeling template arguments in this file.  Is it common in other places?\n\nI changed the indention as Hans requested.  With this alignment I think I would prefer to put the parameter name comment after the value, but I don\u0027t think that would fit how it\u0027s done in other locations.",
      "parentUuid": "dfe5be7c_cec94aca",
      "range": {
        "startLine": 418,
        "startChar": 32,
        "endLine": 418,
        "endChar": 55
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b44797c0_f791eeca",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T23:21:10Z",
      "side": 1,
      "message": "Andreas just told me about the effort to move to /* kName\u003d */ style.  I\u0027ll switch these over.",
      "parentUuid": "4e39b79d_6bd24bba",
      "range": {
        "startLine": 418,
        "startChar": 32,
        "endLine": 418,
        "endChar": 55
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e73e149b_d95d6312",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-23T14:22:40Z",
      "side": 1,
      "message": "Sorry, I should have mentioned the rationale behind this comment.",
      "parentUuid": "b44797c0_f791eeca",
      "range": {
        "startLine": 418,
        "startChar": 32,
        "endLine": 418,
        "endChar": 55
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "185ed831_60fc6e19",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 427,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "Nit: Extra space.",
      "range": {
        "startLine": 427,
        "startChar": 29,
        "endLine": 427,
        "endChar": 30
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de52b69f_bfa69834",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 427,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "185ed831_60fc6e19",
      "range": {
        "startLine": 427,
        "startChar": 29,
        "endLine": 427,
        "endChar": 30
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "160bf2e4_1dad822f",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "Nit: Long line.",
      "range": {
        "startLine": 431,
        "startChar": 0,
        "endLine": 431,
        "endChar": 102
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ac0d152_8171e6a2",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "160bf2e4_1dad822f",
      "range": {
        "startLine": 431,
        "startChar": 0,
        "endLine": 431,
        "endChar": 102
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56ff496d_58610b36",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "While you\u0027re changing this, could you split this into two declarations?",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 506,
        "endChar": 47
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8bf38a3_a2f2164c",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Can I ask why?  These two variables need to be of the same type.  This helps to convey that not only are they linked by type, they are also logically linked.",
      "parentUuid": "56ff496d_58610b36",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 506,
        "endChar": 47
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "462bf163_b1825fa1",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-23T14:22:40Z",
      "side": 1,
      "message": "This is inconsistent with the style used throughout the ART code base. We could revisit this, but I\u0027d rather have you do that in another CL (if the team agrees with the change).",
      "parentUuid": "d8bf38a3_a2f2164c",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 506,
        "endChar": 47
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30fcbd4d_160409ce",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-23T18:11:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "462bf163_b1825fa1",
      "range": {
        "startLine": 505,
        "startChar": 0,
        "endLine": 506,
        "endChar": 47
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d0644c9_57ddc7ac",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 550,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "Nit: Missing white space between \"following\" and \"object\".",
      "range": {
        "startLine": 549,
        "startChar": 80,
        "endLine": 550,
        "endChar": 11
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8c57e75_12f4fa91",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 550,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d0644c9_57ddc7ac",
      "range": {
        "startLine": 549,
        "startChar": 80,
        "endLine": 550,
        "endChar": 11
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "283f894f_3812ae25",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 2346,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "Could you replace this with `AppImageReferenceOffsetInfo`? We\u0027ve tried so far to limit the use of `auto` and `decltype` in ART\u0027s code base to some specific use cases (e.g. iterators).",
      "range": {
        "startLine": 2346,
        "startChar": 30,
        "endLine": 2346,
        "endChar": 86
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "799adc58_5b5c9e32",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 2346,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-10-22T19:19:37Z",
      "side": 1,
      "message": "I\u0027m not going to disagree with this if ART style specifically wants to continue forbidding the use of decltype, but this seems like one of the intended uses of it. The storage is indeed related to string_reference_offsets_, rather than being some abstract type. Perhaps now is the time to start allowing decltype for size/allocation-related uses too.",
      "parentUuid": "283f894f_3812ae25",
      "range": {
        "startLine": 2346,
        "startChar": 30,
        "endLine": 2346,
        "endChar": 86
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2527047a_0b91e41c",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 2346,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Previously I had been told that it is preferable to use variable names instead of types for sizeof calculations.  I couldn\u0027t do that directly here, so I had to run through a decltype.\n\nIn addition, I ran into a bug when developing this patch that was caused by me changing the type of string_reference_offsets_ and not adjusting this line.  Using decltype to fetch the element type of the vector should prevent that from happening in the future.",
      "parentUuid": "799adc58_5b5c9e32",
      "range": {
        "startLine": 2346,
        "startChar": 30,
        "endLine": 2346,
        "endChar": 86
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "083ac9e4_147ffc15",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 2346,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-23T14:22:40Z",
      "side": 1,
      "message": "I\u0027m not against it (I actually do like generic programming idioms), but this does not seem consistent with the style used in ART.",
      "parentUuid": "2527047a_0b91e41c",
      "range": {
        "startLine": 2346,
        "startChar": 30,
        "endLine": 2346,
        "endChar": 86
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b02a03c2_b4d965ac",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 2346,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-23T18:11:30Z",
      "side": 1,
      "message": "Given that I was asked to make a change similar to this, people seem to like this use of decltype, and if we disallow all inconsistencies no progress can be made, I\u0027m going to leave this in.",
      "parentUuid": "083ac9e4_147ffc15",
      "range": {
        "startLine": 2346,
        "startChar": 30,
        "endLine": 2346,
        "endChar": 86
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "674c2741_4feb5278",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-10-22T16:25:49Z",
      "side": 1,
      "message": "I\u0027m not a fan of introducing this, especially since there doesn\u0027t seem to be an easy way to automatically check that such code doesn\u0027t end up in production builds.\n\nIf there is specific information you need to be preserved somewhere, and you can\u0027t limit it to your own debug builds, I expect that assignments to local volatiles under kIsDebugBuild would do the trick with much less impact on code size, etc.",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 53
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a21e992_79e09705",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-10-22T19:19:37Z",
      "side": 1,
      "message": "Since Android only supports Clang, I don\u0027t see the need for a GCC-specific define here. I see that these are used for some debug-related routines. Would it be good to mark those functions specifically as DEBUG-only? Tagging them directly with [[clang::optnone]] won\u0027t be as surprising.",
      "parentUuid": "674c2741_4feb5278",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 53
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf2c06bb_b9372567",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "You raise a good point Hans.  I can see three possible solutions: 1) defining the macro to the empty string if it isn\u0027t a debug build; 2) Wrapping the functions/classes it is used on in \"#if kIsDebugBuild\" blocks; and 3) using an ASSERT_DEBUG macro in the body of any function that uses DISABLE_OPTIMIZATION.\n\nThe first of these options is the only one that wouldn\u0027t require an extra step for the programmer.  Unfortunately it won\u0027t cause a warning or error if the function is used in a non-debug context, but that is the same behavior we have today.  That could maybe be addressed by the addition of the ASSERT_DEBUG macro, and we could add that to any DEGUB-only function, regardless of if they use DISABLE_OPTIMIZATION.\n\nThoughts?",
      "parentUuid": "2a21e992_79e09705",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 53
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2402e599_437ae9a9",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-10-23T19:01:26Z",
      "side": 1,
      "message": "Can we follow Stephen\u0027s suggestion and put [[clang::optnone]] directly in the routine, and add the ifdef or static_assert(kIsDebugBuild) in the class? I think that would be least surprising, and wouldn\u0027t lead to abuse of the macro. And it would prevent us from ever including bloated -O0 code in the product (or accidentally testing with -O0 when the product is built differently).\n\nI\u0027m perfectly fine with requiring extra steps from the programmer to do this. This should be very rarely used, and AFAICT only in code that isn\u0027t part of the product.\n\nI don\u0027t think kIsDebugBuild works in a preprocessor if, unfortunately.\n\nI still wonder whether declaring interesting locals volatile in debug builds is a better way to get the info you need, with less impact on the code.",
      "parentUuid": "bf2c06bb_b9372567",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 53
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89923112_d365d9fb",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-23T20:47:03Z",
      "side": 1,
      "message": "It sounds like there isn\u0027t a lot of support for this so I removed it.  I\u0027ll use [[clang::optnone]] when I need to debug and remove it from any code that gets checked in.",
      "parentUuid": "2402e599_437ae9a9",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 53
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10262448_ed305b86",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1183,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-10-22T19:19:37Z",
      "side": 1,
      "message": "A debug-only class should clearly be guarded completely by kIsDebugBuild.",
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9377fae1_77eab435",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1183,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Using \"#if kIsDebugBuild\" ?  Or is there a type/function attribute that can be used?  I agree this would be a good change, but I have heard some pushback against macro-guards around code and haven\u0027t seen it in the codebase yet.",
      "parentUuid": "10262448_ed305b86",
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65ac77e7_06d654b3",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1183,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-10-22T23:28:38Z",
      "side": 1,
      "message": "Yes, using something like that. It\u0027s up to the ART folks to decide whether they want static_assert\u0027s in the body of those kind of functions too, but I would think you don\u0027t want someone accidentally refactoring them into the regular codebase (or using one of the functions that might not be well optimized).",
      "parentUuid": "9377fae1_77eab435",
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "370c2825_14131ba6",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1183,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-23T14:22:40Z",
      "side": 1,
      "message": "Given how `kIsDebugBuild` is defined, you\u0027d probably want to use something like\n\n  #if !defined(NDEBUG)\n  …\n  #endif\n\nto guard such code.",
      "parentUuid": "65ac77e7_06d654b3",
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a106d01_40e3ee98",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1183,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-10-23T20:20:04Z",
      "side": 1,
      "message": "The name of the class is clear enough that I don\u0027t think this needs to be hidden from non-debug builds (and I\u0027d expect the linker to eliminate this code). It seems overkill to #ifdef this out.\n\nYou could move the visitor into the caller (from this context it looks like it\u0027s only one) to isolate it.",
      "parentUuid": "370c2825_14131ba6",
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6056ddaa_55b759b2",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1183,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-23T20:47:03Z",
      "side": 1,
      "message": "I\u0027ve removed the DISABLE_OPTIMIZATION macros.  As other similar visitors aren\u0027t limited to the scope of the calling function I\u0027m going to leave this as is.",
      "parentUuid": "8a106d01_40e3ee98",
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e697b3a6_9031cba4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1206,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "Nit: Fit on a single line.",
      "range": {
        "startLine": 1205,
        "startChar": 0,
        "endLine": 1206,
        "endChar": 50
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c891fe0_61d8e139",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1206,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e697b3a6_9031cba4",
      "range": {
        "startLine": 1205,
        "startChar": 0,
        "endLine": 1206,
        "endChar": 50
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30c2a32b_eb8076ad",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1266,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-10-22T16:25:49Z",
      "side": 1,
      "message": "I don\u0027t think extra white space is allowed here.",
      "range": {
        "startLine": 1266,
        "startChar": 24,
        "endLine": 1266,
        "endChar": 26
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4578cfb8_82204119",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1266,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "I don\u0027t see anything in the style guide about it, but I would be willing to remove it if you feel strongly.",
      "parentUuid": "30c2a32b_eb8076ad",
      "range": {
        "startLine": 1266,
        "startChar": 24,
        "endLine": 1266,
        "endChar": 26
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb9dd274_7608421c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1266,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-23T14:22:40Z",
      "side": 1,
      "message": "I don\u0027t remember anything specific about this in the style guide(s). That\u0027s mostly to be consistent with the ART code base (which is more important than following the style guide to the letter IMO).",
      "parentUuid": "4578cfb8_82204119",
      "range": {
        "startLine": 1266,
        "startChar": 24,
        "endLine": 1266,
        "endChar": 26
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "212457ce_d2cef559",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1266,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-23T18:11:30Z",
      "side": 1,
      "message": "Strong disagree, but I\u0027ll change it.",
      "parentUuid": "eb9dd274_7608421c",
      "range": {
        "startLine": 1266,
        "startChar": 24,
        "endLine": 1266,
        "endChar": 26
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcb36a90_8cc4e32c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1440,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "DCHECK_ALIGNED(sro_base[offset_index].first, 2);\nDCHECK_ALIGNED(sro_base[offset_index].second, 2);",
      "range": {
        "startLine": 1439,
        "startChar": 0,
        "endLine": 1440,
        "endChar": 55
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0631395_28d3afec",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1440,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Thanks!  I didn\u0027t know about those.  Much better.",
      "parentUuid": "bcb36a90_8cc4e32c",
      "range": {
        "startLine": 1439,
        "startChar": 0,
        "endLine": 1440,
        "endChar": 55
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d146786c_df33617a",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1449,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "/*kIsVolatile\u003d*/",
      "range": {
        "startLine": 1449,
        "startChar": 34,
        "endLine": 1449,
        "endChar": 51
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2101c17f_8bc12d2c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1449,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T23:21:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d146786c_df33617a",
      "range": {
        "startLine": 1449,
        "startChar": 34,
        "endLine": 1449,
        "endChar": 51
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ca4a9d0_461e4ba0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1454,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "/*kTransactionActive\u003d*/ (And ditto for other template parameters.)",
      "range": {
        "startLine": 1454,
        "startChar": 32,
        "endLine": 1454,
        "endChar": 56
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89bd7bc8_38eb92fe",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1454,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T23:21:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ca4a9d0_461e4ba0",
      "range": {
        "startLine": 1454,
        "startChar": 32,
        "endLine": 1454,
        "endChar": 56
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f67124c_12e20280",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1470,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "I don\u0027t think we use that type of indentation/alignment in ART\u0027s code base.",
      "range": {
        "startLine": 1468,
        "startChar": 0,
        "endLine": 1470,
        "endChar": 62
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4740adb_8a72cce4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1470,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f67124c_12e20280",
      "range": {
        "startLine": 1468,
        "startChar": 0,
        "endLine": 1470,
        "endChar": 62
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafe2d0c_fe9db7f2",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1494,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-22T13:08:07Z",
      "side": 1,
      "message": "This seems to be not uniform with the style used line 1478.",
      "range": {
        "startLine": 1494,
        "startChar": 27,
        "endLine": 1494,
        "endChar": 51
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1d19f62_092aef24",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1494,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-22T22:59:06Z",
      "side": 1,
      "message": "The naming convention here is to start with a capital letter if it is a logical component (e.g. AppImage or Dex2Oat) and a lower case letter if it is a message or value name.",
      "parentUuid": "eafe2d0c_fe9db7f2",
      "range": {
        "startLine": 1494,
        "startChar": 27,
        "endLine": 1494,
        "endChar": 51
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cb86048_3e5fc43e",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1494,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-23T14:22:40Z",
      "side": 1,
      "message": "Sorry about the nitpicking, but why using different capitalizations for `StringsInInternTable` (line 1478) and for `conflictingInternStrings` (line 1494)? They seem to be both value names. Is there any other example (or comment/documentation) that would explain this difference?",
      "parentUuid": "c1d19f62_092aef24",
      "range": {
        "startLine": 1494,
        "startChar": 27,
        "endLine": 1494,
        "endChar": 51
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c525913_7b62341e",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1494,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-23T18:11:30Z",
      "side": 1,
      "message": "You are right that this is inconsistent with line 1478.  I\u0027ve updated that line to fix the issue.\n\nThis is something that I started doing to help with my log scraping tools (see image_writer.cc:314).  Since then other people in our team have adopted the practice.",
      "parentUuid": "0cb86048_3e5fc43e",
      "range": {
        "startLine": 1494,
        "startChar": 27,
        "endLine": 1494,
        "endChar": 51
      },
      "revId": "8189ce6b0f4297ae570bff92f53616c23c135139",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}