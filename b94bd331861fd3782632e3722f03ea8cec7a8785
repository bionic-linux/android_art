{
  "comments": [
    {
      "key": {
        "uuid": "a730d7fa_4c5d0e30",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 2
      },
      "lineNbr": 1992,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-03-22T18:09:02Z",
      "side": 1,
      "message": "why isn\u0027t there a resize on this as done in the linear scan code?",
      "revId": "b94bd331861fd3782632e3722f03ea8cec7a8785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec3cf220_fab9b2f0",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 2
      },
      "lineNbr": 1992,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-03-22T20:06:09Z",
      "side": 1,
      "message": "Good question.  Matthew exploits the fact that BitVector resizes automatically for nonzero bits on the set operation:\n\n if (idx \u003e\u003d storage_size_ * kWordBits) {\n      EnsureSize(idx);\n    }\n\nTesting outside the allocated bitvector is guarded by the internal storage.\n\n\nThe true size is recorded in num_stack_slots_used (see L2022)",
      "parentUuid": "a730d7fa_4c5d0e30",
      "revId": "b94bd331861fd3782632e3722f03ea8cec7a8785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23a12549_5504d7c1",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 2
      },
      "lineNbr": 1992,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-03-22T21:25:37Z",
      "side": 1,
      "message": "Ok, this is a bit vector so it makes sense. The linear scan one is a vector to keep track of positions.",
      "parentUuid": "ec3cf220_fab9b2f0",
      "revId": "b94bd331861fd3782632e3722f03ea8cec7a8785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d308946a_b826a72d",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 2
      },
      "lineNbr": 1992,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-03-22T22:23:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23a12549_5504d7c1",
      "revId": "b94bd331861fd3782632e3722f03ea8cec7a8785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4219083_8536458b",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 2
      },
      "lineNbr": 2007,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-03-22T21:25:37Z",
      "side": 1,
      "message": "Not necessary?",
      "range": {
        "startLine": 2007,
        "startChar": 13,
        "endLine": 2007,
        "endChar": 17
      },
      "revId": "b94bd331861fd3782632e3722f03ea8cec7a8785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c44093ee_7e8088c8",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 2
      },
      "lineNbr": 2007,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-03-22T22:23:25Z",
      "side": 1,
      "message": "you need a condition here, right, or do you suggest something else?",
      "parentUuid": "c4219083_8536458b",
      "range": {
        "startLine": 2007,
        "startChar": 13,
        "endLine": 2007,
        "endChar": 17
      },
      "revId": "b94bd331861fd3782632e3722f03ea8cec7a8785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}