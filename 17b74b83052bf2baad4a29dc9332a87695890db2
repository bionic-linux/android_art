{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6dba0d23_06910226",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-24T00:50:12Z",
      "side": 1,
      "message": "Attempting to resurrect this, post S.",
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61ad7321_5e110c41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-24T16:23:55Z",
      "side": 1,
      "message": "Benchmark runs at https://dashboards.corp.google.com/_f31ff276_6cb2_4ed6_973b_9640c4fb0df4?fb\u003dBootImageProfileId:eq:4258 look good, though not exactly what I would have expected. I\u0027m not sure that\u0027s reproducible. But to me the revised heuristic makes a lot more sense, so I think we should go ahead with this early in the cycle, so we can deal with any fallout.",
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85fc6aec_e808b30e",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4525,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-24T23:10:41Z",
      "side": 1,
      "message": "wouldn\u0027t this be lesser than the threshold at which we currently set, which is half of target_footprint?",
      "range": {
        "startLine": 4525,
        "startChar": 4,
        "endLine": 4525,
        "endChar": 34
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14551e89_70fb38cf",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4525,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-25T01:00:55Z",
      "side": 1,
      "message": "We guessed concurrent_start_bytes_ in several different ways in different places before. I really want to guess a consistent function of the target footprint. I\u0027m entirely amenable to making the function a but smaller if the target is close to growth_limit_, so that we don\u0027t pause for GC. Is that what you had in mind? I suspect this basically never happens, but it probably is an improvement.",
      "parentUuid": "85fc6aec_e808b30e",
      "range": {
        "startLine": 4525,
        "startChar": 4,
        "endLine": 4525,
        "endChar": 34
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb95a07b_6554633c",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4525,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-25T01:19:35Z",
      "side": 1,
      "message": "I like the way you have made it consistent in this CL for every other place. But specifically at this location I think we intentionally wanted to keep the concurrent_start_bytes_ high enough to basically make GC triggering in first 2 seconds extremely unlikely. That\u0027s why in the current code it\u0027s being set to half of the growth_limit, which gives enough leg room, in case some process is doing extremely fast allocations, to finish the GC and not block the mutator(s). But at the same time it\u0027s large enough to make GC trigger highly unlikely.\n\nwith 1/4 it makes the GC trigger in first 2 seconds more likely than before. I was just pointing to that.",
      "parentUuid": "14551e89_70fb38cf",
      "range": {
        "startLine": 4525,
        "startChar": 4,
        "endLine": 4525,
        "endChar": 34
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3249f158_e35762db",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4525,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-25T01:30:01Z",
      "side": 1,
      "message": "I believe we now basically set it to\ntarget_footprint - min(target_footprint/4, kMaxConcurrentRemainingBytes)\nwhere target_footprint \u003d growth_limit here.\nThat\u0027s higher than before.\n\nI actually think it\u0027s OK to leave it. If we run out during the first two seconds, we have a badly behaved app that pauses during startup, which is not really going to be noticeable. But we should make sure we agree this is what it does.",
      "parentUuid": "cb95a07b_6554633c",
      "range": {
        "startLine": 4525,
        "startChar": 4,
        "endLine": 4525,
        "endChar": 34
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d3f276d_4c430aef",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4525,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-25T01:35:08Z",
      "side": 1,
      "message": "Sorry about misunderstanding the calculation in SetDefaultConcurrentStartBytesLocked() above. I agree with you. Looks good to me.",
      "parentUuid": "3249f158_e35762db",
      "range": {
        "startLine": 4525,
        "startChar": 4,
        "endLine": 4525,
        "endChar": 34
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c3861b6_b60d61e0",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4533,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-24T23:10:41Z",
      "side": 1,
      "message": "wouldn\u0027t this be lesser than the threshold at which we currently set, which is half of target_footprint?",
      "range": {
        "startLine": 4533,
        "startChar": 42,
        "endLine": 4533,
        "endChar": 60
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bafad26_6ca82505",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4533,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-25T01:00:55Z",
      "side": 1,
      "message": "Did you mean to say something else here?",
      "parentUuid": "3c3861b6_b60d61e0",
      "range": {
        "startLine": 4533,
        "startChar": 42,
        "endLine": 4533,
        "endChar": 60
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fcd993f_1962e13a",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 4533,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-25T01:19:35Z",
      "side": 1,
      "message": "Sorry, I mistakenly left it here too :)",
      "parentUuid": "1bafad26_6ca82505",
      "range": {
        "startLine": 4533,
        "startChar": 42,
        "endLine": 4533,
        "endChar": 60
      },
      "revId": "17b74b83052bf2baad4a29dc9332a87695890db2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}