{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0645a2cc_42ee5446",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "Hey David, I have a few concerns about this change (artificially aggregating tests to work around generation issues, changing expectations w.r.t. dependencies, etc.). Can we discuss it (offline) before proceeding?\n\nAlso CC-ing Colin for comments on the integration with Soong.",
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bf16b3a_81f58755",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "than",
      "range": {
        "startLine": 174,
        "startChar": 23,
        "endLine": 174,
        "endChar": 27
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "561d8347_115812bf",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-15T13:21:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bf16b3a_81f58755",
      "range": {
        "startLine": 174,
        "startChar": 23,
        "endLine": 174,
        "endChar": 27
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7acbaefb_62f61dd7",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "Shouldn\u0027t they link against stubs instead? Otherwise you are not testing against the module on the device, right?",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b453ed5_d4461536",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-13T15:52:03Z",
      "side": 1,
      "message": "I assume that for compilation, it just matters whether the signatures are correct and found?\n\nHow would one add dependency on the subs?",
      "parentUuid": "7acbaefb_62f61dd7",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca80f58c_b92f550a",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-30T15:09:41Z",
      "side": 1,
      "message": "I used `core-all-system-modules` (https://cs.android.com/android/_/android/platform/libcore/+/6999c8b899aaabcd4858f958b162c6b298c3b3dd:JavaLibrary.bp;l\u003d225-247;drc\u003d8e8562514c00044bb7434e0afd2e3506c6f29f83) in the definition of `art-run-test-defaults` (https://cs.android.com/android/_/android/platform/art/+/8be663808b0bdab63ebdea2f0175f6a49b331a2c:test/Android.bp;l\u003d460;drc\u003d75e50892c0702edcfcc0ddfc8fe4e01386b3ce65). IIRC think this is what (CTS) Libcore tests use.",
      "parentUuid": "2b453ed5_d4461536",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc59d07b_ff1c40e8",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-04T16:36:03Z",
      "side": 1,
      "message": "I tied that, but it still needs the other static_libs anyway to compile...",
      "parentUuid": "ca80f58c_b92f550a",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d69f4f_3a01a81f",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-10-11T18:05:29Z",
      "side": 1,
      "message": "Isn\u0027t Rolands point still valid? If we\u0027re not testing against the device jars we\u0027re regressing here, aren\u0027t we?",
      "parentUuid": "bc59d07b_ff1c40e8",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f634322_e83232c1",
        "filename": "build/apex/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-11T18:50:30Z",
      "side": 1,
      "message": "Can you rephrase ... I don\u0027t follow what the question is.\nThis CL affects compilation.  It should not affect how tests are run.",
      "parentUuid": "b4d69f4f_3a01a81f",
      "range": {
        "startLine": 180,
        "startChar": 4,
        "endLine": 183,
        "endChar": 6
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcaa7c17_5f15b32b",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "My understanding is that any change in any source file of the shard will trigger the recompilation of the whole shard; e.g. touching `001-HelloWorld/src/Main.java` will recompile all these tests:\n- `001-HelloWorld`\n- `001-Main`\n- `1001-app-image-regions`\n- `101-fibonacci`\n- `1901-get-bytecodes`\n- `2001-virtual-structural-multithread`\n- `201-built-in-except-detail-messages`\n- `301-abstract-protected`\n- `401-optimizing-compiler`\n- `501-null-constant-dce`\n- `501-regression-packed-switch`\n- `601-method-access`\n- `701-easy-div-rem`\n- `801-VoidCheckCast`\n- `901-hello-ti-agent`\n\n\nThis looks like a (partial) regression with respect to the current approach, where you compile (at most) the tests that you want to run.",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "612aec29_f8f5a000",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-13T15:52:03Z",
      "side": 1,
      "message": "Mind that in the current approach, the compilation will happen on every test run, and many times duplicity in the run (once for each variant).\n\nThis compiles things just once during build, so it is a massive win.\n\nHowever, you are right that if you just iterate on single file, it *might* be slower (because the current approach still does many redundant recompilation).\n\nIt would be trivial to make the script parallel internally as well within the shard, so that iteration would be much faster as well then the current approach.\n\nI am not sure it is worth the effort, but it is easy to do.",
      "parentUuid": "fcaa7c17_5f15b32b",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c774b996_0240aa68",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-15T13:21:08Z",
      "side": 1,
      "message": "I changed so that is does the \"in-shard compilation\" in parallel as well.\nSo both \"all tests\" and \"interating on single test\" scenarios should be significant improvement now.",
      "parentUuid": "612aec29_f8f5a000",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22755ed7_c568baee",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-30T15:09:41Z",
      "side": 1,
      "message": "\u003e Mind that in the current approach, the compilation will happen on every test run, and many times duplicity in the run (once for each variant).\n\nRight; I forgot that the `run-test` script only handled one test configuration at a time.\n\n\u003e This compiles things just once during build, so it is a massive win.\n\u003e \n\u003e However, you are right that if you just iterate on single file, it *might* be slower (because the current approach still does many redundant recompilation).\n\nI agree that the build speed-up is nice – however, its mostly applies to the use case where you want to run all tests, which is often a \"batch operation\" either run by the developer on their environment, but with no expectation of getting a result \"early\", or during continuous integration.\n\nMy concern is the case where a developer iterates in a single test case (which happens often when debugging a feature and/or a tests) – I find it annoying to regress here. It\u0027d be great if we could measure that cost (starting a Soong build can take some time).\n\n\u003e It would be trivial to make the script parallel internally as well within the shard, so that iteration would be much faster as well then the current approach.\n\u003e \n\u003e I am not sure it is worth the effort, but it is easy to do.\n\nLike many things we do in ART Build \u0026 Testing, I think it is even better not to do some work which is not actually needed (e.g. avoiding building 64-bit artifacts on a build/test target exercising only the 32-bit case and vice versa).\n\n\u003e I changed so that is does the \"in-shard compilation\" in parallel as well.\n\u003e So both \"all tests\" and \"interating on single test\" scenarios should be significant improvement now.\n\nThanks, this sounds like a good idea.",
      "parentUuid": "612aec29_f8f5a000",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc8bb52f_b0bedf73",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-04T16:36:03Z",
      "side": 1,
      "message": "Actually, I might have blamed the old version too soon - all the variants are also compiled in parallel, right?  So either way, we either compile bunch of variants in parallel, or bunch of shared tests in parallel, but as long as the N is smaller then CPU cores on developers machine, we are fine.\n\nBad news is that this CL add ~10s penalty just for starting soong/ninja in the case where just touch the test java file.\n\nGood news is that if you also iterate on the C++ code, you need to start soong/ninja anyway, and in that case the shard compilation is brought forward, and is done in parallel with C++ code compilation.",
      "parentUuid": "22755ed7_c568baee",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff4247fd_873c4c05",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "I think there should also be a dependency expressed on the build script here:\n\n  tools: [\"run-test-build.py\"],\n\nIn addition, how are the dependencies on the tool chain itself (e.g. `javac` or `d8`) handled?",
      "range": {
        "startLine": 18,
        "startChar": 21,
        "endLine": 18,
        "endChar": 38
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8400a107_956d76e9",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-13T15:52:03Z",
      "side": 1,
      "message": "See test/Android.bp for the dependencies (in \"art-run-test-data-defaults\")",
      "parentUuid": "ff4247fd_873c4c05",
      "range": {
        "startLine": 18,
        "startChar": 21,
        "endLine": 18,
        "endChar": 38
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57a6a2e6_1740f525",
        "filename": "test/Android.run-test.bp",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-30T15:09:41Z",
      "side": 1,
      "message": "Ah, sorry, I missed that.\n\nOne more thing about dependencies: it seems the change does not handle build dependencies on `libarttest(d).so`. I don\u0027t think the original build logic in the `run-test` handled it, so it\u0027s not a regression, but I think it\u0027s worth considering (maybe as a follow-up change).",
      "parentUuid": "8400a107_956d76e9",
      "range": {
        "startLine": 18,
        "startChar": 21,
        "endLine": 18,
        "endChar": 38
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0387fab0_75b09ee1",
        "filename": "test/Android.run-test.bp.py",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "Could you add a comment explaining what a shard is here?",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ce64ae0_3f39a2f3",
        "filename": "test/Android.run-test.bp.py",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-15T13:21:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0387fab0_75b09ee1",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7032306d_b04f51c2",
        "filename": "test/run-test",
        "patchSetId": 6
      },
      "lineNbr": 863,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "How is this file automatically generated prior to running `run-test`? I could not see a build dependency on this file (or the other Zip files containing ART run-test artifacts) from `run-test` in this CL.",
      "range": {
        "startLine": 863,
        "startChar": 12,
        "endLine": 863,
        "endChar": 68
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51616d86_3d9fe43c",
        "filename": "test/run-test",
        "patchSetId": 6
      },
      "lineNbr": 863,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-13T15:52:03Z",
      "side": 1,
      "message": "See test/Android.run-test.mk\nThe zip is part of the standard set of test dependeices.",
      "parentUuid": "7032306d_b04f51c2",
      "range": {
        "startLine": 863,
        "startChar": 12,
        "endLine": 863,
        "endChar": 68
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11bce7cc_b3ce4f0f",
        "filename": "test/run-test-build.py",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "Typo: `is_knownfailure`",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5691181_cb4a5067",
        "filename": "test/run-test-build.py",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-15T13:21:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11bce7cc_b3ce4f0f",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 20
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "571cb177_1833bae8",
        "filename": "test/run-test-build.py",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-13T15:05:13Z",
      "side": 1,
      "message": "IIUC you are grouping tests sharing the same two lower digits which are part of their name. Could you explain the rationale behind this strategy (instead of e.g. creating a single ZIP file for all tests or creating one ZIP file per test)? I can see benefits and drawbacks for all these approaches, but I\u0027d like to get your position on this.",
      "range": {
        "startLine": 77,
        "startChar": 39,
        "endLine": 77,
        "endChar": 83
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84ef0280_9f563af4",
        "filename": "test/run-test-build.py",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-13T15:52:03Z",
      "side": 1,
      "message": "One big zip files would work, but it would need paralizim in the script itself, and it would imply slow iteration on single test.\n\nPer test would generate too many soong rules, which makes Colin uncomfortable.\n\nThe sharding (suggested by Colin) is happy compromise.",
      "parentUuid": "571cb177_1833bae8",
      "range": {
        "startLine": 77,
        "startChar": 39,
        "endLine": 77,
        "endChar": 83
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc709b4c_ee3cfd53",
        "filename": "test/run-test-build.py",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-30T15:09:41Z",
      "side": 1,
      "message": "Note that we have already been using using the one-rule-per-test strategy in `test/*/Android.bp files`, and it seems to be scaling so far. If there\u0027s any concern in that area, I\u0027d like to see numbers to understand the actual impact of having precise dependencies.",
      "parentUuid": "84ef0280_9f563af4",
      "range": {
        "startLine": 77,
        "startChar": 39,
        "endLine": 77,
        "endChar": 83
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52c5a5ab_73a6775e",
        "filename": "test/run-test-build.py",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-04T16:36:03Z",
      "side": 1,
      "message": "I have mostly done it based on Colin\u0027s initial feedback.\n\nDigging deeper, just based on timing of \"touch art/Android.bp; m nothing\", I have not been able to see \"statistically significant difference in time\". (usually taking around 1m10s)\n\nHaving said that, splitting on shard vs splitting on test-name does not make much difference code complexity wise.\n\nI am leaning towards shards anyway, in part based on the cool side-effect that it does not require regeneration of the generated bp file.  I am willing to reconsider in the future.",
      "parentUuid": "fc709b4c_ee3cfd53",
      "range": {
        "startLine": 77,
        "startChar": 39,
        "endLine": 77,
        "endChar": 83
      },
      "revId": "8da14dc6f2d62e916fca4804a1a6e31908cf4d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}