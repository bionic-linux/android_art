{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d97bc10e_9f8fbeb4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2022-05-18T23:38:11Z",
      "side": 1,
      "message": "A recent change to clang meant that functions with stack protectors could be inlined into functions marked `no_stack_protector` without adding a stack protector to the caller.  This eliminated the performance impact that this patch had last time.  The following links show the current patch\u0027s Golem benchmarks compared to the results from when the patch was last submitted:\n\n* https://golem.corp.goog/Revision?repository\u003dart\u0026revision\u003d18352\u0026patch\u003d17019\n* https://golem.corp.goog/Revision?repository\u003dart\u0026revision\u003d17122\n\nThe current presubmit failures seem to be due to a broken build target in `master-art: https://android-build.googleplex.com/builds/branches/git_master-art/grid?\n\n",
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11100aa9_2f6baa0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-05-19T06:44:26Z",
      "side": 1,
      "message": "I think if we\u0027re ok accepting this is brittle (is there a continuous test coming with it? Can we make it presubmit?) - we could try going with it.",
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2c155e9_cc503af5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-05-19T06:44:47Z",
      "side": 1,
      "message": "(marking unresolved)",
      "parentUuid": "11100aa9_2f6baa0b",
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ab7aea_aecaf724",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2022-05-20T00:07:54Z",
      "side": 1,
      "message": "If this breaks all of the existing boot tests in Android will fail with a message indicating that the stack protector was changed.  It will also fail at exactly the function that needs to be annotated with NO_STACK_PROTECTOR (though there may be more protected frames above the one that triggered the crash).\n\nUnfortunately we can\u0027t test that the stack protector *has* changed as that would require leaking a secret, which is what this CL is intended to prevent.  I have verified it manually by printing the stack protector out before and after the reset call.",
      "parentUuid": "b2c155e9_cc503af5",
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae07aeff_e0bf4858",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-05-20T08:22:49Z",
      "side": 1,
      "message": "Are we enabling stack protector by default?",
      "parentUuid": "67ab7aea_aecaf724",
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6db2c70_e53d8594",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-05-20T15:02:32Z",
      "side": 1,
      "message": "It is already enabled. This just changes how we use stack protector so that it can be reset on zygote fork (http://b/168258494). As for testing, if this stops working, devices won\u0027t boot, so this is already tested.",
      "parentUuid": "ae07aeff_e0bf4858",
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f98ac801_180a0423",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-05-19T06:44:26Z",
      "side": 1,
      "message": "Looking at your CL comment, this looks intended? Can you add a comment in the code?",
      "range": {
        "startLine": 74,
        "startChar": 52,
        "endLine": 74,
        "endChar": 72
      },
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a01eda0f_8c7b4885",
        "filename": "runtime/arch/arm/quick_entrypoints_cc_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2022-05-23T08:23:07Z",
      "side": 1,
      "message": "Naive questions:\n\n1) naively this method doesn\u0027t look like it meets the criteria for -fstack-protector-strong [https://clang.llvm.org/docs/ClangCommandLineReference.html].\n\n-\u003e The templatized method that\u0027s invoked is expanded in-situ.\n\n2) what leads to changes in the arm entrypoints in this CL, but not other architectures?\n\n-\u003e the other entrypoints are written in assembly.",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 108,
        "endChar": 18
      },
      "revId": "549f485d219f495eaa01c4d5478cf28c77ed5573",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}