{
  "comments": [
    {
      "key": {
        "uuid": "4bc24f1f_96bb12e0",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "Maybe introduce a kOutputOverlap constant in compiler/optimizing/locations.h?",
      "range": {
        "startLine": 1819,
        "startChar": 54,
        "endLine": 1819,
        "endChar": 81
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4a1799_a187daa3",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-20T15:54:00Z",
      "side": 1,
      "message": "I find this style in the optimizing compiler rather amusing. Why constants? These should be enums, really...",
      "parentUuid": "4bc24f1f_96bb12e0",
      "range": {
        "startLine": 1819,
        "startChar": 54,
        "endLine": 1819,
        "endChar": 81
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_0166fa0c",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T18:21:46Z",
      "side": 1,
      "message": "Agreed, these constants should be implemented as an enum.  But my main concern here was to about giving a better name to \"!Location::kNoOutputOverlap\". :)",
      "parentUuid": "0b4a1799_a187daa3",
      "range": {
        "startLine": 1819,
        "startChar": 54,
        "endLine": 1819,
        "endChar": 81
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_e691f45c",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Yeah I\u0027m trying to compensate for the lack of named parameters. Added an enum instead.",
      "parentUuid": "4bc24f1f_0166fa0c",
      "range": {
        "startLine": 1819,
        "startChar": 54,
        "endLine": 1819,
        "endChar": 81
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_46a42899",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-21T11:17:21Z",
      "side": 1,
      "message": "BTW, we should use strongly-typed enums (`enum class\u0027).",
      "parentUuid": "4b408f75_e691f45c",
      "range": {
        "startLine": 1819,
        "startChar": 54,
        "endLine": 1819,
        "endChar": 81
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_c6695895",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1819,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T11:24:39Z",
      "side": 1,
      "message": "Noted. I guess, all our enums should be moved to enum classes, then, for consistency.",
      "parentUuid": "4b408f75_46a42899",
      "range": {
        "startLine": 1819,
        "startChar": 54,
        "endLine": 1819,
        "endChar": 81
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_b6b88ee3",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1896,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 1896,
        "startChar": 54,
        "endLine": 1896,
        "endChar": 81
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_56a7eac5",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2067,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "Does this mean there was also a change in the runtime?",
      "range": {
        "startLine": 2067,
        "startChar": 55,
        "endLine": 2067,
        "endChar": 61
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_b6816e8f",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2067,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-20T15:47:56Z",
      "side": 1,
      "message": "Nope. This was wrong in the first place as I read a bogus table. It worked because we only used the first register to make the transfer.",
      "parentUuid": "4bc24f1f_56a7eac5",
      "range": {
        "startLine": 2067,
        "startChar": 55,
        "endLine": 2067,
        "endChar": 61
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_36ffbe09",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3313,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-20T15:47:56Z",
      "side": 1,
      "message": "quite a lot of repetitions with these DCHECKS. How about a macro, DCHECK_ARM_REGISTER_PAIR(destination)?",
      "range": {
        "startLine": 3311,
        "startChar": 6,
        "endLine": 3313,
        "endChar": 60
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_6119fee8",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3313,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Yeah, good point. Done.",
      "parentUuid": "4bc24f1f_36ffbe09",
      "range": {
        "startLine": 3311,
        "startChar": 6,
        "endLine": 3313,
        "endChar": 60
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_d603da7f",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3324,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-20T15:47:56Z",
      "side": 1,
      "message": "1) didn\u0027t we get rid of register pairs: https://android-review.googlesource.com/#/c/123651/ and assert we don\u0027t get one?\n\nAnyway, if this is still needed, add comment to make it clear that arm register pairs are either equal or they don\u0027t overlap.",
      "range": {
        "startLine": 3324,
        "startChar": 20,
        "endLine": 3324,
        "endChar": 34
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_a6108c42",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3324,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Yes, we did. Thanks, removed.",
      "parentUuid": "4bc24f1f_d603da7f",
      "range": {
        "startLine": 3324,
        "startChar": 20,
        "endLine": 3324,
        "endChar": 34
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_5766044b",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3353,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "This seems odd to move half a 64-bit value in a 32-bit register.  Shouldn\u0027t the destination be a register pair?",
      "range": {
        "startLine": 3348,
        "startChar": 0,
        "endLine": 3353,
        "endChar": 9
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_834f4286",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3353,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-20T15:47:56Z",
      "side": 1,
      "message": "This is rather tricky. It\u0027s because of the 64-bit constant moves are emitted (it expects the codegen to know which part goes where based on the register). I think extra docs are needed here.",
      "parentUuid": "cbd63fdb_5766044b",
      "range": {
        "startLine": 3348,
        "startChar": 0,
        "endLine": 3353,
        "endChar": 9
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b0c4779_6f667199",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3353,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b408f75_834f4286",
      "range": {
        "startLine": 3348,
        "startChar": 0,
        "endLine": 3353,
        "endChar": 9
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_17707cf7",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3366,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "Long line.",
      "range": {
        "startLine": 3366,
        "startChar": 0,
        "endLine": 3366,
        "endChar": 117
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_a1260622",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3366,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbd63fdb_17707cf7",
      "range": {
        "startLine": 3366,
        "startChar": 0,
        "endLine": 3366,
        "endChar": 117
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_a04fd432",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3368,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "Long line.",
      "range": {
        "startLine": 3368,
        "startChar": 0,
        "endLine": 3368,
        "endChar": 118
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_e61a945e",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3368,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b408f75_a04fd432",
      "range": {
        "startLine": 3368,
        "startChar": 0,
        "endLine": 3368,
        "endChar": 118
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_36a6dec7",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3369,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "Likewise, about moving half a 64-bit value into a single 32-bit register.",
      "range": {
        "startLine": 3364,
        "startChar": 6,
        "endLine": 3369,
        "endChar": 9
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_4629c876",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 3369,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bc24f1f_36a6dec7",
      "range": {
        "startLine": 3364,
        "startChar": 6,
        "endLine": 3369,
        "endChar": 9
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_43a7fac5",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 2811,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-20T15:47:56Z",
      "side": 1,
      "message": "i\u0027m not sure how will you make this work on x86...",
      "range": {
        "startLine": 2810,
        "startChar": 8,
        "endLine": 2811,
        "endChar": 35
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b0c4779_af6fb967",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 2811,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Me neither :-)",
      "parentUuid": "4b408f75_43a7fac5",
      "range": {
        "startLine": 2810,
        "startChar": 8,
        "endLine": 2811,
        "endChar": 35
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_80c29815",
        "filename": "compiler/optimizing/register_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-01-20T10:41:45Z",
      "side": 1,
      "message": "\"at finding such an interval\"?",
      "range": {
        "startLine": 135,
        "startChar": 39,
        "endLine": 135,
        "endChar": 53
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_61c25ecb",
        "filename": "compiler/optimizing/register_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T10:53:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b408f75_80c29815",
      "range": {
        "startLine": 135,
        "startChar": 39,
        "endLine": 135,
        "endChar": 53
      },
      "revId": "0951aa0a712950fa8257329546be57bcbcea9da4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}