{
  "comments": [
    {
      "key": {
        "uuid": "977021c5_1983cbc7",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-03-07T19:36:02Z",
      "side": 1,
      "message": "This throws a SecurityException when trying to run it on an architecture without intrinsics implemented\n\n(I actually tried to run it with all the compiler intrinsics backed out, to double check the non-intrinsics were correct)",
      "revId": "01f079ccddd891d770052222e37e591f7ffb1dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5791490c_02710cac",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-03-07T19:42:19Z",
      "side": 1,
      "message": "Ok, I got it passing by replacing the above line with this code:\n\n  private static Unsafe getUnsafe() {\n    try {\n      Field f \u003d Unsafe.class.getDeclaredField(\"THE_ONE\");\n      f.setAccessible(true);\n      return (Unsafe) f.get(null);\n    } catch (Exception e) {\n      throw new AssertionError(e);\n    }\n  }\n\n  private static final Unsafe unsafe \u003d getUnsafe();",
      "parentUuid": "977021c5_1983cbc7",
      "revId": "01f079ccddd891d770052222e37e591f7ffb1dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37985533_de75450b",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-07T19:42:20Z",
      "side": 1,
      "message": "I already have used the method from the other test for this. It worked while I was waiting for your CL though.",
      "parentUuid": "977021c5_1983cbc7",
      "revId": "01f079ccddd891d770052222e37e591f7ffb1dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7a15d5f_df2a1f5d",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-03-07T19:48:44Z",
      "side": 1,
      "message": "Not sure I understand?\n\nI am confused as to how it could work since the Unsafe.java code checks that #getUnsafe callers are within the bootclasspath, this test appears to run on a regular classpath.",
      "parentUuid": "37985533_de75450b",
      "revId": "01f079ccddd891d770052222e37e591f7ffb1dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d79c592c_9b758b5a",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-07T19:50:01Z",
      "side": 1,
      "message": "I used the getUnsafe from the existing test. Which is more or less what you suggested. Obviously I was waiting for your CL before running this on all archs, so the getUnsafe worked for now :-)",
      "parentUuid": "f7a15d5f_df2a1f5d",
      "revId": "01f079ccddd891d770052222e37e591f7ffb1dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c26575c5_da0505aa",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2016-03-07T20:18:09Z",
      "side": 1,
      "message": "What existing test ? The existing tests define getUnsafe like so:\n\n  private static Unsafe getUnsafe() throws Exception {\n    Class\u003c?\u003e unsafeClass \u003d Class.forName(\"sun.misc.Unsafe\");\n    Field f \u003d unsafeClass.getDeclaredField(\"theUnsafe\");\n    f.setAccessible(true);\n    return (Unsafe) f.get(null);\n  }\n\nThat\u0027s how application code is \"supposed\" to access Unsafe (as propagated by stackoverflow et al.). Unsafe.getUnsafe has always behaved this way.",
      "parentUuid": "d79c592c_9b758b5a",
      "revId": "01f079ccddd891d770052222e37e591f7ffb1dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}