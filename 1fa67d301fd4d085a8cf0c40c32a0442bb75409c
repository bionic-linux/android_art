{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "372231ce_e01db96c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-04-30T07:26:07Z",
      "side": 1,
      "message": "Hi Hans, Please review. \nThanks,\nWessam",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48fbb555_6c4905d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2021-04-30T09:36:29Z",
      "side": 1,
      "message": "This is unnecessary, as heapprofd_client_api is DT_NEEDED in the .so, so this code will  not run if the library doesn\u0027t exist.\n\nfmayer ~\n% adb pull /apex/com.android.art/lib64/libart.so\n/apex/com.android.art/lib64/libart.so: 1 file pulled, 0 skipped. 59.3 MB/s (9410160 bytes in 0.151s)\nfmayer ~\n% readelf --all libart.so| grep NEEDED\n 0x0000000000000001 (NEEDED)             Shared library: [libartpalette.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libbacktrace.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libbase.so]\n 0x0000000000000001 (NEEDED)             Shared library: [liblog.so]\n 0x0000000000000001 (NEEDED)             Shared library: [liblz4.so]\n 0x0000000000000001 (NEEDED)             Shared library: [liblzma.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libnativebridge.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libnativeloader.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libsigchain.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libunwindstack.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libartbase.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libdexfile.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libprofile.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libdl_android.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libicu.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libstatssocket.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libz.so]\n 0x0000000000000001 (NEEDED)             Shared library: [heapprofd_client_api.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc++.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libm.so]\n 0x0000000000000001 (NEEDED)             Shared library: [libdl.so]",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cac07728_90b4bae4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-04-30T10:03:12Z",
      "side": 1,
      "message": "Thanks Florian, good spotting. It\u0027s a shared_libs dependency of libart: https://cs.android.com/android/platform/superproject/+/master:art/runtime/Android.bp;l\u003d383;drc\u003dd3c45c298b02163e402e1eec97e7ba21a2ba333e\n\nWessam, can you please try cleaning up the dynamic loading altogether instead?",
      "parentUuid": "48fbb555_6c4905d0",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9806cf98_068d2434",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-04-30T10:17:38Z",
      "side": 1,
      "message": "Scratch that - this should be on-demand loaded only as what probably intended. Instead of cleaning it up, please change the shared_libs dependency in Android.bp to runtime_libs.",
      "parentUuid": "cac07728_90b4bae4",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74d133ba_40bd3bb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2021-04-30T10:19:54Z",
      "side": 1,
      "message": "Won\u0027t that complicate the implementation, because we need to keep the dlopen handle around everywhere (or have some weak symbols)? What is the benefit of that?",
      "parentUuid": "9806cf98_068d2434",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed4fec5b_6098b8f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-04-30T10:43:59Z",
      "side": 1,
      "message": "Every opened shared lib means a few dirty pages (I\u0027ve been told), plus the global variables in it (haven\u0027t checked how much of that there is).\n\nYou\u0027re right about the handle - it\u0027s better to keep using the plugin system to keep track of that. Is it possible to just add empty ArtPlugin_Initialize and ArtPlugin_Deinitialize to heapprofd_client_api instead?",
      "parentUuid": "74d133ba_40bd3bb3",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d42ec65_8661ad04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2021-04-30T10:45:52Z",
      "side": 1,
      "message": "No, that isn\u0027t an ART plugin and is used in other places. I think adding them is quite hacky.",
      "parentUuid": "ed4fec5b_6098b8f2",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0154e09b_61dc3588",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-04-30T10:47:58Z",
      "side": 1,
      "message": "Yeah, that\u0027d need to go into heapprofd_client_api.map.txt and require NDK API review etc. I\u0027d be inclined to add an option to the Plugin class to simply skip calling them instead.",
      "parentUuid": "ed4fec5b_6098b8f2",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80ad5277_f3d72bac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2021-04-30T10:50:10Z",
      "side": 1,
      "message": "I am not convinced by the premise though. See https://gist.github.com/fmayer/ecb6e82fa4f1064d719b65c8b6a15856, the library seems to add 4K (1 page) of dirty memory.",
      "parentUuid": "0154e09b_61dc3588",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "904a5236_24123201",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-04-30T11:22:21Z",
      "side": 1,
      "message": "I\u0027m no expert in analysing dirty pages, but I see some other SELinux context(?) thing there that has another page, and it looks attributable to the same library.\n\nIf all it takes is change a shared_libs to a runtime_libs and add a simple flag to the Plugin class I figured the cost is low to keep the approach that apparently already has been implemented. However I really don\u0027t have an informed opinion on the system health impact. Maybe Nicolas does, or the SH team. I have been contacted in the past by them about trying to reduce the number of shared libraries, at least.",
      "parentUuid": "80ad5277_f3d72bac",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "336ef579_11371711",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2021-04-30T11:25:34Z",
      "side": 1,
      "message": "No, that property is loaded by Bionic regardless and will still be there, even if we remove the dependency on heapprofd_client_api.so.\n\nAlso note that most apps are profileable, so only in very few cases we will end up not actually loading this.",
      "parentUuid": "904a5236_24123201",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e59d5f_0976e714",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017430
      },
      "writtenOn": "2021-04-30T15:33:08Z",
      "side": 1,
      "message": "if we\u0027re going to load this in the zygote (which we are), why would this need to be loaded on-demand? I assumed this was a check to make sure that JHP couldn\u0027t be enabled via flags on some weird ART test configuration that could be built without JHP (I don\u0027t know that such a build configuration exists).",
      "parentUuid": "336ef579_11371711",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e728e078_3efe28e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2021-04-30T15:36:06Z",
      "side": 1,
      "message": "But in case t he library isn\u0027t on the system, libart will not link, rather than the dlopen fail. So it doesn\u0027t add any benefit.",
      "parentUuid": "98e59d5f_0976e714",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1912736c_4b2f7c5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-04-30T15:43:29Z",
      "side": 1,
      "message": "No, there\u0027s no reason to do both. Other than that, I don\u0027t have a strong opinion on which way to go. We intend to provide a single prebuilt though, so whatever we do will be the same on stock Android and Go, Wear, etc.",
      "parentUuid": "e728e078_3efe28e6",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edab8266_9408b99e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017430
      },
      "writtenOn": "2021-04-30T15:45:17Z",
      "side": 1,
      "message": "if there\u0027s no configuration (including host tests) where libart could be built without JHP, then removing the dlopen entirely seems correct.",
      "parentUuid": "1912736c_4b2f7c5b",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cca1379_12e4042c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2021-04-30T15:47:04Z",
      "side": 1,
      "message": "In host tests, libart is built without JHP (it is built for ART_TARGET_ANDROID only). But I still don\u0027t see why we need to have a failing redundant dlopen in that case.",
      "parentUuid": "edab8266_9408b99e",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa45665e_656e146e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-04-30T16:59:49Z",
      "side": 1,
      "message": "Ok, so based on all the above points by everyone, it seems the best option reducing overhead as well as not add any extra complexity without losing any ART test config cases is to proceeding with removing EnsurePerfettoJavaHeapProfPlugin. So I will proceed with this unless I hear from anyone otherwise.",
      "parentUuid": "1cca1379_12e4042c",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef38fe02_088a2c42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-04-30T18:51:07Z",
      "side": 1,
      "message": "Resolved per the new change.",
      "parentUuid": "aa45665e_656e146e",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "752d59a5_4ad24bd8",
        "filename": "runtime/runtime.cc",
        "patchSetId": 2
      },
      "lineNbr": 1911,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-04-30T08:54:00Z",
      "side": 1,
      "message": "Add dlerror in the error message?",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51d0c1ce_326cb13e",
        "filename": "runtime/runtime.cc",
        "patchSetId": 2
      },
      "lineNbr": 1911,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-04-30T16:38:52Z",
      "side": 1,
      "message": "Is that actually safely possible? Bionic\u0027s dlerror() returns a pointer to a fixed thread-local buffer. We could copy it into a newly allocated string here. Would that be deallocated by the caller? If the current code works, presumably not :-(",
      "parentUuid": "752d59a5_4ad24bd8",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fcbc0e8_327436fd",
        "filename": "runtime/runtime.cc",
        "patchSetId": 2
      },
      "lineNbr": 1911,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-04-30T16:59:49Z",
      "side": 1,
      "message": "Per the other comment we are proceeding with the removal of the check so this should resolve this comment as well. I am assuming everyone here is ok with removal of EnsurePerfettoJavaHeapProfPlugin per the other comment and that we are not missing any cases.",
      "parentUuid": "51d0c1ce_326cb13e",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4903c70f_2369913b",
        "filename": "runtime/runtime.cc",
        "patchSetId": 2
      },
      "lineNbr": 1911,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-04-30T18:51:07Z",
      "side": 1,
      "message": "Resolved per the new change.",
      "parentUuid": "5fcbc0e8_327436fd",
      "revId": "1fa67d301fd4d085a8cf0c40c32a0442bb75409c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}