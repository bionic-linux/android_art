{
  "comments": [
    {
      "key": {
        "uuid": "9f448158_38dfcde2",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 634,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:30:04Z",
      "side": 1,
      "message": "No need any more, the compiler falls back to interpreter and there is no quick frame to deal with at runtime.",
      "range": {
        "startLine": 634,
        "startChar": 10,
        "endLine": 634,
        "endChar": 21
      },
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_cf2d9d04",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-11-21T14:09:27Z",
      "side": 1,
      "message": "This is inherited from 32bit ARM.  What if class-\u003estatus_ \u003e kStatusInitialized ? Shouldn\u0027t it be B(ne, ...) ?",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_2f6c2929",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:30:04Z",
      "side": 1,
      "message": "I don\u0027t understand. If it\u0027s greater or equal it\u0027s initialized, so nothing to do.",
      "parentUuid": "9f448158_cf2d9d04",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_7acc21c8",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-11-24T16:39:46Z",
      "side": 1,
      "message": "What I meant here is - if class-\u003estatus_ has a random, higher than kStatusInitialized value we should not go through. Thus for every !\u003d kStatusInitialized value of class-\u003estatus_ we should go to slow_path-\u003eGetEntryLabel().\n\n__ B(ne, slow_path-\u003eGetEntryLabel()",
      "parentUuid": "7f526d24_2f6c2929",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_b82a9de8",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 817,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T17:28:46Z",
      "side": 1,
      "message": "Can we have something greater than kStatusInitialized?",
      "parentUuid": "7f526d24_7acc21c8",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f4d55af_3095d0a2",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 818,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-11-26T01:22:25Z",
      "side": 1,
      "message": "It\u0027s probably unflushed store buffers and outstanding loads rather than caches.  And this isn\u0027t the place to teach people about memory ordering.  Maybe just delete that part of the comment, leaving\n// Even if the initialized flag is set, we need to ensure consistent ...\n\nThat\u0027s not part of the proposed change, but while we\u0027re touching this comment ...",
      "range": {
        "startLine": 818,
        "startChar": 73,
        "endLine": 818,
        "endChar": 79
      },
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_0fee054a",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 826,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-11-21T14:09:27Z",
      "side": 1,
      "message": "Hans: Do we always have a \"dmb ish st\" before setting the class status to initialised? If so this relaxed order should be sufficient.",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f572141_dad00106",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 826,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-11-26T01:22:25Z",
      "side": 1,
      "message": "AFAICT, we effectively set the initialized flag using a Java volatile store.  That\u0027s overkill, but it\u0027ll do, and it\u0027s not performance critical.  I suspect just a dmb st would not be correct because loads in the initialization code could see stores in code that follows the initialization.  You probably need a full dmb.  Thus the comment looks wrong to me, but the code looks correct.\n\nTheoretically an acquire load should be cheaper.  You might know whether it is in practice.\n\nThis may not be the best way to do the initialization check due to the barrier/ordering costs.  We\u0027ve been discussing some possible alternatives. But that\u0027s a separate issue.",
      "parentUuid": "9f448158_0fee054a",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_efb9814e",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1298,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-11-21T14:09:27Z",
      "side": 1,
      "message": "Would it be worth moving  this logic in VisitSuspend? (following-\u003eIsGoto() ?)\n\nThere are currently 3 places where we decide to add/remove Suspend Checks:\n* HGoto\n* HSuspendCheck\n* instruction_simplifier.cc",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_780e75da",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1298,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:30:04Z",
      "side": 1,
      "message": "So the logic in the backends should be where to place these suspend checks. instruciton_simplifier will just remove them from the graph.\n\nA backend could as well decide not to do anything and generate the suspend checks where it sees them.",
      "parentUuid": "9f448158_efb9814e",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_8f831d62",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:30:04Z",
      "side": 1,
      "message": "We\u0027re not using counters on arm anymore. Can we get rid of this as well for arm64?",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 71
      },
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_f86b855e",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-11-24T16:39:46Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "7f526d24_8f831d62",
      "revId": "b545fdff2395ba20a6d75861a08354bf69659519",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}