{
  "comments": [
    {
      "key": {
        "uuid": "eddc7e98_68578bcc",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T20:11:39Z",
      "side": 1,
      "message": "Rename this kEnableDexLayoutOptimizations?",
      "range": {
        "startLine": 62,
        "startChar": 22,
        "endLine": 62,
        "endChar": 46
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b943e0c_b045ed28",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-02-13T21:12:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eddc7e98_68578bcc",
      "range": {
        "startLine": 62,
        "startChar": 22,
        "endLine": 62,
        "endChar": 46
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d1029e8_cc4700ef",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 4
      },
      "lineNbr": 815,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T20:11:39Z",
      "side": 1,
      "message": "IsInvokeStaticOrDirect?",
      "range": {
        "startLine": 813,
        "startChar": 0,
        "endLine": 815,
        "endChar": 42
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c1e353e_40e3f6cd",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 4
      },
      "lineNbr": 815,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-02-13T21:12:11Z",
      "side": 1,
      "message": "Done, does that cover the super case?",
      "parentUuid": "2d1029e8_cc4700ef",
      "range": {
        "startLine": 813,
        "startChar": 0,
        "endLine": 815,
        "endChar": 42
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c351317_bcbbc82f",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 4
      },
      "lineNbr": 815,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T23:08:55Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "2c1e353e_40e3f6cd",
      "range": {
        "startLine": 813,
        "startChar": 0,
        "endLine": 815,
        "endChar": 42
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7194dab7_3b96455c",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T20:11:39Z",
      "side": 1,
      "message": "Do you really need this? Sounds to me the runtime could infer it.",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 43
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "752ac02c_10d9c389",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-02-13T21:12:11Z",
      "side": 1,
      "message": "How would you do that, add extra resolution trampolines for different invoke types?",
      "parentUuid": "7194dab7_3b96455c",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 43
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "593e849c_a5048842",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T23:08:55Z",
      "side": 1,
      "message": "No. Based on the method_id you can get name and signature, and look things up. Doesn\u0027t Java prevent overloading a private method with a static method?",
      "parentUuid": "752ac02c_10d9c389",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 43
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80868383_f922ee78",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-02-14T01:22:03Z",
      "side": 1,
      "message": "There is a specific incompatible class change check that uses the invoke type, see ClassLinker::ResolveMethod\u003cClassLinker::kForceICCECheck\u003e. Inferring the invoke type method seems like it would no longer enforce this check.",
      "parentUuid": "593e849c_a5048842",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 43
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ec5129f_a564d707",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-14T13:21:02Z",
      "side": 1,
      "message": "Then in the compiler, we can make sure it\u0027s ok by calling the unresolved variant. If we pass the resolution trampoline, we can make sure we *will not* throw an ICCE, and only use the trampoline for lazy linking.",
      "parentUuid": "80868383_f922ee78",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 43
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31cf5480_359be6ee",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-02-14T20:43:44Z",
      "side": 1,
      "message": "That seems like a lot of complexity, invoke_type has quite a few uses in artQuickResolutionTrampoline. I don\u0027t see why we can\u0027t just merge the current approach and improve it after. Also it is harder to gauge if it would be correct for things like secondary dexes.",
      "parentUuid": "5ec5129f_a564d707",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 43
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "221d75ec_9f4919d4",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-14T22:42:24Z",
      "side": 1,
      "message": "1) This only applies to static/direct methods, so the compiler *must* resolve it. In fact instruction_builder.cc already forces the ICCE check, so the Unresolved call would be set if there was an ICCE.\n\n2) Secondary dexes are not compiled with a classpath that may change, so we have no problems there.\n\nThere shouldn\u0027t be any complexity really. In artQuickResolutionTrampoline , you just need to call FindDirectMethod on the class you\u0027ve resolved through the method_id, passing the name and signature also computed from the method_id.\n\nWhat you gain from fixing it now is avoiding 1 bit for the invoke type per invoke info you\u0027re adding. Making it a stronger point that the overhead of adding things for dexlayout is minimal.",
      "parentUuid": "31cf5480_359be6ee",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 43
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87da7b2c_82624590",
        "filename": "compiler/optimizing/stack_map_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 875,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T20:11:39Z",
      "side": 1,
      "message": "Check the compile time flag?",
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2901ff49_4ee660d5",
        "filename": "compiler/optimizing/stack_map_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 875,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-02-13T21:12:11Z",
      "side": 1,
      "message": "The compile time check is done at the caller, don\u0027t we want this code to be tested even if the flag is false? AddInvoke does not check any flags.",
      "parentUuid": "87da7b2c_82624590",
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24707960_6b30fd64",
        "filename": "compiler/optimizing/stack_map_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 875,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T23:08:55Z",
      "side": 1,
      "message": "Oh right, nevermind.",
      "parentUuid": "2901ff49_4ee660d5",
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22ac68b5_11c4572d",
        "filename": "runtime/stack_map.h",
        "patchSetId": 4
      },
      "lineNbr": 1241,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-02-13T20:11:39Z",
      "side": 1,
      "message": "Annoying this cannot be put under the flag. I guess the encoding being bit-size, the code size increase is very minimal when the flag is false?",
      "range": {
        "startLine": 1241,
        "startChar": 0,
        "endLine": 1241,
        "endChar": 51
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d35abb24_50ba5211",
        "filename": "runtime/stack_map.h",
        "patchSetId": 4
      },
      "lineNbr": 1241,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-02-13T21:12:11Z",
      "side": 1,
      "message": "Probably a couple hundred KB, I have plans to clean this up later by only writing the encoding if the table size is not 0.",
      "parentUuid": "22ac68b5_11c4572d",
      "range": {
        "startLine": 1241,
        "startChar": 0,
        "endLine": 1241,
        "endChar": 51
      },
      "revId": "2d2eb9086474bd75b8eff55cd3bc9cec6b64dfde",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}