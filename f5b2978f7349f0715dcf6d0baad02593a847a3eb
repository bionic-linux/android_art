{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c06b488c_4150abdd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-06-06T18:34:35Z",
      "side": 1,
      "message": "The BloatBuster findings are weird, so I started another presubmit.",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9752ac7f_33513025",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-06-06T19:56:18Z",
      "side": 1,
      "message": "The BloatBuster findings weren\u0027t a fluke. Here are the largest bloats:\n\n```\nlib/libart.so: +48.8 KiB, +0.5%\nlib/libartbase.so: +10.8 KiB, +3.0%\nlib64/libartbase.so: +16.0 KiB, +4.5%\nlib64/libdexfile.so: +16.1 KiB, +6.6%\n```\n\nCurious that some libs only grow for one ISA but not the other. Is this expected from changing `cpp_std`?",
      "parentUuid": "c06b488c_4150abdd",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e373c7d7_2e714164",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-06-06T19:59:51Z",
      "side": 1,
      "message": "i asked rprichard the same question, and he said \"C++20 makes a bunch of libc++ functions constexpr, so maybe that could affect inlining decisions?\".",
      "parentUuid": "9752ac7f_33513025",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc45402c_c16fdec9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-06-06T20:14:45Z",
      "side": 1,
      "message": "Would those be different between 32- and 64-bit? @rprichard@google.com",
      "parentUuid": "e373c7d7_2e714164",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0056ed2d_1773d113",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2024-06-06T23:08:03Z",
      "side": 1,
      "message": "The constexpr-ness wouldn\u0027t vary by architecture. I believe inlining relies on heuristics in Clang, so maybe that could vary by architecture?",
      "parentUuid": "fc45402c_c16fdec9",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ba0ee55_1684fdfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2024-06-06T23:18:16Z",
      "side": 1,
      "message": "There\u0027s a similar increase in `lib64/libart.so`\u0027s `.txt` which is masked by a similar decrease in `unmapped`:\n\n```\nlib64/libart.so:\n+0.6% +48.9Ki +0.6% +48.9Ki .text\n...\n-1.6% -47.5Ki [ \u003d ] 0 [Unmapped]\n```",
      "parentUuid": "0056ed2d_1773d113",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7990247_4ad854ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-06-10T13:07:25Z",
      "side": 1,
      "message": "All right, so what\u0027s that `unmapped` section then?\n\nDo you see similar size increases when switching other native libraries to C++ 20?",
      "parentUuid": "5ba0ee55_1684fdfc",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79f92883_47f6860f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-06-10T13:31:03Z",
      "side": 1,
      "message": "\u003e Do you see similar size increases when switching other native libraries to C++ 20?\n\n(we switched the whole platform months ago. i\u0027m just trying to move over the handful of holdouts, after we discovered the c++17/c++20 std::string incompatibility that makes it more dangerous to just ignore the folks who stayed behind.)",
      "parentUuid": "f7990247_4ad854ca",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a164cd2_814c183b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-10T13:44:09Z",
      "side": 1,
      "message": "Frankly, I don\u0027t think that +152KiB is a big increase when changing the language version.",
      "parentUuid": "79f92883_47f6860f",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83457f8a_d4be042a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-06-10T14:40:45Z",
      "side": 1,
      "message": "\u003e we switched the whole platform months ago.\n\nOk, and did you see such size increases for them? I agree that ~0.5% (although up to 6% for some specific libs) isn\u0027t anything that\u0027d block this, but it\u0027d be interesting to know if it\u0027s a generic cost or if ART is special in some way.",
      "parentUuid": "7a164cd2_814c183b",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52a1c837_a040ad2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-06-10T14:40:45Z",
      "side": 1,
      "message": "+rpl, FYI on the BloatBuster override.",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45d98dc4_6ca9d27a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-06-10T16:09:48Z",
      "side": 1,
      "message": "\u003e Ok, and did you see such size increases for them? I agree that ~0.5% (although up to 6% for some specific libs) isn\u0027t anything that\u0027d block this, but it\u0027d be interesting to know if it\u0027s a generic cost or if ART is special in some way.\n\n\"not that i recall\", though it\u0027s possible that -- as with pirama\u0027s example above -- some things got bigger and some things got smaller and cancelled out (since one single CL switched 99% of the tree over).",
      "parentUuid": "83457f8a_d4be042a",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d28a1906_2b8ab6d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-12T15:09:45Z",
      "side": 1,
      "message": "I `objdump`ed arm64 `libart.so` without (\"before\") and with (\"after\") this CL, found the first function that started at a different offset and looked at the disassembly of the function before that. There were some minor differences in spilling, but the first significant difference was that the\n\n      bl [...] \u003c_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcm@plt\u003e\n\nfrom \"before\" was actually inlined in \"after\". If we\u0027re inlining more of `std::string` functions with c++20, the code size growth is not surprising, even if it\u0027s the rarely used `rfind(char)`.\n\nI think we should just accept this and submit.",
      "parentUuid": "45d98dc4_6ca9d27a",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1680e231_87aa7034",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-13T09:18:10Z",
      "side": 1,
      "message": "There are also some additional jumps over moves/loads, presumably due to register allocator doing a worse job of assigning the same locations to Phi inputs.\n\nI\u0027m marking this as resolved and I\u0027ll re-run presubmit before trying to submit this myself.",
      "parentUuid": "d28a1906_2b8ab6d7",
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90ebe2fc_758725a8",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-10T13:22:10Z",
      "side": 1,
      "message": "I just learned that C++20 added feature testing macros. It is really disappointing that you can use C++20 and yet, you cannot rely on the presence of these fundamental features.\n\nBut https://en.cppreference.com/w/cpp/feature_test says that the feature macros are predefined and there does not seem to be a word about these macros being optional. I\u0027m confused.",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 43
      },
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ed306d1_89164c0a",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-06-10T13:31:03Z",
      "side": 1,
      "message": "\u003e It is really disappointing that you can use C++20 and yet, you cannot rely on the presence of these fundamental features.\n\ni\u0027m not sure what you mean --- all implementations of all things are a work in progress. (especially for languages, where the first question is always \"do you mean the _language_ or the _library_?\".)\n\nthis was always true, and will probably always be true for anything involving a standards organization. (and the trade-offs with a non-standards-body-owned language don\u0027t appeal to me, at least, though you\u0027re welcome to use those proprietary languages if you prefer :-) )\n\nwhat\u0027s different with the c++20 feature testing stuff is you can ask the more relevant question of \"do i have this specific piece of c++20 that i need?\". iso c has been moving in this direction too.\n\n\u003e But https://en.cppreference.com/w/cpp/feature_test says that the feature macros are predefined and there does not seem to be a word about these macros being optional. I\u0027m confused.\n\nbecause if you have a complete fully conformant implementation, you\u0027ll have them all. see also c or POSIX or whatever. i think they copied the whole \"the values are dates\" thing from POSIX, which has long used that to let you ask \"which _version_ of this feature do i have?\".",
      "parentUuid": "90ebe2fc_758725a8",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 43
      },
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "814e750f_8aecbb44",
        "filename": "libartbase/base/bit_struct_detail.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-10T13:44:09Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5ed306d1_89164c0a",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 43
      },
      "revId": "f5b2978f7349f0715dcf6d0baad02593a847a3eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}