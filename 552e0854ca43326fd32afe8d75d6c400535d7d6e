{
  "comments": [
    {
      "key": {
        "uuid": "c8435699_50361415",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 1317,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-17T11:13:02Z",
      "side": 1,
      "message": "With minor modifications to CanEncodeConstantAsImmediate() you can embed constants as well. Constants have the advantage that they can be adjusted by 1 to change kCondGT-\u003ekCondGE or kCondLE-\u003ekCondLT, see comment below.",
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4995882_5a5d29d2",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 1317,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-23T12:54:28Z",
      "side": 1,
      "message": "I managed to do this without any changes to CanEncodeConstantAsImmediate().",
      "parentUuid": "c8435699_50361415",
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7d3e4e2_ef221f6b",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 1317,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-23T14:39:21Z",
      "side": 1,
      "message": "CanEncodeConstantAsImmediate() is intended for the location builder, so that we can ask the register allocator to materialize the constant in a register if it cannot be fully embedded in instructions. The way you implemented this is PS2, you\u0027re checking only when you start generating code and you may need to materialize constants, especially in the path that\u0027s using branches. When those constants are used by multiple instructions, you materialize them multiple times.\n\nAnother advantage of making the choice in the location builder is that you can essentially guarantee that CanGenerateSelectITBlock() is true (for non-FP) in the codegen, though this would require kCondEQ/NE/B/BE/A/AE for long to use the CMP+SBCS approach because we have no way to tell the register allocator to give us a low register.",
      "parentUuid": "f4995882_5a5d29d2",
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6251ab86_a173b0d7",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 1326,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-17T11:13:02Z",
      "side": 1,
      "message": "You can extend this to kCondGE and kCondLT with\n\n    CMP left_low, right_low\n    SUBS ip, left_high, right_high\n\n(Same code size.)",
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5354b9ad_6c3585c9",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 1326,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-23T12:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6251ab86_a173b0d7",
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c00d3ec_fd255592",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2110,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-17T11:13:02Z",
      "side": 1,
      "message": "Alternatively, we could revert to the old behavior where the first input is in register and output is SameAsFirstInput().",
      "range": {
        "startLine": 2109,
        "startChar": 0,
        "endLine": 2110,
        "endChar": 39
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c9ac5b_6096206e",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2110,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-23T12:54:28Z",
      "side": 1,
      "message": "I\u0027ll leave it as it is, as I don\u0027t see an advantage.",
      "parentUuid": "4c00d3ec_fd255592",
      "range": {
        "startLine": 2109,
        "startChar": 0,
        "endLine": 2110,
        "endChar": 39
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4bf2988_338f3ba3",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2110,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-24T14:03:16Z",
      "side": 1,
      "message": "I thought a little bit more about this, and I think I changed my mind, but I\u0027d like to check with you if my reasoning is correct: If we set Location::kOutputOverlap, then we always force the register allocator to allocate a new register (or pair) for the output, even if the first input is not live after this point. However, with Location::SameAsFirstInput() in the latter case the register (or pair) allocated to the first input will be reused. Otherwise, if the first input \nremains live afterwards, then there will be another allocated register and a (implicit) parallel move, so the situation will be the same as Location::SameAsFirstInput(). In other words, the change potentially makes life a little bit easier for the register allocator, so it is beneficial. Does that sound right?",
      "parentUuid": "12c9ac5b_6096206e",
      "range": {
        "startLine": 2109,
        "startChar": 0,
        "endLine": 2110,
        "endChar": 39
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "832e722f_6462e7f1",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2125,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-17T11:13:02Z",
      "side": 1,
      "message": "The comment about partial IT block deprecation applies here as well, right? We could pass the output register here and accept low register \"out\" with an 8-bit unsigned immediate.",
      "range": {
        "startLine": 2125,
        "startChar": 9,
        "endLine": 2125,
        "endChar": 25
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7905fb73_d81fc4e1",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2125,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-23T12:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "832e722f_6462e7f1",
      "range": {
        "startLine": 2125,
        "startChar": 9,
        "endLine": 2125,
        "endChar": 25
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97b1b0e8_eff9203c",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2151,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-17T11:13:02Z",
      "side": 1,
      "message": "Use two IT+MOV sequences for long?",
      "range": {
        "startLine": 2149,
        "startChar": 0,
        "endLine": 2151,
        "endChar": 49
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a37c095_7dbf5410",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2151,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-23T12:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97b1b0e8_eff9203c",
      "range": {
        "startLine": 2149,
        "startChar": 0,
        "endLine": 2151,
        "endChar": 49
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17558e12_20b98496",
        "filename": "compiler/optimizing/register_allocator_linear_scan.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-17T11:13:02Z",
      "side": 1,
      "message": "This fits on one line now.",
      "range": {
        "startLine": 638,
        "startChar": 0,
        "endLine": 639,
        "endChar": 56
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1023f9d5_1ec00243",
        "filename": "compiler/optimizing/register_allocator_linear_scan.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-23T12:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17558e12_20b98496",
      "range": {
        "startLine": 638,
        "startChar": 0,
        "endLine": 639,
        "endChar": 56
      },
      "revId": "552e0854ca43326fd32afe8d75d6c400535d7d6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}