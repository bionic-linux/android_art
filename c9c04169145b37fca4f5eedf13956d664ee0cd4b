{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5c7d21f9_f9f94590",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 6
      },
      "lineNbr": 606,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-05-24T08:16:09Z",
      "side": 1,
      "message": "Note: For better fast-path in compiled code, we shall also want to save A\u003cn\u003e and T\u003cn\u003e registers.",
      "range": {
        "startLine": 606,
        "startChar": 4,
        "endLine": 606,
        "endChar": 71
      },
      "revId": "c9c04169145b37fca4f5eedf13956d664ee0cd4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1573ea1_04f77001",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 6
      },
      "lineNbr": 607,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-05-24T08:16:09Z",
      "side": 1,
      "message": "Note: The assembler is currently using T.6 (X31) for long unconditional branches (see also the macro `tail` in the RISC-V spec), so maybe we should use the same reserved temporary register here.",
      "range": {
        "startLine": 607,
        "startChar": 7,
        "endLine": 607,
        "endChar": 9
      },
      "revId": "c9c04169145b37fca4f5eedf13956d664ee0cd4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04909ee7_11e8ed76",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 6
      },
      "lineNbr": 607,
      "author": {
        "id": 1998570
      },
      "writtenOn": "2023-05-26T02:07:33Z",
      "side": 1,
      "message": "The `tail` pseudo instruction appears to use t1\u003dx6?\n\nHappy to change it to t.6 or t1, but I had a little trouble describing why we picked it. Is it to free up t0 for common uses elsewhere?",
      "parentUuid": "c1573ea1_04f77001",
      "range": {
        "startLine": 607,
        "startChar": 7,
        "endLine": 607,
        "endChar": 9
      },
      "revId": "c9c04169145b37fca4f5eedf13956d664ee0cd4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ddc565c_79ff2deb",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 6
      },
      "lineNbr": 607,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-05-29T09:23:14Z",
      "side": 1,
      "message": "This function promises to preserve even temporary registers, so the usage of T0 (and T1 below) is not in line with the calling convention comment above.\n\nWe can reserve some temps which do not need to be preserved, for example T5-6 (just like we reserve IP0-1 on ARM64), or we can actually save these temps on the stack before using them (as we do on x86).",
      "parentUuid": "04909ee7_11e8ed76",
      "range": {
        "startLine": 607,
        "startChar": 7,
        "endLine": 607,
        "endChar": 9
      },
      "revId": "c9c04169145b37fca4f5eedf13956d664ee0cd4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2eb39a97_77480fe5",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 6
      },
      "lineNbr": 608,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-05-24T08:16:09Z",
      "side": 1,
      "message": "Testing bit 63 from a sign-extended bit 31? SGTM.",
      "range": {
        "startLine": 608,
        "startChar": 50,
        "endLine": 608,
        "endChar": 67
      },
      "revId": "c9c04169145b37fca4f5eedf13956d664ee0cd4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}