{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "90a70afd_1becebb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-25T16:40:45Z",
      "side": 1,
      "message": "Friendly ping",
      "revId": "273c54e7db06162331abfe4aec7b3f7b6d4c3a34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "734ddc3d_981a9cff",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 797,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-26T10:21:06Z",
      "side": 1,
      "message": "I think this optimization is a lot more complicated than it needs to be. After `ConnectSuccessiveBlocks()`, we should just look for a simple diamond pattern (though the bottom block can have more than two predecessors).",
      "range": {
        "startLine": 797,
        "startChar": 4,
        "endLine": 797,
        "endChar": 38
      },
      "revId": "273c54e7db06162331abfe4aec7b3f7b6d4c3a34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7d7fe43_64f3e6a1",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 797,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-26T14:49:59Z",
      "side": 1,
      "message": "That\u0027s what I started with but it doesn\u0027t work for e.g.:\n```\n    public static void andBoolean2(boolean a, boolean b) {\n        if (a \u0026\u0026 b) {\n            $inline$empty();\n        } else {\n            $inline$empty2();\n        }\n    }\n```\n\nThe `if (a \u0026\u0026 b)` are two `HIfs` in our graphs, where we don\u0027t have a clear double diamond shape.\n```\n    0\n    |\n    1 IF\n    |\\\n    | 7----\n    |     |\n    2 IF  |\n   / \\    |\n   3  8  / \n   |  \\ /  \n   |   4\n   | /\n   |/\n   5 ReturnVoid\n```\nwhere 3, 4, 7, 8 are single GOTO blocks",
      "parentUuid": "734ddc3d_981a9cff",
      "range": {
        "startLine": 797,
        "startChar": 4,
        "endLine": 797,
        "endChar": 38
      },
      "revId": "273c54e7db06162331abfe4aec7b3f7b6d4c3a34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "734f650c_7cdabb24",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 797,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-30T13:17:44Z",
      "side": 1,
      "message": "If `4` is a single-goto block with multiple predecessors and `5` has multiple predecessors and no Phis, edges from `7` and `8` should be redirected to `5`. This can be done independently of the current optimization. (Even if `4` and `5` had Phis, I\u0027d argue that duplicating inputs for Phis in `5` is a cost worth paying for removing the block `4`.)\n\nIf `5` is also a single-goto block, this loop shall proceed to the next block and the `merge_true !\u003d merge_false` check below shall trigger even though we could actually do the optimization. Maybe that check should be replaced with `visited_blocks.find(merge_false) \u003d\u003d visited_blocks.end()` and the `AddSuccessor()` below should use `false_successor` instead of `true_successor`.",
      "parentUuid": "d7d7fe43_64f3e6a1",
      "range": {
        "startLine": 797,
        "startChar": 4,
        "endLine": 797,
        "endChar": 38
      },
      "revId": "273c54e7db06162331abfe4aec7b3f7b6d4c3a34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3af45a19_d485faf2",
        "filename": "test/2266-checker-remove-empty-ifs/info.txt",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-26T10:21:06Z",
      "side": 1,
      "message": "Add new-line.",
      "revId": "273c54e7db06162331abfe4aec7b3f7b6d4c3a34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b94dabdc_e522f4b2",
        "filename": "test/2266-checker-remove-empty-ifs/info.txt",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-26T14:49:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3af45a19_d485faf2",
      "revId": "273c54e7db06162331abfe4aec7b3f7b6d4c3a34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}