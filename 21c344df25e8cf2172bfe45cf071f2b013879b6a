{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2287cfc5_f52f4bb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-01-14T14:53:00Z",
      "side": 1,
      "message": "Orion, Vladimir, PTAL - this has been validated by Egor.",
      "revId": "21c344df25e8cf2172bfe45cf071f2b013879b6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e4279d7_fce1b878",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-14T15:43:12Z",
      "side": 1,
      "message": "What if this fails?",
      "revId": "21c344df25e8cf2172bfe45cf071f2b013879b6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2c2f295_990c9fa6",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-01-14T16:01:57Z",
      "side": 1,
      "message": "It\u0027s a fair question: we default to assuming DupCloexec succeeds in quite a few places.",
      "parentUuid": "4e4279d7_fce1b878",
      "revId": "21c344df25e8cf2172bfe45cf071f2b013879b6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "991aab31_1e879fbc",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-01-19T14:46:19Z",
      "side": 1,
      "message": "We could define the behavior here: would you prefer that we abort if it fails?",
      "parentUuid": "b2c2f295_990c9fa6",
      "revId": "21c344df25e8cf2172bfe45cf071f2b013879b6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a17604d2_71aac5e0",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-19T15:11:48Z",
      "side": 1,
      "message": "Yes, we should return `dex2oat::ReturnCode::kOther` if this fails. (We should not run out of descriptors under normal circumastances.)",
      "parentUuid": "991aab31_1e879fbc",
      "revId": "21c344df25e8cf2172bfe45cf071f2b013879b6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0b60bee_1b4d7e10",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 2797,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-01-14T15:46:10Z",
      "side": 1,
      "message": "These could be File instances local to Dex2oat::DoCompilation (or Dex2oat::Dex2oat) which would keep clean-up super simple and avoid tainting the core state here. Just flagging as an option as I\u0027m quite wary of the bare fd use in our code base.",
      "range": {
        "startLine": 2796,
        "startChar": 0,
        "endLine": 2797,
        "endChar": 79
      },
      "revId": "21c344df25e8cf2172bfe45cf071f2b013879b6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "892fc8d4_ae5d38ad",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 2
      },
      "lineNbr": 2797,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-01-19T14:46:19Z",
      "side": 1,
      "message": "wdym avoid taiting the core state?",
      "parentUuid": "d0b60bee_1b4d7e10",
      "range": {
        "startLine": 2796,
        "startChar": 0,
        "endLine": 2797,
        "endChar": 79
      },
      "revId": "21c344df25e8cf2172bfe45cf071f2b013879b6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}