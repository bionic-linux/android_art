{
  "comments": [
    {
      "key": {
        "uuid": "18d6020d_6043f2e7",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-13T15:13:47Z",
      "side": 1,
      "message": "I thought we agreed to get rid of current_block here and let the analysis handle this. I don\u0027t think holding the state in the generic context is good. It seems out of place for the context class to maintain the current block. The analysis should have the logic to maintain this.",
      "range": {
        "startLine": 39,
        "startChar": 1,
        "endLine": 42,
        "endChar": 2
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18d6020d_a01fbae5",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-13T15:58:27Z",
      "side": 1,
      "message": "Did we agreed on this? It\u0027s giving the feeling that you can randomly write-access blocks, which is completely wrong since it expects a topological traversal to have a sound MergeBlocks operation.",
      "parentUuid": "18d6020d_6043f2e7",
      "range": {
        "startLine": 39,
        "startChar": 1,
        "endLine": 42,
        "endChar": 2
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98e912d2_bfbef3ab",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-13T15:13:47Z",
      "side": 1,
      "message": "I still think this doesn\u0027t work. When you process the worklist you will be left with the context set to the last block (as you do this in VisitBasiBlock) and thus you might have wrong information in the context.",
      "range": {
        "startLine": 66,
        "startChar": 2,
        "endLine": 66,
        "endChar": 17
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38cf4674_01c30a9b",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-13T15:58:27Z",
      "side": 1,
      "message": "That\u0027s why the Worklist does not access the context anymore",
      "parentUuid": "98e912d2_bfbef3ab",
      "range": {
        "startLine": 66,
        "startChar": 2,
        "endLine": 66,
        "endChar": 17
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8df0a22_9ea5bd3f",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-13T15:13:47Z",
      "side": 1,
      "message": "Having this here lowers the precision that you get. Previously this will have the information from after the fix point iteration. Now you don\u0027t have that information anymore.\n\nhere\u0027s an example:\n\nFoo a \u003d null;\n\nfor (int i \u003d 0; ...) {\na \u003d new Foo();\n}\n\nb.foo_field \u003d a;  // a can\u0027t be null here. But your change will make us miss it.",
      "range": {
        "startLine": 281,
        "startChar": 17,
        "endLine": 281,
        "endChar": 38
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38cf4674_4196f29f",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-13T15:58:27Z",
      "side": 1,
      "message": "Oh okay, then I did a mistake (cf my previous comment) I will move this back into the instruction simplifier",
      "parentUuid": "d8df0a22_9ea5bd3f",
      "range": {
        "startLine": 281,
        "startChar": 17,
        "endLine": 281,
        "endChar": 38
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8d84e3c_3f1107de",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 295,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-13T15:13:47Z",
      "side": 1,
      "message": "This will not have the effect you desire. Phis are not returned in GetInstructions(). See VisitBasicBlock() how visiting phis works.\n\nTry to write tests who exercise all new code path that you introduce.",
      "range": {
        "startLine": 295,
        "startChar": 17,
        "endLine": 295,
        "endChar": 25
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98e912d2_ff3ddb97",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 295,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-13T15:58:27Z",
      "side": 1,
      "message": "I need some more testing before addressing this comment. I\u0027m really surprised.",
      "parentUuid": "f8d84e3c_3f1107de",
      "range": {
        "startLine": 295,
        "startChar": 17,
        "endLine": 295,
        "endChar": 25
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8d84e3c_7f346f68",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 311,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-13T15:13:47Z",
      "side": 1,
      "message": "shouldn\u0027t this be merge? I\u0027m surprized that I don\u0027t see any Context::Merge in this algorithm...",
      "range": {
        "startLine": 311,
        "startChar": 17,
        "endLine": 311,
        "endChar": 21
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8d84e3c_fff15f0c",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 5
      },
      "lineNbr": 311,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-13T15:58:27Z",
      "side": 1,
      "message": "NullInfo::Merge being defined in terms of ||, this is strictly equivalent. If you prefer, I can write it like this:\n\n    for (size_t i \u003d 0; i \u003c phi-\u003eInputCount(); i++) {\n        ctx_.MergeProperty(ctx, ctx_.GetProperty(phi-\u003eInputAt(i)));\n    }\n    phi-\u003eSetCanBeNull(ctx_.GetProperty(phi));\n\nbut that would reduce the performances.",
      "parentUuid": "f8d84e3c_7f346f68",
      "range": {
        "startLine": 311,
        "startChar": 17,
        "endLine": 311,
        "endChar": 21
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8df0a22_deaf4519",
        "filename": "test/444-checker-nce/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-13T15:13:47Z",
      "side": 1,
      "message": "this is good. Add another tests for loops. you might catch some issues with the approach.",
      "range": {
        "startLine": 240,
        "startChar": 14,
        "endLine": 240,
        "endChar": 32
      },
      "revId": "1eb565fb030821a9f347b1e95c04fda7f3d16dae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}