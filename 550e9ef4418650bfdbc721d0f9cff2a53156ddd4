{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68ea76d7_df77a231",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-02T09:53:45Z",
      "side": 1,
      "message": "Vladimir PTAL",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daf38f9c_7c3697bc",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 8
      },
      "lineNbr": 2275,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-02T15:55:14Z",
      "side": 1,
      "message": "If `value_can_be_null` is true, the write barrier is conditional on `value !\u003d nullptr`. If we\u0027re storing `value1` and `value2` and eliminate one of the write barriers, the other one needs to happen if `value1 !\u003d nullptr || value2 !\u003d nullptr` but we do not currently have the other value available when emitting the write barrier we kept.\n\nWe need to collect all values as extra inputs of the store and `OR` them for the write barrier check. Alternatively, we can `OR` them as we go with\n\n    Set(value1)/no-write-barrier\n    merged12 \u003d OR(value1, value2)\n    Set(value2)/no-write-barrier\n    merged123 \u003d OR(merged12, value3)\n    Set(value3)/write-barrier-if(merged123 !\u003d 0)\n\nwhere the `OR` needs to accept both references and merged values.",
      "range": {
        "startLine": 2275,
        "startChar": 47,
        "endLine": 2275,
        "endChar": 64
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b96a4069_fb1a9136",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 8
      },
      "lineNbr": 2275,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-09T15:41:31Z",
      "side": 1,
      "message": "Added a flag that it is set when we are relying on that instruction\u0027s write barrier. In those cases, we don\u0027t do the `if (null)` runtime optimization.",
      "parentUuid": "daf38f9c_7c3697bc",
      "range": {
        "startLine": 2275,
        "startChar": 47,
        "endLine": 2275,
        "endChar": 64
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e28f109_afc88bcb",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 8
      },
      "lineNbr": 5693,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-02T15:55:14Z",
      "side": 1,
      "message": "Remove",
      "range": {
        "startLine": 5693,
        "startChar": 49,
        "endLine": 5693,
        "endChar": 88
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13b90e1a_03765cf3",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 8
      },
      "lineNbr": 5693,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e28f109_afc88bcb",
      "range": {
        "startLine": 5693,
        "startChar": 49,
        "endLine": 5693,
        "endChar": 88
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61b00bac_88bac589",
        "filename": "compiler/optimizing/optimization.cc",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-02T14:54:27Z",
      "side": 1,
      "message": "ditto for not needing this.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 73
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4d9011c_fe3282bc",
        "filename": "compiler/optimizing/optimization.cc",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61b00bac_88bac589",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 73
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1a54633_774632fb",
        "filename": "compiler/optimizing/optimization.cc",
        "patchSetId": 8
      },
      "lineNbr": 128,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-02T14:54:27Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 128,
        "endChar": 73
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c8fae45_93c1fb65",
        "filename": "compiler/optimizing/optimization.cc",
        "patchSetId": 8
      },
      "lineNbr": 128,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1a54633_774632fb",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 128,
        "endChar": 73
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5a9288b_e7d6223a",
        "filename": "compiler/optimizing/optimization.h",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-02T14:54:27Z",
      "side": 1,
      "message": "You don\u0027t need this - the pass is arch independent.",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 105,
        "endChar": 73
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b7d7dd1_16e98301",
        "filename": "compiler/optimizing/optimization.h",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5a9288b_e7d6223a",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 105,
        "endChar": 73
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "779e404d_84559d00",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-02T14:54:27Z",
      "side": 1,
      "message": "How about just running it after RunArchOptimizations, just before PrepareForRegisterAllocation? Then you wouldn\u0027t need to list it so many times here.",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db157d69_afd3882b",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "779e404d_84559d00",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a7792f8_1adec279",
        "filename": "compiler/optimizing/optimizing_compiler_stats.h",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-02T09:53:45Z",
      "side": 1,
      "message": "Emitted write barriers are `kPossibleWriteBarrier - kRemovedWriteBarrier`",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 122,
        "endChar": 23
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c71b163_ac6bf589",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-02T15:55:14Z",
      "side": 1,
      "message": "I would prefer to ignore the write barrier for the previous instruction and emit it for this one, similar to the write barrier currently being emitted _after_ the store.\n\nThis would also play better with the need to collect all stored values for the merged null check we need as I have described elsewhere.",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3fa0967_098fd22a",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-09T15:41:31Z",
      "side": 1,
      "message": "Making it the first one is easier with the current implementation. I think that we can forgo that runtime optimization when we are relying on a write barrier due to another instruction.",
      "parentUuid": "1c71b163_ac6bf589",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d72d2e50_066f4d2b",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-16T14:09:57Z",
      "side": 1,
      "message": "We have decided to have unconditional write barriers instead of a merged null check.\n\nHowever, I\u0027d still prefer to emit the write barrier on the last instruction, not first. And the `current_write_barriers_` map is well suited for this as you can easily replace the \"value\" to the last instruction while clearing flags on the old instruction and setting them on the new one.",
      "parentUuid": "c3fa0967_098fd22a",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05b75c70_040ab365",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-01-03T18:43:39Z",
      "side": 1,
      "message": "\u003e However, I\u0027d still prefer to emit the write barrier on the last instruction, not first. And the `current_write_barriers_` map is well suited for this as you can easily replace the \"value\" to the last instruction while clearing flags on the old instruction and setting them on the new one.\n\nFrom the GC point of view, it is the same doing it on any write. However, I don\u0027t see a benefit to doing it on the last instruction as opposed to the first one. If we do it on the first we are setting the dirty bit, and we skip doing so for the following writes as we know it is already set as dirty. If we do it on the latest write, we would be relying on the fact that the bit will be set as dirty in the future.\n\nIt also has the extra work of replacing the map\u0027s entry with the new instruction.",
      "parentUuid": "d72d2e50_066f4d2b",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2864caa_5f4ca662",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-01-04T08:42:43Z",
      "side": 1,
      "message": "While we emit the write barrier after the store for field stores, we actually emit it before the store for array stores. My original \"consistency\" argument is therefore flawed.\n\nI\u0027d still find it nicer if we emitted the write barrier on the last store but it\u0027s OK to keep as is (and save a few instructions in the compiler).",
      "parentUuid": "05b75c70_040ab365",
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dd66d8c_f339c3b3",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-02T14:54:27Z",
      "side": 1,
      "message": "Use the side effects instead: `CanTriggerGC`.",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4352ff4_867577ab",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-02T15:42:01Z",
      "side": 1,
      "message": "ArraySet instructions may trigger a GC (https://cs.android.com/android/platform/superproject/+/master:art/compiler/optimizing/nodes.h;l\u003d6565;drc\u003d434d968b4af0bc8af9889170250bee3e08839bea). Can we guarantee when this would happen? i.e. What happens first? do we set the card table? Or do we trigger a GC? Or can they happen in any order?",
      "parentUuid": "6dd66d8c_f339c3b3",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d32fda9f_cd80c212",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-02T15:43:13Z",
      "side": 1,
      "message": "Previously I was using the \"throw\" which happened during type checking (which happens before the GC mark). Is that point where the \"can trigger gc\" may happen?",
      "parentUuid": "d4352ff4_867577ab",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20f37685_7ddb4f6d",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-02T16:01:15Z",
      "side": 1,
      "message": "Sorry for the triple message but just to clarify, I am asking this because I see us clearing the \"needs_type_check\" flag but not the \"can trigger gc\" flag. If the needs type check is the only thing that can trigger a GC, we should update the GC flag when clearing the needs type check.",
      "parentUuid": "d32fda9f_cd80c212",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed9f99b_fba1838c",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-02T16:12:08Z",
      "side": 1,
      "message": "Yes, please, clear the side effects in `HArraySet::ClearNeedsTypeCheck()`. (Unnecessary side effects can hinder various optimizations.)\n\nMaybe we should have the `GraphChecker` enforce that `ArraySet` without type check has no side effects.",
      "parentUuid": "20f37685_7ddb4f6d",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbb53759_6d7166e2",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Changed to using side effects.\n\nDealing with the incorrect side effects update in aosp/2327714.",
      "parentUuid": "9ed9f99b_fba1838c",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b951e41c_25d0ed16",
        "filename": "test/2247-checker-write-barrier-elimination/src/Main.java",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-02T15:55:14Z",
      "side": 1,
      "message": "Can we instead print an extra attribute in graph visualizer?",
      "range": {
        "startLine": 58,
        "startChar": 6,
        "endLine": 58,
        "endChar": 25
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4b930f8_54cc7164",
        "filename": "test/2247-checker-write-barrier-elimination/src/Main.java",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b951e41c_25d0ed16",
      "range": {
        "startLine": 58,
        "startChar": 6,
        "endLine": 58,
        "endChar": 25
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "840507ec_c5da5223",
        "filename": "test/2247-checker-write-barrier-elimination/src/Main.java",
        "patchSetId": 8
      },
      "lineNbr": 211,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-02T09:53:45Z",
      "side": 1,
      "message": "This comment should be in line 216, not here. I will update this before submitting the CL.",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 211,
        "endChar": 49
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "318ca1c2_a8c2d71a",
        "filename": "test/2247-checker-write-barrier-elimination/src/Main.java",
        "patchSetId": 8
      },
      "lineNbr": 211,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-05T16:30:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "840507ec_c5da5223",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 211,
        "endChar": 49
      },
      "revId": "550e9ef4418650bfdbc721d0f9cff2a53156ddd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}