{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72385419_998204c8",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 472,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Is this for `FindBootNativeMethod()`?",
      "range": {
        "startLine": 472,
        "startChar": 70,
        "endLine": 472,
        "endChar": 95
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6a59787_cfd092c4",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 472,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "72385419_998204c8",
      "range": {
        "startLine": 472,
        "startChar": 70,
        "endLine": 472,
        "endChar": 95
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc72c44_65729b68",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 494,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "I would drop this part and apply the code below also for `CompilerOptions::ImageType::kNone` as long as we have the primary boot image. (And update the comment below to match the code.)\n\nNote that this shall match the `CompilerOptions::ImageType::kAppImage` behavior for native methods in classes that are not in the profile.",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 494,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abbf1e5c_99ac354c",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 494,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-01-26T06:50:15Z",
      "side": 1,
      "message": "Confused about:\n \n\u003e Note that this shall match the CompilerOptions::ImageType::kAppImage behavior for native methods in classes that are not in the profile.\n\nFor those methods, image_writer will change their trampoline to boot jni stub as well.",
      "parentUuid": "fcc72c44_65729b68",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 494,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08791bdc_56997b90",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 494,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-29T12:58:55Z",
      "side": 1,
      "message": "Classes that are not in the profile shall not be processed by the `ImageWriter`. They shall be linked by the `ClassLinker` when required by the app.\n\nFor `CompilerOptions::ImageType::kAppImage`, the code here does not compile a new stub if there is a suitable stub in the boot image and the `ClassLinker` shall use the boot image stub when linking a non-image class.\n\nFor `CompilerOptions::ImageType::kNone`, the code here currently compiles a new JNI stub even if a suitable stub is available in the boot image and the `ClassLinker` shall use that new stub. I\u0027d prefer to align that with the `kAppImage` case and avoid the compilation.",
      "parentUuid": "abbf1e5c_99ac354c",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 494,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e07c7e42_ed1f5886",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 494,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08791bdc_56997b90",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 494,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "716f9885_8d5dbcce",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 496,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Remove \"could\". We skip the compilation.",
      "range": {
        "startLine": 496,
        "startChar": 85,
        "endLine": 496,
        "endChar": 90
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1da1fa7a_b6d4f68b",
        "filename": "dex2oat/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 496,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "716f9885_8d5dbcce",
      "range": {
        "startLine": 496,
        "startChar": 85,
        "endLine": 496,
        "endChar": 90
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5000c8af_f020bb3b",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1479,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "These conditions are loop-invariant. Maybe we should move the `AssignJniTrampolineOffset(\u0026m, oat_index);` to a separate loop that we enter only for boot image.",
      "range": {
        "startLine": 1478,
        "startChar": 10,
        "endLine": 1479,
        "endChar": 56
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87ad61ef_6989d9c4",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1479,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5000c8af_f020bb3b",
      "range": {
        "startLine": 1478,
        "startChar": 10,
        "endLine": 1479,
        "endChar": 56
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bae681fc_ca3ee3d8",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 3089,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Unnecessary `reinterpret_cast\u003c\u003e` to the same type as input.",
      "range": {
        "startLine": 3089,
        "startChar": 24,
        "endLine": 3089,
        "endChar": 64
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0d0c23c_b1de225a",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 3089,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bae681fc_ca3ee3d8",
      "range": {
        "startLine": 3089,
        "startChar": 24,
        "endLine": 3089,
        "endChar": 64
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afe0294e_a0be067a",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "What about \"Methods with unique JNI stubs\"?",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 213,
        "endChar": 29
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98c0339f_43865e00",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afe0294e_a0be067a",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 213,
        "endChar": 29
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d371159a_6fa693ec",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`kJniStubMethods`",
      "range": {
        "startLine": 214,
        "startChar": 4,
        "endLine": 214,
        "endChar": 18
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7172d27c_42f96a39",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d371159a_6fa693ec",
      "range": {
        "startLine": 214,
        "startChar": 4,
        "endLine": 214,
        "endChar": 18
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa5dc25_8f689460",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 456,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`CopyAndFixupJniStubMethods`",
      "range": {
        "startLine": 456,
        "startChar": 7,
        "endLine": 456,
        "endChar": 32
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "191985a6_c06b44aa",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 456,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6aa5dc25_8f689460",
      "range": {
        "startLine": 456,
        "startChar": 7,
        "endLine": 456,
        "endChar": 32
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a3973ba_ee164662",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 503,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`AssignJniStubMethodOffset`",
      "range": {
        "startLine": 503,
        "startChar": 7,
        "endLine": 503,
        "endChar": 32
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08f00199_298c90c6",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 503,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a3973ba_ee164662",
      "range": {
        "startLine": 503,
        "startChar": 7,
        "endLine": 503,
        "endChar": 32
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "456902c5_7e4e2d00",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`JniStubMethodRelocation`",
      "range": {
        "startLine": 541,
        "startChar": 9,
        "endLine": 541,
        "endChar": 32
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9900bc21_83b537e8",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "456902c5_7e4e2d00",
      "range": {
        "startLine": 541,
        "startChar": 9,
        "endLine": 541,
        "endChar": 32
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc7623a7_7f147755",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 662,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`jni_stub_map_`",
      "range": {
        "startLine": 662,
        "startChar": 13,
        "endLine": 662,
        "endChar": 28
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4859c6bb_cd4e3b2c",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 662,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc7623a7_7f147755",
      "range": {
        "startLine": 662,
        "startChar": 13,
        "endLine": 662,
        "endChar": 28
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54e7b4d9_0eee6ff8",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 665,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "We could merge this into the value type of the map above. (See comments in `jni_hash_set.h` first.)",
      "range": {
        "startLine": 664,
        "startChar": 2,
        "endLine": 665,
        "endChar": 75
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "335ca919_75ea4adc",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 665,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54e7b4d9_0eee6ff8",
      "range": {
        "startLine": 664,
        "startChar": 2,
        "endLine": 665,
        "endChar": 75
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a9f163d_1de58f8f",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 669,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "This would be unnecessary if we changed `ClassLinker::boot_native_methods_` to map directly to the code.",
      "range": {
        "startLine": 669,
        "startChar": 35,
        "endLine": 669,
        "endChar": 56
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d4d5c16_62e255f1",
        "filename": "dex2oat/linker/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 669,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a9f163d_1de58f8f",
      "range": {
        "startLine": 669,
        "startChar": 35,
        "endLine": 669,
        "endChar": 56
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e43f6b3b_da995ba0",
        "filename": "runtime/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1063,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Move after `jni/`. (The `_` is after `/`.)",
      "range": {
        "startLine": 1063,
        "startChar": 8,
        "endLine": 1063,
        "endChar": 31
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "471ce281_85180ce6",
        "filename": "runtime/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 1063,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e43f6b3b_da995ba0",
      "range": {
        "startLine": 1063,
        "startChar": 8,
        "endLine": 1063,
        "endChar": 31
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a412be7f_ca7c00a8",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 720,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "This function is used only by the test and the same information can be retrieved by using `GetOatMethodQuickCode()` and functions from `OatQuickMethodHeader`, so it should be moved to the test.",
      "range": {
        "startLine": 720,
        "startChar": 20,
        "endLine": 720,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3fb600d_1a339de9",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 720,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a412be7f_ca7c00a8",
      "range": {
        "startLine": 720,
        "startChar": 20,
        "endLine": 720,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "615ccbe5_6a227191",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2380,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Alternatively, we could build the map in `InitFromBootImage()` after adding all boot image spaces. That would make it easier to see that we do not need the `boot_native_methods_lock_`. (The per-method locking below is especially bad.)",
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e36692bc_00fc54a6",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2380,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "615ccbe5_6a227191",
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44ddf58c_cf77581b",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2384,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Keys should be unique, so use `Put()` which never compares for equality in release build. (In debug build, `Put()` checks that the new element does not equal an existing one.)",
      "range": {
        "startLine": 2384,
        "startChar": 27,
        "endLine": 2384,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4efe791f_5aac2dc4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2384,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44ddf58c_cf77581b",
      "range": {
        "startLine": 2384,
        "startChar": 27,
        "endLine": 2384,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f221ffa9_882ee5f7",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2386,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`/*set_value\u003d*/ false`\n\nBut maybe we can make this a template argument and it shall become `/*kSetValue\u003d*/ false`.",
      "range": {
        "startLine": 2386,
        "startChar": 46,
        "endLine": 2386,
        "endChar": 51
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02698fa1_f2863d08",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2386,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f221ffa9_882ee5f7",
      "range": {
        "startLine": 2386,
        "startChar": 46,
        "endLine": 2386,
        "endChar": 51
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd6bc07_4b42647c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3708,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "\"JNI stub\" and maybe use sigular for the \"boot image\".\n\nAnd I would move this comment before the `FindBootNativeMethod()` call.\n\n(The call to `GetOatMethodQuickCode()` shall disappear anyway if we make `boot_native_methods_` map directly to the code.)",
      "range": {
        "startLine": 3708,
        "startChar": 19,
        "endLine": 3708,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3859a01_7b962791",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3708,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-01-26T06:50:15Z",
      "side": 1,
      "message": "Isn\u0027t there more than one boot images in system(if not adb install apex)? why should use singular here? And could you please share more info about primary boot image and the main difference between boot.art and others? Thanks!",
      "parentUuid": "8cd6bc07_4b42647c",
      "range": {
        "startLine": 3708,
        "startChar": 19,
        "endLine": 3708,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78ec3432_0c69f5a9",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3708,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-29T12:58:55Z",
      "side": 1,
      "message": "I usually refer to the entirety of loaded boot images simply as \"the boot image\". But maybe it\u0027s just me being used to the singular because I started working on ART when there was indeed only one boot image. Feel free to use plural if you want to. There is also some plural used in function names, such as `Heap::GetBootImagesStartAddress()`.",
      "parentUuid": "a3859a01_7b962791",
      "range": {
        "startLine": 3708,
        "startChar": 19,
        "endLine": 3708,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a8d308a_1e913191",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3708,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "78ec3432_0c69f5a9",
      "range": {
        "startLine": 3708,
        "startChar": 19,
        "endLine": 3708,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c977cde_3f9cd17b",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3759,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 3759,
        "startChar": 6,
        "endLine": 3759,
        "endChar": 58
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "957f84cf_c7b4abaf",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3759,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6c977cde_3f9cd17b",
      "range": {
        "startLine": 3759,
        "startChar": 6,
        "endLine": 3759,
        "endChar": 58
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e86ce4d5_d698bd2d",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 897,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "This function shall become unnecessary if we change the `boot_native_methods_` to map to the code and remove the `ImageWriter::boot_jni_trampolines_` as I suggested in `image_writer.h`.",
      "range": {
        "startLine": 897,
        "startChar": 7,
        "endLine": 897,
        "endChar": 29
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ce0eae5_ec96d5a1",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 897,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e86ce4d5_d698bd2d",
      "range": {
        "startLine": 897,
        "startChar": 7,
        "endLine": 897,
        "endChar": 29
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "434296ac_ec3e9618",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 901,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "This is for test only. I would look for a way to move this to the test itself.",
      "range": {
        "startLine": 901,
        "startChar": 7,
        "endLine": 901,
        "endChar": 29
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "703ae413_d194deb1",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 901,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "434296ac_ec3e9618",
      "range": {
        "startLine": 901,
        "startChar": 7,
        "endLine": 901,
        "endChar": 29
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b2e1551_7e75660e",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1429,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "I\u0027d prefer to remove the lock.\n\nThe `boot_native_methods_` should be initialized during early initialization while the process is single-threaded. The only other uses I can see is for test code, so we should look for a way to do this differently in the test.",
      "range": {
        "startLine": 1429,
        "startChar": 20,
        "endLine": 1429,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65d173c2_0cf2ea73",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1429,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b2e1551_7e75660e",
      "range": {
        "startLine": 1429,
        "startChar": 20,
        "endLine": 1429,
        "endChar": 45
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a6618ee_c09d1bfb",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1430,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`boot_image_jni_stubs_` or `boot_image_jni_stub_map_`",
      "range": {
        "startLine": 1430,
        "startChar": 13,
        "endLine": 1430,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26b6f484_a65a707f",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1430,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a6618ee_c09d1bfb",
      "range": {
        "startLine": 1430,
        "startChar": 13,
        "endLine": 1430,
        "endChar": 33
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "383bcd5e_2cb00c1f",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 2
      },
      "lineNbr": 2618,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`/*set_value\u003d*/ true`",
      "range": {
        "startLine": 2618,
        "startChar": 90,
        "endLine": 2618,
        "endChar": 91
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a773b96_3b7bb051",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 2
      },
      "lineNbr": 2618,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "383bcd5e_2cb00c1f",
      "range": {
        "startLine": 2618,
        "startChar": 90,
        "endLine": 2618,
        "endChar": 91
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "321e6468_e8bf821b",
        "filename": "runtime/instrumentation.h",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Used only in test. We should look for ways to do this in test code itself.",
      "range": {
        "startLine": 600,
        "startChar": 2,
        "endLine": 601,
        "endChar": 72
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc0ddef0_4038262c",
        "filename": "runtime/instrumentation.h",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "321e6468_e8bf821b",
      "range": {
        "startLine": 600,
        "startChar": 2,
        "endLine": 601,
        "endChar": 72
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c5f4f12_1ed56324",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "I would call this a `JniStubKey` as we usually call the JNI compiler output \"JNI stubs\". (And then I would rename `JniShorty{Empty,Hash,Equals}` to `JniStubKey{Empty,Hash,Equals}`.)\n\nIf we drop the `method_` member (see below), we could actually use this class also in JIT instead of the `JitCodeCache::JniStubKey`. After all, these keys hold the same data, except that the JIT version extracts the flags to `bool` fields (which is somewhat detrimental to performance) and needs to redirect the shorty to another dex file if the original dex file is unloaded. But leave such cleanup for a separate CL.",
      "range": {
        "startLine": 119,
        "startChar": 6,
        "endLine": 119,
        "endChar": 18
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e31263b0_b2f9bfcf",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c5f4f12_1ed56324",
      "range": {
        "startLine": 119,
        "startChar": 6,
        "endLine": 119,
        "endChar": 18
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56bd154a_ba917522",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Indentation is off in this class. There should be only 1 space before `public:`/`private:` and 2 spaces before function/field declarations/definitions.",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5243552_a9ef4373",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56bd154a_ba917522",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f729fb19_8980316c",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "This looks more like a value in a map, not really a part of the key. And maybe we could actually use maps with different value types. For example, the `ClassLinker::boot_native_methods_` could map directly to the code, so that we do not need to call `boot_method-\u003eGetOatMethodQuickCode(GetImagePointerSize())` anymore in `LinkCode()`.",
      "range": {
        "startLine": 157,
        "startChar": 6,
        "endLine": 157,
        "endChar": 24
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "109b5760_4607bedf",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f729fb19_8980316c",
      "range": {
        "startLine": 157,
        "startChar": 6,
        "endLine": 157,
        "endChar": 24
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81245fae_da8bf204",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "I would replace this with a function pointer for comparing the shorty (but compare access flags before that). That function pointer would be initialized to a function specialized for the particular architecture, so we would not need any branches dependent on the ISA and the function call target should be trivially guessed by the CPU\u0027s branch predictor.\n\nWe could use a function template for arm64 and x86-64, so that the results of `GetMaxIntLikeRegisterArgs()` and `GetMaxFloatOrDoubleRegisterArgs()` would be known at compile time and the control flow from `TranslateReturnTypeToJniShorty()` would also be optimized away when inlined.\n\nOne other benefit of this change is that most of the code would move from the header file to a .cc file, reducing the amount of dependencies. That makes the code cleaner and also reduces the ART recompilation time after touching certain code (such as the shorty comparison code itself).\n\nSame for `JniShortyEquals` (or `JniStubKeyHash` after the suggested rename).",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fb8af4a_0ebe3b49",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-01-26T06:50:15Z",
      "side": 1,
      "message": "Is there any examples to use the function pointer to omit isa branches?\n\n\u003e most of the code would move from the header file to a .cc file, reducing the amount of dependencies\n\nwhich .cc files I should move code to? create new one in arm/arm64/riscv64... subfolder?",
      "parentUuid": "81245fae_da8bf204",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0416757e_70de3803",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-29T12:58:55Z",
      "side": 1,
      "message": "We usually use a virtual dispatch and a static `Create()` function for creating the appropriate object, see `CodeGenerator::Create()` for example. However, I think it\u0027s an unnecessary overhead to create a heap-allocated object for a single virtual function that we need here. The virtual dispatch would also involve a few unnecessary loads. (Maybe I\u0027m trying to optimize prematurely but I prefer to keep the code fast.)\n\nWe do use some function pointers in the code, just search the ART repository with `git grep -E \u0027using .*\\(\\*\\)\u0027`. I don\u0027t think this is used for ISA-dependent dispatch yet, so this would be the first such use.\n\nWe want to reuse the same code for different architectures, so I\u0027d put it all in the same new file `jni_hash_set.cc` (or `jni_hash_map.cc` after the suggested renames.)",
      "parentUuid": "7fb8af4a_0ebe3b49",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16b51d35_0ef0eae3",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-05T17:05:51Z",
      "side": 1,
      "message": "Thanks for making it much clearer. 2 more questions about compiler behavior:\n\n1.\n\u003e so we would not need any branches dependent on the ISA and the function call target should be trivially guessed by the CPU\u0027s branch predictor.\n\nDon\u0027t we need to assign different function pointers to `fp_` based on isa? If isa is known in runtime, how could it be guessed by the CPU;s branch predictor?\n\n2.\n\u003e We could use a function template for arm64 and x86-64, so that the results of GetMaxIntLikeRegisterArgs() and GetMaxFloatOrDoubleRegisterArgs() would be known at compile time.\n\nIf using template, does the code looks like below? If so, why the result could be known at compile time as isa is a runtime known value?\n\n```\ntemplate \u003cclass isa\u003e\n...\nsize_t max_int_like_args \u003d isa::kMaxIntLikeRegisterArguments;\n```",
      "parentUuid": "0416757e_70de3803",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a4d840_a599edc1",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-07T17:31:57Z",
      "side": 1,
      "message": "1.\nThe constructor would still branch based on ISA but the hot path is the Equal/Hash where we would have just a function pointer call. The first call through that pointer shall be recorded by the CPU branch predictor. All subsequent calls from the same PC shall go to the same address, so they shall be correctly predicted until the entry in the branch predictor is evicted. (The map in `ClassLinker` is created once and never changed afterwards.)\n\n2.\nYou can add `constexpr` to `GetMaxIntLikeRegisterArgs()` and `GetMaxFloatOrDoubleRegisterArgs()`. If you then create a `template \u003cInstructionSet kIsa\u003e` function, you can also add `constexpr` to local variables `max_int_like_register_args` and `max_float_or_double_register_args`.",
      "parentUuid": "16b51d35_0ef0eae3",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5ddc905_b6511aa2",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-08T14:09:17Z",
      "side": 1,
      "message": "Thanks Vladimir!\n\n1.\nBy the way, if isa branch 9s used in Equal/Hash with \"if-else\", is the CPU branch predictor also correctly predicted since isa won\u0027t be changed in run-time?\n\n2.\nFor constexpr and template metaprogramming, does it need nontype parameter is known at compile-time? If the isa isn\u0027t known at compile-time(only known at run-time), how can the constexpr function return correct value at compile-time? Thanks!",
      "parentUuid": "d4a4d840_a599edc1",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff70f8db_211741fe",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-08T16:49:00Z",
      "side": 1,
      "message": "1.\nYes, those jumps would be correctly predicted but with `if (isa_ \u003d\u003d InstructionSet::kArm64 || isa_ \u003d\u003d InstructionSet::kX86_64)`, we\u0027d have two branches to predict instead of one. (More code to execute, except for the arm64 architecture that\u0027s checked first). Additional branching would be needed for `GetMaxIntLikeRegisterArgs()` unless clang++ manages to specialize the code.\n\n2.\n(This is not really template metaprogramming.) Each equals/hash template function instantiation would have an ISA known at compile time and pass it to `GetMaxIntLikeRegisterArgs()` and `GetMaxFloatOrDoubleRegisterArgs()`. The constructor would select the appropriate equals/hash function instantiation at runtime.",
      "parentUuid": "d5ddc905_b6511aa2",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09978d56_28e09ca8",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff70f8db_211741fe",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 23
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "054a76e9_60a69456",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 369,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "If we remove the `method_` from the key, we would want to replace this with\n\n    template \u003ctypename Value,\n              class Alloc \u003d std::allocator\u003cstd::pair\u003cJniStubKey, Value\u003e\u003e\u003e\n    using JniStubHashMap \u003d\n         HashMap\u003cJniStubKey, Value, JniStubKeyEmpty, JniStubKeyHash, JniStubKeyEquals, Alloc\u003e;\n\n(With all the suggested renames, this file could also be renamed to `jni_stub_map.h`.)",
      "range": {
        "startLine": 369,
        "startChar": 6,
        "endLine": 369,
        "endChar": 16
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ad9ac44_a8ba4a79",
        "filename": "runtime/jni_hash_set.h",
        "patchSetId": 2
      },
      "lineNbr": 369,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "054a76e9_60a69456",
      "range": {
        "startLine": 369,
        "startChar": 6,
        "endLine": 369,
        "endChar": 16
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09cf9e55_b52894ef",
        "filename": "runtime/oat/image-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "We could pull this shared code out of the `if`. We could also `DCHECK_EQ(updated, orig)` in the else block.",
      "range": {
        "startLine": 137,
        "startChar": 6,
        "endLine": 137,
        "endChar": 41
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ede90843_1e8a353e",
        "filename": "runtime/oat/image-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09cf9e55_b52894ef",
      "range": {
        "startLine": 137,
        "startChar": 6,
        "endLine": 137,
        "endChar": 41
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2669056a_28eca8df",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`kSectionJniStubMethods`\n\nI would move this at least after the `kSectionClassTable`. With some effort, we could `munmap()` this section after it\u0027s been used to initialize the map in `ClassLinker`. I\u0027m sure that up to the `kSectionClassTable`, all sections need to remain in memory but I\u0027m not sure about `kSectionStringReferenceOffsets`.",
      "range": {
        "startLine": 269,
        "startChar": 4,
        "endLine": 269,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1916d8c6_c29836b7",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-05T16:00:41Z",
      "side": 1,
      "message": "I\u0027m little confused about section ordering inside image. According to below conments, kSectionRuntimeMethods is in front of kSectionImTables.\n\n```\n251   /*\n252    * This describes the number and ordering of sections inside of Boot\n253    * and App Images.  It is very important that changes to this struct\n254    * are reflected in the compiler and loader.\n255    *\n256    * See:\n257    *   - ImageWriter::ImageInfo::CreateImageSections()\n258    *   - ImageWriter::Write()\n259    *   - ImageWriter::AllocMemory()\n260    */\n261   enum ImageSections {\n262     kSectionObjects,\n263     kSectionArtFields,\n264     kSectionArtMethods,\n265     kSectionRuntimeMethods,\n266     kSectionImTables,\n267     kSectionIMTConflictTables,\n268     kSectionInternedStrings,\n269     kSectionClassTable,\n270     kSectionStringReferenceOffsets,\n271     kSectionDexCacheArrays,\n272     kSectionMetadata,\n273     kSectionImageBitmap,\n274     kSectionCount,  // Number of elements in enum.\n275   };\n```\n\nBut in reality, the final section offset written to the Image depends on the Bin offset. However, in Bin, kRuntimeMethod is behind kImTable.\n\n```\n181   // Classify different kinds of bins that objects end up getting packed into during image writing.\n182   // Ordered from dirtiest to cleanest (until ArtMethods).\n183   enum class Bin {\n184     kKnownDirty,                  // Known dirty objects from --dirty-image-objects list\n185     kMiscDirty,                   // Dex caches, object locks, etc...\n186     kClassVerified,               // Class verified, but initializers haven\u0027t been run\n187     // Unknown mix of clean/dirty:\n188     kRegular,\n189     kClassInitialized,            // Class initializers have been run\n190     // All classes get their own bins since their fields often dirty\n191     kClassInitializedFinalStatics,  // Class initializers have been run, no non-final statics\n192     // Likely-clean:\n193     kString,                      // [String] Almost always immutable (except for obj header).\n194     // Definitely clean:\n195     kInternalClean,               // ART internal: image roots, boot image live objects, vtables\n196                                   // and interface tables, Object[]/int[]/long[].\n197     // Add more bins here if we add more segregation code.\n198     // Non mirror fields must be below.\n199     // ArtFields should be always clean.\n200     kArtField,\n201     // If the class is initialized, then the ArtMethods are probably clean.\n202     kArtMethodClean,\n203     // ArtMethods may be dirty if the class has native methods or a declaring class that isn\u0027t\n204     // initialized.\n205     kArtMethodDirty,\n206     // IMT (clean)\n207     kImTable,\n208     // Conflict tables (clean).\n209     kIMTConflictTable,\n210     // Runtime methods (always clean, do not have a length prefix array).\n211     kRuntimeMethod,\n212     // Metadata bin for data that is temporary during image lifetime.\n213     kMetadata,\n214     kLast \u003d kMetadata,\n215     // Number of bins which are for mirror objects.\n216     kMirrorCount \u003d kArtField,\n217   };\n```\n\nEven worse, if I move kSectionJniStubMethods downwards, NativeObjectRelocation offset may be invalid as the offset is the offset in Bin. I\u0027m not sure if I understand correctly, please correct me if I\u0027m wrong. Thanks!",
      "parentUuid": "2669056a_28eca8df",
      "range": {
        "startLine": 269,
        "startChar": 4,
        "endLine": 269,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "153e2507_4ef8ef07",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-07T17:31:57Z",
      "side": 1,
      "message": "Looking at `boot.oat` with `hexdump`, I can see that the offset recorded in the `sections_[kSectionRuntimeMethods]` is indeed higher than `sections_[kSectionIMTConflictTables]`. Feel free to move the `kSectionRuntimeMethods` down to fix the discrepancy. (This requires changing the image version but you\u0027re already doing that anyway.)\n\nLooking at the `ImageWriter`, I see that `kSectionInternedStrings` and `kSectionClassTable` do not have their own bins. I guess moving the `kSectionJniTrampolines` down would require adding such bins and recording their sizes to fix the `native_object_relocations_` calculation. This is probably not trivial, so feel free to acknowledge and leave the `kSectionJniTrampolines` where it is.",
      "parentUuid": "1916d8c6_c29836b7",
      "range": {
        "startLine": 269,
        "startChar": 4,
        "endLine": 269,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca7cda0c_442f3f6c",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "153e2507_4ef8ef07",
      "range": {
        "startLine": 269,
        "startChar": 4,
        "endLine": 269,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6da0010b_7654a268",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 412,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "`VisitJniStubMethods`",
      "range": {
        "startLine": 412,
        "startChar": 7,
        "endLine": 412,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39dce608_354d62d2",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 412,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6da0010b_7654a268",
      "range": {
        "startLine": 412,
        "startChar": 7,
        "endLine": 412,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8cadf19_a387a00f",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Maybe change to a template argument `kSetValue`? (Or `kUpdate`.)",
      "range": {
        "startLine": 415,
        "startChar": 27,
        "endLine": 415,
        "endChar": 41
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69714d2e_3c7e9007",
        "filename": "runtime/oat/image.h",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8cadf19_a387a00f",
      "range": {
        "startLine": 415,
        "startChar": 27,
        "endLine": 415,
        "endChar": 41
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cc0db31_8b407e79",
        "filename": "test/MyClassNatives/MyClassNatives.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "The `S` is ambiguous here, it could mean `short`. Use the `s` prefix as in `sbar()`.",
      "range": {
        "startLine": 60,
        "startChar": 25,
        "endLine": 60,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80ba0a54_eb398001",
        "filename": "test/MyClassNatives/MyClassNatives.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cc0db31_8b407e79",
      "range": {
        "startLine": 60,
        "startChar": 25,
        "endLine": 60,
        "endChar": 26
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9f17de2_1e4405a5",
        "filename": "test/MyClassNatives/MyClassNatives.java",
        "patchSetId": 2
      },
      "lineNbr": 386,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Line too long.\n\nSame 3x below.",
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8c310e3_38820c56",
        "filename": "test/MyClassNatives/MyClassNatives.java",
        "patchSetId": 2
      },
      "lineNbr": 386,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9f17de2_1e4405a5",
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee78959e_7a0db3b8",
        "filename": "test/MyClassNatives/MyClassNatives.java",
        "patchSetId": 2
      },
      "lineNbr": 387,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-01-25T16:20:15Z",
      "side": 1,
      "message": "Argument indentation should be twice the normal indentation. Add 4 spaces.\n\nSame 4x below.",
      "range": {
        "startLine": 387,
        "startChar": 4,
        "endLine": 387,
        "endChar": 8
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77135b99_dcd7d7b4",
        "filename": "test/MyClassNatives/MyClassNatives.java",
        "patchSetId": 2
      },
      "lineNbr": 387,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-21T16:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee78959e_7a0db3b8",
      "range": {
        "startLine": 387,
        "startChar": 4,
        "endLine": 387,
        "endChar": 8
      },
      "revId": "c144d9f461caa469b5b8d573a20b4caf08d2b38c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}