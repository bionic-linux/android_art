{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "df6603b5_1fffb990",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-14T17:42:56Z",
      "side": 1,
      "message": "Change [this line](https://cs.android.com/android/platform/superproject/main/+/main:art/libartservice/service/java/com/android/server/art/SecondaryDexopter.java;l\u003d144;drc\u003da3d056ef58b96a995abdb7213c51b9877f3f45f9) too?",
      "revId": "279ef3f09f4eeb3535005b61ee769ef5d7633505",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e92d2f41_cbcfbdcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1928851
      },
      "writtenOn": "2024-05-14T18:44:41Z",
      "side": 1,
      "message": "SdkLibs loaded in SdkSandbox process by passing SDKs `ApplicationInfo.sourceDir` to [PathClassLoader](https://cs.android.com/android/platform/superproject/main/+/main:packages/modules/AdServices/sdksandbox/SdkSandbox/src/com/android/sdksandbox/SdkSandboxServiceImpl.java;l\u003d376;drc\u003d4eb30271c338af7ee6abcbd2b7a9a0721db0595b), they never started as separate process that could have secondary dexes.\n\nAll installed SdkLibs stored under `/data/app/`, so should be treated as primary dexes even when loaded in this way.\n\nWith that in mind, should we instead add check into `SecondaryDexopter` constructor (same as was in Dexopter)? (as SdkLibs not expected to be used in any way other than be loaded by SdkSandbox process)",
      "parentUuid": "df6603b5_1fffb990",
      "revId": "279ef3f09f4eeb3535005b61ee769ef5d7633505",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25f0f4ca_466b90ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-15T09:21:04Z",
      "side": 1,
      "message": "Thanks for pointing me to the code. Now I have many questions.\n\n1. Is there one SdkSandbox process per app or only one SdkSandbox process for the entire device?\n2. What\u0027s the UID of the SdkSandbox process? Does it have access to the dexopt artifacts owned by SYSTEM_UID?\n3. What\u0027s the classpath of the SdkSandbox process itself? I\u0027m asking this because you are using the classloader of the SdkSandbox process as the parent classloader of the SDK library, and this affects how we should dexopt SDK libraries.\n4. Can an SDK library create a classloader to load other dex files? If so, those dex files are secondary dex files. It doesn\u0027t matter they are loaded in a separate process or not.",
      "parentUuid": "e92d2f41_cbcfbdcf",
      "revId": "279ef3f09f4eeb3535005b61ee769ef5d7633505",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "836f22ff_a7cc7d3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1928851
      },
      "writtenOn": "2024-05-15T10:17:24Z",
      "side": 1,
      "message": "1. For each app we are starting separate sandbox process. But all sandbox processes are actually same [package/service](https://cs.android.com/android/platform/superproject/main/+/main:packages/modules/AdServices/sdksandbox/SdkSandbox/AndroidManifest.xml;l\u003d56) installed on device.\nTo put it simply - on very high level we could say that we are starting dedicated instance of some service for each app, on package/code level this service is same for all apps, but process has different uid for different apps. And this service internally creates contexts/classloaders for SDKLibraries and load them.\n2. We have direct 1:1 mapping between app uid and sandbox process uid - [Process. toSdkSandboxUid](https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/core/java/android/os/Process.java;l\u003d1016). Sandbox process have access to SDK Libraries APK/DEX files + also should have access to dexopt artifacts. Before PM changes it used VDEX files of SDK Libraries to load them (see b/324537096#comment5 for more details)\n3. Classpath of SdkSandbox is SdkSandbox app itself. But for loading SDK Libraries it uses its parent classloader as parent classloader for SDK Library - effectively skipping its Sandbox APK classloader from classloader chain (either in [[1]](https://cs.android.com/android/platform/superproject/main/+/main:packages/modules/AdServices/sdksandbox/SdkSandbox/src/com/android/sdksandbox/SdkSandboxServiceImpl.java;l\u003d470;drc\u003d41658e0e867c8cf330febf37084164441f02e06e) or while creating application context for SDK Library package - [[2]](https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/core/java/android/app/ContextImpl.java;l\u003d2649;drc\u003d41658e0e867c8cf330febf37084164441f02e06e;bpv\u003d1;bpt\u003d1)). So from SDK Libraries side it looks like loading with system (BCP) classloader as parent and using DEX optimised as normal app/library should work fine - as it work before PM changes.\n4. Theoretically yes, but from Android system point of view (and probably from ART as well) it will be a secondary DEX for Sandbox App package (with valid app id), not for SDK Library. Because whole SDK Library from Android platform/ART point of view is loaded as secondary dex inside Sandbox App process/package. We never run SDK Library as normal app - on package level it used only as \"storage\" for DEX/Assets/etc files and its DEX loaded only inside Sandbox app process.\n\nWhat we are trying to fix - after PM changes we don\u0027t have dexopt artifacts for SDK Libraries (because primary dexopt not enabled for invalid appId), so when SDK Sandbox tries to load SDK Library APK using PathClassloader - it extracts DEX files from APK in memory causing syshealth regressions (bigger memory footprint, time to extract files instead of memory mapping vdex, etc). If we will have VDEX files PathClassloader will use them instead of extracting DEX inmemory - see b/324537096#comment5 for details how it worked before and after PM changes.",
      "parentUuid": "25f0f4ca_466b90ab",
      "revId": "279ef3f09f4eeb3535005b61ee769ef5d7633505",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c195ee6_071e3305",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-15T11:38:49Z",
      "side": 1,
      "message": "Thanks for the explanations! Regarding access to dexopt artifacts, I guess it works because `isLoadableInOtherProcesses` returns true for SDK libraries and therefore the dexopt artifacts get the \"other readable\" bit. Regarding the classloader, I need to look more into it. You said only VDEX files are used, which I think is unexpected because normally ODEX files should be used too, meaning the classloader context is probably wrong. Anyway, this CL looks fine to me. We can follow up on the classloader context issue.",
      "parentUuid": "836f22ff_a7cc7d3c",
      "revId": "279ef3f09f4eeb3535005b61ee769ef5d7633505",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40a899d7_f063adb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1928851
      },
      "writtenOn": "2024-05-15T13:15:07Z",
      "side": 1,
      "message": "Thank you for looking into it and explaining why it works - you are right about `isLoadableInOtherProcesses` - it definitely should return true for SDKLibraries.\n\nRegarding ODEX usage - I only know that VDEX file was memory mapped during SDK Library loading.\nBut I don\u0027t know how ODEX file used by ART - maybe it could be loaded later / not loaded as memory mapped file / etc.\n\nAgree that we could take a look later on ODEX usage.",
      "parentUuid": "8c195ee6_071e3305",
      "revId": "279ef3f09f4eeb3535005b61ee769ef5d7633505",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f08e95ad_27e56875",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-15T13:26:27Z",
      "side": 1,
      "message": "ODEX is mapped at the same time when VDEX is mapped. The difference is that VDEX is classloader-context-free, while ODEX is not.",
      "parentUuid": "40a899d7_f063adb1",
      "revId": "279ef3f09f4eeb3535005b61ee769ef5d7633505",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}