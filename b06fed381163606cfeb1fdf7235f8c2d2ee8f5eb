{
  "comments": [
    {
      "key": {
        "uuid": "8be74356_603712f9",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-11T12:01:13Z",
      "side": 1,
      "message": "This looks very special cased. Should we consider loop folding instead? For this example folding the first iteration would do the trick.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 29,
        "endChar": 3
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b5ca306_b244f069",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-11-11T17:57:03Z",
      "side": 1,
      "message": "I am not sure I agree it is very special cased (it is common to have induction here), but if you are opposed to this, I am happy to abandon as well. Folding is something I plan in the  loop optimizer (but that runs after licm, unless I do some licm at the same time in loop opt)",
      "parentUuid": "8be74356_603712f9",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 29,
        "endChar": 3
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f030b0ea_4c709f4a",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-12T01:15:31Z",
      "side": 1,
      "message": "Loop peeling? I\u0027m confused by terminology here. An alternative is to use HDeoptimize to hoist the the null check which then allows more instructions to be hoisted. Dynamic BCE did this.",
      "parentUuid": "8b5ca306_b244f069",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 29,
        "endChar": 3
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0ff2c21_3bad7739",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-11-14T09:58:46Z",
      "side": 1,
      "message": "I guess Americans peel, British fold? :-)\nBut we are probably all talking about\n\nfor (i \u003d 0; i \u003c 10; i++)\n   B(I)\n\n-\u003e\n\nB(0);\nfor (i \u003d 1; i \u003c 10; i++)\n   B(I)",
      "parentUuid": "f030b0ea_4c709f4a",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 29,
        "endChar": 3
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0ff2c21_db80d34a",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-14T13:14:59Z",
      "side": 1,
      "message": "French fold :)\n\nBut maybe I should have turned it around: loop folding as a general (ie not special cased) optimization would cover this case.",
      "parentUuid": "d0ff2c21_3bad7739",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 29,
        "endChar": 3
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0ff2c21_bb874730",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-14T14:54:08Z",
      "side": 1,
      "message": "You usually peel out the first iteration to get nice properties for the following loop. But cloning loop bodies has its complexity/foorprint overhead. That\u0027s why for BCE, we use deoptimization to get nice properties without cloning the loop bodies.",
      "parentUuid": "d0ff2c21_db80d34a",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 29,
        "endChar": 3
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bf54bfd_7e10516d",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-11-10T21:41:05Z",
      "side": 1,
      "message": "How many non-zero values do you want to tolerate?\n\n  do {\n    i +\u003d 2;\n    j -\u003d 3;\n    k +\u003d 5;\n  } while (a[i][j ^\u003d 3][k ^\u003d 7] \u003d\u003d 0);  // j and k are not induction variables.",
      "range": {
        "startLine": 81,
        "startChar": 60,
        "endLine": 81,
        "endChar": 66
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b5ca306_5ea3a587",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-11-10T21:46:25Z",
      "side": 1,
      "message": "42 :-)\n\nBut you raise a good point on capping the number somehow. Or are you saying you don\u0027t like this optimization at all? Then also no hard feelings....",
      "parentUuid": "4bf54bfd_7e10516d",
      "range": {
        "startLine": 81,
        "startChar": 60,
        "endLine": 81,
        "endChar": 66
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abe6c757_419f7246",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-11-11T10:40:21Z",
      "side": 1,
      "message": "The optimization is fine but we should cap this.\n(Alternatively, extend stack maps to allow \"value_from_some_location+adjustment\".)",
      "parentUuid": "8b5ca306_5ea3a587",
      "range": {
        "startLine": 81,
        "startChar": 60,
        "endLine": 81,
        "endChar": 66
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b5ca306_723a58e2",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-11-11T17:57:03Z",
      "side": 1,
      "message": "Ok, will add the cap. And as usual you have brilliant suggestions, I like the idea of putting that in the map, avoiding computation and probably even code size compared to this approach. Made a TODO on that.",
      "parentUuid": "abe6c757_419f7246",
      "range": {
        "startLine": 81,
        "startChar": 60,
        "endLine": 81,
        "endChar": 66
      },
      "revId": "b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}