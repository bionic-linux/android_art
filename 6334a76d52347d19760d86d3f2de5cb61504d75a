{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2311f155_78bcc0e4",
        "filename": "runtime/art_method.h",
        "patchSetId": 9
      },
      "lineNbr": 360,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-22T15:49:42Z",
      "side": 1,
      "message": "Except for the \"jitzygote\" case - running without compiled boot image. Is that worth adding a comment?",
      "range": {
        "startLine": 360,
        "startChar": 22,
        "endLine": 360,
        "endChar": 46
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1abac55c_79f68fbf",
        "filename": "runtime/art_method.h",
        "patchSetId": 9
      },
      "lineNbr": 360,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-10-22T16:19:14Z",
      "side": 1,
      "message": "I can add a comment about this. I\u0027d still treat intrinsics as memory shared for `jitzygote`. WDYT?",
      "parentUuid": "2311f155_78bcc0e4",
      "range": {
        "startLine": 360,
        "startChar": 22,
        "endLine": 360,
        "endChar": 46
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef1793a6_fc49c9de",
        "filename": "runtime/art_method.h",
        "patchSetId": 9
      },
      "lineNbr": 360,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-23T07:07:33Z",
      "side": 1,
      "message": "Thinking about this again, this is about the `ArtMethod`, not about the compiled code, right? And even for \"jitzygote\", the zygote puts that `ArtMethod` in the in-memory boot image (calling `dex2oat` with `memfd` file descriptors). So, we could add a note about this but I do not think it\u0027s necessary.\n\nOnly non-standard execution without any boot image at all is missing the memory shared `ArtMethod` and even that case benefits from making intrinsics immediately hot, so that they can be JITted.\n\nAs far as actual code is concerned, no further changes are needed; intrinsics should be treated as memory shared.",
      "parentUuid": "1abac55c_79f68fbf",
      "range": {
        "startLine": 360,
        "startChar": 22,
        "endLine": 360,
        "endChar": 46
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "720275c1_9e8f03fe",
        "filename": "runtime/art_method.h",
        "patchSetId": 9
      },
      "lineNbr": 360,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-10-23T08:39:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ef1793a6_fc49c9de",
      "range": {
        "startLine": 360,
        "startChar": 22,
        "endLine": 360,
        "endChar": 46
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47dc4f53_2a19f8a2",
        "filename": "runtime/interpreter/mterp/armng/main.S",
        "patchSetId": 9
      },
      "lineNbr": 1549,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-22T15:49:42Z",
      "side": 1,
      "message": "Do we want to reduce this to two instructions?\n\n    orns wip, wip, wip, lsl #(ART_METHOD_IS_INTRINSIC_FLAG_BIT - ART_METHOD_IS_MEMORY_SHARED_FLAG_BIT)\n    bmi \\if_hot\n\nGiven that this uses a \"shifted register\" instruction, it may not necessarily be faster. It could be faster on some CPU cores and slower on others.",
      "range": {
        "startLine": 1545,
        "startChar": 4,
        "endLine": 1549,
        "endChar": 15
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35b2a481_78ca12c9",
        "filename": "runtime/interpreter/mterp/armng/main.S",
        "patchSetId": 9
      },
      "lineNbr": 1549,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-10-22T16:19:14Z",
      "side": 1,
      "message": "We had a talk with Nicolas yesterday about reordering these checks (In a previous patchset I was checking first the ART_METHOD_IS_INTRINSIC_FLAG bit). The conclusion was to land an implementation that wouldn\u0027t be more costly for the regular methods and treat the memory shared / intrinsic methods as the slow path.\n\nIn that sense, I think the `orns+bmi` should be faster than the 4 instructions but I am not sure it will be faster that `tst+beq` for the regular instructions.\n\nWDYT about leaving the checks as-is?",
      "parentUuid": "47dc4f53_2a19f8a2",
      "range": {
        "startLine": 1545,
        "startChar": 4,
        "endLine": 1549,
        "endChar": 15
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c22ad0eb_5d3a34c9",
        "filename": "runtime/interpreter/mterp/armng/main.S",
        "patchSetId": 9
      },
      "lineNbr": 1549,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-23T07:07:33Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "35b2a481_78ca12c9",
      "range": {
        "startLine": 1545,
        "startChar": 4,
        "endLine": 1549,
        "endChar": 15
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3900c5c1_4dbd6914",
        "filename": "runtime/interpreter/mterp/riscv64/main.S",
        "patchSetId": 9
      },
      "lineNbr": 252,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-22T15:49:42Z",
      "side": 1,
      "message": "If you reorder the checks (they both go to the same `\\if_hot` label), the answer is in my comment on PS3: Replace LWU with LW and check the sign bit with BLTZ.",
      "range": {
        "startLine": 252,
        "startChar": 4,
        "endLine": 252,
        "endChar": 71
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23065119_d9c349a3",
        "filename": "runtime/interpreter/mterp/riscv64/main.S",
        "patchSetId": 9
      },
      "lineNbr": 252,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-10-22T16:19:14Z",
      "side": 1,
      "message": "Same as above regarding the order of the checks.",
      "parentUuid": "3900c5c1_4dbd6914",
      "range": {
        "startLine": 252,
        "startChar": 4,
        "endLine": 252,
        "endChar": 71
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "595ccd1f_c6a87990",
        "filename": "runtime/interpreter/mterp/riscv64/main.S",
        "patchSetId": 9
      },
      "lineNbr": 252,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-23T07:07:33Z",
      "side": 1,
      "message": "If you really want to check the `ART_METHOD_IS_MEMORY_SHARED_FLAG_BIT` first and still not lose the `ART_METHOD_IS_INTRINSIC_FLAG_BIT` (to avoid the reload) and you don\u0027t want to clobber another register either, this can be achieved by expanding the `BRANCH_IF_BIT_CLEAR` and replacing the SLLI with ROLI. The second bit shall be found in a different position but it shall not be lost.\n\nBut I\u0027d prefer to reorder the checks and use BLTZ.\n\nAnyway, we can leave that for later and submit this CL as is.",
      "parentUuid": "23065119_d9c349a3",
      "range": {
        "startLine": 252,
        "startChar": 4,
        "endLine": 252,
        "endChar": 71
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9799a2c3_02627901",
        "filename": "runtime/interpreter/mterp/riscv64/main.S",
        "patchSetId": 9
      },
      "lineNbr": 252,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-10-23T08:39:38Z",
      "side": 1,
      "message": "Ack, I can optimize risc-v in a follow-up CL",
      "parentUuid": "595ccd1f_c6a87990",
      "range": {
        "startLine": 252,
        "startChar": 4,
        "endLine": 252,
        "endChar": 71
      },
      "revId": "6334a76d52347d19760d86d3f2de5cb61504d75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}