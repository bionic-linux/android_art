# Copyright (C) 2011 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is used on host and device. It uses a common subset
# shell dialect that should work on the host (e.g. bash), and
# Android (e.g. mksh).

# Follow all sym links to get the program name.
if [ z"$BASH_SOURCE" != z ]; then
  PROG_NAME="$BASH_SOURCE"
else
  PROG_NAME="$0"
fi
while [ -h "$PROG_NAME" ]; do
  # On Mac OS, readlink -f doesn't work.
  PROG_NAME="$(readlink "$PROG_NAME")"
done

function find_libdir() {
  # Get the actual file, $DALVIKVM may be a symbolic link.
  # Use realpath instead of readlink because Android does not have a readlink.
  if [[ "$(realpath "$ANDROID_ROOT/bin/$DALVIKVM")" == *dalvikvm64 ]]; then
    echo "lib64"
  else
    echo "lib"
  fi
}

ARGS_WITH_INTERPRET_ONLY=
function replace_compiler_filter_with_interepret_only() {
  ARGS_WITH_INTERPRET_ONLY=("$@")

  found="false"
  ((index=0))
  while ((index <= $#)); do
    what="${ARGS_WITH_INTERPRET_ONLY[$index]}"

    case "$what" in
      --compiler-filter=*)
        ARGS_WITH_INTERPRET_ONLY[$index]="--compiler-filter=interpret-only"
        found="true"
        ;;
    esac

    ((index++))
    shift
  done
  if [ "$found" != "true" ]; then
    ARGS_WITH_INTERPRET_ONLY=(-Xcompiler-option --compiler-filter=interpret-only "${ARGS_WITH_INTERPRET_ONLY[@]}")
  fi
}

invoke_with=
DALVIKVM=dalvikvm
LIBART=libart.so
JIT_PROFILE=false

while true; do
  if [ "$1" = "--invoke-with" ]; then
    shift
    invoke_with="$invoke_with $1"
    shift
  elif [ "$1" = "-d" ]; then
    LIBART="libartd.so"
    shift
  elif [ "$1" = "--32" ]; then
    DALVIKVM=dalvikvm32
    shift
  elif [ "$1" = "--64" ]; then
    DALVIKVM=dalvikvm64
    shift
  elif [ "$1" = "--perf" ]; then
    PERF="record"
    shift
  elif [ "$1" = "--perf-report" ]; then
    PERF="report"
    shift
  elif [ "$1" = "--profile" ]; then
    JIT_PROFILE="true"
    shift
  elif expr "$1" : "--" >/dev/null 2>&1; then
    echo "unknown option: $1" 1>&2
    exit 1
  else
    break
  fi
done

PROG_DIR="$(cd "${PROG_NAME%/*}" ; pwd -P)"
ANDROID_ROOT=$PROG_DIR/..
LIBDIR=$(find_libdir)
LD_LIBRARY_PATH=$ANDROID_ROOT/$LIBDIR
DEBUG_OPTION=""

DELETE_ANDROID_DATA=false
# If ANDROID_DATA is the system ANDROID_DATA or is not set, use our own,
# and ensure we delete it at the end.
if [ "$ANDROID_DATA" = "/data" ] || [ "$ANDROID_DATA" = "" ]; then
  ANDROID_DATA=$PWD/android-data$$
  mkdir -p $ANDROID_DATA/dalvik-cache/{arm,arm64,x86,x86_64}
  DELETE_ANDROID_DATA=true
fi

if [ z"$PERF" != z ]; then
  invoke_with="perf record -g -o $ANDROID_DATA/perf.data -e cycles:u $invoke_with"
  DEBUG_OPTION="-Xcompiler-option --generate-debug-info"
fi

PROFILE_OPTION=""
EXIT_STATUS=0
if [ "$JIT_PROFILE" = true ]; then
  # Create the profile. The runtime expects profiles to be created before
  # execution.
  PROFILE_PATH="$ANDROID_DATA/primary.prof"
  touch $PROFILE_PATH

  # Replace the compiler filter with interpret-only so that we
  # can capture the profile.
  replace_compiler_filter_with_interepret_only "$@"

  ANDROID_DATA=$ANDROID_DATA \
    ANDROID_ROOT=$ANDROID_ROOT \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH \
    PATH=$ANDROID_ROOT/bin:$PATH \
    LD_USE_LOAD_BIAS=1 \
    $ANDROID_ROOT/bin/$DALVIKVM $lib \
      -XXlib:$LIBART \
      -Xnorelocate \
      -Ximage:$ANDROID_ROOT/framework/core.art \
      -Xjitsaveprofilinginfo \
      -Xps-min-methods-to-save:0 \
      -Xps-min-classes-to-save:0 \
      -Xps-min-notification-before-wake:10 \
      -Xps-min-methods-to-save:1 \
      -Xps-min-classes-to-save:1 \
      -Xps-profile-path:$PROFILE_PATH \
      -Xusejit:true \
      "${ARGS_WITH_INTERPRET_ONLY[@]}" \
      &> "$ANDROID_DATA/profile_gen.log"

  EXIT_STATUS=$?

  if [ $EXIT_STATUS = 0 ]; then
    # Wipe dalvik-cache to prepare it for the next invocation.
    rm -rf $ANDROID_DATA/dalvik-cache/{arm,arm64,x86,x86_64}/*
  else
    cat "$ANDROID_DATA/profile_gen.log"
  fi

  PROFILE_OPTION="-Xcompiler-option --profile-file=$PROFILE_PATH"
fi

# Only run the second invocation if the first one finished successfully.
if [ $EXIT_STATUS = 0 ]; then
  ANDROID_DATA=$ANDROID_DATA \
    ANDROID_ROOT=$ANDROID_ROOT \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH \
    PATH=$ANDROID_ROOT/bin:$PATH \
    LD_USE_LOAD_BIAS=1 \
    $invoke_with $ANDROID_ROOT/bin/$DALVIKVM $lib \
      -XXlib:$LIBART \
      -Xnorelocate \
      -Ximage:$ANDROID_ROOT/framework/core.art \
      $DEBUG_OPTION \
      $PROFILE_OPTION \
      "$@"

  EXIT_STATUS=$?
fi

if [ z"$PERF" != z ]; then
  if [ z"$PERF" = zreport ]; then
    perf report -i $ANDROID_DATA/perf.data
  fi
  echo "Perf data saved in: $ANDROID_DATA/perf.data"
else
  if [ "$DELETE_ANDROID_DATA" = "true" ]; then
    rm -rf $ANDROID_DATA
  fi
fi

exit $EXIT_STATUS
