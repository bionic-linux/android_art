# Copyright (C) 2011 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is used on host and device. It uses a common subset
# shell dialect that should work on the host (e.g. bash), and
# Android (e.g. mksh).

function follow_links() {
  if [ z"$BASH_SOURCE" != z ]; then
    file="$BASH_SOURCE"
  else
    file="$0"
  fi
  while [ -h "$file" ]; do
    # On Mac OS, readlink -f doesn't work.
    file="$(readlink "$file")"
  done
  echo "$file"
}

function find_libdir() {
  # Get the actual file, $1 is the DALVIKVM_PATH and may be a symbolic link.
  # Use realpath instead of readlink because Android does not have a readlink.
  if [[ "$(realpath "$1")" == *dalvikvm64 ]]; then
    echo "lib64"
  else
    echo "lib"
  fi
}

function usage() {
  cat > /dev/stderr <<EOF
Usage: art [OPTIONS] [DALVIK_OPTIONS] CLASS

Supported OPTIONS include:
  --32                     Use 32-bit Dalvik VM.
  --64                     Use 64-bit Dalvik VM.
  --callgrind              Launch Dalvik VM in callgrind.
  -d                       Use debug ART library (libartd.so).
  --debug
  --gdb                    Launch Dalvik VM in gdb.
  --help                   Display usage message.
  --invoke-with <program>  Launch Dalvik VM in <program>.
  --perf                   Launch Dalvik VM with perf recording.
  --perf-report            Launch Dalvik VM with perf recording with
                           report upon completion.
  --verbose                Run script verbosely.

The DALVIK_OPTIONS are passed directly to the Dalvik VM.

Example:
  art --32 -cp my_classes.dex MainClass

Common errors:
  1) Not having core.art available (see $ANDROID_BUILD_TOP/art/Android.mk).
     eg m -j32 build-art-host
  2) Not having boot.art available (see $ANDROID_BUILD_TOP/build/make/core/dex_preopt_libart_boot.mk)
     eg m -j32 out/target/product/generic_x86_64/dex_bootjars/system/framework/x86_64/boot.art
EOF
}

invoke_with=
DALVIKVM=dalvikvm
LIBART=libart.so
VERBOSE="no"

while [[ "$1" = "-"* ]]; do
  case $1 in
  --32)
    DALVIKVM=dalvikvm32
    ;;
  --64)
    DALVIKVM=dalvikvm64
    ;;
  --callgrind)
    invoke_with="valgrind --tool=callgrind"
    ;;
  -d)
    ;& # Fallthrough
  --debug)
    LIBART="libartd.so"
    ;;
  --gdb)
    LIBART="libartd.so"
    invoke_with="gdb --args"
    ;;
  --help)
    usage
    exit 0
    ;;
  --invoke-with)
    invoke_with=$2
    shift
    ;;
  --perf)
    PERF="record"
    ;;
  --perf-report)
    PERF="report"
    ;;
  --verbose)
    VERBOSE="yes"
    ;;
  --*)
    echo "unknown option: $1" > /dev/stderr
    usage
    exit 1
    ;;
  *)
    break
    ;;
  esac
  shift
done

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

PROG_NAME="$(follow_links)"
PROG_DIR="$(cd "${PROG_NAME%/*}" ; pwd -P)"
ANDROID_ROOT=$PROG_DIR/..
DALVIKVM_PATH=$ANDROID_ROOT/bin/$DALVIKVM

if [ ! -x "$DALVIKVM_PATH" ]; then
  cat > /dev/stderr <<EOF
Dalvik VM not found: $DALVIKVM_PATH
This script should be in the same directory as the Dalvik VM.
EOF
  exit 1
fi

LIBDIR="$(find_libdir $DALVIKVM_PATH)"
LD_LIBRARY_PATH=$ANDROID_ROOT/$LIBDIR
EXTRA_OPTIONS=""

DELETE_ANDROID_DATA=false
# If ANDROID_DATA is the system ANDROID_DATA or is not set, use our own,
# and ensure we delete it at the end.
if [ "$ANDROID_DATA" = "/data" ] || [ "$ANDROID_DATA" = "" ]; then
  ANDROID_DATA=$PWD/android-data$$
  mkdir -p $ANDROID_DATA/dalvik-cache/{arm,arm64,x86,x86_64}
  DELETE_ANDROID_DATA=true
fi

if [ z"$PERF" != z ]; then
  invoke_with="perf record -g -o $ANDROID_DATA/perf.data -e cycles:u $invoke_with"
  EXTRA_OPTIONS="-Xcompiler-option --generate-debug-info"
fi

# We use the PIC core image to work with perf.
CMD="ANDROID_DATA=$ANDROID_DATA                \
    ANDROID_ROOT=$ANDROID_ROOT                 \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH           \
    PATH=$ANDROID_ROOT/bin:$PATH               \
    LD_USE_LOAD_BIAS=1                         \
    $invoke_with $DALVIKVM_PATH $lib           \
      -XXlib:$LIBART                           \
      -Xnorelocate                             \
      -Ximage:$ANDROID_ROOT/framework/core.art \
      $EXTRA_OPTIONS                           \
      $@"
[ "$VERBOSE" = yes ] && echo $CMD
eval $CMD
EXIT_STATUS=$?

if [ z"$PERF" != z ]; then
  if [ z"$PERF" = zreport ]; then
    perf report -i $ANDROID_DATA/perf.data
  fi
  echo "Perf data saved in: $ANDROID_DATA/perf.data"
else
  if [ "$DELETE_ANDROID_DATA" = "true" ]; then
    rm -rf $ANDROID_DATA
  fi
fi

exit $EXIT_STATUS
