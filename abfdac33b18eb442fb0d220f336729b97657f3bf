{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5fe43db_418815ac",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2588,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T10:30:28Z",
      "side": 1,
      "message": "Since this macro hides return statements I think it\u0027s worth pointing out that it can return. Maybe RETURN_CLASS_OR_ON_ERROR?",
      "range": {
        "startLine": 2588,
        "startChar": 8,
        "endLine": 2588,
        "endChar": 47
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65961ad8_315650ed",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2588,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-09-24T11:13:43Z",
      "side": 1,
      "message": "It returns whether the lookup was \"recognized\", ie the class loader chain only has class loaders the runtime understands.\n\nIf we want RETURN in the name, it sounds to me like we\u0027d want to name it:\nRETURN_IF_UNRECOGNIZED_OR_FOUND_OR_EXCEPTION.\n\nWould you prefer that?",
      "parentUuid": "e5fe43db_418815ac",
      "range": {
        "startLine": 2588,
        "startChar": 8,
        "endLine": 2588,
        "endChar": 47
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff721e19_ce013831",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2588,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T11:34:18Z",
      "side": 1,
      "message": "Yes, that looks fine too.",
      "parentUuid": "65961ad8_315650ed",
      "range": {
        "startLine": 2588,
        "startChar": 8,
        "endLine": 2588,
        "endChar": 47
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06106b6b_1ca163a9",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2597,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T10:30:28Z",
      "side": 1,
      "message": "Should this be true? The three IsExceptionPending checks you replace all return false.",
      "range": {
        "startLine": 2597,
        "startChar": 11,
        "endLine": 2597,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1342ba3a_54bf412b",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2597,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-09-24T11:13:43Z",
      "side": 1,
      "message": "Right good catch, it should be false. I think the \"false\" is a conservative return, so that we re-execute the lookup but in Java. Still, let\u0027s keep the behavior as it was, and I\u0027m now returning false here.",
      "parentUuid": "06106b6b_1ca163a9",
      "range": {
        "startLine": 2597,
        "startChar": 11,
        "endLine": 2597,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "706ca9d1_a8532950",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2599,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-09-24T10:14:10Z",
      "side": 1,
      "message": "1. Wrap in `do {...} while(0)` to allow using as a single statement.\n2. Put arguments in local variables to avoid accidental reevaluation.",
      "range": {
        "startLine": 2599,
        "startChar": 0,
        "endLine": 2599,
        "endChar": 1
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ceb1e3_5411128d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2599,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T10:30:28Z",
      "side": 1,
      "message": "1. +1\n2. Afaics they\u0027re only used once so it seems superfluous, but I was about to suggest parentheses around them to avoid operator precedence surprises.",
      "parentUuid": "706ca9d1_a8532950",
      "range": {
        "startLine": 2599,
        "startChar": 0,
        "endLine": 2599,
        "endChar": 1
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bb0c6b3_85b2d0f5",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2599,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-09-24T10:34:00Z",
      "side": 1,
      "message": "2. I\u0027m guarding against my future self who can copy-paste a few lines without thinking of the macro context and the way it gets invoked.",
      "parentUuid": "57ceb1e3_5411128d",
      "range": {
        "startLine": 2599,
        "startChar": 0,
        "endLine": 2599,
        "endChar": 1
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5f0e47c_f992deb3",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2599,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-09-24T11:13:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "706ca9d1_a8532950",
      "range": {
        "startLine": 2599,
        "startChar": 0,
        "endLine": 2599,
        "endChar": 1
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "383feb0a_f7f7c032",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2662,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T10:30:28Z",
      "side": 1,
      "message": "Should it return true if FindClassInBaseDexClassLoaderClassPath neither set *result nor created an exception? That seems odd, but otoh it is what the code did before. If it\u0027s correct I think it\u0027d warrant a comment.",
      "range": {
        "startLine": 2662,
        "startChar": 11,
        "endLine": 2662,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf907430_95efc20a",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2662,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-09-24T11:13:43Z",
      "side": 1,
      "message": "It should return true, as the class loader chain was recognized. I\u0027ve added a comment.",
      "parentUuid": "383feb0a_f7f7c032",
      "range": {
        "startLine": 2662,
        "startChar": 11,
        "endLine": 2662,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8b6cd71_62172955",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2689,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T10:30:28Z",
      "side": 1,
      "message": "Same thing here.",
      "range": {
        "startLine": 2689,
        "startChar": 11,
        "endLine": 2689,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bf97e40_7a82778a",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2689,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T10:30:28Z",
      "side": 1,
      "message": "Same thing here.",
      "range": {
        "startLine": 2689,
        "startChar": 11,
        "endLine": 2689,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3a655ba_39701e29",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2689,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-09-24T11:13:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9bf97e40_7a82778a",
      "range": {
        "startLine": 2689,
        "startChar": 11,
        "endLine": 2689,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5810e558_36f775ec",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2689,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-09-24T11:13:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8b6cd71_62172955",
      "range": {
        "startLine": 2689,
        "startChar": 11,
        "endLine": 2689,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e5c93a9_45e3766c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2689,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-09-24T11:34:18Z",
      "side": 1,
      "message": "Sorry for the duplicate comment. I blame it on a Gerrit bug: http://b/201052135",
      "parentUuid": "5810e558_36f775ec",
      "range": {
        "startLine": 2689,
        "startChar": 11,
        "endLine": 2689,
        "endChar": 15
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ae9767f_9a59aa68",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1035,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-09-24T10:14:10Z",
      "side": 1,
      "message": "Nit: add \u0027\u003d\u0027 after the arg name for consistency with other code (Vladimir tries to be consistent about that in all recent CLs). Here and below.",
      "range": {
        "startLine": 1035,
        "startChar": 10,
        "endLine": 1035,
        "endChar": 17
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6d6cdf7_bc25d46b",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1035,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-24T11:04:38Z",
      "side": 1,
      "message": "/*out*/ is not an argument name; it\u0027s an (uncheck, AFAIK) \"annotation\" telling that the argument is written to (and not read), and that is used to carry an additional \"return value\".\n\nWe do however add `\u003d` after the names of commented-out (actual) arguments, in function calls (see e.g. https://cs.android.com/android/_/android/platform/art/+/2f01e8ed55663b73787e079955d890e1ffd2983e:runtime/runtime_callbacks_test.cc;l\u003d523-526;drc\u003d27dc87782f68bebae95c4ab87fe21bb638008a96), as this is checked by Clang:\n\nhttps://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html",
      "parentUuid": "9ae9767f_9a59aa68",
      "range": {
        "startLine": 1035,
        "startChar": 10,
        "endLine": 1035,
        "endChar": 17
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28058355_31b9e8c4",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1035,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-09-24T11:12:18Z",
      "side": 1,
      "message": "Oh, right. Thanks!",
      "parentUuid": "e6d6cdf7_bc25d46b",
      "range": {
        "startLine": 1035,
        "startChar": 10,
        "endLine": 1035,
        "endChar": 17
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d80b16a7_9ab4abbe",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 1035,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-09-24T11:13:43Z",
      "side": 1,
      "message": "That\u0027s right, /*out*/ isn\u0027t the name of the parameter here. What we do is for parameters passed as literals, we like having /* name\u003d */ as they help understand the code.",
      "parentUuid": "e6d6cdf7_bc25d46b",
      "range": {
        "startLine": 1035,
        "startChar": 10,
        "endLine": 1035,
        "endChar": 17
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e3a090f_47ad40fa",
        "filename": "test/831-unverified-bcp/info.txt",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-24T11:17:59Z",
      "side": 1,
      "message": "looking",
      "range": {
        "startLine": 2,
        "startChar": 31,
        "endLine": 2,
        "endChar": 37
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3e8b564_392c2d0d",
        "filename": "test/831-unverified-bcp/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-09-24T11:17:59Z",
      "side": 1,
      "message": "classpath",
      "range": {
        "startLine": 44,
        "startChar": 32,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "abfdac33b18eb442fb0d220f336729b97657f3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}