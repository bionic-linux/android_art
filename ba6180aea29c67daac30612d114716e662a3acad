{
  "comments": [
    {
      "key": {
        "uuid": "08f6ac87_465a1ba7",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 467,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-28T15:58:53Z",
      "side": 1,
      "message": "This would synchronize, but what if it doesn\u0027t join?",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c94277dc_74fcfa08",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 467,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T10:56:09Z",
      "side": 1,
      "message": "See definition of CHECK_PTHREAD_CALL.",
      "parentUuid": "08f6ac87_465a1ba7",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd2a861b_e4226243",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 479,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-28T15:58:53Z",
      "side": 1,
      "message": "So I suppose the suspend-all is a guarantee that it finishes synchronizing?",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfbf8cea_839b1af0",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 479,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T10:56:09Z",
      "side": 1,
      "message": "I\u0027d feel happier if the code called ScopedSuspendAll / RemoveListener before calling FinishingTracing().",
      "parentUuid": "fd2a861b_e4226243",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deb2571b_d4baf316",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 712,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-28T15:58:53Z",
      "side": 1,
      "message": "This seems too vague to me, locks should be in pairs.",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac00d887_5200f479",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 712,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T10:56:09Z",
      "side": 1,
      "message": "Gone.",
      "parentUuid": "deb2571b_d4baf316",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a395607_757ad4c2",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 720,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-28T14:56:13Z",
      "side": 1,
      "message": "Its only acquiring lock for streaming. How does this synchronize-with WriteBuffers for non-streaming modes?",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e0ff891_5e1cfc54",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 720,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-28T15:41:37Z",
      "side": 1,
      "message": "See comment at top of function. The common synchronization is in StopTracing(). The Trace::the_trace_ singleton is null at this point and the sampling thread is gone.\n\nThe reason the lock acquisition here may be to emphasize it\u0027s modifying state that guarded by the streaming lock. In particular, it keeps the verifier happy.",
      "parentUuid": "5a395607_757ad4c2",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ba4d018_81fd58f0",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 720,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T10:56:09Z",
      "side": 1,
      "message": "My previous comment here is bogus. In particular, method tracing may still be active when we call this method. That seems problematic on the non-streaming paths as to what gets copied / written out further down.",
      "parentUuid": "4e0ff891_5e1cfc54",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec46c5f8_9c33618c",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 765,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-28T14:56:13Z",
      "side": 1,
      "message": "same",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70c614c4_4b017e06",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 765,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-28T15:41:37Z",
      "side": 1,
      "message": "The comment in the code here doesn\u0027t seem very accurate, cut-and-paste artifact (?).",
      "parentUuid": "ec46c5f8_9c33618c",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a03e7e57_8af331a7",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 765,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-03-29T00:28:06Z",
      "side": 1,
      "message": "It\u0027s really protecting access to buf_, right?",
      "parentUuid": "70c614c4_4b017e06",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "941c31d7_0278eb4b",
        "filename": "runtime/trace.cc",
        "patchSetId": 9
      },
      "lineNbr": 765,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T10:56:09Z",
      "side": 1,
      "message": "Yes. Updated.",
      "parentUuid": "a03e7e57_8af331a7",
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ddd10c1_7b25c734",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 324,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-03-29T00:28:06Z",
      "side": 1,
      "message": "Is that accurate?\n\nI think it\u0027s either protected by streaming_lock, or threads reserve space by incrementing cur_offset_ and then write into the reserved space, or it\u0027s accessed when all other threads are suspended, and thus can\u0027t be writing.",
      "range": {
        "startLine": 323,
        "startChar": 33,
        "endLine": 324,
        "endChar": 66
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aee46d91_1896ecf9",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 324,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T10:56:09Z",
      "side": 1,
      "message": "Good call.",
      "parentUuid": "9ddd10c1_7b25c734",
      "range": {
        "startLine": 323,
        "startChar": 33,
        "endLine": 324,
        "endChar": 66
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "216a6836_2d523a51",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 347,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-03-29T00:28:06Z",
      "side": 1,
      "message": "Is the comment I proposed in PS3 accurate? If so, I would prefer that. I think that more precisely we may be able to say that in non-streaming mode, the buffer is only read after\n\n1) In ScopedSuspendAll in RunSamplingThread, or\n2) In ScopedSuspendAll in StopTracing, or\n3) while holding the streaming lock, if we are in streaming mode.\n\nIn any case, cur_offset_ is never used for synchronization between buffer readers and writers.",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7f1e191_5f40712d",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 347,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T10:56:09Z",
      "side": 1,
      "message": "I\u0027ve revised the comment as suggested.\n\nDo we not have a race for in FinishTracing()? Specifically, when method tracing another thread may have just reserved a buffer region (and is then suspended), whilst the current thread calls FinishTracing(). The current reads cur_offset_ into final_offset and then calls WriteFully(buf_.get(), final_offset) before leaving FinishTracing().\n\nIf so, perhaps moving the RemoveListener() call (inside a ScopedSuspendAll) before calling FinishTracing would be an appropriate remedy. And it might make the code a little easier to reason about here.",
      "parentUuid": "216a6836_2d523a51",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0805a5ac_95fff13e",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 347,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-03-29T15:46:22Z",
      "side": 1,
      "message": "There shouldn\u0027t be a suspend point...",
      "parentUuid": "d7f1e191_5f40712d",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba94b993_cb1a5a62",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 347,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T16:09:39Z",
      "side": 1,
      "message": "Does ... represent \"ScopedGCCriticalSection also required\" or something else?",
      "parentUuid": "0805a5ac_95fff13e",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bf15bdb_dd05a497",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 347,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-03-29T16:36:07Z",
      "side": 1,
      "message": "I can\u0027t parse the question. ... has no meaning here, just saying that there shouldn\u0027t be a suspend point, so your assumptions are false, so there\u0027s no race.",
      "parentUuid": "ba94b993_cb1a5a62",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03a4472c_94bf8311",
        "filename": "runtime/trace.h",
        "patchSetId": 9
      },
      "lineNbr": 347,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-29T17:22:04Z",
      "side": 1,
      "message": "The proposal to move RemoveListener() before FinishTracing() is to avoid what looks like a potential race in FinishTracing().\n\nIf this isn\u0027t a race condition, great, that\u0027s why the question is asked above to get additional input. We should be clear in documenting why.",
      "parentUuid": "5bf15bdb_dd05a497",
      "range": {
        "startLine": 347,
        "startChar": 2,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "ba6180aea29c67daac30612d114716e662a3acad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}