{
  "comments": [
    {
      "key": {
        "uuid": "446d06a6_5e4af50f",
        "filename": "compiler/debug/xz_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-12-06T18:03:08Z",
      "side": 1,
      "message": "Thread unsafe. As discussed offline, I\u0027d rather have a static constructor do the initialization. (Despite my dislike for static constructors.) This can be implemented without a namespace variable by using __attribute__((constructor)) on an initialization function.",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "490f049f4d305fd00d626e0d2bae55f207d029c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5334f269_09b4e744",
        "filename": "compiler/debug/xz_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-12-06T19:03:01Z",
      "side": 1,
      "message": "There\u0027s two ways of doing this in C++11 in a standard way. and both are thread safe:\n\n  // option 1, using function-local static initialization\n  static void XzInitRc() {\n    struct XzInitializer {  // can also be a global\n      XzInitializer() {\n        CrcGenerateTable();\n        Crc64GenerateTable();\n      }\n    };\n    static XzInitializer initializer;\n  }\n\n  // option 2, using std:call_once\n  static void XzInitRc() {\n    static std::once_flag xz_init_flag;  // can also be a global\n    std::call_once(xz_init_flag, [](){ \n      CrcGenerateTable();\n      Crc64GenerateTable();\n    });\n  }\n\nThese are both for lazy-init, you can just put a regular top-level static if eager is ok.",
      "parentUuid": "446d06a6_5e4af50f",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "490f049f4d305fd00d626e0d2bae55f207d029c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9dc5b59_a294bc10",
        "filename": "compiler/debug/xz_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-12-07T11:14:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5334f269_09b4e744",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "490f049f4d305fd00d626e0d2bae55f207d029c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f66727d5_da84d960",
        "filename": "compiler/debug/xz_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-12-07T11:16:17Z",
      "side": 1,
      "message": "Thanks, Igor. I was aware of pthread_once() but I did not know the c++ wrapper.",
      "parentUuid": "c9dc5b59_a294bc10",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "490f049f4d305fd00d626e0d2bae55f207d029c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c70f8731_76c5e044",
        "filename": "compiler/debug/xz_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-12-07T18:49:51Z",
      "side": 1,
      "message": "Any time. It\u0027s been a small hope of mine to one day \u0027discover\u0027 some ART code that would actually benefit from std::call_once, so I\u0027m glad we applied it here.",
      "parentUuid": "f66727d5_da84d960",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "490f049f4d305fd00d626e0d2bae55f207d029c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}