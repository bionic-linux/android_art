{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2f354fbe_a71248ef",
        "filename": "runtime/jni/java_vm_ext.cc",
        "patchSetId": 10
      },
      "lineNbr": 966,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-02-08T19:34:42Z",
      "side": 1,
      "message": "@ngeoffray@google.com, Jiyong had concern on https://r.android.com/877973 back when the caller class was added, namely that this could resolve to a (vdex?) path in dalvik-cache. It was dismissed back then because the caller class would only be used for APEXes when there are no class loader.\n\nWith this that\u0027s no longer the case though, so is that correct? If so, do we have another way to find the source dex path, or do we need to decode dalvik-cache paths here?",
      "range": {
        "startLine": 966,
        "startChar": 26,
        "endLine": 966,
        "endChar": 50
      },
      "revId": "ef4589d65056089853144783702d7182e1fdf0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dfb6f61_05cfa601",
        "filename": "runtime/jni/java_vm_ext.cc",
        "patchSetId": 10
      },
      "lineNbr": 966,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-02-09T09:42:41Z",
      "side": 1,
      "message": "This is out of my breadth here. I don\u0027t see how vdex would be associated with linker namespaces.",
      "parentUuid": "2f354fbe_a71248ef",
      "range": {
        "startLine": 966,
        "startChar": 26,
        "endLine": 966,
        "endChar": 50
      },
      "revId": "ef4589d65056089853144783702d7182e1fdf0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6aa20ac_db0ad4b0",
        "filename": "runtime/jni/java_vm_ext.cc",
        "patchSetId": 10
      },
      "lineNbr": 966,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-02-09T11:15:55Z",
      "side": 1,
      "message": "Here\u0027s what Jiyong said:\n\n\u003e oh, I have the answer here. So it is a file path to the dex cache.\n\u003e \n\u003e IIUC, one thing that worries me is that the path contains arch as /data/dalvik-cache/arm64/aaaa@bbbb@cccc.dex... , which means this can\u0027t be used as an ID that uniquely represent the caller. Perhaps we can just send the basename?\n\nI mentioned vdex because that\u0027s the only file we write to dalvik-cache that can possibly contain dex code. It doesn\u0027t really matter - what matters is if this path can be to the dalvik-cache rather than the source apk or dex jar.",
      "parentUuid": "2dfb6f61_05cfa601",
      "range": {
        "startLine": 966,
        "startChar": 26,
        "endLine": 966,
        "endChar": 50
      },
      "revId": "ef4589d65056089853144783702d7182e1fdf0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3817b109_42e7441b",
        "filename": "runtime/jni/java_vm_ext.cc",
        "patchSetId": 10
      },
      "lineNbr": 966,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-02-12T07:40:33Z",
      "side": 1,
      "message": "My understanding was that GetLocation() returns the true location of the dex file not its vdex.",
      "parentUuid": "f6aa20ac_db0ad4b0",
      "range": {
        "startLine": 966,
        "startChar": 26,
        "endLine": 966,
        "endChar": 50
      },
      "revId": "ef4589d65056089853144783702d7182e1fdf0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87089d9d_8bec4459",
        "filename": "runtime/jni/java_vm_ext.cc",
        "patchSetId": 10
      },
      "lineNbr": 966,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-02-13T00:18:03Z",
      "side": 1,
      "message": "Yes, you mentioned .dex files, not vdex. However .dex files are actually OAT files in `dalvik-cache`, so they don\u0027t contain any dex code either.\n\nvdex files otoh can actually contain dex code (when `classes*.dex` are compressed in the APK so we cannot map the dex code directly from there). I\u0027d still like to confirm that GetLocation() doesn\u0027t point to the vdex file in that case. @dsrbecky@google.com, do you know that?",
      "parentUuid": "3817b109_42e7441b",
      "range": {
        "startLine": 966,
        "startChar": 26,
        "endLine": 966,
        "endChar": 50
      },
      "revId": "ef4589d65056089853144783702d7182e1fdf0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad247c58_291616ed",
        "filename": "runtime/jni/java_vm_ext.cc",
        "patchSetId": 10
      },
      "lineNbr": 966,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-02-15T19:07:29Z",
      "side": 1,
      "message": "In the meeting earlier today Nicolas was fairly confident the location is always the apk or source dex jar, so we shouldn\u0027t get paths in `dalvik-cache` here.",
      "parentUuid": "87089d9d_8bec4459",
      "range": {
        "startLine": 966,
        "startChar": 26,
        "endLine": 966,
        "endChar": 50
      },
      "revId": "ef4589d65056089853144783702d7182e1fdf0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14e6ceb8_5d2eca1a",
        "filename": "runtime/jni/java_vm_ext.cc",
        "patchSetId": 10
      },
      "lineNbr": 966,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-02-23T16:34:16Z",
      "side": 1,
      "message": "Yes, my intuition is that both the location and checksum should reflect the original source, regardless whether we use .vdex or not.",
      "parentUuid": "ad247c58_291616ed",
      "range": {
        "startLine": 966,
        "startChar": 26,
        "endLine": 966,
        "endChar": 50
      },
      "revId": "ef4589d65056089853144783702d7182e1fdf0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}