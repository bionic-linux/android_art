{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eda5ea7a_ea85b484",
        "filename": "compiler/utils/x86_64/assembler_x86_64.h",
        "patchSetId": 1
      },
      "lineNbr": 791,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-07-21T09:07:23Z",
      "side": 1,
      "message": "Reorder operands; this is documented as \"XADD r/m8, r8\". (Unlike XCHG which seems to have both \"XCHG r/m8, r8\" and \"XCHG r8, r/m8\" versions.)",
      "range": {
        "startLine": 791,
        "startChar": 13,
        "endLine": 791,
        "endChar": 52
      },
      "revId": "728ea6e557c13856fdde925429820c1173ad24c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a371de37_941ae016",
        "filename": "compiler/utils/x86_64/assembler_x86_64.h",
        "patchSetId": 1
      },
      "lineNbr": 791,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-07-21T10:59:14Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "eda5ea7a_ea85b484",
      "range": {
        "startLine": 791,
        "startChar": 13,
        "endLine": 791,
        "endChar": 52
      },
      "revId": "728ea6e557c13856fdde925429820c1173ad24c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62927f12_5efaec4a",
        "filename": "compiler/utils/x86_64/assembler_x86_64_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 992,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-07-21T09:07:23Z",
      "side": 1,
      "message": "The ordering appears to be wrong, implying wrong implementation. See tests for OR/XOR/AND.\n\nNote that the `gas` assembler format has operands exchanged, compared to Intel\u0027s assembler and documentation.",
      "range": {
        "startLine": 992,
        "startChar": 61,
        "endLine": 992,
        "endChar": 77
      },
      "revId": "728ea6e557c13856fdde925429820c1173ad24c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68b32df5_27563e20",
        "filename": "compiler/utils/x86_64/assembler_x86_64_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 992,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-07-21T10:59:14Z",
      "side": 1,
      "message": "Done.\n\nI changed the operands in the implementation to have (src, dst) order. I am confused because for reg/reg instructions we almost always have (dst, src) order both in the signature and in the implementation, but for XADD I had to flip it.\n\nThe tests for reg/reg use %{reg2}, %{reg1} order consistently.",
      "parentUuid": "62927f12_5efaec4a",
      "range": {
        "startLine": 992,
        "startChar": 61,
        "endLine": 992,
        "endChar": 77
      },
      "revId": "728ea6e557c13856fdde925429820c1173ad24c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f02f7295_c68e2fcb",
        "filename": "compiler/utils/x86_64/assembler_x86_64_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 992,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-07-21T14:43:51Z",
      "side": 1,
      "message": "Comparing with `xorl`, I can see that we\u0027re choosing the \"XOR r32, r/m32\" (opcode 0x33) rather than \"XOR r/m32, r32\" (opcode 0x31) for the registers-only overload. But for `xadd*` there is no opcode with \"r32, r/m32\" operands, only with \"r/m32, r32\", so I guess this is causing the difference in implementation.",
      "parentUuid": "68b32df5_27563e20",
      "range": {
        "startLine": 992,
        "startChar": 61,
        "endLine": 992,
        "endChar": 77
      },
      "revId": "728ea6e557c13856fdde925429820c1173ad24c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}