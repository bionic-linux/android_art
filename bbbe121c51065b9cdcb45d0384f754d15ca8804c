{
  "comments": [
    {
      "key": {
        "uuid": "3984d6d9_e53b90a0",
        "filename": "compiler/compiler.h",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "Is this required or is it a refactoring?\n\nIf it\u0027s a refactoring, aren\u0027t the other parameters redundant now?",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29eb398a_5b1b3369",
        "filename": "compiler/compiler.h",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "This is a refactoring to avoid duplicating the JniOptimizationFlags determination.\n\nThe `method` can be null, so the other parameters are still needed.",
      "parentUuid": "3984d6d9_e53b90a0",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e24e4448_7485cbff",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-18T13:28:17Z",
      "side": 1,
      "message": "We should add a new space to JIT to allocate native methods there. JIT code cache collection assumes a compiled code has a ProfilingInfo, but we cannot have that for native methods. Most probably your current CL would crash if we ever do a JIT GC with native methods compiled?\n\nSo with a new space, the JIT GC will just not look at it. And given we talked about sharing stubs between native methods we probably won\u0027t want to GC anyway.",
      "range": {
        "startLine": 1242,
        "startChar": 35,
        "endLine": 1242,
        "endChar": 45
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c348c51c_739913e3",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T13:42:09Z",
      "side": 1,
      "message": "I\u0027m working on sharing the code and allowing a GC as we do for all other methods.",
      "parentUuid": "e24e4448_7485cbff",
      "range": {
        "startLine": 1242,
        "startChar": 35,
        "endLine": 1242,
        "endChar": 45
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3e9c2d9_392a8b48",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-18T13:43:51Z",
      "side": 1,
      "message": "We\u0027re using ProfilingInfo to store the \"saved\" entrypoint. Do you plan to store it somewhere else?",
      "parentUuid": "c348c51c_739913e3",
      "range": {
        "startLine": 1242,
        "startChar": 35,
        "endLine": 1242,
        "endChar": 45
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2565d0b0_599b5fc0",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T14:10:42Z",
      "side": 1,
      "message": "What is the \"saved entrypoint\"?",
      "parentUuid": "b3e9c2d9_392a8b48",
      "range": {
        "startLine": 1242,
        "startChar": 35,
        "endLine": 1242,
        "endChar": 45
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25a3854b_7ec513f4",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-18T14:16:56Z",
      "side": 1,
      "message": "The JIT compiled code.\n\nThe way the GC works is that it puts the interpreter entrypoint in the ArtMethod and the compiled code entrypoint in the ProfilingInfo.\n\nWhen the interpreter starts executing a method, it checks whether that method has its ProfilingInfo entrypoint set, in which case it will just update back the ArtMethod entrypoint.\n\nThe logic here is to avoid removing compiled code that is still actively used.",
      "parentUuid": "2565d0b0_599b5fc0",
      "range": {
        "startLine": 1242,
        "startChar": 35,
        "endLine": 1242,
        "endChar": 45
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90e6bb8e_7f10585a",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T14:38:00Z",
      "side": 1,
      "message": "I guess we can do the same by looking up the code in the JitCodeCache from artQuickGenericJniTrampoline() if we\u0027re running the JIT GC.",
      "parentUuid": "25a3854b_7ec513f4",
      "range": {
        "startLine": 1242,
        "startChar": 35,
        "endLine": 1242,
        "endChar": 45
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "108eb855_7db37eba",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1254,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "What does it mean for JNI?",
      "range": {
        "startLine": 1254,
        "startChar": 8,
        "endLine": 1254,
        "endChar": 11
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7070dd4_918e949a",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1254,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "Nothing.",
      "parentUuid": "108eb855_7db37eba",
      "range": {
        "startLine": 1254,
        "startChar": 8,
        "endLine": 1254,
        "endChar": 11
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50e72588_cbff76f9",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1255,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "What is roots ?",
      "range": {
        "startLine": 1255,
        "startChar": 8,
        "endLine": 1255,
        "endChar": 13
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa10fe8e_908f09c4",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1255,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "null, see above.",
      "parentUuid": "50e72588_cbff76f9",
      "range": {
        "startLine": 1255,
        "startChar": 8,
        "endLine": 1255,
        "endChar": 13
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87015619_bf07e451",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1257,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "What does it mean for JNI?",
      "range": {
        "startLine": 1257,
        "startChar": 8,
        "endLine": 1257,
        "endChar": 38
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "972c05ba_f2f5aa05",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1257,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "This empty, see above.",
      "parentUuid": "87015619_bf07e451",
      "range": {
        "startLine": 1257,
        "startChar": 8,
        "endLine": 1257,
        "endChar": 38
      },
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37be605d_a138299f",
        "filename": "runtime/jit/jit.cc",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "?",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba45bce3_98376767",
        "filename": "runtime/jit/jit.cc",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "We do not create profiling info for native methods.",
      "parentUuid": "37be605d_a138299f",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791eccb8_0c966e01",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 660,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "Why don\u0027t we need a code cache shootdown for JNI? This seems like a race.",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "135fab8d_44ca4375",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 660,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "This is for the _data_ (as the comment makes clear) and we have no data for native methods.\n\n(See the ScopedCodeCacheWrite at line 584 for commmitting the code.)",
      "parentUuid": "791eccb8_0c966e01",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cbd205c_c9b2c910",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1489,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "?",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f0bbe06_9543c081",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1489,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "Native methods have no profiling info.",
      "parentUuid": "3cbd205c_c9b2c910",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d7233d_bc5ce37b",
        "filename": "test/667-jit-jni-stub/run",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-17T18:01:05Z",
      "side": 1,
      "message": "Wouldn\u0027t --compiler-filter\u003dquicken be more appropriate?",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2f30f9c_cb1f3ee2",
        "filename": "test/667-jit-jni-stub/run",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-18T08:54:05Z",
      "side": 1,
      "message": "Absolutely not, quicken compiles native stubs.",
      "parentUuid": "48d7233d_bc5ce37b",
      "revId": "bbbe121c51065b9cdcb45d0384f754d15ca8804c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}