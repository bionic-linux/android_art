{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "11422c60_6c4cc52f",
        "filename": "dexopt_chroot_setup/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "Typo: \"because\"",
      "range": {
        "startLine": 62,
        "startChar": 54,
        "endLine": 62,
        "endChar": 61
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48305cdb_a15eddb4",
        "filename": "dexopt_chroot_setup/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11422c60_6c4cc52f",
      "range": {
        "startLine": 62,
        "startChar": 54,
        "endLine": 62,
        "endChar": 61
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "640d485e_e1561b1e",
        "filename": "dexopt_chroot_setup/art_standalone_dexopt_chroot_setup_tests.xml",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "A thought here is that there\u0027s no need to use template expansions in this file. Otoh, keeping it as a template makes it easier to diff against the templates in art/test. So overall I\u0027m on the fence - it\u0027s ok either way.",
      "range": {
        "startLine": 17,
        "startChar": 33,
        "endLine": 17,
        "endChar": 41
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffa17936_21ca16b6",
        "filename": "dexopt_chroot_setup/art_standalone_dexopt_chroot_setup_tests.xml",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "I think the benefit is that it\u0027s easier to copy-paste the contents among different tests.",
      "parentUuid": "640d485e_e1561b1e",
      "range": {
        "startLine": 17,
        "startChar": 33,
        "endLine": 17,
        "endChar": 41
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d72d709e_6ee6c65f",
        "filename": "dexopt_chroot_setup/art_standalone_dexopt_chroot_setup_tests.xml",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "I\u0027ve noticed the [`test.extra_test_config`](https://cs.android.com/android/platform/superproject/main/+/main:build/soong/cc/test.go;l\u003d55;drc\u003daa39480d2107fff4c42e321616436b0b0b718cde) argument in Soong. It\u0027s not clear to me how it works, but I wonder if it can be used to add this without duplicating the template. IDK - optional.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 92
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec7da29a_87e54090",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "go/cstyle#Operator_Overloading says don\u0027t use this (and I agree - I like to see the plain old dumb casts where they\u0027re needed).\n\nA suggestion is to use an inline function instead to make it `ChrootSubdir(\"/apex\")` etc.",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6773c86a_943d64af",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec7da29a_87e54090",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17ecfc23_8587e13a",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "Make an AIDL constant out of this prefix too?",
      "range": {
        "startLine": 81,
        "startChar": 42,
        "endLine": 81,
        "endChar": 64
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd5a3715_b3bacad9",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17ecfc23_8587e13a",
      "range": {
        "startLine": 81,
        "startChar": 42,
        "endLine": 81,
        "endChar": 64
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b9a3068_0073eb65",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "Please make it more descriptive by including the use case. `kChrootDefaultMode`?\n```suggestion\nconstexpr mode_t kChrootDefaultMode \u003d 0755;\n```",
      "range": {
        "startLine": 83,
        "startChar": 17,
        "endLine": 83,
        "endChar": 22
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29129f18_b0993712",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b9a3068_0073eb65",
      "range": {
        "startLine": 83,
        "startChar": 17,
        "endLine": 83,
        "endChar": 22
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc92ba3c_e43195f6",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "Can\u0027t this be an assertion instead?\n```suggestion\n  CHECK(!PathStartsWith(source, DexoptChrootSetup::CHROOT_DIR));\n```",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 120,
        "endChar": 3
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dce546e_aea43a2d",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc92ba3c_e43195f6",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 120,
        "endChar": 3
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfaa3338_ce763b23",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "Sorry I don\u0027t follow. First off, from mount(2) I get that these mount properties are scoped to the parent mount, not processes. Secondly, doesn\u0027t sharing only come into play if we bind mount the same directory to several locations inside the chroot?\n\nOr put differently, what would break if we simply mounted everything with `MS_BIND|MS_REC` followed by changing it to slave with `MS_SLAVE|MS_REC`?",
      "range": {
        "startLine": 121,
        "startChar": 74,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b32b7394_8f0655bf",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "\u003e First off, from mount(2) I get that these mount properties are scoped to the parent mount, not processes. Secondly, doesn\u0027t sharing only come into play if we bind mount the same directory to several locations inside the chroot?\n\nsystem_server has a separate mount namespace. We must mount shared so that the files can be seen there. Note that we need to classload the new service-art.jar there.\n\n\u003e Or put differently, what would break if we simply mounted everything with MS_BIND|MS_REC followed by changing it to slave with MS_SLAVE|MS_REC?\n\nFirst, we don\u0027t use `MS_REC`, and the reason is stated on line 159-163. Second, if we do `MS_BIND` and `MS_SLAVE` for each mount point, we will get the propagation type of \"slave\" rather than \"slave+shared\", so system_server won\u0027t be able to see the files.",
      "parentUuid": "cfaa3338_ce763b23",
      "range": {
        "startLine": 121,
        "startChar": 74,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e74430ab_6237735e",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-08T17:18:04Z",
      "side": 1,
      "message": "\u003e system_server has a separate mount namespace.\n\nAha. Which two mount namespaces are we talking about here? Where do they get set up?\n\n\u003e We must mount shared so that the files can be seen there.\n\nDo you need a shared mount for that? I interpret mount(2) that shared mounts are only relevant to how mount and unmount events are propagated, not file access. So do we mount and unmount things inside the chroot that need to be propagated outside of it?\n\n\u003e First, we don\u0027t use MS_REC, and the reason is stated on line 159-163.\n\n(I saw that, but it\u0027s just a consequence of the shared mounts so it\u0027s besides question.)",
      "parentUuid": "b32b7394_8f0655bf",
      "range": {
        "startLine": 121,
        "startChar": 74,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73cf0466_c1fabc59",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-08T19:38:00Z",
      "side": 1,
      "message": "\u003e Which two mount namespaces are we talking about here? Where do they get set up?\n\nTBH, I don\u0027t know. I only know that system_server\u0027s mounts are slaves of init\u0027s mounts. Note `shared:\u003cnumber\u003e` in init\u0027s `/proc/pid/mountinfo` and `master:\u003cnumber\u003e` in system_server\u0027s `/proc/pid/mountinfo` below.\n\ninit:\n\n```\n$ adb shell cat /proc/1/mountinfo\n40 39 254:9 / / ro,relatime shared:1 - erofs /dev/block/dm-9 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n41 40 0:17 / /dev rw,nosuid,relatime shared:2 - tmpfs tmpfs rw,seclabel,mode\u003d755\n42 41 0:18 / /dev/pts rw,relatime shared:3 - devpts devpts rw,seclabel,mode\u003d600,ptmxmode\u003d000\n43 40 0:19 / /proc rw,relatime shared:4 - proc proc rw,gid\u003d3009,hidepid\u003dinvisible\n44 40 0:20 / /sys rw,relatime shared:5 - sysfs sysfs rw,seclabel\n45 44 0:15 / /sys/fs/selinux rw,relatime shared:6 - selinuxfs selinuxfs rw\n46 40 0:21 / /mnt rw,nosuid,nodev,noexec,relatime shared:7 - tmpfs tmpfs rw,seclabel,mode\u003d755,gid\u003d1000\n47 46 0:21 /user /mnt/installer rw,nosuid,nodev,noexec,relatime shared:16 master:7 - tmpfs tmpfs rw,seclabel,mode\u003d755,gid\u003d1000\n48 46 0:21 /user /mnt/androidwritable rw,nosuid,nodev,noexec,relatime shared:18 master:7 - tmpfs tmpfs rw,seclabel,mode\u003d755,gid\u003d1000\n49 40 259:2 / /metadata rw,nosuid,nodev,noatime shared:8 - ext4 /dev/block/vda18 rw,seclabel\n50 40 254:10 / /odm ro,relatime shared:9 - erofs /dev/block/dm-10 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n51 40 254:11 / /product ro,relatime shared:10 - erofs /dev/block/dm-11 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n52 40 254:12 / /system_ext ro,relatime shared:11 - erofs /dev/block/dm-12 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n53 40 254:13 / /vendor ro,relatime shared:12 - erofs /dev/block/dm-13 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n54 40 254:14 / /vendor_dlkm ro,relatime shared:13 - erofs /dev/block/dm-14 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n55 40 254:15 / /odm_dlkm ro,relatime shared:14 - erofs /dev/block/dm-15 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n56 40 254:16 / /system_dlkm ro,relatime shared:15 - erofs /dev/block/dm-16 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n57 40 0:22 / /apex rw,nosuid,nodev,noexec,relatime - tmpfs tmpfs rw,seclabel,mode\u003d755\n58 40 0:23 / /bootstrap-apex rw,nosuid,nodev,noexec,relatime shared:17 - tmpfs tmpfs rw,seclabel,mode\u003d755\n59 40 0:25 / /linkerconfig rw,nosuid,nodev,noexec,relatime - tmpfs tmpfs rw,seclabel,mode\u003d755\n```\n\nsystem_server:\n\n```\n$ adb shell cat /proc/`adb shell pidof system_server`/mountinfo\n799 798 254:9 / / ro,relatime master:1 - erofs /dev/block/dm-9 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n800 799 0:17 / /dev rw,nosuid,relatime master:2 - tmpfs tmpfs rw,seclabel,mode\u003d755\n...\n817 799 0:21 / /mnt rw,nosuid,nodev,noexec,relatime master:7 - tmpfs tmpfs rw,seclabel,mode\u003d755,gid\u003d1000\n818 817 0:21 /user /mnt/installer rw,nosuid,nodev,noexec,relatime master:16 - tmpfs tmpfs rw,seclabel,mode\u003d755,gid\u003d1000\n819 817 0:21 /user /mnt/androidwritable rw,nosuid,nodev,noexec,relatime master:18 - tmpfs tmpfs rw,seclabel,mode\u003d755,gid\u003d1000\n820 817 0:36 / /mnt/vendor/shared rw,nosuid,nodev,noatime master:41 - virtiofs shared rw,seclabel\n821 799 259:2 / /metadata rw,nosuid,nodev,noatime master:8 - ext4 /dev/block/vda18 rw,seclabel\n822 799 254:10 / /odm ro,relatime master:9 - erofs /dev/block/dm-10 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n823 799 254:11 / /product ro,relatime master:10 - erofs /dev/block/dm-11 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n824 799 254:12 / /system_ext ro,relatime master:11 - erofs /dev/block/dm-12 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n825 799 254:13 / /vendor ro,relatime master:12 - erofs /dev/block/dm-13 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n826 799 254:14 / /vendor_dlkm ro,relatime master:13 - erofs /dev/block/dm-14 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n827 799 254:15 / /odm_dlkm ro,relatime master:14 - erofs /dev/block/dm-15 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n828 799 254:16 / /system_dlkm ro,relatime master:15 - erofs /dev/block/dm-16 ro,seclabel,user_xattr,acl,cache_strategy\u003dreadaround\n829 799 0:22 / /apex rw,nosuid,nodev,noexec,relatime - tmpfs tmpfs rw,seclabel,mode\u003d755\n...\n```\n\n\u003e Do you need a shared mount for that? I interpret mount(2) that shared mounts are only relevant to how mount and unmount events are propagated, not file access. So do we mount and unmount things inside the chroot that need to be propagated outside of it?\n\nWe need to propagate mount events to system_server\u0027s namespace.\n\nConsider that we need two bind-mounts:\n- `/` -\u003e `/mnt/pre_reboot_dexopt/chroot`\n- `/data` -\u003e `/mnt/pre_reboot_dexopt/chroot/data`\n\nIf we bind-mount `/` slave, then both `/mnt/pre_reboot_dexopt/chroot` in init\u0027s namespace and `/mnt/pre_reboot_dexopt/chroot` in system_server\u0027s namespace will be slaves of `/`. Then when we bind-mount `/data` at `/mnt/pre_reboot_dexopt/chroot/data`, the mount will only happen in init\u0027s namespace and won\u0027t be propagated to the system_server\u0027s namespace.\n\nIn contrast, if we bind-mount `/` slave+shared, then `/mnt/pre_reboot_dexopt/chroot` in init\u0027s namespace will be a slave of `/`, and `/mnt/pre_reboot_dexopt/chroot` in system_server\u0027s namespace will be a slave of `/mnt/pre_reboot_dexopt/chroot` in init\u0027s namespace. Then when we bind-mount `/data` at `/mnt/pre_reboot_dexopt/chroot/data`, the mount will be propagated.",
      "parentUuid": "e74430ab_6237735e",
      "range": {
        "startLine": 121,
        "startChar": 74,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "734a7b21_a55946c4",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-09T10:59:19Z",
      "side": 1,
      "message": "I see. And the reason we need anything to appear in system_server\u0027s namespace is that it\u0027ll load `/mnt/pre_reboot_dexopt/chroot/apex/com.android.art/javalib/service-art.jar`? Is that the only reason?",
      "parentUuid": "73cf0466_c1fabc59",
      "range": {
        "startLine": 121,
        "startChar": 74,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82b3d5f6_6b1bdc63",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-09T13:36:09Z",
      "side": 1,
      "message": "It\u0027s the only reason for now, but I think it\u0027s worth it. This approach is probably the safest as why it is safe has been discussed in the design doc and reviewed. Otherwise, we\u0027ll have to copy the jar to somewhere else and then worry about the security implications and so on.",
      "parentUuid": "734a7b21_a55946c4",
      "range": {
        "startLine": 121,
        "startChar": 74,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c53b021a_26aee0a9",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "Why is this a constant reference? E.g. `/proc/filesystems` below isn\u0027t. IMO there\u0027s benefit in clarity by just using the literal straight away, unless e.g. there\u0027s some connection with code elsewhere that the constant can codify.",
      "range": {
        "startLine": 183,
        "startChar": 31,
        "endLine": 183,
        "endChar": 47
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81e891ac_4b4128d0",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c53b021a_26aee0a9",
      "range": {
        "startLine": 183,
        "startChar": 31,
        "endLine": 183,
        "endChar": 47
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef6d70c9_b17d93ae",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "While this is nice to not hardcode filesystems, it does mean that we count on that _any_ filesystem behaves correctly when given a block device with the wrong fstype. That\u0027s a bit of an unknown because we don\u0027t know what strange things OEMs may add support for. There could also be some filesystem that\u0027s happy to mount e.g. ext2 volumes but then doesn\u0027t behave fully like the real `ext2`.\n\nPlease order the list in `GetSupportedFilesystems` so that it starts with the known (and likely) candidates `ext2` and `erofs`.",
      "range": {
        "startLine": 210,
        "startChar": 2,
        "endLine": 210,
        "endChar": 70
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "385c4ebc_32a68684",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "As I said in the design doc, this is following toybox\u0027s implementation of the `mount -t auto` command (https://cs.android.com/android/platform/superproject/main/+/main:external/toybox/toys/lsb/mount.c;l\u003d196-269;drc\u003d138378640fd1a6207a51eca384de683393312372).\n\nIf there was a weird filesystem that behaves like you said, then it would be a big problem: the mount command wouldn\u0027t work.",
      "parentUuid": "ef6d70c9_b17d93ae",
      "range": {
        "startLine": 210,
        "startChar": 2,
        "endLine": 210,
        "endChar": 70
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49e2d9d_6617eabd",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-04T19:24:50Z",
      "side": 1,
      "message": "When can it be `EBUSY`? According to mount(2) that can only happen if the mount point is already taken or if we\u0027re remounting, but the former would be a programming error and the latter can\u0027t happen since there\u0027s no `MS_REMOUNT` flag.",
      "range": {
        "startLine": 223,
        "startChar": 80,
        "endLine": 223,
        "endChar": 85
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b935df9b_cf754622",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-05T18:26:41Z",
      "side": 1,
      "message": "First, this is following toybox\u0027s implementation (https://cs.android.com/android/platform/superproject/main/+/main:external/toybox/toys/lsb/mount.c;l\u003d264;drc\u003d138378640fd1a6207a51eca384de683393312372).\n\nSecond, in practice, when mounting a block device with a wrong filesystem type, if the device is also mounted elsewhere, I got `EBUSY`, and if the device is not mounted elsewhere, I got `EINVAL`, though I can\u0027t find docs about this behavior. Note that a block device is allowed to be mounted at multiple mount points, and mounting it at multiple mount points with the right filesystem type results in a success rather than `EBUSY`.",
      "parentUuid": "b49e2d9d_6617eabd",
      "range": {
        "startLine": 223,
        "startChar": 80,
        "endLine": 223,
        "endChar": 85
      },
      "revId": "44650406ce95134b96f305d11ee0cb2096ccf5f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}