{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aa465d2e_1699696b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-16T02:12:14Z",
      "side": 1,
      "message": "Not quite done yet, here.",
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0383497b_c43043e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Finally finished a pass. Mostly nits, but there are a few places where I didn\u0027t understand the logic.",
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b302d87f_2cdd4530",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 10
      },
      "lineNbr": 293,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-11-15T09:22:55Z",
      "side": 1,
      "message": "\\`reuse\\`",
      "range": {
        "startLine": 293,
        "startChar": 50,
        "endLine": 293,
        "endChar": 55
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad390627_84dc135c",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 10
      },
      "lineNbr": 293,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b302d87f_2cdd4530",
      "range": {
        "startLine": 293,
        "startChar": 50,
        "endLine": 293,
        "endChar": 55
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b510b24_7ba5df6d",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-11-15T09:22:55Z",
      "side": 1,
      "message": "nit: grammar. However, should we just use 2 as we generally want host to mimic Android behavior?",
      "range": {
        "startLine": 129,
        "startChar": 42,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "415f2071_f1a1b02f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-16T02:12:14Z",
      "side": 1,
      "message": "Also limit to 1 for very small core counts, like 2? I think there are still some small/low end devices with 2, or possibly even 1.",
      "parentUuid": "9b510b24_7ba5df6d",
      "range": {
        "startLine": 129,
        "startChar": 42,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c69fe708_ed9829ef",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-18T20:07:50Z",
      "side": 1,
      "message": "Agree with both points. I\u0027ll fix it in next patch.",
      "parentUuid": "415f2071_f1a1b02f",
      "range": {
        "startLine": 129,
        "startChar": 42,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97ee481d_93113686",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c69fe708_ed9829ef",
      "range": {
        "startLine": 129,
        "startChar": 42,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ca00f69_c170404f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 154,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-16T02:12:14Z",
      "side": 1,
      "message": "I think this is technically a C++20 feature, though C has had it much longer. Probably not an issue, and OK to leave.",
      "range": {
        "startLine": 152,
        "startChar": 32,
        "endLine": 154,
        "endChar": 73
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06a90fd2_d247525c",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 154,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-18T20:07:50Z",
      "side": 1,
      "message": "I actually wrote it with C in mind :) It\u0027s not causing any compilation issues.",
      "parentUuid": "3ca00f69_c170404f",
      "range": {
        "startLine": 152,
        "startChar": 32,
        "endLine": 154,
        "endChar": 73
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3165b533_48f5cce5",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-11-15T09:22:55Z",
      "side": 1,
      "message": "nit: how about \"If that fails, we will run all GC cycles in copy-mode rather than minor-fault.\" ?",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3896447_ffc46b11",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-16T02:12:14Z",
      "side": 1,
      "message": "Is this always safe, or do we risk succeeding here, and then causing a later low4GB mapping to fail? Are there later mappings we need to worry about?",
      "parentUuid": "3165b533_48f5cce5",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16c03f86_ff0d52f1",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-18T20:07:50Z",
      "side": 1,
      "message": "Actually we don\u0027t run all GC cycles in copy-mode if we fail once here.\n\nThe way I have implemented is that we hold on to the mapping and keep trying, if required, to increase its size in every GC cycle. In which cycle the mapping is smaller than what we need, then we run that cycle in copy-mode.\n\nThis works because we switch to using MAP_SHARED (which works for both copy and well as minor-fault mode) as soon as we are done with zygote fork.",
      "parentUuid": "a3896447_ffc46b11",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2331a7b8_61aa2826",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "You\u0027ll answer my comment later? My concern was more about later non-GC mappings. Are there any we need to worry about?",
      "parentUuid": "16c03f86_ff0d52f1",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22692d2c_6dc1b728",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "The only thing that may get impacted is mmap-based large-object space, but only if we are running on 32-bit process or with kObjPtrPoisoning. In these two cases all the GC mappings are also in \u003c4GB and hence may leave less space available for mapping large-object allocations. However, that case is already handled by falling back to the moving-space if mmap fails.",
      "parentUuid": "2331a7b8_61aa2826",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe90ae84_db4f486c",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-30T04:22:32Z",
      "side": 1,
      "message": "There\u0027s no danger of higher-level code needing \u003c4GB mappings later, e.g. for buffers allocated by native code? I\u0027m worried about us grapping the space up front, and later clients failing. Since our mapping succeeded, we don\u0027t really get an opportunity to back out.  I care less about kObjPtrPoisoning, since customers will not run that way.",
      "parentUuid": "22692d2c_6dc1b728",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f813755_4fb2ce6a",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-30T22:04:04Z",
      "side": 1,
      "message": "That risk is there on 32-bit apps only. But not sure if it\u0027s a real problem.\n\nIf it is then I can change the implementation for 32-bit: we attempt to reserve in every GC cycle, if we succeed then use minor-fault, else copy-mode and unmap the shadow-map in FinishPhase().\n\nIt\u0027s slightly less ideal as we will require an additional mmap in the compaction pause (but usually mmaps are not very expensive), and then (concurrent) unmap later.\n\nWDYT?",
      "parentUuid": "fe90ae84_db4f486c",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9851eb47_3790e027",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 245,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-12-01T00:47:37Z",
      "side": 1,
      "message": "OK. Let\u0027s proceed as is for now.",
      "parentUuid": "7f813755_4fb2ce6a",
      "range": {
        "startLine": 244,
        "startChar": 51,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60a8553d_64b4d72b",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 257,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "This is really a question about the (under-documented?) MemMap API: Why can\u0027t we get this directly with MapAnonymous, rather than MapAnonymous reservation + TakeReservedMemory?",
      "range": {
        "startLine": 256,
        "startChar": 4,
        "endLine": 257,
        "endChar": 74
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d51e6af_51e823da",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 257,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "We don\u0027t need to take ownership in the case when shadow-map reservation succeeds in the constructor. So modified the code accordingly.",
      "parentUuid": "60a8553d_64b4d72b",
      "range": {
        "startLine": 256,
        "startChar": 4,
        "endLine": 257,
        "endChar": 74
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39c34673_64c3a934",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 590,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-11-15T09:22:55Z",
      "side": 1,
      "message": "nit: I think we prefer \u0027\u0026\u0026\u0027 at the end of the line.",
      "range": {
        "startLine": 588,
        "startChar": 9,
        "endLine": 590,
        "endChar": 52
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b921c248_f038919f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 590,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39c34673_64c3a934",
      "range": {
        "startLine": 588,
        "startChar": 9,
        "endLine": 590,
        "endChar": 52
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49601964_aaa5b06f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 608,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "It would be a little cleaner to factor this out from under the if. It makes it clearer that the definition of buf is the only difference.",
      "range": {
        "startLine": 608,
        "startChar": 6,
        "endLine": 608,
        "endChar": 68
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "752e33da_6797c444",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 608,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "I have completely removed the logic of creating the buffer on stack in `!kObjPtrPoisoning` case. It\u0027s simpler as well as could potentially save memory by not keeping dirty pages on the stack.",
      "parentUuid": "49601964_aaa5b06f",
      "range": {
        "startLine": 608,
        "startChar": 6,
        "endLine": 608,
        "endChar": 68
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "903a5c9b_dc8968be",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 699,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-16T02:12:14Z",
      "side": 1,
      "message": "Why isn\u0027t this already done by Reset() below?",
      "range": {
        "startLine": 699,
        "startChar": 15,
        "endLine": 699,
        "endChar": 79
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e54a8028_eb1a77da",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 699,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-18T20:07:50Z",
      "side": 1,
      "message": "That\u0027s because we set \u0027reuse\u0027 to true for this mapping. This means that MemMap will not unmap as part of reset.\n\nThe comment below needs to be fixed and explain this. I\u0027ll do that in next patch.",
      "parentUuid": "903a5c9b_dc8968be",
      "range": {
        "startLine": 699,
        "startChar": 15,
        "endLine": 699,
        "endChar": 79
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73ee785a_0ce7addf",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 699,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "I either don\u0027t understand, or dislike the MemMap API here.\n\n1) We\u0027re unmapping the memory while it\u0027s still nominally managed by shadow_to_space_map_. Given a full understanding of MemMap\u0027s inner workings, that\u0027s fine, but ...\n2) MemMap::DoReset() would also call MEMORY_TOOL_MAKE_UNDEFINED(), which we may want here as well. Unless munmap already effectively does that, and we didn\u0027t need it to start with?\n\nOTOH, I don\u0027t see an API to do this correctly. So maybe this is the best we can do.",
      "parentUuid": "e54a8028_eb1a77da",
      "range": {
        "startLine": 699,
        "startChar": 15,
        "endLine": 699,
        "endChar": 79
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fe88673_4ba3ded3",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 699,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Thanks for pointing out the memory-tool issue. You are right, there seems to be no way to support it on the shadow-map when we are using memfd (we can use it when using shared-anonymous). The code here is simplified in the next patch as we can end up here only if we succeed in reserving shadow-map in the constructor, and in that case we let MemMap own the map.\n\nI\u0027m compelled to use MemMap due to 2 reasons:\n1) It offers a nice way to get low-4GB mapping when required.\n2) Including a virtual mapping in MemMap gets it printed along with other maps on assertion failure etc.",
      "parentUuid": "73ee785a_0ce7addf",
      "range": {
        "startLine": 699,
        "startChar": 15,
        "endLine": 699,
        "endChar": 79
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf62a716_94d28fa8",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 739,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "We already previously mapped this with PROT_NONE, right? Isn\u0027t mprotect more appropriate? You understand better than me whether that actually makes a difference.",
      "range": {
        "startLine": 734,
        "startChar": 20,
        "endLine": 739,
        "endChar": 28
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f7ae001_59777ade",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 739,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "We need to mmap in every GC cycle. That\u0027s how we get an unused shared-anonymous mapping. Once we start using minor-faults, in every GC cycle we do the following steps:\n\n1) Use mmap (here) to get a new shared-anonymous mapping for shadow\n2) Use mremap(MREMAP_DONTUNMAP) in KernelPreparation() to move the pages from moving-space (to-space) to the from-space. We use MREMAP_DONTUNMAP to ensure that we don\u0027t end-up with the heap unmapped, which is the default mremap behavior. But this will leave 2 mappings to the same shared-anonymous pages.\n3) Use mremap(MREMAP_DONTUNMAP) in KernelPreparation() from shadow-map to moving-space (to-space). This is fast because there are no pages to move. And in the end leaves the pages between shadow and to-space shared, which is what we want.\n\nIn the end, we have our pre-compacted moving-space in the from-space. And a fresh shared-anonymous mapping is shared between shadow and to-space. At this point we register the moving space with userfaultfd (in minor-fault mode) and then resume mutators.\n\nI have added a comment to describe this.",
      "parentUuid": "cf62a716_94d28fa8",
      "range": {
        "startLine": 734,
        "startChar": 20,
        "endLine": 739,
        "endChar": 28
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d54bd73_b8056ecd",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 739,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-30T04:22:32Z",
      "side": 1,
      "message": "Ack. Thanks for the (re-)explanation.",
      "parentUuid": "6f7ae001_59777ade",
      "range": {
        "startLine": 734,
        "startChar": 20,
        "endLine": 739,
        "endChar": 28
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7e3d5aa_74618c9c",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 762,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "If we can\u0027t simplify this, can we refactor it to have a single InitializeShadowToSpaceMap() function? The code currently isn\u0027t identical in both places, but is that necessary?",
      "range": {
        "startLine": 748,
        "startChar": 8,
        "endLine": 762,
        "endChar": 34
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb07ec3c_e7bb68cb",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 762,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "I have refactored this quite a bit. PTAL.",
      "parentUuid": "b7e3d5aa_74618c9c",
      "range": {
        "startLine": 748,
        "startChar": 8,
        "endLine": 762,
        "endChar": 34
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73d3aec3_980537d7",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 762,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-30T04:22:32Z",
      "side": 1,
      "message": "Generally looks fine.",
      "parentUuid": "cb07ec3c_e7bb68cb",
      "range": {
        "startLine": 748,
        "startChar": 8,
        "endLine": 762,
        "endChar": 34
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "622ed5c1_54e30e41",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 772,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "I think this means the mprotect runs only in debug (libartd) builds. Is that intended? I don\u0027t quite understand what this does, but it looks strange.",
      "range": {
        "startLine": 771,
        "startChar": 8,
        "endLine": 772,
        "endChar": 54
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c88f67f0_c731f58a",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 772,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "This mprotect corresponds to the mprotect in CompactionPhase(), which PROT_NONE the shadow-map of linear-alloc space. All the mprotect calls that you see in DCHECKs are to catch any unexpected accesses to the memory ranges.",
      "parentUuid": "622ed5c1_54e30e41",
      "range": {
        "startLine": 771,
        "startChar": 8,
        "endLine": 772,
        "endChar": 54
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c45d986c_2a4bcea5",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 772,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-30T04:22:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c88f67f0_c731f58a",
      "range": {
        "startLine": 771,
        "startChar": 8,
        "endLine": 772,
        "endChar": 54
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4ce511e_9f114b23",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 780,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Again mprotect instead?",
      "range": {
        "startLine": 780,
        "startChar": 20,
        "endLine": 780,
        "endChar": 24
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e8cf8cd_9c85bcd4",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 780,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "It has to be mmap as we want the shadow-map to be a shared anonymous range. Later, in KernelPreparation(), this will be mremap(MREMAP_DONTUNMAP) on the moving-space, thereby giving us shared mappings between to-space and shadow. After that, we register the to-space with userfaultfd, and use minor-faults.\n\nThis is the most common case wherein we are able to reserve the virtual memory for shadow-map in the beginning (constructor).",
      "parentUuid": "c4ce511e_9f114b23",
      "range": {
        "startLine": 780,
        "startChar": 20,
        "endLine": 780,
        "endChar": 24
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ed1e76b_9bab7883",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 780,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-30T04:22:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4e8cf8cd_9c85bcd4",
      "range": {
        "startLine": 780,
        "startChar": 20,
        "endLine": 780,
        "endChar": 24
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "962c2c85_d54ed3b8",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 799,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "I\u0027m surprised this is necessary. You\u0027re creating files that are smaller than a reasonable movie, right?",
      "range": {
        "startLine": 790,
        "startChar": 8,
        "endLine": 799,
        "endChar": 9
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaf06c76_4b5fef26",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 799,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Our current max heap size is 512MB. So that\u0027s how big the moving space could be. With some of the recent changes to run-test scripts, we are restricting the file-size to 128MB. Since elsewhere also such limits could be set, in order to not fail here, this is done.",
      "parentUuid": "962c2c85_d54ed3b8",
      "range": {
        "startLine": 790,
        "startChar": 8,
        "endLine": 799,
        "endChar": 9
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25085769_855fb412",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1099,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Does it really make sense to make this a template, as opposed to a regular function, argument? It seems to be tested once or twice in these two functions, and thus should have negligible run-time impact. But it has a bit more of a code size impact to compiler the whole function twice.",
      "range": {
        "startLine": 1099,
        "startChar": 10,
        "endLine": 1099,
        "endChar": 31
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18db6e7d_b57060ab",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1099,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25085769_855fb412",
      "range": {
        "startLine": 1099,
        "startChar": 10,
        "endLine": 1099,
        "endChar": 31
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3fc4cd0_d7b1ee69",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1447,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "I would probably move this into the loop, to make it clear to the reader and compiler that the updated value is dead at the end of the loop. Probably also for the next loop.",
      "range": {
        "startLine": 1447,
        "startChar": 2,
        "endLine": 1447,
        "endChar": 51
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46bcd2ec_704390eb",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1447,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3fc4cd0_d7b1ee69",
      "range": {
        "startLine": 1447,
        "startChar": 2,
        "endLine": 1447,
        "endChar": 51
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06db4cf3_2b583007",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1455,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "I think you need some ordering here, and acq_rel sounds right. If this became a performance issue, I might consider performing the CASes on vectors of 8 state bytes. But that gets signiicantly messier, I think.",
      "range": {
        "startLine": 1452,
        "startChar": 2,
        "endLine": 1455,
        "endChar": 62
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0c46e10_53abfcf0",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1455,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "I agree. Reworded the comment",
      "parentUuid": "06db4cf3_2b583007",
      "range": {
        "startLine": 1452,
        "startChar": 2,
        "endLine": 1455,
        "endChar": 62
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5ef1387_a96195c4",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1466,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "I don\u0027t understand this comment.",
      "range": {
        "startLine": 1464,
        "startChar": 4,
        "endLine": 1466,
        "endChar": 62
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e30c13d_40659537",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1466,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "reworded to make it clear.",
      "parentUuid": "a5ef1387_a96195c4",
      "range": {
        "startLine": 1464,
        "startChar": 4,
        "endLine": 1466,
        "endChar": 62
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e26c93_5d280817",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1466,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-30T04:22:32Z",
      "side": 1,
      "message": "Sorry. My concern here was more about why the first page needs to be \"attempted\". Also why only \"attempted\"?",
      "parentUuid": "7e30c13d_40659537",
      "range": {
        "startLine": 1464,
        "startChar": 4,
        "endLine": 1466,
        "endChar": 62
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f46c072_ad22ed0d",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1466,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-30T22:04:04Z",
      "side": 1,
      "message": "Re-worded again to clarify \u0027why\u0027.\n\nWe certainly need the first page to be successfully mapped. But that is asserted after returning from ioctl. Given the page state logic, we don\u0027t expect it to fail.",
      "parentUuid": "d1e26c93_5d280817",
      "range": {
        "startLine": 1464,
        "startChar": 4,
        "endLine": 1466,
        "endChar": 62
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0112f0b_f1adabc7",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1466,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-12-01T00:47:37Z",
      "side": 1,
      "message": "Thanks! Makes perfect sense.",
      "parentUuid": "7f46c072_ad22ed0d",
      "range": {
        "startLine": 1464,
        "startChar": 4,
        "endLine": 1466,
        "endChar": 62
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d153c85_697e657f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1500,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "It\u0027s OK if another thread saw the intermediate kProcessedAndMapping state?",
      "range": {
        "startLine": 1498,
        "startChar": 7,
        "endLine": 1500,
        "endChar": 95
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db24d471_3dde5c09",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1500,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Yes that\u0027s ok. That\u0027s why we WAKE any waiting threads on this range. So that in case if any threads get into that state, then they retry. Since this code path is expected to be very rare, it\u0027s not performance critical.\n\nI have also replaced this CAS with an atomic store as no simultaneous modification to these pages\u0027 state is possible.",
      "parentUuid": "4d153c85_697e657f",
      "range": {
        "startLine": 1498,
        "startChar": 7,
        "endLine": 1500,
        "endChar": 95
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51d1c853_039075a0",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1655,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Would it be possible to factor this out into an inline DoCompactionWithStateChange() or the like, passing in the compaction call as a lambda? As it stands, this looks to me like a lot of duplicated code.",
      "range": {
        "startLine": 1623,
        "startChar": 4,
        "endLine": 1655,
        "endChar": 7
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6f8c657_ededbae4",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 1655,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51d1c853_039075a0",
      "range": {
        "startLine": 1623,
        "startChar": 4,
        "endLine": 1655,
        "endChar": 7
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fed71e0_51cceda8",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2219,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Can we avoid using magic integers in all these tests, and use suitably named functios or constants instead?",
      "range": {
        "startLine": 2219,
        "startChar": 38,
        "endLine": 2219,
        "endChar": 46
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "adeaa8d8_d0e013cf",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2219,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fed71e0_51cceda8",
      "range": {
        "startLine": 2219,
        "startChar": 38,
        "endLine": 2219,
        "endChar": 46
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ecccdf1_542ac1bc",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2263,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "I would have associated the comment with the parameter rather than the entire call. But I\u0027m not sure what our preferred style is here.",
      "range": {
        "startLine": 2262,
        "startChar": 8,
        "endLine": 2263,
        "endChar": 26
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "563dacd7_f3ceaec2",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2263,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ecccdf1_542ac1bc",
      "range": {
        "startLine": 2262,
        "startChar": 8,
        "endLine": 2263,
        "endChar": 26
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "284ef6c0_46881966",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2270,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Capitals. i.e. MemMap?",
      "range": {
        "startLine": 2270,
        "startChar": 60,
        "endLine": 2270,
        "endChar": 66
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24b8e3a4_b7f025e9",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2270,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "284ef6c0_46881966",
      "range": {
        "startLine": 2270,
        "startChar": 60,
        "endLine": 2270,
        "endChar": 66
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b31b35e_9a949a80",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2296,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Again needs more meaningful names.",
      "range": {
        "startLine": 2296,
        "startChar": 6,
        "endLine": 2296,
        "endChar": 32
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d7fb150_848c5c58",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2296,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b31b35e_9a949a80",
      "range": {
        "startLine": 2296,
        "startChar": 6,
        "endLine": 2296,
        "endChar": 32
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7236e399_35b149dc",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2319,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Needs symbolic names.",
      "range": {
        "startLine": 2319,
        "startChar": 63,
        "endLine": 2319,
        "endChar": 70
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30922352_0323e3a0",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2319,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7236e399_35b149dc",
      "range": {
        "startLine": 2319,
        "startChar": 63,
        "endLine": 2319,
        "endChar": 70
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3df55518_0850ea5f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2342,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Should probably mention uffd somewhere in these messages, so that you don\u0027t need to look at the code to understand what broke.",
      "range": {
        "startLine": 2342,
        "startChar": 34,
        "endLine": 2342,
        "endChar": 50
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "223b774f_4ef3690e",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2342,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3df55518_0850ea5f",
      "range": {
        "startLine": 2342,
        "startChar": 34,
        "endLine": 2342,
        "endChar": 50
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5601fa17_7d13253e",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2346,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "The DCHECK seems a bit excessive? Based on the man page, this is clearly the only option. Should probably be\n\nif (ret \u003d\u003d 0) {\n  DCHECK_EQ(uffd_z...);\n} else {\n  CHECK((tolerate_enoent \u0026\u0026 errno \u003d\u003d ENOENT) ...\n}",
      "range": {
        "startLine": 2345,
        "startChar": 25,
        "endLine": 2346,
        "endChar": 47
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44c3f411_727bacab",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2346,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5601fa17_7d13253e",
      "range": {
        "startLine": 2345,
        "startChar": 25,
        "endLine": 2346,
        "endChar": 47
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20b665ad_b219bdaf",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2357,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "same here.",
      "range": {
        "startLine": 2357,
        "startChar": 46,
        "endLine": 2357,
        "endChar": 61
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0194a5ef_811b562c",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2357,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20b665ad_b219bdaf",
      "range": {
        "startLine": 2357,
        "startChar": 46,
        "endLine": 2357,
        "endChar": 61
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6e791d7_1a2ca2fb",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2596,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "would",
      "range": {
        "startLine": 2596,
        "startChar": 30,
        "endLine": 2596,
        "endChar": 34
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0fbe8ff_7ce4cf63",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2596,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6e791d7_1a2ca2fb",
      "range": {
        "startLine": 2596,
        "startChar": 30,
        "endLine": 2596,
        "endChar": 34
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a607311c_165dfccf",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2599,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Why? Maybe the comment below should move here, or to both places?",
      "range": {
        "startLine": 2599,
        "startChar": 12,
        "endLine": 2599,
        "endChar": 41
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b72754e_2c3c9dce",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2599,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Copied the comment from below to here as well.",
      "parentUuid": "a607311c_165dfccf",
      "range": {
        "startLine": 2599,
        "startChar": 12,
        "endLine": 2599,
        "endChar": 41
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50eb7cfa_68914656",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2614,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Isn\u0027t it clearer to put the CAS in a loop and retry if it fails? This code seems repetitive with the outer switch statement.",
      "range": {
        "startLine": 2606,
        "startChar": 8,
        "endLine": 2614,
        "endChar": 29
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d81f582e_ef9a9635",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2614,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50eb7cfa_68914656",
      "range": {
        "startLine": 2606,
        "startChar": 8,
        "endLine": 2614,
        "endChar": 29
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2c506c1_ff0b1651",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2739,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Can you explain why they aren\u0027t woken automatically here? The man page suggests this is only used in combination with DONTWAKE?",
      "range": {
        "startLine": 2738,
        "startChar": 1,
        "endLine": 2739,
        "endChar": 19
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "030b0967_bd4febbf",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2739,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "WAKE is usually implicit with COPY/CONTINUE ioctls. But when unregistering, ideally all waiting threads on the entire memory range should be woken up. That is indeed done for \u0027copy\u0027 case, which was one of the first uffd features implemented. It was overlooked in the more recent features, like minor-fault.\n\nI have re-written the comment elaborating this.",
      "parentUuid": "e2c506c1_ff0b1651",
      "range": {
        "startLine": 2738,
        "startChar": 1,
        "endLine": 2739,
        "endChar": 19
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb565389_216d68b9",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 2769,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "We should probably add a more general utility for that. We currently do it in some other places.",
      "range": {
        "startLine": 2769,
        "startChar": 4,
        "endLine": 2769,
        "endChar": 29
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5605b43c_29d837db",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 3427,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-11-15T09:22:55Z",
      "side": 1,
      "message": "line too long (also \u0027||\u0027 at the end of the line).",
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a17787b_5d6203aa",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 10
      },
      "lineNbr": 3427,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5605b43c_29d837db",
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d01a9968_382e0ecd",
        "filename": "runtime/gc/collector/mark_compact.h",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T01:23:05Z",
      "side": 1,
      "message": "Can you define what this parameter is?",
      "range": {
        "startLine": 477,
        "startChar": 17,
        "endLine": 477,
        "endChar": 34
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09fe633d_547d49c0",
        "filename": "runtime/gc/collector/mark_compact.h",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d01a9968_382e0ecd",
      "range": {
        "startLine": 477,
        "startChar": 17,
        "endLine": 477,
        "endChar": 34
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86d8cbc7_1bc9eeff",
        "filename": "runtime/gc/collector/mark_compact.h",
        "patchSetId": 10
      },
      "lineNbr": 622,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-16T02:12:14Z",
      "side": 1,
      "message": "I think these are only accessed as moving_space_fds_[0] and moving_space_fds_[1]. Can we give each of them its own name? As it stands, it\u0027s hard to follow what each one is for.",
      "range": {
        "startLine": 622,
        "startChar": 2,
        "endLine": 622,
        "endChar": 38
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac8aabfb_da3175c4",
        "filename": "runtime/gc/collector/mark_compact.h",
        "patchSetId": 10
      },
      "lineNbr": 622,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-18T20:07:50Z",
      "side": 1,
      "message": "Sure. Will do that in next patch.\n\nJust to clarify so that you can continue with the reviews, we have two file descriptors which are swapped at the end of GC cycle. The first descriptor points to the memfd used by to-space and its shadow, and the second one points to the memfd of from-space.",
      "parentUuid": "86d8cbc7_1bc9eeff",
      "range": {
        "startLine": 622,
        "startChar": 2,
        "endLine": 622,
        "endChar": 38
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1ba0343_0d4bd56a",
        "filename": "runtime/gc/collector/mark_compact.h",
        "patchSetId": 10
      },
      "lineNbr": 622,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-11-28T08:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac8aabfb_da3175c4",
      "range": {
        "startLine": 622,
        "startChar": 2,
        "endLine": 622,
        "endChar": 38
      },
      "revId": "0baf8de43a8290bfadcae5cd0fc9f00ca442c439",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}