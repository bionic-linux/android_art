{
  "comments": [
    {
      "key": {
        "uuid": "5116b490_6eb13eb3",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-02-03T20:11:17Z",
      "side": 1,
      "message": "The oat_location is given explicitly here, so IsAllowedToUpdateOatFiles will always be true, right?",
      "range": {
        "startLine": 307,
        "startChar": 0,
        "endLine": 310,
        "endChar": 65
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1b8e4d6_9c33099b",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-02-04T13:00:21Z",
      "side": 1,
      "message": "this is null for PathClassLoader.",
      "parentUuid": "5116b490_6eb13eb3",
      "range": {
        "startLine": 307,
        "startChar": 0,
        "endLine": 310,
        "endChar": 65
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f127a8f2_741ab5fc",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-02-04T21:24:21Z",
      "side": 1,
      "message": "Yes. I see.",
      "parentUuid": "d1b8e4d6_9c33099b",
      "range": {
        "startLine": 307,
        "startChar": 0,
        "endLine": 310,
        "endChar": 65
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11f7dc9a_fe8e80e4",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-02-04T21:24:21Z",
      "side": 1,
      "message": "What do you think of changing this to:\n \n if (oat_location !\u003d nullptr) {\n    if (!oat_file_assistant.MakeUpToDate(/*out*/\u0026error_msg)) {\n          LOG(WARNING) \u003c\u003c error_msg;\n    }\n }\n\nAnd no oat file assistant changes would be needed?",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 329,
        "endChar": 3
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1d7a87c_6ab6d7fa",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-02-05T21:53:55Z",
      "side": 1,
      "message": "That was the initial approach but then I reason more about it and I wanted to remove the assumptions we make in the assistant. To me, it doesn\u0027t sound right to just assume we can write to those default locations.\n\nIf you feel strongly about it, I can have this as an initial version to unblock and discuss more in a refactoring CL after.\n\nCan you think of a case, when it\u0027s beneficial to try writing to the default locations?",
      "parentUuid": "11f7dc9a_fe8e80e4",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 329,
        "endChar": 3
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "315940ea_27a71428",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-02-05T21:55:52Z",
      "side": 1,
      "message": "Richard is OOO, so I\u0027m taking this over.\n\nYes, our tests. :-)\n\nAn app or application uses a PathClassLoader for the class-path. So that\u0027s how you\u0027d get here...",
      "parentUuid": "f1d7a87c_6ab6d7fa",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 329,
        "endChar": 3
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51c6b4da_e5a156b8",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-02-05T22:01:32Z",
      "side": 1,
      "message": "What\u0027s the goal of our no-prebuild tests?\n\nI always thought they validate that we run correctly if the app is not precompiled. If that\u0027s the case the CL should not change anything. We\u0027re still validating the same \"default\" thing.\n\nIf no-prebuild was meant to test that we can compile on the fly at runtime, well, that\u0027s a different story I guess. And I would propose to make that explicit with a flag.",
      "parentUuid": "315940ea_27a71428",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 329,
        "endChar": 3
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dd0d03a_5e178967",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-02-10T19:15:30Z",
      "side": 1,
      "message": "Here is my interpretation of the oat file assistant API:\n\nThe user of the oat file assistant provides a dex location and oat location to use. If the user doesn\u0027t provide an oat location, \"the standard oat location\" is used. Thus, the user of the oat file assistant knows what the path to the oat file is. When the user calls MakeUpToDate, that tells the oat file assistant to generate the oat file if needed. The oat file assistant assumes the oat file can be written to if the user calls MakeUpToDate.",
      "parentUuid": "f1d7a87c_6ab6d7fa",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 329,
        "endChar": 3
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9dc4c07e_82aca0ff",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-02-10T19:15:30Z",
      "side": 1,
      "message": "I think we wanted to test that compilation was happening, and that we weren\u0027t inadvertently running interpreted because of some bug.\n\nIt\u0027s not clear to me what behavior we are promising the users of PathClassLoader. If we are promising the code will run compiled, then the existing tests are good. If we are promising nothing about whether something runs compiled or interpreted, then we only need to test correct behavior. If we are promising something about performance and JIT is good enough for to meet that performance promise, then we should revise the test to test for performance and not compilation state.",
      "parentUuid": "51c6b4da_e5a156b8",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 329,
        "endChar": 3
      },
      "revId": "82c2b4a3de724c050d23fb48c2070f3f806a0f24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}