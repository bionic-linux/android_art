{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b27ca3d4_9135dca5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2021-03-17T20:06:51Z",
      "side": 1,
      "message": "Lokesh - This should enable min and max metrics, like you wanted for the GC metrics. What do you think?\n\nHans - Could you take a look at the new Add method in metrics.h to make sure my atomics usage is reasonable?\n\nAlex - Could you generally review the CL?",
      "revId": "13bc3ea6dd2408fcd5a82384dbbe1f0f4ed9bb2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d4f9131_22fe12bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-03-18T20:10:23Z",
      "side": 1,
      "message": "Basically looks fine. Just some nits.",
      "revId": "13bc3ea6dd2408fcd5a82384dbbe1f0f4ed9bb2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "193cfc71_f0f4fe41",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-03-18T20:10:23Z",
      "side": 1,
      "message": "I might name this \"current\" instead, as a subtle reminder that it is modified by compare_exchange_weak.",
      "range": {
        "startLine": 281,
        "startChar": 6,
        "endLine": 281,
        "endChar": 14
      },
      "revId": "13bc3ea6dd2408fcd5a82384dbbe1f0f4ed9bb2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64da7631_77f326fe",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 2
      },
      "lineNbr": 290,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-03-18T20:10:23Z",
      "side": 1,
      "message": "I would only use that if it\u0027s backed up by a careful analysis demonstrating that this is exactly the right ordering. The usual way to write \"let\u0027s be conservative here\" is just to leave of the memory_order argument, letting it default to seq_cst. On armv8 at least, I think that generates the same code.\nI suspect that memory_order_relaxed would actually work here, since the only way to read a value is already memory_order_relaxed? In general, readers and writers should have corresponding memory orders. The only real exception to that are the handful of places where we knowingly live dangerously and count on dependency-based ordering.",
      "range": {
        "startLine": 290,
        "startChar": 29,
        "endLine": 290,
        "endChar": 68
      },
      "revId": "13bc3ea6dd2408fcd5a82384dbbe1f0f4ed9bb2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a175262_027e93b0",
        "filename": "libartbase/base/metrics/metrics.h",
        "patchSetId": 2
      },
      "lineNbr": 302,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-03-18T20:10:23Z",
      "side": 1,
      "message": "Do you need that? Are there accesses from a signal handler or the like? I wouldn\u0027t needlessly assert this, since it looks to me like there may be sane use cases for which it\u0027s false.",
      "range": {
        "startLine": 302,
        "startChar": 2,
        "endLine": 302,
        "endChar": 53
      },
      "revId": "13bc3ea6dd2408fcd5a82384dbbe1f0f4ed9bb2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}