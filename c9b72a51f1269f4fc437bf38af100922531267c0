{
  "comments": [
    {
      "key": {
        "uuid": "713ab7dd_ef70da06",
        "filename": "compiler/optimizing/cha_guard_optimization.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-16T11:59:31Z",
      "side": 1,
      "message": "Keep \"explicit\". The constructor can still be called with a single argument.",
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaa5894e_9ca9a79e",
        "filename": "compiler/optimizing/cha_guard_optimization.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-16T17:55:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "713ab7dd_ef70da06",
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76a056ef_48fd1687",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-16T11:59:31Z",
      "side": 1,
      "message": "Keep \"explicit\".",
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f735856c_d372cc35",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-16T17:55:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76a056ef_48fd1687",
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d9a04a5_ba2dc5f0",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-16T11:59:31Z",
      "side": 1,
      "message": "Keep \"explicit\".",
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c1f3df2_3325bcdc",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-16T17:55:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d9a04a5_ba2dc5f0",
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c26f832_8ac2c633",
        "filename": "compiler/optimizing/optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-16T10:05:08Z",
      "side": 1,
      "message": "What does that mean?",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 18
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5676b3bc_e4dc97ba",
        "filename": "compiler/optimizing/optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-16T17:55:18Z",
      "side": 1,
      "message": "See below, but it probably does not make sense here, so removed.",
      "parentUuid": "8c26f832_8ac2c633",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 18
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fabadc8_e887b2fc",
        "filename": "compiler/optimizing/optimization.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-16T10:05:08Z",
      "side": 1,
      "message": "Not a big fan of having this list. Could we just map a name to an optimization, and if there are multiple passes of that same optimization, we just append \"1\", \"2\", etc?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 102,
        "endChar": 6
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13ea3bbe_371955ee",
        "filename": "compiler/optimizing/optimization.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-16T11:59:31Z",
      "side": 1,
      "message": "Not a big fan of old style `enum`. I prefer `enum class` but it can sometimes get a bit too verbose.",
      "parentUuid": "6fabadc8_e887b2fc",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 102,
        "endChar": 6
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "034087ee_b3ee0e4d",
        "filename": "compiler/optimizing/optimization.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-16T17:55:18Z",
      "side": 1,
      "message": "Ad Nicolas: As stated in the TODO, I would much rather generat this automatically, yes. But since that seems very hard, I use enums over a map or string based lookup for efficiency! I don\u0027t want the regular built-in tables to use any string based lookup mechanism, since it is unclear how much the C++ compiler will optimize (for bisection search, we obviously care much less on performance).\n\nAs for adding $1, the OptimizationDef mechanism below provides the right way to define alternative names, such as \"constant_folding$after_inlining\")\n\nAd Vladimir: I don\u0027t mind using enum class, the verbosity does not bother me either :-) So done.",
      "parentUuid": "13ea3bbe_371955ee",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 102,
        "endChar": 6
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e213db45_d6c58a7c",
        "filename": "compiler/optimizing/optimization.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-19T15:19:53Z",
      "side": 1,
      "message": "OK, so this is only for efficiency in the harcoded list case? I\u0027d put a comment, and yes, would really like something auto-generated :)",
      "parentUuid": "034087ee_b3ee0e4d",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 102,
        "endChar": 6
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3e103ba_5ab4ac8c",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 311,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-16T11:59:31Z",
      "side": 1,
      "message": "Add template wrapper that deduces the length of the array?",
      "range": {
        "startLine": 311,
        "startChar": 24,
        "endLine": 311,
        "endChar": 37
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "481facce_46afea0d",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 311,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-16T17:55:18Z",
      "side": 1,
      "message": "do you have a particular syntax in mind for this (that will be shorter than the convention used now at the caller?)",
      "parentUuid": "f3e103ba_5ab4ac8c",
      "range": {
        "startLine": 311,
        "startChar": 24,
        "endLine": 311,
        "endChar": 37
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61dfc7d8_8dc0c459",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 311,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-17T10:53:43Z",
      "side": 1,
      "message": "template \u003csize_t size\u003e\nvoid RunOptimizations(...,\n                      const OptimizationDef (\u0026definitions)[size]) {\n  RunOptimizations(...,\n                   definitions,\n                   size);\n}\n\nAnd take the definitions as const, please.\n\nAn alternative proposal would be to pass ArrayRef\u003cconst OptimizationDef\u003e.",
      "parentUuid": "481facce_46afea0d",
      "range": {
        "startLine": 311,
        "startChar": 24,
        "endLine": 311,
        "endChar": 37
      },
      "revId": "c9b72a51f1269f4fc437bf38af100922531267c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}