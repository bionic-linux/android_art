{
  "comments": [
    {
      "key": {
        "uuid": "74d3c2eb_cf65724a",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1827,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T02:14:40Z",
      "side": 1,
      "message": "I thought this flag is unrelated to the mark bit idea. Remove this or add a separate flag?",
      "range": {
        "startLine": 1827,
        "startChar": 64,
        "endLine": 1827,
        "endChar": 87
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_fc64b621",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1830,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "I think we\u0027d like to move the card scanning of app images out of the thread flip pause and handle the app image objects like regular non-moving objects with a mark bitmap (or some other way) eventually. To do that, I think we may want to not to set the mark bit for app image objects. We should discuss this later.",
      "range": {
        "startLine": 1830,
        "startChar": 15,
        "endLine": 1830,
        "endChar": 31
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_bc84eeb2",
        "filename": "compiler/image_writer.h",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Do we have kGCStateSize?",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 67
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_7c38c6f6",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Can we have and use LOCK_WORD_GC_STATE_SHIFT to be clearer?",
      "range": {
        "startLine": 541,
        "startChar": 19,
        "endLine": 541,
        "endChar": 53
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_5c370204",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 2
      },
      "lineNbr": 1111,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Same.",
      "range": {
        "startLine": 1111,
        "startChar": 19,
        "endLine": 1111,
        "endChar": 53
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_bcc62eb1",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 2
      },
      "lineNbr": 1796,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Is it better/faster to have the fast path ALLOC_OBJECT_TLAB_FAST_PATH in line 1806 in the straight-line position (change this back to cbnz and move the mark bit checking code right after .Lart_quick_alloc_object_region_tlab_class_load_read_barrier_slow_path, line 1808)?",
      "range": {
        "startLine": 1796,
        "startChar": 4,
        "endLine": 1796,
        "endChar": 7
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_7cfbe6e3",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 2
      },
      "lineNbr": 1799,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Should this be .Lart_quick_alloc_object_region_tlab_class_load_read_barrier_slow_path instead (go straight to the slow path if class is null) rather than relying on the null check in ALLOC_OBJECT_TLAB_FAST_PATH?",
      "range": {
        "startLine": 1799,
        "startChar": 16,
        "endLine": 1799,
        "endChar": 90
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_fc583600",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 2
      },
      "lineNbr": 2291,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "align the space width to match the rest of the code?",
      "range": {
        "startLine": 2291,
        "startChar": 7,
        "endLine": 2291,
        "endChar": 8
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_1cd3ba5a",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 2
      },
      "lineNbr": 2293,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "x0?",
      "range": {
        "startLine": 2293,
        "startChar": 15,
        "endLine": 2293,
        "endChar": 20
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_bcf70e28",
        "filename": "runtime/arch/x86/quick_entrypoints_x86.S",
        "patchSetId": 2
      },
      "lineNbr": 1033,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Add a TODO for the fast path",
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_fc4b5683",
        "filename": "runtime/arch/x86/quick_entrypoints_x86.S",
        "patchSetId": 2
      },
      "lineNbr": 1086,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Same.",
      "range": {
        "startLine": 1086,
        "startChar": 17,
        "endLine": 1086,
        "endChar": 50
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_1c497a8b",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 1042,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Same.",
      "range": {
        "startLine": 1042,
        "startChar": 17,
        "endLine": 1042,
        "endChar": 50
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_5cdb82e4",
        "filename": "runtime/gc/collector/concurrent_copying-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "zero?",
      "range": {
        "startLine": 173,
        "startChar": 49,
        "endLine": 173,
        "endChar": 52
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_3c91def3",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 2
      },
      "lineNbr": 2246,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Surround this code with kUseBakerReadBarrier and a ScopedTiming?",
      "range": {
        "startLine": 2241,
        "startChar": 0,
        "endLine": 2246,
        "endChar": 28
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_fc4596a0",
        "filename": "runtime/gc/collector/concurrent_copying.h",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "How about rb_mark_bit_stack? It\u0027s clearer it\u0027s not a \u0027mark stack\u0027 (where we do recursive marking on) in the traditional sense?",
      "range": {
        "startLine": 236,
        "startChar": 43,
        "endLine": 236,
        "endChar": 57
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_3cf0fe92",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 2547,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Is the indentation right in this line?",
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_1cc09a25",
        "filename": "runtime/generated/asm_support_gen.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Use a decimal?",
      "range": {
        "startLine": 87,
        "startChar": 33,
        "endLine": 87,
        "endChar": 37
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_f9a608c0",
        "filename": "runtime/lock_word-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "gc_state?\n\nTake a unshifted value and shift it here like the old code?",
      "range": {
        "startLine": 53,
        "startChar": 49,
        "endLine": 53,
        "endChar": 56
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_f9db6841",
        "filename": "runtime/lock_word.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Update this line to clarify that the forwarding address is shifted by 3 rather than 2?",
      "range": {
        "startLine": 58,
        "startChar": 5,
        "endLine": 58,
        "endChar": 26
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_b91400f1",
        "filename": "runtime/lock_word.h",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Can you rename these to kGCStateMarkShifted and kGCStateMaskShiftedToggled to be consistent with above?",
      "range": {
        "startLine": 108,
        "startChar": 4,
        "endLine": 108,
        "endChar": 16
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_99cd7c8e",
        "filename": "runtime/lock_word.h",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "So now the forwarding address is shifted by 3 rather than 2, right?\n\nConsider defining a new enum (eg kForwardingAddressShift) that\u0027s identical to kObjectAlignmentShift and use it to avoid directly using kObjectAlignmentShift?",
      "range": {
        "startLine": 136,
        "startChar": 31,
        "endLine": 136,
        "endChar": 52
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_b9f880e1",
        "filename": "runtime/lock_word.h",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "this param rb_state was not shifted yet but now gc_bits is shifted. Any confusions?",
      "range": {
        "startLine": 145,
        "startChar": 39,
        "endLine": 145,
        "endChar": 46
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_f9584800",
        "filename": "runtime/lock_word.h",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "GCBits() returns a unshifted value while ReadBarrierState() and MarkBitState() return a shifted value. Can you be consistent to avoid confusion? I prefer the latter.\n\nAlso how about GCState() to be consistent those and GetValueWithoutGCState?",
      "range": {
        "startLine": 191,
        "startChar": 11,
        "endLine": 191,
        "endChar": 17
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_3c879e0c",
        "filename": "runtime/mirror/object.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Can you leave a TODO to clean this up and change to \"int32_t GetReadBarrierBit()\"?",
      "range": {
        "startLine": 95,
        "startChar": 10,
        "endLine": 95,
        "endChar": 31
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_bcb14edd",
        "filename": "runtime/read_barrier.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-03T01:29:21Z",
      "side": 1,
      "message": "Can you add a TODO to remove black_ptr_?",
      "range": {
        "startLine": 102,
        "startChar": 29,
        "endLine": 102,
        "endChar": 39
      },
      "revId": "f8efcabf023ad64e91e69aa1fe0d27f4e8a39f99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}