{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c367aa65_4aecc7ac",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3947,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "Use in-memory compare just like with the `method_handle_kind` above.",
      "range": {
        "startLine": 3946,
        "startChar": 4,
        "endLine": 3947,
        "endChar": 65
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f42b9f43_08c856af",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3947,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-07T12:25:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c367aa65_4aecc7ac",
      "range": {
        "startLine": 3946,
        "startChar": 4,
        "endLine": 3947,
        "endChar": 65
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de2b902_0c525897",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3959,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "__ testl(Address(method, ArtMethod::AccessFlagsOffset()),\n             Immediate(kAccStatic | kAccFinal | kAccPrivate));`\n\nBut why are you testing for `kAccFinal`? Is there a different method handle kind for final methods?\n\n(Final methods can skip the virtual dispatch but maybe it\u0027s better to avoid this optimization to emit less code.)",
      "range": {
        "startLine": 3957,
        "startChar": 4,
        "endLine": 3959,
        "endChar": 40
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e97de61d_892cfa0a",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3959,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-07T12:25:17Z",
      "side": 1,
      "message": "No reason for that check. I misunderstood [1] and assumed that `invoke-direct` is for used for final methods too. Apparently I didn\u0027t pay enough attention to `namely either a private instance method or a constructor` part.\n\n[1] https://source.android.com/docs/core/runtime/dalvik-bytecode. `invoke-kind` for `invoke-direct` says `that is, an instance method that is by its nature non-overridable`",
      "parentUuid": "9de2b902_0c525897",
      "range": {
        "startLine": 3957,
        "startChar": 4,
        "endLine": 3959,
        "endChar": 40
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1a384cf_a11fec83",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3959,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-20T10:32:40Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e97de61d_892cfa0a",
      "range": {
        "startLine": 3957,
        "startChar": 4,
        "endLine": 3959,
        "endChar": 40
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16ab3181_4f40af28",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3972,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "I\u0027d prefer not to have another variable for `method`. It\u0027s better to explicitly clobber the `method` register, rather than hiding that we\u0027re doing it.",
      "range": {
        "startLine": 3972,
        "startChar": 4,
        "endLine": 3972,
        "endChar": 77
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80bd5118_de9d25cc",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3972,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-07T12:25:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16ab3181_4f40af28",
      "range": {
        "startLine": 3972,
        "startChar": 4,
        "endLine": 3972,
        "endChar": 77
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70e21634_028120d9",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3982,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "If the method throws, do we get the same stack trace for fast-path and slow-path?",
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fde3d5b_30564c5a",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3982,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-07T12:25:17Z",
      "side": 1,
      "message": "I\u0027ve added `new Exception().printStackTrace();` to `throwException` method in Main.java and results are the same (removed proto ID check to force fast-path).\n\nShould they differ?",
      "parentUuid": "70e21634_028120d9",
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef0be0fb_23b43441",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3982,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-20T10:32:40Z",
      "side": 1,
      "message": "The same is good. We don\u0027t want the stack trace depend on which implementation path we take.",
      "parentUuid": "4fde3d5b_30564c5a",
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5a377c8_b9b51041",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3991,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "Code like this belongs to the slow-path (define a new slow-path class) to avoid the `jmp` over it.",
      "range": {
        "startLine": 3990,
        "startChar": 4,
        "endLine": 3991,
        "endChar": 21
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67e0ac29_8a2c3b79",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3991,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-08T11:23:45Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "d5a377c8_b9b51041",
      "range": {
        "startLine": 3990,
        "startChar": 4,
        "endLine": 3991,
        "endChar": 21
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90d46db4_9ac1aeae",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3998,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "This is not a constant, not even for JIT because the class can actually move in jitzygote mode. You would need to restrict the intrinsic to the case where we have a boot image and use `LoadBootImageAddress()` with all the complexity that it adds. But that\u0027s probably moot because of the next comment below.",
      "range": {
        "startLine": 3997,
        "startChar": 4,
        "endLine": 3998,
        "endChar": 96
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e5e08de_929adeb7",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 3998,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-08T11:23:45Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "90d46db4_9ac1aeae",
      "range": {
        "startLine": 3997,
        "startChar": 4,
        "endLine": 3998,
        "endChar": 96
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ca1ffd3_88daed23",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4000,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "If an exception is thrown, ART shall do a long-jump and we\u0027ll never reach this code.",
      "range": {
        "startLine": 3999,
        "startChar": 4,
        "endLine": 4000,
        "endChar": 33
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a318e2de_f4a2929b",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4000,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-07T12:25:17Z",
      "side": 1,
      "message": "But even if I extract these checks into a new slow-path class, it still won\u0027t be reached as generated code will be something like \n```\ncall gs:[...] pInvokePolymorphic\n\u003e the new slow-path class generated code \u003c\n```\nright?",
      "parentUuid": "0ca1ffd3_88daed23",
      "range": {
        "startLine": 3999,
        "startChar": 4,
        "endLine": 4000,
        "endChar": 33
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2906ed4d_72c9b4bc",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4000,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-20T10:32:40Z",
      "side": 1,
      "message": "The point is that if we get back to the intrinsic code (slow path or not), we know that there was no exception, so we can just skip these checks and update the cache.\n\nBut it would be even better to update the cache in the runtime call instead and avoid the extra code here.",
      "parentUuid": "a318e2de_f4a2929b",
      "range": {
        "startLine": 3999,
        "startChar": 4,
        "endLine": 4000,
        "endChar": 33
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7850b162_306c4bbf",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4000,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-20T11:15:43Z",
      "side": 1,
      "message": "Got it, thanks.",
      "parentUuid": "2906ed4d_72c9b4bc",
      "range": {
        "startLine": 3999,
        "startChar": 4,
        "endLine": 4000,
        "endChar": 33
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fddf4ba_87498d05",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4006,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-07T08:22:06Z",
      "side": 1,
      "message": "What if the same method handle is used from different dex files? A `proto_idx` could match for a different set of arguments.",
      "range": {
        "startLine": 4005,
        "startChar": 4,
        "endLine": 4006,
        "endChar": 45
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3044662_271e63f1",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4006,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-07T12:25:17Z",
      "side": 1,
      "message": "You\u0027re right, it won\u0027t work.\n\nShould I check that MethodType is resolved and do MethodType::IsExactMatch equivalent or cache dex file and proto ID pair? Or there is a better way?",
      "parentUuid": "1fddf4ba_87498d05",
      "range": {
        "startLine": 4005,
        "startChar": 4,
        "endLine": 4006,
        "endChar": 45
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9bbd225_212b1be8",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4006,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-20T10:32:40Z",
      "side": 1,
      "message": "Do we have some global map (WeakHashMap?) with all `MethodType`s?",
      "parentUuid": "f3044662_271e63f1",
      "range": {
        "startLine": 4005,
        "startChar": 4,
        "endLine": 4006,
        "endChar": 45
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa92738_5117ba9c",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4006,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2023-09-20T11:15:43Z",
      "side": 1,
      "message": "Not exactly WeakHashMap, but we do have a global map: https://source.corp.google.com/h/android/platform/superproject/main/+/main:libcore/ojluni/src/main/java/java/lang/invoke/MethodType.java;l\u003d199;drc\u003d43a083135917c3b4267e87184ca4aea73dece040",
      "parentUuid": "a9bbd225_212b1be8",
      "range": {
        "startLine": 4005,
        "startChar": 4,
        "endLine": 4006,
        "endChar": 45
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aefb6693_a7ed4fb8",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4006,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-08T11:23:45Z",
      "side": 1,
      "message": "Replaced with comparison of callsite and `MethodHandle`\u0027s type.",
      "parentUuid": "cfa92738_5117ba9c",
      "range": {
        "startLine": 4005,
        "startChar": 4,
        "endLine": 4006,
        "endChar": 45
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b371e0d1_1ea4fd79",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4006,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-10T13:13:00Z",
      "side": 1,
      "message": "Would it be possible to add a test for the case that Vladimir mentioned? `the same method handle is used from different dex files`. In test 2237- we have some example on how to set up the test for using multidex",
      "parentUuid": "aefb6693_a7ed4fb8",
      "range": {
        "startLine": 4005,
        "startChar": 4,
        "endLine": 4006,
        "endChar": 45
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf3c4ee7_beac0fdd",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 14
      },
      "lineNbr": 4006,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-10T14:48:10Z",
      "side": 1,
      "message": "Good idea, done.",
      "parentUuid": "b371e0d1_1ea4fd79",
      "range": {
        "startLine": 4005,
        "startChar": 4,
        "endLine": 4006,
        "endChar": 45
      },
      "revId": "df82ef93e4795c5de14cf964862b9c25636d5e16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}