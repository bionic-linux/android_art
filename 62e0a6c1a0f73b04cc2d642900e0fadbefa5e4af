{
  "comments": [
    {
      "key": {
        "uuid": "36fde29f_2991e74a",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/IfBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 31,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:15:50Z",
      "side": 1,
      "message": "Perhaps add a bit of class level documentation here.",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f61dfb4_a866a6c1",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/IfBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "this line is no longer required, since all your subclasses set their own",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a56bad34_c8910b1c",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/IfBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1175369
      },
      "writtenOn": "2017-06-27T20:15:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f61dfb4_a866a6c1",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37ee6dc8_354e5376",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/IfBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 127,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:19:06Z",
      "side": 1,
      "message": "in the stats output, we don\u0027t see the difference between the two subclass mutations. Perhaps make another abstract method, like getMutationName, and make both subclasses implement that, or use the getMutationString of the serializer somehow?",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a055e87_0d1e5617",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/IfBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:15:50Z",
      "side": 1,
      "message": "Following the tradition of good documentation of our interfaces, perhaps document what is expected of this method (it is obvious perhaps, but it will make the function more clear to future developers that want to implement this class).",
      "range": {
        "startLine": 133,
        "startChar": 28,
        "endLine": 133,
        "endChar": 29
      },
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c880447_0fa51cff",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/OppositeBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "any reason you picked 40 here?",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7182d85e_c71c50db",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/OppositeBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1175369
      },
      "writtenOn": "2017-06-27T20:15:32Z",
      "side": 1,
      "message": "just wanted to make it a little more probable, no specific reason.",
      "parentUuid": "2c880447_0fa51cff",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2455d7d6_de86177a",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/OppositeBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "note, the default return is of course safe, since it leaves the instruction intact.\n\nHowever, you could also consider Log.errorAndQuit(\"....\"); here as is done in some other mutators, since the code should never be reached given all the logic in the super class.",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ae7b8d2_3c7b1b1c",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/OppositeBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1175369
      },
      "writtenOn": "2017-06-27T20:15:32Z",
      "side": 1,
      "message": "what is the default return then?",
      "parentUuid": "2455d7d6_de86177a",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3452f433_eb595e42",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/OppositeBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:31:44Z",
      "side": 1,
      "message": "same default return code, just the exiting error\n(technically you don\u0027t need any return then, but the compiler cannot figure that out here)",
      "parentUuid": "9ae7b8d2_3c7b1b1c",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d433afd_65e0ca8f",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/RandomBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 18,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "move above the constructor (fields first)\nalso private static final for such arrays\nlastly, all caps for the names of such constant arrays",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4eb819d5_e58908a3",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/RandomBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 20,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "new line",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3d11389_cbd736aa",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/RandomBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 27,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "if (...) \nspace after if",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e91b9ac7_4ad5cfba",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/RandomBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 28,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "this is of course the shortest way of searching in the array but the asList each time seems a bit unfortunate. Perhaps you can make your own indexof method here?",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cebf1462_946016c4",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/RandomBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 31,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "else if",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c816634_edb510de",
        "filename": "tools/dexfuzz/src/dexfuzz/program/mutators/RandomBranchChanger.java",
        "patchSetId": 13
      },
      "lineNbr": 40,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T20:02:59Z",
      "side": 1,
      "message": "space after //, no ws at end",
      "revId": "62e0a6c1a0f73b04cc2d642900e0fadbefa5e4af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}