{
  "comments": [
    {
      "key": {
        "uuid": "fc73265a_397acaad",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-14T15:01:10Z",
      "side": 1,
      "message": "What if the error message is null, can it just abort with the old messages then?",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcbe0e35_c67424f6",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-17T09:33:17Z",
      "side": 1,
      "message": "error_msg should not be null. Would it help to state that explicitly in the comments or add a CHECK for it?\n\nI do not want abort to be called in the constructor. What to do about the error should be the responsibility of the caller, not this constructor.",
      "parentUuid": "fc73265a_397acaad",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c6993e3_2c13e73f",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-17T15:32:15Z",
      "side": 1,
      "message": "CHECK would be good",
      "parentUuid": "bcbe0e35_c67424f6",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcaf43ab_1b8a3bfd",
        "filename": "runtime/indirect_reference_table.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-18T14:35:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c6993e3_2c13e73f",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc73265a_19610e08",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-14T15:01:10Z",
      "side": 1,
      "message": "Can you leave the old IsValid method here?\n\nI think that\u0027s a much clearer pattern to use then checking if the error message is non-empty.\n\n  //example\n  IndirectReferenceTable irt(\u0026error_msg);\n  if (!irt.IsValid()) {\n     LOG(ERROR) \u003c\u003c error_msg;\n   }",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bca52e1d_6b2c21b2",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-17T09:33:17Z",
      "side": 1,
      "message": "The nice thing about using the error_msg to tell if the object is valid is there is no question about lock safety. Are locks required to call IsValid? What if it\u0027s called right after the object is constructed?\n\nOn the other hand, I can see how calling IsValid explicitly makes the code easier to follow. I switched to using IsValid. I would be interested in your thoughts on whether it is an improvement overall, given the question about locking.",
      "parentUuid": "fc73265a_19610e08",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c6993e3_2c9c47a6",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-17T15:32:15Z",
      "side": 1,
      "message": "IsValid can be documented as being constructed correctly, and not needing any thread checks because it should just be an IsValid const that only reads other const fields.\n\nI\u0027m not sure that as-is an IRT can ever into an invalid state (after the constructor). The most that can happen is that the capacity is full but that\u0027s still valid its just that more adds will fail.\n\n\n-------------------\n\nThe other more complicated way is to do something like\n\n   static IndirectReferenceTable* Create(void* storage, ....) {\n        auto ptr \u003d new (storage) IndirectReferenceTable(....);\n        if (ptr.check_some_field \u003d\u003d false) { \n          return nullptr;\n        }\n        return ptr;\n   }\n   // also need to call the destructor explicitly then. ugh.\n\nand then that still lets us use in-place storage, but I don\u0027t really like this because then the thread.h would  have to change to use char[sizeof(IRT)] as the storage and a bunch of helpers would have to be exposed instead of accessing it directly as a field.",
      "parentUuid": "bca52e1d_6b2c21b2",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcaf43ab_fb954f1c",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-18T14:35:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c6993e3_2c9c47a6",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc73265a_b9655a14",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 268,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-14T15:01:10Z",
      "side": 1,
      "message": "nit: one parameter per line",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcbe0e35_66645043",
        "filename": "runtime/indirect_reference_table.h",
        "patchSetId": 1
      },
      "lineNbr": 268,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-17T09:33:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc73265a_b9655a14",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc73265a_194a6e80",
        "filename": "runtime/java_vm_ext.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-14T15:01:10Z",
      "side": 1,
      "message": "Can you add a separate method for this?\n\n   std::unique_ptr\u003cJavaVMExt\u003e Create(Runtime* runtime, ...)\n\nand it will return null if it fails to initialize?",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcbe0e35_267ed8b2",
        "filename": "runtime/java_vm_ext.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-17T09:33:17Z",
      "side": 1,
      "message": "Good catch, thanks.",
      "parentUuid": "fc73265a_194a6e80",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc73265a_b93ebae2",
        "filename": "runtime/jni_env_ext.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-14T15:01:10Z",
      "side": 1,
      "message": "comments?",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcbe0e35_4685d4b8",
        "filename": "runtime/jni_env_ext.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-17T09:33:17Z",
      "side": 1,
      "message": "Can you elaborate on what you\u0027re looking for? Is it better now?",
      "parentUuid": "fc73265a_b93ebae2",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c6993e3_0cfaa3cc",
        "filename": "runtime/jni_env_ext.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-17T15:32:15Z",
      "side": 1,
      "message": "Thanks, it looks good now.",
      "parentUuid": "bcbe0e35_4685d4b8",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc73265a_99565e25",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 698,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-14T15:01:10Z",
      "side": 1,
      "message": "Why even have it if it\u0027s going to be unused?",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcbe0e35_06575c5b",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 698,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-17T09:33:17Z",
      "side": 1,
      "message": "I am preserving the existing behavior of ignoring the error message. I think its worth considering whether the error should be returned or propagated from here, but I would prefer to leave that for a later CL.",
      "parentUuid": "fc73265a_99565e25",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c6993e3_cc034be6",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 698,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-17T15:32:15Z",
      "side": 1,
      "message": "Isn\u0027t this the same OutOfMemory type of situation? When new thread is allocated it fails to make JNIEnvExt and so can\u0027t fully create a new Thread?",
      "parentUuid": "bcbe0e35_06575c5b",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcaf43ab_1b70fbf7",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 698,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-10-18T14:35:24Z",
      "side": 1,
      "message": "This case corresponds to the case where AttachCurrentThread is called. In that case, we return a JNI error code to indicate an error occurred. As I understand it, the JNI spec says we could additionally throw a Java exception in this case, but the existing behavior was to return a JNI error code without throwing an exception. I would prefer to preserve that existing behavior for now.",
      "parentUuid": "5c6993e3_cc034be6",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_687e5a5f",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 698,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-10-18T18:22:28Z",
      "side": 1,
      "message": "Not throwing is probably fine.\n\nHowever if we just return the error code and nothing else, even though we\u0027re spec-compliant, doesn\u0027t it mean that it will just invisibly fail and that\u0027s it?\n\nDoesn\u0027t it seem like it should log so at least the user can debug somehow?\n\n---\nIf there\u0027s currently no way to recover AttachCurrentThread failure information then it would be good if it at least logged here. The semantics will be preserved then so in that case there would be no downside.",
      "parentUuid": "dcaf43ab_1b70fbf7",
      "revId": "9eeda03e40c1f50829e544176a557ee7946a7cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}