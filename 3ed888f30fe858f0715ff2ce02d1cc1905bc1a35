{
  "comments": [
    {
      "key": {
        "uuid": "4c6ef4ff_e032ff90",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-04T16:00:29Z",
      "side": 1,
      "message": "Why doesn\u0027t \"BitVector\" have this its in constructor?",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ba9e534_ff9067c5",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-04T16:09:14Z",
      "side": 1,
      "message": "How much do we care about not doing any unnecessary work?\n\nI\u0027m actually thinking about moving this back to the CodeSinking.",
      "parentUuid": "4c6ef4ff_e032ff90",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6df11cc5_6f8ee424",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-04T16:32:34Z",
      "side": 1,
      "message": "So I noticed a few things:\n\nIt\u0027s called BitVector, but it\u0027s really a BitArray because there is no push-back, insert, etc. There is no distinct length/capacity like in a real vector.\n\nIf it seems to be \"unnecessary work\", perhaps the allocator should have a wrapper to enforce zero-initialization (with memset(0)) or at least a trait to indicate if it does that?\n\n---\n\n\nAny sane data structure should have a well-defined initial state, in this case, as a post-condition of BitVector{} the bits accessible via iterator should be all 0s.",
      "parentUuid": "6ba9e534_ff9067c5",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f370e4b7_558e8b73",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-04T16:47:45Z",
      "side": 1,
      "message": "Initializing x and y is unnecesary work if you want to do\n\n  x \u003d a \u0026 b;\n  y \u003d a \u0026 ~b;\n\nor similar operations on a BitVector.\n\nYes, the naming is odd.",
      "parentUuid": "6df11cc5_6f8ee424",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33b94262_a9a71048",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-04T17:14:51Z",
      "side": 1,
      "message": "Sounds like there should\u0027ve been\n\n   static BitVector Union(a,b)\n   static BitVector Negate(a)\n\netc.\n\nto bypass the initialization.",
      "parentUuid": "f370e4b7_558e8b73",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3a8e1c_2ba5efd4",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-04T17:28:09Z",
      "side": 1,
      "message": "The Union(), Intersect(), Subtract() and Negate() functions would also need to take the allocator, length, and expandable arguments.\n\nAll such cleanup is outside the scope of this CL.",
      "parentUuid": "33b94262_a9a71048",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e458435b_6588a7d7",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-04T17:51:32Z",
      "side": 1,
      "message": "It seems far too brittle to me to rely on a separate call to clear all the bits.\n\nIf you insist on \"BitVector\" remaining ill-defined after construction, at least don\u0027t break ArenaBitVector when it was well-defined after construction prior to this CL?",
      "parentUuid": "3e3a8e1c_2ba5efd4",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3666fa83_6d7da31a",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-04T18:05:50Z",
      "side": 1,
      "message": "I\u0027m not breaking it. I\u0027m preserving the existing semantics where ArenaBitVector is zero-initialized when used with ArenaAllocator but not zero-initialized when used with ScopedArenaAllocator. Note that for example the BlockInfo is already explicitly clearing its ArenaBitVectors even though they are initialized using ArenaAllocator.",
      "parentUuid": "e458435b_6588a7d7",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c2e690e_c2aba401",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-04T18:20:25Z",
      "side": 1,
      "message": "Is there profiling evidence this is causing a measurable slowdown?",
      "parentUuid": "3666fa83_6d7da31a",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "944030ec_e478a476",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-05T09:13:55Z",
      "side": 1,
      "message": "No, AFAIK no one has done such measurements.\n\nI\u0027m not rewriting how BitVector works in this CL. Period.",
      "parentUuid": "3c2e690e_c2aba401",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1f788cb_96061a34",
        "filename": "runtime/base/arena_bit_vector.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-05T14:11:13Z",
      "side": 1,
      "message": "I wasn\u0027t asking for a rewrite.\n\nDo you feel that strongly opposed to calling \"ClearAllBits\" in the ArenaBitVector constructor given that there\u0027s no measurements to indicate it would be noticeably \"unnecessary work\" ?",
      "parentUuid": "944030ec_e478a476",
      "revId": "3ed888f30fe858f0715ff2ce02d1cc1905bc1a35",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}