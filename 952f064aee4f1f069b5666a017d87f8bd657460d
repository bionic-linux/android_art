{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e5a69c67_74ae6744",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-29T16:41:18Z",
      "side": 1,
      "message": "Not a fully detailed review yet, since I\u0027ve got a question about the blocking call.\n\nThe Bloatbuster lint error is a false alarm - I suspect it used the wrong reference build (b/325472025). Hopefully the next run will be better.",
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48ae9744_5ee73e9d",
        "filename": "artd/artd.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-29T16:41:18Z",
      "side": 1,
      "message": "What\u0027s this for?\n\nIf the intention here is to avoid repeating the function signatures then I think the benefit is limited since the code depends on them anyway, and introducing this template metaprogramming nonsense adds complexity too.",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 65
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70852860_094971d3",
        "filename": "artd/artd.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-11-04T14:56:19Z",
      "side": 1,
      "message": "Yes, this is to avoid repeating the function signatures. Without this, we are repeating the same function signature 3~5 times in the header and in the test. As we are mocking more and more functions, this becomes more and more tedious.\n\nSince STL already has many type transformations like `remove_const_t`, `remove_volatile_t`, and `remove_reference_t`, it\u0027s not unreasonable to add one more type transformation following the same pattern. Like all the other metaprogramming helpers in STL, one doesn\u0027t need to understand how it works in order to use them. Instead, one only needs to know what it does.\n\nTherefore, I\u0027d like to keep this.",
      "parentUuid": "48ae9744_5ee73e9d",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 65
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97025276_6b294ee7",
        "filename": "artd/artd.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-11-07T22:07:24Z",
      "side": 1,
      "message": "\u003e it\u0027s not unreasonable to add one more type transformation\n\nThat depends. If STL provided this then I\u0027d agree, but it doesn\u0027t, so apparently there hasn\u0027t been a compelling need for it so far.\n\nLet me rephrase my question: Where do the `noexcept` specifiers come from and why do they need to be removed this way? I don\u0027t see them in the Bionic headers.",
      "parentUuid": "70852860_094971d3",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 65
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "174827eb_210fc01f",
        "filename": "artd/artd.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-11-08T18:20:32Z",
      "side": 1,
      "message": "Thanks for bringing this up. It made me dig deeper and understand more about the problem.\n\n`noexcept` is from the [glibc header](https://cs.android.com/android/platform/superproject/main/+/main:prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8/sysroot/usr/include/signal.h;l\u003d127;drc\u003d33581f7b65a5545e9ad836bab9495e95a59c63bf) where ` __THROW` is from [here](https://cs.android.com/android/platform/superproject/main/+/main:prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8/sysroot/usr/include/x86_64-linux-gnu/sys/cdefs.h;l\u003d61;drc\u003d33581f7b65a5545e9ad836bab9495e95a59c63bf) (although the #define is for GCC only, clang seems to pretend to be GCC 4.2.1).\n\nAs you said, the `noexcept` doesn\u0027t exist in the Bionic header. The compilation only fails on the host test, not on a device build. When it fails, the error looks like:\n \n```\nerror: implicit instantiation of undefined template \u0027std::function\u003cint (int, int) noexcept\u003e\u0027\n   95 |   std::function\u003cdecltype(kill)\u003e kill_;\n      |                                 ^\n```\n\nThis is because `std::function` doesn\u0027t support a function type with `noexcept`. To address this problem, I have to remove the `noexcept` from the function type.\n\nAlternatives Considered:\n\n1. Disabling host test.\n\n    Not worth it just because of this.\n\n1. Overriding `__THROW`.\n\n    Didn\u0027t find a way to do it, and too hacky even if there is a way.\n\n1. Defining an std::function variant (say, `art::function`) that supports `noexcept`.\n\n    The metaprogramming part is as complicated as `remove_noexcept_t`, although it\u0027s simpler to use.\n    \nIt looks like we have to choose between repeating the same function signature 3~5 times and using `remove_noexcept_t`. To me, the latter is less annoying than or at most the same annoying as the former. Objectively speaking, there isn\u0027t one choice that is obviously better than the other, so it\u0027s more about personal taste. And when the discussion comes to personal taste, it is out of the scope of a code review.",
      "parentUuid": "97025276_6b294ee7",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 65
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86798484_f8e76e85",
        "filename": "artd/artd.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-11-14T23:51:26Z",
      "side": 1,
      "message": "Thanks for the explanation. I agree on the alternatives you mentioned, but there\u0027s another one: Add the function signatures once in this header as, say, `KillFn` etc, and use those instead.\n\nWith `using` aliases it may be possible to get rid of all the `decltype` as well.\n\nThis isn\u0027t purely taste - there\u0027s a readability aspect in that introducing new tools unavoidably adds cognitive load, and even more so when we need to implement and maintain them ourselves. That needs to be offset by the benefit.",
      "parentUuid": "174827eb_210fc01f",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 65
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bc53979_c88c4518",
        "filename": "artd/artd.h",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-11-18T13:12:40Z",
      "side": 1,
      "message": "OK. I don\u0027t fully agree that the \"cognitive load\" can be an excuse of refusing to use new tools, but the \"needs to be offset by the benefit\" part persuaded me. The `using` approach is acceptable as it\u0027s not that clunky, so you successfully reduced the benefit of `remove_noexcept_t` to below my threshold :) Thanks for the suggestion.",
      "parentUuid": "86798484_f8e76e85",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 65
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8288ba4e_ac789339",
        "filename": "artd/binder/com/android/server/art/IArtd.aidl",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-29T16:41:18Z",
      "side": 1,
      "message": "It seems this is somewhat frowned upon, and there\u0027s b/299355525 about some java-vs-native discrepancy that I have to admit I don\u0027t fully grasp.\n\nInstead of blocking in a `wait` call, is it an option to instead pass in an object with a callback that gets called on completion?",
      "range": {
        "startLine": 283,
        "startChar": 4,
        "endLine": 283,
        "endChar": 27
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d25e0dcf_4a3f35ec",
        "filename": "artd/binder/com/android/server/art/IArtd.aidl",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-11-04T14:56:19Z",
      "side": 1,
      "message": "Discussed offline. In general, @PropagateAllowBlocking only propagates the \"allow blocking\" flag from the `IArtd` interface, which is from the global `waitForservice` method, so it\u0027s not unreasonable. In particular, we need to wait for a notification in every iteration in a loop, so it will be tedious to use the callback style, especially given that Java doesn\u0027t have `async`/`await`.",
      "parentUuid": "8288ba4e_ac789339",
      "range": {
        "startLine": 283,
        "startChar": 4,
        "endLine": 283,
        "endChar": 27
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50d10cc7_49a3ed9c",
        "filename": "artd/binder/com/android/server/art/IArtd.aidl",
        "patchSetId": 4
      },
      "lineNbr": 285,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-29T16:41:18Z",
      "side": 1,
      "message": "Nit: Empty line.",
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1187f85f_4ba913d1",
        "filename": "artd/binder/com/android/server/art/IArtd.aidl",
        "patchSetId": 4
      },
      "lineNbr": 285,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-11-04T14:56:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50d10cc7_49a3ed9c",
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73a99bba_019cdec4",
        "filename": "libarttools/include_testing/tools/testing.h",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-29T16:41:18Z",
      "side": 1,
      "message": "Return just the name and rely on `$PATH` instead? You\u0027d need to use `execvp` below instead, but that doesn\u0027t look like it\u0027d be a problem.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 57,
        "endChar": 3
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9551ae93_6f80fc8e",
        "filename": "libarttools/include_testing/tools/testing.h",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-11-04T14:56:19Z",
      "side": 1,
      "message": "Thanks for the suggestion! This `GetBin` function is used in many places, not just for the first argument for `execv`, so `execvp` doesn\u0027t fully solve the problem. However, I\u0027m inspired by the idea and changed this function to searching $PATH instead.",
      "parentUuid": "73a99bba_019cdec4",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 57,
        "endChar": 3
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "386af9df_9e035e22",
        "filename": "libarttools/include_testing/tools/testing.h",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-29T16:41:18Z",
      "side": 1,
      "message": "Not strictly related, but there should be error checking for this call.",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 9
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24a0b386_3a33278e",
        "filename": "libarttools/include_testing/tools/testing.h",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-11-04T14:56:19Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "386af9df_9e035e22",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 9
      },
      "revId": "952f064aee4f1f069b5666a017d87f8bd657460d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}