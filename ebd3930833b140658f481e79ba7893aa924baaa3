{
  "comments": [
    {
      "key": {
        "uuid": "e565bbd7_b97dd0f4",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-08-28T23:05:24Z",
      "side": 1,
      "message": "This seems quite RAM hungry if we have one per method index. If we only have it for AOT compilation modes it should be fine.",
      "range": {
        "startLine": 860,
        "startChar": 18,
        "endLine": 860,
        "endChar": 35
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5070eba_903b3a9d",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-28T23:14:55Z",
      "side": 1,
      "message": "I\u0027m not following, I think it just skips adding anything if HasCompiledCode returns false -- see L986.\n\nCan you please let me know what action to take here?",
      "parentUuid": "e565bbd7_b97dd0f4",
      "range": {
        "startLine": 860,
        "startChar": 18,
        "endLine": 860,
        "endChar": 35
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8df7c81_a56bf2b9",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-08-28T23:28:57Z",
      "side": 1,
      "message": "Ah, didn\u0027t see that it was checking HasCompiledCode. Seems good then.",
      "parentUuid": "c5070eba_903b3a9d",
      "range": {
        "startLine": 860,
        "startChar": 18,
        "endLine": 860,
        "endChar": 35
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b838edf3_10d305f9",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-28T23:32:18Z",
      "side": 1,
      "message": "I didn\u0027t bring this up because I\u0027d think that this is eclipsed by other metadata and compiler needs, anyways.",
      "parentUuid": "f8df7c81_a56bf2b9",
      "range": {
        "startLine": 860,
        "startChar": 18,
        "endLine": 860,
        "endChar": 35
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1e45e37_2925313b",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 860,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "quite a few fields here. Add a top level doc for this struct.",
      "range": {
        "startLine": 860,
        "startChar": 18,
        "endLine": 860,
        "endChar": 35
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c1329d1_75badad8",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 871,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-28T22:49:30Z",
      "side": 1,
      "message": "Properly update comment?",
      "range": {
        "startLine": 871,
        "startChar": 5,
        "endLine": 871,
        "endChar": 42
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69f24151_7e26e005",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 871,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-28T23:14:55Z",
      "side": 1,
      "message": "This is up-to-date. If you find it confusing, can you please let me know verbatim what you would like?",
      "parentUuid": "3c1329d1_75badad8",
      "range": {
        "startLine": 871,
        "startChar": 5,
        "endLine": 871,
        "endChar": 42
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4fd8b4b_d83d4a41",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 871,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-28T23:32:18Z",
      "side": 1,
      "message": "\"Can be\" makes no sense on a constant. The \"Can be\" should be on debug_info_idx, not the constant that defines invalid.\n\nIMHO a better comment for this line is \"A value of -1 denotes missing debug info.\"",
      "parentUuid": "69f24151_7e26e005",
      "range": {
        "startLine": 871,
        "startChar": 5,
        "endLine": 871,
        "endChar": 42
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6947ef41_617abee5",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 896,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-28T22:49:30Z",
      "side": 1,
      "message": "PrettyMethod on a MethodReference (which is guaranteed dex-file backed) doesn\u0027t require the mutator lock.",
      "range": {
        "startLine": 896,
        "startChar": 6,
        "endLine": 896,
        "endChar": 48
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55e64ec4_ea3d3f83",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "Query the enum explicitly instead of relying on the flags int values.\n\ni.e.\n\nif (method_hotness.isHot()) return ...;\nelse if (...)\n\nyou can also the enum directly if you find it more convenient.",
      "range": {
        "startLine": 904,
        "startChar": 8,
        "endLine": 904,
        "endChar": 67
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "687d82a6_d53a7ad5",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-29T23:08:36Z",
      "side": 1,
      "message": "This is implementing operator\u003c , so whatever it compares needs to obey a strict weak ordering relation (see http://en.cppreference.com/w/cpp/concept/Compare).\n\nIf the bit flags (which already obey that relation, guaranteed because it\u0027s using explicit enum values for each element) are not what you want to use, can you please recommend something more specific?",
      "parentUuid": "55e64ec4_ea3d3f83",
      "range": {
        "startLine": 904,
        "startChar": 8,
        "endLine": 904,
        "endChar": 67
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e320ee40_50bfa2dd",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 1012,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "I don\u0027t understand this comment.",
      "range": {
        "startLine": 1012,
        "startChar": 6,
        "endLine": 1012,
        "endChar": 37
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0faf9263_d919fb1c",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 1012,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-29T23:08:36Z",
      "side": 1,
      "message": "I did not add this, the gerrit diff just doesn\u0027t recognize it was extracted from a different part of the old code. It\u0027s in L870 of base file.",
      "parentUuid": "e320ee40_50bfa2dd",
      "range": {
        "startLine": 1012,
        "startChar": 6,
        "endLine": 1012,
        "endChar": 37
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22e91a08_c742c86b",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 1020,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-08-29T11:48:08Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 1015,
        "startChar": 0,
        "endLine": 1020,
        "endChar": 7
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e50f5716_5ddc9c0a",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-08-29T11:48:08Z",
      "side": 1,
      "message": "Initialize debug_info_idx with kDebugInfoIdxInvalid above and drop the has_debug_info variable.",
      "range": {
        "startLine": 1039,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 55
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00bf8e89_8ba84369",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 1536,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-08-29T11:48:08Z",
      "side": 1,
      "message": "As this no longer overrides StartClass() from OatDexMethodVisitor, maybe we should give it some other name and change the return type to void.",
      "range": {
        "startLine": 1536,
        "startChar": 7,
        "endLine": 1536,
        "endChar": 17
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96c43b50_8ae9139d",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2191,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-08-28T23:05:24Z",
      "side": 1,
      "message": "Possible to only do this if IsAotCompilationEnabled?",
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb9e8ed5_b31668e0",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2191,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-28T23:14:55Z",
      "side": 1,
      "message": "Same question as above.",
      "parentUuid": "96c43b50_8ae9139d",
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aeb613f_ee7cd9d7",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2191,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-08-28T23:28:57Z",
      "side": 1,
      "message": "Seems like it\u0027s OK for now, I was just wondering if we could maybe not do the logic for quickening (since IsAnyCompilationEnabled includes quickening).",
      "parentUuid": "eb9e8ed5_b31668e0",
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcfb7b44_e4ca40a3",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2217,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-08-29T11:48:08Z",
      "side": 1,
      "message": "We can drop the const_cast\u003c\u003e now.",
      "range": {
        "startLine": 2217,
        "startChar": 12,
        "endLine": 2217,
        "endChar": 40
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fc05f63_3c47b63a",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2220,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "line too long",
      "range": {
        "startLine": 2220,
        "startChar": 100,
        "endLine": 2220,
        "endChar": 103
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e07c816_7ae30101",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2913,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-08-28T23:05:24Z",
      "side": 1,
      "message": "Based on my understanding, the methods will get released in between each dex right?",
      "range": {
        "startLine": 2913,
        "startChar": 6,
        "endLine": 2913,
        "endChar": 33
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7857421d_1139b332",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2913,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-28T23:14:55Z",
      "side": 1,
      "message": "Not sure what you are asking?\n\nTo write out an oat file, there exists a different OatWriter instance for each one.",
      "parentUuid": "3e07c816_7ae30101",
      "range": {
        "startLine": 2913,
        "startChar": 6,
        "endLine": 2913,
        "endChar": 33
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9396529_5e858cfd",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 2913,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-08-28T23:28:57Z",
      "side": 1,
      "message": "Since the visitor frees the array when it goes out of scope, it should free the vector. So this seems good to me.",
      "parentUuid": "7857421d_1139b332",
      "range": {
        "startLine": 2913,
        "startChar": 6,
        "endLine": 2913,
        "endChar": 33
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa52d3c_e193881d",
        "filename": "compiler/oat_writer.h",
        "patchSetId": 3
      },
      "lineNbr": 485,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "This depends on kOatWriterForceOatCodeLayout, right?",
      "range": {
        "startLine": 485,
        "startChar": 44,
        "endLine": 485,
        "endChar": 57
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f38a2b04_9d00954f",
        "filename": "test/661-oat-writer-layout/check",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "Why bother? You should know how many times that gets printed and add the corresponding lines in the expected file. We do the same in all the other tests and this creates an exception.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 0
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bb1fb23_450f3ea4",
        "filename": "test/661-oat-writer-layout/check",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-29T23:08:36Z",
      "side": 1,
      "message": "I was under the impression JNI_OnLoad is printed twice for interpreter? No?\n\nHow about if I leave a TODO here to cleanup the JNI_OnLoad from all the other tests, since it seems pointless (to add it to every expected.txt that uses JNI) except for that 1 test which actually validates JNI_OnLoad is called?",
      "parentUuid": "f38a2b04_9d00954f",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 0
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb99f890_5c30db5c",
        "filename": "test/661-oat-writer-layout/check",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "Do you need this in order to make it work for no prebuild configs? Why not just blacklist the test for that config?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 24,
        "endChar": 55
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84259f06_8a11845f",
        "filename": "test/661-oat-writer-layout/check",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-29T23:08:36Z",
      "side": 1,
      "message": "Nothing to do with prebuild, dalvikvm can still call dex2oat on its own and generate an OAT file.\n\nIf the --compiler-filter is not high enough to generate an OAT class with compiled code, there\u0027s nothing for us to do here (for example --compiler-filter\u003dextract, --compiler-filter\u003dquicken, etc). There might be some other magical interactions to override this as well (-Xint, -no-dex2oat, etc) that I don\u0027t know the full list of.\n\n\u003e Why not just blacklist the test for that config?\n\nIIRC, this was to prevent having to blacklist it again and again for new configs, and to be tolerant of existing config changes.",
      "parentUuid": "cb99f890_5c30db5c",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 24,
        "endChar": 55
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61958dcd_63e11603",
        "filename": "test/661-oat-writer-layout/gen.py",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-08-29T11:48:08Z",
      "side": 1,
      "message": "Does python allow splitting lines like this?",
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04e31fc6_79429be5",
        "filename": "test/661-oat-writer-layout/gen.py",
        "patchSetId": 3
      },
      "lineNbr": 206,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-08-29T11:48:08Z",
      "side": 1,
      "message": "and this?",
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c1d7495_05f84e80",
        "filename": "test/661-oat-writer-layout/gen.py",
        "patchSetId": 3
      },
      "lineNbr": 216,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-08-29T11:48:08Z",
      "side": 1,
      "message": "and these?",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 102
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "428a8176_995e2d67",
        "filename": "test/661-oat-writer-layout/run",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-29T19:48:48Z",
      "side": 1,
      "message": "Is this \n\"exec ${RUN} $@ --profile -Xcompiler-option --compiler-filter\u003dspeed-profile\"\nnot enough?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 42
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9919ab8_14060d12",
        "filename": "test/661-oat-writer-layout/run",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-29T23:08:36Z",
      "side": 1,
      "message": "It\u0027s supposed to test --compiler-filter\u003dspeed, --profile\u003d... (as that was the requirement for this CL), so doing as suggested would not be testing the right config.",
      "parentUuid": "428a8176_995e2d67",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 42
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3e5abfb_dd6b7f72",
        "filename": "test/661-oat-writer-layout/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-08-28T23:05:24Z",
      "side": 1,
      "message": "Add the license?",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "ebd3930833b140658f481e79ba7893aa924baaa3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}