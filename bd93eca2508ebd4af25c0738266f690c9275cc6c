{
  "comments": [
    {
      "key": {
        "uuid": "554f2b68_31c33fdb",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 480,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "I\u0027d prefer a line break here.",
      "range": {
        "startLine": 480,
        "startChar": 23,
        "endLine": 480,
        "endChar": 24
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a55d7cc6_0cd16820",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 480,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "I think the current way is fine.",
      "parentUuid": "554f2b68_31c33fdb",
      "range": {
        "startLine": 480,
        "startChar": 23,
        "endLine": 480,
        "endChar": 24
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d007a892_3a2a7de0",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 480,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-02T15:48:51Z",
      "side": 1,
      "message": "In that case, the next line had too much whitespace. I see you fixed that in PS6.",
      "parentUuid": "a55d7cc6_0cd16820",
      "range": {
        "startLine": 480,
        "startChar": 23,
        "endLine": 480,
        "endChar": 24
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7728cd31_c1b89258",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 484,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "I\u0027d prefer a line break here.",
      "range": {
        "startLine": 484,
        "startChar": 30,
        "endLine": 484,
        "endChar": 31
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de0ccd90_c61ffa29",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 484,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "I think the current way is fine.",
      "parentUuid": "7728cd31_c1b89258",
      "range": {
        "startLine": 484,
        "startChar": 30,
        "endLine": 484,
        "endChar": 31
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98dc4bf9_d5c084c9",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 505,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 505,
        "startChar": 78,
        "endLine": 505,
        "endChar": 85
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71528631_e3751f7b",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 505,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98dc4bf9_d5c084c9",
      "range": {
        "startLine": 505,
        "startChar": 78,
        "endLine": 505,
        "endChar": 85
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a465556b_5652aa3e",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 714,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "Bad variable naming: this is surely not part of the \"tail\".",
      "range": {
        "startLine": 714,
        "startChar": 25,
        "endLine": 714,
        "endChar": 44
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c60854b_cb7bfd2d",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 714,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a465556b_5652aa3e",
      "range": {
        "startLine": 714,
        "startChar": 25,
        "endLine": 714,
        "endChar": 44
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa101c4_0fa8f3a2",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 2278,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "Why are you rewriting this?\n\nIf we want to be strict about object lifetime, you\u0027re replacing _existing_ (old) objects with new ones without destroying the old ones. This is conceptually wrong even though it does not harm the generated code for trivially destructible types.",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc2ca3f7_e839367d",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 2278,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "I re-wrote this because I found it to be clearer and more concise.",
      "parentUuid": "baa101c4_0fa8f3a2",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f9c07e1_04cf0837",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 5
      },
      "lineNbr": 2278,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-02T15:48:51Z",
      "side": 1,
      "message": "But playing loose with object lifetime is just bad. All forms of operators new and delete should be used very carefully.",
      "parentUuid": "cc2ca3f7_e839367d",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04f9d528_01be09e4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 1407,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "Are we really going to call InternTable::InternStrong() on every String reference (and GcRoot\u003c\u003es above) in the image?",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29c88eac_4149d399",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 1407,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "Yes.  The strings that are in the AppImage are required to be strong interned by the Java Language Standard.",
      "parentUuid": "04f9d528_01be09e4",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e285620_176f22ce",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 1407,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-09-28T20:07:55Z",
      "side": 1,
      "message": "That matches the existing logic, we can probably relax this later to only call InternStrong for the strings in the app image that are interns. See FixupInternVisitor.",
      "parentUuid": "29c88eac_4149d399",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52a90c14_a906bd94",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 1407,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-01T13:00:28Z",
      "side": 1,
      "message": "I don\u0027t think JLS mentions app images and I don\u0027t see why we should intern app image strings that are not explicitly listed in the app image\u0027s intern table.",
      "parentUuid": "0e285620_176f22ce",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91593c43_d4f73112",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 1407,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-10-01T16:59:57Z",
      "side": 1,
      "message": "Not a regression, we can fix in a follow up.",
      "parentUuid": "52a90c14_a906bd94",
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a13425f4_bcd7e8ca",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "What do you mean?",
      "range": {
        "startLine": 68,
        "startChar": 5,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65ba6ae3_737c98e7",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "For most mirror::\u003cType\u003e* classes, functions with names like AsString or AsDexCache return the same pointer, but cast to the given type.  This function doesn\u0027t return a pointer to the same mirror::CompressedReference object but cast to a different type.  Instead, this function returns a pointer to the object that is referenced by this object.\n\nBecause this doesn\u0027t follow the naming convention of other As* methods I thought it would be a good idea to document that fact.",
      "parentUuid": "a13425f4_bcd7e8ca",
      "range": {
        "startLine": 68,
        "startChar": 5,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c34e41b8_b0c514c0",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-02T15:48:51Z",
      "side": 1,
      "message": "As the ObjectReference\u003c\u003e is not derived from mirror::Object, such interpretation does not make sense. You do have a point that the \"AsMirrorPtr()\" is a bad name. I\u0027d prefer Get() which would be more in line with the naming in Handle\u003c\u003e. But that\u0027s out of scope of this CL.\n\nIf you want to keep this comment, I\u0027d rather see it added to the TODO a few lines above.",
      "parentUuid": "65ba6ae3_737c98e7",
      "range": {
        "startLine": 68,
        "startChar": 5,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5df7dadc_9a3919d0",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-09-28T09:40:57Z",
      "side": 1,
      "message": "For this, you need to #include \"obj_ptr-inl.h\". Therefore we have the implementation of the Assign(ObjPtr\u003c\u003e) in object_reference-inl.h . You\u0027re just adding another, unnecessary, implementation here.",
      "range": {
        "startLine": 137,
        "startChar": 24,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bcb8f04_95e9117e",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:23:43Z",
      "side": 1,
      "message": "I had attempted to use the definition in object_referenc-inl.h before and it wasn\u0027t working.  After digging into this morning I figured out why.  Because HeapReference is a subclass of ObjectReference and there is a definition for HeapReference::Assign the compiler won\u0027t resolve template definitions for ObjectReference::Assign.  As such, we need this new definition.  It should, however, be in the object_reference-inl.h so I will move it there.",
      "parentUuid": "5df7dadc_9a3919d0",
      "range": {
        "startLine": 137,
        "startChar": 24,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef19d12_32fb6814",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-09-28T18:38:04Z",
      "side": 1,
      "message": "Wait, I retract some of my previous reasoning.  It looks like HeapReference isn\u0027t a subclass of ObjectReference.  They are un-related via the type system.  So the existing definition in object_reference-inl.h won\u0027t work because it is for a different type.",
      "parentUuid": "5bcb8f04_95e9117e",
      "range": {
        "startLine": 137,
        "startChar": 24,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff478079_824abadb",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-02T15:48:51Z",
      "side": 1,
      "message": "I see, so this was previously unimplemented. You still need to #include \"obj_ptr-inl.h\" (to avoid relying on all users to include it for you), so you should move this new implementation to the object_reference-inl.h and #include that where needed.",
      "parentUuid": "4ef19d12_32fb6814",
      "range": {
        "startLine": 137,
        "startChar": 24,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bf47357_18c11510",
        "filename": "runtime/mirror/object_reference.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2018-10-03T17:58:47Z",
      "side": 1,
      "message": "The implementation has already been moved to object_reference-inl.h.",
      "parentUuid": "ff478079_824abadb",
      "range": {
        "startLine": 137,
        "startChar": 24,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "bd93eca2508ebd4af25c0738266f690c9275cc6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}