{
  "comments": [
    {
      "key": {
        "uuid": "17780457_7e987c4a",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2018-11-19T13:57:07Z",
      "side": 1,
      "message": "Maybe it\u0027s better to have FORCE_INLINE_FOR_DEBUG macro? The code could be like:\n#if !defined(NDEBUG) \u0026\u0026 !defined(FORCE_INLINE_FOR_DEBUG)\n#define ALWAYS_INLINE\n#else\n#define ALWAYS_INLINE  __attribute__ ((always_inline))\n#endif",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccb7db53_2825ff48",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-19T14:02:17Z",
      "side": 1,
      "message": "Isn\u0027t that mostly the same as just removing the debug distinction and always having it on?  I don\u0027t want to be that intrusive.  (assuming we would enable that flag; otherwise there is no point)",
      "parentUuid": "17780457_7e987c4a",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1b405a7_b9875be2",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-11-19T14:03:48Z",
      "side": 1,
      "message": "From a naming point a view I think I\u0027d prefer ALWAYS_INLINE_EVEN_ON_DEBUG.",
      "parentUuid": "ccb7db53_2825ff48",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f595df1b_46914a64",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2018-11-19T14:35:38Z",
      "side": 1,
      "message": "\u003e Isn\u0027t that mostly the same as just removing the debug distinction and always having it on?\n\u003e I don\u0027t want to be that intrusive.  (assuming we would enable that flag; otherwise there is\n\u003e no point)\n\nI\u0027d like to have functions not to be inlined at O0. There is a macro __NO_INLINE__ which is set at O0 or for \u0027-fno-inline\u0027. Could it be used?",
      "parentUuid": "b1b405a7_b9875be2",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1e012b4_024e0150",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-28T17:42:05Z",
      "side": 1,
      "message": "ALWAYS_INLINE_EVEN_ON_DEBUG is pretty verbose... any other options?\nALWAYS_INLINE_IN_DEBUG? \nDEBUG_ALWAYS_INLINE?\nOBJPTR_INLINE?",
      "parentUuid": "f595df1b_46914a64",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad6d9760_477c9ef1",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-11-28T17:43:58Z",
      "side": 1,
      "message": "How about just putting the __attribute__ in obj_ptr and adding a comment.\n\n(This would be in line with some of rpl\u0027s work of removing old macros that were for C++11 compat originally, instead using keywords etc directly)",
      "parentUuid": "a1e012b4_024e0150",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e4c33fe_9fc4dcc6",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-28T17:47:22Z",
      "side": 1,
      "message": "Elaborate... Specifically, I was thinking of adding the OBJPTR_INLINE in locally obj_ptr.h and adding a comment.  Is that kind of what you mean?  Or just explicitly annotating methods in obj_ptr.h without macro?",
      "parentUuid": "ad6d9760_477c9ef1",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15c64d93_874d8ae5",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-11-28T17:49:59Z",
      "side": 1,
      "message": "I was thinking of going w/o macro, but a local macro is fine, too.",
      "parentUuid": "1e4c33fe_9fc4dcc6",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5be9a8d3_63d4aecd",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-28T17:55:28Z",
      "side": 1,
      "message": "I made the macro global in this CL thinking it might be used for other things...\nBut ObjPtr is really by far the biggest offender performance wise... I would be happy to make it (and only it) special.",
      "parentUuid": "1e4c33fe_9fc4dcc6",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aa3062f_d2d41d81",
        "filename": "libartbase/base/macros.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-11-28T17:59:44Z",
      "side": 1,
      "message": "Not clear what\u0027s best here. One may want to (with decent granularity) turn those things back off in debug builds for debugging. So maybe it\u0027s best to have them local, IMO.",
      "parentUuid": "5be9a8d3_63d4aecd",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "99e24c2f0b1768d55d8923cce624633462248a45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}