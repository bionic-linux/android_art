{
  "comments": [
    {
      "key": {
        "uuid": "50a4f909_3dd1a508",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-13T15:10:29Z",
      "side": 1,
      "message": "You\u0027re accumulating intermediate values in 4 different `float`s. That does not really fix the semantics. You need to do 4 consecutive additions here and the VecReduce is an identity, i.e. it can be removed from the graph.",
      "range": {
        "startLine": 1289,
        "startChar": 8,
        "endLine": 1289,
        "endChar": 33
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57f14a57_da53df01",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-11-13T15:44:49Z",
      "side": 1,
      "message": "dpps is computing dot prod of 4 float\u0027s and is being stored in low quad word of tmp. The dot prod of next four entities will be added with the value in the accumulator. So here the addition is happening sequentially. Dpps instruction also performs additions sequentially on the intermediate vector (which contains multiplications entities in two vectors).",
      "parentUuid": "50a4f909_3dd1a508",
      "range": {
        "startLine": 1289,
        "startChar": 8,
        "endLine": 1289,
        "endChar": 33
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "616f2a09_d13d4974",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-13T16:25:22Z",
      "side": 1,
      "message": "I had to read up on the DPPS/VDPPS. These instructions sum up the intermediate results and you\u0027re then adding that sum to the accumulator. That\u0027s not good enough, you really need to add the results to the accumulator one after another. (And the accumulator needs to be correctly initialized with the starting value from before the loop.)",
      "parentUuid": "57f14a57_da53df01",
      "range": {
        "startLine": 1289,
        "startChar": 8,
        "endLine": 1289,
        "endChar": 33
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68e80ce2_d6fb2880",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-11-14T09:05:32Z",
      "side": 1,
      "message": "Thanks Vladmir. For the test case, \n double[] a \u003d new double[1024];\n    for (int i \u003d 0; i !\u003d 1024; ++i) a[i] \u003d X;\n    double[] b \u003d new double[1024];\n    for (int i \u003d 0; i !\u003d 1024; ++i) b[i] \u003d ((i \u0026 1) \u003d\u003d 0) ? 1.0 : -1.0;\n    double result \u003d testDotProdSimpleDouble(a, b);\n\nIf the sum var  had an initial value z, sequential computation would add Inf+z, then subtract Inf, the final answer would be zero. But with dpps dot product of first 4 entities would be 0 and then 0\u003d z in accumulator will be z. \n\nSo I\u0027m not using dpps.  Accumulator is being correctly intialized with the starting value.",
      "parentUuid": "616f2a09_d13d4974",
      "range": {
        "startLine": 1289,
        "startChar": 8,
        "endLine": 1289,
        "endChar": 33
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "383becf3_c51c08f5",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-14T16:07:04Z",
      "side": 1,
      "message": "Why are you saying that you\u0027re \"not using dpps\"? The code says to use vdpps() or dpps() based on the AVX support flag. And both instructions are described in the manual as doing the same operation.\n\nAccording to the description of DPPS/VDDPS, you\u0027re doing\n\n  acc \u003d acc + (  ((left[0] * right[0]) + (left[1] * right[1]))\n               + ((left[2] * right[2]) + (left[3] * right[3])));\n\nbut we need\n\n  acc \u003d ((((acc + (left[0] * right[0]))\n                + (left[1] * right[1]))\n                + (left[2] * right[2]))\n                + (left[3] * right[3]));\n\nNote that for the test case you mention (which is using `double` rather than `float`), the intermediate result\n\n   (left[0] * right[0]) + (left[1] * right[1])\n\nalways yield zero, so it seems to correctly cancel out. However, it\u0027s not really correct. If you initialize the `sum` in `testDotProdSimpleDouble()` as X, the correct end value should be +Inf (after the first addition, it\u0027s +Inf and adding final values +X or -X has no effect) but by cancelling out the intermediate results, the vectorized loop will return the starting value X. (Or just change the test to initialize `b[1] \u003d 0.0`.)",
      "parentUuid": "68e80ce2_d6fb2880",
      "range": {
        "startLine": 1289,
        "startChar": 8,
        "endLine": 1289,
        "endChar": 33
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a5f5316_5cb03f70",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-11-15T03:39:01Z",
      "side": 1,
      "message": "Sorry for the confusion. I also wanted to convey the same. So in the newer patch set PS7, I have removed dpps and have done parallel multiplication using mulps. Then, I\u0027m adding values to the accumulator one by one as you have mentioned. ( acc \u003d ((((acc + (left[0] * right[0]))\n                + (left[1] * right[1]))\n                + (left[2] * right[2]))\n                + (left[3] * right[3]));)",
      "parentUuid": "383becf3_c51c08f5",
      "range": {
        "startLine": 1289,
        "startChar": 8,
        "endLine": 1289,
        "endChar": 33
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bcdada5_f198d1be",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-15T10:00:22Z",
      "side": 1,
      "message": "Oh, I see. Gerrit says that you \"Set Work In Progress\" and then uploaded PS7. I guess \"Work in Progress\" CLs do not send out emails about a new patch set as I didn\u0027t get one about the PS7. And then I missed it in Gerrit, so I thought we\u0027re still at the old PS6.",
      "parentUuid": "9a5f5316_5cb03f70",
      "range": {
        "startLine": 1289,
        "startChar": 8,
        "endLine": 1289,
        "endChar": 33
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce7e1ade_98aab40e",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 2233,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-13T15:10:29Z",
      "side": 1,
      "message": "I\u0027d prefer\n\n   condition\n       ? then_expression\n       : else_expression,\n\n(At the very least, there\u0027s a missing space before \u0027:\u0027.)",
      "range": {
        "startLine": 2232,
        "startChar": 12,
        "endLine": 2233,
        "endChar": 83
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef9a6fbf_40057286",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 2233,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-13T16:25:22Z",
      "side": 1,
      "message": "Done in PS6 (but see comment there).",
      "parentUuid": "ce7e1ade_98aab40e",
      "range": {
        "startLine": 2232,
        "startChar": 12,
        "endLine": 2233,
        "endChar": 83
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12352ae3_116d6277",
        "filename": "compiler/utils/x86_64/assembler_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3660,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-13T15:10:29Z",
      "side": 1,
      "message": "Parameter description.",
      "range": {
        "startLine": 3660,
        "startChar": 36,
        "endLine": 3660,
        "endChar": 41
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca1e2322_f81c5aad",
        "filename": "compiler/utils/x86_64/assembler_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3660,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-11-13T15:51:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12352ae3_116d6277",
      "range": {
        "startLine": 3660,
        "startChar": 36,
        "endLine": 3660,
        "endChar": 41
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5eeeb18_73bacdf8",
        "filename": "compiler/utils/x86_64/assembler_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3663,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-11-13T15:10:29Z",
      "side": 1,
      "message": "Parameter description.",
      "range": {
        "startLine": 3663,
        "startChar": 36,
        "endLine": 3663,
        "endChar": 41
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a550825_3b98056c",
        "filename": "compiler/utils/x86_64/assembler_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3663,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-11-13T15:51:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5eeeb18_73bacdf8",
      "range": {
        "startLine": 3663,
        "startChar": 36,
        "endLine": 3663,
        "endChar": 41
      },
      "revId": "d0b40f06c70d730f493af0a386990faeb3ea0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}