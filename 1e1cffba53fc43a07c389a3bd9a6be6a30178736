{
  "comments": [
    {
      "key": {
        "uuid": "3b73597a_134d8c8c",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1109,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-21T13:54:31Z",
      "side": 1,
      "message": "Do you need this for all return types, or just reference return types?",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1109,
        "endChar": 32
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c243e69a_fd6cf5f9",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1109,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-21T14:06:45Z",
      "side": 1,
      "message": "Before this, I was comparing the primitiveType field of the two Class objects. I replaced that comparison with a reference comparison of the Class objects to be more generic. I don\u0027t necessarily need it for primitive types. If you want, I can do the ClassLoad only for references and do a separate check for primitives.",
      "parentUuid": "3b73597a_134d8c8c",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1109,
        "endChar": 32
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b593264d_a9c6270f",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1109,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-21T14:17:13Z",
      "side": 1,
      "message": "I see - I suggest you keep the primitive check in the codegen (and you can decide statically whether it\u0027s a primitive check or a reference check you need to do, right?).",
      "parentUuid": "c243e69a_fd6cf5f9",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1109,
        "endChar": 32
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccad8853_3688510d",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1109,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-24T09:30:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b593264d_a9c6270f",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1109,
        "endChar": 32
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c1d7b03_2af90001",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1109,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-08-24T11:25:24Z",
      "side": 1,
      "message": "We might spend a few extra cycles when the vartype is primitive and does not match, but will then fallback to the runtime implementation.",
      "parentUuid": "c243e69a_fd6cf5f9",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1109,
        "endChar": 32
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c3343c1_c9664eda",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1109,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-08-24T11:43:47Z",
      "side": 1,
      "message": "ignore",
      "parentUuid": "2c1d7b03_2af90001",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1109,
        "endChar": 32
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f087a12_6ef4d1e9",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1120,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-08-21T14:51:03Z",
      "side": 1,
      "message": "Check for the specific implemented intrinsic and for the right return type. (We do not want to emit an unnecessary LoadClass.)",
      "range": {
        "startLine": 1120,
        "startChar": 6,
        "endLine": 1120,
        "endChar": 27
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "199b7549_7bfaaac4",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1120,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-24T09:30:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f087a12_6ef4d1e9",
      "range": {
        "startLine": 1120,
        "startChar": 6,
        "endLine": 1120,
        "endChar": 27
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b418b89_2fbf96fa",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1128,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-08-21T14:51:03Z",
      "side": 1,
      "message": "I would recommend SetRawInputAt() as this is a special input instead of an argument; it\u0027s beyond the GetNumberOfArguments().",
      "range": {
        "startLine": 1128,
        "startChar": 12,
        "endLine": 1128,
        "endChar": 25
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d2e23c_780a34f6",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1128,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-24T09:30:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b418b89_2fbf96fa",
      "range": {
        "startLine": 1128,
        "startChar": 12,
        "endLine": 1128,
        "endChar": 25
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55426601_c847d90c",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3148,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-21T13:54:31Z",
      "side": 1,
      "message": "What about interfaces?",
      "range": {
        "startLine": 3147,
        "startChar": 66,
        "endLine": 3148,
        "endChar": 38
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0df5bdf_0cdee45e",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3148,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-21T14:11:02Z",
      "side": 1,
      "message": "I didn\u0027t handle interfaces in this commit. We agreed to let the interfaces for later because they are not widely used and they seem a bit harder to implement.",
      "parentUuid": "55426601_c847d90c",
      "range": {
        "startLine": 3147,
        "startChar": 66,
        "endLine": 3148,
        "endChar": 38
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58d63b73_dafd5a22",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3148,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-21T14:17:13Z",
      "side": 1,
      "message": "How do you make sure this code doesn\u0027t get return types that are interfaces?",
      "parentUuid": "b0df5bdf_0cdee45e",
      "range": {
        "startLine": 3147,
        "startChar": 66,
        "endLine": 3148,
        "endChar": 38
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a94d818_5cbc0588",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3148,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-24T09:30:29Z",
      "side": 1,
      "message": "If the callsite return type is an interface, none of the classes from the hierarchy chain of the vartype will match. Therefore, the runtime will handle it. If the vartype is an interface, I think the super class of an interface class object will be null. I could not find any documentation to confirm this, but I wrote a small test to check it.",
      "parentUuid": "58d63b73_dafd5a22",
      "range": {
        "startLine": 3147,
        "startChar": 66,
        "endLine": 3148,
        "endChar": 38
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d89348a5_ba47fbf9",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3148,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-08-24T11:25:24Z",
      "side": 1,
      "message": "Cases:\n\nvartype is an interface, rtype is the same interface:\n\nvartype is an interface, rtype is another class or interface:\n\nvartype is not an interface, rtype is an interface.\n\nvartype is object.class, rtype is an interface.",
      "parentUuid": "58d63b73_dafd5a22",
      "range": {
        "startLine": 3147,
        "startChar": 66,
        "endLine": 3148,
        "endChar": 38
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6611be28_66299717",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3148,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-08-24T11:43:47Z",
      "side": 1,
      "message": "Ignore this comment, this was enumerating test cases. I don\u0027t know why it didn\u0027t show up in gerrit when opening a response for presubmit.",
      "parentUuid": "d89348a5_ba47fbf9",
      "range": {
        "startLine": 3147,
        "startChar": 66,
        "endLine": 3148,
        "endChar": 38
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6caa35f9_4196c878",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3153,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-08-21T14:51:03Z",
      "side": 1,
      "message": "You should have a look at the code generated for HCheckCast where we deliberately avoid the read barrier, letting the slow-path handle false negatives.\n\nOr you could check the invoke-\u003eInputAt(1)-\u003eAsLoadClass()-\u003eIsInBootImage() as boot image objects are not moveable, so it does not matter whether we compare a boot image reference to a from-space or a to-space reference.",
      "range": {
        "startLine": 3153,
        "startChar": 41,
        "endLine": 3153,
        "endChar": 67
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "901df173_08df995c",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3153,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-24T09:30:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6caa35f9_4196c878",
      "range": {
        "startLine": 3153,
        "startChar": 41,
        "endLine": 3153,
        "endChar": 67
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c547b668_bba4e3eb",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3167,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-08-21T14:51:03Z",
      "side": 1,
      "message": "Even if we keep the class comparison for primitive fields (Nicolas argued against that in InstructionBuilder), we should not walk the super-class chain for them.",
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeb03890_945ab050",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 3167,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-24T09:30:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c547b668_bba4e3eb",
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e741716_542bb570",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 4517,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-08-21T14:51:03Z",
      "side": 1,
      "message": "Use `number_of_other_inputs` just like HInvoke to differentiate between arguments and non-argument inputs.",
      "range": {
        "startLine": 4517,
        "startChar": 30,
        "endLine": 4517,
        "endChar": 55
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf94b4bb_7730ac12",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 4517,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-24T09:30:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e741716_542bb570",
      "range": {
        "startLine": 4517,
        "startChar": 30,
        "endLine": 4517,
        "endChar": 55
      },
      "revId": "1e1cffba53fc43a07c389a3bd9a6be6a30178736",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}