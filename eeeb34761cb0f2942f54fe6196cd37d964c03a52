{
  "comments": [
    {
      "key": {
        "uuid": "50984e8f_450fbc33",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 4
      },
      "lineNbr": 3878,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-04-22T15:16:49Z",
      "side": 1,
      "message": "You can skip this if !obj-\u003eCanBeNull() (obj \u003d instruction_-\u003eInAt(0).\n\nSo it should be smth like\nif (obj-\u003eCanBeNull() || instruction-\u003eMustDoNullCheck()).\n\nSo given that you need to do an || here I\u0027m thinking that  maybe \"MustDoNullCheck\" is not the best name either. I don\u0027t have a better naming suggestion though.\n\nThe alternative is to SetMustDoNullCheck() when the input cannot be null but I also don\u0027t know a good place to do it.",
      "range": {
        "startLine": 3878,
        "startChar": 19,
        "endLine": 3878,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9070061a_871488c7",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 4
      },
      "lineNbr": 3878,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-04-22T16:12:20Z",
      "side": 1,
      "message": "But the point is that you can not trust the input, so what Guillaume is doing looks right to me.",
      "parentUuid": "50984e8f_450fbc33",
      "range": {
        "startLine": 3878,
        "startChar": 19,
        "endLine": 3878,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b088aa37_70d2ee04",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 4
      },
      "lineNbr": 3878,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-04-22T16:17:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9070061a_871488c7",
      "range": {
        "startLine": 3878,
        "startChar": 19,
        "endLine": 3878,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90972654_6f7bed74",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 4
      },
      "lineNbr": 3878,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-04-22T17:05:23Z",
      "side": 1,
      "message": "You can\u0027t trust the input to have the most precise value, but it will never be incorrect. If it is, then we have a bug.\n\nI mentioned before that we could end up with patterns where the input of the HInstanceOf is a HNewInstance for example.\n\nIf we don\u0027t check for that or we don\u0027t propagate the info then we may miss on not-adding the check.",
      "parentUuid": "9070061a_871488c7",
      "range": {
        "startLine": 3878,
        "startChar": 19,
        "endLine": 3878,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0718a1d_2b9abd46",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 4
      },
      "lineNbr": 3878,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-04-22T17:21:13Z",
      "side": 1,
      "message": "Ah, I see. How about visiting InstanceOf and Checkcast in prepapre_for_register_allocation and update the flag as well?",
      "parentUuid": "90972654_6f7bed74",
      "range": {
        "startLine": 3878,
        "startChar": 19,
        "endLine": 3878,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90972654_8f7019d7",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 3352,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-04-22T15:16:49Z",
      "side": 1,
      "message": "Don\u0027t think it\u0027s needed. There are a lot of other stuff we have for codegen and we don\u0027t document them.",
      "range": {
        "startLine": 3352,
        "startChar": 2,
        "endLine": 3352,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "706b9231_6676b085",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 3352,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-04-22T16:12:20Z",
      "side": 1,
      "message": "I suggested it. It avoids confusing readers that might thing it\u0027s the same as Input(0)-\u003eCanBeNull.",
      "parentUuid": "90972654_8f7019d7",
      "range": {
        "startLine": 3352,
        "startChar": 2,
        "endLine": 3352,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50984e8f_8581449a",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 3352,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-04-22T17:05:23Z",
      "side": 1,
      "message": "oki, then it\u0027s good to add a short story why we need it.\n\ni.e.: Ideally the code generator would only have to look at the input to decide if it needs to null check the object. However, because we replace the inputs during the preparation for register allocator we loose the nullability information. This indicates whether or not the input of the instruction can be null.\n\nor something along these lines.",
      "parentUuid": "706b9231_6676b085",
      "range": {
        "startLine": 3352,
        "startChar": 2,
        "endLine": 3352,
        "endChar": 34
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90972654_affb15b9",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-04-22T15:16:49Z",
      "side": 1,
      "message": "you need to do the same for the null check, right?",
      "range": {
        "startLine": 45,
        "startChar": 35,
        "endLine": 45,
        "endChar": 49
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90972654_ef227d9c",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-04-22T16:17:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90972654_affb15b9",
      "range": {
        "startLine": 45,
        "startChar": 35,
        "endLine": 45,
        "endChar": 49
      },
      "revId": "eeeb34761cb0f2942f54fe6196cd37d964c03a52",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}