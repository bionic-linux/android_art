{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44d9561a_6d3777f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-11-18T14:29:04Z",
      "side": 1,
      "message": "Thanks Jiakai and Martin.",
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5519b2b7_c4d7a782",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-11-18T13:48:15Z",
      "side": 1,
      "message": "Why the copying here? I can\u0027t find that either art_gtest_user_module_names or art_gtest_module_names get mutated anywhere.\n\nIf you only want separate variables for different purposes then I suggest converting the lists to tuples, which are immutable. I think they work pretty much the same for iteration etc.",
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "810e25e9_cc351f1d",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-11-18T14:00:14Z",
      "side": 1,
      "message": "The copied lists are modified in the subsequent CL.",
      "parentUuid": "5519b2b7_c4d7a782",
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45dbc56f_d3fe7d3d",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-11-18T14:07:47Z",
      "side": 1,
      "message": "Ah right. If we can\u0027t build them additively then it\u0027s better to make them frozensets (rather than tuples) so that immutability is ensured.",
      "parentUuid": "810e25e9_cc351f1d",
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dd52118_e6d65926",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-11-18T14:29:04Z",
      "side": 1,
      "message": "IIRC, frozensets are unordered containers; I\u0027d like to preserve the order of insertion in those lists.",
      "parentUuid": "45dbc56f_d3fe7d3d",
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77903136_a37e2e32",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-11-18T15:04:30Z",
      "side": 1,
      "message": "Then tuples and a somewhat unsightly list comprehension is the way to go:\n\n  art_gtests_mainline_presubmit_module_names \u003d (\n    test for test in art_gtest_module_names if test not in (\n      ... list of exclusions ...\n    ))",
      "parentUuid": "4dd52118_e6d65926",
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8cc0db4_20760490",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-11-18T15:09:26Z",
      "side": 1,
      "message": "(Or more accurately\n\n  art_gtests_mainline_presubmit_module_names \u003d tuple([\n    test for test in art_gtest_module_names if test not in [\n      ... list of exclusions ...\n    ]])\n\nbut the point is the same.)",
      "parentUuid": "77903136_a37e2e32",
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95a519ad_f4010f5d",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-11-18T13:48:15Z",
      "side": 1,
      "message": "Here\u0027s another hardcoded figure. Iiuc the problem is that this script doesn\u0027t know how many gtests there actually are - it assumes art_gtest_module_names lists them all and hence it\u0027ll always be 100%.\n\nThat means this message may be misleading, doesn\u0027t it? When I read \"19 ART gtests (100%)\" I assume it\u0027s out of all gtests in ART. However I don\u0027t think we should device a way to plumb in the real total number of gtests here, but I think it\u0027d be better if the message didn\u0027t show percentages at all in this case. This applies to the other percentage you\u0027re changing above too.",
      "range": {
        "startLine": 871,
        "startChar": 52,
        "endLine": 871,
        "endChar": 55
      },
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4b4a3b4_1de83932",
        "filename": "test/utils/regen-test-files",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-11-18T14:29:04Z",
      "side": 1,
      "message": "Yeah, I agree. This feature of the script grew organically, but I think it\u0027s still useful. I plan to refactor it and make it better track the actual data.",
      "parentUuid": "95a519ad_f4010f5d",
      "range": {
        "startLine": 871,
        "startChar": 52,
        "endLine": 871,
        "endChar": 55
      },
      "revId": "0132b652de3c73ab8ff62593e896c328f6a5d081",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}