{
  "comments": [
    {
      "key": {
        "uuid": "e211990a_8b54f82a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2016-03-03T20:58:57Z",
      "side": 1,
      "message": "any stats on boot.oat or other code size?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 27
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82d1bd8e_cedef784",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-03T23:38:41Z",
      "side": 1,
      "message": "I don\u0027t expect a land-slide, since it only applies to methods that become a leaf method after being intrinsified, but I can make some measurements and report back.",
      "parentUuid": "e211990a_8b54f82a",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 27
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "620689d1_7dfccf5d",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 557,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-03-04T11:22:44Z",
      "side": 1,
      "message": "Could we have that logic somehow in NeedsCurrentMethod.",
      "range": {
        "startLine": 549,
        "startChar": 0,
        "endLine": 557,
        "endChar": 44
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2e32149_491bf0b8",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 557,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-04T16:06:23Z",
      "side": 1,
      "message": "I wish I could even put this in the intrinsic needs environment flag. However, we have the same problem. This instruction can either denote a method call (needs env) or, if implemented under the right features, an intrinsic (does not need env). It is related to the problem in the other file, see suggestions there.",
      "parentUuid": "620689d1_7dfccf5d",
      "range": {
        "startLine": 549,
        "startChar": 0,
        "endLine": 557,
        "endChar": 44
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82037dbe_61df0c1e",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-03-04T11:22:44Z",
      "side": 1,
      "message": "WillHaveCallFreeIntrinsicsCodeGen?",
      "range": {
        "startLine": 223,
        "startChar": 7,
        "endLine": 223,
        "endChar": 27
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a26ec178_65d5eabb",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-04T16:06:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82037dbe_61df0c1e",
      "range": {
        "startLine": 223,
        "startChar": 7,
        "endLine": 223,
        "endChar": 27
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "421d051a_3f236b91",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-03-04T11:22:44Z",
      "side": 1,
      "message": "This feels like abusing the intrinsic infrastructure :)\n\nIf that\u0027s how we need to do it please add big comments on the SetLocations(nullptr).\n\nThere\u0027s a lot of side effects going on in both HasIntrinsicsCodeGen and TryDispatch, and we need to be varey careful.",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 233,
        "endChar": 17
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2e32149_0951e852",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-04T16:06:23Z",
      "side": 1,
      "message": "I hate this probably even more than you ;-)\nI can offer you three alternatives, in order of increasing difficulty\n\n(1) Since we are just talking about x86, there is only a handful of unimplemented and conditionally implemented intrinsics. I can simply duplicate that logic here with a few statements. Advantage: cheap and quick. Disadvantage: no automated way of keeping this in sync (but I cannot help but notice, L205 and up do exactly that for another situation!).\n\n(2) I can extend the macro mechanism to also put UNIMPLEMENTED_IF_NOT_FEATURE and test that here. In fact, I have that working already with some macro magic. Advantage: always in sync. Disadvantage: bit of macro magic, programmers must remember to add macro.\n\n(3) Major refactoring to do intrinsic codegen first. Advantage: always in sync. Disadvantage: major refactoring.",
      "parentUuid": "421d051a_3f236b91",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 233,
        "endChar": 17
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17935119_3df6afb0",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-07T18:03:02Z",
      "side": 1,
      "message": "Nicolas, any preference going 1 2 or 3?\n(please say 1, please say 1, please say 1 :-)",
      "parentUuid": "a2e32149_0951e852",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 233,
        "endChar": 17
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2222d18a_65762668",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-03-07T18:12:11Z",
      "side": 1,
      "message": "1 sucks :) I actually prefer the current version. Any input from Andreas?",
      "parentUuid": "17935119_3df6afb0",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 233,
        "endChar": 17
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37af7563_9abd7dfb",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-03-08T03:27:45Z",
      "side": 1,
      "message": "I am torn. I understand Nicolas - keep this independent. But using the actual dispatch code here is just as ugly. Maybe hide this behind a function to make it look slightly better?",
      "parentUuid": "2222d18a_65762668",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 233,
        "endChar": 17
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37af7563_c02222e9",
        "filename": "compiler/optimizing/pc_relative_fixups_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-08T18:12:09Z",
      "side": 1,
      "message": "I have this all in WillHaveCallFreeIntrinsicsCodeGen(), which is a new function. Or do you want this to be part of the x86 loc builder?",
      "parentUuid": "37af7563_9abd7dfb",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 233,
        "endChar": 17
      },
      "revId": "bc9dfa87ce3a877d47f66f3eecbce14c487de9f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}