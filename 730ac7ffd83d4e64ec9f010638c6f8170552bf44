{
  "comments": [
    {
      "key": {
        "uuid": "29a37f81_4398866b",
        "filename": "compiler/optimizing/code_generator_arm.h",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-09-17T18:35:23Z",
      "side": 1,
      "message": "There\u0027s an issue here since these pairs fail the ExpectedPairLayout() test.\nHaving this exception is rather annoying and I can think of:\na) adding a flag to not check that a pair has the expected layout\nb) requesting a proper pair and work around it with various moves.\nc) ?\n\nI would go with a) since b) implies a lot of working.\nWhat do you think?",
      "range": {
        "startLine": 118,
        "startChar": 12,
        "endLine": 119,
        "endChar": 53
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4970b318_64d6aa30",
        "filename": "compiler/optimizing/code_generator_arm.h",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-18T07:47:25Z",
      "side": 1,
      "message": "Could you just change the ABI and make that pair aligned?",
      "parentUuid": "29a37f81_4398866b",
      "range": {
        "startLine": 118,
        "startChar": 12,
        "endLine": 119,
        "endChar": 53
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e932471b_214f4eab",
        "filename": "compiler/optimizing/code_generator_x86.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-09-17T18:35:23Z",
      "side": 1,
      "message": "For x86, we actually block this pair from being use. We don\u0027t fail because baseline checks if the individual regs are blocked and not the whole pair.",
      "range": {
        "startLine": 114,
        "startChar": 14,
        "endLine": 114,
        "endChar": 55
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e96fa7e4_bf495ff8",
        "filename": "compiler/optimizing/code_generator_x86.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-09-17T18:42:29Z",
      "side": 1,
      "message": "Yes, the register allocator assumes only certain pairs are legal, so that it matches ARM conventions.  Arbirtrary pairs aren\u0027t supported.\n\nI think you will need a GetSetLongValuePairHigh/Low to get the 2 registers.  Bit of a pain.",
      "parentUuid": "e932471b_214f4eab",
      "range": {
        "startLine": 114,
        "startChar": 14,
        "endLine": 114,
        "endChar": 55
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e99a4788_41cc529f",
        "filename": "compiler/optimizing/code_generator_x86.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-18T07:47:25Z",
      "side": 1,
      "message": "ditto: change ABI",
      "parentUuid": "e96fa7e4_bf495ff8",
      "range": {
        "startLine": 114,
        "startChar": 14,
        "endLine": 114,
        "endChar": 55
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89df0b23_645a1e1c",
        "filename": "compiler/optimizing/code_generator_x86.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-09-18T11:42:06Z",
      "side": 1,
      "message": "Rather than changing the ABI, which seems a bit drastic, can we have a reference parameter that would contain the high location and return the low location?  The caller could see if the high location is valid, and make a register pair to the high/low parts.  64 bit implementations would leave it invalid.",
      "parentUuid": "e99a4788_41cc529f",
      "range": {
        "startLine": 114,
        "startChar": 14,
        "endLine": 114,
        "endChar": 55
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89762b11_86748aca",
        "filename": "compiler/optimizing/code_generator_x86.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-18T12:40:18Z",
      "side": 1,
      "message": "Why drastic? We come up with the ABI we want. If it simplifies the compiler, there\u0027s no reason not changing it.",
      "parentUuid": "89df0b23_645a1e1c",
      "range": {
        "startLine": 114,
        "startChar": 14,
        "endLine": 114,
        "endChar": 55
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e5fa128_6a2697fe",
        "filename": "compiler/optimizing/code_generator_x86.h",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-09-23T22:38:05Z",
      "side": 1,
      "message": "Good suggestion. I will experiment with it.\nI don\u0027t think it\u0027s drastic. The annoying part is that I\u0027ll need to change Quick as well.",
      "parentUuid": "89762b11_86748aca",
      "range": {
        "startLine": 114,
        "startChar": 14,
        "endLine": 114,
        "endChar": 55
      },
      "revId": "730ac7ffd83d4e64ec9f010638c6f8170552bf44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}