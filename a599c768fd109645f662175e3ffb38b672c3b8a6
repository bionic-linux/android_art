{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b4410d8a_7fffce1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-26T22:09:53Z",
      "side": 1,
      "message": "The `startLocked` comment may need further discussion, but I\u0027ll give a +2 now in case it doesn\u0027t.",
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69a21229_cd8b091e",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-26T22:09:53Z",
      "side": 1,
      "message": "I don\u0027t recall how we can be sure that `mRunningJob` always is null at this point, but now with the new use for it, this code path needs a `cancelAnyLocked` call somewhere, doesn\u0027t it?",
      "range": {
        "startLine": 145,
        "startChar": 8,
        "endLine": 145,
        "endChar": 41
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "255efe31_a8972838",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-28T16:58:09Z",
      "side": 1,
      "message": "`onStartJob` is called by the job scheduler and is only called after the job is scheduled (i.e., after `onUpdateReady` is called). `onUpdateReady` has `cancelAnyLocked`.",
      "parentUuid": "69a21229_cd8b091e",
      "range": {
        "startLine": 145,
        "startChar": 8,
        "endLine": 145,
        "endChar": 41
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6213cdbe_1ce08121",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-29T11:41:03Z",
      "side": 1,
      "message": "Ok, so it should be safe as long as we\u0027re guaranteed that nothing precedes the call to `maybeCleanUpChrootAsyncForStartup`.\n\nIt\u0027s out of scope here, but I don\u0027t see how this deals with a call to `onUpdateReadyStartNow` between `onUpdateReady` and this method.",
      "parentUuid": "255efe31_a8972838",
      "range": {
        "startLine": 145,
        "startChar": 8,
        "endLine": 145,
        "endChar": 41
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21f6c764_74b7893c",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-26T22:09:53Z",
      "side": 1,
      "message": "Suggestion: \"... we don\u0027t want the cleanup to block the caller, so we set up an asynchronous job in mRunningJob with a cancellation signal that does nothing, to make other job requests wait until it\u0027s done.\"",
      "range": {
        "startLine": 220,
        "startChar": 11,
        "endLine": 221,
        "endChar": 38
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa6ca74d_e0922be6",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-28T16:58:09Z",
      "side": 1,
      "message": "I think it\u0027s quite obvious that we don\u0027t want to block the caller. What I mean here is that we don\u0027t want to block other things that use known threads / thread pools. Updated the comment to clarify this.",
      "parentUuid": "21f6c764_74b7893c",
      "range": {
        "startLine": 220,
        "startChar": 11,
        "endLine": 221,
        "endChar": 38
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31bcbd24_36eae8ec",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-29T11:41:03Z",
      "side": 1,
      "message": "But we use `mRunningJob` explicitly to block other dexopt jobs until this is done. That seems at odds with the claim to not block anything else, so please clarify this aspect, including that the cancellation signal intentionally has no effect so that `cancelAnyLocked` is forced to wait for completion.\n\n\"Any known thread / thread pool\" can be more concrete to avoid misunderstandings. I gather it refers to the common ForkJoinPool here, which by default is limited to the [number of CPUs](https://cs.android.com/android/platform/superproject/main/+/main:libcore/ojluni/src/main/java/java/util/concurrent/ForkJoinPool.java;l\u003d2567;drc\u003d19c03defe4df642ce996a81cdc387db7e6cc833d). So it\u0027s pretty small and I agree we shouldn\u0027t use it.\n\nFurthermore, that means it\u0027s only fit for CPU-bound tasks, and since the dexopt job thread spends almost all its time sitting in blocking binder calls I don\u0027t think we should use it in `startLocked` either. It\u0027s out of scope here, but what do you think about changing that to a different executor?",
      "parentUuid": "aa6ca74d_e0922be6",
      "range": {
        "startLine": 220,
        "startChar": 11,
        "endLine": 221,
        "endChar": 38
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb4d3f25_140fa7f8",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootDriver.java",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-26T22:09:53Z",
      "side": 1,
      "message": "\"leftover chroot\", to be slightly more precise?",
      "range": {
        "startLine": 173,
        "startChar": 40,
        "endLine": 173,
        "endChar": 46
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f411df3f_71f6c03c",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootDriver.java",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-28T16:58:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb4d3f25_140fa7f8",
      "range": {
        "startLine": 173,
        "startChar": 40,
        "endLine": 173,
        "endChar": 46
      },
      "revId": "a599c768fd109645f662175e3ffb38b672c3b8a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}