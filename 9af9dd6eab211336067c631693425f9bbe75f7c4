{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3e06e755_fc61b16b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:22Z",
      "side": 1,
      "message": "Thanks! Some comments below",
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe92cdd2_1a87cf0f",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 5801,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:22Z",
      "side": 1,
      "message": "No need to change it since the rest of the methods are the same but FYI we prefer ATTRIBUTE_UNUSED e.g. `HVecEqual* instruction ATTRIBUTE_UNUSED` in the function signature",
      "range": {
        "startLine": 5801,
        "startChar": 2,
        "endLine": 5801,
        "endChar": 22
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28b7184e_6523d704",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 1248,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:22Z",
      "side": 1,
      "message": "Not needed since you implemented them all right? If anyone adds more cases then they would get an error at compile time",
      "range": {
        "startLine": 1246,
        "startChar": 0,
        "endLine": 1248,
        "endChar": 12
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b05352fc_a79d65d0",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 1248,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-09-18T14:27:19Z",
      "side": 1,
      "message": "I don\u0027t think that removing this log would be expected as there are cases similar to this in other parts of the compiler such as [here](https://cs.android.com/android/platform/superproject/main/+/main:art/compiler/optimizing/code_generator_arm64.cc;drc\u003d1793c0985d065dd00c0c6ab16af5244f25c4080b;l\u003d122) which also implements all enumerations. I\u0027d like to keep this consistent with other cases if possible.\n\nI\u0027ve also improved the log message here to be a bit clearer.",
      "parentUuid": "28b7184e_6523d704",
      "range": {
        "startLine": 1246,
        "startChar": 0,
        "endLine": 1248,
        "endChar": 12
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8f8e0a9_2f620a36",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 1248,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-10-01T16:05:21Z",
      "side": 1,
      "message": "Ah, that\u0027s for the UNREACHABLE(). If you want to keep it, can you move the LOG(FATAL) + unreachable after the switch case, and remove `default`?\n\nIf we do that, we will get a compile time failure instead of the runtime one.",
      "parentUuid": "b05352fc_a79d65d0",
      "range": {
        "startLine": 1246,
        "startChar": 0,
        "endLine": 1248,
        "endChar": 12
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "468cce26_f669b0be",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 1248,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-10-14T13:47:53Z",
      "side": 1,
      "message": "Thanks, done.",
      "parentUuid": "a8f8e0a9_2f620a36",
      "range": {
        "startLine": 1246,
        "startChar": 0,
        "endLine": 1248,
        "endChar": 12
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dd665dc_300876a1",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1577,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:22Z",
      "side": 1,
      "message": "Line too long",
      "range": {
        "startLine": 1577,
        "startChar": 0,
        "endLine": 1577,
        "endChar": 104
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b672296_c76ea23e",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1577,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-09-18T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8dd665dc_300876a1",
      "range": {
        "startLine": 1577,
        "startChar": 0,
        "endLine": 1577,
        "endChar": 104
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecfaca12_34548811",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1621,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:22Z",
      "side": 1,
      "message": "Line too long",
      "range": {
        "startLine": 1621,
        "startChar": 0,
        "endLine": 1621,
        "endChar": 107
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0171ca08_532fe2a7",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1621,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-09-18T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecfaca12_34548811",
      "range": {
        "startLine": 1621,
        "startChar": 0,
        "endLine": 1621,
        "endChar": 107
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb0fe7d1_d57724a2",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1709,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:22Z",
      "side": 1,
      "message": "Line too long",
      "range": {
        "startLine": 1709,
        "startChar": 0,
        "endLine": 1709,
        "endChar": 101
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbcb7de3_30e7ef4b",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1709,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-09-18T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb0fe7d1_d57724a2",
      "range": {
        "startLine": 1709,
        "startChar": 0,
        "endLine": 1709,
        "endChar": 101
      },
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b294d95_dd1d5867",
        "filename": "test/661-checker-simd-cf-loops/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 393,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:22Z",
      "side": 1,
      "message": "For completeness, can you add the unsigned below/above cases too? Doing `Integer.compareUnsigned` with \u003d\u003d/!\u003d 1/-1 should do the trick I think",
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d672fab_f52d97de",
        "filename": "test/661-checker-simd-cf-loops/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 393,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-09-18T14:27:19Z",
      "side": 1,
      "message": "I don\u0027t think there is currently a way to make below/above conditions in if statements. `if (Integer.compareUnsigned \u003d\u003d 1)` creates a `HCompare` node which is used by a `HNotEqual` node. Having searched the compiler I also can\u0027t find anything that would generate e.g: a `HBelow` node from a Java condition.\n\nInstead I have added gtest\u0027s to test all combinations of conditions and types for both codegen and loop optimization.",
      "parentUuid": "4b294d95_dd1d5867",
      "revId": "9af9dd6eab211336067c631693425f9bbe75f7c4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}