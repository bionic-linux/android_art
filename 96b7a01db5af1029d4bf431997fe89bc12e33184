{
  "comments": [
    {
      "key": {
        "uuid": "d9045004_f94dd0aa",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 1010712
      },
      "writtenOn": "2014-07-10T17:16:50Z",
      "side": 1,
      "message": "rs_fr12 to rs_fr15 are still clobbered by an external C call.  Right?",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "993578d4_955e86cd",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T17:31:19Z",
      "side": 1,
      "message": "Yes, but we do not do external call directly, we do it using stubs which saves fr12-15, so we should be safe. Clobbering fr12-15 does not make any sense here because Clobber of promoted register does not make any sense (see Clobber implementation).",
      "parentUuid": "d9045004_f94dd0aa",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "598dc0f1_2081aa3f",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 1010712
      },
      "writtenOn": "2014-07-10T17:44:05Z",
      "side": 1,
      "message": "Ok.  ART callee-saved registers (that are caller-saved in a native ABI) should not be included here.  This is kind of tricky.  :-)",
      "parentUuid": "993578d4_955e86cd",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7988c4e2_c1800271",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 487,
      "author": {
        "id": 1010712
      },
      "writtenOn": "2014-07-10T17:16:50Z",
      "side": 1,
      "message": "Can rs_rBX be skipped?  It is a callee-saved register in the native 32-bit ABI.  Thanks!",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19298885_b18aba07",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 487,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T17:31:19Z",
      "side": 1,
      "message": "rbx is caller save in 32-bit API but callee save in 64-bit.",
      "parentUuid": "7988c4e2_c1800271",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7988c4e2_24a0dc8e",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 487,
      "author": {
        "id": 1010712
      },
      "writtenOn": "2014-07-10T17:44:05Z",
      "side": 1,
      "message": "rbx is a callee saved in both native 32-bit and 64-bit ABI.  We should be skip rbx always.  Thanks!",
      "parentUuid": "19298885_b18aba07",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "593f80b5_13006e99",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 487,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T18:05:22Z",
      "side": 1,
      "message": "Ok I see what you mean (native ABI). Unfortunately this function is also used in intrinsic before using register directly. To be able to use ebx safely we should clobber it here.",
      "parentUuid": "7988c4e2_24a0dc8e",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9045004_9c7c7afa",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 487,
      "author": {
        "id": 1010712
      },
      "writtenOn": "2014-07-10T18:14:29Z",
      "side": 1,
      "message": "Four cases: (native, art) \u003d (caller, caller), (callee, caller), (caller, callee), (callee, callee).  We only put registers that are (caller, caller), (callee, caller) in this function.  Right?  Thanks!",
      "parentUuid": "593f80b5_13006e99",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "593f80b5_f30baab5",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 487,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T18:24:36Z",
      "side": 1,
      "message": "I see it in this way. Probably it can be changed if we stop using this function for ART things (like intrinsic), then we probably can remove rbx from this list.",
      "parentUuid": "d9045004_9c7c7afa",
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7988c4e2_c46810be",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 898,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-10T17:26:19Z",
      "side": 1,
      "message": "This one will need better protection.\n\nThere is also one entrypoint in entrypoints_init that is directly a C call. You will have to route that through a stub.",
      "range": {
        "startLine": 898,
        "startChar": 0,
        "endLine": 898,
        "endChar": 36
      },
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "993578d4_55a81e61",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 898,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T17:31:19Z",
      "side": 1,
      "message": "you mean spill all callee saves (both gprs and fprs?)\n\nI will try to find which one.",
      "parentUuid": "7988c4e2_c46810be",
      "range": {
        "startLine": 898,
        "startChar": 0,
        "endLine": 898,
        "endChar": 36
      },
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "598dc0f1_c01b1e8d",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 898,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-10T17:40:26Z",
      "side": 1,
      "message": "For the exception case you want things to be \"intact.\" That worked before as we agreed with native calling convention (i.e., the C compiler will restore all callee-saves). But it\u0027s possible gcc/clang will use fp regs for spills or whatever, and not save/restore them. So you need to save and restore them now.\n\nThe entrypoint is easy to find. It\u0027s \"qpoints-\u003epInstanceofNonTrivial \u003d artIsAssignableFromCode;\" That\u0027s going directly from Quick to native code, potentially losing the \"callee-save\" FPs.",
      "parentUuid": "993578d4_55a81e61",
      "range": {
        "startLine": 898,
        "startChar": 0,
        "endLine": 898,
        "endChar": 36
      },
      "revId": "96b7a01db5af1029d4bf431997fe89bc12e33184",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}