{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "64984503_487c21eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-09-26T10:39:48Z",
      "side": 1,
      "message": "Thanks. I\u0027ll only +1 here since I don\u0027t have an opinion on the symbols getting exported.",
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ff4b2b1_58ad764b",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-26T13:19:54Z",
      "side": 1,
      "message": "`dex2oat` and `oatdump` code is explicitly using `libelffile`. Why are we hiding the dependency and exporting these symbols in `libart-compiler` where we\u0027re not using them at all?",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7f12c33_290bcb75",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-26T13:46:29Z",
      "side": 1,
      "message": "I think we use it in the compiler (e.g. the runtime/jit generates elf files in memory)",
      "parentUuid": "9ff4b2b1_58ad764b",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e868f95d_91517dd5",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-09-26T13:59:41Z",
      "side": 1,
      "message": "`libelffile` is used in `libart-compiler`:\nhttps://cs.android.com/android/platform/superproject/+/master:art/compiler/utils/assembler.h;l\u003d286\n\nI don\u0027t have a strong preference about how to link libelffile.\nWith exporting these syms size overhead in `libart-compiler` is ~0.1%, while dex2oat/oatdump size is slightly reduced without static linking to `libelffile`",
      "parentUuid": "d7f12c33_290bcb75",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6da06dab_61c989d7",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-26T14:49:53Z",
      "side": 1,
      "message": "`libelffile` is used by `libart-compiler` but `BufferedOutputStream` and `FileOutputStream` are not.\n\nI\u0027d prefer to keep the dependencies on `libelffile` explicit.\n\nAnd if we want to export these symbols for some reason, they should be exported in `libart` which does not have a map file yet.",
      "parentUuid": "e868f95d_91517dd5",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "261353f2_343d5974",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-09-26T15:15:28Z",
      "side": 1,
      "message": "This list here is quite explicit, I think. That we cannot register direct dependencies (i.e. from dex2oat and oatdump) on libraries statically linked into other dependencies is an old Soong limitation. We already have that problem in various places, and the only way to discover them (besides comments in the build files that may or may not be stale and/or incomplete) is to try to sever the exports. At least with map files like this one it gets spelled out in a way that\u0027s actually checked at build time.\n\nMaybe open a ticket to track moving libelffile to libart (or possibly libartbase?), and add a TODO comment about that here?",
      "parentUuid": "6da06dab_61c989d7",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e97a0950_02fbc747",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-26T15:44:54Z",
      "side": 1,
      "message": "I don\u0027t understand what Soong limitation you\u0027re talking about. Right now `dex2oat`, `libart-compiler` and `libart` list `libelffile` as a static libary.",
      "parentUuid": "261353f2_343d5974",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42dea04f_09ede326",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-09-26T17:36:24Z",
      "side": 1,
      "message": "dex2oat and oatdump didn\u0027t do that before https://r.android.com/2202495, which I commented on there. This CL is to address those comments since it was submitted before I got the chance to review it.\n\nThe Soong limitation is that `shared_libs`/`static_libs` are just technical directives that mean \"link with this dynamically/statically\", nothing else. In particular they don\u0027t necessarily model code dependencies between modules (e.g. that dex2oat depends on elffile). For dynamic dependencies `shared_libs` is usually close enough, but `static_libs` is not and we need to do shenanigans with `whole_static_libs` etc, which we already do in several places in ART, not just for libelffile. b/169779783 is related.\n\nBottom line, we shouldn\u0027t pay with unnecessary bloat coming from linking the same code statically multiple times, just to use `static_libs` for tracking code dependencies.",
      "parentUuid": "e97a0950_02fbc747",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f91a7815_2843bd44",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-27T07:43:49Z",
      "side": 1,
      "message": "As I see it, `shared_libs`/`static_libs` describe dependencies similarly to `#include`. I prefer explicit `#include` even though transitive includes work just fine.\n\nThere are different consequences for bloat in different places. The `libart-compiler` is essentially always in RAM while code bloat in `dex2oat` (and `oatdump`) is mostly just taking disk space. That\u0027s why I prefer moving code to `dex2oat`.\n\n(But the amount of code is small, so I\u0027m fine with this if you still want to export these symbols here after I\u0027ve laid out my arguments.)",
      "parentUuid": "42dea04f_09ede326",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11385a5a_d977b233",
        "filename": "compiler/libart-compiler.map",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-09-27T11:07:44Z",
      "side": 1,
      "message": "\u003e As I see it, shared_libs/static_libs describe dependencies similarly to #include. I prefer explicit #include even though transitive includes work just fine.\n\nI\u0027d like that too, but the difference from #include is that in particular `static_libs` has side effects as I\u0027ve mentioned, so it cannot simply be used that way.\n\n\u003e The libart-compiler is essentially always in RAM while code bloat in dex2oat (and oatdump) is mostly just taking disk space\n\nThat\u0027s a good argument. It\u0027s also a factor that BufferedOutputStream and FileOutputStream are small compared to the rest of libelffile (judging from the .o files, which admittedly is noisy since they aren\u0027t stripped), so ideally from that perspective only they should be linked into the binaries while the rest is referenced in the .so file. However that\u0027s probably too fiddly for the gain.\n\nThen I don\u0027t have a strong opinion, so feel free to keep this as-is (i.e. before this CL).",
      "parentUuid": "f91a7815_2843bd44",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "8e830b7edff2c5ee982a49f941983ef7b0b295c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}