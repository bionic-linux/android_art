{
  "comments": [
    {
      "key": {
        "uuid": "84253145_0811a98f",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 269,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T18:25:17Z",
      "side": 1,
      "message": "Would it perhaps be possible to add more details about what a \"transfer\" is?\n\nI\u0027m not sure that adding \"Transfer over a phi\" for a function called TransferPhi adds any more clarity on what this does (at the very least I\u0027m still lost :)).\n\nA layman\u0027s explanation or a reference to the section in a paper would be very helpful.",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e430ad80_2795b296",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 269,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-25T18:44:15Z",
      "side": 1,
      "message": "Ok, \"transfer\" is pretty standard in all sorts of compiler propagations over a lattice, but I will try to be more informative.",
      "parentUuid": "84253145_0811a98f",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "248c8586_f7068029",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 269,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T19:06:51Z",
      "side": 1,
      "message": "Well it might have a general name, but isn\u0027t the specific definition of transfers different from lattice to lattice?\n\nI think what I found hard to understand here is the induction-lattice-specific definition (not the generic term itself).",
      "parentUuid": "e430ad80_2795b296",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4700952_65e4211a",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 407,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T18:25:17Z",
      "side": 1,
      "message": "nit: loop_id",
      "range": {
        "startLine": 407,
        "startChar": 40,
        "endLine": 407,
        "endChar": 46
      },
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_3ebb875f",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 407,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-25T18:44:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4700952_65e4211a",
      "range": {
        "startLine": 407,
        "startChar": 40,
        "endLine": 407,
        "endChar": 46
      },
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4750d3f_65109a09",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 419,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T18:25:17Z",
      "side": 1,
      "message": "nit: loop_id",
      "range": {
        "startLine": 419,
        "startChar": 73,
        "endLine": 419,
        "endChar": 79
      },
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84253145_a883d510",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 419,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-25T18:44:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4750d3f_65109a09",
      "range": {
        "startLine": 419,
        "startChar": 73,
        "endLine": 419,
        "endChar": 79
      },
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4700952_85f6edc9",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 423,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T18:25:17Z",
      "side": 1,
      "message": "Channeling Nicolas regarding autos, it seems like it could be a bit hard to see what types are being used here. \n\nPerhaps if it-\u003esecond was brought out into a specific type, this might be slightly more readable?",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_7eb10f77",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 423,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-25T18:44:15Z",
      "side": 1,
      "message": "This is really the idiom for stl-flavored operations; you get used to it :-)\n\nIn any case, I tried to isolate most of the operations in just a few methods as possible",
      "parentUuid": "c4700952_85f6edc9",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485f957_4919fcaa",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 11
      },
      "lineNbr": 423,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T19:06:51Z",
      "side": 1,
      "message": "Of course feel free not to change anything, I was just anticipating that he will have this comment anyway when he gets back.\n\n----------\n\nI personally like to use auto too, it\u0027s just harder to follow because we have to look at the header to see that it-\u003esecond is actually an ArenaSafeMap\u003cint, InductionInfo*\u003e.\n\nAnd for that matter induction_ is a bit tricky too, induction_map_ more clearly implies what the type is.\n\nSome people would like to see all uses of auto gone, so it\u0027s nice to be able to keep a careful balance here of only using it when it\u0027s very obvious (or required for correctness).",
      "parentUuid": "a47f9520_7eb10f77",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e430ad80_6782caa5",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 11
      },
      "lineNbr": 83,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T18:25:17Z",
      "side": 1,
      "message": "I\u0027m not sure I understand why something like \"a * i - b\" is not itself a linear induction. Is there something special about the \"+\" operator?",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84253145_48fd6177",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 11
      },
      "lineNbr": 83,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-25T18:44:15Z",
      "side": 1,
      "message": "Ah, but those cases are covered as well (having -b\u0027 for the b term). Just think of this as the high school equation of a linear expression ax + b where a and b can by any constant, including negatives.",
      "parentUuid": "e430ad80_6782caa5",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4750d3f_b0c1e279",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 11
      },
      "lineNbr": 83,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T19:06:51Z",
      "side": 1,
      "message": "Ok, sure, but what about multiplication then?",
      "parentUuid": "84253145_48fd6177",
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "048f817d_8261ff7e",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 11
      },
      "lineNbr": 154,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-25T16:37:28Z",
      "side": 1,
      "message": "Nicolas,\nthis has std:map as basic implemetantion; however, as Igor mentioned earlier, no point in keeping the elements ordered, hashing is fine; any plans to provide this in the ArenaSafeXXX wrappers?",
      "range": {
        "startLine": 154,
        "startChar": 2,
        "endLine": 154,
        "endChar": 14
      },
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_bed1b7c7",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 11
      },
      "lineNbr": 156,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-25T18:25:17Z",
      "side": 1,
      "message": "If I\u0027m understanding correctly, these are all ints to save 4 bytes on x64, or is there some other reason to prefer instruction IDs over instruction themselves as the key?",
      "range": {
        "startLine": 156,
        "startChar": 15,
        "endLine": 156,
        "endChar": 18
      },
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a42a3512_2c3b5988",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 11
      },
      "lineNbr": 156,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-25T18:44:15Z",
      "side": 1,
      "message": "No, I can key on instructions just as easily. I looked around a bit and saw both cases happening. Don\u0027t feel very strongly either way (as I suspect we will optimize this data structure later anyway)",
      "parentUuid": "a47f9520_bed1b7c7",
      "range": {
        "startLine": 156,
        "startChar": 15,
        "endLine": 156,
        "endChar": 18
      },
      "revId": "8e74752f8d48a6eaa21bcbbe27f50fab10eec856",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}