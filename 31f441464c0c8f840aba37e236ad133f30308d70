{
  "comments": [
    {
      "key": {
        "uuid": "d9a7eb21_e5215a2f",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 7
      },
      "lineNbr": 1884,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-04-12T00:40:54Z",
      "side": 1,
      "message": "Just a note based on our in-person conversation, by calling SuspendAll() here in GarbageCollector::Run(), we miss the rosalloc verification and the pause time info will be slightly off.",
      "range": {
        "startLine": 1884,
        "startChar": 30,
        "endLine": 1884,
        "endChar": 40
      },
      "revId": "31f441464c0c8f840aba37e236ad133f30308d70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c51d3f5e_b409a0ba",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 7
      },
      "lineNbr": 1884,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-04-17T01:45:39Z",
      "side": 1,
      "message": "I think the reason for the semi space collector not to always call SemiSwapSpaces() during its pause is that we don\u0027t want to swap them for the zygote fork compaction case or the SS-CMS transition cases because the from-space or the to-space isn\u0027t necessarily a bump pointer space. Right?\n\nI think we\u0027d like to go back to the previous state of calling SuspendAll()/ResumeAll() in GarbageCollector::Run(), as opposed to here, for the reasons stated above.\n\nHow about adding a new param \"bool swap_semi_spaces\" in GarbageCollector::Run() to decide whether to call Heap::SwapSemiSpaces() within a pause? Then can we get rid of the SuspendAll/ResumeAll() here? The CMS collector can ignore that param.",
      "parentUuid": "d9a7eb21_e5215a2f",
      "range": {
        "startLine": 1884,
        "startChar": 30,
        "endLine": 1884,
        "endChar": 40
      },
      "revId": "31f441464c0c8f840aba37e236ad133f30308d70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99dbb3ac_2fcfcdf5",
        "filename": "runtime/gc/space/valgrind_malloc_space-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-04-11T22:27:18Z",
      "side": 1,
      "message": "I think it\u0027s best to be consistent with the arg order: can_mov_objects, starting, initial_size, as other places.",
      "range": {
        "startLine": 98,
        "startChar": 47,
        "endLine": 99,
        "endChar": 90
      },
      "revId": "31f441464c0c8f840aba37e236ad133f30308d70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a7eb21_3f7b6f04",
        "filename": "runtime/gc/space/valgrind_malloc_space-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-04-11T22:39:39Z",
      "side": 1,
      "message": "I\u0027ll clean up the args in another CL, there is redundancy in them.",
      "parentUuid": "99dbb3ac_2fcfcdf5",
      "revId": "31f441464c0c8f840aba37e236ad133f30308d70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}