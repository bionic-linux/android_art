{
  "comments": [
    {
      "key": {
        "uuid": "75ae0e67_0cc87b2e",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T15:03:11Z",
      "side": 1,
      "message": "output does not overlap?",
      "range": {
        "startLine": 1066,
        "startChar": 53,
        "endLine": 1066,
        "endChar": 57
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "354d76af_dc064db8",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-28T16:31:24Z",
      "side": 1,
      "message": "You mean, for doubles, right?  I have changed the code to something similar to what is done for longs.\n\nBTW we should update LocationsBuilderARM::VisitAdd() et al. as well.",
      "parentUuid": "75ae0e67_0cc87b2e",
      "range": {
        "startLine": 1066,
        "startChar": 53,
        "endLine": 1066,
        "endChar": 57
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "354d76af_9c81658c",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T16:34:49Z",
      "side": 1,
      "message": "It should be the same for doubles or floats.",
      "parentUuid": "354d76af_dc064db8",
      "range": {
        "startLine": 1066,
        "startChar": 53,
        "endLine": 1066,
        "endChar": 57
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_2f52092b",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-28T17:31:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "354d76af_9c81658c",
      "range": {
        "startLine": 1066,
        "startChar": 53,
        "endLine": 1066,
        "endChar": 57
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_c8532f64",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T15:03:11Z",
      "side": 1,
      "message": "Add a comment why the output does not overlap.",
      "range": {
        "startLine": 1001,
        "startChar": 34,
        "endLine": 1001,
        "endChar": 53
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "354d76af_fcea29af",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T15:03:25Z",
      "side": 1,
      "message": "does not -\u003e does",
      "parentUuid": "55abca56_c8532f64",
      "range": {
        "startLine": 1001,
        "startChar": 34,
        "endLine": 1001,
        "endChar": 53
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "354d76af_1c3a756f",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-28T16:31:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "354d76af_fcea29af",
      "range": {
        "startLine": 1001,
        "startChar": 34,
        "endLine": 1001,
        "endChar": 53
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "354d76af_9cede5cb",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 987,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T15:03:11Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 987,
        "startChar": 34,
        "endLine": 987,
        "endChar": 53
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_8bb531f5",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 987,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-28T16:31:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "354d76af_9cede5cb",
      "range": {
        "startLine": 987,
        "startChar": 34,
        "endLine": 987,
        "endChar": 53
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5396603_065e9e6a",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1019,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-10-28T15:18:02Z",
      "side": 1,
      "message": "// TODO: xorps out, [RIP:...] // value at RIP is 0x80 00 00 00",
      "range": {
        "startLine": 1016,
        "startChar": 0,
        "endLine": 1019,
        "endChar": 60
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_eba8659a",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1019,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-28T16:31:24Z",
      "side": 1,
      "message": "Done (I mean, to be done).\n\nWhat is the best way to load an immediate value in an xmm register?",
      "parentUuid": "b5396603_065e9e6a",
      "range": {
        "startLine": 1016,
        "startChar": 0,
        "endLine": 1019,
        "endChar": 60
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_e52f32a6",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1029,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-10-28T15:18:02Z",
      "side": 1,
      "message": "// TODO: xorpd out, [RIP:...] // value at RIP is 0x80 00 00 00 00 00 00 00",
      "range": {
        "startLine": 1026,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 60
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_ec063f8a",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1029,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-28T16:31:24Z",
      "side": 1,
      "message": "Ditto.",
      "parentUuid": "953e22e9_e52f32a6",
      "range": {
        "startLine": 1026,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 60
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_0843878e",
        "filename": "test/415-optimizing-arith-neg/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-10-28T15:07:54Z",
      "side": 1,
      "message": "I wonder if there\u0027s an easy way to have this and its friends in a base class so that we stop copy pasting it everywhere.\n\nAlso... this is the assert behavior, not the expect one (which will log but continue)",
      "range": {
        "startLine": 33,
        "startChar": 21,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_ac1047be",
        "filename": "test/415-optimizing-arith-neg/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-28T16:31:24Z",
      "side": 1,
      "message": "Yes, we probably need a Java-based test driver similar to what GTest offers.\n\nI\u0027ve renamed expectEquals to assertEquals.",
      "parentUuid": "55abca56_0843878e",
      "range": {
        "startLine": 33,
        "startChar": 21,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "6c7057dae14cda649a6e45233c0030398ae21da2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}