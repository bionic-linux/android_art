{
  "comments": [
    {
      "key": {
        "uuid": "98aec403_589c19cf",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2057,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-11-06T00:27:56Z",
      "side": 1,
      "message": "I believe it\u0027s not true for large objects. Regions corresponding to large objects are marked un-evac during young gen GC. Later, if the object is found dead, the corresponding regions will be cleared and hence added to cleared_bytes but not to from_bytes.",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2057,
        "endChar": 7
      },
      "revId": "6b4fbf6a10c6cf88e4b4f71000ed9e75b42da51a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da6d1f53_03270831",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2057,
      "author": {
        "id": 1384552
      },
      "writtenOn": "2018-11-06T13:21:42Z",
      "side": 1,
      "message": "Yes, you are right.",
      "parentUuid": "98aec403_589c19cf",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2057,
        "endChar": 7
      },
      "revId": "6b4fbf6a10c6cf88e4b4f71000ed9e75b42da51a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97994ae3_25f78404",
        "filename": "runtime/gc/collector/concurrent_copying.h",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-11-05T21:40:14Z",
      "side": 1,
      "message": "Is there a guarded by lock for these? Can you comment on why they don\u0027t need to be atomic?",
      "revId": "6b4fbf6a10c6cf88e4b4f71000ed9e75b42da51a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5ad999d_e9d3a4b9",
        "filename": "runtime/gc/collector/concurrent_copying.h",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 1384552
      },
      "writtenOn": "2018-11-06T13:21:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97994ae3_25f78404",
      "revId": "6b4fbf6a10c6cf88e4b4f71000ed9e75b42da51a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a71eb360_0a908dc8",
        "filename": "runtime/gc/collector/concurrent_copying.h",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-11-07T16:13:19Z",
      "side": 1,
      "message": "There should not be any concurrent accesses to these new members. For the sake of correctness in the future (should they be accessed concurrently), and as they are rarely accessed, we thought it would be fine to make them atomic.",
      "parentUuid": "c5ad999d_e9d3a4b9",
      "revId": "6b4fbf6a10c6cf88e4b4f71000ed9e75b42da51a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41ffdd95_6a1fcffb",
        "filename": "runtime/gc/collector/concurrent_copying.h",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-11-07T18:10:54Z",
      "side": 1,
      "message": "I disagree that even when we know that a variable is not accessed concurrently, we declare it atomic since it is accessed rarely and hence won\u0027t affect performance. Rather we should have a comment explaining in what context the variable is accessed, to which one may include explanation on why it\u0027s not atomic, if desired. Seeing a variable is atomic also gives instant indication that it\u0027s accessed concurrently, and hence may confuse the reader.",
      "parentUuid": "a71eb360_0a908dc8",
      "revId": "6b4fbf6a10c6cf88e4b4f71000ed9e75b42da51a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}