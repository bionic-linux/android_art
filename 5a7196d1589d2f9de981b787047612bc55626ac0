{
  "comments": [
    {
      "key": {
        "uuid": "54b43997_8e24f4a2",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3145,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-12T08:44:23Z",
      "side": 1,
      "message": "These are just `temp` in line 3072 and since we assert that the result type is kInt32 and then `AcquireSameSizeAs(out)`, the ASR uses W registers. Please adjust the comment. This also makes the comments in lines 3148-3151 unnecessary.",
      "range": {
        "startLine": 3145,
        "startChar": 57,
        "endLine": 3145,
        "endChar": 75
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71f0f4e5_9f1528c5",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3145,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-05-12T10:15:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54b43997_8e24f4a2",
      "range": {
        "startLine": 3145,
        "startChar": 57,
        "endLine": 3145,
        "endChar": 75
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "301146d1_e788ed3d",
        "filename": "test/411-checker-hdiv-hrem-const/src/DivTest.java",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-12T08:44:23Z",
      "side": 1,
      "message": "I would prefer `int`.",
      "range": {
        "startLine": 89,
        "startChar": 17,
        "endLine": 89,
        "endChar": 24
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6049c46_9429e42a",
        "filename": "test/411-checker-hdiv-hrem-const/src/DivTest.java",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-05-12T10:15:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "301146d1_e788ed3d",
      "range": {
        "startLine": 89,
        "startChar": 17,
        "endLine": 89,
        "endChar": 24
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f48dd6b_e01707cb",
        "filename": "test/411-checker-hdiv-hrem-const/src/DivTest.java",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-12T08:44:23Z",
      "side": 1,
      "message": "Btw., this could be shortened to\n\n   ADD xN, xN, xM, lsr #32\n   ASR xN, xN, #34",
      "range": {
        "startLine": 114,
        "startChar": 29,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ebfd27d_70a0b59d",
        "filename": "test/411-checker-hdiv-hrem-const/src/DivTest.java",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-05-12T10:15:41Z",
      "side": 1,
      "message": "Thank you for advice.\nThe problem with \u0027add_shift\u0027 is that its latency is 2 clocks.\nIn case of Cortex-A55, a pair of \u0027lsr\u0027 and \u0027add\u0027 can be faster because of dual issue, forwarding paths and two ALUs. I\u0027ll check.",
      "parentUuid": "0f48dd6b_e01707cb",
      "range": {
        "startLine": 114,
        "startChar": 29,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aa9c55f_a383be9a",
        "filename": "test/411-checker-hdiv-hrem-const/src/DivTest.java",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-12T10:25:36Z",
      "side": 1,
      "message": "As long as the performance is not worse, we should go for smaller size. But let\u0027s not do that in this CL.",
      "parentUuid": "8ebfd27d_70a0b59d",
      "range": {
        "startLine": 114,
        "startChar": 29,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfe33403_a5bf39de",
        "filename": "test/411-checker-hdiv-hrem-const/src/DivTest.java",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-05-13T12:05:33Z",
      "side": 1,
      "message": "Instead of \u0027ASR xN, xN, #34\u0027 it should be \u0027ASR wN, wN, #2\u0027. Otherwise it does not work. For example the result of -10 / 7 will be 0.\nDividend in a W1 register: 11111111111111111111111111110110.\nIt is as a X1 register: 0000000000000000000000000000000011111111111111111111111111110110.\nMagic*dividend in a X2 register: 000000000000000000000000000010001001001001001001001001001000010\nHigh 32 bits of (Magic*dividend): 00000000000000000000000000000100.\nThe result \u0027add x2, x1, x2, lsr 32\u0027: 0000000000000000000000000000000011111111111111111111111111111010\nThe result \u0027asr x2 x2, #34\u0027: 0\nThe result \u0027add x0, x2, x2, lsr #31\u0027: 0",
      "parentUuid": "0aa9c55f_a383be9a",
      "range": {
        "startLine": 114,
        "startChar": 29,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "362f2103_e966a559",
        "filename": "test/411-checker-hdiv-hrem-const/src/DivTest.java",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-13T12:18:33Z",
      "side": 1,
      "message": "Sorry, I made a mistake, it should have been LSL in the shifter operand:\n\n  ADD xN, xN, xM, lsl #32\n  ASR xN, xN, #34  // High 32 bits shall be ignored because it\u0027s typed as kInt32.\n\nwhere xN is the temp register. But it can be done with LSR as you suggested but I would have written it as\n\n  ADD xN, xM, xN, lsr #32  // Note: the xM and xN are exchanged compared to code above.\n  ASR wN, wN, #2  // Note: Working with W-registers here.",
      "parentUuid": "dfe33403_a5bf39de",
      "range": {
        "startLine": 114,
        "startChar": 29,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "5a7196d1589d2f9de981b787047612bc55626ac0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}