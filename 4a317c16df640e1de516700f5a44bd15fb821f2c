{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6e9f0c00_7573ce01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-22T02:31:04Z",
      "side": 1,
      "message": "please help envaluateï¼Œthanks",
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ab11052_ab89309c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T21:42:09Z",
      "side": 1,
      "message": "If I understand correctly, this is pre-merging large objects before \"Free\"ing them, which will again merge? This is presumably driven by the MADV_DONTNEED calls in FreeListSpace::Free?\n\nHow much time do we spend in SweepLargeObjects? I\u0027d like to be convinced that (a) this is worth the additional code, and (b) there\u0027s no better alternative. This seems a bit inelegant in two ways: We coalesce in two places. And this has no effect on Free() calls from elsewhere.\n\nI wonder whether having LargeObjectSpace::FreeList handle and coalesce the madvise calls, and having all LOS deallocations use that path, might be better than colaescing objects in two places.",
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bcf8f2a7_b67b2125",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-23T10:35:52Z",
      "side": 1,
      "message": "1. No, there is only one merge in LargeObjectSpace::FreeList, and then madvise is called in FreeListSpace::Free to release memory, and repeated merges will not occur.\n2. The running time of this function is roughly between a few tenths of a millisecond and a few milliseconds.",
      "parentUuid": "2ab11052_ab89309c",
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63715653_caa606c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-27T19:54:49Z",
      "side": 1,
      "message": "But FreeListSpace::Free itself merges blocks, after calling madvise. See e.g. https://cs.android.com/android/platform/superproject/+/master:art/runtime/gc/space/large_object_space.cc;l\u003d453-459.\n\nEspecially since I do not fully understand the reason the initial code sorted by size, this seems like a high risk change with very modest benefit?",
      "parentUuid": "bcf8f2a7_b67b2125",
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34242335_b6ffb4bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-28T14:47:29Z",
      "side": 1,
      "message": "The code you mentioned above is to merge the previous free chunk and the current chunk to be released, which is different from this patch and does not conflict.",
      "parentUuid": "63715653_caa606c6",
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ece933ba_47adfc74",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T21:42:09Z",
      "side": 1,
      "message": "I don\u0027t understand the impact of the deletion here. Why is this safe? How does it relate to the rest of the change?",
      "range": {
        "startLine": 353,
        "startChar": 2,
        "endLine": 354,
        "endChar": 56
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0adaf67e_10e36750",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-23T10:35:52Z",
      "side": 1,
      "message": "1. This is used to sort FreeBlocks, which type is std::set.\n2. The sorting can be done through the previous free memory size and address. It is not helpful to use its memory size, which will cause its size to be unable to be modified after sorting.",
      "parentUuid": "ece933ba_47adfc74",
      "range": {
        "startLine": 353,
        "startChar": 2,
        "endLine": 354,
        "endChar": 56
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4dcd543_41fa5a77",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-27T19:54:49Z",
      "side": 1,
      "message": "Thanks. I now understand. But doesn\u0027t this cause us to break up unnecessarily large chuncks, by no longer looking for the smallest block first, when we allocate? I don\u0027t understand the impact this has on the allocation algorithm, which worries me.",
      "parentUuid": "0adaf67e_10e36750",
      "range": {
        "startLine": 353,
        "startChar": 2,
        "endLine": 354,
        "endChar": 56
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25c266b5_01656072",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-28T14:47:29Z",
      "side": 1,
      "message": "Yes, when the previous free size is the same no longer look for the smallest block first.\n\nI also have this question, why should we prioritize finding the smaller size, when the previous free size is the same, what are the benefits of doing so?",
      "parentUuid": "c4dcd543_41fa5a77",
      "range": {
        "startLine": 353,
        "startChar": 2,
        "endLine": 354,
        "endChar": 56
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d609d1c1_df3561e3",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T21:42:09Z",
      "side": 1,
      "message": "Should presumably be std::less(a, b).",
      "range": {
        "startLine": 355,
        "startChar": 9,
        "endLine": 355,
        "endChar": 72
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1327602_48e4a0cc",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-23T10:35:52Z",
      "side": 1,
      "message": "Modified according to your comments.",
      "parentUuid": "d609d1c1_df3561e3",
      "range": {
        "startLine": 355,
        "startChar": 9,
        "endLine": 355,
        "endChar": 72
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0300b3af_3ff92b9d",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 425,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T21:42:09Z",
      "side": 1,
      "message": "How/where is this called?",
      "range": {
        "startLine": 425,
        "startChar": 7,
        "endLine": 425,
        "endChar": 31
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2012126d_4f221b67",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 425,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-23T10:35:52Z",
      "side": 1,
      "message": "This function is called in LargeObjectSpace::SweepCallback, here is just an override of this function.",
      "parentUuid": "0300b3af_3ff92b9d",
      "range": {
        "startLine": 425,
        "startChar": 7,
        "endLine": 425,
        "endChar": 31
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf19758_67b2446e",
        "filename": "runtime/gc/space/large_object_space.h",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-11-22T21:42:09Z",
      "side": 1,
      "message": "We now seem to greatly prefer these to be in address order? That should be dcumented someplace.",
      "range": {
        "startLine": 197,
        "startChar": 49,
        "endLine": 197,
        "endChar": 70
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50081711_e7dcb260",
        "filename": "runtime/gc/space/large_object_space.h",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1963346
      },
      "writtenOn": "2022-11-23T10:35:52Z",
      "side": 1,
      "message": "Do you mean we need to add extra annotation?",
      "parentUuid": "3cf19758_67b2446e",
      "range": {
        "startLine": 197,
        "startChar": 49,
        "endLine": 197,
        "endChar": 70
      },
      "revId": "4a317c16df640e1de516700f5a44bd15fb821f2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}