{
  "comments": [
    {
      "key": {
        "uuid": "ad424835_e1b0685c",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 4
      },
      "lineNbr": 379,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-08T18:11:01Z",
      "side": 1,
      "message": "I am still not sure I like the heavy code dup. Since zero trip count loops are never interesting, let\u0027s at least make the body of this method\n\nreturn IsFinite(...) \u0026\u0026 tc \u003e 0;\n\nif you like the convenience of having the method.",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "610a11c7_226faa47",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 4
      },
      "lineNbr": 379,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-11-09T19:53:04Z",
      "side": 1,
      "message": "Agree. Have refactored that in the new PS: what do you think now?",
      "parentUuid": "ad424835_e1b0685c",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e63a97c1_a6a48f6d",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 4
      },
      "lineNbr": 681,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-11-08T14:08:13Z",
      "side": 1,
      "message": "There is a problem how ClinitCheck interacts with Unrolling, GVN and prepare_for_register_allocation; am going to look there in another CL.",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e92ce06c_beb9fd82",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 4
      },
      "lineNbr": 681,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-08T18:11:01Z",
      "side": 1,
      "message": "What problem? Should we worry about that?",
      "parentUuid": "e63a97c1_a6a48f6d",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4355e059_c9352962",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 4
      },
      "lineNbr": 681,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-11-09T19:53:04Z",
      "side": 1,
      "message": "I need to investigate this more but here is an example sequence in the loop body to reproduce the issue (we need to enable HInvokes for unrolling):\n\nl112  LoadClass\nl113  ClinitCheck [l112]\nv114  InvokeStaticOrDirect [l108,l110,i129,l113]\n\nAfter unrolling GVN replaces the the copy-ClinitCheck by the original (which dominates the copy). Then PrepareForRegisterAllocation::CanMoveClinitCheck tries to check whether ClinitCheck and Invoke come from the same dex instruction (e.g. looking at the dex_pc). The copied instruction share the same DEX_PC with the original so it tries to pair up not an original ClinitCheck with an original Invoke but an original with a copy.",
      "parentUuid": "e92ce06c_beb9fd82",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f30f6f0e_7a1237ec",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 4
      },
      "lineNbr": 681,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-10T11:36:10Z",
      "side": 1,
      "message": "Semantically, I think this would look fine though. What issues do you foresee?",
      "parentUuid": "4355e059_c9352962",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33361b41_b398374d",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 4
      },
      "lineNbr": 681,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-11-10T15:14:27Z",
      "side": 1,
      "message": "In PrepareForRegisterAllocation there is a DCHECK that will fire if we enable loop unrolling for loops with ClinitCheck:\n\n  // In debug mode, check that we have not inserted a throwing instruction\n  // or an instruction with side effects between input and user.\n  if (kIsDebugBuild) {\n    for (HInstruction* between \u003d input-\u003eGetNext(); between !\u003d user; between \u003d between-\u003eGetNext()) {\n      CHECK(between !\u003d nullptr);  // User must be after input in the same block.\n      CHECK(!between-\u003eCanThrow());  // THIS ONE FAILS\n      CHECK(!between-\u003eHasSideEffects());\n    }\n  }\n\nwhere between is an original HInvoke.",
      "parentUuid": "f30f6f0e_7a1237ec",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11d42311_157a2b10",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 4
      },
      "lineNbr": 681,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-10T15:29:43Z",
      "side": 1,
      "message": "Ah ok. Looks like that DCHECK could be adjusted?",
      "parentUuid": "33361b41_b398374d",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf9d14de_f211b918",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 4
      },
      "lineNbr": 681,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-11-10T15:50:40Z",
      "side": 1,
      "message": "Yep; my intent was to process that in a separate CL and not to block Loop Unrolling.",
      "parentUuid": "11d42311_157a2b10",
      "revId": "bc5983391e44a500cce0ca4ea1c0d24ecdb088a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}