{
  "comments": [
    {
      "key": {
        "uuid": "a40a365b_aff21962",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "nit: wouldn\u0027t expect an \"IsXXX\" named function to have any side-effects, perhaps \"MaybeGetInt\" instead?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e486eed4_80b3cb43",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Why not also handle long?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "247566b9_530cc4b6",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-02T18:04:49Z",
      "side": 1,
      "message": "Pointer comparison? Please avoid, it will cause non deterministic runs.",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6492fe15_72245ef2",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:06:49Z",
      "side": 1,
      "message": "Well, ideally I would like to have a hash map, and not keep any order. Do we have any plans to support these with the Arena wrapper. E.g. ArenaSafeHashMap?",
      "parentUuid": "247566b9_530cc4b6",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84c53226_2e0be79d",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-02T18:08:32Z",
      "side": 1,
      "message": "Why ideally?\n\nWe really want to have the order be the same across runs. It makes debugging much simpler.",
      "parentUuid": "6492fe15_72245ef2",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84f1b2a4_0e888be8",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:11:58Z",
      "side": 1,
      "message": "Well, this is a mapping of instructions to induction information. There is no point in keeping these ordered at all and, in fact, it adds runtime (O(log n) vz O(1) per insertion).\n\nCan you enlighten me on: how do you use the order during debugging, and, what do you suggest I use for comparisons here then (I could order on GetId(), but then we are more or less back where I started)....",
      "parentUuid": "84c53226_2e0be79d",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84f1b2a4_0e0b6bef",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:26:52Z",
      "side": 1,
      "message": "Also, e.g. graph visualizer code (one that uses similar map) does exactly the same:\n\n   instruction_intervals_(std::less\u003cconst HInstruction*\u003e(), allocator-\u003eAdapter())",
      "parentUuid": "84f1b2a4_0e888be8",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84529221_d4e07e00",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T20:00:40Z",
      "side": 1,
      "message": "One more comment on this after talking with Andreas what you may have meant. Note that nothing in my code relies on the order of the map, I just do lookup/inserts, never iteration in order. So the only non-determinism may be in how the data appears in memory, not something that should matter much, unless you are a very hard core debugger :-)",
      "parentUuid": "84f1b2a4_0e0b6bef",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0484e2ca_a23293bd",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 267,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Why size -1?",
      "range": {
        "startLine": 267,
        "startChar": 30,
        "endLine": 267,
        "endChar": 39
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84f1b2a4_cec323be",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 274,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Why \u003d2?",
      "range": {
        "startLine": 274,
        "startChar": 21,
        "endLine": 274,
        "endChar": 26
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40a365b_8fef557a",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 274,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Why \u003d size?",
      "range": {
        "startLine": 274,
        "startChar": 30,
        "endLine": 274,
        "endChar": 36
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84529221_3205a5d7",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 286,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Not sure what I understand what this is supposed to be doing, would it make sense to add more comments?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64ecbece_50d51220",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 309,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "nit: less indentation on the whole function if we return nullptr right away when either a or b is null (since it looks like none of the other code falls-through)",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0484e2ca_2245230d",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 341,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "see 309",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0484e2ca_a2805381",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 358,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Not sure if this is right?  According to JLS bit shifting should use 0x1f mask , so the original constant value range shouldn\u0027t matter because once its masked with 0x1f it will always be in range of [0,31]\n\nSee JLS 15.19 or this StackOverflow post\nhttp://stackoverflow.com/a/10516830",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64ecbece_6d8b1556",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 51,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "What happened to None and Monotonic?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40a365b_2fdf49cf",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 103,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Does this need any DCHECKs for null a/b or is null ok?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6492fe15_52db6206",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Does this need any DCHECKs for null f, or is null ok?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40a365b_6fe95178",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 111,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "Does this need any DCHECKs for null a/b, or is null ok?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40a365b_4fee0d82",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 139,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "What does first mean?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0484e2ca_c2131721",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 140,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-09-02T19:00:00Z",
      "side": 1,
      "message": "What does a period mean?",
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4d42ed5_74ec66ca",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-02T18:04:49Z",
      "side": 1,
      "message": ", -\u003e .",
      "range": {
        "startLine": 150,
        "startChar": 75,
        "endLine": 150,
        "endChar": 76
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64ecbece_eda0a561",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:06:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4d42ed5_74ec66ca",
      "range": {
        "startLine": 150,
        "startChar": 75,
        "endLine": 150,
        "endChar": 76
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}