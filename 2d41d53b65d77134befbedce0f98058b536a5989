{
  "comments": [
    {
      "key": {
        "uuid": "247566b9_530cc4b6",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-02T18:04:49Z",
      "side": 1,
      "message": "Pointer comparison? Please avoid, it will cause non deterministic runs.",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6492fe15_72245ef2",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:06:49Z",
      "side": 1,
      "message": "Well, ideally I would like to have a hash map, and not keep any order. Do we have any plans to support these with the Arena wrapper. E.g. ArenaSafeHashMap?",
      "parentUuid": "247566b9_530cc4b6",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84c53226_2e0be79d",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-02T18:08:32Z",
      "side": 1,
      "message": "Why ideally?\n\nWe really want to have the order be the same across runs. It makes debugging much simpler.",
      "parentUuid": "6492fe15_72245ef2",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84f1b2a4_0e888be8",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:11:58Z",
      "side": 1,
      "message": "Well, this is a mapping of instructions to induction information. There is no point in keeping these ordered at all and, in fact, it adds runtime (O(log n) vz O(1) per insertion).\n\nCan you enlighten me on: how do you use the order during debugging, and, what do you suggest I use for comparisons here then (I could order on GetId(), but then we are more or less back where I started)....",
      "parentUuid": "84c53226_2e0be79d",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84f1b2a4_0e0b6bef",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:26:52Z",
      "side": 1,
      "message": "Also, e.g. graph visualizer code (one that uses similar map) does exactly the same:\n\n   instruction_intervals_(std::less\u003cconst HInstruction*\u003e(), allocator-\u003eAdapter())",
      "parentUuid": "84f1b2a4_0e888be8",
      "range": {
        "startLine": 78,
        "startChar": 20,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4d42ed5_74ec66ca",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-02T18:04:49Z",
      "side": 1,
      "message": ", -\u003e .",
      "range": {
        "startLine": 150,
        "startChar": 75,
        "endLine": 150,
        "endChar": 76
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64ecbece_eda0a561",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-02T18:06:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4d42ed5_74ec66ca",
      "range": {
        "startLine": 150,
        "startChar": 75,
        "endLine": 150,
        "endChar": 76
      },
      "revId": "2d41d53b65d77134befbedce0f98058b536a5989",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}