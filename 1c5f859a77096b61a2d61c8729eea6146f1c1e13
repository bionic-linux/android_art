{
  "comments": [
    {
      "key": {
        "uuid": "a41eb557_4e37570a",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 965,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-08-12T22:03:38Z",
      "side": 1,
      "message": "So could you make this a helper in DexFile ?",
      "range": {
        "startLine": 965,
        "startChar": 15,
        "endLine": 965,
        "endChar": 78
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "446259ef_6967c546",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 965,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-13T11:20:51Z",
      "side": 1,
      "message": "Does this logic belong to the DexFile? The DexFile is really the same if the inode is the same (or the memory address is the same for memory-based DexFiles). And yet, for the compiler even that may not be enough.",
      "parentUuid": "a41eb557_4e37570a",
      "range": {
        "startLine": 965,
        "startChar": 15,
        "endLine": 965,
        "endChar": 78
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4672930_751bc878",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 965,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-08-14T11:10:15Z",
      "side": 1,
      "message": "Why would an Equals method not belong to the DexFile?",
      "parentUuid": "446259ef_6967c546",
      "range": {
        "startLine": 965,
        "startChar": 15,
        "endLine": 965,
        "endChar": 78
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0456a145_97aca474",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 965,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T11:53:52Z",
      "side": 1,
      "message": "Because the definition we need is compiler specific. I wouldn\u0027t want to see a comment \"compiler needs it this way\" in the DexFile.",
      "parentUuid": "c4672930_751bc878",
      "range": {
        "startLine": 965,
        "startChar": 15,
        "endLine": 965,
        "endChar": 78
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e46c2d17_f66b6090",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 965,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-08-14T12:34:21Z",
      "side": 1,
      "message": "Oh I see. What would be the definition for other uses than the compiler?",
      "parentUuid": "0456a145_97aca474",
      "range": {
        "startLine": 965,
        "startChar": 15,
        "endLine": 965,
        "endChar": 78
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "040b0162_8fe3d5c3",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 965,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T14:45:51Z",
      "side": 1,
      "message": "ClassLinker::FindDexCache() also tries to match location if pointer comparison doesn\u0027t yield a result. I don\u0027t know what use cases does it target.",
      "parentUuid": "e46c2d17_f66b6090",
      "range": {
        "startLine": 965,
        "startChar": 15,
        "endLine": 965,
        "endChar": 78
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64111d42_293c19ea",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 1029,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-08-12T22:03:38Z",
      "side": 1,
      "message": "How about we move all this logic to CodeGenerator? And just pass method_ptr/code_ptr to HInvokeStaticOrDirect. This would also nicely move all the new enums intriduced in nodes.h to CodeGenerator.\n\nCompile-time point in case: there\u0027s no need to do all this logic if the invoke is actually dead code. I know the compiler driver is also doing it, but that\u0027s also something I\u0027d like to see cleaned up.",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 3
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "240ba519_9857f5a0",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 1029,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-08-13T10:56:47Z",
      "side": 1,
      "message": "Sounds like a good suggestion to me.",
      "parentUuid": "64111d42_293c19ea",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 3
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "240ba519_d8a68d44",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 1029,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-13T11:20:51Z",
      "side": 1,
      "message": "Let\u0027s leave this to a refactoring CL, it will need a lot of thought.",
      "parentUuid": "240ba519_9857f5a0",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 3
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4672930_55204ca1",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 1029,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-08-14T11:10:15Z",
      "side": 1,
      "message": "Why do you think it will need some thought?\n\nIf we agree it\u0027s better, I\u0027d rather do this now than in a refactoring CL, which is often delayed because of more (valid) importants things to do.",
      "parentUuid": "240ba519_d8a68d44",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 3
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "040b0162_af82190b",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 1029,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T11:53:52Z",
      "side": 1,
      "message": "I don\u0027t want to store the magic values for direct_code and direct_method returned by the ComputeInvokeInfo(). I want to process them right here. It logically belongs together and postponing the processing while keeping the ComputeInvokeInfo() here just spreads the chaos around instead of keeping it localized.\n\nAnd you\u0027re not thinking far enough. For example, this information could be used by inliner; if we actually use kDexCachePcRelative, we can relax the same_dex_file check. So, if we push this to the CodeGenerator now, we may need to pull it back later.\n\nThis CL should be considered a first step, not the last one. I have the refactoring on my roadmap because there are a lot of things that the CompilerDriver should do better.",
      "parentUuid": "c4672930_55204ca1",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 3
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4f18da3_ee0fffe8",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 1029,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-08-14T12:34:21Z",
      "side": 1,
      "message": "There\u0027s sort of already stored with the method_load_data.....\n\nAlso, why would it affect inlining? The only problem with inlining is being able to recover the call stack, which we cannot do because we rely on the dex_method_index of the outermost method\u0027s dex_file. So I don\u0027t see why a different call implementation (relative/direct/...) would affect it?",
      "parentUuid": "040b0162_af82190b",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 3
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ec89d0_ad34dde3",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 18
      },
      "lineNbr": 1029,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T14:45:51Z",
      "side": 1,
      "message": "method_load_data_ is a union of string_init_offset, method_address and dex_cache_offset, distinguished by method_load_kind_. It no longer needs to be decoded to find out what to do with itm, the decoding has already happened.\n\nInliner checks\n\n  if (!same_dex_file \u0026\u0026 current-\u003eNeedsDexCache()) { ... }\n\nIf we can access a different dex cache with a PC-relative load, we don\u0027t need the same dex file.",
      "parentUuid": "e4f18da3_ee0fffe8",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 1029,
        "endChar": 3
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64367de0_fbaf0367",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 18
      },
      "lineNbr": 368,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-08-12T22:03:38Z",
      "side": 1,
      "message": "Because Label is not used by vixl, we are templatizing the CommonGetLabel method in this file. Could we do the same here?",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 368,
        "endChar": 4
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47a35a8_74c52807",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 18
      },
      "lineNbr": 368,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-13T11:20:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64367de0_fbaf0367",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 368,
        "endChar": 4
      },
      "revId": "1c5f859a77096b61a2d61c8729eea6146f1c1e13",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}