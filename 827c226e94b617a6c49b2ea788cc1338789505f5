{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fe865332_da6ad4f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-05-26T09:03:58Z",
      "side": 1,
      "message": "This is now ready to review, Lokesh, Hans, PTAL.",
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6fe62cf_ca8d5bf3",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1257,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T02:59:27Z",
      "side": 1,
      "message": "I\u0027m not sure whether std::fill or memset or ... generates the best code, or whether they all generate identical code. Perhaps introduce a \"clear memory for reuse in distant future\" function, so that we can easily experiment?",
      "range": {
        "startLine": 1257,
        "startChar": 4,
        "endLine": 1257,
        "endChar": 13
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70a80281_939a2365",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1257,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T10:41:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6fe62cf_ca8d5bf3",
      "range": {
        "startLine": 1257,
        "startChar": 4,
        "endLine": 1257,
        "endChar": 13
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba01aa5b_92086bc8",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1265,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-05-27T00:31:55Z",
      "side": 1,
      "message": "Lokesh and I discussed the trade-offs here some more. I would expect this to improve response, since we\u0027re now clearing in the GC thread. OTOH, we\u0027re clearing at worse time for cache performance purposes. We may not have touched the page in a while, and we\u0027re probably not going to use ut anytime soon. So this is probably a bettery regression? But this may be a smaller effect than I had thought. See https://developer.arm.com/documentation/100403/0200/lto1473834732563.",
      "range": {
        "startLine": 1265,
        "startChar": 6,
        "endLine": 1265,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bee887e9_c9f17d90",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1265,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-05-30T19:16:03Z",
      "side": 1,
      "message": "Thanks for sharing the link. Good to know that the cache isn\u0027t polluted unnecessarily. There are few other performance implications, which are probably non significant:\n\n1) The `garbage-only` pages are likely to be swapped-out. Zeroing before MADV_FREE unnecessarily brings them in memory, further increasing memory use.\n2) The `MADV_FREE\u0027ed` pages if and when are eventually freed by `kswapd`, they will be zeroed again during page-fault. The MADV_FREE\u0027ed pages are freed first by kswapd.\n3) The overhead (without zeroing) of `MADV_FREE+kswapd` vs. `MADV_DONTNEED`. The former is definitely higher, not sure about the quantum though. Maybe someone in kernel team would know.",
      "parentUuid": "ba01aa5b_92086bc8",
      "range": {
        "startLine": 1265,
        "startChar": 6,
        "endLine": 1265,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16180c17_4404fc05",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1265,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T02:59:27Z",
      "side": 1,
      "message": "As discussed, it probably makes sense to try this for the latency advantage, and to see whether there is a significant battery regression.\n\nCan we use mincore or the like to detect swapper-out pages? If so, I think we probably want to use DONT_NEED on those to avoid decompressing.",
      "parentUuid": "bee887e9_c9f17d90",
      "range": {
        "startLine": 1265,
        "startChar": 6,
        "endLine": 1265,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95a856db_065abde8",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1265,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T10:41:26Z",
      "side": 1,
      "message": "Good idea, let me add a TODO for this optimization and I\u0027ll follow-up with another CL.",
      "parentUuid": "16180c17_4404fc05",
      "range": {
        "startLine": 1265,
        "startChar": 6,
        "endLine": 1265,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb97bdaf_b56437a9",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1265,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-09T13:43:42Z",
      "side": 1,
      "message": "I checked in the kernel code that MADV_FREE immediately releases the swapped out pages. So what we can do is use mincore to find swapped-out pages and only memset the other pages before calling MADV_FREE.",
      "parentUuid": "95a856db_065abde8",
      "range": {
        "startLine": 1265,
        "startChar": 6,
        "endLine": 1265,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14773851_da998a5a",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 11
      },
      "lineNbr": 1265,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-16T10:28:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "cb97bdaf_b56437a9",
      "range": {
        "startLine": 1265,
        "startChar": 6,
        "endLine": 1265,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d082454_0005ae52",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 11
      },
      "lineNbr": 245,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T02:59:27Z",
      "side": 1,
      "message": "The semantics weren\u0027t very clear to me. You\u0027re making the memory available to other processes in either case. Maybe \"release_eagerly\"?",
      "range": {
        "startLine": 245,
        "startChar": 25,
        "endLine": 245,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faaa7004_377a6c8f",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 11
      },
      "lineNbr": 245,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T10:41:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d082454_0005ae52",
      "range": {
        "startLine": 245,
        "startChar": 25,
        "endLine": 245,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fec80af2_a6aa6118",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 11
      },
      "lineNbr": 444,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T02:59:27Z",
      "side": 1,
      "message": "\"ZeroPages\" and \"no requirements on alignment\" seems contradictory. Rename?\n\nOr maybe even introduce two variants, one of which does assume page alignment; I\u0027m not sure. If we call it on a single 4K page, it may matter enough to be barely worth it.",
      "range": {
        "startLine": 444,
        "startChar": 5,
        "endLine": 444,
        "endChar": 14
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b86c08d8_95bfbe42",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 11
      },
      "lineNbr": 444,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T10:41:26Z",
      "side": 1,
      "message": "I\u0027ve renamed to `ZeroMemory`.",
      "parentUuid": "fec80af2_a6aa6118",
      "range": {
        "startLine": 444,
        "startChar": 5,
        "endLine": 444,
        "endChar": 14
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dca5fb9_3ccdd8a4",
        "filename": "runtime/gc/accounting/space_bitmap.h",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T02:59:27Z",
      "side": 1,
      "message": "Again, we\u0027re kind of potentially giving it back in either case. \"eager_release\" seems like a better name.",
      "range": {
        "startLine": 105,
        "startChar": 5,
        "endLine": 105,
        "endChar": 76
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97fdc083_d52e2d29",
        "filename": "runtime/gc/accounting/space_bitmap.h",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T10:41:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8dca5fb9_3ccdd8a4",
      "range": {
        "startLine": 105,
        "startChar": 5,
        "endLine": 105,
        "endChar": 76
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1466ee71_71bb7b86",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-05-30T19:16:03Z",
      "side": 1,
      "message": "Since these regions were at least `MADV_FREE\u0027ed` in some previous GC cycle, in case kernel had memory pressure, it would have already taken away those pages. If there has been no pressure, it can do free now as well without this call. IOW, the only real effect of this is immediate reduction in RSS.\n\nGiven that we have invested in zeroing these pages, I think it would make more sense to not disturb them.",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dded7dd_07bbe020",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-06T14:44:57Z",
      "side": 1,
      "message": "You mean not release them?\n\nI agree it makes sense locally. However, holistically, as long as RSS is the marker for memory pressure, ensuring they are released will make us not regress any existing systems.",
      "parentUuid": "1466ee71_71bb7b86",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12bd5164_f10daccd",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T02:59:27Z",
      "side": 1,
      "message": "I\u0027m also concerned about the double clearing here. I do understand concern about what happens if the app becomes jank imperceptible. But doing a lot of extra clearing in the transition GC also seens suboptimal. I would just leave them alone. Though that does mean that jank imperceptible apps are impacted.\n\nI also don\u0027t think the ReleaseFreeRegions implementation does what\u0027s claimed here. Doesn\u0027t it only release memory above the largest in-use address? Which is kind of strange.",
      "parentUuid": "5dded7dd_07bbe020",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8246665b_db2b750e",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T10:41:26Z",
      "side": 1,
      "message": "It releases the memory after the last non-free regions. All the other pages that are free before that will be releases earlier on during this GC.\n\nNote that there\u0027s no clearing at this point. We\u0027re just sending the madvise to the kernel that we don\u0027t need the pages. The clearing happens when a page is given back to the app.",
      "parentUuid": "12bd5164_f10daccd",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ec4c356_c39ecf48",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-09T13:43:42Z",
      "side": 1,
      "message": "I just realized that in the `pre-last-non-free-region` regions, it would not be sufficient to `MADV_DONTNEED` the regions which are evacuated in this GC cycle. We\u0027ll have to do the same for free regions as well. These regions are `MADV_FREE\u0027ed` in prior GC cycles and could be still holding onto some pages.",
      "parentUuid": "8246665b_db2b750e",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fbed8c5_1eb28fe4",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T13:50:40Z",
      "side": 1,
      "message": "Isn\u0027t that what this CL is doing?",
      "parentUuid": "9ec4c356_c39ecf48",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b236b5_d8f58fd7",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-09T14:29:40Z",
      "side": 1,
      "message": "This CL is using `MADV_DONTNEED` on the regions past last non-free regions as well as regions which are freed in this GC cycle before last non-free regions. I\u0027m talking about the regions which are freed by previous GC cycles and are before last non-free regions.\n\nOn another thought, this may not be required given the likelihood of such pages surviving through  GCs is very low.",
      "parentUuid": "1fbed8c5_1eb28fe4",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cb58186_99a12a10",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T14:41:46Z",
      "side": 1,
      "message": "Ah I see - yeah, I agree that those holes are unlikely to be big.",
      "parentUuid": "b7b236b5_d8f58fd7",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a5ed49c_52a13330",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-14T21:19:39Z",
      "side": 1,
      "message": "The reasoning here doesn\u0027t seem entirely correct for debug builds. which allocate regions cyclicly. See https://cs.android.com/android/platform/superproject/+/refs/heads/master:art/runtime/gc/space/region_space.cc;l\u003d1036\n\nI think last_non_free_region is pretty meaningless there.\n\nI\u0027m not completely sure we should care. But we should probably do this for all free regions there?",
      "parentUuid": "7cb58186_99a12a10",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d2601bb_33fa3504",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 11
      },
      "lineNbr": 2820,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-15T08:48:51Z",
      "side": 1,
      "message": "Ah indeed good catch. Looking at how last-non-free-region is computed, things should be fine (we wouldn\u0027t DONTNEED a non-freed region), but we would miss on some regions. I changed the code to do as you suggest: go over the regions and dontneed the free ones.",
      "parentUuid": "0a5ed49c_52a13330",
      "range": {
        "startLine": 2820,
        "startChar": 21,
        "endLine": 2820,
        "endChar": 39
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b11c9df_0650dd49",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 11
      },
      "lineNbr": 406,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T02:59:27Z",
      "side": 1,
      "message": "As stated elsewhere, I don\u0027t see how this releases all free regions.",
      "range": {
        "startLine": 405,
        "startChar": 1,
        "endLine": 406,
        "endChar": 65
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ee712b3_6eb78966",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 11
      },
      "lineNbr": 406,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T10:41:26Z",
      "side": 1,
      "message": "(moving the conversation to the other comment).",
      "parentUuid": "1b11c9df_0650dd49",
      "range": {
        "startLine": 405,
        "startChar": 1,
        "endLine": 406,
        "endChar": 65
      },
      "revId": "827c226e94b617a6c49b2ea788cc1338789505f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}