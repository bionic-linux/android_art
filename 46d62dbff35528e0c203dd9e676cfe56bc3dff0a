{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6dd224d0_f7dcc637",
        "filename": "compiler/jni/quick/riscv64/calling_convention_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-12T10:41:08Z",
      "side": 1,
      "message": "If you intend ART internal calling convention to differ from native in the handling of FPRs (put them on stack instead of vacant GPRs), can you explain this difference in a comment? I\u0027m not sure what would be the best place for such a comment though.",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 43,
        "endChar": 84
      },
      "revId": "46d62dbff35528e0c203dd9e676cfe56bc3dff0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1232f372_36f71473",
        "filename": "compiler/jni/quick/riscv64/calling_convention_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-12T10:41:08Z",
      "side": 1,
      "message": "Shouldn\u0027t SP also be here (as per https://github.com/riscv-non-isa/riscv-elf-psabi-doc), or a comment why it\u0027s not here?",
      "range": {
        "startLine": 102,
        "startChar": 33,
        "endLine": 102,
        "endChar": 59
      },
      "revId": "46d62dbff35528e0c203dd9e676cfe56bc3dff0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d610326_08362c9c",
        "filename": "compiler/jni/quick/riscv64/calling_convention_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-12T10:41:08Z",
      "side": 1,
      "message": "Comment that we don\u0027t need FA1 / A1 because Java has no such return types?",
      "range": {
        "startLine": 138,
        "startChar": 23,
        "endLine": 138,
        "endChar": 46
      },
      "revId": "46d62dbff35528e0c203dd9e676cfe56bc3dff0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c73df2e7_8f2891eb",
        "filename": "compiler/jni/quick/riscv64/calling_convention_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-12T10:41:08Z",
      "side": 1,
      "message": "Why A4? Where else is this assumption hardcoded (meaning, if it gets changed here, where else does it need to be changed)?",
      "range": {
        "startLine": 160,
        "startChar": 47,
        "endLine": 160,
        "endChar": 49
      },
      "revId": "46d62dbff35528e0c203dd9e676cfe56bc3dff0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ae5604_9a8cec98",
        "filename": "compiler/jni/quick/riscv64/calling_convention_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-12T10:41:08Z",
      "side": 1,
      "message": "This function probably also needs to mention that it does not try to put FP args into GPRs as the native convention does.",
      "range": {
        "startLine": 163,
        "startChar": 45,
        "endLine": 163,
        "endChar": 69
      },
      "revId": "46d62dbff35528e0c203dd9e676cfe56bc3dff0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7ffdccb_0ed33a4c",
        "filename": "compiler/jni/quick/riscv64/calling_convention_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 330,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-12T10:41:08Z",
      "side": 1,
      "message": "Is this a TODO?",
      "range": {
        "startLine": 330,
        "startChar": 2,
        "endLine": 330,
        "endChar": 57
      },
      "revId": "46d62dbff35528e0c203dd9e676cfe56bc3dff0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03044816_77fab36c",
        "filename": "compiler/jni/quick/riscv64/calling_convention_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-12T10:41:08Z",
      "side": 1,
      "message": "Floats use NaN-boxing which I think is different. Generic JNI takes care of it in http://cs/h/android/platform/superproject/+/master:art/runtime/entrypoints/quick/quick_trampoline_entrypoints.cc?l\u003d1517-1520.",
      "range": {
        "startLine": 367,
        "startChar": 31,
        "endLine": 368,
        "endChar": 41
      },
      "revId": "46d62dbff35528e0c203dd9e676cfe56bc3dff0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}