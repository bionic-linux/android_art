{
  "comments": [
    {
      "key": {
        "uuid": "0a3da49e_370e1ac2",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Why is that not const Handle\u003cmirror::Class\u003e\u0026 c? How can the GC find this handle copy?",
      "range": {
        "startLine": 758,
        "startChar": 50,
        "endLine": 758,
        "endChar": 55
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f10a43e_3a57b601",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "Its a pointer to a StackReference.",
      "parentUuid": "0a3da49e_370e1ac2",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a531cfd_44584e0f",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "I don\u0027t understand this, seems like defeating the purpose of handles.",
      "range": {
        "startLine": 763,
        "startChar": 64,
        "endLine": 763,
        "endChar": 65
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf1dbc5e_b42400cf",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "In this case it would be OK to do that but it would change the stack reference in the handle which was passed in.",
      "parentUuid": "4a531cfd_44584e0f",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a531cfd_245b4a0e",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 775,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Instead of doing this, why don\u0027t you create an empty handle at the beginning of the function and then Assign it here?",
      "range": {
        "startLine": 775,
        "startChar": 23,
        "endLine": 775,
        "endChar": 24
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f10a43e_5acdca99",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 775,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "Good idea, that should be what we do in places where it is performance critical.",
      "parentUuid": "4a531cfd_245b4a0e",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3da49e_570ba6b0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 2405,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Would it be worth it to have a DCHECK(!strcmp(descriptor, klass-\u003eGetDescriptor())\n\nHow do we enforce these char* are canonicalized?\n\n(Comment also applies to all the strcmp -\u003e \u003d\u003d changes below).",
      "range": {
        "startLine": 2405,
        "startChar": 4,
        "endLine": 2405,
        "endChar": 5
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df20b093_7ba5378f",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 2405,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "I\u0027ll change it to DescriptorEquals, you are right that it would be confusing if GetDescriptor returned a char* instead of a string. We should use string::compare instead of operator \u003d\u003d",
      "parentUuid": "0a3da49e_570ba6b0",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3da49e_7708a2b3",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Why is that not strcmp(GetDescriptor().c_str(), match) ?",
      "range": {
        "startLine": 536,
        "startChar": 19,
        "endLine": 536,
        "endChar": 35
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df20b093_5bd15bdb",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "Ian had some concerns that allocating a string would cause performance regressions in reflection, the current way avoids allocating a string in the else common case.",
      "parentUuid": "0a3da49e_7708a2b3",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}