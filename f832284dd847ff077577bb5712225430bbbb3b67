{
  "comments": [
    {
      "key": {
        "uuid": "0a3da49e_370e1ac2",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Why is that not const Handle\u003cmirror::Class\u003e\u0026 c? How can the GC find this handle copy?",
      "range": {
        "startLine": 758,
        "startChar": 50,
        "endLine": 758,
        "endChar": 55
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f10a43e_3a57b601",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "Its a pointer to a StackReference.",
      "parentUuid": "0a3da49e_370e1ac2",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3da49e_e2af6e6a",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T17:18:17Z",
      "side": 1,
      "message": "So this is relying on the fact another handle holds the StackReference right? For things passed as arguments, that\u0027s \nOK, but othewrwise that\u0027s not OK.\n\nI find that very error prone, how about a DISALLOW_COPY_AND_ASSIGN on Handle and always pass as reference?",
      "parentUuid": "7f10a43e_3a57b601",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf1dbc5e_74b9c8d9",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-19T17:22:46Z",
      "side": 1,
      "message": "Do you want to explain your concern, perhaps with an example? I think in this change Mathieu is following a pattern that\u0027s already established for Handles in ART. That\u0027s not to say the pattern is correct.",
      "parentUuid": "0a3da49e_e2af6e6a",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a3274d1_aad54456",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:27:45Z",
      "side": 1,
      "message": "The HandleScope holds the StackReference.",
      "parentUuid": "0a3da49e_e2af6e6a",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3da49e_02ce3a3b",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 758,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T17:44:20Z",
      "side": 1,
      "message": "I find it error prone that everyone can construct its own handle and pass it around. I can easily see this happening if someone\u0027s not careful (or new to the compiler, or even new to this kind of handles, which I am :-)).\n\nI think the Handle class should have no public constructor, but only a private constructor that the HandleScope can use.",
      "parentUuid": "bf1dbc5e_74b9c8d9",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a531cfd_44584e0f",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "I don\u0027t understand this, seems like defeating the purpose of handles.",
      "range": {
        "startLine": 763,
        "startChar": 64,
        "endLine": 763,
        "endChar": 65
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf1dbc5e_b42400cf",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "In this case it would be OK to do that but it would change the stack reference in the handle which was passed in.",
      "parentUuid": "4a531cfd_44584e0f",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a531cfd_1f320fe6",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T17:18:17Z",
      "side": 1,
      "message": "So making the passed argument as a reference should prevent that problem, right?",
      "parentUuid": "bf1dbc5e_b42400cf",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f0fa825_c0357461",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:27:45Z",
      "side": 1,
      "message": "Only if it is a const reference, I can always add a ConstHandle which doesn\u0027t have an Assign method to get around this.",
      "parentUuid": "4a531cfd_1f320fe6",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a531cfd_df40871b",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T17:44:20Z",
      "side": 1,
      "message": "What\u0027s a ConstHandle?\n\nI see, you don\u0027t want the caller to have its handle changed, correct?\n\nI was confused about the comment, it looked as if it was GC related. It\u0027s not a \"copy\" that you want here, just a \u0027current\u0027 variable to update, right?\n\nAbout not changing the the called handle, I like the idea of making it a const reference :-)",
      "parentUuid": "1f0fa825_c0357461",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f1ab865_b651a6e9",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 763,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T21:18:07Z",
      "side": 1,
      "message": "I guess that is possible by changing NewHandle to return a StackReference\u0026. Doing this would be an invasive change and I need to think about it more before knowing if it would be superior.",
      "parentUuid": "4a531cfd_df40871b",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a531cfd_245b4a0e",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 775,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Instead of doing this, why don\u0027t you create an empty handle at the beginning of the function and then Assign it here?",
      "range": {
        "startLine": 775,
        "startChar": 23,
        "endLine": 775,
        "endChar": 24
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f10a43e_5acdca99",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 775,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "Good idea, that should be what we do in places where it is performance critical.",
      "parentUuid": "4a531cfd_245b4a0e",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3da49e_570ba6b0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 2405,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Would it be worth it to have a DCHECK(!strcmp(descriptor, klass-\u003eGetDescriptor())\n\nHow do we enforce these char* are canonicalized?\n\n(Comment also applies to all the strcmp -\u003e \u003d\u003d changes below).",
      "range": {
        "startLine": 2405,
        "startChar": 4,
        "endLine": 2405,
        "endChar": 5
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df20b093_7ba5378f",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 2405,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "I\u0027ll change it to DescriptorEquals, you are right that it would be confusing if GetDescriptor returned a char* instead of a string. We should use string::compare instead of operator \u003d\u003d",
      "parentUuid": "0a3da49e_570ba6b0",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a58a819_43ff6613",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 2405,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T17:18:17Z",
      "side": 1,
      "message": "SGTM, thanks.",
      "parentUuid": "df20b093_7ba5378f",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3da49e_7708a2b3",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T08:42:26Z",
      "side": 1,
      "message": "Why is that not strcmp(GetDescriptor().c_str(), match) ?",
      "range": {
        "startLine": 536,
        "startChar": 19,
        "endLine": 536,
        "endChar": 35
      },
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df20b093_5bd15bdb",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:09:06Z",
      "side": 1,
      "message": "Ian had some concerns that allocating a string would cause performance regressions in reflection, the current way avoids allocating a string in the else common case.",
      "parentUuid": "0a3da49e_7708a2b3",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a58a819_83094e91",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-05-19T17:18:17Z",
      "side": 1,
      "message": "I see. It\u0027s a pity it\u0027s doing the same thing as GetDescriptor though, and this code is not trivial. Any way the code could be shared between the two?",
      "parentUuid": "df20b093_5bd15bdb",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa1c9852_8cc18612",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-19T17:27:45Z",
      "side": 1,
      "message": "I don\u0027t see any easy ways to do this.",
      "parentUuid": "2a58a819_83094e91",
      "revId": "f832284dd847ff077577bb5712225430bbbb3b67",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}