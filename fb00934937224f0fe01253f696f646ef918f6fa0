{
  "comments": [
    {
      "key": {
        "uuid": "4b0c370e_3de4925b",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-04-06T09:30:50Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 207,
        "startChar": 48,
        "endLine": 207,
        "endChar": 62
      },
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1c739a3_86b6d425",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-04-06T15:33:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b0c370e_3de4925b",
      "range": {
        "startLine": 207,
        "startChar": 48,
        "endLine": 207,
        "endChar": 62
      },
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a9b6d76_4d731719",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-04-06T09:30:50Z",
      "side": 1,
      "message": "Is there any reason why HDeoptimize has SideEffects::All()? I would expect AllReads() to be enough.",
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd08476c_d85ae1f0",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-04-06T15:33:11Z",
      "side": 1,
      "message": "I believe we need it to prevent splitting of reads since HDeoptimize is actually a predicated never-return instruction so any sort of splitting would cause problems.",
      "parentUuid": "3a9b6d76_4d731719",
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3667062b_1ab7e0a9",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-04-06T15:39:44Z",
      "side": 1,
      "message": "What do you mean by \"splitting of reads\"?",
      "parentUuid": "fd08476c_d85ae1f0",
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e1ec23f_da5479f9",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-04-06T15:43:18Z",
      "side": 1,
      "message": "I mean things like stack-allocating objects that are then read both before and after the deoptimize and similar things..",
      "parentUuid": "3667062b_1ab7e0a9",
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1b43939_e202c48f",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-04-06T15:52:27Z",
      "side": 1,
      "message": "We\u0027re not stack-allocating objects at the moment. And even if we were, I don\u0027t see how that affects anything. Even if we reordered reads across a Deopt (we cannot reorder and earlier read after Deopt if that read is an environment use of the Deopt), everything should be OK. And AllReads would prevent moving stores across deopts.",
      "parentUuid": "8e1ec23f_da5479f9",
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a0540bd_97310269",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-04-06T15:55:46Z",
      "side": 1,
      "message": "And AllReads does not prevent GVN from eliminating reads after the Deopt with a replacement from before the Deopt.",
      "parentUuid": "f1b43939_e202c48f",
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d54626e_ce31abe1",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-04-06T09:24:06Z",
      "side": 1,
      "message": "I think you could just check if (!HDeoptimize()) here and avoid the changes lines 200-213?",
      "range": {
        "startLine": 518,
        "startChar": 11,
        "endLine": 518,
        "endChar": 12
      },
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "631e6644_b71f2c02",
        "filename": "compiler/optimizing/gvn.cc",
        "patchSetId": 1
      },
      "lineNbr": 518,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-04-06T15:33:11Z",
      "side": 1,
      "message": "No we need to Add the deoptimize node to be able to deduplicate it.",
      "parentUuid": "3d54626e_ce31abe1",
      "range": {
        "startLine": 518,
        "startChar": 11,
        "endLine": 518,
        "endChar": 12
      },
      "revId": "fb00934937224f0fe01253f696f646ef918f6fa0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}