{
  "comments": [
    {
      "key": {
        "uuid": "83dfa661_39b30044",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-11-23T00:25:15Z",
      "side": 1,
      "message": "It looks to me an attempt should be made before TryBuildAndInline() to match intrinsics. You don\u0027t want method to be inlined before it gets a chance to be replaced by an intrinsic.",
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff51f2ce_fc51bc77",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-23T11:05:42Z",
      "side": 1,
      "message": "Matching intrinsics has already been done in the intrinsics recognizer, so that would sound like duplicating the work.",
      "parentUuid": "83dfa661_39b30044",
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5b56949_7a9c14a4",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-11-23T13:07:49Z",
      "side": 1,
      "message": "But we devirtualize first with inline cache/cha first before inlining attempt, that\u0027s after the previous intrinsics matching. Changing invoke-interface into invoke-virtual is a result of devirtualization also, only if inlining the devirtualized method fails. We should cover all cases.",
      "parentUuid": "ff51f2ce_fc51bc77",
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b42ca7bf_6c96a75b",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-23T13:16:40Z",
      "side": 1,
      "message": "Ah right, you\u0027re saying it could be the invoke-virtual/invoke-interface was not recognized by the intrinsic recognizer?\n\nThen maybe you\u0027re right, we should check beforehand if we have an intrinsic. (doesn\u0027t need to be in this CL really, so up to Aart if he wants to do this here or in another CL).",
      "parentUuid": "b5b56949_7a9c14a4",
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1c53002_08ce6db0",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-11-23T13:59:29Z",
      "side": 1,
      "message": "This is what happens. We first devirtualize invoke-interface Intf.foo() to A.foo() via CHA or inline cache, then try to inline A.foo(), if that fails, we try to change invoke-interface Intf.foo() into invoke-virtual A.foo. But A.foo() could be an intrinsic. If we don\u0027t check intrinsic first, we end up either inline A.foo(), or change invoke-interface Intf.foo() into invoke-virtual A.foo(), both are slower than using the intrinsic version of A.foo(). It\u0027s straightforward to check intrinsics right before the attempt to inline/changing invoke-interface to invoke-virtual, then we don\u0027t need the added code below. I don\u0027t really see the need for a separate CL.\n\nI\u0027m also kind of skeptical of the whole value of changing invoke-interface into invoke-virtual, since devirtualization has its cost (CHA guard or inline cache type guard) which (at least the inline cache type guard) is higher than the difference between the cost of invoke-interface and invoke-virtual. Well you can argue invoke-interface can hit the conflict, then it\u0027s still a good thing to do.",
      "parentUuid": "b42ca7bf_6c96a75b",
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26b112d2_6677a9a8",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1218,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-24T23:02:27Z",
      "side": 1,
      "message": "The case I optimized is not due to CHA or inline cache, but simply resolving the interface call into virtual as a result of better receiver type information. I am not seeing the scenario you described, so if you have a particular example that would help me understand the discussion better. Even for that case, the refactoring of this CL seems useful, even if we call the new method at other places, so happy to look into that with more information.",
      "parentUuid": "c1c53002_08ce6db0",
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cb9e202_6a39bbfa",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1261,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-23T11:05:42Z",
      "side": 1,
      "message": "the",
      "range": {
        "startLine": 1261,
        "startChar": 26,
        "endLine": 1261,
        "endChar": 27
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00d0702c_780da70b",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 1261,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-24T23:02:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cb9e202_6a39bbfa",
      "range": {
        "startLine": 1261,
        "startChar": 26,
        "endLine": 1261,
        "endChar": 27
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e47ad5_b3280365",
        "filename": "compiler/optimizing/intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-23T11:16:00Z",
      "side": 1,
      "message": "Remove?",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 147,
        "endChar": 10
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e165c17_e030dce6",
        "filename": "compiler/optimizing/intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-24T23:02:27Z",
      "side": 1,
      "message": "That was a one point the style guideline. But removed.",
      "parentUuid": "54e47ad5_b3280365",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 147,
        "endChar": 10
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcb5b811_52603d14",
        "filename": "compiler/optimizing/intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-23T11:05:42Z",
      "side": 1,
      "message": "misplaced.",
      "range": {
        "startLine": 148,
        "startChar": 67,
        "endLine": 148,
        "endChar": 68
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a30acfb_90e02834",
        "filename": "compiler/optimizing/intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-24T23:02:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcb5b811_52603d14",
      "range": {
        "startLine": 148,
        "startChar": 67,
        "endLine": 148,
        "endChar": 68
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa730d21_19c9d487",
        "filename": "compiler/optimizing/intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-23T11:05:42Z",
      "side": 1,
      "message": "Maybe pass stats_ to Recognize, and avoid having to call MaybeRecordStats in two different places?",
      "range": {
        "startLine": 174,
        "startChar": 9,
        "endLine": 174,
        "endChar": 79
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "165f3148_8b753ab7",
        "filename": "compiler/optimizing/intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-24T23:02:27Z",
      "side": 1,
      "message": "Leaving like this, perhaps we want to make this another stat to see the difference.",
      "parentUuid": "fa730d21_19c9d487",
      "range": {
        "startLine": 174,
        "startChar": 9,
        "endLine": 174,
        "endChar": 79
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "996e762c_b86344a9",
        "filename": "compiler/optimizing/intrinsics.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-23T11:16:00Z",
      "side": 1,
      "message": "s/\\ \\*/\\*\\ /",
      "range": {
        "startLine": 50,
        "startChar": 53,
        "endLine": 50,
        "endChar": 55
      },
      "revId": "1d4317dfb9f14705972606e7e088152f6c50b2c7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}