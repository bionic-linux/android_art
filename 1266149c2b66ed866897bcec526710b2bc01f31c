{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0e2cdc56_a4b2d3b2",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 431,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "Use the `phi_placeholder_` instead. It has a block id and heap location. (Move GetMergeBlock() to LSEVisitor that has the `graph_`.)",
      "range": {
        "startLine": 428,
        "startChar": 6,
        "endLine": 431,
        "endChar": 8
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab45ddc1_f1baa6e0",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 431,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "Done. I\u0027ll just pass the graph down instead. seems somewhat cleaner.",
      "parentUuid": "0e2cdc56_a4b2d3b2",
      "range": {
        "startLine": 428,
        "startChar": 6,
        "endLine": 431,
        "endChar": 8
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7490d88c_6d966963",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 1050,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "Also list heap locations?",
      "range": {
        "startLine": 1044,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 0
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7afc1f4_8ca79188",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 1050,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7490d88c_6d966963",
      "range": {
        "startLine": 1044,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 0
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96ad6581_c3f7e4c3",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 1229,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "You don\u0027t need to extend. The Phi placeholder has both block id and heap location index.",
      "range": {
        "startLine": 1229,
        "startChar": 9,
        "endLine": 1229,
        "endChar": 63
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "996db798_f9e6fe27",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 1229,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96ad6581_c3f7e4c3",
      "range": {
        "startLine": 1229,
        "startChar": 9,
        "endLine": 1229,
        "endChar": 63
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d40d6ad7_9af96fe8",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 2163,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "The same would be achieved by marking the Phi placeholder for `idx` in the merge block for keeping (in `phi_placeholders_to_search_for_kept_stores_`) and letting the SearchPhiPlaceholdersForKeptStores() process that.",
      "range": {
        "startLine": 2161,
        "startChar": 4,
        "endLine": 2163,
        "endChar": 24
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0caa0e4f_4a013b28",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 2163,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "That\u0027s what this does?\n\nkeep -\u003e KeepStores -\u003e push the phi?\n\nI\u0027m not really sure what you\u0027re suggesting.",
      "parentUuid": "d40d6ad7_9af96fe8",
      "range": {
        "startLine": 2161,
        "startChar": 4,
        "endLine": 2163,
        "endChar": 24
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10b9c8d7_63c45d5b",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 2163,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-27T16:32:37Z",
      "side": 1,
      "message": "A \"merged unknown\" holds a Phi placeholder (in PS61, not PS38), so let the KeepStores() access that and mark it in `phi_placeholders_to_search_for_kept_stores_`. Then you can drop `kept_merged_unknowns_` and the entire SearchMergedUnknownsForKeptStores().",
      "parentUuid": "0caa0e4f_4a013b28",
      "range": {
        "startLine": 2161,
        "startChar": 4,
        "endLine": 2163,
        "endChar": 24
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0f0b23a_e74d60d1",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 2163,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-27T19:06:00Z",
      "side": 1,
      "message": "Possibly there just is something I\u0027m not getting but that doesn\u0027t seem to work AFAICT.\n\nIt\u0027s failing this test here: PartialLoadPreserved\n\n// // ENTRY\n// obj \u003d new Obj();\n// if (parameter_value) {\n//   // LEFT\n//   obj.field \u003d 1;\n//   call_func(obj);\n//   // We don\u0027t know what obj.field is now we aren\u0027t able to eliminate the read below!\n// } else {\n//   // DO NOT ELIMINATE\n//   obj.field \u003d 2;\n//   // RIGHT\n// }\n// EXIT\n// return obj.field\n\nIn the future we will be able to remove the obj.field \u003d 2 by replacing the return obj.field with a predicated read but this CL doesn\u0027t do that yet so we need to preserve the write.\n\n\nIs there something I need to do in SearchPhiPlaceholdersForKeptStores?\n\nPlease advise.",
      "parentUuid": "10b9c8d7_63c45d5b",
      "range": {
        "startLine": 2161,
        "startChar": 4,
        "endLine": 2163,
        "endChar": 24
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae68fbda_2ba66ee3",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 2163,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-30T17:51:43Z",
      "side": 1,
      "message": "I guess that\u0027s because of the changes you made to the SearchPhiPlaceholdersForKeptStores().\n\nBut this makes me worried about correctness. What if we replace `write_right` in the RIGHT block with a diamond pattern with two different stores? The KeepStores() from SearchMergedUnknownsForKeptStores() shall just add the merging Phi placeholder to `phi_placeholders_to_search_for_kept_stores_` and when we see those stores in SearchPhiPlaceholdersForKeptStores(), they shall satisfy the IsPartialNoEscape() condition and therefore they shall be erroneously removed.",
      "parentUuid": "d0f0b23a_e74d60d1",
      "range": {
        "startLine": 2161,
        "startChar": 4,
        "endLine": 2163,
        "endChar": 24
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "097c1d82_8a8e505b",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 38
      },
      "lineNbr": 2163,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-30T22:38:24Z",
      "side": 1,
      "message": "That is a good point and something I missed.\n\nI\u0027ll need to take a closer look at this since the test you suggest does fail.",
      "parentUuid": "ae68fbda_2ba66ee3",
      "range": {
        "startLine": 2161,
        "startChar": 4,
        "endLine": 2163,
        "endChar": 24
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c603be06_f4ace860",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1578,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 1578,
        "startChar": 40,
        "endLine": 1578,
        "endChar": 51
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cc83400_b3ee39f6",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1578,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c603be06_f4ace860",
      "range": {
        "startLine": 1578,
        "startChar": 40,
        "endLine": 1578,
        "endChar": 51
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66cf87bb_80bab93a",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1578,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-27T16:32:37Z",
      "side": 1,
      "message": "Still not done in PS61.",
      "parentUuid": "7cc83400_b3ee39f6",
      "range": {
        "startLine": 1578,
        "startChar": 40,
        "endLine": 1578,
        "endChar": 51
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a564e4e_79dda6ea",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1578,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-27T18:45:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66cf87bb_80bab93a",
      "range": {
        "startLine": 1578,
        "startChar": 40,
        "endLine": 1578,
        "endChar": 51
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f06725_4b26629a",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1623,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "Remove?",
      "range": {
        "startLine": 1619,
        "startChar": 2,
        "endLine": 1623,
        "endChar": 3
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70134312_f1a82cb2",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1623,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3f06725_4b26629a",
      "range": {
        "startLine": 1619,
        "startChar": 2,
        "endLine": 1623,
        "endChar": 3
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d909495_8c0606e8",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1705,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 1705,
        "startChar": 40,
        "endLine": 1705,
        "endChar": 51
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c6ad552_08903ebe",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1705,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d909495_8c0606e8",
      "range": {
        "startLine": 1705,
        "startChar": 40,
        "endLine": 1705,
        "endChar": 51
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e0dfbc5_44431142",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1748,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-10-07T11:50:53Z",
      "side": 1,
      "message": "Remove?",
      "range": {
        "startLine": 1744,
        "startChar": 2,
        "endLine": 1748,
        "endChar": 3
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aba5073e_f5c20f87",
        "filename": "compiler/optimizing/load_store_elimination_test.cc",
        "patchSetId": 38
      },
      "lineNbr": 1748,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-07T22:14:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e0dfbc5_44431142",
      "range": {
        "startLine": 1744,
        "startChar": 2,
        "endLine": 1748,
        "endChar": 3
      },
      "revId": "1266149c2b66ed866897bcec526710b2bc01f31c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}