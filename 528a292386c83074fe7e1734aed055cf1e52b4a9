{
  "comments": [
    {
      "key": {
        "uuid": "f5972c13_d2383eb3",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-05-11T14:38:46Z",
      "side": 1,
      "message": "Is this overhead_size still correct? Now that we include the instance fields as static fields, should their size be subtracted from overhead_size?",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93755e63_4a567ed0",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-11T15:11:02Z",
      "side": 1,
      "message": "I believe we never fix up things to be consistent. E.g., the runtime-internal-objects stuff isn\u0027t accounted for in the class dumps instance size.\n\nAlso since there\u0027s no size in a class-dump for this class, I believe this is still OK.\n\nOpinion on that reasoning?",
      "parentUuid": "f5972c13_d2383eb3",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaf7ceb8_b1d8b566",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-05-11T16:21:28Z",
      "side": 1,
      "message": "I think most heap dump tools determine the size of a class object by taking the instance size associated with instances of java.lang.Class and adding the size of the static fields. This means they would end up double counting the class object instance fields? Let me think about that.",
      "parentUuid": "93755e63_4a567ed0",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7240e07_79549aa2",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-12T00:55:39Z",
      "side": 1,
      "message": "But aren\u0027t we \"double-counting\" then already because of the overhead array?",
      "parentUuid": "aaf7ceb8_b1d8b566",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22779245_676931d6",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-05-12T13:58:26Z",
      "side": 1,
      "message": "It looks like we were partially double counting. We were double counting static fields, but not double counting java.lang.Class object instance fields. At least in perflib/ahat/studio. For example, in the ahat test dump with this change I see:\n\n4 bytes for the real single static field.\n4 bytes for the $overhead reference.\n108 bytes for the class object instance fields.\n$overhead is a reference to an array of size 108 bytes.\nahat shows the class object size is 240 (2 * (4 + 4 + 108)), with an additional 108 bytes retained by the $overhead array.\n\nI think the correct thing to do is remove $overhead entirely, but continue to use the class_size_without_overhead for the size of java.lang.Class instances at line 1234 of this patch set.",
      "parentUuid": "d7240e07_79549aa2",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1efe4d55_171e24dc",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-12T16:37:50Z",
      "side": 1,
      "message": "Wasn\u0027t the overhead supposed to include (embedded) vtable etc? That doesn\u0027t seem accounted for in your suggestion?",
      "parentUuid": "22779245_676931d6",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f16f872_387c8b2e",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-05-15T08:22:50Z",
      "side": 1,
      "message": "I\u0027m not that familiar with how class objects are laid out. If they have an embedded vtable or embedded IMT that is not considered a java.lang.Class instance field or static field for the class, it may be worth adding them.\n\nYou could use $overhead approach for that. Alternatively, if they are arrays inlined into the class object, maybe add a $ field for each element of the relevant array and call it $vtable_0, $vtable_1, etc.?",
      "parentUuid": "1efe4d55_171e24dc",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d51a6e6_88426da2",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1207,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-15T17:40:50Z",
      "side": 1,
      "message": "I think it makes more sense to keep this opaque.",
      "parentUuid": "7f16f872_387c8b2e",
      "range": {
        "startLine": 1207,
        "startChar": 15,
        "endLine": 1207,
        "endChar": 28
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efd91c4c_383907e9",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1249,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-05-11T14:38:46Z",
      "side": 1,
      "message": "Add a link to the bug in the comment to give more context for this somewhat subtle point?",
      "range": {
        "startLine": 1249,
        "startChar": 0,
        "endLine": 1249,
        "endChar": 54
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59fd4bee_972edf5d",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1249,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-12T00:55:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "efd91c4c_383907e9",
      "range": {
        "startLine": 1249,
        "startChar": 0,
        "endLine": 1249,
        "endChar": 54
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e35665ce_c43d302c",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1263,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-05-11T14:38:46Z",
      "side": 1,
      "message": "This is an anonymous function? Can you document what it does? Are there problems with making it a normal function instead?",
      "range": {
        "startLine": 1263,
        "startChar": 2,
        "endLine": 1263,
        "endChar": 63
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "963d13ec_6134d3d2",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1263,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-11T15:11:02Z",
      "side": 1,
      "message": "No real problems. I like lambdas for their scoping. Writing static fields is pretty much specific to class dumps, so would not be shared with any other function.",
      "parentUuid": "e35665ce_c43d302c",
      "range": {
        "startLine": 1263,
        "startChar": 2,
        "endLine": 1263,
        "endChar": 63
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fd78fdf_d9df7ec3",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1263,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-05-11T16:21:28Z",
      "side": 1,
      "message": "It took me a long time to figure out what this was doing, perhaps because I am not very familiar with lambdas in C++. It would have been easier for me to understand if it was a normal function.\n\nI would still like a comment at least describing what the static_field_writer function does and what name_fn is.",
      "parentUuid": "963d13ec_6134d3d2",
      "range": {
        "startLine": 1263,
        "startChar": 2,
        "endLine": 1263,
        "endChar": 63
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de344c72_d0c1b9c8",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 1
      },
      "lineNbr": 1263,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-12T00:55:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fd78fdf_d9df7ec3",
      "range": {
        "startLine": 1263,
        "startChar": 2,
        "endLine": 1263,
        "endChar": 63
      },
      "revId": "528a292386c83074fe7e1734aed055cf1e52b4a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}