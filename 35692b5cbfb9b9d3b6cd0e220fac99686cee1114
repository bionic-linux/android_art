{
  "comments": [
    {
      "key": {
        "uuid": "e96ff5a6_49ea3a5d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-11-21T21:53:03Z",
      "side": 1,
      "message": "Intrinsic",
      "range": {
        "startLine": 16,
        "startChar": 8,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "35692b5cbfb9b9d3b6cd0e220fac99686cee1114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8eed4564_31cd7f9f",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3442,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-11-21T21:51:47Z",
      "side": 1,
      "message": "... NaN or in0 \u003d\u003d -1 and in1 \u003d\u003d 1",
      "range": {
        "startLine": 3442,
        "startChar": 48,
        "endLine": 3442,
        "endChar": 51
      },
      "revId": "35692b5cbfb9b9d3b6cd0e220fac99686cee1114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "641e3176_02cc09ba",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3452,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-11-21T21:57:30Z",
      "side": 1,
      "message": "inputs",
      "range": {
        "startLine": 3452,
        "startChar": 24,
        "endLine": 3452,
        "endChar": 29
      },
      "revId": "35692b5cbfb9b9d3b6cd0e220fac99686cee1114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b529aea_2638d253",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3453,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-11-21T21:51:47Z",
      "side": 1,
      "message": "Therefore",
      "range": {
        "startLine": 3453,
        "startChar": 65,
        "endLine": 3453,
        "endChar": 73
      },
      "revId": "35692b5cbfb9b9d3b6cd0e220fac99686cee1114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52ca97ce_82022e46",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3475,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-11-21T21:51:47Z",
      "side": 1,
      "message": "I found a solution with 15 instructions vs 18 instructions:\n\n    __ Fcmp(in0, in1);\n    __ Mov(out, 1);\n    __ B(gt, \u0026end);\n    __ B(vs, \u0026nan);\n    __ B(eq, \u0026equal);\n\n    // if in0 \u003c in1 or if only the 2nd input is NaN\n    __ Bind(\u0026neg_one);\n    __ Mov(out, -1);\n    __ B(\u0026end);\n\n    // if either of the input is NaN\n    // NaN is equal to itself and greater than any other number. Therefore:\n    // - if only in0 is NaN \u003d\u003e return 1\n    // - if only in1 is NaN \u003d\u003e return -1\n    // - if both in0 and in1 are NaN \u003d\u003e return 0\n    __ Bind(\u0026nan);\n    __ Fcmp(in0, 0.0);\n    // if in0 is not a NaN than only in1 was a NaN and therefore return -1\n    __ B(vc, \u0026neg_one);\n    __ Fcmp(in1, 0.0);\n    // if in1 is not a NaN than only in0 was a NaN and return +1\n    __ Cset(out, vc);\n    //  If the execution reaches this point, it means both registers are NaN and return 0\n    __ B(\u0026end);\n\n    // in0 \u003d\u003d in1 or if one of the inputs is +0 and the other is -0\n    __ Bind(\u0026equal);\n    __ Fcmp(in0.V1D(), in1.V1D());\n    __ B(hi, \u0026neg_one);  // in0 is -0, in1 is +0\n    __ Cset(out, mi);    // in0 is +0, in1 is -0\n\n    __ Bind(\u0026end);",
      "range": {
        "startLine": 3437,
        "startChar": 1,
        "endLine": 3475,
        "endChar": 18
      },
      "revId": "35692b5cbfb9b9d3b6cd0e220fac99686cee1114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f40ff36_158c3e99",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3475,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-11-21T23:20:19Z",
      "side": 1,
      "message": "Restructure the code by making the NaN case fallthrough and only forward branches, also fixed typos in the comments:\n\n    __ Fcmp(in0, in1);\n    __ Mov(out, 1);\n    __ B(gt, \u0026end);\n    __ B(mi, \u0026neg_one);\n    __ B(eq, \u0026equal);\n\n    // Either of the inputs is NaN.\n    // NaN is equal to itself and greater than any other number.\n    // Therefore:\n    // - if only in0 is NaN \u003d\u003e return 1\n    // - if only in1 is NaN \u003d\u003e return -1\n    // - if both in0 and in1 are NaN \u003d\u003e return 0\n    __ Fcmp(in0, 0.0);\n    __ B(vc, \u0026neg_one); // in0 !\u003d NaN \u003d\u003e out \u003d -1\n    __ Fcmp(in1, 0.0);\n    __ Cset(out, vc); // if in1 !\u003d NaN \u003d\u003e out \u003d 1, otherwise both are NaNs \u003d\u003e out \u003d 0\n    __ B(\u0026end);\n\n    // in0 \u003d\u003d in1 or if one of the inputs is +0 and the other is -0\n    __ Bind(\u0026equal);\n    __ Fcmp(in0.V1D(), in1.V1D());\n    __ B(hi, \u0026neg_one);  // in0 is -0, in1 is +0 \u003d\u003e out \u003d -1\n    __ Cset(out, mi);    // if in0 is +0 and in1 is -0 \u003d\u003e out \u003d 1, otherwise out \u003d 0\n    __ B(\u0026end);\n\n    // if in0 \u003c in1 or if only the 2nd input is NaN or in0 \u003d\u003d -0 and in1 \u003d\u003d +0\n    __ Bind(\u0026neg_one);\n    __ Mov(out, -1);\n\n    __ Bind(\u0026end);",
      "parentUuid": "52ca97ce_82022e46",
      "range": {
        "startLine": 3437,
        "startChar": 1,
        "endLine": 3475,
        "endChar": 18
      },
      "revId": "35692b5cbfb9b9d3b6cd0e220fac99686cee1114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}