{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "80b63ebd_b4d6d166",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-25T09:59:45Z",
      "side": 1,
      "message": "We\u0027re not getting any SDK stability checks here, right? I wonder if we can add something more to catch any thoughtless API changes. E.g. add an interface class `PreRebootManagerApi` so that any API change needs to be done in an extra file that only contains the API. Or is there a better way?\n\nIt\u0027d also be nice to verify that the classes used in the API are public or system API, but I\u0027ve no idea how to do that.",
      "range": {
        "startLine": 36,
        "startChar": 68,
        "endLine": 37,
        "endChar": 9
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cee36e4_8b6ba0a9",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-25T09:59:45Z",
      "side": 1,
      "message": "Since this is an unusual kind of stable API it\u0027s worth an explanation, i.e. that it\u0027s stability from one version of the ART module to another, and how much they can differ in time.",
      "range": {
        "startLine": 36,
        "startChar": 67,
        "endLine": 37,
        "endChar": 10
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdfa3fd0_6fd941d8",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-25T14:37:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cee36e4_8b6ba0a9",
      "range": {
        "startLine": 36,
        "startChar": 67,
        "endLine": 37,
        "endChar": 10
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7194edd9_c69e9492",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-25T14:37:05Z",
      "side": 1,
      "message": "\u003e E.g. add an interface class PreRebootManagerApi so that any API change needs to be done in an extra file that only contains the API.\n\nI actually thought about the same, but I didn\u0027t find a good way to do it. We only expose a static method here, but Java doesn\u0027t support defining an interface for static methods. We can make the method non-static, but then we will have to have a constructor, which is one more API and Java doesn\u0027t support interface for constructors either, so it doesn\u0027t solve the problem.\n\n\u003e Or is there a better way?\n\nUnfortunately, I can\u0027t think of a better way. A comment is the best we can do here.\n\n\u003e It\u0027d also be nice to verify that the classes used in the API are public or system API.\n\nSorry, could you elaborate this? What else can this class potentially use?",
      "parentUuid": "80b63ebd_b4d6d166",
      "range": {
        "startLine": 36,
        "startChar": 68,
        "endLine": 37,
        "endChar": 9
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08211a0e_580aee35",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-26T15:35:37Z",
      "side": 1,
      "message": "\u003e but Java doesn\u0027t support defining an interface for static methods\n\nYeah, that\u0027s a pity. But the constructor can have strictly no arguments, so its signature consists purely of `PreRebootManager` itself. Sure, it\u0027s one more API, but a very restricted one, so I think it\u0027s worth it to get type checking (through a check like `PreRebootManagerApi.getClass().isAssignableFrom(preRebootManagerClass)` in the reflection code, I gather).\n\n\u003e Sorry, could you elaborate this? What else can this class potentially use?\n\nI was thinking if someone added a call to some internal thing in e.g. Package Manager. But we do get system API checks for V here so that can\u0027t happen.",
      "parentUuid": "7194edd9_c69e9492",
      "range": {
        "startLine": 36,
        "startChar": 68,
        "endLine": 37,
        "endChar": 9
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0e72298_b9c85961",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-26T15:35:37Z",
      "side": 1,
      "message": "Thanks. Since this version mixing is a consideration that needs to be taken into consideration elsewhere in the code as well (e.g. DexUseManager), it\u0027s worth a discussion in a README as well, but not necessarily in this CL.",
      "parentUuid": "fdfa3fd0_6fd941d8",
      "range": {
        "startLine": 36,
        "startChar": 67,
        "endLine": 37,
        "endChar": 10
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "682cb558_353c208a",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-26T17:16:28Z",
      "side": 1,
      "message": "I think the goal of my design is to minimize such consideration. The only consideration I can see within the Java code is on this PreRebootDexoptManager interface.\n\nThe consideration for DexUseManager would always be there even if it wasn\u0027t for Pre-reboot Dexopt because we\u0027ll be running a new DexUseManager against an old protobuf after the reboot anyway, and the case in Pre-reboot Dexopt is not different from that.\n\nInteractions with system APIs (PackageManagerLocal, etc.) are not new considerations either because the new version of ART Service needs to talk to the old platform after the reboot anyway.\n\nThose above are mentioned in the design doc. If you see any additional considerations (\"additional considerations\" here means new considerations that weren\u0027t there but introduced by Pre-reboot Dexopt) that I\u0027m missing, please let me know. I\u0027d like to try my best to eliminate those rather than documenting them.",
      "parentUuid": "e0e72298_b9c85961",
      "range": {
        "startLine": 36,
        "startChar": 67,
        "endLine": 37,
        "endChar": 10
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d414dfcc_a8caaf26",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-26T17:16:28Z",
      "side": 1,
      "message": "Alright, added an interface.\n\nI can\u0027t do a check like `isAssignableFrom` with the old interface against the new class. When the classloader loads the new `service-art.jar`, it loads not only the new class but also the new interface. The runtime regards the new class implementing the new interface rather than the old one, so the `isAssignableFrom` check will fail.\n\nHowever, making the method signature change a little bit harder by forcing one to edit two files does have a value.",
      "parentUuid": "08211a0e_580aee35",
      "range": {
        "startLine": 36,
        "startChar": 68,
        "endLine": 37,
        "endChar": 9
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bdfa084_94e7d6fa",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-29T15:23:58Z",
      "side": 1,
      "message": "I see. So we\u0027d need to do duck typing to check it. I don\u0027t know if there\u0027s any reasonably easy way to accomplish that.",
      "parentUuid": "d414dfcc_a8caaf26",
      "range": {
        "startLine": 36,
        "startChar": 68,
        "endLine": 37,
        "endChar": 9
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae1cccaa_bebcb7fc",
        "filename": "libartservice/service/java/com/android/server/art/prereboot/PreRebootManager.java",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-29T15:23:58Z",
      "side": 1,
      "message": "\u003e I think the goal of my design is to minimize such consideration.\n\nThat\u0027s good, but the fact that another version of `service-art.jar` gets loaded will always be there and will need awareness. It has implications and causes uncertainties so it deserves a discussion at the \"root\" level. Even if the existing API boundaries do a lot of the heavy lifting, the code reader needs to know that\u0027s the case, and what the remaining gaps are.\n\nThat they\u0027re discussed in the design doc is imo not enough, for several reasons.",
      "parentUuid": "682cb558_353c208a",
      "range": {
        "startLine": 36,
        "startChar": 67,
        "endLine": 37,
        "endChar": 10
      },
      "revId": "774c6a02efe78b9d752b8c15770ccb948d69bd2f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}