{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a9219f60_f333489b",
        "filename": "build/README.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-24T18:57:52Z",
      "side": 0,
      "message": "The intention here is to give the reader enough information to ensure the ART module gets built from source, also in cases like partners taking a preload train (they may still need to build from source for debugging and internal testing). Even though the SDK may always be taken from source, the module may not, right?\n\nSo what would one need to do to build it completely from source, no matter what?",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "9e9eef70196107812aaa019e28bc64df3390e81e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0b23422_f52b6ae7",
        "filename": "build/README.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-04-24T21:15:05Z",
      "side": 0,
      "message": "Would my understanding be correct that post trunk stable and the different release configurations available, we do not have sufficient documentation on how developers should build art module from source. As more concrete examples\n\n1. internal: ap2a.scl uses [prebuilt art](https://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:vendor/google/release/build_config/ap2a.scl;l\u003d21?q\u003dart.google.contributions.prebuilt\u0026ct\u003dos\u0026sq\u003drepo:googleplex-android%2Fplatform%2Fsuperproject%2Fmain%20b:main)\nFor this release configuration, what is the recommended approach for google engineers to build art module from source?\n\n2. partners: ap31.scl uses [prebuilt art](https://partner-android.googlesource.com/platform/vendor/partner_modules/build/+/refs/heads/v-aml-prebuilt-release/release/build_config/ap31.scl#30)\nFor this release configuration, what is the recommended approach for partner engineers to build art module from source?\n\nTill now, the \"uncodified\" recommendation has been to unset the `RELEASE_APEX_CONTIRBUTIONS_ART` build flag manually from the .scl file\n\nSince most active development happens in `trunk_staging`, would manually modifying the .scl for troubleshooting/development be an acceptable workflow? Alternatively, we could try to have a convenient command line argument (`ART_MODULE_BUILD_FROM_SOURCE` for consistency) override the build flag under the hood, but it might be a little complicated to implement.",
      "parentUuid": "a9219f60_f333489b",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "9e9eef70196107812aaa019e28bc64df3390e81e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b6dd949_626506c9",
        "filename": "build/README.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-25T18:50:49Z",
      "side": 0,
      "message": "Google engineers mostly work on release configs where prebuilts aren\u0027t enabled,  and switching ART to source on e.g. `ap2a` would rarely do what one would want. If someone is on such a release config where prebuilts are enabled, the right approach is probably to switch to a different one. We know with certainty that `trunk_staging` always will use sources, right? Then it seems appropriate that the instructions here should just instructs the reader to lunch that config.\n\nHowever, partners may need to do it for troubleshooting, as mentioned. In that case switching release config is probably not the right thing to do, among other things because it\u0027d switch all modules to source, not just ART. I think for this case we\u0027d like to provide instructions for them, but it should be rare enough that it\u0027s ok to change a file to do it.\n\nHence step #2 here could have two variants: The first for switching everything to source by lunching `trunk_staging`, and the second (if keeping the release config is a must) to just switch ART to source through file modification.\n\nBtw, is there a convenient way to check ART is using prebuilts or not, like dumping the current release config to stdout? An instruction for how to do that would be nice too.",
      "parentUuid": "b0b23422_f52b6ae7",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "9e9eef70196107812aaa019e28bc64df3390e81e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0efd9cb5_732cc9a6",
        "filename": "build/README.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-04-25T23:15:07Z",
      "side": 0,
      "message": "\u003e Hence step #2 here could have two variants: The first for switching everything to source by lunching trunk_staging, and the second (if keeping the release config is a must) to just switch ART to source through file modification.\n\nAcknowledged, I have updated step #2 with instructions for these two variants of ART development.\n\n\u003e Btw, is there a convenient way to check ART is using prebuilts or not, like dumping the current release config to stdout?\n\nOne option would be to be run `get_build_var RELEASE_APEX_CONTRIBUTIONS_ART`. I have added this to the documentation as well.",
      "parentUuid": "6b6dd949_626506c9",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "9e9eef70196107812aaa019e28bc64df3390e81e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}