{
  "comments": [
    {
      "key": {
        "uuid": "d9ae2c65_2dd8ce61",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-06-03T16:31:01Z",
      "side": 1,
      "message": "to ensure a method has not been inlined.",
      "range": {
        "startLine": 7,
        "startChar": 19,
        "endLine": 7,
        "endChar": 36
      },
      "revId": "ab5143cbf4a683400ba27c02e61166eea5753d79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_c1dea5fa",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-06-03T16:20:40Z",
      "side": 1,
      "message": "the goal is not to skip inlining but to verify that if \"noinline\" mark is present the function is not inlined.  \n\nthis should be in kIsDebugBuild, and handle similarly to the $inline$ tag",
      "range": {
        "startLine": 63,
        "startChar": 7,
        "endLine": 68,
        "endChar": 9
      },
      "revId": "ab5143cbf4a683400ba27c02e61166eea5753d79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a97860_11bc0f27",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-06-03T16:43:09Z",
      "side": 1,
      "message": "Ooooooooooooooooooooh okay. I got it wrong.",
      "parentUuid": "99a8345d_c1dea5fa",
      "range": {
        "startLine": 63,
        "startChar": 7,
        "endLine": 68,
        "endChar": 9
      },
      "revId": "ab5143cbf4a683400ba27c02e61166eea5753d79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_e14de18f",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-06-03T15:56:30Z",
      "side": 1,
      "message": "Why, please tell me why moving this in the for makes 004-Signal to eat ALL THE AVAILABLE RAM AND CRASH THE COMPUTER? That makes absolutely NO SENSE to me. I spent HOURS understanding this!",
      "range": {
        "startLine": 79,
        "startChar": 5,
        "endLine": 79,
        "endChar": 25
      },
      "revId": "ab5143cbf4a683400ba27c02e61166eea5753d79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a97860_d1abd70a",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-06-03T16:20:40Z",
      "side": 1,
      "message": "I don\u0027t understand the question... in what \"for\"? This is already in the for from L58.",
      "parentUuid": "99a8345d_e14de18f",
      "range": {
        "startLine": 79,
        "startChar": 5,
        "endLine": 79,
        "endChar": 25
      },
      "revId": "ab5143cbf4a683400ba27c02e61166eea5753d79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a97860_51ba872f",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-06-03T16:43:09Z",
      "side": 1,
      "message": "Exactly. Why can\u0027t we write this line in the 3rd part of the for L58 like this:\n\n    for (HInstruction* instruction \u003d block-\u003eGetFirstInstruction(); instruction !\u003d nullptr; instruction \u003d instruction-\u003eGetNext()) {\n\n?",
      "parentUuid": "b9a97860_d1abd70a",
      "range": {
        "startLine": 79,
        "startChar": 5,
        "endLine": 79,
        "endChar": 25
      },
      "revId": "ab5143cbf4a683400ba27c02e61166eea5753d79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_cde81af2",
        "filename": "test/422-type-conversion/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 629,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-06-03T16:31:01Z",
      "side": 1,
      "message": "Please keep the\n\n  if (doThrow) throw new Error();\n\nbits (here and elsewhere)!  It\u0027s the trick that (tries to) prevent inlining.",
      "range": {
        "startLine": 629,
        "startChar": 48,
        "endLine": 629,
        "endChar": 49
      },
      "revId": "ab5143cbf4a683400ba27c02e61166eea5753d79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}