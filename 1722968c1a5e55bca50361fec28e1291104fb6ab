{
  "comments": [
    {
      "key": {
        "uuid": "10ca3fde_7bf0636d",
        "filename": "test/083-compiler-regressions/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-09-29T20:15:54Z",
      "side": 1,
      "message": "Would you mind writing the test in a self-contained run-test? The bigger this test grows, the more difficult it will be to diagnose things (plus if one test fails, we\u0027ll loose coverage on the ones following).",
      "range": {
        "startLine": 41,
        "startChar": 8,
        "endLine": 41,
        "endChar": 21
      },
      "revId": "1722968c1a5e55bca50361fec28e1291104fb6ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0ec287c_447bc063",
        "filename": "test/083-compiler-regressions/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-30T10:46:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10ca3fde_7bf0636d",
      "range": {
        "startLine": 41,
        "startChar": 8,
        "endLine": 41,
        "endChar": 21
      },
      "revId": "1722968c1a5e55bca50361fec28e1291104fb6ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "303103d2_9676f255",
        "filename": "test/083-compiler-regressions/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 9872,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-09-29T18:30:03Z",
      "side": 1,
      "message": "I believe this should be fine even without the synchronized blocks.  State is declared volatile and values is always accessed by one thread at a time.  The read into vs2 should be treated as a lock acquisition, which kills all available expressions.\n\nIf this is currently failing, there are in a sense two bugs:\n\n1) Locks are not handled correctly, and\n\n2) volatile reads are not handled correctly.\n\nBoth of these are probably caused by the same core issue now, but perhaps not in the future.\n\nI would split this into two similar tests:  One is like this one without the synchronized blocks.  The other is like the first, except state is not volatile and instead all accesses to state are within a synchronized block.  It\u0027s also OK to leave this as a third test, but I would emphasize the ones that can fail in response to a single failure in the analysis.  This one seems to require two similar failures.",
      "range": {
        "startLine": 9850,
        "startChar": 2,
        "endLine": 9872,
        "endChar": 3
      },
      "revId": "1722968c1a5e55bca50361fec28e1291104fb6ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0e76c92_059ed43d",
        "filename": "test/083-compiler-regressions/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 9872,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-29T18:38:38Z",
      "side": 1,
      "message": "I though volatile load/store doesn\u0027t affect the visibility of non-volatile fields. If it does, I\u0027ll also need to fix the processing of volatile IGET/IPUT in GVN.",
      "parentUuid": "303103d2_9676f255",
      "range": {
        "startLine": 9850,
        "startChar": 2,
        "endLine": 9872,
        "endChar": 3
      },
      "revId": "1722968c1a5e55bca50361fec28e1291104fb6ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90f63048_df48bb27",
        "filename": "test/083-compiler-regressions/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 9872,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-09-29T18:50:51Z",
      "side": 1,
      "message": "They do.  They contribute to the \"synchronization order\" (http://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.4) just like lock acquisitions and releases.  This changed with the 2005 memory model revision.\n\nThe basic principle is that any code that has races only on volatiles and locks (i.e. that disallows simultaneous access to any other variables unless they are all read accesses) has sequentially consistent, i.e. interleaving semantics.  Your test code without the synchronized blocks satisfies that constraint.",
      "parentUuid": "f0e76c92_059ed43d",
      "range": {
        "startLine": 9850,
        "startChar": 2,
        "endLine": 9872,
        "endChar": 3
      },
      "revId": "1722968c1a5e55bca50361fec28e1291104fb6ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}