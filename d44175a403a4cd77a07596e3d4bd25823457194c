{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd03c45_71cc68f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "A reminder to remove this before submission, as well as reword the notes regarding VIXL update.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 5
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cf7290e_a34c4f6b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "I think it would be useful to put together a script with all the necessary steps to set up an FVP device and run ART tests on it. Then you could put the script invocation in every SVE commit. That script should also mention where to increase timeouts in ART tests.\n\nI know this is more work, so let\u0027s discuss this idea with others before implementing.",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 32
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e048d3be_f4a79603",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-12-11T17:09:56Z",
      "side": 1,
      "message": "Removed the unneeded \"CouldUseUnpredicatedVersion\". PTAL.",
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "609f304d_eae42fcd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "On the whole, LGTM. I confirm that I tested this CL (together with 3 subsequent CLs) as `testrunner.py --target --64 --optimizing` on fvp-eng, and all test passed (with increased timeouts).",
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4887eb1d_cb843b17",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 6890,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "This code appear to be the same as in VecNEONAddress, would it make sense to factor out the common part?",
      "range": {
        "startLine": 6878,
        "startChar": 0,
        "endLine": 6890,
        "endChar": 47
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8f72930_d224a290",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "Should this be moved to https://r.android.com/c/1492887 and set to false in this CL?",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 44
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09644565_4b27b744",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 9
      },
      "lineNbr": 503,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "\"loop iteration execution\"? Otherwise I don\u0027t quite get the meaning.",
      "range": {
        "startLine": 503,
        "startChar": 18,
        "endLine": 503,
        "endChar": 53
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a44fcdc_40900590",
        "filename": "compiler/optimizing/code_generator_vector_arm64_neon.cc",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "There is common code between NEON/SVE/ARM64 variants of CanEncodeConstantAsImmediate and EncodableConstantOrRegister. I assume they will diverge in the future, otherwise it might be better to pass a  boolean \"is SVE\" parameter to avoid code duplication.",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 55,
        "endChar": 3
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87f9a8bd_038a0b7b",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 9
      },
      "lineNbr": 620,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "Drop?",
      "range": {
        "startLine": 620,
        "startChar": 20,
        "endLine": 620,
        "endChar": 26
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f512d06_0d0eb376",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 9
      },
      "lineNbr": 620,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "I don\u0027t understand this comment. There are a few cases above with Fmul (e.g. line 659) that have StrictNaNPropagation, but they don\u0027t have a similar comment. I guess that Fdiv assumes it instead of accepting a parameter, but that\u0027s a VIXL (external/vixl) limitation, no?",
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75789d22_c3cf98a5",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 9
      },
      "lineNbr": 1088,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "Why are the two Z-regs allocated in such different ways? Pardon my ART ignorance if that is common knowledge. :)",
      "range": {
        "startLine": 1086,
        "startChar": 0,
        "endLine": 1088,
        "endChar": 66
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca424351_fbeebe50",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 9
      },
      "lineNbr": 1093,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "Could you use SEL instead of MOV? I mean something like this:\n\n  DUP tmp0, 0\n  SEL tmp1, preg, left, tmp0\n  SEL tmp0, preg, right, tmp0",
      "range": {
        "startLine": 1090,
        "startChar": 0,
        "endLine": 1093,
        "endChar": 45
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91abb35f_ec8f7993",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 9
      },
      "lineNbr": 1272,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "I\u0027m not familiar with register allocator implementation in ART, but this looks suspicious: if we cannot book a predicate register, why would we book a core register instead?",
      "range": {
        "startLine": 1269,
        "startChar": 0,
        "endLine": 1272,
        "endChar": 50
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca009164_276eed0d",
        "filename": "compiler/optimizing/code_generator_vector_arm64_sve.cc",
        "patchSetId": 9
      },
      "lineNbr": 1303,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "Is it the same hack as on line 1272? Then a helper function with a comment seems useful.",
      "range": {
        "startLine": 1303,
        "startChar": 0,
        "endLine": 1303,
        "endChar": 50
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c76ef859_7364e4e3",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 9
      },
      "lineNbr": 337,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "This looks like it could use a helper function (if there are checks like this in the future).",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 337,
        "endChar": 60
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a58a091e_dc0a31f9",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 9
      },
      "lineNbr": 1238,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "Just curious, what does \"ao\" stand for?",
      "range": {
        "startLine": 1238,
        "startChar": 25,
        "endLine": 1238,
        "endChar": 27
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f114f8b0_b069edbe",
        "filename": "compiler/optimizing/loop_optimization.h",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-12-24T15:20:33Z",
      "side": 1,
      "message": "Remove one space.",
      "range": {
        "startLine": 83,
        "startChar": 33,
        "endLine": 83,
        "endChar": 35
      },
      "revId": "d44175a403a4cd77a07596e3d4bd25823457194c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}