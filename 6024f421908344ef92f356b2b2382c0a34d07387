{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1ab0f915_60ed4f8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-19T09:04:51Z",
      "side": 1,
      "message": "typo (I think \"assembler\" would be better than \"MacroAssembler\" here.)",
      "range": {
        "startLine": 7,
        "startChar": 36,
        "endLine": 7,
        "endChar": 49
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e652c988_6df2b973",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "Partial review. Took a look at `compiler/utils/riscv64/assembler_riscv64.h`",
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eea1edb_e5297eb1",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 493,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-16T08:01:07Z",
      "side": 1,
      "message": "There is also the \"RISC-V Code Size Reduction\" spec that reclassifies the below instructions as \"Zca\" and \"Zcd\" (with \"Zcf\" not applicable to RV64) and introduces additional 16-bit instructions under \"Zcb\".\n\nAre you planning to add the \"Zcb\" instructions as well? (Note that I\u0027m just adding the \"Zbb\" `sext`/`zext` instructions that the \"Zcb\" `sext`/`zext` map to with https://android-review.googlesource.com/2965283 .)",
      "range": {
        "startLine": 493,
        "startChar": 2,
        "endLine": 493,
        "endChar": 53
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "742dd722_4624b427",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2115,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "Can you provide comments explaining these extract offset methods and their names? We want to grab `offset`, ignore the last two bits (equivalent to scaling down by 4), and rearrange it so that we have `{offset[5], offset[4:2], offset[7:6]}`",
      "range": {
        "startLine": 2115,
        "startChar": 28,
        "endLine": 2115,
        "endChar": 46
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "158b9b86_3a5ac3d0",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2145,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "inconsistent naming vs the previous method",
      "range": {
        "startLine": 2145,
        "startChar": 4,
        "endLine": 2145,
        "endChar": 18
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a33ca7_363a331f",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2146,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "extra space",
      "range": {
        "startLine": 2146,
        "startChar": 18,
        "endLine": 2146,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44edf921_ac84c179",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2157,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 2157,
        "startChar": 4,
        "endLine": 2157,
        "endChar": 18
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "171b5ca7_712647aa",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2167,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "Maybe add a comment that `0` is reserved",
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f392781_6d832381",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2168,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "Wouldn\u0027t this be `IsUint\u003c6\u003e(uimm)`?",
      "range": {
        "startLine": 2168,
        "startChar": 25,
        "endLine": 2168,
        "endChar": 72
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30472d9e_a2bdd6ba",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2168,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-16T17:11:21Z",
      "side": 1,
      "message": "No, it\u0027s not. `IsUint\u003c6\u003e(uimm)` is [0, 0x3f] and we need [0, 0x1f] and [0xfffe0, 0xfffff], corresponding to values passed to the non-C `Lui()`.\n\nDo you want to suggest improvements to the comment above?",
      "parentUuid": "2f392781_6d832381",
      "range": {
        "startLine": 2168,
        "startChar": 25,
        "endLine": 2168,
        "endChar": 72
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "441a18a1_361cde70",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2349,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "Since `opcode` is guaranteed to be `2`, not sure if we could have `constexpr uint32_t opcode \u003d 0b10u;` after the DCHECKs. Might be fine to keep as parameter for the consistency with the other methods.",
      "range": {
        "startLine": 2349,
        "startChar": 64,
        "endLine": 2349,
        "endChar": 79
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "774696fc_d6446088",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2470,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "This is either `offset` or `shmat[5] | funct2`",
      "range": {
        "startLine": 2470,
        "startChar": 14,
        "endLine": 2470,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dac2177_296800b5",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2470,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-16T17:11:21Z",
      "side": 1,
      "message": "That\u0027s true but it\u0027s also documented simply as `offset` in the section \"16.2 Compressed Instruction Formats\".",
      "parentUuid": "774696fc_d6446088",
      "range": {
        "startLine": 2470,
        "startChar": 14,
        "endLine": 2470,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e23e108a_1762d8c0",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2470,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T18:41:44Z",
      "side": 1,
      "message": "Ack, fine to keep as-is then.",
      "parentUuid": "6dac2177_296800b5",
      "range": {
        "startLine": 2470,
        "startChar": 14,
        "endLine": 2470,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1834821c_55ea7e8f",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2492,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "nit: in the Extract methods, this was named `u_offset`.",
      "range": {
        "startLine": 2492,
        "startChar": 4,
        "endLine": 2492,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d912a49d_5ebf2f28",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2495,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "Maybe we can name these `immH3` and `immL5` similar to `EmitCI`",
      "range": {
        "startLine": 2495,
        "startChar": 4,
        "endLine": 2495,
        "endChar": 18
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c48d76ee_1343b404",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2506,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "nit: this can be `rd` too. In fact, in the three call sites of this CL, we use `rd`",
      "range": {
        "startLine": 2506,
        "startChar": 64,
        "endLine": 2506,
        "endChar": 69
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bb07afe_c46925f7",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2528,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T16:52:58Z",
      "side": 1,
      "message": "`u_offset`",
      "range": {
        "startLine": 2528,
        "startChar": 13,
        "endLine": 2528,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92152800_3f302819",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2528,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-16T17:11:21Z",
      "side": 1,
      "message": "We have `uimm`, `nzuimm` and `nzimm`, so why not `uoffset`? Maybe we should change all `u_offset` to `uoffset`?",
      "parentUuid": "1bb07afe_c46925f7",
      "range": {
        "startLine": 2528,
        "startChar": 13,
        "endLine": 2528,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a19e4712_d5b122fa",
        "filename": "compiler/utils/riscv64/assembler_riscv64.h",
        "patchSetId": 7
      },
      "lineNbr": 2528,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-16T18:41:44Z",
      "side": 1,
      "message": "all `uoffsets` are fine by me. I\u0027d rather not have two different conventions in the same file if possible",
      "parentUuid": "92152800_3f302819",
      "range": {
        "startLine": 2528,
        "startChar": 13,
        "endLine": 2528,
        "endChar": 20
      },
      "revId": "6024f421908344ef92f356b2b2382c0a34d07387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}