{
  "comments": [
    {
      "key": {
        "uuid": "dd10e5f4_ef501232",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-07T14:13:44Z",
      "side": 1,
      "message": "If interrupted, we essentially need SideEffects::FieldReadOfType(., /* is_volatile */ true). That\u0027s not \"NoHeapSideEffect\".",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47c855a_62bf0731",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-07T23:10:57Z",
      "side": 1,
      "message": "+1, it\u0027s essentially a volatile read/write of that field.\n\nIt only needs to be globally ordered with respect to other volatile-like operations (synchronization actions/synchronizes-with).\n-----\n\nI think it\u0027s effectively equivalent to this in Java\n\n   volatile boolean is_interrupted;\n   static boolean interrupted() {\n     Thread t \u003d Thread.currentThread();\n     boolean i \u003d t.is_interrupted;\n     if (i) t.is_interrupted \u003d false;\n     return i; \n   }\n\nand I suppose this variant is slower than the intrinsics if we always have TR and don\u0027t need to load the Thread object",
      "parentUuid": "dd10e5f4_ef501232",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7dbde0dc_da70b821",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-09T16:21:20Z",
      "side": 1,
      "message": "All of that is too fine grain for our simple variant of side effects.",
      "parentUuid": "a47c855a_62bf0731",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a581cd4_42e598f8",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-09T16:21:20Z",
      "side": 1,
      "message": "It isn\u0027t a Java heap read.The field is in native memory.",
      "parentUuid": "dd10e5f4_ef501232",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c461398f_a0017fa6",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-10T09:57:37Z",
      "side": 1,
      "message": "It doesn\u0027t matter in what memory the field is. If the spec says that the interrupting thread synchronizes with the interrupted thread, we need to have correct semantics, i.e. stores in the interrupting thread before Thread.interrupt() must be visible to the interrupted thread after checking Thread.interrupted().",
      "parentUuid": "2a581cd4_42e598f8",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f123e61_8f42c4bd",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-12T13:57:52Z",
      "side": 1,
      "message": "Sure, I\u0027m just saying the current compiler notion of side effects is not the best place to express this. The side effects in the compiler are representing effects on the Java heap.",
      "parentUuid": "c461398f_a0017fa6",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91b1738a_317d72ae",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-12T14:29:55Z",
      "side": 1,
      "message": "The memory visibility of the Java heap is directly affected by the synchronization, so I don\u0027t see why you want to exclude it from the \"side effects in the compiler [] representing effects on the Java heap.\"",
      "parentUuid": "5f123e61_8f42c4bd",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e360ec9c_b901f55e",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T14:15:01Z",
      "side": 1,
      "message": "OK, that\u0027s mostly because I know how the side effects are being used in the compiler :) But I get your point, comment removed.",
      "parentUuid": "91b1738a_317d72ae",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 86
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c937fe8_402d631d",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-07T23:10:57Z",
      "side": 1,
      "message": "Thread.interrupted offers synchronization similar to the fences, why are the fences marked kCanThrow? Does that provide some sort of synchronization guarantee?",
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0091ea48_080510c6",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-09T16:21:20Z",
      "side": 1,
      "message": "You can double check if it\u0027s needed. Maybe it\u0027s not as the null check is explicit in the graph.",
      "parentUuid": "6c937fe8_402d631d",
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3ee7647_7bd65276",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 2771,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-07T14:13:44Z",
      "side": 1,
      "message": "Or move inside the if-block above?",
      "range": {
        "startLine": 2771,
        "startChar": 59,
        "endLine": 2771,
        "endChar": 74
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78c0082e_b0090b95",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 2771,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-09T16:21:20Z",
      "side": 1,
      "message": "WDYM? It\u0027s already in the if block above line 2767.",
      "parentUuid": "b3ee7647_7bd65276",
      "range": {
        "startLine": 2771,
        "startChar": 59,
        "endLine": 2771,
        "endChar": 74
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37d60a1d_598fbad8",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 2771,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-10T09:57:37Z",
      "side": 1,
      "message": "I mean reordering the \"Bind(\u0026done)\" above and \"dmb(ish)\" below.",
      "parentUuid": "78c0082e_b0090b95",
      "range": {
        "startLine": 2771,
        "startChar": 59,
        "endLine": 2771,
        "endChar": 74
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23651768_08a5ac65",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 2771,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-04-10T17:41:05Z",
      "side": 1,
      "message": "Indeed, if we want to preserve the seq_cst semantics, I think we can at most move it in. Consider if each of 2 threads does, form a state in which both flags are set:\n\ninterruped();\nother.isInterrupted();\n\nWithout that fence, I think both threads can see a result of true.\n\nMoving it in is probably OK, since the only thread that can clear the flag is us, and therefore a load of false means we must have seen our own write (or the initializing one), which doesn\u0027t add any visibility guarantees",
      "parentUuid": "37d60a1d_598fbad8",
      "range": {
        "startLine": 2771,
        "startChar": 59,
        "endLine": 2771,
        "endChar": 74
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3b9a5d3_b6c7686b",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 2771,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T14:15:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23651768_08a5ac65",
      "range": {
        "startLine": 2771,
        "startChar": 59,
        "endLine": 2771,
        "endChar": 74
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73110e9e_c49a4fe8",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3040,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-07T14:13:44Z",
      "side": 1,
      "message": "LDAR and STLR always have offset #0, so we\u0027re making the macro assembler materialize the TR+offset twice. We could do that explicitly and save an instruction.",
      "range": {
        "startLine": 3040,
        "startChar": 2,
        "endLine": 3040,
        "endChar": 20
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a6d2304_6cc5917e",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3040,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T14:15:01Z",
      "side": 1,
      "message": "Ah, actually I hit a static_assert with Ldar. Done.",
      "parentUuid": "73110e9e_c49a4fe8",
      "range": {
        "startLine": 3040,
        "startChar": 2,
        "endLine": 3040,
        "endChar": 20
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ac012f6_068c05dc",
        "filename": "compiler/optimizing/intrinsics_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-03-30T18:41:37Z",
      "side": 1,
      "message": "How long are we maintaining the vixl and non vixl versions for? Are we testing both of them?",
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40e86ee1_8b076cc0",
        "filename": "compiler/optimizing/intrinsics_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-03-30T21:40:49Z",
      "side": 1,
      "message": "The vixl one is continuously tested. The non-vixl one not anymore. We\u0027re using it as a backup for now.",
      "parentUuid": "3ac012f6_068c05dc",
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f380bf97_55d016f9",
        "filename": "compiler/optimizing/intrinsics_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 3170,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-07T14:13:44Z",
      "side": 1,
      "message": "/* far_target */ false",
      "range": {
        "startLine": 3170,
        "startChar": 38,
        "endLine": 3170,
        "endChar": 39
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e299034c_46c394aa",
        "filename": "compiler/optimizing/intrinsics_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 3170,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T14:15:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f380bf97_55d016f9",
      "range": {
        "startLine": 3170,
        "startChar": 38,
        "endLine": 3170,
        "endChar": 39
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1098172_d1faf187",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3124,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-07T14:13:44Z",
      "side": 1,
      "message": "Remove the extra line.",
      "range": {
        "startLine": 3124,
        "startChar": 0,
        "endLine": 3124,
        "endChar": 0
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41b331db_06f7af73",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 3124,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T14:15:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1098172_d1faf187",
      "range": {
        "startLine": 3124,
        "startChar": 0,
        "endLine": 3124,
        "endChar": 0
      },
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b00ade80_59c28809",
        "filename": "runtime/thread.cc",
        "patchSetId": 5
      },
      "lineNbr": 2270,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-03-30T18:41:37Z",
      "side": 1,
      "message": "This can now interleave with SetInterrupted(e.g. false), leading to a weird case that NotifyLocked happens with the interrupt state being false.\n\nBut that seems like it doesn\u0027t matter because NotifyLocked triggers a signal, whose waiters re-read the interrupt state.",
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0f7a9c3_df96fdc8",
        "filename": "runtime/thread.cc",
        "patchSetId": 5
      },
      "lineNbr": 2270,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-03-30T21:40:49Z",
      "side": 1,
      "message": "Correct.",
      "parentUuid": "b00ade80_59c28809",
      "revId": "252e45d81581a431653524617dad1e010e54be6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}