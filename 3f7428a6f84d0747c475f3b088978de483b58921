{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "75d0729a_90eb81aa",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-23T20:48:48Z",
      "side": 1,
      "message": "This now seems inconsistent with the rest of the changes. Though we may want to leave this and fix the rest.\n\nAlso, there are a bunch of comments around thread.cc:1347 that seem to be invalidated by the changes in this file.",
      "range": {
        "startLine": 96,
        "startChar": 36,
        "endLine": 96,
        "endChar": 41
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52515c5e_4ce0e32d",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-10-12T23:43:37Z",
      "side": 1,
      "message": "This is too much for 4KB case. Are we planning on not enabling agnosticism on devices with 32-bit processes? This can have meaningful impact on virtual memory use on 32-bit processes.",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 40
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aad63353_c8900143",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-13T22:40:25Z",
      "side": 1,
      "message": "16k would be arm64-only.",
      "parentUuid": "52515c5e_4ce0e32d",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 40
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "379b2d09_415822ed",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-10-23T19:13:05Z",
      "side": 1,
      "message": "Assertions at instruction_set.cc (https://cs.android.com/android/platform/superproject/main/+/main:art/libartbase/arch/instruction_set.cc;drc\u003d4184f23701a64e9902ffced803968fcc5601764b;l\u003d125) appear to require that the value is page-aligned.\n\nAnalyzing the code base, I\u0027ve not been able to convince myself it is indeed required by anything other than these assertions.\n\nIf there is no requirement for these values to be page-aligned, possibly the original values can be used for page size agnostic builds.",
      "parentUuid": "aad63353_c8900143",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 40
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49a22407_08bc2577",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-23T20:48:48Z",
      "side": 1,
      "message": "Amplifying earlier comments, it seems to me all changes here should be ARM64-only. AFAICT, x86 doesn\u0027t even support 16K pages.",
      "parentUuid": "379b2d09_415822ed",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 40
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ea87dc9_51665fcd",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-10-23T21:02:41Z",
      "side": 1,
      "message": "I agree - if changed, it should be just for ARM64. I will update this.\n\nHowever, it appears possible that all the changes in the stack overflow gap aren\u0027t needed at all and can be removed - if indeed there is no requirement for the gap size to be aligned to page size - I\u0027m looking into confirming this.",
      "parentUuid": "49a22407_08bc2577",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 40
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8752a84f_dde096ed",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-10-24T10:28:55Z",
      "side": 1,
      "message": "From the https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/thread.h;l\u003d206;drc\u003d92b8f273fa2232015494e1fb15317ea1db38c587 the stack_begin would be page size aligned as the end of protected region (since the region is protected via page permissions).\n\nThe protection happens at https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/thread.cc;l\u003d4621?q\u003dthread.cc and the kStackOverflowProtectedSize appears unrelated to the kArm64StackOverflowReservedBytes.\n\nstack_end according to https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/thread.h;l\u003d202;drc\u003d92b8f273fa2232015494e1fb15317ea1db38c587 appears to be (stack_begin + kArm64StackOverflowReservedBytes)\n\nIn case of implicit stack overflow checks (e.g. via ldr at https://cs.android.com/android/platform/superproject/main/+/main:art/compiler/optimizing/code_generator_arm64.cc;l\u003d1373;drc\u003d92b8f273fa2232015494e1fb15317ea1db38c587;bpv\u003d1;bpt\u003d1) the gap size doesn\u0027t have to be page size aligned as far as I see: it is used as an offset below from the current stack pointer - to check if the load address will fall into the protection region.\n\nI\u0027m slightly unsure about the explicit stack overflow checks - however it appears that in this mode the stack overflow gap is meant to be used in a way similar to the implicit stack overflow checks case; in which case page size alignment for the gap size isn\u0027t required as well. In any case, explicit stack overflow checks aren\u0027t supported for arm64.\n\nTests including 018-stack-overflow on a 16K system, with the stack overflow gap change reverted, appear to pass without issues.\n\nI\u0027d remove the stack overflow gap changes - the original values will be used. I\u0027d also remove the corresponding assertions in instruction_set.cc.",
      "parentUuid": "1ea87dc9_51665fcd",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 40
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d444e1c_59e74898",
        "filename": "build/art.go",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-10-27T14:20:32Z",
      "side": 1,
      "message": "The alternative version is available for review at https://android-review.googlesource.com/c/platform/art/+/2807815/1",
      "parentUuid": "8752a84f_dde096ed",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 40
      },
      "revId": "3f7428a6f84d0747c475f3b088978de483b58921",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}