{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "03c76e1c_d5905410",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-18T09:38:32Z",
      "side": 1,
      "message": "I find the union nicer to read. Why are you moving away from it?",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 86
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "973827a9_13708aba",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T20:40:14Z",
      "side": 1,
      "message": "I don\u0027t like unions. std::variant is the c++ way to do the same. \n\nIf you really want I can switch back but I think this forces better style.",
      "parentUuid": "03c76e1c_d5905410",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 86
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a24d8db0_d67056a1",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-19T09:15:25Z",
      "side": 1,
      "message": "Yes, I\u0027d really prefer to switch. A common style, which is the one used in this file and in the codebase drastically helps readability.",
      "parentUuid": "973827a9_13708aba",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 86
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "932d9f6d_2cb98477",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-19T16:22:19Z",
      "side": 1,
      "message": "As far as I can tell this is the only `union` use in ART not required for bit-conversion magic or because the in-memory layout is important (e.g. for reading binaries or in asm).\n\nEverywhere else in ART we\u0027ve gradually moved towards a more c++ style of doing things with more explicit and checked types. I think we should do so here as well since I\u0027m changing this type anyway.",
      "parentUuid": "a24d8db0_d67056a1",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 86
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b620d572_0ee8ac5f",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-19T16:28:18Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s true - a \"grep union\" in art/ gives me lots of cases.\n\nNot everyone is familiar with latest C++ style, I certainly aren\u0027t, and I don\u0027t want to raise the barrier to entry for any newcomer in ART.",
      "parentUuid": "932d9f6d_2cb98477",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 86
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b74a7172_c3006ef9",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-19T16:51:20Z",
      "side": 1,
      "message": "https://paste.googleplex.com/6162090596237312 is every use of \u0027union \u0027 after this patch.\n\nI see in code:\n\n- cmsg use\n- linker for oat file\n- dexfile reading\n- dexfile writing\n- JNI \u0026 JVMTI structs\n- GC/class/method-fields used by ASM\n- almost everything else is union used in other contexts\n\nThe only use of union that is possibly an unneeded c-union is one use in dex_method_analysis.h.\n\nHonestly I\u0027d say that c-unions with the bizarre state of unchecked-overlapping fields is more complicated and difficult to understand than the relatively simple, well documented std::variant.\n\nI\u0027d also say that people are probably more likely to be familiar with discriminated-unions like std::variant then the old unsafe c-unions. It has other benefits such as being less confusing when looked at in debuggers and just generally being more explicit.\n\nAlso frankly std::union is a fairly simple struct to understand and I\u0027m the one currently doing work in this area.",
      "parentUuid": "b620d572_0ee8ac5f",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 86
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3f57810_3d64d133",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-18T09:38:32Z",
      "side": 1,
      "message": "Remove",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 480,
        "endChar": 30
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "210a862a_34817fbf",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T20:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3f57810_3d64d133",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 480,
        "endChar": 30
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a3171ac_01008709",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 1095,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-18T09:38:32Z",
      "side": 1,
      "message": "Line too long (here and others below).",
      "range": {
        "startLine": 1095,
        "startChar": 0,
        "endLine": 1095,
        "endChar": 114
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "648ff450_6f270347",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 1095,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T20:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a3171ac_01008709",
      "range": {
        "startLine": 1095,
        "startChar": 0,
        "endLine": 1095,
        "endChar": 114
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "911b494c_567f1db8",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 1813,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T17:55:27Z",
      "side": 1,
      "message": "So this isn\u0027t quite right but I\u0027m honestly not sure how the RTP stuff worked consistently anyway. What\u0027s actually needed is for phis with only phi inputs to be sorted topologically. Phis with non-phi (or phis not being fixed up) must be ordered first. I think I\u0027ll just fix the RTP to handle this.",
      "range": {
        "startLine": 1811,
        "startChar": 0,
        "endLine": 1813,
        "endChar": 0
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cc7d5a5_e141d191",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 1813,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-18T21:50:09Z",
      "side": 1,
      "message": "Does this mean RTP needs to be fixed before this CL is safe?",
      "parentUuid": "911b494c_567f1db8",
      "range": {
        "startLine": 1811,
        "startChar": 0,
        "endLine": 1813,
        "endChar": 0
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d41c42a0_4aba52a5",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 1813,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T23:51:57Z",
      "side": 1,
      "message": "yeah this needs the parent CL or else it breaks LSE by slightly changing the order we create PHIs.",
      "parentUuid": "4cc7d5a5_e141d191",
      "range": {
        "startLine": 1811,
        "startChar": 0,
        "endLine": 1813,
        "endChar": 0
      },
      "revId": "5b8990ec21d9b3d6a7f84556499f8780bb4e4b1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}