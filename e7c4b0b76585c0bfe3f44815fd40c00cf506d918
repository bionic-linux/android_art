{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e7ff92a_de9ae9f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-21T17:19:59Z",
      "side": 1,
      "message": "PTAL.Thanks!",
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6182bd4_293d935a",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 2
      },
      "lineNbr": 811,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-23T11:24:35Z",
      "side": 1,
      "message": "Update comment.\n\nAlso, do you know why it\u0027s being setup so eagerly instead of when the developer actually needs it?",
      "range": {
        "startLine": 811,
        "startChar": 0,
        "endLine": 811,
        "endChar": 47
      },
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8c5bb5c_e09e97e4",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 2
      },
      "lineNbr": 811,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-23T15:58:29Z",
      "side": 1,
      "message": "I actually don\u0027t know. Given that deoptimizing a method installs these stubs anyway I think this is not required. Though I don\u0027t understand single thread deoptimization too well. As far as my understanding goes, single thread deopt is no different from a normal deopt. When we request a deopt of a method, we instrument stacks of all threads and I don\u0027t see where we actually only do one thread at a time. \n\nThe only difference I see is there is global deoptimization which deoptimizes all methods and limited deoptimization which deoptimizes one method. Both global and limited doesn\u0027t need instrumentation stubs to be set up before we want to deoptimize.\n\nDo you think we should simply drop this and try?",
      "parentUuid": "d6182bd4_293d935a",
      "range": {
        "startLine": 811,
        "startChar": 0,
        "endLine": 811,
        "endChar": 47
      },
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d52f0c2_7cd6fe2f",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 2
      },
      "lineNbr": 811,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-23T17:57:15Z",
      "side": 1,
      "message": "Let\u0027s land your change for now, and we can follow-up with removing this entirely, but I think enableSingleThreadDeopt can indeed be a no-op, and it\u0027s at runtime where we would check in the switch interpreter whether we need to continue in the interpreter.",
      "parentUuid": "a8c5bb5c_e09e97e4",
      "range": {
        "startLine": 811,
        "startChar": 0,
        "endLine": 811,
        "endChar": 47
      },
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4922c453_54f270f3",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 2
      },
      "lineNbr": 811,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-01-04T09:50:03Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "5d52f0c2_7cd6fe2f",
      "range": {
        "startLine": 811,
        "startChar": 0,
        "endLine": 811,
        "endChar": 47
      },
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fda36e01_74568f66",
        "filename": "test/common/runtime_state.cc",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-21T17:19:59Z",
      "side": 1,
      "message": "IIUC, when we JIT native methods we generate JITed stubs based on the function short and they are stored in the jni_stubs and ContainsPc doesn\u0027t check for them. So if we call this with native methods this goes into an infinite loop. My Change just exposed this. Since earlier we used to return early because we installed interpreter stubs and that disables any JITing.",
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e62aed7_901a94b4",
        "filename": "test/common/runtime_state.cc",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-23T11:24:35Z",
      "side": 1,
      "message": "Odd, ContainsPc should check for them as it covers the entire JIT space.",
      "parentUuid": "fda36e01_74568f66",
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce802900_b80fac41",
        "filename": "test/common/runtime_state.cc",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-23T15:58:29Z",
      "side": 1,
      "message": "You are right. It was my mistake. I just looked at the JNIStubData but didn\u0027t look further. The code actually exists in the JIT space. The problem was that there are instrumentation stubs installed so we don\u0027t update entry point even though we have compiled code. This wasn\u0027t a problem earlier because for all jvmti tests, we were running interpreter only and GetJitIfEnabled returned nullptr and hence we returned early. I fixed it by checking for entry exit stubs too now.",
      "parentUuid": "2e62aed7_901a94b4",
      "revId": "e7c4b0b76585c0bfe3f44815fd40c00cf506d918",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}