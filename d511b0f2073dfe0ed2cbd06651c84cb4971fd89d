{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0af70578_89f33028",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1989777
      },
      "writtenOn": "2024-06-13T14:34:55Z",
      "side": 1,
      "message": "Polite ping for re-review now that presubmit is passing.",
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "631e0d83_96700702",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-06-14T18:50:17Z",
      "side": 1,
      "message": "Thanks! Sorry it took me sometime to correctly understand CFI to properly review the changes.",
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2321699_e021266c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "Partial review (no x86/x86-64/riscv64).",
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29226f97_33de6327",
        "filename": "runtime/arch/arm/asm_support_arm.S",
        "patchSetId": 8
      },
      "lineNbr": 294,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "We could integrate this code into `art_quick_do_long_jump` to avoid code duplication.\n\nIf we do that, some of the new `CFI_REMEMBER_STATE`/`CFI_RESTORE_STATE_AND_DEF_CFA` pairs shall also become unnecessary (we shall call `art_quick_do_long_jump` before we mess up the stack frame) and can be removed.",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 294,
        "endChar": 40
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff4a1b0a_ee72a22a",
        "filename": "runtime/arch/arm/jni_entrypoints_arm.S",
        "patchSetId": 8
      },
      "lineNbr": 395,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "Remove this space to align `artDeliverPendingExceptionFromCode` with `r0` in the line above. (And keep the `@` comments aligned.)",
      "range": {
        "startLine": 395,
        "startChar": 11,
        "endLine": 395,
        "endChar": 12
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6476e4f0_3f987958",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 8
      },
      "lineNbr": 2470,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "I\u0027d prefer to pop args before the deopt check. (Avoid the ` + /* stack arguments */ 8` below.)",
      "range": {
        "startLine": 2470,
        "startChar": 4,
        "endLine": 2470,
        "endChar": 70
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3481e16b_b35af162",
        "filename": "runtime/arch/arm64/jni_entrypoints_arm64.S",
        "patchSetId": 8
      },
      "lineNbr": 434,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "Fix indentation.",
      "range": {
        "startLine": 434,
        "startChar": 11,
        "endLine": 434,
        "endChar": 12
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20b3ac95_d666eec5",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 8
      },
      "lineNbr": 945,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "Remove obsolete comment.",
      "range": {
        "startLine": 945,
        "startChar": 57,
        "endLine": 945,
        "endChar": 88
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f00f7395_3f07fb61",
        "filename": "runtime/arch/context.h",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "Remove, same below.",
      "range": {
        "startLine": 98,
        "startChar": 45,
        "endLine": 98,
        "endChar": 61
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35345c9e_517dbb93",
        "filename": "runtime/art_method.cc",
        "patchSetId": 8
      },
      "lineNbr": 346,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "We should clear the field to avoid double-delete but I\u0027d prefer a much deeper rewrite of the context ownership.",
      "range": {
        "startLine": 346,
        "startChar": 8,
        "endLine": 346,
        "endChar": 42
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afb97bcd_009320f7",
        "filename": "runtime/thread.h",
        "patchSetId": 8
      },
      "lineNbr": 682,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "`handler` (Please fix the old typo.)",
      "range": {
        "startLine": 682,
        "startChar": 81,
        "endLine": 682,
        "endChar": 87
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "641e777f_a599781a",
        "filename": "runtime/thread.h",
        "patchSetId": 8
      },
      "lineNbr": 692,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-06-19T16:02:46Z",
      "side": 1,
      "message": "Can we remove this field entirely and rewrite the `Context` ownership?\n\nWhen we want to throw/deoptimize, we should construct a new `Context` and hold it with a `std::unique_ptr\u003cContext\u003e` until we\u0027re returning to the stubs - then we `release()` it and let the handwritten assembly use a raw `Context*`. The long jump stub would pass the `Context*` to `artContextCopyForLongJump()` (instead of `Thread* self`) and we would actually delete the context there to avoid unnecessarily keeping it around.",
      "range": {
        "startLine": 692,
        "startChar": 49,
        "endLine": 692,
        "endChar": 66
      },
      "revId": "d511b0f2073dfe0ed2cbd06651c84cb4971fd89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}