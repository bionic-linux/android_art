{
  "comments": [
    {
      "key": {
        "uuid": "dcf663e5_86670c63",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 246,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-22T11:52:29Z",
      "side": 1,
      "message": "loop phi?",
      "range": {
        "startLine": 246,
        "startChar": 52,
        "endLine": 246,
        "endChar": 62
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc0a8fd0_f7cc771d",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 246,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-10-24T17:14:50Z",
      "side": 1,
      "message": "I use the entry-phi terminology a lot in the cc file. I am okay changing it, but then I need to do it there at a lot of places too. Do you like that term better?",
      "parentUuid": "dcf663e5_86670c63",
      "range": {
        "startLine": 246,
        "startChar": 52,
        "endLine": 246,
        "endChar": 62
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c15cbc1_4c85af53",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 246,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-24T17:22:49Z",
      "side": 1,
      "message": "No strong preference, I know other parts of the compiler use loop phi.",
      "parentUuid": "bc0a8fd0_f7cc771d",
      "range": {
        "startLine": 246,
        "startChar": 52,
        "endLine": 246,
        "endChar": 62
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcdd835f_34d2b6e7",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-22T11:52:29Z",
      "side": 1,
      "message": "Why do you need this check? Protecting from dead code being removed between the induction analysis and the loop optimization?",
      "range": {
        "startLine": 266,
        "startChar": 13,
        "endLine": 266,
        "endChar": 27
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc0a8fd0_17c80b08",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-10-24T17:14:50Z",
      "side": 1,
      "message": "Yes, sharp eye. Probably this is not needed, since we only run bce in between, but I was pedantic. If you prefer I can make this a DCHECK to see if cases can happen in real life",
      "parentUuid": "dcdd835f_34d2b6e7",
      "range": {
        "startLine": 266,
        "startChar": 13,
        "endLine": 266,
        "endChar": 27
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_aefc239b",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-24T17:22:49Z",
      "side": 1,
      "message": "I think I\u0027d rather go with a DCHECK but then that raises the question of whether it\u0027s ok to leave dead things in the cycle set. Do you anticipate more uses of the cycle set, and should all users protect themselves from such dead instructions?",
      "parentUuid": "bc0a8fd0_17c80b08",
      "range": {
        "startLine": 266,
        "startChar": 13,
        "endLine": 266,
        "endChar": 27
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc0a8fd0_f728f7b5",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-10-24T17:25:58Z",
      "side": 1,
      "message": "Most stored induction information becomes \"stale\" after a while (and we update the information that we need in phases that incrementally change the IR). So I am okay doing this as a DCHECK for now and see if our assumption goes wrong somewhere (and then deal with it properly)....",
      "parentUuid": "7c0657a0_aefc239b",
      "range": {
        "startLine": 266,
        "startChar": 13,
        "endLine": 266,
        "endChar": 27
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_4eb8077c",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-22T11:52:29Z",
      "side": 1,
      "message": "These methods did not change right?",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 319,
        "endChar": 1
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc0a8fd0_177f6bd0",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-10-24T17:14:50Z",
      "side": 1,
      "message": "No, they just need to be instance methods since IsPhi uses induction_range_ now. Also, it saves passing iset_ (but that was not the reason)",
      "parentUuid": "7c0657a0_4eb8077c",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 319,
        "endChar": 1
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ced7706_d35b860f",
        "filename": "test/530-checker-loops2/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-22T11:52:29Z",
      "side": 1,
      "message": "woot!",
      "range": {
        "startLine": 902,
        "startChar": 1,
        "endLine": 902,
        "endChar": 27
      },
      "revId": "e13d81ef02c3c1bede86fe4947c31c50f53d6782",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}