{
  "comments": [
    {
      "key": {
        "uuid": "cd3165a0_bba0ce3b",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Why volatile? This is going to skew results with LDAR/DMB.\n\nPerhaps object instance or static field instead? Another option is calling a function with $noinline ?\n\n\n  void checkCastLevel2$noinline(Object o) {\n    return o instanceof Level2;\n  }\n\nMingyao, do you remember what we ended up doing to test your prototype?",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f20afef_2f1dfd34",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2018-01-17T00:12:03Z",
      "side": 1,
      "message": "Here is the benchmark I used:\nhttps://googleplex-android-review.git.corp.google.com/c/platform/art/+/3347001/1/test/001-InstanceOfPerf/src/Main.java\n\nI need to defeat the optimization that hoist instanceof out of loops.",
      "parentUuid": "cd3165a0_bba0ce3b",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5df4072d_f7f7b6a4",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 781,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Can you elaborate on how early this happens?\n\nAll of our tuning calculations were done by allocating bitstring as late as possible, it might be enough to just do it right before method compilation but that\u0027s something that seems like we should verify and not just assume that \"it will be ok\" ?\n\nTo give you an upper bound on the worst case, if we assign a bitstring for every class in an app there won\u0027t be enough by about 10x factor for something like Maps.\n\nHere it looks like it looks at all check-cast/instance-of targets for all methods and only assigns those, so it\u0027s not nearly as bad but still unclear.",
      "range": {
        "startLine": 780,
        "startChar": 81,
        "endLine": 781,
        "endChar": 36
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6072886_f2f4fccc",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 809,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "Add a comment about the IsFinal check.",
      "range": {
        "startLine": 809,
        "startChar": 0,
        "endLine": 809,
        "endChar": 34
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1890ed18_f0d75e02",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 852,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "I think it won\u0027t :(",
      "range": {
        "startLine": 852,
        "startChar": 8,
        "endLine": 852,
        "endChar": 53
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2ba23c7_57b45377",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 865,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "Isn\u0027t EnsureAssigned safe to call twice? I\u0027d drop this check if it\u0027s only for working around smali.",
      "range": {
        "startLine": 860,
        "startChar": 0,
        "endLine": 865,
        "endChar": 9
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b9f1e63_9abd3609",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7210,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "A bit worried about our testing coverage that we execute all different paths below. How can we guarantee it?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d725885f_cd19a138",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7725,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "nit: Add a comment.",
      "range": {
        "startLine": 7725,
        "startChar": 58,
        "endLine": 7725,
        "endChar": 66
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96bba490_64e66614",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7965,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "nit: Add a comment.",
      "range": {
        "startLine": 7965,
        "startChar": 59,
        "endLine": 7965,
        "endChar": 67
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46b9ec5f_1f8f8c50",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7967,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Wasn\u0027t there some code near here that returns either 1 [true] or 0 [false] for the result? IIRC that could be optimized further by If-Then-Else but flipping the Then/Else blocks, which was in Mingyao\u0027s prototype CL.\n\nI don\u0027t see that being modified in this diff (judging from left hand side)?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e519a09_2e503fd4",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 5
      },
      "lineNbr": 546,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Can you add either here or a DCHECK in the HTypeCheckInstruction to make sure the bitstring constants for that mirror::Class* are matching by whatever SubtypeCheck is returning?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01974f11_b0c7d2d7",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 5
      },
      "lineNbr": 655,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "Could you add a comment:\n\"For the builder and the inliner, we want to add extra information on HInstructions that have reference types, and also HInstanceOf/HCheckcast\".",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 655,
        "endChar": 42
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bee860b_1ad9e183",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1923,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Any difference between doing this in the builder as opposed to the optimizer?\n\nIIRC Mingyao\u0027s CL was doing it in one of the phases of optimization passes. This \u0027feels\u0027 more like an optimization (and we even call it the bitstring subtype check \u0027optimization\u0027) but perhaps that\u0027s just quibbling over details?\n\nDoing it earlier just seems like it would introduce a lot of CHECKER test changes if it\u0027s ever done for AOT?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67195f3b_3ae5f01c",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 615,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "This looks odd. After reading the builder code, it looks like you don\u0027t need it (though you have a TODO, so maybe you can DCHECK it instead?)\n\nBut in general, it sounds to me as soon as we need an access check, we should never remove the instruction.",
      "range": {
        "startLine": 615,
        "startChar": 6,
        "endLine": 615,
        "endChar": 70
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b3b1181_b384626f",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 5
      },
      "lineNbr": 3100,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Is it somehow printing the int constants as well to the dumped CFG for mask and target?\n\nIf not, it would be very useful to add this (preferrably as a bit string \"0b11110011010\" or at least hex)?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7bb9744_fb10b87d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 5990,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Consider adding some documentation how to use this and when \"GetLoadedClassRTI\" is actually valid?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4d4a4d4_245711dd",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6606,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Nice abstraction :).",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbad0613_b6cfc63d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6606,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "This has a memory cost, compared to HExpression. You\u0027re willing to take the tradeoff?",
      "range": {
        "startLine": 6606,
        "startChar": 37,
        "endLine": 6606,
        "endChar": 66
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d0ccf53_3f90d394",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6633,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "nit: add a comment on why we decided with HConstant instead of just ints in the HTypeCheckInstruction class.",
      "range": {
        "startLine": 6632,
        "startChar": 0,
        "endLine": 6633,
        "endChar": 39
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a85d8201_45bb6dd6",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Worth adding any new stats for how many classes (that were previously only initialized) get newly assigned because they are a compilation target? Or maybe that\u0027s a separate problem since it\u0027s not directly a compiler stat.",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85e2db15_19310fd1",
        "filename": "compiler/optimizing/sharpening.cc",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "The lock is really unfortunate. Any plans on getting rid of it?",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 81
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e32c219_60132d70",
        "filename": "compiler/optimizing/sharpening.cc",
        "patchSetId": 5
      },
      "lineNbr": 260,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Seems sound. \n\nnit: L253-L255 are identical to L258-L260 so maybe inverting this a bit?\n\n  if ! boot image and not jit return false\n\n  l253-l255",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6328de7_c5ce07ba",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 5
      },
      "lineNbr": 797,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "I\u0027m sure this is correct, just for my own understanding:\n\nWhy did we need to change the entrypoints? Is this some sort of side effect of other changes?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70f7eb23_a853fedd",
        "filename": "runtime/base/arena_allocator.cc",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "nit: TypeCheckIns probably a bit more understandable than \"Ck\" which is unused elsewhere as an abbreviation.",
      "range": {
        "startLine": 59,
        "startChar": 3,
        "endLine": 59,
        "endChar": 15
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeddd3db_d5580787",
        "filename": "runtime/base/arena_allocator.cc",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "70f7eb23_a853fedd",
      "range": {
        "startLine": 59,
        "startChar": 3,
        "endLine": 59,
        "endChar": 15
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dec8413_1887ca99",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 4477,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Why do we need this? Missing implementation of earlier? Is there test?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "722d6576_14717cdc",
        "filename": "runtime/entrypoints/quick/quick_throw_entrypoints.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eaae481_faacb2f0",
        "filename": "runtime/subtype_check.h",
        "patchSetId": 5
      },
      "lineNbr": 323,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Why? Slightly faster for libartd builds?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b327ace7_26dcdae1",
        "filename": "test/670-bitstring-type-check/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "This file is very large and choking my browser (which I guess is good since its thorough). Is there any checker tests here?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}