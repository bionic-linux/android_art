{
  "comments": [
    {
      "key": {
        "uuid": "969edc41_23461d04",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-01-17T17:47:34Z",
      "side": 1,
      "message": "Do we already have numbers for the impact of this CL on benchmarks?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e93907e_1f4301ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T18:53:10Z",
      "side": 1,
      "message": "Not yet.",
      "parentUuid": "969edc41_23461d04",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4804e02_13d2ca5e",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-01-17T17:47:34Z",
      "side": 1,
      "message": "2018",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09c7049c_f84aa85e",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T18:53:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4804e02_13d2ca5e",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd3165a0_bba0ce3b",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Why volatile? This is going to skew results with LDAR/DMB.\n\nPerhaps object instance or static field instead? Another option is calling a function with $noinline ?\n\n\n  void checkCastLevel2$noinline(Object o) {\n    return o instanceof Level2;\n  }\n\nMingyao, do you remember what we ended up doing to test your prototype?",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f20afef_2f1dfd34",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2018-01-17T00:12:03Z",
      "side": 1,
      "message": "Here is the benchmark I used:\nhttps://googleplex-android-review.git.corp.google.com/c/platform/art/+/3347001/1/test/001-InstanceOfPerf/src/Main.java\n\nI need to defeat the optimization that hoist instanceof out of loops.",
      "parentUuid": "cd3165a0_bba0ce3b",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef761abc_01e00180",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "volatile should defeat any future optimization we may add. It increases the time per iteration by a constant but the relative performance difference should still be visible. (It is visible with the interpreter where the time measurably increases with the depth.)\n\n$noinline$ is useless for JIT:\n\n  const bool honor_inlining_directives \u003d\n      IsCompilingWithCoreImage() \u0026\u0026 Runtime::Current()-\u003eIsAotCompiler();",
      "parentUuid": "3f20afef_2f1dfd34",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "880b2270_6ff63794",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-17T19:49:24Z",
      "side": 1,
      "message": "Hans, do you think its reasonable to use volatile here? I fear this will skew microbenchmark results.",
      "parentUuid": "ef761abc_01e00180",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5744b6ff_07239939",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T11:59:57Z",
      "side": 1,
      "message": "Added a baseline benchmark that just reads one of the volatile fields and checks it against null.",
      "parentUuid": "880b2270_6ff63794",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65a300aa_51fb57ad",
        "filename": "benchmark/type-check/src/TypeCheckBenchmark.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T16:01:24Z",
      "side": 1,
      "message": "Note that without the volatile, LICM already pulls the HInstanceOf out of the loop (though HCheckCast is not moved at this time).",
      "parentUuid": "5744b6ff_07239939",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 12
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5df4072d_f7f7b6a4",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 781,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Can you elaborate on how early this happens?\n\nAll of our tuning calculations were done by allocating bitstring as late as possible, it might be enough to just do it right before method compilation but that\u0027s something that seems like we should verify and not just assume that \"it will be ok\" ?\n\nTo give you an upper bound on the worst case, if we assign a bitstring for every class in an app there won\u0027t be enough by about 10x factor for something like Maps.\n\nHere it looks like it looks at all check-cast/instance-of targets for all methods and only assigns those, so it\u0027s not nearly as bad but still unclear.",
      "range": {
        "startLine": 780,
        "startChar": 81,
        "endLine": 781,
        "endChar": 36
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6078de33_33fc1813",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 781,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "If you do not specify --force-determinism, we shall assign bitstrings during the compilation. If you do (the normal case for prebuilt boot image), we perform this early assignment right after finalizing the image class set (previously after verification but that was wrong), see below.\n\nNote that this assigns bitstrings only for boot*.art target classes of check-cast and instance-of instructions in code of boot*.oat classes (though we do not filter methods as rigorously as for compilation).",
      "parentUuid": "5df4072d_f7f7b6a4",
      "range": {
        "startLine": 780,
        "startChar": 81,
        "endLine": 781,
        "endChar": 36
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65c871c1_7f40b59e",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 781,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-17T20:01:07Z",
      "side": 1,
      "message": "IIUC, it will use bitstring type check optimization when compiling boot.oat as well right?\n\nI may have also mentioned this in the builder section, but assigning a class if the instanceof then gets eliminated is suboptimal because we run out of bits faster (e.g. dead code, redundant instanceof, inlining backed out of, etc).\n\nHowever unless other code is changed as well (to defer bitstring assignment), I suppose this will not be \"any worse\" than doing the EnsureAssigned in the instruction builder? Am I understanding this correctly?\n\nWhat about for speed-profile boot.oat ? If it looks at all dex code items that we\u0027d never even compile this might be too much.",
      "parentUuid": "6078de33_33fc1813",
      "range": {
        "startLine": 780,
        "startChar": 81,
        "endLine": 781,
        "endChar": 36
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a687718_10d45679",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 781,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T11:59:57Z",
      "side": 1,
      "message": "This code is used exclusively for compiling the boot image.\n\nDoing your \"optimal\" assignment while ensuring a deterministic boot image is infeasible with the current design. We would have to compile everything once to collect the classes where we want to assign bitstrings, then assign bitstrings and recompile everything again. (We cannot keep HIR of the entire boot image in memory at once.)\n\nAnd yes, doing this here is supposed to be no worse than doing the EnsureAssigned() in the instruction builder; however, the filter may not be as strong as the filter for compilation as we do not filter out class initializers and huge methods.\n\nOTOH, we do check if the class is to be compiled (lines 848-854 below), so speed-profile should presumably not try to assign too many bitstrings beyond what we\u0027re going to compile anyway.\n\nAnd once we start using bitstrings for AOT app compiling, the over-assignment of boot image class bitstrings may sometimes turn out to be beneficial.",
      "parentUuid": "65c871c1_7f40b59e",
      "range": {
        "startLine": 780,
        "startChar": 81,
        "endLine": 781,
        "endChar": 36
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6072886_f2f4fccc",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 809,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "Add a comment about the IsFinal check.",
      "range": {
        "startLine": 809,
        "startChar": 0,
        "endLine": 809,
        "endChar": 34
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7f00107_a8b9bdda",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 809,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done. Also added a debug check to sharpening and that caught a problem where image classes were updated after this initialization, so I reordered the calls in PreCompile(). Unfortunately, I had to disable the debug check because it was triggered by the inliner for dex2oat_image_test, b/26687569.",
      "parentUuid": "e6072886_f2f4fccc",
      "range": {
        "startLine": 809,
        "startChar": 0,
        "endLine": 809,
        "endChar": 34
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1890ed18_f0d75e02",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 852,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "I think it won\u0027t :(",
      "range": {
        "startLine": 852,
        "startChar": 8,
        "endLine": 852,
        "endChar": 53
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d891f618_41c8e9b3",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 852,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "I agree. I found b/26687569 is about the deterministic boot image, so I tagged this and the line where this is copied from.",
      "parentUuid": "1890ed18_f0d75e02",
      "range": {
        "startLine": 852,
        "startChar": 8,
        "endLine": 852,
        "endChar": 53
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2ba23c7_57b45377",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 865,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "Isn\u0027t EnsureAssigned safe to call twice? I\u0027d drop this check if it\u0027s only for working around smali.",
      "range": {
        "startLine": 860,
        "startChar": 0,
        "endLine": 865,
        "endChar": 9
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19b6a8d7_14f6f533",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 5
      },
      "lineNbr": 865,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2ba23c7_57b45377",
      "range": {
        "startLine": 860,
        "startChar": 0,
        "endLine": 865,
        "endChar": 9
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b9f1e63_9abd3609",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7210,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "A bit worried about our testing coverage that we execute all different paths below. How can we guarantee it?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ee63e38_b99fca74",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7210,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "No idea.\n\nWe could simplify this by removing the code size-optimized path below (lines 7220-7227), using the UBFX+CMP/SUB instead.\n\n(And I didn\u0027t even add the funky paths where we would try to replace SUB with ADD or tweak the path_to_root\u0027s irrelevant high bits to create a modified immediate.)",
      "parentUuid": "2b9f1e63_9abd3609",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d725885f_cd19a138",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7725,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "nit: Add a comment.",
      "range": {
        "startLine": 7725,
        "startChar": 58,
        "endLine": 7725,
        "endChar": 66
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ba67526_d4b688ee",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7725,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "I think this is self-explanatory. The CLZ below does not depend on the flags, it shall use the value of the `out` register.",
      "parentUuid": "d725885f_cd19a138",
      "range": {
        "startLine": 7725,
        "startChar": 58,
        "endLine": 7725,
        "endChar": 66
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96bba490_64e66614",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7965,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "nit: Add a comment.",
      "range": {
        "startLine": 7965,
        "startChar": 59,
        "endLine": 7965,
        "endChar": 67
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaf9c0ee_7435a00a",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7965,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "I think this is self-explanatory. The BNE below wants flags to be set depending on the comparison result.",
      "parentUuid": "96bba490_64e66614",
      "range": {
        "startLine": 7965,
        "startChar": 59,
        "endLine": 7965,
        "endChar": 67
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46b9ec5f_1f8f8c50",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7967,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Wasn\u0027t there some code near here that returns either 1 [true] or 0 [false] for the result? IIRC that could be optimized further by If-Then-Else but flipping the Then/Else blocks, which was in Mingyao\u0027s prototype CL.\n\nI don\u0027t see that being modified in this diff (judging from left hand side)?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0be0f2aa_79c42772",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7967,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "This comment is misplaced, you are clearly referring to the HInstanceOf codegen and this is HCheckCast codegen.\n\nSee comments in lines 7726-7731. See also lines 7514-7528 for HInstanceOf/kExactCheck which use another approach for generating the result which I referenced as an opportunity for low reg in lines 7729-7731 (I prefer the SUB+CLZ+SHR for high reg).",
      "parentUuid": "46b9ec5f_1f8f8c50",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e519a09_2e503fd4",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 5
      },
      "lineNbr": 546,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Can you add either here or a DCHECK in the HTypeCheckInstruction to make sure the bitstring constants for that mirror::Class* are matching by whatever SubtypeCheck is returning?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb2a5c56_996f7d24",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 5
      },
      "lineNbr": 546,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e519a09_2e503fd4",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01974f11_b0c7d2d7",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 5
      },
      "lineNbr": 655,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "Could you add a comment:\n\"For the builder and the inliner, we want to add extra information on HInstructions that have reference types, and also HInstanceOf/HCheckcast\".",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 655,
        "endChar": 42
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d2d51b9_836e466d",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 5
      },
      "lineNbr": 655,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01974f11_b0c7d2d7",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 655,
        "endChar": 42
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bee860b_1ad9e183",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1923,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Any difference between doing this in the builder as opposed to the optimizer?\n\nIIRC Mingyao\u0027s CL was doing it in one of the phases of optimization passes. This \u0027feels\u0027 more like an optimization (and we even call it the bitstring subtype check \u0027optimization\u0027) but perhaps that\u0027s just quibbling over details?\n\nDoing it earlier just seems like it would introduce a lot of CHECKER test changes if it\u0027s ever done for AOT?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bf5fc10_24f0e730",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1923,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Every \"sharpening\" is an optimization but we\u0027ve recently been pushing it all to the builder phase anyway. And dropping the HLoadClass here is saving a bit of memory (not much though as we already dropped the environment by \"sharpening\" the HLoadClass load kind).\n\nBut Mingyao\u0027s approach of dropping the HLoadClass input in CFRE and then having an extra DCE pass seems very odd. Though maybe we could remove the HLoadClass in the PrepareForRegisterAllocation as we do for the HClinitCheck merging.",
      "parentUuid": "2bee860b_1ad9e183",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67195f3b_3ae5f01c",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 615,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "This looks odd. After reading the builder code, it looks like you don\u0027t need it (though you have a TODO, so maybe you can DCHECK it instead?)\n\nBut in general, it sounds to me as soon as we need an access check, we should never remove the instruction.",
      "range": {
        "startLine": 615,
        "startChar": 6,
        "endLine": 615,
        "endChar": 70
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ecedb65_7738a510",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 615,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "In the long term, I would want to eliminate the HCheckCast if possible, keeping only the HLoadClass. This check should move to line 640.",
      "parentUuid": "67195f3b_3ae5f01c",
      "range": {
        "startLine": 615,
        "startChar": 6,
        "endLine": 615,
        "endChar": 70
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b3b1181_b384626f",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 5
      },
      "lineNbr": 3100,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Is it somehow printing the int constants as well to the dumped CFG for mask and target?\n\nIf not, it would be very useful to add this (preferrably as a bit string \"0b11110011010\" or at least hex)?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb5d2f3f_fb765dcb",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 5
      },
      "lineNbr": 3100,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done. Though I\u0027m not sure how useful this is for checker tests.",
      "parentUuid": "2b3b1181_b384626f",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7bb9744_fb10b87d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 5990,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Consider adding some documentation how to use this and when \"GetLoadedClassRTI\" is actually valid?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f53dc4bb_abd91e65",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 5990,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7bb9744_fb10b87d",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4d4a4d4_245711dd",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6606,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Nice abstraction :).",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbad0613_b6cfc63d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6606,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "This has a memory cost, compared to HExpression. You\u0027re willing to take the tradeoff?",
      "range": {
        "startLine": 6606,
        "startChar": 37,
        "endLine": 6606,
        "endChar": 66
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1502688_8bf42e30",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6606,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "HExpression does not allow variable number of inputs. I could do something similar to HLoadClass/HLoadString with their special_input_ but I\u0027m leaving that out of this CL.",
      "parentUuid": "fbad0613_b6cfc63d",
      "range": {
        "startLine": 6606,
        "startChar": 37,
        "endLine": 6606,
        "endChar": 66
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d0ccf53_3f90d394",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6633,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "nit: add a comment on why we decided with HConstant instead of just ints in the HTypeCheckInstruction class.",
      "range": {
        "startLine": 6632,
        "startChar": 0,
        "endLine": 6633,
        "endChar": 39
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74439c53_f2272048",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 6633,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Maybe some codegen will want to get the constant(s) in a register? But I didn\u0027t think much about that, I took inspiration from Mingyao\u0027s prototype.",
      "parentUuid": "1d0ccf53_3f90d394",
      "range": {
        "startLine": 6632,
        "startChar": 0,
        "endLine": 6633,
        "endChar": 39
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a85d8201_45bb6dd6",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Worth adding any new stats for how many classes (that were previously only initialized) get newly assigned because they are a compilation target? Or maybe that\u0027s a separate problem since it\u0027s not directly a compiler stat.",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9301eb7_60d01a18",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "How would you even collect such a statistic without intrusive hooks in the runtime?",
      "parentUuid": "a85d8201_45bb6dd6",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f6bab2a_b4217572",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-17T20:01:07Z",
      "side": 1,
      "message": "Well lets say we are going to call EnsureAssigned no matter what from the compiler once we see its an instance-of/check-cast target.\n\nIf we call EnsureInitialized first it will only go up to Initialized. If EnsureInitialized returns \u003cAssigned and then EnsureAssigned returns Assigned that means we got newly assigned.\n\nIf EnsureInitialized already returns Assigned that means it was already assigned prior to the compilation.",
      "parentUuid": "c9301eb7_60d01a18",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c67979f_a192118c",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T11:59:57Z",
      "side": 1,
      "message": "We would have to collect the old state of the entire parent chain before doing the EnsureAssigned/EnsureInitialized, otherwise we could miss some assignments taking place.\n\nAnd for the deterministic compilation we would have to collect the statistic in the compiler driver.\n\nI\u0027m not very eager to implement this.",
      "parentUuid": "6f6bab2a_b4217572",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85e2db15_19310fd1",
        "filename": "compiler/optimizing/sharpening.cc",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "The lock is really unfortunate. Any plans on getting rid of it?",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 81
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38a392d9_a0417086",
        "filename": "compiler/optimizing/sharpening.cc",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Certainly not in this CL.\n\n(I think we really need the lock only for updating the bitstring, not for reading it.)",
      "parentUuid": "85e2db15_19310fd1",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 81
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e32c219_60132d70",
        "filename": "compiler/optimizing/sharpening.cc",
        "patchSetId": 5
      },
      "lineNbr": 260,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Seems sound. \n\nnit: L253-L255 are identical to L258-L260 so maybe inverting this a bit?\n\n  if ! boot image and not jit return false\n\n  l253-l255",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d95f28d9_c90f7bc6",
        "filename": "compiler/optimizing/sharpening.cc",
        "patchSetId": 5
      },
      "lineNbr": 260,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e32c219_60132d70",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6328de7_c5ce07ba",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 5
      },
      "lineNbr": 797,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "I\u0027m sure this is correct, just for my own understanding:\n\nWhy did we need to change the entrypoints? Is this some sort of side effect of other changes?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f5aae60_f4e96c0b",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 5
      },
      "lineNbr": 797,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Mingyao\u0027s prototype changed the artInstanceOfFromCode() instead. As that function is used also by the instance-of slow path, I wanted to keep the DCHECK(ref_class !\u003d nullptr) there and decided to change this entrypoint.",
      "parentUuid": "c6328de7_c5ce07ba",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70f7eb23_a853fedd",
        "filename": "runtime/base/arena_allocator.cc",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "nit: TypeCheckIns probably a bit more understandable than \"Ck\" which is unused elsewhere as an abbreviation.",
      "range": {
        "startLine": 59,
        "startChar": 3,
        "endLine": 59,
        "endChar": 15
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeddd3db_d5580787",
        "filename": "runtime/base/arena_allocator.cc",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-01-17T12:56:22Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "70f7eb23_a853fedd",
      "range": {
        "startLine": 59,
        "startChar": 3,
        "endLine": 59,
        "endChar": 15
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d24e44b_bafb4f93",
        "filename": "runtime/base/arena_allocator.cc",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aeddd3db_d5580787",
      "range": {
        "startLine": 59,
        "startChar": 3,
        "endLine": 59,
        "endChar": 15
      },
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dec8413_1887ca99",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 4477,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Why do we need this? Missing implementation of earlier? Is there test?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56a1f758_f0d063f4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 4477,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Proxy classes are created as initialized (SetStatus() a few lines below) and do not go through EnsureInitialized().\n\nThis was caught by 044-proxy, failing the \"DCHECK(!dest_type-\u003eIsAssignableFrom(src_type))\" in artThrowClassCastException() when running compiled Proxy.getInvocationHandler():\n\n        final Proxy p \u003d (Proxy) proxy;",
      "parentUuid": "8dec8413_1887ca99",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "722d6576_14717cdc",
        "filename": "runtime/entrypoints/quick/quick_throw_entrypoints.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "967c2f52_0b500ef3",
        "filename": "runtime/entrypoints/quick/quick_throw_entrypoints.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "?",
      "parentUuid": "722d6576_14717cdc",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eaae481_faacb2f0",
        "filename": "runtime/subtype_check.h",
        "patchSetId": 5
      },
      "lineNbr": 323,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "Why? Slightly faster for libartd builds?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e3aba64_ba821a31",
        "filename": "runtime/subtype_check.h",
        "patchSetId": 5
      },
      "lineNbr": 323,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Yes, why not?\n\nI\u0027ve had other changes in this file, so I cleaned this up, then I removed the other changes and PS6 adds another change again.",
      "parentUuid": "4eaae481_faacb2f0",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b327ace7_26dcdae1",
        "filename": "test/670-bitstring-type-check/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-16T21:25:23Z",
      "side": 1,
      "message": "This file is very large and choking my browser (which I guess is good since its thorough). Is there any checker tests here?",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a77b7a28_13354f04",
        "filename": "test/670-bitstring-type-check/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-17T16:14:05Z",
      "side": 1,
      "message": "Moved everything to \"build\", generating the Level1Class* and Level2Class* on the fly.\n\nNo, there are no checker tests. Those shall go to test/552-checker-sharpening in a follow-up CL when we use the bitstring type checks for AOT app compilation of type checks targetting classes with the bitstring already assigned in the boot image.",
      "parentUuid": "b327ace7_26dcdae1",
      "revId": "9aea04a0fcee346ab43d9a5ecbf38d1ea373e836",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}