{
  "comments": [
    {
      "key": {
        "uuid": "0f6a221f_66ac1c73",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1185,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T09:30:52Z",
      "side": 1,
      "message": "Search for `lower_bound(reinterpret_cast\u003cconst void*\u003e(pc + 1))` to avoid this comparison.",
      "range": {
        "startLine": 1185,
        "startChar": 6,
        "endLine": 1185,
        "endChar": 25
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b71b476_c78c263d",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1186,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T09:30:52Z",
      "side": 1,
      "message": "If `it \u003d\u003d method_code_map_.begin()`, we cannot do this and should return {nullptr, nullptr}.",
      "range": {
        "startLine": 1186,
        "startChar": 4,
        "endLine": 1186,
        "endChar": 9
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2048cb9f_8309444f",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1186,
      "author": {
        "id": 1083288
      },
      "writtenOn": "2017-06-15T15:25:47Z",
      "side": 1,
      "message": "If it \u003d\u003d method_code_map_.begin() it means that pc_ptr and it-\u003efirst are equals. In this case --it doesn\u0027 happen.",
      "parentUuid": "9b71b476_c78c263d",
      "range": {
        "startLine": 1186,
        "startChar": 4,
        "endLine": 1186,
        "endChar": 9
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bf72154_933cd431",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1186,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T15:34:05Z",
      "side": 1,
      "message": "What if the pc_ptr is before the first entry or after the last? Note that this can reasonably happen after code GC. And even without the GC it could happen if the code managed to jump to the preheader of the first method or somewhere near the end of the allocated space.\n\nAlso guard against `it \u003d\u003d method_code_map_.end()`.",
      "parentUuid": "2048cb9f_8309444f",
      "range": {
        "startLine": 1186,
        "startChar": 4,
        "endLine": 1186,
        "endChar": 9
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f167471_c8613aa8",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1186,
      "author": {
        "id": 1083288
      },
      "writtenOn": "2017-06-15T16:54:52Z",
      "side": 1,
      "message": "I agree with you.\nNow code is the following:\nif (it \u003d\u003d method_code_map_.end() ||\n    (it !\u003d method_code_map_.begin() \u0026\u0026 it-\u003efirst !\u003d pc_ptr)) {\n  --it;\n}\nThank you",
      "parentUuid": "5bf72154_933cd431",
      "range": {
        "startLine": 1186,
        "startChar": 4,
        "endLine": 1186,
        "endChar": 9
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b1462c4_68a58fbc",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1186,
      "author": {
        "id": 1084139
      },
      "writtenOn": "2017-06-16T11:28:10Z",
      "side": 1,
      "message": "Thank you, Vladimir. Artem back-ported the patch to n-mr2 and fixed the mentioned issue there. We\u0027ll come up with the update on master in a couple of months (unless, of course, there will be a debuggerd-based solution from your side by that time).",
      "parentUuid": "5bf72154_933cd431",
      "range": {
        "startLine": 1186,
        "startChar": 4,
        "endLine": 1186,
        "endChar": 9
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63c3c31e_a06d41ac",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 1215,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T09:30:52Z",
      "side": 1,
      "message": "Move this just after the `code_ptr` definition.",
      "range": {
        "startLine": 1215,
        "startChar": 0,
        "endLine": 1215,
        "endChar": 42
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0c9e106_6dbcacc5",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T09:30:52Z",
      "side": 1,
      "message": "What if the method has been called through JNI?",
      "range": {
        "startLine": 405,
        "startChar": 0,
        "endLine": 414,
        "endChar": 60
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5780db4_03694989",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1083288
      },
      "writtenOn": "2017-06-15T15:25:47Z",
      "side": 1,
      "message": "I\u0027ve checked it. In such cases caller is nullptr and the method CheckValidStackFrame returns false at line 409. I know that such situation is correct but here I\u0027m not 100% that *prev_frame contains valid caller or garbage. So I suppose that prev_frame is invalid.",
      "parentUuid": "c0c9e106_6dbcacc5",
      "range": {
        "startLine": 405,
        "startChar": 0,
        "endLine": 414,
        "endChar": 60
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e08969e5_b69f15f4",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T09:30:52Z",
      "side": 1,
      "message": "Enclose in ().",
      "range": {
        "startLine": 445,
        "startChar": 26,
        "endLine": 445,
        "endChar": 75
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "135a93ee_b32d33f4",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 448,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T09:30:52Z",
      "side": 1,
      "message": "Should we print this in hexadecimal? (For example `reinterpret_cast\u003cvoid*\u003e(pc_)` provides a nice output.)",
      "range": {
        "startLine": 448,
        "startChar": 19,
        "endLine": 448,
        "endChar": 22
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25d244c7_fbfa960b",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 474,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-15T09:30:52Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 474,
        "startChar": 29,
        "endLine": 474,
        "endChar": 38
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb5cc9ae_89ef47b0",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-06T15:17:20Z",
      "side": 1,
      "message": "No. This needs to be behind a flag, and not go into production until we know it\u0027s halfway stable. We had a similar thing in the fault handler before, and it was to unstable to turn on. This *must* have a flag.",
      "range": {
        "startLine": 584,
        "startChar": 2,
        "endLine": 597,
        "endChar": 3
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb3032f6_205ede00",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 1083288
      },
      "writtenOn": "2017-06-07T17:32:54Z",
      "side": 1,
      "message": "\u003e We had a similar thing in the fault handler before, and it was to unstable to turn on. \n\nCould you share a link to a CL in which remove such functional. What kind of problems have you observed?",
      "parentUuid": "bb5cc9ae_89ef47b0",
      "range": {
        "startLine": 584,
        "startChar": 2,
        "endLine": 597,
        "endChar": 3
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0241801_b84564f5",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-07T18:15:29Z",
      "side": 1,
      "message": "Look for kEnableJavaStackTraceHandler. It is in general *not* safe to do anything with our stack a signal handler, period. I rather get debuggerd output then the runtime double-crashing with nothing.",
      "parentUuid": "fb3032f6_205ede00",
      "range": {
        "startLine": 584,
        "startChar": 2,
        "endLine": 597,
        "endChar": 3
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7fee151_3a1f977f",
        "filename": "runtime/runtime_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 1083288
      },
      "writtenOn": "2017-06-08T08:40:32Z",
      "side": 1,
      "message": "I\u0027ve had a look at JavaStackTraceHandler. I agree with you. This class must not be used in a signal handler because a process can receive a signal at unexpected time. When a process receive a signal when executing compiled code (jit or aot) we can consider the following cases: \n1. Beginning of a method when stack frame is not set or set partially.\n2. Middle of a method when stack frame is correct.\n3. End of a method when stack pointer points to the frame of the caller.\nAll these cases are considered in my CL. I\u0027ve checked it by modifying jit code manually. I\u0027ve changed the method CommitCdeInternal from jit_code_cache.cc in a such way it modify different pieces of code of my method.\n\nIn my CL I\u0027m checking that stack frame is valid. If so I use StackVisitor.WalkStack. Else I iterate over the stack as array ow words and trying to find pointers to ArtMethods.\nPlease have a look at the function CheckValidStackFrame",
      "parentUuid": "c0241801_b84564f5",
      "range": {
        "startLine": 584,
        "startChar": 2,
        "endLine": 597,
        "endChar": 3
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6fc71fe_2ca65e9d",
        "filename": "runtime/runtime_common.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-06T15:17:20Z",
      "side": 1,
      "message": "I just removed the non-descript parameter. Make it specific.",
      "range": {
        "startLine": 73,
        "startChar": 34,
        "endLine": 73,
        "endChar": 55
      },
      "revId": "c1e00441378d30db36265d6fc888a5e9a68e56b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}