{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f3b8f95_e7b6af78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Thanks Vladimir, some review comments addressed here:\nhttps://android-review.googlesource.com/c/platform/art/+/2261306",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33d0de10_2ad48597",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "Change to `GetDeclaredVirtualMethodsSlice` to change the `s5.foo()` test behavior to match the RI. (Then drop the `!np_method-\u003eIsStatic()` check.)",
      "range": {
        "startLine": 164,
        "startChar": 40,
        "endLine": 164,
        "endChar": 63
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c178589d_63aad309",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Moving to only looking at GetDeclaredVirtualMethodsSlice will make us throw AbstractMethodError for the ((SubClassPrivateFoo) s5).foo();\n\nIt looks like RI is either looking at the static type or is resolving differently.",
      "parentUuid": "33d0de10_2ad48597",
      "range": {
        "startLine": 164,
        "startChar": 40,
        "endLine": 164,
        "endChar": 63
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "308602d3_9f7f6196",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-10-19T16:28:26Z",
      "side": 1,
      "message": "I remember that we had some code that would search virtual methods first and then, if none was found, it would search direct methods to distinguish between NSME and IAE. I cannot find it, so I guess it was rewritten. We\u0027d need something similar here.\n\nToday we have a slightly different approach in `Class::FindClassMethod()` with uninherited methods but the initial lookup in the class itself does not match what we need here.",
      "parentUuid": "c178589d_63aad309",
      "range": {
        "startLine": 164,
        "startChar": 40,
        "endLine": 164,
        "endChar": 63
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac89a7fc_4db589f5",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-20T14:43:05Z",
      "side": 1,
      "message": "No, the two iterations won\u0027t change as for those two calls:\n`((SubClassPrivateFoo) s5).foo();` and `s5.foo()` the arguments passed to `ThrowInvocationTimeError` will be the same and therefore we will have the same behavior for those two invocations, regardless of how we loop over the declared methods.",
      "parentUuid": "308602d3_9f7f6196",
      "range": {
        "startLine": 164,
        "startChar": 40,
        "endLine": 164,
        "endChar": 63
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f726b4b3_468f8b88",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "`GetNameView()` shall be executed at least once (j.l.Object has virtual methods), so pull it out of both loops.",
      "range": {
        "startLine": 167,
        "startChar": 40,
        "endLine": 167,
        "endChar": 53
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad5f7ac2_ca519575",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f726b4b3_468f8b88",
      "range": {
        "startLine": 167,
        "startChar": 40,
        "endLine": 167,
        "endChar": 53
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8af77946_823b4078",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "This may not be executed but maybe we should pull it out of the loops anyway?",
      "range": {
        "startLine": 168,
        "startChar": 41,
        "endLine": 168,
        "endChar": 55
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a411352e_ec995fc3",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8af77946_823b4078",
      "range": {
        "startLine": 168,
        "startChar": 41,
        "endLine": 168,
        "endChar": 55
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "339ea792_30652427",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "If `np_method` is abstract, this shall trigger a `DCHECK()` in `ThrowIllegalAccessErrorForImplementingMethod()`.\n\nI\u0027m not sure which exception we should throw for an abstract package-private method but the code in `ClassLinker` ignores the abstract attribute, so I\u0027d probably remove the `DCHECK()`. (Otherwise, reorder the checks here.) Or check against the RI.",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 56
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b61b7424_2ffb8680",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Good catch, I\u0027ve reordered the checks and added a regression test.",
      "parentUuid": "339ea792_30652427",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 56
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62d5d936_eb139974",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "else UNREACHABLE (the method would be a valid target and should have been called)\n\nMaybe replace the second `if` with a `DCHECK()` and the `ThrowAbstractMethodError()` with `break`.",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f563ce15_70be1667",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Actually, np_method may not be abstract if the interface method being called could not be called because of a default conflicting method. So I need to keep the if.",
      "parentUuid": "62d5d936_eb139974",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "569f185f_365e05a0",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-10-19T16:28:26Z",
      "side": 1,
      "message": "Looking at https://android-review.googlesource.com/c/platform/art/+/2261306/2/test/844-resolution/src/Main.java#27 , I think this is reachable for `invoke-super` which I did not previously think about. Right?",
      "parentUuid": "f563ce15_70be1667",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8438c7c_11ac4a81",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-20T14:43:05Z",
      "side": 1,
      "message": "Yes, though it was also covered in 971-iface-super, which does something similar to 844-resolution.",
      "parentUuid": "569f185f_365e05a0",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef69462_11031b06",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8113,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-08T14:00:07Z",
      "side": 1,
      "message": "If we found a non-public abstract method, previously we would have used that slot. Now we shall use an extra vtable index. Usually, this is just an insignificant increase in memory but in an extreme case this can mean running out of vtable index space (max 65536) and throwing a LinkageError.",
      "range": {
        "startLine": 8113,
        "startChar": 6,
        "endLine": 8113,
        "endChar": 49
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4bce3d4_c8ce5fa0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8113,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-18T08:39:45Z",
      "side": 1,
      "message": "But isn\u0027t using the same slot problematic?",
      "parentUuid": "fef69462_11031b06",
      "range": {
        "startLine": 8113,
        "startChar": 6,
        "endLine": 8113,
        "endChar": 49
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2df1252c_afc9342e",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8113,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-10-19T16:28:26Z",
      "side": 1,
      "message": "It would be problematic for a non-public concrete method.\n\nHowever, it\u0027s perfectly OK for non-public abstract methods. If we invoke the abstract method, we\u0027ll go to `ArtMethod::ThrowInvocationTimeError()` and the only question is whether we want to throw IAE (this CL) or AME (with https://android-review.googlesource.com/\n2261306).",
      "parentUuid": "b4bce3d4_c8ce5fa0",
      "range": {
        "startLine": 8113,
        "startChar": 6,
        "endLine": 8113,
        "endChar": 49
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2291f4da_5ac35509",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8113,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-20T14:43:05Z",
      "side": 1,
      "message": "Could you craft an example where it is OK? Two methods sharing the same slot intuitively sounds incorrect - is there no way a class can try to invoke those two methods on the same instance (through vtable dispatch) ?",
      "parentUuid": "2df1252c_afc9342e",
      "range": {
        "startLine": 8113,
        "startChar": 6,
        "endLine": 8113,
        "endChar": 49
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7cc5553_5cd9b1dc",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8234,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-08T14:00:07Z",
      "side": 1,
      "message": "At first I thought we should delay this error as well but I think this is actually unreachable thanks to DexFileVerifier checks. (Static and private interface methods are in the \"direct\" methods list, interface methods in the \"virtuals\" list must be public, see `DexFileVerifier::CheckMethodAccessFlags()`.)",
      "range": {
        "startLine": 8234,
        "startChar": 10,
        "endLine": 8234,
        "endChar": 54
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ee0208_d0b03adc",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8234,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-18T08:39:45Z",
      "side": 1,
      "message": "We\u0027re checking the virtual method of the implementing class here. The dex file verifier doesn\u0027t know about that method overriding a default method. So I think this still holds, or am I missing something?",
      "parentUuid": "e7cc5553_5cd9b1dc",
      "range": {
        "startLine": 8234,
        "startChar": 10,
        "endLine": 8234,
        "endChar": 54
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82e4c52c_8ce94ab2",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8234,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-10-19T16:28:26Z",
      "side": 1,
      "message": "This function is called `FindCopiedMethodsForInterface()`, so the \"implementing class\" (`klass`) is really an interface here. And `DexFileVerifier` makes sure that there are no protected or \"package-private\" methods in interfaces and private methods are in the \"direct\" methods. So, for a declared virtual method in an interface `virtual_method-\u003eIsPublic()` must be true. Right?",
      "parentUuid": "09ee0208_d0b03adc",
      "range": {
        "startLine": 8234,
        "startChar": 10,
        "endLine": 8234,
        "endChar": 54
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "030ea933_b8b7a040",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8234,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-20T14:43:05Z",
      "side": 1,
      "message": "Yes, good point. I\u0027ve removed the code in https://android-review.googlesource.com/c/platform/art/+/2261306",
      "parentUuid": "82e4c52c_8ce94ab2",
      "range": {
        "startLine": 8234,
        "startChar": 10,
        "endLine": 8234,
        "endChar": 54
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49b77e0_e02cda18",
        "filename": "test/840-resolution/jasmin/SubClass2.j",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "Do you prefer one jasmin file over 3 Java files?\n\nsrc/SuperClass2 with package-private foo\nsrc/SubClass2 extends SuperClass2 with package-private foo\nsrc2/SuperClass2 with public foo",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69148c48_8a224fab",
        "filename": "test/840-resolution/jasmin/SubClass2.j",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Yeah, I actually prefer less files and the jasmin code is small enough that I find it acceptable.\n\nI\u0027ve added a comment though in the jasmin file to explain what\u0027s special here.",
      "parentUuid": "b49b77e0_e02cda18",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d7c241_dbae5170",
        "filename": "test/840-resolution/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "Change to `expected`, same below.",
      "range": {
        "startLine": 64,
        "startChar": 32,
        "endLine": 64,
        "endChar": 34
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "524bce88_4f5aa1f0",
        "filename": "test/840-resolution/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-19T09:28:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04d7c241_dbae5170",
      "range": {
        "startLine": 64,
        "startChar": 32,
        "endLine": 64,
        "endChar": 34
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}