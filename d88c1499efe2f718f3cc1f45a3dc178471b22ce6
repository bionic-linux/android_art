{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "33d0de10_2ad48597",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "Change to `GetDeclaredVirtualMethodsSlice` to change the `s5.foo()` test behavior to match the RI. (Then drop the `!np_method-\u003eIsStatic()` check.)",
      "range": {
        "startLine": 164,
        "startChar": 40,
        "endLine": 164,
        "endChar": 63
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f726b4b3_468f8b88",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "`GetNameView()` shall be executed at least once (j.l.Object has virtual methods), so pull it out of both loops.",
      "range": {
        "startLine": 167,
        "startChar": 40,
        "endLine": 167,
        "endChar": 53
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8af77946_823b4078",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "This may not be executed but maybe we should pull it out of the loops anyway?",
      "range": {
        "startLine": 168,
        "startChar": 41,
        "endLine": 168,
        "endChar": 55
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "339ea792_30652427",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "If `np_method` is abstract, this shall trigger a `DCHECK()` in `ThrowIllegalAccessErrorForImplementingMethod()`.\n\nI\u0027m not sure which exception we should throw for an abstract package-private method but the code in `ClassLinker` ignores the abstract attribute, so I\u0027d probably remove the `DCHECK()`. (Otherwise, reorder the checks here.) Or check against the RI.",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 56
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62d5d936_eb139974",
        "filename": "runtime/art_method.cc",
        "patchSetId": 4
      },
      "lineNbr": 175,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "else UNREACHABLE (the method would be a valid target and should have been called)\n\nMaybe replace the second `if` with a `DCHECK()` and the `ThrowAbstractMethodError()` with `break`.",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef69462_11031b06",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8113,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-08T14:00:07Z",
      "side": 1,
      "message": "If we found a non-public abstract method, previously we would have used that slot. Now we shall use an extra vtable index. Usually, this is just an insignificant increase in memory but in an extreme case this can mean running out of vtable index space (max 65536) and throwing a LinkageError.",
      "range": {
        "startLine": 8113,
        "startChar": 6,
        "endLine": 8113,
        "endChar": 49
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4bce3d4_c8ce5fa0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8113,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-18T08:39:45Z",
      "side": 1,
      "message": "But isn\u0027t using the same slot problematic?",
      "parentUuid": "fef69462_11031b06",
      "range": {
        "startLine": 8113,
        "startChar": 6,
        "endLine": 8113,
        "endChar": 49
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7cc5553_5cd9b1dc",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8234,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-09-08T14:00:07Z",
      "side": 1,
      "message": "At first I thought we should delay this error as well but I think this is actually unreachable thanks to DexFileVerifier checks. (Static and private interface methods are in the \"direct\" methods list, interface methods in the \"virtuals\" list must be public, see `DexFileVerifier::CheckMethodAccessFlags()`.)",
      "range": {
        "startLine": 8234,
        "startChar": 10,
        "endLine": 8234,
        "endChar": 54
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ee0208_d0b03adc",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8234,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-18T08:39:45Z",
      "side": 1,
      "message": "We\u0027re checking the virtual method of the implementing class here. The dex file verifier doesn\u0027t know about that method overriding a default method. So I think this still holds, or am I missing something?",
      "parentUuid": "e7cc5553_5cd9b1dc",
      "range": {
        "startLine": 8234,
        "startChar": 10,
        "endLine": 8234,
        "endChar": 54
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49b77e0_e02cda18",
        "filename": "test/840-resolution/jasmin/SubClass2.j",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "Do you prefer one jasmin file over 3 Java files?\n\nsrc/SuperClass2 with package-private foo\nsrc/SubClass2 extends SuperClass2 with package-private foo\nsrc2/SuperClass2 with public foo",
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d7c241_dbae5170",
        "filename": "test/840-resolution/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-07-14T23:01:35Z",
      "side": 1,
      "message": "Change to `expected`, same below.",
      "range": {
        "startLine": 64,
        "startChar": 32,
        "endLine": 64,
        "endChar": 34
      },
      "revId": "d88c1499efe2f718f3cc1f45a3dc178471b22ce6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}