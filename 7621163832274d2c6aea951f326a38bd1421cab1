{
  "comments": [
    {
      "key": {
        "uuid": "dcaf43ab_bb76a7b8",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 751,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-10-18T16:00:03Z",
      "side": 1,
      "message": "I was wondering whether we needed a DMB ISH barrier here (and one after the loop, on line 780), but because we\u0027re implementing a strong CAS with relaxed memory ordering, I thought they were not needed.  (Clang seems to generate similar code, without DMBs, for such a strong relaxed CAS).  Is this a valid assumption?",
      "revId": "7621163832274d2c6aea951f326a38bd1421cab1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_de9bc45b",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 751,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-18T20:21:10Z",
      "side": 1,
      "message": "I think so, as I understand, we don\u0027t need a fence/barrier for a relaxed CAS.",
      "parentUuid": "dcaf43ab_bb76a7b8",
      "revId": "7621163832274d2c6aea951f326a38bd1421cab1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fce08714_ccbf6f07",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 751,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-10-20T14:34:54Z",
      "side": 1,
      "message": "OK, thanks.",
      "parentUuid": "dcf58392_de9bc45b",
      "revId": "7621163832274d2c6aea951f326a38bd1421cab1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf58392_f9897a08",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-18T20:21:10Z",
      "side": 1,
      "message": "I think we don\u0027t need fences (acquire/release) in this relaxed CAS. Is that what clang emits? Use ldxr/stxr (without fences) instead?",
      "range": {
        "startLine": 763,
        "startChar": 7,
        "endLine": 763,
        "endChar": 12
      },
      "revId": "7621163832274d2c6aea951f326a38bd1421cab1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_a89bfbae",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-10-20T14:34:54Z",
      "side": 1,
      "message": "Right; I was looking at the code generated by clang++ with `-O0`, which uses LDAXR and STLXR. Higher levels of optimization (`-O1`, `-O2`, `-O3`) indeed use LDXR, STXR and CLREX.\n\nFor instance, to implement this compiler (C) builtin call:\n\n  __atomic_compare_exchange(ptr,\n                            expected,\n                            desired,\n                            /* weak */ false,\n                            /* success_memorder */ __ATOMIC_RELAXED,\n                            /* failure_memorder */ __ATOMIC_RELAXED);\n\nclang++ (namely prebuilts/clang/host/linux-x86/clang-stable/bin/clang++ from AOSP) emits this code with `-O0`:\n\n  // ...  \n  .LBB0_1:                                // \u003d\u003eThis Inner Loop Header: Depth\u003d1\n          ldaxr   w11, [x0]\n          cmp     w11, w9\n          b.ne    .LBB0_3\n  // BB#2:                                //   in Loop: Header\u003dBB0_1 Depth\u003d1\n          stlxr   w12, w10, [x0]\n          cbnz    w12, .LBB0_1\n  .LBB0_3:\n          subs    w9, w11, w9\n          cset    w10, eq\n  // ...\n\nWith `-O1`, it becomes:\n\n  // ...  \n  .LBB0_1:                                // \u003d\u003eThis Inner Loop Header: Depth\u003d1\n  \tldxr  w10, [x0]\n  \tcmp    w10, w9\n  \tb.ne  .LBB0_3\n  // BB#2:                                //   in Loop: Header\u003dBB0_1 Depth\u003d1\n  \tstxr  w10, w8, [x0]\n  \tcbnz  w10, .LBB0_1\n  \tb  .LBB0_4                        // [Branches to `ret` instruction.]\n  .LBB0_3:\n  \tclrex\n  // ...  \n\nI\u0027ll implement the latter in my next patch set.",
      "parentUuid": "dcf58392_f9897a08",
      "range": {
        "startLine": 763,
        "startChar": 7,
        "endLine": 763,
        "endChar": 12
      },
      "revId": "7621163832274d2c6aea951f326a38bd1421cab1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}