{
  "comments": [
    {
      "key": {
        "uuid": "a6173ddb_081eae46",
        "filename": "compiler/linker/arm64/relative_patcher_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 483,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-13T16:28:35Z",
      "side": 1,
      "message": "This is an extra load in the fast-path. Are we sure we want to do this?",
      "range": {
        "startLine": 483,
        "startChar": 6,
        "endLine": 483,
        "endChar": 65
      },
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a319c76f_51fad04d",
        "filename": "compiler/linker/arm64/relative_patcher_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 483,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-06-14T15:18:26Z",
      "side": 1,
      "message": "Right, I\u0027ve moved it back to the slow path.",
      "parentUuid": "a6173ddb_081eae46",
      "range": {
        "startLine": 483,
        "startChar": 6,
        "endLine": 483,
        "endChar": 65
      },
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e981b58e_6237207b",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 777,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-14T09:41:09Z",
      "side": 1,
      "message": "if (kUseReadBarrier || kUseBakerReadBarrier) { ... }\n\nWe should add a test where a method with a lot of local variables calls a native method and then prints all those local variables.",
      "range": {
        "startLine": 775,
        "startChar": 0,
        "endLine": 777,
        "endChar": 94
      },
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aad8ddbd_d792df03",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 777,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-06-14T15:18:26Z",
      "side": 1,
      "message": "Good catch; done in PS10.",
      "parentUuid": "e981b58e_6237207b",
      "range": {
        "startLine": 775,
        "startChar": 0,
        "endLine": 777,
        "endChar": 94
      },
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eef64956_dc9f0fa5",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 778,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-13T18:14:38Z",
      "side": 1,
      "message": "Discussed with Mathieu. It seems like MR can be updated by the stack frame visitor if it actually needs to change. \n\nAlternatively if the suspend testing code was in assembly, it could only refresh if the suspend is actually taken.\n\nFine with me if you just leave a \"TODO: only update MR if suspend is taken\" here.\n\nI would like to see the android performance difference for CriticalNative though as it will slow that down the most.",
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5982ef4c_d02ed81d",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 778,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-14T09:41:09Z",
      "side": 1,
      "message": "Alternatively, remove the MR from the core_reg_list. It doesn\u0027t need to be spilled or restored. Neither does TR, eliminating the whole LDP/STP. (Though this may need more invasive changes in entrypoints.)",
      "parentUuid": "eef64956_dc9f0fa5",
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c5b9394_cc9e6bd6",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 778,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-14T15:10:57Z",
      "side": 1,
      "message": "Does that work? User-defined native code could clobber our own registers (if it\u0027s native-caller-save), so we need to be careful.",
      "parentUuid": "5982ef4c_d02ed81d",
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab85156_08791ee3",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 778,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-14T15:14:38Z",
      "side": 1,
      "message": "Well, if the user-defined native code does not adhere to the ABI, what\u0027s to stop them from overwriting the spilled registers on the stack?",
      "parentUuid": "0c5b9394_cc9e6bd6",
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "506388f7_5e9eaa5e",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 778,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-14T15:16:38Z",
      "side": 1,
      "message": "The aapcs64 ABI defines x19 and x20 as callee-save.",
      "parentUuid": "9ab85156_08791ee3",
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bfe1616_8e756f9c",
        "filename": "compiler/utils/arm64/jni_macro_assembler_arm64.cc",
        "patchSetId": 9
      },
      "lineNbr": 778,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-06-14T15:18:26Z",
      "side": 1,
      "message": "I\u0027ve removed MR from the list of saved and restored registers in PS10.\n\nWe can address the case of TR in a another CL.",
      "parentUuid": "5982ef4c_d02ed81d",
      "revId": "1e973b018d9a9c773d669abf8687dd73d8661455",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}