{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a4425bf9_f9da6715",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-02-08T10:49:49Z",
      "side": 1,
      "message": "I just realised that we have a bigger problem here.\n\nIf we update the build, the the dex files generated will have stricter API flags that currently. Mainline will then ship those dex files to devices running Q and R (where we don\u0027t have, and cannot have, the updated runtime). This will lead to severe app compat issues.\n\nI\u0027m not sure how to proceed from here. I don\u0027t think we can make the build modularization changes we need without breaking Q and R devices (the runtime changes are ok though). Unless I\u0027m missing something? (I really hope I am!)",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58b62c42_a9ff9768",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-08T13:17:37Z",
      "side": 1,
      "message": "Good point. The next steps could be to check whether Q and R modules actually affect hiddenapi bits of other parts of the system, and vice-versa, right?",
      "parentUuid": "a4425bf9_f9da6715",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab52eb7_6934a27f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-02-08T13:22:05Z",
      "side": 1,
      "message": "Yes, that seems sensible. I\u0027m not familiar with which BCP code is in mainline in Q and R. Anything in mainline that affects the core shouldn\u0027t be a problem, just the other way round.",
      "parentUuid": "58b62c42_a9ff9768",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b2075e2_850c7cf9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-08T13:29:17Z",
      "side": 1,
      "message": "Given that the runtime checks are done by the ART runtime any changes to flags in the ART dex files that require runtime changes should be fine in Q and R because the runtime will be updated at the same time as the flags.\n\nThere would be a problem if another APEX, say conscrypt was updated in Q or R without also updating ART and the dex files contained within that APEX relied on the ART runtime changes to compensate for the stricter dex flags.\n\nI\u0027m not sure which of these scenarios is possible but it is certainly something to consider.",
      "parentUuid": "a4425bf9_f9da6715",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0525524_effa59b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-08T13:29:17Z",
      "side": 1,
      "message": "FYI - I created https://paste.googleplex.com/5614549299363840 which shows the effect of the hiddenapi build tool part of this change on the hiddenapi-stub-flags.csv file.",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e537f9a5_fc0e7727",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-08T13:35:59Z",
      "side": 1,
      "message": "Thanks Paul, this really helps!!\n\nSo it shows that most methods affected are in libcore/, and that there are no APIs from Q and R mainline modules that are affected. This should clear your concerns, Mathew?",
      "parentUuid": "b0525524_effa59b1",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bde839a_08137388",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-02-08T14:44:15Z",
      "side": 1,
      "message": "I guess we might get away with it then :)\n\nDo we have a list of updatable modules that have BCP entries in Q \u0026 R?",
      "parentUuid": "e537f9a5_fc0e7727",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9200dbb_1cad7438",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-08T14:50:56Z",
      "side": 1,
      "message": "For Q we have:\ncom.android.conscrypt:conscrypt\ncom.android.media:updatable-media\n\nFor R we have additionally:\ncom.android.mediaprovider:framework-mediaprovider\ncom.android.os.statsd:framework-statsd\ncom.android.permission:framework-permission\ncom.android.sdkext:framework-sdkextensions\ncom.android.wifi:framework-wifi\ncom.android.tethering:framework-tethering",
      "parentUuid": "8bde839a_08137388",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa7853fd_958b3177",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-02-08T15:48:49Z",
      "side": 1,
      "message": "Well, as long as there\u0027s no overlap between those and Paul\u0027s list, then we\u0027re ok. I guess we got lucky there :)\n\nPaul, could you double check than none of those classes are updatable in Q/R?",
      "parentUuid": "e9200dbb_1cad7438",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06a62a68_5e162c7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-09T08:37:15Z",
      "side": 1,
      "message": "I could but even if I don\u0027t find anything it doesn\u0027t mean that we are safe. e.g. Someone could make a change tomorrow that would work with the new runtime and fail in the old runtime. So, if we want to prevent that from happening we would need to have build time checks. Working around an individual case should be as simple as adding a method that delegates to super in the derived class.",
      "parentUuid": "aa7853fd_958b3177",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "822d305f_53b3377b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-09T08:39:00Z",
      "side": 1,
      "message": "One way to create a build time check is to basically do what I did to create the diff which is to generate a list with and without these hiddenapi build tool changes and compare the two. That would require the build tool behavior to be configurable.",
      "parentUuid": "06a62a68_5e162c7b",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ad48c93_526f21d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-09T09:57:26Z",
      "side": 1,
      "message": "Given the old behavior was to promote a hidden method to be accessible, if a change tomorrow were to trigger that flip, then we\u0027re OK as we\u0027ve already shipped with the methods being hidden in old releases.",
      "parentUuid": "822d305f_53b3377b",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78028861_ea400832",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-09T11:33:12Z",
      "side": 1,
      "message": "The change in accessibility from one release to another doesn\u0027t matter. What matters is whether the information encoded in the dex file relies on your runtime change or not.\n\nLet\u0027s say the the old release marked the internal method Foo.bar() as being public because it directly implemented a method of a public interface PublicFoo. We currently still mark Foo.bar() public. A future refactoring of the code causes Foo.bar() to no longer directly implement the public interface and so is renamed to NotAFoo but it still implements the bar() method which is inherited into a NewFoo class that does implement PublicFoo.\n\nWithout the hiddenapi build tool changes NotAFoo.bar() will be marked as being public and so will work in both old and new releases.\n\nWith the hiddenapi build tool changes NotAFoo.bar() will be marked as being blocked instead of public which will break the old release.\n\ne.g.\n\nAPI: does not change from one release to the next.\n  public interface PublicFoo {\n    void foo();\n  }\n\n  public interface PublicFooCallback {\n    void callback(PublicFoo foo);\n  }\n\nApp: runs unchanged on both releases.\n  public class CallbackHandler implements PublicFooCallback {\n    void callback(PublicFoo foo) {\n      foo.foo();\n    }\n  }\n\nOld release internals:\n  /* Passed to PublicFooCallback */\n  public class Foo implements PublicFoo {\n    // Marked as public.\n    public void foo() {}\n  }\n\nNew release:\n  public class NotAFoo {\n    // Marked as blocked, relies on new runtime to check interfaces.\n    public void foo() {}\n  }\n\n  /* Passed to PublicFooCallback */\n  public class NewFoo extends NotAFoo implements PublicFoo {\n  }\n\nAs mentioned before we can detect at build time if this is an issue and we can work around it by either requiring the class that inherits the implementation of a public interface method to create a delegating method, or we could allow developers to supply an allow list of additional methods to make public. The former is probably better as it is less open to abuse.",
      "parentUuid": "3ad48c93_526f21d7",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2e4182a_857da052",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-09T14:38:50Z",
      "side": 1,
      "message": "\u003e The change in accessibility from one release to another doesn\u0027t matter. What matters is whether the information encoded in the dex file relies on your runtime change or not.\n\nWhich configuration were you thinking of in your example? Hiddenapi bits in the non-updatable platform, or hiddenapi bits in the mainline modules?\n\nThe platform bits cannot be changed for old releases, so it\u0027s OK if the dex files hiddenapi bits aren\u0027t the same between a today\u0027s build and the old releases.\n\nFor mainline modules for Q and R it indeed matters. Given the list of methods that were changed do not belong to any module, it means that mainline modules for Q and R were not exposed to the issue. Therefore, methods are in the list we expect. With the hiddenapi change in this CL, this will remain the case: methods in mainline modules will remain in the list we expect.",
      "parentUuid": "78028861_ea400832",
      "revId": "f0ff9ee4981692e3b0cc3b49d3ceded9160661ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}