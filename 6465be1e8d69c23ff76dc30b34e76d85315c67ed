{
  "comments": [
    {
      "key": {
        "uuid": "1c2b9a7f_ee3cdfcb",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "JitRoots?",
      "range": {
        "startLine": 335,
        "startChar": 20,
        "endLine": 335,
        "endChar": 28
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_55968c95",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-04T15:15:35Z",
      "side": 1,
      "message": "Is JitLiterals ok?",
      "parentUuid": "1c2b9a7f_ee3cdfcb",
      "range": {
        "startLine": 335,
        "startChar": 20,
        "endLine": 335,
        "endChar": 28
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_bb90af67",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-11-08T13:49:15Z",
      "side": 1,
      "message": "This creates an ambiguity for the word \"literal\". Previously, it was used only for data embedded in the code, now you\u0027re also using the word for stuff in the metadata. These are weak roots, right? So why not JitRoots or JitWeakRoots?",
      "parentUuid": "2b6bb700_55968c95",
      "range": {
        "startLine": 335,
        "startChar": 20,
        "endLine": 335,
        "endChar": 28
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b12739d_6af5b314",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-08T14:58:35Z",
      "side": 1,
      "message": "Done with JitRoots.",
      "parentUuid": "2b6bb700_bb90af67",
      "range": {
        "startLine": 335,
        "startChar": 20,
        "endLine": 335,
        "endChar": 28
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c2b9a7f_6e17cf60",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 5692,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "Sharpening does not currently allow such fallback because it determines the address for kDexCacheAddress before calling GetSupportedLoadStringKind().",
      "range": {
        "startLine": 5691,
        "startChar": 0,
        "endLine": 5692,
        "endChar": 53
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_55a04cdd",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 5692,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-04T15:15:35Z",
      "side": 1,
      "message": "Replace with kDexCacheViaMethod (kDexCacheAddress is dead anyway, I\u0027ll remove it in a follow-up cl).",
      "parentUuid": "1c2b9a7f_6e17cf60",
      "range": {
        "startLine": 5691,
        "startChar": 0,
        "endLine": 5692,
        "endChar": 53
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_aa3c6919",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 5
      },
      "lineNbr": 4287,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2016-10-12T02:34:44Z",
      "side": 1,
      "message": "Add a TODO comment.",
      "range": {
        "startLine": 4287,
        "startChar": 0,
        "endLine": 4287,
        "endChar": 27
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b55af38_3740387c",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 5
      },
      "lineNbr": 4287,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-04T15:15:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f7aac68_aa3c6919",
      "range": {
        "startLine": 4287,
        "startChar": 0,
        "endLine": 4287,
        "endChar": 27
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_9697e196",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 5443,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:23:52Z",
      "side": 1,
      "message": "Does it make sense to have \n\nDCHECK(Runtime::Current()-\u003eUseJitCompilation());\n\nhere?",
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_b5b44020",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 5443,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-04T15:15:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f7aac68_9697e196",
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc27a6af_4df09989",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 5725,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "I don\u0027t think this needs an environment, we\u0027re using it only when the string is already resolved and then we don\u0027t have the slow path with a call.",
      "range": {
        "startLine": 5725,
        "startChar": 21,
        "endLine": 5725,
        "endChar": 47
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c37d20c_208f4ae1",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 5725,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-12T12:41:25Z",
      "side": 1,
      "message": "Yup, that\u0027s what the code here is doing: return false to NeedsEnvironment if the load kind is kJitTableAddress :)",
      "parentUuid": "fc27a6af_4df09989",
      "range": {
        "startLine": 5725,
        "startChar": 21,
        "endLine": 5725,
        "endChar": 47
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c2b9a7f_ee217fbd",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 1144,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "Can we avoid this temporary storage? For example by writing directly to the literal_data?\n(Note: Missing OOM check.)",
      "range": {
        "startLine": 1142,
        "startChar": 0,
        "endLine": 1144,
        "endChar": 98
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c37d20c_e0eba267",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 1144,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-12T12:41:25Z",
      "side": 1,
      "message": "We cannot avoid the temporary storage for now (I\u0027ll add a comment). The literal_data will only be visited by GC once the OatQuickMethodHeader is registered within the jit code cache. That only happens during CommitCode (called in this method line 1160).\n\nWe can think of how to turn this around, and make the literal_data allocation visible to the GC in a safe way with regards to the jit code cache collection. But I think such a change would deserve its own CL.",
      "parentUuid": "1c2b9a7f_ee217fbd",
      "range": {
        "startLine": 1142,
        "startChar": 0,
        "endLine": 1144,
        "endChar": 98
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c2b9a7f_0e284b87",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "Since we allocate the JIT code and data areas together and within 1GiB, we could use a PC-relative addressing mode on x86-64 if we reserve both data and code area before patching.",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 83,
        "endChar": 68
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c37d20c_809456f2",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-12T12:41:25Z",
      "side": 1,
      "message": "Good point.\n\nProblem is reserving the code area before patching implies more ScopedCodeCacheWrite windows. Or a refactoring of the code generators to understand there\u0027s one buffer where things are emitted, and one final buffer.\n\nI\u0027ll add that as a comment.",
      "parentUuid": "1c2b9a7f_0e284b87",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 83,
        "endChar": 68
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_67a36d4c",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 288,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:48:50Z",
      "side": 1,
      "message": "As we discussed previously, it would be ideal if we can assert that accessing the literals while the system weak access is disabled wouldn\u0027t cause an object to be marked (as they should be already marked) to sanity-check the rationale behind the special JIT literal handling.\n\nBut I think it\u0027s not easy to assert that because the reader side doesn\u0027t have an easy place to put a DCHECK on (the PC-relative load in the compiled code, or requires an extra special read barrier slow path entrypoint for CC).\n\nDoes anyone have an idea of how we can assert that or something close to it?\n\nCC has \n\n    CHECK(self \u003d\u003d thread_running_gc_)\n        \u003c\u003c \"Only GC-running thread should access the mark stack \"\n        \u003c\u003c \"in the GC exclusive mark stack mode\";\n\nat least even though it doesn\u0027t cover the entire window of time.",
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_75146825",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 288,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-04T15:15:35Z",
      "side": 1,
      "message": "Yes, you would need that assert in the compiled code, which isn\u0027t ideal.",
      "parentUuid": "1f7aac68_67a36d4c",
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_d62cf9a1",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 299,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:23:52Z",
      "side": 1,
      "message": "Can we put a comment why this DCHECK holds? Because the strings are always strongly-interned and should be alive?",
      "range": {
        "startLine": 299,
        "startChar": 6,
        "endLine": 299,
        "endChar": 36
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b6bb700_150ff414",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 299,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-04T15:15:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f7aac68_d62cf9a1",
      "range": {
        "startLine": 299,
        "startChar": 6,
        "endLine": 299,
        "endChar": 36
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_7030909c",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-11T17:18:00Z",
      "side": 1,
      "message": "Please add code comments here (or elsewhere) why you think it\u0027s OK to not follow the full system-weak setup (which requires access to be blocked in certain phases).",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_2c76bcfb",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:23:52Z",
      "side": 1,
      "message": "I think the rationale that we discussed on why we don\u0027t currently need to block access to the literal tables is the following:\n\nThe literal classes and strings must be strongly-reachable (from the class loader and from the intern table) and marked by the time the system weaks handling happens. So, it\u0027s fine to access the literal system weaks (without getting blocked) while the system weaks handling is ongoing because accessing them doesn\u0027t change the liveness of the objects and allows the marking to be safely terminated. In general, accessing a system weak may revive an otherwise dead object into a live object, which would interfere with the termination of marking.\n\nThe only exception is the class unloading case for literal classes. But when the literal classes become unreachable as a result of class unloading, we won\u0027t be accessing the literal classes because the JIT\u0027ed code that accesses them must not be running at that point because of the class unloading.\n\nIs this correct?",
      "parentUuid": "1f7aac68_7030909c",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_ecd84448",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-11T22:27:11Z",
      "side": 1,
      "message": "I would think that is correct, but it\u0027s two long paragraphs and I\u0027d like this to be eternalized (since there is zero documentation about the JIT otherwise).",
      "parentUuid": "1f7aac68_2c76bcfb",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_c770c134",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:29:11Z",
      "side": 1,
      "message": "I think we should add a comment about the rationale somewhere.",
      "parentUuid": "1f7aac68_ecd84448",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c37d20c_60995226",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-10-12T12:41:25Z",
      "side": 1,
      "message": "Will do. Note that this is still under discussion.",
      "parentUuid": "1f7aac68_c770c134",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}