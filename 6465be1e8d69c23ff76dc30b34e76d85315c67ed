{
  "comments": [
    {
      "key": {
        "uuid": "1c2b9a7f_ee3cdfcb",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 5
      },
      "lineNbr": 335,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "JitRoots?",
      "range": {
        "startLine": 335,
        "startChar": 20,
        "endLine": 335,
        "endChar": 28
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c2b9a7f_6e17cf60",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 5692,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "Sharpening does not currently allow such fallback because it determines the address for kDexCacheAddress before calling GetSupportedLoadStringKind().",
      "range": {
        "startLine": 5691,
        "startChar": 0,
        "endLine": 5692,
        "endChar": 53
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_9697e196",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 5
      },
      "lineNbr": 5443,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:23:52Z",
      "side": 1,
      "message": "Does it make sense to have \n\nDCHECK(Runtime::Current()-\u003eUseJitCompilation());\n\nhere?",
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc27a6af_4df09989",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 5725,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "I don\u0027t think this needs an environment, we\u0027re using it only when the string is already resolved and then we don\u0027t have the slow path with a call.",
      "range": {
        "startLine": 5725,
        "startChar": 21,
        "endLine": 5725,
        "endChar": 47
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c2b9a7f_ee217fbd",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 1144,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "Can we avoid this temporary storage? For example by writing directly to the literal_data?\n(Note: Missing OOM check.)",
      "range": {
        "startLine": 1142,
        "startChar": 0,
        "endLine": 1144,
        "endChar": 98
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c2b9a7f_0e284b87",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-11T17:14:48Z",
      "side": 1,
      "message": "Since we allocate the JIT code and data areas together and within 1GiB, we could use a PC-relative addressing mode on x86-64 if we reserve both data and code area before patching.",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 83,
        "endChar": 68
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_d62cf9a1",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 5
      },
      "lineNbr": 299,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:23:52Z",
      "side": 1,
      "message": "Can we put a comment why this DCHECK holds? Because the strings are always strongly-interned and should be alive?",
      "range": {
        "startLine": 299,
        "startChar": 6,
        "endLine": 299,
        "endChar": 36
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_7030909c",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-11T17:18:00Z",
      "side": 1,
      "message": "Please add code comments here (or elsewhere) why you think it\u0027s OK to not follow the full system-weak setup (which requires access to be blocked in certain phases).",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_2c76bcfb",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:23:52Z",
      "side": 1,
      "message": "I think the rationale that we discussed on why we don\u0027t currently need to block access to the literal tables is the following:\n\nThe literal classes and strings must be strongly-reachable (from the class loader and from the intern table) and marked by the time the system weaks handling happens. So, it\u0027s fine to access the literal system weaks (without getting blocked) while the system weaks handling is ongoing because accessing them doesn\u0027t change the liveness of the objects and allows the marking to be safely terminated. In general, accessing a system weak may revive an otherwise dead object into a live object, which would interfere with the termination of marking.\n\nThe only exception is the class unloading case for literal classes. But when the literal classes become unreachable as a result of class unloading, we won\u0027t be accessing the literal classes because the JIT\u0027ed code that accesses them must not be running at that point because of the class unloading.\n\nIs this correct?",
      "parentUuid": "1f7aac68_7030909c",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_ecd84448",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-10-11T22:27:11Z",
      "side": 1,
      "message": "I would think that is correct, but it\u0027s two long paragraphs and I\u0027d like this to be eternalized (since there is zero documentation about the JIT otherwise).",
      "parentUuid": "1f7aac68_2c76bcfb",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f7aac68_c770c134",
        "filename": "runtime/runtime.cc",
        "patchSetId": 5
      },
      "lineNbr": 490,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-11T22:29:11Z",
      "side": 1,
      "message": "I think we should add a comment about the rationale somewhere.",
      "parentUuid": "1f7aac68_ecd84448",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 490,
        "endChar": 3
      },
      "revId": "6465be1e8d69c23ff76dc30b34e76d85315c67ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}