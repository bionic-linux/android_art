{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2a250dfc_5793f06a",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-30T16:50:06Z",
      "side": 1,
      "message": "This dependency list is much shorter now, thank you. Still, these Java transitive dependencies for `dalvikvm` should preferably not be here either.\n\nReally, the problem is that the `dalvikvm` Soong module is woefully incomplete and lacks many of the dependencies actually required to launch a functional VM, and that has been worked around by having that logic in .mk rules and scripts instead. This looks like another workaround which may be the practical way forward, but before we go this route I\u0027d like to understand exactly where the issue is with properly supporting this binary and what it\u0027d take to get there without too much extra tech debt.\n\nContinuing the discussion on https://r.android.com/3213216, I gather adding these as `required` dependencies in `dalvikvm` (possibly just for host) doesn\u0027t work, but why doesn\u0027t it? I thought it\u0027s supposed to ensure the required things get installed (in `$(HOST_OUT)` in this case) so they can be used from there. Doesn\u0027t the sandbox have access to `$(HOST_OUT)`?",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 100,
        "endChar": 75
      },
      "revId": "b29f7bf4588ef44b851346b3b0b640c504bc59a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dcd3996_93dc6b95",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1307893
      },
      "writtenOn": "2024-10-01T03:26:31Z",
      "side": 1,
      "message": "1. Actually, the issue may not lie with `dalvikvm` itself, but rather with `art-script`. This is because `dalvikvm` is `not` directly usable; it\u0027s invoked through the `art-script` shell script, which contains all the logic and dependencies. The reason for `hardcoding` these library paths is also due to limitations within `art-script`.\n\nUsing `shell scripts` for execution isn\u0027t ideal due to several factors: lack of encapsulation, poor portability, difficulty in maintenance, and debugging challenges.\n\nThe best approach would be converting `art-script` to `Python` and encapsulating all dependencies and logic within it, as demonstrated in aosp/3113120. \ne.g.\n```\npython_binary_host {\n    name: \"appcompat\",\n    srcs: [\"appcompat.py\"],\n    data: [\n        \":veridex\",\n        \":platform-bootclasspath{hiddenapi-flags.csv}\",\n        \":org.apache.http.legacy-stubs.zip\",\n        \":system-stubs.zip\",\n    ],\n    version: {\n        py3: {\n            embedded_launcher: true,\n        },\n    },\n}\n```\n\nHowever, the sheer size of `art-script` and the unknown extent of `CI` and `tests` relying on it pose difficulties for this conversion.\n\n2. Yes, sandbox mode does prevent access to `$(HOST_OUT)`. It enhances reproducibility, security, and portability by restricting access to declared inputs, network, and environment variables. This ensures consistent builds and prevents unauthorized actions. This isolation also facilitates distributed builds and compatibility with systems like `Bazel`.",
      "parentUuid": "2a250dfc_5793f06a",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 100,
        "endChar": 75
      },
      "revId": "b29f7bf4588ef44b851346b3b0b640c504bc59a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6733ecc6_a0646f58",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-30T16:50:06Z",
      "side": 1,
      "message": "I still wonder why it\u0027s necessary to do all the copying to this directory. Doesn\u0027t Soong generate install rules for host tools and their dependencies into `$(HOST_OUT)` so it\u0027d be possible to run the `art` script from there? (It does have \"host\" in it, as to your point on https://r.android.com/3213216 that the script looks for.)",
      "range": {
        "startLine": 110,
        "startChar": 29,
        "endLine": 110,
        "endChar": 38
      },
      "revId": "b29f7bf4588ef44b851346b3b0b640c504bc59a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f246bef6_5ee7cf0e",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1307893
      },
      "writtenOn": "2024-10-01T07:36:51Z",
      "side": 1,
      "message": "As mentioned above, `genrule` runs in a `sandbox` environment and cannot access `$(HOST_OUT)`.\n\nWe could certainly execute `mkdir -p $(genDir)/out/host/linux-x86/bin` to mirror the original directory structure of `$(HOST_OUT)`.\n\nHowever, `art-script` itself only requires the subdirectory to contain `\"host\"` or `\"target\"` (https://android-review.git.corp.google.com/c/platform/art/+/3213216/22/tools/ahat/Android.bp#153), so we only created the `host` subdirectory.\n\nhttps://source.corp.google.com/h/android/platform/superproject/main/+/main:art/tools/art;l\u003d600?q\u003d%22Can%20not%20determine%20whether%20are%20running%20on%20host%20or%20target%22\u0026sq\u003dgit:android%2F%2F%2Fmain@main",
      "parentUuid": "6733ecc6_a0646f58",
      "range": {
        "startLine": 110,
        "startChar": 29,
        "endLine": 110,
        "endChar": 38
      },
      "revId": "b29f7bf4588ef44b851346b3b0b640c504bc59a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1afdee7a_2310e7af",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1307893
      },
      "writtenOn": "2024-10-01T07:52:02Z",
      "side": 1,
      "message": "`genrule` operates in a sandbox to ensure build reproducibility and security. Allowing access to `$(HOST_OUT)` would break this isolation, leading to unpredictable builds and potential errors due to implicit dependencies on files that may change. It\u0027s crucial for `genrule` to explicitly declare its inputs to maintain a controlled and reliable build environment.",
      "parentUuid": "f246bef6_5ee7cf0e",
      "range": {
        "startLine": 110,
        "startChar": 29,
        "endLine": 110,
        "endChar": 38
      },
      "revId": "b29f7bf4588ef44b851346b3b0b640c504bc59a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}