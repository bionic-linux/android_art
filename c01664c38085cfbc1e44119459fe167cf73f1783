{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f783e36_a3830638",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-10T22:48:45Z",
      "side": 1,
      "message": "(this raced with submission of the parent CL, should be fine)",
      "revId": "c01664c38085cfbc1e44119459fe167cf73f1783",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e27f12e2_2d424ddb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-11-15T13:11:31Z",
      "side": 1,
      "message": "\u003e Presubmit-Verified -2\n\nUnfortunately I don\u0027t have access to the failure logs.\nWould it be possible to clarify which test failed and error message if possible?",
      "revId": "c01664c38085cfbc1e44119459fe167cf73f1783",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "420287c5_03bc3b69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-16T05:10:32Z",
      "side": 1,
      "message": "uh ? seems unrelated?\n\n```\nart/libartbase/base/mem_map_windows.cc:52:5: error: expected unqualified-id\nPLOG(ERROR) \u003c\u003c \"Protection or flag error was not supported.\";\n^\nsystem/libbase/include/android-base/logging.h:234:3: note: expanded from macro \u0027PLOG\u0027\nLOGGING_PREAMBLE(severity) \u0026\u0026                                                  \\\n^\nsystem/libbase/include/android-base/logging.h:227:4: note: expanded from macro \u0027LOGGING_PREAMBLE\u0027\n(WOULD_LOG(severity) \u0026\u0026                                                                  \\\n^\nsystem/libbase/include/android-base/logging.h:202:40: note: expanded from macro \u0027WOULD_LOG\u0027\n(UNLIKELY(::android::base::ShouldLog(SEVERITY_LAMBDA(severity), _LOG_TAG_INTERNAL)) || \\\n^\nsystem/libbase/include/android-base/logging.h:174:26: note: expanded from macro \u0027SEVERITY_LAMBDA\u0027\nusing ::android::base::ERROR;               \\\n^\nprebuilts/gcc/linux-x86/host/x86_64-w64-mingw32-4.8/x86_64-w64-mingw32/include/wingdi.h:75:15: note: expanded from macro \u0027ERROR\u0027\n#define ERROR 0\n^\nart/libartbase/base/mem_map_windows.cc:52:5: error: cannot initialize a parameter of type \u0027LogSeverity\u0027 with an rvalue of type \u0027int\u0027\nPLOG(ERROR) \u003c\u003c \"Protection or flag error was not supported.\";\n^~~~~~~~~~~\nsystem/libbase/include/android-base/logging.h:234:3: note: expanded from macro \u0027PLOG\u0027\nLOGGING_PREAMBLE(severity) \u0026\u0026                                                  \\\n^~~~~~~~~~~~~~~~~~~~~~~~~~\nsystem/libbase/include/android-base/logging.h:227:4: note: expanded from macro \u0027LOGGING_PREAMBLE\u0027\n(WOULD_LOG(severity) \u0026\u0026                                                                  \\\n^~~~~~~~~~~~~~~~~~~\nsystem/libbase/include/android-base/logging.h:202:40: note: expanded from macro \u0027WOULD_LOG\u0027\n(UNLIKELY(::android::base::ShouldLog(SEVERITY_LAMBDA(severity), _LOG_TAG_INTERNAL)) || \\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsystem/libbase/include/android-base/logging.h:169:35: note: expanded from macro \u0027SEVERITY_LAMBDA\u0027\n#define SEVERITY_LAMBDA(severity) ([\u0026]() {    \\\n^\nsystem/libbase/include/android-base/macros.h:84:49: note: expanded from macro \u0027UNLIKELY\u0027\n#define UNLIKELY( exp )     (__builtin_expect( (exp) !\u003d 0, false ))\n^~~\nsystem/libbase/include/android-base/logging.h:447:28: note: passing argument to parameter \u0027severity\u0027 here\nbool ShouldLog(LogSeverity severity, const char* tag);\n^\n```",
      "parentUuid": "e27f12e2_2d424ddb",
      "revId": "c01664c38085cfbc1e44119459fe167cf73f1783",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3434ad0b_c4ed2abf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-16T06:07:53Z",
      "side": 1,
      "message": "hmmm! maybe related?\n\nNote the fastest way to reproduce this specific build: Reproduce locally with `m out/soong/.intermediates/art/libartbase/libartbase/windows_x86_static/e4694d05f1cb76fefd10c9c37c092ec4/obj/art/libartbase/base/mem_map_windows.o` (though the has is probably different locally - I think there is an internal issue for this, so you might not be able to use this exact command)\n\nIf you have cd\u0027d into the art directory, I\u0027d recommend running `mma` to build all targets and all variants that are applicable to your lunch target.",
      "revId": "c01664c38085cfbc1e44119459fe167cf73f1783",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8ba9e66_a2591e42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-11-16T11:37:20Z",
      "side": 1,
      "message": "Thank you, Steven,\n\nI can confirm it is related to\nhttps://cs.android.com/android/platform/superproject/main/+/main:system/libbase/include/android-base/logging.h;l\u003d56?q\u003dsystem%2Flibbase%2Finclude%2Fandroid-base%2Flogging.h",
      "parentUuid": "3434ad0b_c4ed2abf",
      "revId": "c01664c38085cfbc1e44119459fe167cf73f1783",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b53e99e_48632a99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-11-16T11:45:11Z",
      "side": 1,
      "message": "Similarly to the base/utils.cc, I will add #undef of the ERROR macro in mem_map_windows.cc.",
      "parentUuid": "a8ba9e66_a2591e42",
      "revId": "c01664c38085cfbc1e44119459fe167cf73f1783",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}