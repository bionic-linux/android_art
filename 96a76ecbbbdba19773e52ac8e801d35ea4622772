{
  "comments": [
    {
      "key": {
        "uuid": "4628e269_c61282c8",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-02T11:31:58Z",
      "side": 1,
      "message": "Doesn\u0027t that depend on the visit order? Meaning, you\u0027re taking the heap location of either the if or the else branch? does it matter?",
      "range": {
        "startLine": 670,
        "startChar": 0,
        "endLine": 670,
        "endChar": 96
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_e3694e3b",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-02T19:13:22Z",
      "side": 1,
      "message": "We use reverse post order. A heap location is \"global\" so it doesn\u0027t matter. This CL tries to analyze heap location for a singleton more based on liveness.",
      "parentUuid": "4628e269_c61282c8",
      "range": {
        "startLine": 670,
        "startChar": 0,
        "endLine": 670,
        "endChar": 96
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4628e269_e6177eb5",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 677,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-02T11:31:58Z",
      "side": 1,
      "message": "Add a comment.",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 677,
        "endChar": 40
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_43365a47",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 677,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-02T19:13:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4628e269_e6177eb5",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 677,
        "endChar": 40
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_fd78cfa6",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 679,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-11-02T15:32:14Z",
      "side": 1,
      "message": "can you use a for (:) iterator here which directly gives the predecessor (makes the use of i/j below less prone to error)",
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_e39caef5",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 679,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-02T19:13:22Z",
      "side": 1,
      "message": "Did it for predecessors including another case below. I need the index i so kept it the same for line 668.",
      "parentUuid": "a6dd1ea2_fd78cfa6",
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e641d62c_abd0e9b1",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 683,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-02T11:31:58Z",
      "side": 1,
      "message": "I guess a singleton ref cannot feed in a phi?",
      "range": {
        "startLine": 683,
        "startChar": 10,
        "endLine": 683,
        "endChar": 59
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_e3266ee8",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 683,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-02T19:13:22Z",
      "side": 1,
      "message": "That\u0027s right. It can\u0027t have any alias. No phi/select, store to heap, pass to a call as parameter.",
      "parentUuid": "e641d62c_abd0e9b1",
      "range": {
        "startLine": 683,
        "startChar": 10,
        "endLine": 683,
        "endChar": 59
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e641d62c_cbc535f3",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 684,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-02T11:31:58Z",
      "side": 1,
      "message": "it",
      "range": {
        "startLine": 684,
        "startChar": 12,
        "endLine": 684,
        "endChar": 29
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_63339e24",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 684,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-02T19:13:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e641d62c_cbc535f3",
      "range": {
        "startLine": 684,
        "startChar": 12,
        "endLine": 684,
        "endChar": 29
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e641d62c_ebcaf101",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-02T11:31:58Z",
      "side": 1,
      "message": "Please add a comment.",
      "range": {
        "startLine": 714,
        "startChar": 2,
        "endLine": 714,
        "endChar": 64
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_e37dce94",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-02T19:13:22Z",
      "side": 1,
      "message": "Added some comment and moved the two asserts on line 700 here and deleted line 699.",
      "parentUuid": "e641d62c_ebcaf101",
      "range": {
        "startLine": 714,
        "startChar": 2,
        "endLine": 714,
        "endChar": 64
      },
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6dd1ea2_3d6387fa",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 751,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-11-02T15:32:14Z",
      "side": 1,
      "message": "nice!",
      "revId": "96a76ecbbbdba19773e52ac8e801d35ea4622772",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}