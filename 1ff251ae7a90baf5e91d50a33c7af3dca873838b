{
  "comments": [
    {
      "key": {
        "uuid": "2557fb42_40a7dfad",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 3
      },
      "lineNbr": 1321,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-04-23T16:41:27Z",
      "side": 1,
      "message": "Typo?",
      "range": {
        "startLine": 1321,
        "startChar": 74,
        "endLine": 1321,
        "endChar": 75
      },
      "revId": "1ff251ae7a90baf5e91d50a33c7af3dca873838b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85fd0775_5c7242f9",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-04-23T17:53:30Z",
      "side": 1,
      "message": "How about supporting non-object arrays as well?\n\nI\u0027m thinking of something like:\n\ntemplate\u003ctypename ComponentType\u003e\nstatic MemberOffset DataOffsetAtIndex(int32_t index) {\n  size_t component_size \u003d sizeof(ComponentType);\n  return MemberOffset(DataOffset(component_size).SizeValue() + component_size * index);\n}",
      "range": {
        "startLine": 71,
        "startChar": 17,
        "endLine": 71,
        "endChar": 27
      },
      "revId": "1ff251ae7a90baf5e91d50a33c7af3dca873838b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5137f9f_64a20ace",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-04-23T18:28:30Z",
      "side": 1,
      "message": "I am not sure I agree. The issue is that on a high level, object arrays contain links to objects. But with your change, one would have to write \u003cHeapReference\u003cmirror::X\u003e\u003e so that component_size gets the right size, which is not as intuitive and straightforward as just \u003cmirror::X\u003e.",
      "parentUuid": "85fd0775_5c7242f9",
      "range": {
        "startLine": 71,
        "startChar": 17,
        "endLine": 71,
        "endChar": 27
      },
      "revId": "1ff251ae7a90baf5e91d50a33c7af3dca873838b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5137f9f_049076c9",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-04-23T19:16:31Z",
      "side": 1,
      "message": "OK. I was going to say the following, but there\u0027s already ObjectArray\u003cT\u003e::OffsetOfElement() which we can use in this case?\n\n---\n\nDo we need MirrorType? It does not seem that sizeof(HeapReference\u003cMirrorType\u003e) is a function of MirrorType or MirrorType is propagated to the return type.\n\nIf this is only for object arrays, I\u0027d imagine something like:\n\nstatic MemberOffset ObjectArrayDataOffsetAtIndex(int32_t index) {\n  size_t component_size \u003d sizeof(HeapReference\u003cObject\u003e);\n  return MemberOffset(DataOffset(component_size).SizeValue() + component_size * index);\n}\n\nassuming that we don\u0027t need to parameterize it with MirrorType and we\u0027d like to emphasize that it\u0027s only for object arrays. We could also consider moving it to object_array.h and losing the \"ObjectArray\" name prefix.\n\nA minor point: I think the convention is to have MirrorType include the *. So, HeapReference\u003cMirrorType\u003e instead of HeapReference\u003cMirrorType*\u003e, if we need to use MirrorType at all.",
      "parentUuid": "c5137f9f_64a20ace",
      "range": {
        "startLine": 71,
        "startChar": 17,
        "endLine": 71,
        "endChar": 27
      },
      "revId": "1ff251ae7a90baf5e91d50a33c7af3dca873838b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5f76b98_8e791b52",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-04-24T04:58:16Z",
      "side": 1,
      "message": "Changing notation to HeapReference\u003cObject\u003e could touch almost all source files refactored by Ian Rogers in bounds of 64-bit enabling efforts. Thus it does not sounds reasonable to change HeapReference notation at this moment.\n\nPlease note that this patch is just a fix which is required for ongoing efforts on 64-bit quick code generation for multiple platforms. \n\nI\u0027d suggest to keep the patch as is with simplified notation, supporting only arrays of objects. There are no similar calculations in QCG for non-object arrays AFAIK.",
      "parentUuid": "c5137f9f_049076c9",
      "revId": "1ff251ae7a90baf5e91d50a33c7af3dca873838b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}