{
  "comments": [
    {
      "key": {
        "uuid": "4b7bd47a_503cd1e6",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 5100,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-11T13:13:52Z",
      "side": 1,
      "message": "Should we actually print this? Trying to do so may lead to another SIGSEGV (and dropping of this abort message) if the `klass` data has been zeroed out.",
      "range": {
        "startLine": 5100,
        "startChar": 29,
        "endLine": 5100,
        "endChar": 54
      },
      "revId": "3e5906d9fa642d70fb7dbc80cebba2888ecbb9da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4230d88_24698207",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 5100,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-11T15:22:57Z",
      "side": 1,
      "message": "You could add a SafePrettyDescriptor that checks things? For this CL, maybe just split up the CHECK:\n\n if (m \u003d\u003d nullptr) {\n   LOG(FATAL_WITHOUT_ABORT) \u003c\u003c \"Null method in vtable @ \" \u003c\u003c i \u003c\u003c \" for \" \u003c\u003c std::hex \u003c\u003c reinterpret_cast\u003cuinptr_t\u003e(klass.Get());\n   LOG(FATAL) \u003c\u003c klass-\u003ePrettyDescriptor();\n }\n\nThat way the logcat will have some useful logging.",
      "parentUuid": "4b7bd47a_503cd1e6",
      "range": {
        "startLine": 5100,
        "startChar": 29,
        "endLine": 5100,
        "endChar": 54
      },
      "revId": "3e5906d9fa642d70fb7dbc80cebba2888ecbb9da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}