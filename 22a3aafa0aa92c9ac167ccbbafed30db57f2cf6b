{
  "comments": [
    {
      "key": {
        "uuid": "b57c2af2_ceadb765",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-06T15:34:01Z",
      "side": 1,
      "message": "Nit: method on same line as frame_id and arguments in the new line.",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 97
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35703a18_2a42bb2e",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-06T15:34:01Z",
      "side": 1,
      "message": "TBH, this code is already aware that it needs to deal with inlined frames specially. How about having static a ComputeNonInlinedFrames in StackVisitor? And then do the math dance just here?",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 96
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "156b3632_693761ab",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-10-06T15:42:28Z",
      "side": 1,
      "message": "Well I placed it in Instrumentation because it really depends on the way instrumentation treats inlined frames. Who knows if we visit inlined frames in the future?",
      "parentUuid": "35703a18_2a42bb2e",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 96
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75763214_6f5da164",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-10-06T15:42:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b57c2af2_ceadb765",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 97
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75763214_0f37cd16",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-06T15:50:23Z",
      "side": 1,
      "message": "OK, so how about passing everything to ComputeFrameId and avoid doing a stack walk there?\n\nsize_t frame_id \u003d ComputeFrameId(num_frames, cur_depth, number_of_inlined_frames);\n\n?",
      "parentUuid": "156b3632_693761ab",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 96
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35703a18_6a3cb3a5",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-10-06T16:04:52Z",
      "side": 1,
      "message": "That does not work if the current visitor visits inlined frames (num_frames would include all inlined frames in the stack). So you really want the number of frames *without* inlined frames (because instrumentation ignores them). That\u0027s what Instrumentation::ComputeFrameId does.\nUnless your \u0027number_of_inlined_frames\u0027 is the total number of inlined frames in the stack? That would require a stack walk.",
      "parentUuid": "75763214_0f37cd16",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 96
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35703a18_8a300fca",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-06T16:16:53Z",
      "side": 1,
      "message": "Ok I see. Not the simplest thing in the world this code :-( I think what confuses me is that you pass some kind of current state (depth_without_inlined_frame) to a static method that will use that state. But now I understand what you\u0027re asking is \"compute the frame id of that method at depth X\".\n\nStill, you\u0027re implicitly encoding in this code that you expect instrumentation to not deal with inlined frames, right? So you could pass both information: cur_depth_ and current_number_of_inlined_frames_.?",
      "parentUuid": "35703a18_6a3cb3a5",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 96
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35703a18_ea27c38a",
        "filename": "runtime/stack.cc",
        "patchSetId": 1
      },
      "lineNbr": 968,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-10-06T16:29:46Z",
      "side": 1,
      "message": "Good point. I understand your confusion, I will change that.\n\nI\u0027m actually thinking about the reverse situation where instrumentation would visit inlined frames but the current visitor does not. It\u0027s even more complicated because you don\u0027t know how many inlined frames were in the stack (especially up the current method) when you compute the instrumentation frame ID :(\n\nBut yes, for instrumentation point of view, it is basically \"give me the frame ID of the current method as if there was no inlined method in the stack\". So I agree it\u0027s better to separate things.",
      "parentUuid": "35703a18_8a300fca",
      "range": {
        "startLine": 966,
        "startChar": 0,
        "endLine": 968,
        "endChar": 96
      },
      "revId": "22a3aafa0aa92c9ac167ccbbafed30db57f2cf6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}