{
  "comments": [
    {
      "key": {
        "uuid": "90fd4f75_f564f29c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 834,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "is this multi-thread safe?",
      "range": {
        "startLine": 834,
        "startChar": 9,
        "endLine": 834,
        "endChar": 57
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_8e5bff63",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 834,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-09T10:05:17Z",
      "side": 1,
      "message": "LocationHelper is never shared between threads.",
      "parentUuid": "90fd4f75_f564f29c",
      "range": {
        "startLine": 834,
        "startChar": 9,
        "endLine": 834,
        "endChar": 57
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1cfe4_4cf99399",
        "filename": "runtime/dex_file.h",
        "patchSetId": 4
      },
      "lineNbr": 855,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "Could you use \"dex location\" here? I\u0027d avoid to introduce or reference anything that would sound like yet another type of location (\"plain\"). The same for other places where you refer to the plain location.",
      "range": {
        "startLine": 855,
        "startChar": 29,
        "endLine": 855,
        "endChar": 43
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_ae5efba1",
        "filename": "runtime/dex_file.h",
        "patchSetId": 4
      },
      "lineNbr": 869,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "funny :) https://android-review.googlesource.com/#/c/101420/1/runtime/dex_file.h@833\n\n(I guess I should have also added the offline discussions whether or not this would be efficient enough :) )",
      "range": {
        "startLine": 869,
        "startChar": 9,
        "endLine": 869,
        "endChar": 20
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_991fcb78",
        "filename": "runtime/dex_file.h",
        "patchSetId": 4
      },
      "lineNbr": 869,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-09T10:05:17Z",
      "side": 1,
      "message": "I was just trying to keep these together.\n\nRegarding performance, I\u0027ve inspired by https://android-review.googlesource.com/#/c/103969/3/runtime/mirror/class.h .",
      "parentUuid": "f0aa0b52_ae5efba1",
      "range": {
        "startLine": 869,
        "startChar": 9,
        "endLine": 869,
        "endChar": 20
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "101a3fb4_757e3286",
        "filename": "runtime/dex_file.h",
        "patchSetId": 4
      },
      "lineNbr": 869,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-09-10T15:24:55Z",
      "side": 1,
      "message": "Sadly we added that pattern due to std::string allocation performance issues related to GetDescriptor next to never returning something requiring a std::string and GetDescriptor being very hot at dex2oat time. In general its nice to observe the return value optimization:\nhttp://en.wikipedia.org/wiki/Return_value_optimization\nbut for std::string where the std::string is just wrapping a \u0027const char*\u0027 this leads to a malloc and strcpy. Do we care enough here to bother optimizing? Do we have yet another C++ string implementation that could avoid the malloc and strcpy when its known the backing storage is not going to get freed? I think ideally we wouldn\u0027t be copying the anti-pattern in GetDescriptor elsewhere - unless we have to :-/",
      "parentUuid": "f0aa0b52_991fcb78",
      "range": {
        "startLine": 869,
        "startChar": 9,
        "endLine": 869,
        "endChar": 20
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1cfe4_2cfc4f4b",
        "filename": "runtime/dex_file.h",
        "patchSetId": 4
      },
      "lineNbr": 872,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "After seeing how this works I think it might be better to make sure that GetOatDexFile is called just once... After examining the code I don\u0027t think we redundantly compute the canonical location too many times. Feel free to contradict me :)\n\nA specific concern here is multi-threading safety.",
      "range": {
        "startLine": 872,
        "startChar": 8,
        "endLine": 872,
        "endChar": 22
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_19dafb84",
        "filename": "runtime/dex_file.h",
        "patchSetId": 4
      },
      "lineNbr": 872,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-09T10:05:17Z",
      "side": 1,
      "message": "LocationHelper is never shared between threads.\n\nIf you\u0027re concerned about concurrently changing file system, then I\u0027d need to call the whole notion of canonical dex location ill-defined.",
      "parentUuid": "90d1cfe4_2cfc4f4b",
      "range": {
        "startLine": 872,
        "startChar": 8,
        "endLine": 872,
        "endChar": 22
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "101a3fb4_554a166e",
        "filename": "runtime/dex_file.h",
        "patchSetId": 4
      },
      "lineNbr": 872,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-09-10T15:24:55Z",
      "side": 1,
      "message": "This shouldn\u0027t be in dex file, which captures the binary representation of a dex file on disk. This and path related utilities should be moved to the class linker. The motivation for this is that dex_file.h/cc is the eventual successor for a lot of tools like dexdump. As such we want to avoid clutter, and clutter that will cause churn.",
      "parentUuid": "f0aa0b52_19dafb84",
      "range": {
        "startLine": 872,
        "startChar": 8,
        "endLine": 872,
        "endChar": 22
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1cfe4_4ccbd359",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 324,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "do we have the guarantee that the files are sorted?",
      "range": {
        "startLine": 324,
        "startChar": 6,
        "endLine": 324,
        "endChar": 96
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90fd4f75_1549b6f2",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 324,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-09T10:05:17Z",
      "side": 1,
      "message": "No, but multi-dex apps should really have the same base location for all dex files anyway.",
      "parentUuid": "90d1cfe4_4ccbd359",
      "range": {
        "startLine": 324,
        "startChar": 6,
        "endLine": 324,
        "endChar": 96
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_6e16c3b4",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "this is duplication of GetCanonicalDexFileLocation logic. I\u0027m not a big fan of it...\n\nThis makes me think if it\u0027s not better to cache the canonical file in the DexFile class itself and add a method: GetCanonicalDexLocation(DexFile* relatedDexfile) which can use the base canonical path of the provided dex file.",
      "range": {
        "startLine": 325,
        "startChar": 4,
        "endLine": 340,
        "endChar": 5
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_eeaab306",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 354,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "Wouldn\u0027t you miss adding the keys for the multidex parts (e.g. base:classes2.dex) with this condition?",
      "range": {
        "startLine": 354,
        "startChar": 4,
        "endLine": 354,
        "endChar": 29
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90fd4f75_b5570a8b",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 354,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-09T10:05:17Z",
      "side": 1,
      "message": "\"base:classesN.dex\" is already added above. This condition makes sure we add \"path:classesN.dex\" only if path !\u003d base.",
      "parentUuid": "f0aa0b52_eeaab306",
      "range": {
        "startLine": 354,
        "startChar": 4,
        "endLine": 354,
        "endChar": 29
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_ce249717",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 451,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-09-08T16:44:46Z",
      "side": 1,
      "message": "do we really need this? If so, maybe LocationHelper is a better choice?. Anyhow I find it a bit messy to need to add this in addition to the dex_file_location.",
      "range": {
        "startLine": 451,
        "startChar": 51,
        "endLine": 451,
        "endChar": 78
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0168b8e_4e53a7a0",
        "filename": "runtime/utils.h",
        "patchSetId": 4
      },
      "lineNbr": 516,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-09-10T15:24:55Z",
      "side": 1,
      "message": "iirc we used to pick up UniquePtr from libnativehelper, should these similarly be pushed up?",
      "range": {
        "startLine": 506,
        "startChar": 0,
        "endLine": 516,
        "endChar": 50
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_baecf599",
        "filename": "runtime/utils.h",
        "patchSetId": 4
      },
      "lineNbr": 516,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-09-10T15:48:06Z",
      "side": 1,
      "message": "It depends. How often do devs need to use C functions that, like realpath(), return malloc()ed memory?",
      "parentUuid": "f0168b8e_4e53a7a0",
      "range": {
        "startLine": 506,
        "startChar": 0,
        "endLine": 516,
        "endChar": 50
      },
      "revId": "4c96204bf0d62abaa78906c76e5de18a381bfe81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}