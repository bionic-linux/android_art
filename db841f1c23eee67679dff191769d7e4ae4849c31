{
  "comments": [
    {
      "key": {
        "uuid": "9069d076_b0501e22",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-16T12:42:33Z",
      "side": 1,
      "message": "SlowPathCodeARM, SlowPathCodeX86 and SlowPathCodeX86_64 are similar; maybe there\u0027s an opportunity to factor common code through a common base class or a template here?",
      "range": {
        "startLine": 63,
        "startChar": 6,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "db841f1c23eee67679dff191769d7e4ae4849c31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f06a0c65_b07820ef",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-16T14:16:00Z",
      "side": 1,
      "message": "As discussed, sharing code between backends seems like a natural things to do, but, as the vixl example shows, often ends up being premature, or over-engineered. I\u0027m fine with trying to share as much once we have a stable product, but as long as we\u0027re building it, I\u0027d rather not block (or force unfortunate engineering decisions like mapping between art::Label and vixl::Label) individual backends for the sake of code sharing.",
      "parentUuid": "9069d076_b0501e22",
      "range": {
        "startLine": 63,
        "startChar": 6,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "db841f1c23eee67679dff191769d7e4ae4849c31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06fc874_0f8ea939",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-16T12:42:33Z",
      "side": 1,
      "message": "I am not familiar with casting conventions used in ART, but shouldn\u0027t this be a (DCHECK\u0027d) dynamic_cast?",
      "range": {
        "startLine": 114,
        "startChar": 36,
        "endLine": 114,
        "endChar": 71
      },
      "revId": "db841f1c23eee67679dff191769d7e4ae4849c31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06fc874_efa7959b",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-10-16T13:05:16Z",
      "side": 1,
      "message": "We have down_cast in runtime/base/cast.h. However it uses static_cast.",
      "parentUuid": "d06fc874_0f8ea939",
      "range": {
        "startLine": 114,
        "startChar": 36,
        "endLine": 114,
        "endChar": 71
      },
      "revId": "db841f1c23eee67679dff191769d7e4ae4849c31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9069d076_d00cb2e0",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-16T14:16:00Z",
      "side": 1,
      "message": "Did not know about down_cast, thanks. Done.",
      "parentUuid": "d06fc874_efa7959b",
      "range": {
        "startLine": 114,
        "startChar": 36,
        "endLine": 114,
        "endChar": 71
      },
      "revId": "db841f1c23eee67679dff191769d7e4ae4849c31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06fc874_2fd04d04",
        "filename": "compiler/optimizing/code_generator_arm.h",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-10-16T12:42:33Z",
      "side": 1,
      "message": "Likewise, GetLabelOf, Initialize and block_labels_ have similar implementations in CodeGeneratorARM, CodeGeneratorX86 and CodeGeneratorX86_64; they could be factored in a common base class inheriting from CodeGenerator.",
      "range": {
        "startLine": 190,
        "startChar": 0,
        "endLine": 200,
        "endChar": 37
      },
      "revId": "db841f1c23eee67679dff191769d7e4ae4849c31",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}