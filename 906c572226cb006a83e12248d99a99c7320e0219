{
  "comments": [
    {
      "key": {
        "uuid": "0552f722_ecb5ffd4",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 3
      },
      "lineNbr": 367,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-04-18T12:35:52Z",
      "side": 1,
      "message": "Perhaps TargetReg(kArg0) should return a Solo64 for x86_64?  Then you wouldn\u0027t need the \u0027if\u0027",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45586f41_e32d09ca",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 3
      },
      "lineNbr": 367,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-04-18T13:37:44Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "0552f722_ecb5ffd4",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0552f722_ccb243eb",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 3
      },
      "lineNbr": 1414,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-04-18T12:35:52Z",
      "side": 1,
      "message": "This looks like an excellent place for a virtual function :-)",
      "range": {
        "startLine": 1408,
        "startChar": 2,
        "endLine": 1414,
        "endChar": 1
      },
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0552f722_acaf0781",
        "filename": "compiler/dex/quick/gen_loadstore.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-04-18T12:35:52Z",
      "side": 1,
      "message": "Could LoadBaseDisp look at Is64Bit and automatically change to kLong?  Does that make sense?",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45586f41_7e03ee2d",
        "filename": "compiler/dex/quick/gen_loadstore.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-04-18T13:37:44Z",
      "side": 1,
      "message": "The LoadWord/StoreWord code needs some thought.  These originated as wrappers to avoid constantly typing out all of the arguments for LoadBaseDisp, and likely are used frequently with the assumption that the size is 32 bits regardless of natural machine word size.  It might make sense to replace existing uses of LoadWord/StoreWord with Load32/Store32 (the typical case) and then have LoadWord/StoreWorld target-dependent for those (much rarer, I assume) cases that you really do want the natural machine word size.",
      "parentUuid": "0552f722_acaf0781",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0552f722_8cac4b8d",
        "filename": "compiler/dex/quick/x86/call_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-04-18T12:35:52Z",
      "side": 1,
      "message": "Are we doing compile time code selection, or runtime?",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0552f722_0c6f3b7e",
        "filename": "compiler/dex/quick/x86/call_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-04-18T13:37:44Z",
      "side": 1,
      "message": "Should be run-time code selection (at the moment we assume a host build can generate code for any target).  It\u0027s on our TODO list to support target builds that only build for one target.",
      "parentUuid": "0552f722_8cac4b8d",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6571f3c6_99391bf1",
        "filename": "compiler/dex/quick/x86/call_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-04-21T07:41:19Z",
      "side": 1,
      "message": "While this patch is a WIP, the #ifdef is safest way to do not break x86 functionality. Making thise selection run-time require refactoring of common QCG code, which still have ThreadOffset\u003c4\u003e issue (all functions assumes that thread offset contains 32-bit pointers).",
      "parentUuid": "0552f722_0c6f3b7e",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0552f722_8c5a0bd5",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 562,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-04-18T13:37:44Z",
      "side": 1,
      "message": "Better to have a target-specific function that returns a RegStorage of the  target\u0027s natural width.",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "058037c3_d611a474",
        "filename": "compiler/dex/quick/x86/target_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 562,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-04-21T07:41:19Z",
      "side": 1,
      "message": "Is it correct that 91569 adds such function?",
      "parentUuid": "0552f722_8c5a0bd5",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45586f41_def41af8",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 695,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-04-18T13:37:44Z",
      "side": 1,
      "message": "This code has changed in my outstanding CL - LoadBaseIndexedDisp no longer assumes a register pair.",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6571f3c6_f93cd7e1",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 695,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-04-21T07:41:19Z",
      "side": 1,
      "message": "Bill, I\u0027ll rebase this patch on top of your patch 91569 soon.",
      "parentUuid": "45586f41_def41af8",
      "revId": "906c572226cb006a83e12248d99a99c7320e0219",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}