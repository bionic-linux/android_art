{
  "comments": [
    {
      "key": {
        "uuid": "5da5e8c5_a23d6077",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 5
      },
      "lineNbr": 1172,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-02-11T11:31:37Z",
      "side": 1,
      "message": "for (const auto\u0026 entry : first_index_bounds_check_map_)",
      "range": {
        "startLine": 1169,
        "startChar": 4,
        "endLine": 1172,
        "endChar": 14
      },
      "revId": "f2372e0ec3e8d896b2c0dc6ba030737f917994d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7daf0c90_de501550",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 5
      },
      "lineNbr": 1194,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-02-11T11:31:37Z",
      "side": 1,
      "message": "Shouldn\u0027t we also check that all non-exceptional paths inevitably reach `user`?\n\n    x \u003d a[0];\n    if (b) {\n      x +\u003d a[1];\n    } else {\n      // Does not throw is a.length \u003d\u003d 1.\n    }\n\nHowever, for cases where the same range check is done on different branches, we should probably move it to an earlier point first:\n\n    int x \u003d a[0];\n    // All paths reach a[1], so the range check should be\n    // pulled out of the `if` and replaced with deoptimize.\n    if (b) {\n      x +\u003d a[1];\n    } else {\n      x -\u003d a[1];\n    }\n\nThis is the case for android.opengl.Matrix.setRotateM().",
      "range": {
        "startLine": 1194,
        "startChar": 37,
        "endLine": 1194,
        "endChar": 71
      },
      "revId": "f2372e0ec3e8d896b2c0dc6ba030737f917994d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd0fc4b0_de6ca50b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 5
      },
      "lineNbr": 1194,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-11T15:30:50Z",
      "side": 1,
      "message": "Yes, I was worried about those cases too. First I thought they would have there own array length instructions anyway, but I wrote a few unit tests that share the array length instruction in such cases. It will be a bit more work to collect all references then. Let me think about this a bit today....",
      "parentUuid": "7daf0c90_de501550",
      "range": {
        "startLine": 1194,
        "startChar": 37,
        "endLine": 1194,
        "endChar": 71
      },
      "revId": "f2372e0ec3e8d896b2c0dc6ba030737f917994d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdb504dc_dd11ffe2",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 5
      },
      "lineNbr": 1194,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-02-11T16:06:54Z",
      "side": 1,
      "message": "I think the GVN should remove any HArrayLength if there is an identical one in a dominator and BCE is running after GVN.",
      "parentUuid": "bd0fc4b0_de6ca50b",
      "range": {
        "startLine": 1194,
        "startChar": 37,
        "endLine": 1194,
        "endChar": 71
      },
      "revId": "f2372e0ec3e8d896b2c0dc6ba030737f917994d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}