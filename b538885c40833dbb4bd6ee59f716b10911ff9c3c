{
  "comments": [
    {
      "key": {
        "uuid": "63758ab8_6841bd67",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-03-27T21:37:19Z",
      "side": 1,
      "message": "Can you please elaborate on what you mean by \"fixed layout\" for the dex cache? I think that is the crucial concept I am not understanding here?",
      "revId": "b538885c40833dbb4bd6ee59f716b10911ff9c3c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63a3ca80_58470980",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 319,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-03-27T21:37:19Z",
      "side": 1,
      "message": "I took a closer look, and I\u0027m just not sure if there\u0027s a need to do this \"bin slot\" manipulation here?\n\nOnce it\u0027s added to the dex_cache_array_slots_, you already do a special check in AssignImageBinSlot when objects are arrays.\n\nIf you want the objects to be assigned in a specific order (and again, I\u0027m not sure I understand why that would matter?), then changing the visit logic would make more sense to me than adding out-of-band logic to move bins around.\n\n(in other words, removing all the bin_slot_sizes_ and image_end_ manipulations back to where they were before this CL)",
      "revId": "b538885c40833dbb4bd6ee59f716b10911ff9c3c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63758ab8_a58f007e",
        "filename": "compiler/image_writer.h",
        "patchSetId": 19
      },
      "lineNbr": 299,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-03-27T21:37:19Z",
      "side": 1,
      "message": "Why does this say \"slots\" (in the comment or the name)?\n\nIn the code it\u0027s storing the values as the offset relative to the 0th image bin (i.e. the 0th element is at offset 0)",
      "range": {
        "startLine": 299,
        "startChar": 27,
        "endLine": 299,
        "endChar": 33
      },
      "revId": "b538885c40833dbb4bd6ee59f716b10911ff9c3c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}