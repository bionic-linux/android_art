{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "69d3945c_ddb4c3d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-05-13T01:35:09Z",
      "side": 1,
      "message": "Hi Lokesh and Hans,\nPlease review. \nI have added the changes suggested by Lokesh this morning. Also I updated after Hans cl that went in this afternoon per my discussion with Hans.\nThanks,\nWessam",
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45ed16c2_c15e207f",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-05-13T02:13:02Z",
      "side": 1,
      "message": "Could we merge all calls to this function in one place, probably further down in this function? Currently the proliferation of calls at different levels of the hierarchy makes it very opaque whether we\u0027re counting everything exactly once.\n\nNote that the AllocLargeObject call just turns into a recursive call to this function, with a different allocator. It seems to me that the right place to do this is near the instrumentation checks near the bottom of this function, probably inside the check for bytes_tl_bulk_allocated \u003e 0 ?\n\nWe presumably do not want to turn on kInstrumented for the sampling profiler, to minimize impact at low sampling rate? Thus this can\u0027t be inside a kInstrumented conditional?",
      "range": {
        "startLine": 116,
        "startChar": 6,
        "endLine": 116,
        "endChar": 62
      },
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6920164f_f2334459",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-05-13T06:20:32Z",
      "side": 1,
      "message": "The problem with moving to bottom of this function is that sampling in case of TLAB allocators is quite involved and is handled in AllocWithNewTlab() (in gc/heap.c). So I suggested that we cover Large and non-moving allocations here and TLAB cases in AllocWithNewTlab().\n\nAllocLargeObject does recursively call this function again, but always with kCheckLargeObject\u003dfalse, hence will never enter this if condition.\n\nWessam can her thoughts as well.",
      "parentUuid": "45ed16c2_c15e207f",
      "range": {
        "startLine": 116,
        "startChar": 6,
        "endLine": 116,
        "endChar": 62
      },
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b90b1d4a_adc94c63",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-05-13T06:46:29Z",
      "side": 1,
      "message": "Yes, as Lokesh mentioned we are already handling the Tlab allocations so here we are only handling large space and non-movable which is why we used this location. We can\u0027t move to the bottom of the function because of the Tlab cases. We moved from the locations in my patch1 so as to make sure everything is covered. So the current location seems the best option.",
      "parentUuid": "6920164f_f2334459",
      "range": {
        "startLine": 116,
        "startChar": 6,
        "endLine": 116,
        "endChar": 62
      },
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc55a873_821a06c9",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 4149,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-05-13T06:20:32Z",
      "side": 1,
      "message": "\u0027obj\u0027 would be a better name. Usually \u0027ret\u0027 is used for what\u0027s returned from the function.",
      "range": {
        "startLine": 4149,
        "startChar": 73,
        "endLine": 4149,
        "endChar": 76
      },
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8dcf6658_1c073794",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 4149,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-05-13T06:46:29Z",
      "side": 1,
      "message": "Lets not change the naming here since it is unrelated to this cl as well as we discussed ret vs obj in the previous cl already, ret was used in other places so that\u0027s why we had chosen it here.",
      "parentUuid": "bc55a873_821a06c9",
      "range": {
        "startLine": 4149,
        "startChar": 73,
        "endLine": 4149,
        "endChar": 76
      },
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87ed0cd1_21f56041",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 4168,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-05-13T06:20:32Z",
      "side": 1,
      "message": "It should say Non-moving or Large Allocation\"",
      "range": {
        "startLine": 4168,
        "startChar": 30,
        "endLine": 4168,
        "endChar": 52
      },
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b167c67_d4493475",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 4168,
      "author": {
        "id": 1651277
      },
      "writtenOn": "2021-05-13T06:46:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87ed0cd1_21f56041",
      "range": {
        "startLine": 4168,
        "startChar": 30,
        "endLine": 4168,
        "endChar": 52
      },
      "revId": "f08732d6d2168cfdc83a9e58c9ae37ee1bc76e4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}