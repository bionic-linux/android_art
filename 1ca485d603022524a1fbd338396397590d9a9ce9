{
  "comments": [
    {
      "key": {
        "uuid": "ff5d74d3_46a4872c",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "prefer dex_pc as pc can have different meanings",
      "range": {
        "startLine": 66,
        "startChar": 11,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fbc0831_f26be671",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-06-10T16:42:20Z",
      "side": 1,
      "message": "doesn\u0027t linter complain about having an empty line here?",
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fbc0831_12630a99",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-06-10T16:42:20Z",
      "side": 1,
      "message": "There\u0027s a similar code in Runtime::Start() for the method case. I\u0027d prefer to have the file creation in the same place. Could you bring that one here?",
      "range": {
        "startLine": 292,
        "startChar": 2,
        "endLine": 300,
        "endChar": 3
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f696874_d0990d65",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "we should be trying to avoid holding references into the Java heap, they move and break. Think about using the safe MethodReference instead.",
      "range": {
        "startLine": 376,
        "startChar": 71,
        "endLine": 376,
        "endChar": 77
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bffcdced_03060db5",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "and here",
      "range": {
        "startLine": 376,
        "startChar": 88,
        "endLine": 376,
        "endChar": 90
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf15bcf5_1739365e",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 1047393
      },
      "writtenOn": "2014-06-10T21:18:13Z",
      "side": 1,
      "message": "we probably need to redesign the whole data structure that stores profile data if we don\u0027t want to use method pointers. In the current implementation, the hash function and the maps store the profile data heavily relies on the method pointer.",
      "parentUuid": "1f696874_d0990d65",
      "range": {
        "startLine": 376,
        "startChar": 71,
        "endLine": 376,
        "endChar": 77
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f8a489d_216a45f7",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-11T21:31:16Z",
      "side": 1,
      "message": "Agreed. This code is broken as methods may move. For example a dynamically allocated Proxy class can allocate methods in the Java heap at any time, and we can compact these. This will break the key and sorting of the map.\nI agree this change isn\u0027t adding to the problems, my original comment was to add a comment to the profile_table_ explaining that its broken and should be rewritten.",
      "parentUuid": "bf15bcf5_1739365e",
      "range": {
        "startLine": 376,
        "startChar": 71,
        "endLine": 376,
        "endChar": 77
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff5d74d3_a6645b2a",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "signature has a precise meaning, you are sampling methods here not the parameters to them, prefer kProfilerMethod",
      "range": {
        "startLine": 410,
        "startChar": 37,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bffcdced_631271e8",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "prefer kProfilerMethodAndDexPc",
      "range": {
        "startLine": 412,
        "startChar": 44,
        "endLine": 412,
        "endChar": 58
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f696874_b094992c",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 465,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "and here",
      "range": {
        "startLine": 465,
        "startChar": 72,
        "endLine": 465,
        "endChar": 74
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fbc0831_d2b342d6",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 466,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-06-10T16:42:20Z",
      "side": 1,
      "message": "I know that you probably took this one from ProfileSampleResults::Put() but could you use  \"MutexLock mu(Thread::Current(), lock_);\"?",
      "range": {
        "startLine": 466,
        "startChar": 2,
        "endLine": 466,
        "endChar": 32
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bffcdced_031d6df7",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 483,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "std::ostream\u0026 os,",
      "range": {
        "startLine": 483,
        "startChar": 37,
        "endLine": 483,
        "endChar": 54
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fb70c4e_53c0f60c",
        "filename": "runtime/profiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 544,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-06-10T16:42:20Z",
      "side": 1,
      "message": "A bit of waste repeating the method name for every PC but I guess we won\u0027t have so many PCs in practice so this should be ok.",
      "range": {
        "startLine": 544,
        "startChar": 9,
        "endLine": 544,
        "endChar": 91
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f696874_707f0134",
        "filename": "runtime/profiler.h",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-10T15:13:28Z",
      "side": 1,
      "message": "ugh, TODO remove this turd.",
      "range": {
        "startLine": 74,
        "startChar": 2,
        "endLine": 75,
        "endChar": 24
      },
      "revId": "1ca485d603022524a1fbd338396397590d9a9ce9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}