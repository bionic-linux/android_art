{
  "comments": [
    {
      "key": {
        "uuid": "3b4e7783_4eb0871f",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-20T11:15:25Z",
      "side": 1,
      "message": "needs_access_check (also rename the variables in HNewInstance)",
      "range": {
        "startLine": 881,
        "startChar": 7,
        "endLine": 881,
        "endChar": 16
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b8e83ee_14e704d4",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-20T18:14:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b4e7783_4eb0871f",
      "range": {
        "startLine": 881,
        "startChar": 7,
        "endLine": 881,
        "endChar": 16
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b246ff3_2a71ffec",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-11-20T22:17:26Z",
      "side": 1,
      "message": "Actually NeedsAccessCheck isn\u0027t that accurate. It\u0027s calling CanAccessInstantiableTypeWithoutChecks(), so it\u0027s checking both accessibility and instantiability, both can cause NewInstance to throw. Maybe we should find a better name for NeedsAccessCheck().",
      "parentUuid": "9b8e83ee_14e704d4",
      "range": {
        "startLine": 881,
        "startChar": 7,
        "endLine": 881,
        "endChar": 16
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b6aafda_69c1c753",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 936,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-11-19T23:18:07Z",
      "side": 1,
      "message": "One of the optimization here can be:\nif (GetOutermostCompilingClass().IsSubClass(cls.Get())) {\n  return true;\n}\nsince all super classes must be initialized before a class is initialized.",
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "169a6aee_10a034c2",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 936,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-20T18:14:20Z",
      "side": 1,
      "message": "Yes, I\u0027ll reserve this to a follow-up CL.",
      "parentUuid": "7b6aafda_69c1c753",
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b4e7783_ee83b329",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 3194,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-20T11:15:25Z",
      "side": 1,
      "message": "Why are you no longer loading the type index and instead passing the class?\n(Same for mips, mips64, x86, x86-64.)",
      "range": {
        "startLine": 3194,
        "startChar": 2,
        "endLine": 3194,
        "endChar": 89
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b8e83ee_b4f3b896",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 3194,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-20T18:14:20Z",
      "side": 1,
      "message": "Note that it may also be the type index. Some entrypoints (resolved and initialized) take a class, others (generic and access_check) take the type index.",
      "parentUuid": "3b4e7783_ee83b329",
      "range": {
        "startLine": 3194,
        "startChar": 2,
        "endLine": 3194,
        "endChar": 89
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db11db43_8e88cb0a",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 3
      },
      "lineNbr": 3375,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-20T11:15:25Z",
      "side": 1,
      "message": "Why do you need to pass the class when it\u0027s immediately overwritten by type index?",
      "range": {
        "startLine": 3375,
        "startChar": 2,
        "endLine": 3375,
        "endChar": 75
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56278298_1a6eadd7",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 3
      },
      "lineNbr": 3375,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-20T18:14:20Z",
      "side": 1,
      "message": "Oversight, I removed the overwriting.",
      "parentUuid": "db11db43_8e88cb0a",
      "range": {
        "startLine": 3375,
        "startChar": 2,
        "endLine": 3375,
        "endChar": 75
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b25eb9e_44dde12d",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-11-19T23:18:07Z",
      "side": 1,
      "message": "Need update here also.",
      "range": {
        "startLine": 93,
        "startChar": 68,
        "endLine": 93,
        "endChar": 74
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d67c5259_16502c08",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-20T18:14:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b25eb9e_44dde12d",
      "range": {
        "startLine": 93,
        "startChar": 68,
        "endLine": 93,
        "endChar": 74
      },
      "revId": "af193923b929a21e9b48c0ecb75ca81fc94d7cf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}