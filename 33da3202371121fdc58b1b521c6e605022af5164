{
  "comments": [
    {
      "key": {
        "uuid": "07a69f21_0612a398",
        "filename": "runtime/base/mutex-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-13T17:33:28Z",
      "side": 1,
      "message": "Should we leave a comment here for future?\n\n  // TODO: use std::atomic::is_always_lock_free after switching to C++17\n\nAnd/or switch to using \n\n   DCHECK(std::atomic\u003cpid_t\u003e().is_lock_free())\n\nfor time being?",
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a776595_bbf74281",
        "filename": "runtime/base/mutex-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-13T20:18:00Z",
      "side": 1,
      "message": "I\u0027ll do the former. Given that we currently don\u0027t include \u003catomic\u003e directly, and instead use the ART atomics layer, I\u0027m inclined to leave the assertion as is. Otherwise, we could also check ATOMIC_INT_LOCK_FREE as a stop-gap.",
      "parentUuid": "07a69f21_0612a398",
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f4109dd_9aee454b",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-13T17:33:28Z",
      "side": 1,
      "message": "pid_t is signed, so is it better to use -2 here to indicate that no owner was set yet?\n\nditto for rest of this file.",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f3280b1_bae0e1ff",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-13T20:18:00Z",
      "side": 1,
      "message": "As enh pointed out in the bug, the definition of e.g. the Posix kill() API guarantees that neither 0 nor negative values can be used as a valid pid/tid. I think any of them work, and 0 seems like the most natural one.",
      "parentUuid": "2f4109dd_9aee454b",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f2ba2cd_57cb32a2",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-13T20:31:10Z",
      "side": 1,
      "message": "kill(2) interprets a pid of 0 as send a signal to *all* processes.\n\n\u003e        If pid equals 0, then sig is sent to every process in the process group\n\u003e        of the calling process.\n\n\nUsing a pid of 0 in this context means *no* processes.\n\nJust a bit inconsistent :). I\u0027m personally ok with it either way.",
      "parentUuid": "3f3280b1_bae0e1ff",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99b6cceb_b2c918e8",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-13T21:40:10Z",
      "side": 1,
      "message": "FWIW, this is arguably more consistent with fork(). Posix itself isn\u0027t terribly consistent in its interpretation of a 0 pid.",
      "parentUuid": "8f2ba2cd_57cb32a2",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6d42d56_fec08282",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-13T21:52:44Z",
      "side": 1,
      "message": "Sounds good w.r.t to fork.",
      "parentUuid": "99b6cceb_b2c918e8",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94922766_6a667b10",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-09-13T22:18:16Z",
      "side": 1,
      "message": "the advantage of a negative number though is that it\u0027s always an invalid *input*. so if you accidentally pass it to a system call, you\u0027ll get EINVAL rather than anything weird happening (such as the kill(2) example).",
      "parentUuid": "e6d42d56_fec08282",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21dd0ac3_0b6f80a4",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-13T22:28:16Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s entirely true. According to Posix, kill interprets a negative pid as a process group, and -1 as all processes. Except for -1 that would usually fail, but it might not, if I happen to hit my own process group?",
      "parentUuid": "94922766_6a667b10",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4dba5b7_1bb36b6c",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-13T22:33:49Z",
      "side": 1,
      "message": "RE: Elliott, Hans,\n\nCan we use an extremely large negative numbers, perhaps MIN_INT, MIN_INT+1 as our 2 sentinel values?\n\nThat seems much less likely to be a valid group number than a very small number.",
      "parentUuid": "21dd0ac3_0b6f80a4",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b450c381_e34ab310",
        "filename": "runtime/base/mutex.cc",
        "patchSetId": 3
      },
      "lineNbr": 364,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-13T23:51:28Z",
      "side": 1,
      "message": "Probably. But I don\u0027t think it\u0027s worth the code churn.\n\nThese values seem to be used to:\n\n1. Compare to other ids or 0,\n2. Print for debugging purposes, or\n3. Return as the result of other \"get owner\" functions, whose result is similarly used.\n\nWe\u0027d either be inconsistent with other parts of ART, or have to change code all over the place. And debugging output would change in weird ways, or we\u0027d have to translate back to zero.\n\nAnd I think there is really not much danger of these things getting passed to system calls. AFAIK, we just don\u0027t send signals to or wait for the owner of a lock.\n\nThe thing that scares me slightly more is the weird -1 convention for shared ownership. But that was just broken to start with, so it\u0027s unlikely it affects anything but debug output.",
      "parentUuid": "a4dba5b7_1bb36b6c",
      "range": {
        "startLine": 364,
        "startChar": 46,
        "endLine": 364,
        "endChar": 48
      },
      "revId": "33da3202371121fdc58b1b521c6e605022af5164",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}