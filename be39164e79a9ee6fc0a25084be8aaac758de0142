{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f62abb1b_60715ce0",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "You\u0027re prioritizing the left shift which can miss optimization opportunities for `(a \u003c\u003c m) + (b \u003c\u003c n)` where `m` is not a constant 1, 2 or 3 but `n` is. Maybe we should move most of the code below to a helper function that we can call twice if we see `Shl` on both sides.\n\nAdd two tests for different `m` and `n`, for example `return (a \u003c\u003c 4) + (b \u003c\u003c 1)` and `return (a \u003c\u003c 1) + (b \u003c\u003c 4)`.",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 93
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f546164c_0744b704",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-03T07:06:09Z",
      "side": 1,
      "message": "Done in PS10.",
      "parentUuid": "f62abb1b_60715ce0",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 93
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9311743c_94cee798",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "Used only once, so we could \"inline\" it.",
      "range": {
        "startLine": 64,
        "startChar": 15,
        "endLine": 64,
        "endChar": 23
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7d756f2_822a0925",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-03T07:06:09Z",
      "side": 1,
      "message": "Done in PS10.",
      "parentUuid": "9311743c_94cee798",
      "range": {
        "startLine": 64,
        "startChar": 15,
        "endLine": 64,
        "endChar": 23
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ced042e6_0082e3d1",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "I\u0027m wondering if this is really needed. We could instead check for no uses before removing the `shl` below.\n\nIs `sh\u003cN\u003eadd` slower than `add` in some CPU designs?",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 72,
        "endChar": 5
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17b5d342_0d2edccc",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-04-02T12:13:59Z",
      "side": 1,
      "message": "@vmarko@google.com I don\u0027t understand you. Which check you do propose?",
      "parentUuid": "ced042e6_0082e3d1",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 72,
        "endChar": 5
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfb845b8_60816582",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T12:16:59Z",
      "side": 1,
      "message": "Remove this check and add `if (!shl-\u003eHasUses())` for the `shl-\u003eGetBlock()-\u003eRemoveInstruction(shl)` below.",
      "parentUuid": "17b5d342_0d2edccc",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 72,
        "endChar": 5
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7256146d_1ac6e386",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-04-02T12:53:52Z",
      "side": 1,
      "message": "O, I\u0027ve understood. `Add` has no Environment but `HasOnlyOneNonEnvironmentUse` makes an extra call for us which is `HasExactlyOneElement()`.",
      "parentUuid": "cfb845b8_60816582",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 72,
        "endChar": 5
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fee53d11_390129ca",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-04-02T15:04:26Z",
      "side": 1,
      "message": "@vmarko@google.com It seems to me that we should expect that `sh\u003cN\u003eadd` is slower than `add`.",
      "parentUuid": "7256146d_1ac6e386",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 72,
        "endChar": 5
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48257d90_5d60f223",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T15:12:38Z",
      "side": 1,
      "message": "Than we can leave this check as is.",
      "parentUuid": "fee53d11_390129ca",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 72,
        "endChar": 5
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1564c4a5_b66a63c4",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "I\u0027d prefer `HInstruction*` (or `HInstruction* const` if you want that).\n\nThe `const auto` gets me thinking - how many people will realize this is actually `HInstruction* const` and not `const HInstruction*`.",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 14
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdd660ec_d0da3237",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-03T07:06:09Z",
      "side": 1,
      "message": "Used `auto* const` in PS10.",
      "parentUuid": "1564c4a5_b66a63c4",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 14
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee50e289_4ca28bf0",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "`HRiscv64ShiftAdd*` is short enough. (I would even consider `auto* const` better than `const auto` here.)",
      "range": {
        "startLine": 75,
        "startChar": 4,
        "endLine": 75,
        "endChar": 14
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0355cf9_eb613398",
        "filename": "compiler/optimizing/instruction_simplifier_riscv64.cc",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-03T07:06:09Z",
      "side": 1,
      "message": "Used `auto* const` in PS10.",
      "parentUuid": "ee50e289_4ca28bf0",
      "range": {
        "startLine": 75,
        "startChar": 4,
        "endLine": 75,
        "endChar": 14
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0378abc_587941b7",
        "filename": "compiler/optimizing/nodes_riscv64.h",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "Should we `DCHECK()` that this is `kInt64`? (Or should we even remove the argument and pass `kInt64` explicitly to the `HBinaryOperation` constructor?)",
      "range": {
        "startLine": 24,
        "startChar": 34,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c42a0869_dd9f0d77",
        "filename": "compiler/optimizing/nodes_riscv64.h",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-04-02T15:53:14Z",
      "side": 1,
      "message": "I consider that we should pass `kInt64` explicitly.",
      "parentUuid": "d0378abc_587941b7",
      "range": {
        "startLine": 24,
        "startChar": 34,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "929fb5f1_1effa810",
        "filename": "compiler/optimizing/nodes_riscv64.h",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-03T07:06:09Z",
      "side": 1,
      "message": "Acknowledged. Done in PS10.",
      "parentUuid": "c42a0869_dd9f0d77",
      "range": {
        "startLine": 24,
        "startChar": 34,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cb6916f_dd5fce4f",
        "filename": "compiler/optimizing/nodes_riscv64.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "You have removed the `Evaluate(HLongConstant* x, HLongConstant* y)` overload as well. Can you add it back, please, just in case we decide to run a constant folding pass after creating some `Riscv64ShiftAdd`?\n\nWe should also make this instruction \"moveable\" for GVN. And maybe \"clonable\" even though we don\u0027t have any subsequent passes that try to move it.",
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a7c73d8_94d652a4",
        "filename": "test/458-checker-riscv64-shift-add/src/Main.java",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "You may want to check the `distance` attribute as well.\n\n    /// CHECK: ... Riscv64ShiftAdd distance:1\n\nSame for the other `CHECK: ... Riscv64ShiftAdd` statements below. (But keep `CHECK-NOT:` without the attribute.)",
      "range": {
        "startLine": 55,
        "startChar": 40,
        "endLine": 55,
        "endChar": 55
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "810f4783_206679e6",
        "filename": "test/458-checker-riscv64-shift-add/src/Main.java",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-03T07:06:09Z",
      "side": 1,
      "message": "Done in PS10.",
      "parentUuid": "7a7c73d8_94d652a4",
      "range": {
        "startLine": 55,
        "startChar": 40,
        "endLine": 55,
        "endChar": 55
      },
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec46f7d4_8385ad25",
        "filename": "test/458-checker-riscv64-shift-add/src/Main.java",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-02T10:00:36Z",
      "side": 1,
      "message": "Please add a test for two simplifications, for example\n\n    long x \u003d b + (a \u003c\u003c 1)\n    long y \u003d a + (b \u003c\u003c 2);\n    return x ^ y;",
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b63b451_ee7aa334",
        "filename": "test/458-checker-riscv64-shift-add/src/Main.java",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-03T07:06:09Z",
      "side": 1,
      "message": "Done in PS10.",
      "parentUuid": "ec46f7d4_8385ad25",
      "revId": "be39164e79a9ee6fc0a25084be8aaac758de0142",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}