{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4d2d68a1_fb678f8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-11-07T12:57:00Z",
      "side": 1,
      "message": "Friendly ping",
      "revId": "0d6d666be0ad7c5cc3c8a5ebd5acaea6487d859a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f8f6494_1582866d",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 3
      },
      "lineNbr": 1463,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-09T09:33:58Z",
      "side": 1,
      "message": "The code below is quite complex. I\u0027d prefer to have a filtering `if (allow_potential_overflow) { ... }` block first, followed by the old terse `if (graph !\u003d nullptr) { ... switch ... }` generation code.\n\nI would hope that the above `GenerateCode()` calls can return constants if corresponding `IsConstant()` would return true. Therefore the optimizations below where we use a pre-calculated constant or a simplified expression as `operation` can be left to a subsequent constant folding and instruction simplification passes. (Waste a bit of memory and time in order to keep the code simple.)",
      "range": {
        "startLine": 1463,
        "startChar": 14,
        "endLine": 1463,
        "endChar": 48
      },
      "revId": "0d6d666be0ad7c5cc3c8a5ebd5acaea6487d859a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b9e7803_2685f1b4",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 3
      },
      "lineNbr": 1463,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-09T09:40:29Z",
      "side": 1,
      "message": "I meant `if (!allow_potential_overflow) { ... }` instead of `if (allow_potential_overflow) { ... }`.\n\nIf you want to keep these optimizations, we could still restructure the code:\n\n    HInstruction* operation \u003d nullptr;\n    if (!allow_potential_overflow) {\n      // Checks for kAdd/kSub, including setting an optimized `operation`\n      [...]\n    }\n    if (graph !\u003d nullptr \u0026\u0026 operation \u003d\u003d nullptr) {\n      switch (info-\u003eoperation) {\n        // Old terse operation creation.\n        [...]\n      }\n    }",
      "parentUuid": "6f8f6494_1582866d",
      "range": {
        "startLine": 1463,
        "startChar": 14,
        "endLine": 1463,
        "endChar": 48
      },
      "revId": "0d6d666be0ad7c5cc3c8a5ebd5acaea6487d859a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1575d57c_204beed4",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 3
      },
      "lineNbr": 1463,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-11-09T11:23:49Z",
      "side": 1,
      "message": "Done with the code restructuring.\n\n\u003e I would hope that the above `GenerateCode()` calls can return constants if corresponding `IsConstant()` would return true. Therefore the optimizations below where we use a pre-calculated constant or a simplified expression as `operation` can be left to a subsequent constant folding and instruction simplification passes. (Waste a bit of memory and time in order to keep the code simple.)\n\nSadly, it is not that smart. The code generated might not fold into a constant as it only calculates one end of the range (the `is_min`). Note that in `IsConstant` we calculate both `min_value` and `max_value` and can fold into a constant iff they are equal.",
      "parentUuid": "6f8f6494_1582866d",
      "range": {
        "startLine": 1463,
        "startChar": 14,
        "endLine": 1463,
        "endChar": 48
      },
      "revId": "0d6d666be0ad7c5cc3c8a5ebd5acaea6487d859a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fdb1a5c_38dfa05f",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 3
      },
      "lineNbr": 1463,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-09T12:30:47Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1575d57c_204beed4",
      "range": {
        "startLine": 1463,
        "startChar": 14,
        "endLine": 1463,
        "endChar": 48
      },
      "revId": "0d6d666be0ad7c5cc3c8a5ebd5acaea6487d859a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54698f2d_5ae6cfbf",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 3
      },
      "lineNbr": 1481,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-11-02T13:51:43Z",
      "side": 1,
      "message": "This should be named `add_val`, it\u0027s a typo",
      "range": {
        "startLine": 1481,
        "startChar": 26,
        "endLine": 1481,
        "endChar": 33
      },
      "revId": "0d6d666be0ad7c5cc3c8a5ebd5acaea6487d859a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33cdd31e_dfaf03c3",
        "filename": "compiler/optimizing/induction_var_range.cc",
        "patchSetId": 3
      },
      "lineNbr": 1481,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-11-09T11:23:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54698f2d_5ae6cfbf",
      "range": {
        "startLine": 1481,
        "startChar": 26,
        "endLine": 1481,
        "endChar": 33
      },
      "revId": "0d6d666be0ad7c5cc3c8a5ebd5acaea6487d859a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}