{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09a1f5dc_375e032b",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-07T08:37:19Z",
      "side": 1,
      "message": "I find this comment confusing? Ins\u0027t it stalled, given we don\u0027t do these checks in the if below?",
      "range": {
        "startLine": 210,
        "startChar": 9,
        "endLine": 211,
        "endChar": 41
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6e34b66_4799720b",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-09-07T15:54:04Z",
      "side": 1,
      "message": "AllocatorMayHaveConcurrentGC() does the check. I believe the comment is suggesting to use this with IsGcConcurrent() to avoid load from the heap instance.\n\nFrankly, it seems to be a very small optimization and therefore there\u0027s no harm in getting rid of it. If you and Hans agree, I\u0027ll do that in next patch.",
      "parentUuid": "09a1f5dc_375e032b",
      "range": {
        "startLine": 210,
        "startChar": 9,
        "endLine": 211,
        "endChar": 41
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb27aebb_1fd14a8c",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-07T18:29:11Z",
      "side": 1,
      "message": "Agreed. Actually, if IsGcConcurrent() is not constant, why do we even need to do it? I think we already set concurrent_start_bytes_ to essentially infinity if it\u0027s false? I haven\u0027t looked at the code generated for IsGcConcurrent(), but unless clang is quite clever, it doesn\u0027t look cheaper than ShouldConcurrentGCForJava. And in production code it will always succeed.",
      "parentUuid": "e6e34b66_4799720b",
      "range": {
        "startLine": 210,
        "startChar": 9,
        "endLine": 211,
        "endChar": 41
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b695b0a4_59f73b69",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-09-07T21:39:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb27aebb_1fd14a8c",
      "range": {
        "startLine": 210,
        "startChar": 9,
        "endLine": 211,
        "endChar": 41
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e646c6_88ff92a2",
        "filename": "runtime/interpreter/mterp/nterp.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-07T08:37:19Z",
      "side": 1,
      "message": "Could this be gUseReadBarrier? A comment on that effect would be nice.\n\nIf the two are actually different, it\u0027s worth some renaming - as this CL shows, things can be quite confusing.",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 27
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c268c6fa_7e9dca3f",
        "filename": "runtime/interpreter/mterp/nterp.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-09-07T15:54:04Z",
      "side": 1,
      "message": "Their meanings have diverged with the userfaultfd GC CLs. Ever since kUseReadBarrier became gUseReadBarrier, it\u0027s possible to have ART_USE_READ_BARRIER defined and still gUseReadBarrier being false.\n\nART_USE_READ_BARRIER ensures that marking register is reserved and that the entrypoints have read-barriers defined. This is essential for nterp to work as it checks marking register directly. With this change we\u0027ll have no nterp with CMS and SS and userfaultfd GC if ART_USE_READ_BARRIER\u003dfalse was used.\n\nMaybe we can rename ART_USE_READ_BARRIER to ART_EMIT_READ_BARRIER?",
      "parentUuid": "69e646c6_88ff92a2",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 27
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82263e18_a6c704db",
        "filename": "runtime/interpreter/mterp/nterp.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-07T18:29:11Z",
      "side": 1,
      "message": "\"ENABLE\"? \"PERMIT\"?",
      "parentUuid": "c268c6fa_7e9dca3f",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 27
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d62b5f41_39aead46",
        "filename": "runtime/interpreter/mterp/nterp.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-09-07T21:39:49Z",
      "side": 1,
      "message": "On another thought, modifying ART_USE_READ_BARRIER would result in a very widespread change. There are a lot of places (test infra) where it is used. All of that would require changing.\n\nHow about renaming gUseReadBarrier to gUseCC? Whatever we agree on, I\u0027ll create another CL for that.",
      "parentUuid": "82263e18_a6c704db",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 27
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72ef3ba1_f87fcebe",
        "filename": "runtime/interpreter/mterp/nterp.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-08T00:05:13Z",
      "side": 1,
      "message": "Agreed about the breakage. Maybe it\u0027s better to add a block comment around the gUseReadBarrier declaration, and explain all the fine distinctions. Leaving this unresolved for Nicolas.",
      "parentUuid": "d62b5f41_39aead46",
      "range": {
        "startLine": 41,
        "startChar": 7,
        "endLine": 41,
        "endChar": 27
      },
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad24973d_b13e2300",
        "filename": "runtime/lock_word.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-07T08:37:19Z",
      "side": 1,
      "message": "Is this related to the golem failure? Could it be a CL on its own?",
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76931ca4_a2ea7033",
        "filename": "runtime/lock_word.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-09-07T15:54:04Z",
      "side": 1,
      "message": "No. it\u0027s to make code applicable for SS and CMS as well. As these GCs are chosen at build time, they don\u0027t require marking bit and gray bit in the header. Whereas the choice between userfaultfd GC and CC is done at boot-time, the former has to operate with the bits present (at least in some cases when we use the boot image compiled for CC with userfaultfd GC).",
      "parentUuid": "ad24973d_b13e2300",
      "revId": "a77ff9ff3d319a138e7fe307763a978fffa4535a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}