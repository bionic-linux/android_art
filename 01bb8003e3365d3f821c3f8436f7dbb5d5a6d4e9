{
  "comments": [
    {
      "key": {
        "uuid": "2bd515aa_79f46f25",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 4
      },
      "lineNbr": 601,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "document why you skip clinits.",
      "range": {
        "startLine": 601,
        "startChar": 9,
        "endLine": 601,
        "endChar": 24
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "783eb634_75ebeafc",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 4
      },
      "lineNbr": 601,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "It\u0027s explained in L603 and also more elaborately in CompilerDriver::RequiresConstructorBarrier\n\nIf there\u0027s some extra comments I should add here, can you perhaps suggest something concrete (I will copy-paste it verbatim)?",
      "parentUuid": "2bd515aa_79f46f25",
      "range": {
        "startLine": 601,
        "startChar": 9,
        "endLine": 601,
        "endChar": 24
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "864abb71_4b1b010d",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 4
      },
      "lineNbr": 601,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-18T17:48:55Z",
      "side": 1,
      "message": "it\u0027s ok. I made the comment before getting to that part",
      "parentUuid": "783eb634_75ebeafc",
      "range": {
        "startLine": 601,
        "startChar": 9,
        "endLine": 601,
        "endChar": 24
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8e34332_071d8230",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 4
      },
      "lineNbr": 605,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "this method has no docs so referencing it here for more explanations is a bit odd ... :)",
      "range": {
        "startLine": 605,
        "startChar": 13,
        "endLine": 605,
        "endChar": 53
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84d29a8f_6f117172",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 4
      },
      "lineNbr": 605,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "Yep, docs were added in this CL.",
      "parentUuid": "e8e34332_071d8230",
      "range": {
        "startLine": 605,
        "startChar": 13,
        "endLine": 605,
        "endChar": 53
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d2950b0_fae1290a",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 577,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-18T12:44:47Z",
      "side": 1,
      "message": "Looks to me you don\u0027t need to collect but can remove them one by one?",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 577,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f911c7a_97079cd4",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 577,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-18T16:34:49Z",
      "side": 1,
      "message": "The problem is if I remove the constructor fences, it will mutate the instruction uses.\n\nWhat is the guarantee then regarding mutating it while also iterating over it? Usually such things are perhaps an error?\n\nIs there other code that does the same thing elsewhere?",
      "parentUuid": "5d2950b0_fae1290a",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 577,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "572941f1_931f06f7",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 577,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-19T09:35:56Z",
      "side": 1,
      "message": "I think there was, but now that we changed these lists to stl, I can\u0027t recall where :(\n\nCan you use std::remove_if?",
      "parentUuid": "2f911c7a_97079cd4",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 577,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2156affd_8a51b656",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 587,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-18T12:44:47Z",
      "side": 1,
      "message": "Drop, that\u0027s NewArray, which you don\u0027t put fences on.",
      "range": {
        "startLine": 585,
        "startChar": 0,
        "endLine": 587,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88ba7e17_52d0ad48",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 587,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-18T16:34:49Z",
      "side": 1,
      "message": "My next CL will add fences for newArray.\n\nRemove in this CL, and re-add in next CL?",
      "parentUuid": "2156affd_8a51b656",
      "range": {
        "startLine": 585,
        "startChar": 0,
        "endLine": 587,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61df6885_16c3a402",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 587,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "Yes, please.",
      "parentUuid": "88ba7e17_52d0ad48",
      "range": {
        "startLine": 585,
        "startChar": 0,
        "endLine": 587,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ced71841_1a8f51a7",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 645,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "Hmm, instruction-\u003eGetUses() gives you a const list. We need access to the mutable container to do\n\n  instruction-\u003eGetUses().remove_if(\n      [](const HUseListNode\u003cHInstruction*\u003e\u0026 node) {\n        HInstruction* user \u003d node.GetUser();\n        if (user-\u003eIsConstructorFence()) {\n          user-\u003eRemoveEnvironmentUsers();\n          user-\u003eGetBlock()-\u003eRemoveInstruction(user);\n          return true;\n        } else {\n          return false;\n        }\n      });",
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0c2ece_8ad09fc7",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 645,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-19T16:38:54Z",
      "side": 1,
      "message": "I\u0027m not sure if that will quite work, RemoveInstruction will call RemoveAsUser so it will remove the use from GetUses just as this function is returning true?\n\n(plus not to mention the remove_if predicate should ideally have no side effects)\n\nI think erase_after might be the way to go here, I got some code working in isolation with intrusive_forward_list and just trying to figure out how to integrate it with the indices and raw input records now before I upload it.",
      "parentUuid": "ced71841_1a8f51a7",
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9334df40_9b161621",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 531,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "If you want, add an additional check for debug build that the cache value matches the computed one but don\u0027t special case kIsDebugBuild.\n\nIt should only be used for extra checks not for different behavior.",
      "range": {
        "startLine": 531,
        "startChar": 52,
        "endLine": 531,
        "endChar": 65
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84a3ab22_f357c25f",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 531,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "\u003e It should only be used for extra checks not for different behavior.\n\nCan you clarify please? It will return the same exact value it would\u0027ve returned in production. Otherwise it will crash when the DCHECK failure happens [so the \u0027diverging\u0027 value is not visible outside of this function].\n\n\u003e don\u0027t special case kIsDebugBuild.\n\nNot sure how I could do that without a performance penalty on release builds?\n\nThis function is supposed to be idempotent and the !kIsDebugBuild is simply to enforce that it never changes after the first time it calculates it.\n\nI think in practice the parameter is almost always the 2nd node so it wouldn\u0027t be that bad to re-run it every time (for debug builds).",
      "parentUuid": "9334df40_9b161621",
      "range": {
        "startLine": 531,
        "startChar": 52,
        "endLine": 531,
        "endChar": 65
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cde01562_80392e15",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 531,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-18T17:48:55Z",
      "side": 1,
      "message": "It is a different behavior because for userdebug builds this path will never be taken and it\u0027s a functional path. In user builds you may return the cache value right away while in userdebug the value is always recomputed.\n\nwhat you want to do is\n\nif (cache_value ... ) { \n  if (kIsDebug...) { extra verification }\n  return cache_value}\nelse { recompute and return );",
      "parentUuid": "84a3ab22_f357c25f",
      "range": {
        "startLine": 531,
        "startChar": 52,
        "endLine": 531,
        "endChar": 65
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "726aa385_a2081aea",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 531,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-18T17:58:33Z",
      "side": 1,
      "message": "I suppose this is a moot point because Nicolas wanted the value to be set once when the graph is being built.\n\n-----\n\nIn principle, this sounds a lot like a \"DCHECK is a different behavior\" because the DCHECK contents are never evaluated on release builds either.\n\nI would hope that if the expr in DCHECK(expr) has no side effects on the context then it doesn\u0027t matter.\n\nThe code in question is functionally equivalent to\n\n    GetThisParameter() {\n      if (cached) {\n         DCHECK_EQ(GetThisParameterUncached(), cached);\n         return cached;\n      } \n      cached \u003d GetThisParameterUncached();\n      return cached;\n    }\n\n\nexcept without the extra secondary function where \n GetThisParameterUncached() would do a read-only walk of the graph so it has no side effects.",
      "parentUuid": "cde01562_80392e15",
      "range": {
        "startLine": 531,
        "startChar": 52,
        "endLine": 531,
        "endChar": 65
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88b65b69_cbe5a5a6",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 536,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-18T12:44:47Z",
      "side": 1,
      "message": "Please set it when building the graph, I currently don\u0027t see the value of infering it.",
      "range": {
        "startLine": 534,
        "startChar": 2,
        "endLine": 536,
        "endChar": 44
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0909600_a1ebea2f",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 536,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-18T16:34:49Z",
      "side": 1,
      "message": "Apologies, I misunderstood the \"cache the this pointer\" request. I\u0027ll fix this.",
      "parentUuid": "88b65b69_cbe5a5a6",
      "range": {
        "startLine": 534,
        "startChar": 2,
        "endLine": 536,
        "endChar": 44
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c82dc2b6_2f43ef54",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 539,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "Is there a tests exercising the case when \"this\" is not the first instruction?",
      "range": {
        "startLine": 538,
        "startChar": 2,
        "endLine": 539,
        "endChar": 63
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "731b6591_f40cbe98",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 539,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "Honestly I don\u0027t know, but I tried using the first one blindly and it would DCHECK-fail that every time.\n\nShould I add a test for this somehow/somewhere? Please advise.",
      "parentUuid": "c82dc2b6_2f43ef54",
      "range": {
        "startLine": 538,
        "startChar": 2,
        "endLine": 539,
        "endChar": 63
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6a6c57d_f3616be1",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 539,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-18T17:48:55Z",
      "side": 1,
      "message": "If a DCHECK was failing you can trace the method and add a checker test extracted from that method.\n\nYou can dump the CFG of any method to help you with that by using kStringFilter in optimizing_compiler.cc. (you could also manually try to dump it but it\u0027s too much of a hassle imo)",
      "parentUuid": "731b6591_f40cbe98",
      "range": {
        "startLine": 538,
        "startChar": 2,
        "endLine": 539,
        "endChar": 63
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f82bacd_b8e0c8be",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 566,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "I think you reversed the comments here.",
      "range": {
        "startLine": 566,
        "startChar": 16,
        "endLine": 566,
        "endChar": 24
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1eaae24_5eb2b531",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 589,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "seems a bit overkill: do you really need another helper for this?",
      "range": {
        "startLine": 589,
        "startChar": 20,
        "endLine": 589,
        "endChar": 32
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df188538_ec2d62e0",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 589,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "Probably not but I can never remember the right incantation to do it without the helper (it takes at least 2 arguments).\n\nI wanted to use GetArtMethod()-\u003ePrettyMethod but that seems to be null sometimes, plus it requires the mutator lock.",
      "parentUuid": "c1eaae24_5eb2b531",
      "range": {
        "startLine": 589,
        "startChar": 20,
        "endLine": 589,
        "endChar": 32
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0657b6_d48d193d",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 1215,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "Prepare for register allocator is the only use when we\u0027d want to do this, can you move over there?",
      "range": {
        "startLine": 1215,
        "startChar": 36,
        "endLine": 1215,
        "endChar": 51
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b5ceede_e3b956be",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 1215,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "I don\u0027t know if that would be correct?\n\nRemoveEnvironmentUses(this) is static and can\u0027t be accessed from that file.\n\nAlso inputs_ is private and can\u0027t be accessed from that file.",
      "parentUuid": "ab0657b6_d48d193d",
      "range": {
        "startLine": 1215,
        "startChar": 36,
        "endLine": 1215,
        "endChar": 51
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75261172_c631fbf8",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 1215,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-18T17:48:55Z",
      "side": 1,
      "message": "Right... hmm, I think it\u0027s ok to keep it here then.",
      "parentUuid": "9b5ceede_e3b956be",
      "range": {
        "startLine": 1215,
        "startChar": 36,
        "endLine": 1215,
        "endChar": 51
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e1c8449_f85e2303",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 1217,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "What does this have to do with inputs?\n\nThe fence has type kPrimVoid, so it cannot have any environment uses at all?",
      "range": {
        "startLine": 1216,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 32
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac43e3ff_cde76bbc",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 4
      },
      "lineNbr": 1220,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 1220,
        "startChar": 0,
        "endLine": 1220,
        "endChar": 21
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48912224_9a2d2807",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6543,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "Does \"this\"\u003dHConstructor fence?\n\nI don\u0027t really get what this comment is trying to say.",
      "range": {
        "startLine": 6543,
        "startChar": 3,
        "endLine": 6543,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3441673_af76152c",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6543,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "48912224_9a2d2807",
      "range": {
        "startLine": 6543,
        "startChar": 3,
        "endLine": 6543,
        "endChar": 7
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30f9959c_48843212",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6551,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "Explain why you want this to be variable.",
      "range": {
        "startLine": 6551,
        "startChar": 39,
        "endLine": 6551,
        "endChar": 68
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69728e78_cf0393d8",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6551,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-13T23:21:57Z",
      "side": 1,
      "message": "I don\u0027t particularly have a preference (PS1 was non-variable), but Nicolas wanted all the inputs to be cleared in prepare_for_register_allocation and I can\u0027t actually figure out how to remove the input completely unless the GetInputsRef() is resizable.\n\n(I tried with just setting all the inputs to a blank input node and that didn\u0027t work)\n\nIf there\u0027s some other way please let me know, I had to spend hours on that one request.",
      "parentUuid": "30f9959c_48843212",
      "range": {
        "startLine": 6551,
        "startChar": 39,
        "endLine": 6551,
        "endChar": 68
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88b76b9d_4dbe7d09",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6551,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-18T12:44:47Z",
      "side": 1,
      "message": "The explanation lines 6580-6581 are good enough, you can move or copy them here.",
      "parentUuid": "69728e78_cf0393d8",
      "range": {
        "startLine": 6551,
        "startChar": 39,
        "endLine": 6551,
        "endChar": 68
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61156c2b_a7a456f0",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6551,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "You could override GetInputRecords() (see HLoadClass as an example) but I\u0027m not sure it\u0027s worth the effort (HLoadClass::GetInputRecords() was written before we had HVariableInputSizeInstruction).",
      "parentUuid": "88b76b9d_4dbe7d09",
      "range": {
        "startLine": 6551,
        "startChar": 39,
        "endLine": 6551,
        "endChar": 68
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3deecffb_e5988c4f",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6561,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-13T21:19:51Z",
      "side": 1,
      "message": "alignment is weird here.",
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bba6a53_87adb9df",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6569,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-18T12:44:47Z",
      "side": 1,
      "message": "2 more spaces",
      "range": {
        "startLine": 6569,
        "startChar": 0,
        "endLine": 6569,
        "endChar": 6
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a62ebff_ad4bd37b",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6580,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-18T12:44:47Z",
      "side": 1,
      "message": "will",
      "range": {
        "startLine": 6580,
        "startChar": 17,
        "endLine": 6580,
        "endChar": 20
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba30b0ff_92eb7c9e",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 6580,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-18T12:44:47Z",
      "side": 1,
      "message": "prepare_for_register_allocation",
      "range": {
        "startLine": 6580,
        "startChar": 39,
        "endLine": 6580,
        "endChar": 60
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "595b3178_b20f654c",
        "filename": "runtime/base/arena_allocator.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "No corresponding name in arena_allocator.cc? Please sync past https://android-review.googlesource.com/371872 and it won\u0027t build.",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 35
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f36efa0c_eee13d40",
        "filename": "test/530-checker-lse-ctor-fences/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "No other pass is allowed to merge the two fences if the reference does not escape in between?",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 72
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65480300_75193d9d",
        "filename": "test/530-checker-lse-ctor-fences/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-19T15:11:43Z",
      "side": 1,
      "message": "Why is this here? It\u0027s separating the CHECKer statements above from the method below.",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 27
      },
      "revId": "01bb8003e3365d3f821c3f8436f7dbb5d5a6d4e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}