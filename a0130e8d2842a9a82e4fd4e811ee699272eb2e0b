{
  "comments": [
    {
      "key": {
        "uuid": "56a648a9_a3a5987f",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 4511,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-07-24T14:36:08Z",
      "side": 1,
      "message": "Can you add a comment what this resolved_method refers to in the context of InvokePolymorphic?",
      "range": {
        "startLine": 4511,
        "startChar": 0,
        "endLine": 4511,
        "endChar": 48
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53e6a5ac_38e19ac1",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 5
      },
      "lineNbr": 4511,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-27T13:25:47Z",
      "side": 1,
      "message": "I added a comment in another commit",
      "parentUuid": "56a648a9_a3a5987f",
      "range": {
        "startLine": 4511,
        "startChar": 0,
        "endLine": 4511,
        "endChar": 48
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4385201a_bc465a32",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-07-24T14:36:08Z",
      "side": 1,
      "message": "I guess we need this change due to calling ResolveMethod in the compiler? Why did we not need it before when resolving the method in the verifier/interpreter?",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e86591de_c12abb59",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-27T13:25:47Z",
      "side": 1,
      "message": "Yes, you are right. We did not need it before because ResolveMethod is called with kVirtual from interpreter instead of kPolymorphic. For now, the right way seemed to use kPolymorphic so I added this case.",
      "parentUuid": "4385201a_bc465a32",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61daa15e_a3266748",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-07-27T13:35:06Z",
      "side": 1,
      "message": "Can we have the interpreter/verifier change its lookup of invoke-polymorphic with kPolymorphic? The lookups should be consistent between the various ways of executing the bytecode.",
      "parentUuid": "e86591de_c12abb59",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dac4fc8_f0fa2bf8",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-27T16:50:13Z",
      "side": 1,
      "message": "I am not sure. As far as I can see, there are additional checks done for kVirtual. I think that a VarHandle access mode is both kVirtual and kPolymorphic. @Orion what do you think?",
      "parentUuid": "61daa15e_a3266748",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64143172_2c486cf6",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-07-27T20:31:46Z",
      "side": 1,
      "message": "Polymorphic calls are not virtual: they cannot be overriden by design (in the RI).\n\nThe verifier will fail hard if an invoke-polymorphic occurs for any class other than MethodHandle and VarHandle (as they require runtime magic).\n\nThe verifier calls ResolveMethod\u003c\u003e() with kInvokePolymorphic. There is a patch for the interpreter here:\n\nhttps://android-review.googlesource.com/c/platform/art/+/1373856\n\nDo we actually have extra calls to ResolveMethod\u003c\u003e here? Plain invokes and invoke-polymorphic have different paths to ResolveMethod\u003c\u003e because the bytecode forms are different and they are decoded in the methods that call ResolveMethod\u003c\u003e.",
      "parentUuid": "2dac4fc8_f0fa2bf8",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b1cd527_05bfd7fc",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-28T07:26:22Z",
      "side": 1,
      "message": "Yes, ResolveMethod\u003c\u003e is called in order to obtain the corresponding ArtMethod object, which contains the intrinsic index. We need to set the intrinsic index on the HInvokePolymorphic node.\n\nResolveMethod is called in a wrapper with the same name in BuildInvokePolymorphic (compiler/optimizing/instruction_builder.cc:1093)",
      "parentUuid": "64143172_2c486cf6",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec8a824e_09aa678f",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-07-24T14:36:08Z",
      "side": 1,
      "message": "ditto",
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b6faad2_21343d38",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-27T13:25:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec8a824e_09aa678f",
      "revId": "a0130e8d2842a9a82e4fd4e811ee699272eb2e0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}