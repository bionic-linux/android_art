{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "54739a77_1dbbe19c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-19T14:28:53Z",
      "side": 1,
      "message": "Can we assume such thing?",
      "range": {
        "startLine": 10,
        "startChar": 60,
        "endLine": 11,
        "endChar": 32
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7090915_34435655",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 2009035
      },
      "writtenOn": "2023-10-19T16:58:38Z",
      "side": 1,
      "message": "Yes, I think so. The ISA string is treated as a single value, not a list of values. Anyone working on a RISC-V device will be familiar with it.",
      "parentUuid": "54739a77_1dbbe19c",
      "range": {
        "startLine": 10,
        "startChar": 60,
        "endLine": 11,
        "endChar": 32
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52e71cd1_5ffac88d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-20T08:59:17Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "c7090915_34435655",
      "range": {
        "startLine": 10,
        "startChar": 60,
        "endLine": 11,
        "endChar": 32
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07e1cff0_8e0a4d6c",
        "filename": "runtime/arch/riscv64/instruction_set_features_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-19T14:28:53Z",
      "side": 1,
      "message": "Does this method make sense with `features.empty()`? We would be returning `FromBitmap(bits_)`. Is that the intended result?",
      "range": {
        "startLine": 106,
        "startChar": 31,
        "endLine": 106,
        "endChar": 57
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77ca264b_869934ec",
        "filename": "runtime/arch/riscv64/instruction_set_features_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 2009035
      },
      "writtenOn": "2023-10-19T16:58:38Z",
      "side": 1,
      "message": "Yes. InstructionSetFeatures::AddFeaturesFromString(\"default\") will call consume the \"default\" and call this with an empty list. Other architectures add/remove features with flag/-flag, so an empty list would mean \"don\u0027t add/remove anything from the existing set of features\".",
      "parentUuid": "07e1cff0_8e0a4d6c",
      "range": {
        "startLine": 106,
        "startChar": 31,
        "endLine": 106,
        "endChar": 57
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cacdf49e_5991c090",
        "filename": "runtime/arch/riscv64/instruction_set_features_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-19T14:28:53Z",
      "side": 1,
      "message": "Why do we clear bits? Don\u0027t we want to add features? Why are we removing the ones in `bits_`?",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 13
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5640c034_9cad6e52",
        "filename": "runtime/arch/riscv64/instruction_set_features_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 2009035
      },
      "writtenOn": "2023-10-19T16:58:38Z",
      "side": 1,
      "message": "Because the ISA string includes the complete set of features we want. The way Riscv64InstructionSetFeatures::GetFeatureString works today is by generating an ISA string, not a comma-separated list of features. So I kept that behavior. We could use a comma-separated list of ISA extensions like other architectures if we want to change how GetFeatureString works.",
      "parentUuid": "cacdf49e_5991c090",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 13
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b26ac97_988101f9",
        "filename": "runtime/arch/riscv64/instruction_set_features_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-20T08:59:17Z",
      "side": 1,
      "message": "Can you make a comment on the .h file stating what this method does? I would have expected to add features and not remove them (like the other archs do). Something on the lines of:\n```\n// If `features` is empty, this method doesn\u0027t add/remove anything from the\n// existing set of features.\n// If `features` is not empty, this method expects it to have exactly one value\n// which is assumed to be a complete and valid features string. In this case, the\n// new features will override the old ones. For example, if the existing set of\n// features were `rv64gcv_zba_zbb_zbs` but `features` is `{\"rv64gcv\"}`, then the\n// new features will have the bits set for `zba`, `zbb`, or `zbs`.\n```",
      "parentUuid": "5640c034_9cad6e52",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 13
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1eed677d_94eab5e1",
        "filename": "runtime/arch/riscv64/instruction_set_features_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-19T09:43:05Z",
      "side": 1,
      "message": "I\u0027m fine with this for now but we should consider ignoring extra extensions after a `_`.",
      "range": {
        "startLine": 121,
        "startChar": 6,
        "endLine": 121,
        "endChar": 99
      },
      "revId": "83cc37978a7926445a63599a7e47ae6d6395cb22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}