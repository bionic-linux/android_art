{
  "comments": [
    {
      "key": {
        "uuid": "eb954984_151ee48e",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 2,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "2020",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44f75168_ba63f379",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 2,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb954984_151ee48e",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d8e828f_ca71acc9",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 19,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "full stop is missing here and in other places.",
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c5ffc89_599dcd59",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 19,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d8e828f_ca71acc9",
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c180a28_2da55880",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 20,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "appends",
      "range": {
        "startLine": 20,
        "startChar": 21,
        "endLine": 20,
        "endChar": 28
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9445909c_bcfbfa9f",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 20,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c180a28_2da55880",
      "range": {
        "startLine": 20,
        "startChar": 21,
        "endLine": 20,
        "endChar": 28
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b076ddb_5deb1d9c",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 47,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "Could you comment on what this is for?",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 47,
        "endChar": 3
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ef48059_4548caa0",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 47,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b076ddb_5deb1d9c",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 47,
        "endChar": 3
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b5b50c_ebbac63a",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 53,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "It might be a bit confusing that Const1 means -1 here; also the names are not consistent in before and after cases.",
      "range": {
        "startLine": 53,
        "startChar": 19,
        "endLine": 53,
        "endChar": 25
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9973e08b_294d9e4a",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 53,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4b5b50c_ebbac63a",
      "range": {
        "startLine": 53,
        "startChar": 19,
        "endLine": 53,
        "endChar": 25
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e19be17_12560177",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 57,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "Nit: PhiInd and PhiRed (induction and reduction) could be easier to read.",
      "range": {
        "startLine": 57,
        "startChar": 19,
        "endLine": 57,
        "endChar": 23
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6095446_693fc679",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 57,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e19be17_12560177",
      "range": {
        "startLine": 57,
        "startChar": 19,
        "endLine": 57,
        "endChar": 23
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81860ab2_4bc2f0e5",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 57,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "Nit: I think it is reasonable to have consistent naming in the whole checker test: if the PHIs from \"loop_optimization (before)\" are renamed then ones from probably @loop_optimization (after)\" - this was my original comment implication.",
      "parentUuid": "e6095446_693fc679",
      "range": {
        "startLine": 57,
        "startChar": 19,
        "endLine": 57,
        "endChar": 23
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8e6c674_2f7a28f6",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 57,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81860ab2_4bc2f0e5",
      "range": {
        "startLine": 57,
        "startChar": 19,
        "endLine": 57,
        "endChar": 23
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bac028a_63338539",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 60,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-02T21:10:49Z",
      "side": 1,
      "message": "Indentation here and below.",
      "range": {
        "startLine": 60,
        "startChar": 76,
        "endLine": 60,
        "endChar": 78
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f67ab0f_8b3496cc",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 60,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-03T10:43:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bac028a_63338539",
      "range": {
        "startLine": 60,
        "startChar": 76,
        "endLine": 60,
        "endChar": 78
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59a89846_0cd3443d",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 79,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-02T21:10:49Z",
      "side": 1,
      "message": "Could you please elaborate on what the reason is for introducing a new induction variable to the loop? this phi and the computation \"Add [\u003c\u003cPhi3\u003e\u003e,\u003c\u003cConst1\u003e\u003e]\".",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 37
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dedbba91_c537c082",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 79,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-03T10:43:48Z",
      "side": 1,
      "message": "With dynamic loop unrolling, one loop will run for \"orig_iterations % unroll_factor\" times and another loop will run for \"orig_iterations / unroll_factor\" times.\nFor the same, I added one PHI in original loop and one PHI in unrolled loop whose initial value will be 0 and value will be incremented after each iteration as PHI +\u003d 1.\nI also modified the original and unrolled loops induction conditions as below.\nOriginal loop will run until new PHI value remain less than \"orig_iterations % unroll_factor\".\nUnrolled loop will run until new PHI value remain less than \"orig_iterations / unroll_factor\".\nOld induction PHI in original and unrolled loops will be eliminated (in dead code elimination) if they don\u0027t have further uses.\n\nI am checking addition of new PHI and it\u0027s increment in checker test case.",
      "parentUuid": "59a89846_0cd3443d",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 37
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "356c97fa_be5cdfb1",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 79,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "\u003e Old induction PHI in original and unrolled loops will be eliminated (in dead code elimination) if they don\u0027t have further uses.\n\nCould you double check that this is happening for this particular example please?",
      "parentUuid": "dedbba91_c537c082",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 37
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0bfb35a_318837d5",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 79,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Yes, i have verified with CFG for this method that old PHI is not being used and has been removed in dead_code_elimination pass.",
      "parentUuid": "356c97fa_be5cdfb1",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 37
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f1f0b2f_8c691043",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 79,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "I do get different results when trying this; the newly introduced induction is not removed. To reproduce:\n\n0. Checkout master AOSP.\n1. Cherry-pick Loop Versioning CL.\n2. Cherry-pick this CL.\n3. Run 530-checker-unroll-unknown-iter test on the target.\n\ntest-art-target-run-test-debug-prebuild-optimizing-no-relocate-ntrace-cms-checkjni-picimage-ndebuggable-no-jvmti-cdex-fast-530-checker-unroll-unknown-iter64\n\nNote: In the very checker lines you wrote in this test the old phi (Phi2) is used by ArrayGet and Add.\n\n/// CHECK-START: int Main.testArraySumDown(int[]) loop_optimization (after)\n/// CHECK-DAG: \u003c\u003cPhi2:i\\d+\u003e\u003e    Phi [\u003c\u003cAddL\u003e\u003e,\u003c\u003cAddB\u003e\u003e]\n/// CHECK-DAG: \u003c\u003cAddB:i\\d+\u003e\u003e    Add [\u003c\u003cPhi2\u003e\u003e,\u003c\u003cConst3\u003e\u003e]\n/// CHECK-DAG: \u003c\u003cGetA:i\\d+\u003e\u003e    ArrayGet [\u003c\u003cNullchk\u003e\u003e,\u003c\u003cPhi2\u003e\u003e]\n\n(You could add a test with \"CHECK-START ... dead_code_elimination$final (after)\" checking that there are only 1 induction in the loop)",
      "parentUuid": "c0bfb35a_318837d5",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 37
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1fccce7_2cbe1ea9",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 79,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "Hi Artem, \nThe original loop contains 2 PHIs (one induction and other reduction). We adds one new Induction PHI. I mentioned earlier that in case of no uses, old PHI will be removed in dead_code_elimination pass. \nIn your previous post, you mentioned that newly introduced induction is not removed. Newly introduced induction PHI will not be removed and old induction PHI will be removed in case of no uses. But, we can see that all PHIs have uses and hence, are not being removed.",
      "parentUuid": "5f1f0b2f_8c691043",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 37
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a0419db_839deedc",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 79,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-23T21:07:34Z",
      "side": 1,
      "message": "As you say, \"old induction PHI will be removed in case of no uses\", but it will (almost) always have uses; if someone writes a \"for (int i\u003d0; i \u003cn; i++)\" loop, probably they intend to use \"i\" in the body of the loop. This means effectively that you always introduce an extra induction variable to the loop (with the old one not being removed) - adding extra \"Add\" operation, occupying extra register; this of course affects badly performance and code size. Here is a source level illustration:\n\nBefore:\n  for (int i \u003d 0; i \u003c n;) {\n    a[i]++;\n    i++;\n  }\n\nAfter:\n  int rem \u003d n % 4;\n  int i \u003d 0;\n  int i2 \u003d 0;\n\n  for (; i2 \u003c rem;) {\n    a[i]++;\n    i++;\n    i2++;\n  }\n\n  for (; i2 \u003c n;) {\n    a[i]++;\n    i++;\n    a[i]++;\n    i++;\n    a[i]++;\n    i++;\n    a[i]++;\n    i++;\n\n    i2 + \u003d4;\n  }\n\nReusing the old induction variable and adjusting the checks without introducing new induction might be a better solution (for a unroll factor 4):\n\nBefore:\n  for (int i \u003d 0; i \u003c n; i++) {\n    a[i]++;\n    i++;\n  }\n\nAfter:\n  int rem \u003d n % 4;\n  int i \u003d 0;\n  int i2 \u003d 0;\n\n  for (; i \u003c rem;) {\n    a[i]++;\n    i++;\n  }\n\n  for (; i \u003c n;) {\n    a[i]++;\n    i++;\n    a[i]++;\n    i++;\n    a[i]++;\n    i++;\n    a[i]++;\n    i++;\n  }\n\nWhat do you think?",
      "parentUuid": "b1fccce7_2cbe1ea9",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 37
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b4ad6ea_cab8f7c1",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 90,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "It would be great to describe the inputs of those phi as those are the exact ones to be affected by your transformation.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 97
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f7ce3a2_6e06564d",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 90,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b4ad6ea_cab8f7c1",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 97
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a94ba388_a5aca84b",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 92,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "Could you lease add a check that in the unrolled version of the loop the second loop exit (copied one) is always false?",
      "range": {
        "startLine": 92,
        "startChar": 34,
        "endLine": 92,
        "endChar": 50
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87e759bc_31f0f673",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 92,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "I haven\u0027t added check statement inside unrolled loop body in checker test-case as that check will be removed ultimately in dead_code_elimination.",
      "parentUuid": "a94ba388_a5aca84b",
      "range": {
        "startLine": 92,
        "startChar": 34,
        "endLine": 92,
        "endChar": 50
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c97341c4_ac5d223d",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 92,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "Great, then please add a test to check that fact; either here or after dead_code_elimination.",
      "parentUuid": "87e759bc_31f0f673",
      "range": {
        "startLine": 92,
        "startChar": 34,
        "endLine": 92,
        "endChar": 50
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a013cb5b_6948dd39",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 92,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "I added checker for above case in \"testArraySumByTwo()\" method.",
      "parentUuid": "c97341c4_ac5d223d",
      "range": {
        "startLine": 92,
        "startChar": 34,
        "endLine": 92,
        "endChar": 50
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae622fc7_4208aa4d",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 108,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-02T21:10:49Z",
      "side": 1,
      "message": "I think it might be a good thing to extend checker testing from the situation with one positive and no negative ones; maybe less detailed check statements for some others.\n\nRelated question: what is a range of supported loops? Are loops with control flow allowed? Maybe worth to reflect in the tests.",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 44
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05ea8a70_c7375014",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 108,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-03T10:43:48Z",
      "side": 1,
      "message": "Dynamic loop unrolling is dependent on loop versioning. For dynamic loop unrolling, I am not performing any extra checks on loops (except last statement of original loop header should be IF). With dynamic loop unrolling, I am rearranging the loops, unrolling the versioned loop and modifying the loop induction variables. So, the restrictions for loop versioning applies for dynamic loop unrolling as well.",
      "parentUuid": "ae622fc7_4208aa4d",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 44
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e94ef4fe_63d9e0f9",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 108,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "I think the test-related point of my comment has not been addressed.",
      "parentUuid": "05ea8a70_c7375014",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 44
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31e72c95_0b07f25a",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 108,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Actually, i added one detailed checker test case. Other test cases are included to provide further understanding and clarification in which optimization happens.",
      "parentUuid": "e94ef4fe_63d9e0f9",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 44
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a3e6aec_dc5ff39e",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 108,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "I personally believe that 1 checker test is not enough for this type of complex transformation. Lets consult with Google engineers on that.",
      "parentUuid": "31e72c95_0b07f25a",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 44
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a5ddb3d_ea631bcc",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 108,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "I added one more checker test case for \"testArraySumByTwo()\" .",
      "parentUuid": "1a3e6aec_dc5ff39e",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 108,
        "endChar": 44
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c116d8cb_64b54661",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 150,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "if the length of the array x is 1, one will get out of bounds.",
      "range": {
        "startLine": 150,
        "startChar": 19,
        "endLine": 150,
        "endChar": 25
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f132f205_a369d6af",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 150,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c116d8cb_64b54661",
      "range": {
        "startLine": 150,
        "startChar": 19,
        "endLine": 150,
        "endChar": 25
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a56a9284_aec5ac2d",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 150,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-23T21:07:34Z",
      "side": 1,
      "message": "Now this function is not being tested for odd trip count, so the scalar loop is never executed.\n\nI am not exactly sure what the test\u0027s main target is; you could remove \"(n % 2 !\u003d 0)\" check and iterate the loop n-4 times \"for (int i \u003d 0; i \u003c n - 4; )\".",
      "parentUuid": "f132f205_a369d6af",
      "range": {
        "startLine": 150,
        "startChar": 19,
        "endLine": 150,
        "endChar": 25
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "274424af_1ef703a5",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 161,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "This function is not called from main.",
      "range": {
        "startLine": 161,
        "startChar": 20,
        "endLine": 161,
        "endChar": 34
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60fc4200_da94e617",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 161,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "274424af_1ef703a5",
      "range": {
        "startLine": 161,
        "startChar": 20,
        "endLine": 161,
        "endChar": 34
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e03a6f4_86e2c299",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 161,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "Is there a reason why this function is public and other are private?",
      "range": {
        "startLine": 161,
        "startChar": 2,
        "endLine": 161,
        "endChar": 8
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e44dc6_55ca91d1",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 161,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e03a6f4_86e2c299",
      "range": {
        "startLine": 161,
        "startChar": 2,
        "endLine": 161,
        "endChar": 8
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc38a698_90f347e1",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 205,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "Could calling testArrayInitialize() be a better choice?",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 205,
        "endChar": 5
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7a513d9_db6e1034",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 205,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc38a698_90f347e1",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 205,
        "endChar": 5
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1b2ac31_fc1ea3df",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 205,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "Nit: Maybe it could be better not to put two separate things into one testArrayFill function:\nA) Initializing array.\nB) Copying array (use System.arrayCopy()) for that.",
      "parentUuid": "b7a513d9_db6e1034",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 205,
        "endChar": 5
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b13fafc_f2fdb2e5",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 205,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1b2ac31_fc1ea3df",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 205,
        "endChar": 5
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70d50041_0fb783b2",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 217,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-03T12:44:34Z",
      "side": 1,
      "message": "You always execute the loops with even trip count meaning that in case of unroll by 2, the regular version of the loop is never executed, only the unrolled one.",
      "range": {
        "startLine": 217,
        "startChar": 12,
        "endLine": 217,
        "endChar": 15
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9149dc1d_43e392a4",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 217,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-10T09:26:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70d50041_0fb783b2",
      "range": {
        "startLine": 217,
        "startChar": 12,
        "endLine": 217,
        "endChar": 15
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc625eff_f63918e1",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 217,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-10T14:56:03Z",
      "side": 1,
      "message": "The fact of \"how many iterations will happen in the loop\" is determined by two things:\n- choice the array length.\n- custom \"for\" loops expressions (e.g.: i \u003d 1; i\u003c x.length;).\n\nWith your new PS25 arrays have different lengths, it is a bit confusing for the reader of the code (one would need to check both array creation (length) and the particular \u0027for\u0027 loop code). I think it would be a bit more clear if array length could be the same for all arrays (and passed as a parameter, similar to what happened in PS22); so the logic of how many iterations to be executed would be expressed by the test function.\n\nThen each function could be called twice - with a power of two array length and somewhat odd - thus checking both cases.",
      "parentUuid": "9149dc1d_43e392a4",
      "range": {
        "startLine": 217,
        "startChar": 12,
        "endLine": 217,
        "endChar": 15
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb6e3024_41d52e35",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 217,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-03-17T20:31:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc625eff_f63918e1",
      "range": {
        "startLine": 217,
        "startChar": 12,
        "endLine": 217,
        "endChar": 15
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba1b5f2e_a064dc94",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 22
      },
      "lineNbr": 217,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-03-23T21:07:34Z",
      "side": 1,
      "message": "Thanks for addressing this in PS26; in my previous comment I suggested to call all the testing methods twice - for even and odd trip counts/array lengths. Is there a reason that \"periodicIdiom\" and \"testFloatCode\" are only called with even trip counts?\n\nIf all functions to be checked for both case - what do you think about having this expressed as something like:\n\nint checksum_even \u003d checkAllCases(100);\nexpectEquals(..., checksum_even);\nint checksum_odd  \u003d checkAllCases(103);\nexpectEquals(..., checksum_odd);\n\nto have exactly the same code executed?",
      "parentUuid": "cb6e3024_41d52e35",
      "range": {
        "startLine": 217,
        "startChar": 12,
        "endLine": 217,
        "endChar": 15
      },
      "revId": "8057fde21e6be79f17c66d612735a9c4bc579c9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}