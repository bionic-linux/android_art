{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "972ef18b_c64176b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "You also change from `Path` to `String` down in `getLocations`, fwiw.",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d1b6e5d_0a0906c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "My intention is to mention optimizations here, instead of all changes. Changing from `Path` to `String` is just a cleanup. It may help improve the performance a bit, but not noticibly.",
      "parentUuid": "972ef18b_c64176b7",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0056485f_a4c7c4ec",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "What\u0027s the usage pattern that motivate this cache and its size? In http://b/328673771#comment4 the same app is started repeatedly in a loop. Is this cache cleared between startups? If not, doesn\u0027t that test significantly overestimate the effectiveness compared to real app startup usage?",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b38b92ce_7c051971",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "What I did was I flashed the latest AP4A build and ran `adb shell pm art dump`. My observations were:\n\n1. There were only a handful of packages (e.g., `com.google.android.gms`) that are **commonly** used by other packages.\n2. There were only ten-ish packages that are **ever** used by other packages.\n\nSee the dump at https://paste.googleplex.com/4735426185396224\n\n(1) was the motivation of this cache. The cache size was arbitrarily decided based on (2).\n\n\u003e Is this cache cleared between startups?\n\nNo, the idea is that most of the apps use the same set of packages.\n\n\u003e If not, doesn\u0027t that test significantly overestimate the effectiveness compared to real app startup usage?\n\nI don\u0027t think so. Based on my observation, most of the apps use the same set of packages, so starting the same app repeatedly is not too different from starting different apps.",
      "parentUuid": "0056485f_a4c7c4ec",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef37586a_4fe1bbda",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T21:04:45Z",
      "side": 1,
      "message": "Sounds reasonable. Please capture that in a comment for future reference.\n\n(I wonder if it\u0027s worth enlarging the cache a bit more, up to 50-100 entries or so. I can imagine some OEM devices have a fair set of their own secondary dex\u0027es beyond GMS, and cache entries are relatively small. But it\u0027s really hard to say without any data, so no strong opinion on that.)",
      "parentUuid": "b38b92ce_7c051971",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bcf5ced5_79675a48",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T23:00:47Z",
      "side": 1,
      "message": "Done.\n\nIncreasing the cache size is not always a win in terms of performance. More entires in the cache means less commonly used packages get priority over packages that are not in the cache during `checkForAllPackages`, which may not be a good thing. I\u0027d like to start with the size of 30 and see.",
      "parentUuid": "ef37586a_4fe1bbda",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79fe85c4_865c1164",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-17T18:33:51Z",
      "side": 1,
      "message": "\u003e less commonly used packages get priority over packages that are not in the cache\n\nNot sure I follow. The packages not in the cache will enter it on first use, after all. If you expect a package in the cache to be on average less valuable than one outside it, then there has to be a deterministic pattern where packages are used exactly once and then never again. I don\u0027t see we have any reason to suspect that.",
      "parentUuid": "bcf5ced5_79675a48",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e5ac23e_4859c8fb",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-17T22:38:47Z",
      "side": 1,
      "message": "\u003e If you expect a package in the cache to be on average less valuable than one outside it, then there has to be a deterministic pattern where packages are used exactly once and then never again. I don\u0027t see we have any reason to suspect that.\n\nI think you are following very well. My observation from the dump at https://paste.googleplex.com/4735426185396224 is that many packages are indeed used by other packages only once.",
      "parentUuid": "79fe85c4_865c1164",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12154ba5_3b826441",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 421,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "Nit: A `switch` may be more idiomatic.",
      "range": {
        "startLine": 421,
        "startChar": 16,
        "endLine": 421,
        "endChar": 31
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4f1fd01_fa918291",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 421,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12154ba5_3b826441",
      "range": {
        "startLine": 421,
        "startChar": 16,
        "endLine": 421,
        "endChar": 31
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "289eb075_3e4b7b79",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 447,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "Overloading the same name is confusing and seems uncalled for here. Please choose a different name for one of these methods.",
      "range": {
        "startLine": 447,
        "startChar": 17,
        "endLine": 447,
        "endChar": 34
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "593607f3_1bd8f002",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 447,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "289eb075_3e4b7b79",
      "range": {
        "startLine": 447,
        "startChar": 17,
        "endLine": 447,
        "endChar": 34
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d39fbe93_f9f0ec67",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 449,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "Why not return null in this case? The caller doesn\u0027t seem to do anything different anyway.",
      "range": {
        "startLine": 449,
        "startChar": 20,
        "endLine": 449,
        "endChar": 51
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "229f7d4f_a03a664b",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 449,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "I want to cache the package name in this case.",
      "parentUuid": "d39fbe93_f9f0ec67",
      "range": {
        "startLine": 449,
        "startChar": 20,
        "endLine": 449,
        "endChar": 51
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b889db8_22334c29",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 449,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T21:04:45Z",
      "side": 1,
      "message": "Isn\u0027t this after the caching? I can only see one caller for this, on line 414, and it ignores this result type.\n\nThe primary reason why it\u0027s nice is that it\u0027s easier to ascertain that a package doesn\u0027t get past the filtered snapshot check.",
      "parentUuid": "229f7d4f_a03a664b",
      "range": {
        "startLine": 449,
        "startChar": 20,
        "endLine": 449,
        "endChar": 51
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e0e6d07_151042d2",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 449,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T23:00:47Z",
      "side": 1,
      "message": "I see what you mean. Done.",
      "parentUuid": "6b889db8_22334c29",
      "range": {
        "startLine": 449,
        "startChar": 20,
        "endLine": 449,
        "endChar": 51
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0021449_7a783d69",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "Please comment that the return value is unfiltered and must be checked whether it\u0027s visible to the calling app.\n\nIt\u0027s also worth a comment why this approach is beneficial. Iterating through the unfiltered snapshot means checking more entries, so apparently `checkForPackage` below is cheaper than `shouldFilterApplication` (even though I see some sort of caching in the latter).",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e18d3f16_481f5cf9",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 460,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "Done.\n\n\u003e (even though I see some sort of caching in the latter)\n\nA new filtered snapshot is created [on every dex load](https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java;l\u003d5607-5609;drc\u003daddf3371abf431b2918ef26fe85514c4e18a8d76), meaning the cache doesn\u0027t matter.",
      "parentUuid": "b0021449_7a783d69",
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c94d0fc_e515f98f",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 462,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "This unfiltered snapshot isn\u0027t atomic with the filtered one passed to the caller, is it? Hence one needs to check for cases where the package lists change between them. It\u0027d be simpler to follow the code if we could retrieve the unfiltered snapshot from the filtered one. Is that possible?",
      "range": {
        "startLine": 462,
        "startChar": 24,
        "endLine": 462,
        "endChar": 83
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5d46a2b_107cb504",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 462,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "Unfortunately, there isn\u0027t a way to retrieve the unfiltered snapshot from the filtered one. In fact, we don\u0027t have to. If a package is in the filtered snapshot but not in the unfiltered snapshot, it means the package got removed, so we don\u0027t need to record it.\n\nAdded a comment.",
      "parentUuid": "3c94d0fc_e515f98f",
      "range": {
        "startLine": 462,
        "startChar": 24,
        "endLine": 462,
        "endChar": 83
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17eb8f9b_0b6853df",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 505,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "It\u0027s not obvious that the early shared lib check keeps the same semantics. I suggest moving this bit to a separate CL.",
      "range": {
        "startLine": 501,
        "startChar": 0,
        "endLine": 505,
        "endChar": 9
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d31253d9_55d9b0af",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 505,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "Created aosp/3176199.",
      "parentUuid": "17eb8f9b_0b6853df",
      "range": {
        "startLine": 501,
        "startChar": 0,
        "endLine": 505,
        "endChar": 9
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdaadbc4_1ba498bf",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1262,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "Side issue, but please suppress this warning.\n\n---\n\nPlease fix this WARNING reported by Error Prone: [AutoValueImmutableFields] AutoValue instances should be deeply immutable. Therefore, we recommend returning ImmutableList instead.",
      "range": {
        "startLine": 1262,
        "startChar": 0,
        "endLine": 1262,
        "endChar": 55
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7580001c_65425010",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1262,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "I changed this to a record so I don\u0027t have to bother. It\u0027s fine as long as we don\u0027t use it as a map key (hence not using its insufficient `hashCode()` and `equals()`).",
      "parentUuid": "bdaadbc4_1ba498bf",
      "range": {
        "startLine": 1262,
        "startChar": 0,
        "endLine": 1262,
        "endChar": 55
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "340850a7_189b7a0f",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1262,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T21:04:45Z",
      "side": 1,
      "message": "Aha, ok.\n\nNot that it matters, but it seems to me that the problem with deep immutability is the same. However speaking of that, can\u0027t there be an `@Immutable` annotation on it (and the other one below)?",
      "parentUuid": "7580001c_65425010",
      "range": {
        "startLine": 1262,
        "startChar": 0,
        "endLine": 1262,
        "endChar": 55
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b8f2ae1_7bec1727",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1262,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T23:00:47Z",
      "side": 1,
      "message": "I think `@Immutable` looks unnecessary for records because they are immutable by nature.\n\nAccording to https://blogs.oracle.com/javamagazine/post/records-come-to-java:\n\n\u003e The new concept is a record class (usually just called a record). This is an immutable (in the usual “shallow” Java sense) transparent carrier for a fixed set of values known as the record components.",
      "parentUuid": "340850a7_189b7a0f",
      "range": {
        "startLine": 1262,
        "startChar": 0,
        "endLine": 1262,
        "endChar": 55
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8435809e_40b6a59f",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1262,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-17T18:33:51Z",
      "side": 1,
      "message": "Aha, good. (I read [another page](https://docs.oracle.com/en/java/javase/17/language/records.html) with words words words but they still didn\u0027t consider it worth mentioning the basic fact that they\u0027re immutable.)",
      "parentUuid": "4b8f2ae1_7bec1727",
      "range": {
        "startLine": 1262,
        "startChar": 0,
        "endLine": 1262,
        "endChar": 55
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2adb2d78_245b72e9",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1286,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "You wanna use this?",
      "range": {
        "startLine": 1286,
        "startChar": 12,
        "endLine": 1286,
        "endChar": 18
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40e2141a_171ae6f3",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 4
      },
      "lineNbr": 1286,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "Yes, it\u0027s fine as long as we don\u0027t use it as a map key (hence not using its insufficient `hashCode()` and `equals()`).",
      "parentUuid": "2adb2d78_245b72e9",
      "range": {
        "startLine": 1286,
        "startChar": 12,
        "endLine": 1286,
        "endChar": 18
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66f158d5_efe8e713",
        "filename": "libartservice/service/java/com/android/server/art/Utils.java",
        "patchSetId": 4
      },
      "lineNbr": 499,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T01:16:02Z",
      "side": 1,
      "message": "Why not use String.startsWith?",
      "range": {
        "startLine": 495,
        "startChar": 0,
        "endLine": 499,
        "endChar": 9
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb193754_10c68720",
        "filename": "libartservice/service/java/com/android/server/art/Utils.java",
        "patchSetId": 4
      },
      "lineNbr": 499,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T12:20:17Z",
      "side": 1,
      "message": "Because `prefixLen` may be decremented by line 490.",
      "parentUuid": "66f158d5_efe8e713",
      "range": {
        "startLine": 495,
        "startChar": 0,
        "endLine": 499,
        "endChar": 9
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7528ffea_e7ba0c29",
        "filename": "libartservice/service/java/com/android/server/art/Utils.java",
        "patchSetId": 4
      },
      "lineNbr": 499,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T21:04:45Z",
      "side": 1,
      "message": "I see. It still looks like a net loss until it gets compiled though, but you\u0027re counting on it getting above the JIT threshold soon enough, I presume.",
      "parentUuid": "fb193754_10c68720",
      "range": {
        "startLine": 495,
        "startChar": 0,
        "endLine": 499,
        "endChar": 9
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a479974c_8dfc00a0",
        "filename": "libartservice/service/java/com/android/server/art/Utils.java",
        "patchSetId": 4
      },
      "lineNbr": 499,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T23:00:47Z",
      "side": 1,
      "message": "Yeah.",
      "parentUuid": "7528ffea_e7ba0c29",
      "range": {
        "startLine": 495,
        "startChar": 0,
        "endLine": 499,
        "endChar": 9
      },
      "revId": "d159dab90a885fb963c8e61670b03bfe03484e93",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}