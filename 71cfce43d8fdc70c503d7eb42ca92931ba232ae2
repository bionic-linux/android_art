{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6c8c34c0_b07009fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-12-14T13:29:57Z",
      "side": 1,
      "message": "Thanks Nicolas! mostly lgtm just one minor comment.",
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3b8b5b8_d54c9ab9",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 2
      },
      "lineNbr": 3705,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-12-14T13:29:57Z",
      "side": 1,
      "message": "Just for my understanding, this would be a problem only if we have baseline compiled the same method twice and somehow not resolved the invokes similarly in both compilations right. For ex: we couldn\u0027t resolve the method or couldn\u0027t resolve the method to an exact method.",
      "range": {
        "startLine": 3704,
        "startChar": 29,
        "endLine": 3705,
        "endChar": 39
      },
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da9c6192_3f75dc9b",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 2
      },
      "lineNbr": 3705,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-14T14:14:31Z",
      "side": 1,
      "message": "Yes, that\u0027s right. Given this is baseline compilation, which happen after a lot of execution of the method, I wouldn\u0027t expect this to happen.",
      "parentUuid": "b3b8b5b8_d54c9ab9",
      "range": {
        "startLine": 3704,
        "startChar": 29,
        "endLine": 3705,
        "endChar": 39
      },
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d4313a0_cc856ff2",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 2
      },
      "lineNbr": 3705,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-12-14T14:56:16Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "da9c6192_3f75dc9b",
      "range": {
        "startLine": 3704,
        "startChar": 29,
        "endLine": 3705,
        "endChar": 39
      },
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf1417fa_8ed2acf8",
        "filename": "compiler/optimizing/profiling_info_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-14T12:34:42Z",
      "side": 1,
      "message": "Can we add a comment like: `// ProfilingInfo::Create might return null if we cannot create the instance due to memory requirements`.\n\nnon-blocking: maybe `ProfilingInfo::Create` should be renamed to `TryCreate` or something like that. Similar for `JitCodeCache::AddProfilingInfo`. That would be the only reason the `graph-\u003eGetProfilingInfo()` is null right? I wouldn\u0027t have expected this creation to return null",
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f26af3fd_e060c3a6",
        "filename": "compiler/optimizing/profiling_info_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-14T14:14:31Z",
      "side": 1,
      "message": "This is an allocation, so can always return null, and the code is being defensive. Not sure it\u0027s great to comment that for every place we do allocations. Is there a particular code which is surprising?",
      "parentUuid": "bf1417fa_8ed2acf8",
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eecfef72_344b3656",
        "filename": "compiler/optimizing/profiling_info_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-14T14:22:29Z",
      "side": 1,
      "message": "I was surprised that the profiling info creation could fail. Other `Create` methods  cannot fail (e.g. `RegisterAllocator::Create`, `JniCallingConvention::Create`), or would lead to crashes (e.g.`Runtime::Create`).\n\nThe line https://android-review.git.corp.google.com/c/platform/art/+/2874815/3/compiler/optimizing/optimizing_compiler.cc#928 was the one that first caught my eye. Since we just created it, I thought it couldn\u0027t possibly be null.",
      "parentUuid": "f26af3fd_e060c3a6",
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed842dfd_14652200",
        "filename": "compiler/optimizing/profiling_info_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-14T14:57:18Z",
      "side": 1,
      "message": "Ack, I\u0027ve put a comment over there.",
      "parentUuid": "eecfef72_344b3656",
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31238b84_c0e14bea",
        "filename": "compiler/optimizing/profiling_info_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-12-14T13:29:57Z",
      "side": 1,
      "message": "These should match with the UpdateInlineCache in CodeGenerator right? Is it somehow  possible to share this so we don\u0027t have any inconsistencies in future.",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c3f6715_638cda87",
        "filename": "compiler/optimizing/profiling_info_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-14T14:14:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31238b84_c0e14bea",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "71cfce43d8fdc70c503d7eb42ca92931ba232ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}