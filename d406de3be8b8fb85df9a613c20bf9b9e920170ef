{
  "comments": [
    {
      "key": {
        "uuid": "6c095d91_96e50451",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-09-12T01:22:58Z",
      "side": 1,
      "message": "This is still failing one test, and I don\u0027t know why it is skipping this extra file, but it might be due to LLVM changes to what it decodes from the DWARF. I debugged multiple of these tests already, but this one eludes me so far (and I am having a hard time just dumping the file data itself).\n\n```\nsrhines@ringworld:__:aosp-master-plus-llvm$ out/host/linux-x86/nativetest/art_compiler_tests/art_compiler_tests --gtest_filter\u003dDwarfTest.DebugLine --no_isolate\nNote: Google Test filter \u003d DwarfTest.DebugLine                                                                     \n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.                                                                     \n[----------] Global test environment set-up.                                                                       \n[----------] 1 test from DwarfTest                                                                                 \n[ RUN      ] DwarfTest.DebugLine                                                                                   \nart/compiler/debug/dwarf/dwarf_test.cc:222: Failure                                                                                                                                                                                    \nFailed                                                                                                                                                                                                                                 \n\u0027file_names[  4]:\u0027 not found.                                                                                                                                                                                                          \nart/compiler/debug/dwarf/dwarf_test.cc:223: Failure                                                                                                                                                                                    \nFailed                                   \n\u0027           name: \"file.c\"\u0027 not found.           \nart/compiler/debug/dwarf/dwarf_test.cc:224: Failure\nFailed                                        \n\u0027      dir_index: 0\u0027 not found.                          \nart/compiler/debug/dwarf/dwarf_test.cc:225: Failure\nFailed                            \n\u0027       mod_time: 0x000003e8\u0027 not found.\nart/compiler/debug/dwarf/dwarf_test.cc:226: Failure\nFailed        \n\u0027         length: 0x000007d0\u0027 not found.    \nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:143] objdump output:\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] /tmp/art-data-pdOkju/TmpFile-vgd7Zu: file format elf32-i386\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] .debug_line contents:\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] debug_line[0x00000000]\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] Line table prologue:\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]     total_length: 0x0000007a\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]           format: DWARF32\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]          version: 3\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]  prologue_length: 0x0000004a\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]  min_inst_length: 2\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]  default_is_stmt: 0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]        line_base: -5\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]       line_range: 14\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]      opcode_base: 13\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_copy] \u003d 0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_advance_pc] \u003d 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_advance_line] \u003d 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_set_file] \u003d 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_set_column] \u003d 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_negate_stmt] \u003d 0 \nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_set_basic_block] \u003d 0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_const_add_pc] \u003d 0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_fixed_advance_pc] \u003d 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_set_prologue_end] \u003d 0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_set_epilogue_begin] \u003d 0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] standard_opcode_lengths[DW_LNS_set_isa] \u003d 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] include_directories[  1] \u003d \"/path/to/source\"\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] file_names[  1]:\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]            name: \"file0.c\"\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]       dir_index: 0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]        mod_time: 0x000003e8\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]          length: 0x000007d0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] file_names[  2]:\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]            name: \"file1.c\"\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]       dir_index: 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]        mod_time: 0x000003e8\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]          length: 0x000007d0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] file_names[  3]:\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]            name: \"file2.c\"\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]       dir_index: 1\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]        mod_time: 0x000003e8\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145]          length: 0x000007d0\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] Address            Line   Column File   ISA Discriminator Flags\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] ------------------ ------ ------ ------ --- ------------- -------------\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] 0x0000000001000000      1      0      1   0             0  is_stmt\nart_compiler_tests E 09-11 18:22:10 347090 347090 dwarf_test.h:145] 0x0000000001000100      3      4      2   5             0  basic_block prologue_end epilogue_begin end_sequence\n[  FAILED  ] DwarfTest.DebugLine (248 ms)\n[----------] 1 test from DwarfTest (248 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (248 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] DwarfTest.DebugLine\n\n 1 FAILED TEST\n```",
      "revId": "d406de3be8b8fb85df9a613c20bf9b9e920170ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a7beed0_d5760ecc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-09-14T17:24:57Z",
      "side": 1,
      "message": "I have been looking at this as well.\n\nI would also consider the possibility that this is a regression in the new LLVM version.\n\nIn fairness, the test is a bit odd.... the file definition at the end of the sequence is redundant (just for puropses of testing), but moving it at the very start still keeps the failure.\n\nI have sent you copy of the tested so file.  Running in the llvm-dwarfdump -debug-line generates:\nfile_names[  3]:\n           name: \"file2.c\"\n      dir_index: 1\n       mod_time: 0x000003e8\n         length: 0x000007d0\n\nAddress            Line   Column File   ISA Discriminator Flags\n------------------ ------ ------ ------ --- ------------- -------------\n0x0000000001000000      1      0      4   0             0  is_stmt\n0x0000000001000100      3      4      2   5             0  basic_block prologue_end epilogue_begin end_sequence\n\nThat is the output refers to file (4) which has not been defined in the stdout, and no error is printed.\n\n\nHaving said that.  The opcode is tested for completness and is not used in ART.  Also LLVM tool regression is not blocker for ART.  Feel free to comment out the offending check (ideally with links to LLVM + buganizer bugs)",
      "revId": "d406de3be8b8fb85df9a613c20bf9b9e920170ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fd8985c_35012440",
        "filename": "compiler/debug/dwarf/dwarf_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-09-12T01:24:54Z",
      "side": 1,
      "message": "This is the line that fails to be found (along with the next 4 as well).",
      "revId": "d406de3be8b8fb85df9a613c20bf9b9e920170ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e331c9_9a94f16c",
        "filename": "compiler/debug/dwarf/dwarf_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-09-22T16:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9fd8985c_35012440",
      "revId": "d406de3be8b8fb85df9a613c20bf9b9e920170ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2eda889_641eef15",
        "filename": "compiler/debug/dwarf/dwarf_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-09-12T01:24:54Z",
      "side": 1,
      "message": "This should be creating an entry for file.c, but perhaps LLVM is being clever and not decoding this (or the encoding routine has something that the new toolchain is exposing as incorrect).",
      "revId": "d406de3be8b8fb85df9a613c20bf9b9e920170ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7712a465_05004c92",
        "filename": "compiler/debug/dwarf/dwarf_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-09-22T16:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2eda889_641eef15",
      "revId": "d406de3be8b8fb85df9a613c20bf9b9e920170ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}