{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "77b861a4_469dfc1a",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-09-13T17:59:02Z",
      "side": 1,
      "message": "This line is probably worth an early discussion, since I expect everything else depends on it. Concerns, in no particular order:\n\n- I believe we use k... names only for compile-time values. It should be renamed to gPageSize. Lokesh recently went through this exercise with gUseReadBarrier. (See https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/read_barrier_config.h;l\u003d76-92)\n\n- I believe ToT declares only constexpr values in this file, as should be the case. I think using \"static const\" here will potentially introduce a new copy of the variable for each compilation unit that includes this. Due to initialization ordering rules, I don\u0027t see how the compiler can avoid that. \n\n- I don\u0027t see an argument that this is correct with respect to initialization ordering. My guess would be that having many copies of the constant makes the initialization-ordering argument intractable. Note that a static initializer in one file may potentially call a function in another file, which would access that other version of the constant. At a minimum, we need a careful argument that static initialization is OK here. Or maybe some large disclaimer about where it\u0027s safe to use this \"constant\", but that seems really brittle.\n\n- What about https://cs.android.com/android/platform/superproject/main/+/main:bionic/libc/bionic/getpagesize.cpp;l\u003d32 ?\n\nI suspect we need something closer to Lokesh\u0027s gUseReadBarrier code. And maybe some ugly non-portable \"do this first\" hack to deal with the initialization ordering issue. Or lazy-on-demand initialization, which would be slower.\n\nApologies for piling on this one line of code. But getting this right is really tricky, and we\u0027ve been bitten before. Also lines 66 and 68 seem to have snuck in here before with similar issues.",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba293cbd_9ba62de4",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-09-14T18:20:13Z",
      "side": 1,
      "message": "\u003e This line is probably worth an early discussion, since I expect everything else depends on it. Concerns, in no particular order:\n\u003e \n\u003e - I believe we use k... names only for compile-time values. It should be renamed to gPageSize. Lokesh recently went through this exercise with gUseReadBarrier. (See https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/read_barrier_config.h;l\u003d76-92)\n\n\nAgreed. It\u0027ll have to be renamed as `gPageSize`.\n\n\u003e \n\u003e - I believe ToT declares only constexpr values in this file, as should be the case. I think using \"static const\" here will potentially introduce a new copy of the variable for each compilation unit that includes this. Due to initialization ordering rules, I don\u0027t see how the compiler can avoid that. \n\nAgreed. I think it should be `extern` in this header file and then initialized in an appropriate .cc file.\n\n\n\u003e \n\u003e - I don\u0027t see an argument that this is correct with respect to initialization ordering. My guess would be that having many copies of the constant makes the initialization-ordering argument intractable. Note that a static initializer in one file may potentially call a function in another file, which would access that other version of the constant. At a minimum, we need a careful argument that static initialization is OK here. Or maybe some large disclaimer about where it\u0027s safe to use this \"constant\", but that seems really brittle.\n\u003e \n\u003e - What about https://cs.android.com/android/platform/superproject/main/+/main:bionic/libc/bionic/getpagesize.cpp;l\u003d32 ?\n\u003e \ngetpagesize() is in a different compilation unit, so will cause a function call on every invocation, which is additional overhead. Whereas page_size() is inline. So it\u0027ll create a copy in every place it\u0027s inlined.\n\nMaybe we can strategically create statics to avoid overhead of getpagesize(). For instance, we can create a gPageSize static in MarkCompact.\n\n\u003e I suspect we need something closer to Lokesh\u0027s gUseReadBarrier code. And maybe some ugly non-portable \"do this first\" hack to deal with the initialization ordering issue. Or lazy-on-demand initialization, which would be slower.\n\n`init_priority (PRIORITY)` can be used. The problem is it doesn\u0027t work across libraries.\n\u003e \n\u003e Apologies for piling on this one line of code. But getting this right is really tricky, and we\u0027ve been bitten before. Also lines 66 and 68 seem to have snuck in here before with similar issues.",
      "parentUuid": "77b861a4_469dfc1a",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "134fe049_ef19a597",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-09-18T06:20:56Z",
      "side": 1,
      "message": "Thank you for the feedback and suggestions.\n\nI will rename `kPageSize` -\u003e `gPageSize` and other values, which are not `constexpr` anymore, accordingly. Also I\u0027m planning to move the declaration to another file. However, I\u0027d like to keep the value `constexpr` for build configuration not meant to be agnostic to page size. In those configurations, `gPageSize` and the other values would be `constexpr`. Would this be suitable?\n\nWith regards to the possibility of the static initialization order issue, I agree defining the variable as a `static const` isn\u0027t guaranteeing correct order even though every module has own copy - due to possibility of a cross-module function call during the initialization. I\u0027m looking into this and should get back with my findings and ideas on how the solution could look like by end of the week.",
      "parentUuid": "ba293cbd_9ba62de4",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "950fa760_906e0deb",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-09-18T18:14:01Z",
      "side": 1,
      "message": "The renaming is fine. Lokesh did the same thing for gUseReadBarrier, which is also sometimes constexpr, sometimes not. I agree that it should be constexpr when possible.",
      "parentUuid": "134fe049_ef19a597",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a391cb_d231f80c",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-09-22T19:43:29Z",
      "side": 1,
      "message": "\u003e With regards to the possibility of the static initialization order issue, I agree defining the variable as a static const isn\u0027t guaranteeing correct order even though every module has own copy - due to possibility of a cross-module function call during the initialization. I\u0027m looking into this and should get back with my findings and ideas on how the solution could look like by end of the week.\n\nMy immediate plan is to change the gPageSize to a singleton-like variable initialized upon first access. This is likely suboptimal from performance perspective, however should guarantee correctness. However, at this stage I\u0027m only attempting to achieve functional correctness for the page size agnostic configuration, with no (or with minimal) change for the base static 4K configuration where it still should behave as constexpr.\n\nThe initial idea behind `static const` was that it limits chance of referring to the variable from other modules\u0027 static initializers due to each module has own copy of the variable. While of course it means multiple copies are initialized, my assumption was that it doesn\u0027t have a significant impact on performance due to in zygote-based model the initialization would happen only once per zygote startup so shouldn\u0027t affect application startup time.\n\nTo guarantee there are no static initialization order issues left, I was planning testing with ASan in mode detecting this kind of issues.\n\nHowever, as also discussed above, it isn\u0027t a guarantee in long-term unless something like ASan-based CI job is introduced to regularly test for this kind of issues, since it is still possible that a function in a module referring to gPageSize would be called during static initialization of another module which might happen before gPageSize of called module is initialized.\n\nA few potential other approaches to solving this I\u0027ve been thinking of:\n\n1. modify dynamic linker to handle this value a special case (new relocation type?) - this doesn\u0027t seem suitable as it would require custom dynamic linker so anything else than bionic-based linker wouldn\u0027t be suitable unless updated accordingly + it wouldn\u0027t solve the issue for variables statically initialized using gPageSize (where value doesn\u0027t have to be the page size - instead could be something computed based on page size);\n\n2. implement accessor class which would have a flag indicating whether a global is already initialized; with assertions upon each access to the variable - that is possibly suitable however introduces own performance overhead for the assertion or, if enabled only in debug build, doesn\u0027t guarantee there are no order issues in non-debug builds;\n\n3. forbid access to gPageSize and derived variables until art::MemMap::Init - that would require updating statically initialized variables dependent on gPageSize in a similar way + some special handling in unit tests which seem to not necessarily call art::MemMap::Init.",
      "parentUuid": "950fa760_906e0deb",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93972de7_510f7fc3",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-09-29T18:37:44Z",
      "side": 1,
      "message": "I\u0027ve updated the patch accordingly - goal of the current version is to ensure no static initialization order issues although possibly with increased overhead in page size agnostic configuration, however with minimal effect on non page size agnostic builds.\n\nThe plan is to subsequently prepare a patch minimizing the overhead for the page size agnostic configuration as well.",
      "parentUuid": "d3a391cb_d231f80c",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "041c3eeb_60329ae1",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-04T19:52:03Z",
      "side": 1,
      "message": "This looks very good to me from a correctness viewpoint. I would be tempted to manually confirm that this generates reasonable code in the dynamic case, though. I think it should, but I don\u0027t have a good sense as to whether clang actually does the right thing here.",
      "parentUuid": "93972de7_510f7fc3",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af18aefb_3abd4ac4",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1280281
      },
      "writtenOn": "2023-11-09T17:31:13Z",
      "side": 1,
      "message": "Some preliminary experiments suggested it doesn\u0027t generate optimal code for this. There is a plan to optimize the implementation along with other optimizations summarized at b/309032504. Would it be suitable if this is implemented in the subsequent chain of patches? This implementation isn\u0027t expected to affect the fixed 4K configuration where the value should still be a `constexpr`.",
      "parentUuid": "041c3eeb_60329ae1",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68c6f04c_453cd55d",
        "filename": "libartbase/base/globals.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-11-29T00:04:46Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "af18aefb_3abd4ac4",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "a571028d2f2ce6194f7e519af764119bbc52e598",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}