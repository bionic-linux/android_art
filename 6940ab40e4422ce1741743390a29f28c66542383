{
  "comments": [
    {
      "key": {
        "uuid": "e82450e7_5c789056",
        "filename": "test/466-get-live-vreg/get_live_vreg_jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-05-30T12:00:27Z",
      "side": 1,
      "message": "Right this means we need to avoid sinking instructions that have environment uses for debuggable apps. Do you want to make this change?",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 64,
        "endChar": 88
      },
      "revId": "6940ab40e4422ce1741743390a29f28c66542383",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb9f52fd_97caae5c",
        "filename": "test/466-get-live-vreg/get_live_vreg_jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2018-05-30T12:21:02Z",
      "side": 1,
      "message": "Actually those instruction are not sunk for debuggable apps (there is a check graph_-\u003eIsDebuggable()) so my added test fails in non-debuggable mode only.\n\nActually my question is more generic and is about the restrictions on preserving the environment uses for non-debuggable graph which are set by this test (466-get-live-vreg) and the commit (https://android-review.googlesource.com/c/platform/art/+/144250). This can be reformulated as \"why do we keep env_uses for which ShouldBeLiveForEnvironment(...) returns \"false\"?\n\nBTW, my comment might have been missed:\n\"Hi! I\u0027ve been recently investigating whether it\u0027s possible to optimize out some environment uses (the naive (and probably invalid) \"remove-almost-all\" case gives ~3.5% code size reduction). Thus I would really appreciate if you could comment on the following questions.\n\n1. What is the contract between the compiler in non-debuggable mode and native code in terms of which v-register are supposed to be accessible via StackVisitor?\n2. Why do we have such restrictions that in non-debuggable mode we must have the values of the primitive types preserved in the environments? I understand the HDeoptimize case but what about others?\n3. I have also come up with a example (in 466-get-live-vreg) which in my understanding should pass however it fails due to code sinking removing some env-uses. Is my understanding incorrect?\"",
      "parentUuid": "e82450e7_5c789056",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 64,
        "endChar": 88
      },
      "revId": "6940ab40e4422ce1741743390a29f28c66542383",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c295749_d8cb17da",
        "filename": "test/466-get-live-vreg/get_live_vreg_jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-05-30T13:12:24Z",
      "side": 1,
      "message": "1. What is the contract between the compiler in non-debuggable mode and native code in terms of which v-register are supposed to be accessible via StackVisitor?\n\nNone\n\n2. Why do we have such restrictions that in non-debuggable mode we must have the values of the primitive types preserved in the environments? I understand the HDeoptimize case but what about others?\n\nYou mean non-primitive right? That\u0027s due to liveness issues, which has a very long story somewhat commented in ShouldBeLiveForEnvironment.\n\n3. I have also come up with a example (in 466-get-live-vreg) which in my understanding should pass however it fails due to code sinking removing some env-uses. Is my understanding incorrect?\"\n\nIt should be ok to move for non-debuggable as long as the vreg is not used for deopt.",
      "parentUuid": "cb9f52fd_97caae5c",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 64,
        "endChar": 88
      },
      "revId": "6940ab40e4422ce1741743390a29f28c66542383",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e92aeea_aded69ee",
        "filename": "test/466-get-live-vreg/get_live_vreg_jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2018-05-30T13:43:44Z",
      "side": 1,
      "message": "2. I meant Primitive types (not references); this test for the \"testLiveArgument case above checks that a value of a primitive type (kInt32_t) is accessible through a StackVisitor for all modes including non-debuggable. Could this test be relaxed to only check for the values (non-primitive, ShouldBeLiveForEnvironment() \u003d\u003d true)? for example instead of checking \"int arg\" check \"Object arg\"?\n\nAfter what you\u0027ve said (e.g. \"for non-debuggable as long as the vreg is not used for deopt.\" and other) it seems that primitive-typed env-uses for which ShouldBeLiveForEnvironment returns false can be dropped. I am going to upload a PoC/RFC patch for that.",
      "parentUuid": "6c295749_d8cb17da",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 64,
        "endChar": 88
      },
      "revId": "6940ab40e4422ce1741743390a29f28c66542383",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4cb5973_dca403d8",
        "filename": "test/466-get-live-vreg/get_live_vreg_jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-05-30T14:46:12Z",
      "side": 1,
      "message": "Primitive types can be dropped any time for non-debuggable non-deopt cases.",
      "parentUuid": "5e92aeea_aded69ee",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 64,
        "endChar": 88
      },
      "revId": "6940ab40e4422ce1741743390a29f28c66542383",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}