{
  "comments": [
    {
      "key": {
        "uuid": "d7e5071d_7295f8d6",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 663,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-01-30T15:21:20Z",
      "side": 1,
      "message": "Can you add a comment on why only for non-split intervals? For split intervals, is it a requirement not to use the input register, or because there is better hint available?",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57d4b72d_3634f854",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 663,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-30T16:19:07Z",
      "side": 1,
      "message": "Because split intervals have no inputs (maybe conceptually its input is the parent interval). I rephrased the comment.",
      "parentUuid": "d7e5071d_7295f8d6",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97ef0fff_908734ef",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 672,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-01-30T15:21:20Z",
      "side": 1,
      "message": "Can you add a check that last sibling covers defined_by-\u003eGetLifetimePosition()? I\u0027m a little worried if we ever aggressively split intervals, picking last sibling won\u0027t work here.",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77f45bd1_0f7e8596",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 672,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-30T16:19:07Z",
      "side": 1,
      "message": "Check is at line 678 :-) I have to keep it there because it may have not been processed yet. I\u0027ve added a TODO.",
      "parentUuid": "97ef0fff_908734ef",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b79c1385_87302a15",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 688,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-30T05:04:59Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 688,
        "startChar": 30,
        "endLine": 688,
        "endChar": 34
      },
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77bffbde_77027038",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 688,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-30T09:21:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b79c1385_87302a15",
      "range": {
        "startLine": 688,
        "startChar": 30,
        "endLine": 688,
        "endChar": 34
      },
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7e5071d_f22b282a",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-01-30T15:21:20Z",
      "side": 1,
      "message": "Just curious, is use-\u003eGetPosition() \u003e end only possibly true for environment use?",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77f45bd1_ef490178",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-30T16:19:07Z",
      "side": 1,
      "message": "uses are not split: sibling intervals share the same use list.",
      "parentUuid": "d7e5071d_f22b282a",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7ea53ed_b1d7e0c1",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 624,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-01-30T15:21:20Z",
      "side": 1,
      "message": "It\u0027s better to separate this into CanUseInputRegister() and IsInputRegisterUsed(). And we need to check both.",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77f45bd1_8f483571",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 624,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-30T16:19:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7ea53ed_b1d7e0c1",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7ea53ed_51ef948a",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 643,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-01-30T15:21:20Z",
      "side": 1,
      "message": "For IsInputRegisterUsed(), regardless of interval-\u003eGetType() \u003d\u003d GetType(), we need to check registers really overlap, like one being an int and the other being a long pair.",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97baafec_5879dd16",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 643,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-30T16:19:07Z",
      "side": 1,
      "message": "Intervals don\u0027t hold pair registers, just a single register. So this type check is for FP or Int.",
      "parentUuid": "b7ea53ed_51ef948a",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17cebfa3_fa39c175",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 643,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-01-30T19:23:55Z",
      "side": 1,
      "message": "interval-\u003eGetType() returns Primitive::Type which can be kPrimInt or kPrimLong, how do we make sure they don\u0027t overlap? Do we also need to check associated HighInterval?",
      "parentUuid": "97baafec_5879dd16",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7769bb73_e757c299",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 2
      },
      "lineNbr": 643,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-02T09:41:15Z",
      "side": 1,
      "message": "Yeah very good point. We should not check, the type, but the kind instead. Done.",
      "parentUuid": "17cebfa3_fa39c175",
      "revId": "9dbdc53ad8ee6dd99bb770cd42ef26732b6ba407",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}