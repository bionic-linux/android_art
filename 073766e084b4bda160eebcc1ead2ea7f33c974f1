{
  "comments": [
    {
      "key": {
        "uuid": "d829ca86_2e4307e9",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-07-07T14:16:32Z",
      "side": 1,
      "message": "Why `hi` and `hs`? I think it works, but so would `ge` and `gt`. They would be less confusing, and we could use the helper above.\n\nNot considering the NaN cases, the NZCV flags are set as follow for FP comparisons (ARMv8 ARM AppxG-5105):\n\n\u003d\u003d  0110\n\u003c   1000\n\u003e   0010\n\nThen the condition code mean:\n\nhs \u003d 2,   // C set\nhi \u003d 8,   // C set, Z clear\nge \u003d 10,  // N \u003d\u003d V\ngt \u003d 12,  // Z clear, N \u003d\u003d V",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8fb8a32_defd6532",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1660,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-07-07T13:49:07Z",
      "side": 1,
      "message": "This seems pretty architecture independent. Should we move it out of here?",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_4e653397",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1767,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-07-07T14:16:32Z",
      "side": 1,
      "message": "What about `if (Primitive::IsFloatingPointType(type) ...` instead of the switch?",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_3f39e78f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1782,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-07-07T13:49:07Z",
      "side": 1,
      "message": "I have read this correctly this should be:\n\n__ Cset(res, cond);\nif (gt_bias \u0026\u0026 ((cond \u003d\u003d GT) || (cond \u003d\u003d GE))) || (!gt_bias \u0026\u0026 (cond \u003d\u003d NE)) {\n__ Csinc(res, res, wzr, InvertCondition(vs));\n} else if (gt_bias \u0026\u0026 ((cond \u003d\u003d LT) || (cond \u003d\u003d LE))) || (!gt_bias \u0026\u0026 (cond \u003d\u003d EQ)) {\n__ Csel(res, wzr, res, vs);\n}",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8fb8a32_be7df929",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1782,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-07-07T14:16:32Z",
      "side": 1,
      "message": "Actually VIXL will handle this nicely.\n\n__ Cset(res, cond);\nint val \u003d \u003cnan case\u003e ? 0 : 1;\n__ Csel(res, res, Operand(val));",
      "parentUuid": "f8f4ce42_3f39e78f",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_10ed043d",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2111,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-07-07T14:16:32Z",
      "side": 1,
      "message": "This is misnamed. `on_NaN_label`? `on_vs_label`?",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_1152aee0",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2111,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-07-08T09:03:47Z",
      "side": 1,
      "message": "I didn\u0027t see that on `vs` we could branch to either `true_label` or `false_label`.\nI found confusing that when `vs` is not set by the comparison and the condition evaluates to false we fall through and do not branch to `false_label.`",
      "parentUuid": "1840c241_10ed043d",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_86dd4e54",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2119,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-07-08T09:05:46Z",
      "side": 1,
      "message": "Do we need to check that it is not null?",
      "range": {
        "startLine": 2119,
        "startChar": 17,
        "endLine": 2119,
        "endChar": 28
      },
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_6e60ef88",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2178,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-07-07T14:16:32Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "073766e084b4bda160eebcc1ead2ea7f33c974f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}