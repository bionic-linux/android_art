{
  "comments": [
    {
      "key": {
        "uuid": "99ce74a2_1d7477f3",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 753,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-09T17:37:05Z",
      "side": 1,
      "message": "Nit: put braces around this expression",
      "range": {
        "startLine": 753,
        "startChar": 35,
        "endLine": 753,
        "endChar": 61
      },
      "revId": "773b1abb504518e45e40795b138c6aca5e6c0386",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99fcb4c6_e7047c4f",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 753,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-06-09T23:14:54Z",
      "side": 1,
      "message": "I was looking through some optimizing code and trying to understand when the right time to place braces is so I can document the correct style usage. \n\nI am guessing if there\u0027s \u003d\u003d or !\u003d AND ((more than 1 operand to \u0026\u0026 or ||) or it\u0027s used by an assignment \u003d operator  ) , it\u0027s good?\n\n  x \u003d (a \u003d\u003d b)\n  x \u003d (a !\u003d b)\n  (a \u003d\u003d b) || (c \u003d\u003d d)\n  (a \u003d\u003d b) \u0026\u0026 (c \u003d\u003d d)\n\nAre there any other examples I missed?\n\n(I\u0027m also not sure I understand the rationale, it\u0027s quite common knowledge \u003d\u003d/!\u003d operator precedence is fairly low, and \u003d is even lower. Perhaps there are much better examples than the ones I have here?)",
      "parentUuid": "99ce74a2_1d7477f3",
      "range": {
        "startLine": 753,
        "startChar": 35,
        "endLine": 753,
        "endChar": 61
      },
      "revId": "773b1abb504518e45e40795b138c6aca5e6c0386",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5934fc65_c5340c6b",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 753,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-06-10T00:07:47Z",
      "side": 1,
      "message": "I think adding parens in conditionals should be only to disambiguate \u0026\u0026 vs || e.g:\nif (allocator \u003d\u003d kAllocatorTypeTLAB || allocator \u003d\u003d kAllocatorTypeRegionTLAB)\n\nvs\nif ((allocator \u003d\u003d kAllocatorTypeTLAB || allocator \u003d\u003d kAllocatorTypeRegionTLAB) \u0026\u0026\n      byte_count \u003c\u003d self-\u003eTlabSize())",
      "parentUuid": "99fcb4c6_e7047c4f",
      "range": {
        "startLine": 753,
        "startChar": 35,
        "endLine": 753,
        "endChar": 61
      },
      "revId": "773b1abb504518e45e40795b138c6aca5e6c0386",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59823c52_32e990f4",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 753,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-10T21:15:37Z",
      "side": 1,
      "message": "There\u0027s a few reasons I am now using that style and suggested it to Andreas. It actually started as a request from colleagues in reviews, and I was also unsure why. But after doing it for a while, it became kind of obvious:\n- In compiler land, everyone must have written a parser with precedence rules. You do it once, and then first thing you want is to forget it. Why paying the mental overhead of remembering the precedence, when we can just put parenthesis?\n- It\u0027s just too easy to be bitten by it.\n- When debugging or refactoring code, I don\u0027t want to have to think whether an expression without parenthesis has the right precedence rules, but just focus on the logic of the code.\n- We\u0027re not state machines. Parenthesis help not having to be one.\n- When it comes to documenting style, I think it\u0027s much simpler to not have special cases. In \"Put parenthesis around expressions except when....\", the \"when\" is just mental overhead. \n- Most importantly, if adding them helps my co-workers, I don\u0027t see any reason not to put them. To be honest, I\u0027m not sure what would be a counter-argument to their request.\n\nIf anything, the last bit is the take away. What matters is your co-workers.",
      "parentUuid": "99fcb4c6_e7047c4f",
      "range": {
        "startLine": 753,
        "startChar": 35,
        "endLine": 753,
        "endChar": 61
      },
      "revId": "773b1abb504518e45e40795b138c6aca5e6c0386",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "992af412_54f8acf4",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 753,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-06-10T21:21:04Z",
      "side": 1,
      "message": "Adding parens is a slippery slope. Before you know it, the code base will become unreadable lisp.",
      "parentUuid": "59823c52_32e990f4",
      "range": {
        "startLine": 753,
        "startChar": 35,
        "endLine": 753,
        "endChar": 61
      },
      "revId": "773b1abb504518e45e40795b138c6aca5e6c0386",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59823c52_b2134095",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 753,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-10T21:23:36Z",
      "side": 1,
      "message": "Are you saying the code in eg this file looks like lisp for you?",
      "parentUuid": "992af412_54f8acf4",
      "range": {
        "startLine": 753,
        "startChar": 35,
        "endLine": 753,
        "endChar": 61
      },
      "revId": "773b1abb504518e45e40795b138c6aca5e6c0386",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}