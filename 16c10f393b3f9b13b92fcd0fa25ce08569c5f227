{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9ef1ffad_f35e2a37",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "I haven\u0027t checked the tests yet. I\u0027ll check them once the current comments are addressed.",
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "077aa8c6_46144222",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 535,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "Please move these comments to the header file.",
      "range": {
        "startLine": 531,
        "startChar": 0,
        "endLine": 535,
        "endChar": 93
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "448cf0ee_05c52421",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 535,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "077aa8c6_46144222",
      "range": {
        "startLine": 531,
        "startChar": 0,
        "endLine": 535,
        "endChar": 93
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb065c10_d704478b",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 538,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "DCHECK whether the size of `zeroes` is larger than or equal to `size`.\n```suggestion\n                         const std::vector\u003cuint8_t\u003e\u0026 zeroes) {\n  DCHECK_GE(zeroes.size(), size);\n```",
      "range": {
        "startLine": 538,
        "startChar": 61,
        "endLine": 538,
        "endChar": 62
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96c3c215_abdb42c7",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 538,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb065c10_d704478b",
      "range": {
        "startLine": 538,
        "startChar": 61,
        "endLine": 538,
        "endChar": 62
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3f50e65_8a71b8f8",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 557,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "Please move these comments to the header file.",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 557,
        "endChar": 67
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b176fe74_377501d0",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 557,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3f50e65_8a71b8f8",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 557,
        "endChar": 67
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bfa8ad0_c8089a28",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "Please add argument comment.",
      "range": {
        "startLine": 563,
        "startChar": 44,
        "endLine": 563,
        "endChar": 45
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56e704b4_c8be4b4a",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bfa8ad0_c8089a28",
      "range": {
        "startLine": 563,
        "startChar": 44,
        "endLine": 563,
        "endChar": 45
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b62036d_c0cb082d",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "In addition to this, I guess `current_offset` also has to be a multiple of the fs block size?",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 34
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86d5b392_2fcf26a8",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "That\u0027s true, to preserve the same sparsity in the output blocks as we have in the input blocks, both need to be aligned to the blocksize.\n\nWherever possible I am avoiding introducing further restrictions on the use of the copy function (a different offset alignment could even improve upon the sparsity present in the input file, depending on data layout), so I would probably not put this as an exit condition? It should certainly be noted at least, so I\u0027ve updated the header comments, PTAL!",
      "parentUuid": "7b62036d_c0cb082d",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 34
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15d99cc6_63abc3e2",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-03T18:59:46Z",
      "side": 1,
      "message": "Note that this is the offset of the output file, not the offset of the input file. Therefore, I think an unaligned offset leads to a net loss, regardless of the data layout (correct me if I\u0027m wrong). If `current_offset` is not aligned, then the behavior of `FdFile::UserspaceSparseCopy` won\u0027t make sense because it intends to operate on fs blocks.\n\nTo support an unaligned `current_offset`, you probably have to add one more `SparseWrite` to `FdFile::UserspaceSparseCopy`, in order to handle the leading bytes. However, I\u0027m not sure it\u0027s worth it, as all our use cases of `FdFile::Copy` copy data to an empty output file. Given this, I think it\u0027s fine to add one more restriction, for simplicity. I even think we should restrict `current_offset` to be exactly 0.",
      "parentUuid": "86d5b392_2fcf26a8",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 34
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cedb45b_e5d64b3b",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-04T10:46:40Z",
      "side": 1,
      "message": "I think there are (quite contrived!) cases where an unaligned output offset would have a positive impact on sparsity. For a small example: a 8KB input split into data (1) and holes (0) as 0110 (so 2 allocated 4KB blocks). When copying the entire file, if the destination offset is also 0 we would end with the same layout and 2 allocated (0 sparse) blocks, but if we set the destination offset to 2KB (not aligned), we would end with 1 allocated (1 sparse) blocks as 00110. The latter means our destination is larger than the source, which is a little strange but potentially acceptable (I note an earlier comment raising the possibility of copying as an append https://android-review.googlesource.com/c/platform/art/+/2968600/1..5/libartbase/base/unix_file/fd_file.cc#b555). Of course, if the input offset was not zero, the output offset would necessarily need to be different to keep that sparsity, so all three variables (input offset, output offset, data layout) are heavily dependent.\n\nMy view of UserspaceSparseCopy has been that it only iterates through the memory and skips zeroed blocks as a best effort - in theory we could skip/write each byte instead of each block and potentially allow for increased sparsity depending on where those zeroes are relative to where we are copying to.\n\nThis is because I wasn\u0027t necessarily guaranteeing that the resulting file will be sparse, instead only that the copy mechanism is sparse, as we can\u0027t control how the underlying filesystem will handle those skipped regions, or even that the filesystem will support sparsity at all.\n\nHowever, I completely agree that simplicity should be preferred. I\u0027m just hesistant that we might be decreasing simplicity by making UserspaceSparseCopy concern itself with where the user wants data to come from or go to.\n\nThe above is simply my general thoughts and somewhat academic considering the current uses cases are simple copy an entire file A to a new empty file B!\n\nAs for actions, I don\u0027t have a problem with constraining the function. As per the linked comment and the possibility of copying as an append, probably ensuring the output offset is aligned (rather than 0) is preferable, so I will do that in the upcoming PS unless I hear otherwise. Thanks!",
      "parentUuid": "15d99cc6_63abc3e2",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 34
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d22a6515_1b0de776",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-04T11:12:22Z",
      "side": 1,
      "message": "On further consideration of that toy example - I think you are right. As we always copy based on the input offset, it looks like it doesn\u0027t actually matter what the output data layout is, because we are writing the zeroes instead of skipping them. The example output \u0027should\u0027 have 1 sparse block, but would infact have 0. This would only be improved if we were to parse (write/skip) the memory at a finer granularity, e.g. in 2KB chunks for that example.\n\nTherefore, it seems with the current function there might indeed be no case where an unligned output offset would be better afterall.\n\nAnyway the plan is unchanged, I just wanted to confirm the above!",
      "parentUuid": "5cedb45b_e5d64b3b",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 34
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a57293be_9fc28c7e",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-04T12:47:59Z",
      "side": 1,
      "message": "Cool. Constraining the function to only accepting aligned output offset SGTM!",
      "parentUuid": "d22a6515_1b0de776",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 34
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8244e0c_95eda903",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 607,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "I think we should stat on the output file?\n```suggestion\n  int rc \u003d TEMP_FAILURE_RETRY(fstat(Fd(), \u0026input_stat));\n```",
      "range": {
        "startLine": 607,
        "startChar": 36,
        "endLine": 607,
        "endChar": 46
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02f38e8b_4cbdc6f5",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 607,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8244e0c_95eda903",
      "range": {
        "startLine": 607,
        "startChar": 36,
        "endLine": 607,
        "endChar": 46
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0360ff45_0385104e",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 608,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "Nit: inline this\n```suggestion\n  if (TEMP_FAILURE_RETRY(fstat(input_file-\u003eFd(), \u0026input_stat)) \u003c 0) {\n    return false;\n```",
      "range": {
        "startLine": 608,
        "startChar": 6,
        "endLine": 608,
        "endChar": 8
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36ab4dba_7ef6e856",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 608,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0360ff45_0385104e",
      "range": {
        "startLine": 608,
        "startChar": 6,
        "endLine": 608,
        "endChar": 8
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b92fa5b0_8fe20b9d",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 615,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "Handle this value in `UserspaceSparseCopy`?",
      "range": {
        "startLine": 615,
        "startChar": 8,
        "endLine": 615,
        "endChar": 20
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d12fe357_4b5b0040",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 615,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "With the mmap implementation we no longer need to set the input FD offset to be read() from.\n\nWe do however need to set the appropriate offset following the copy, which I\u0027ve now added to `UserspaceSparseCopy` as suggested.",
      "parentUuid": "b92fa5b0_8fe20b9d",
      "range": {
        "startLine": 615,
        "startChar": 8,
        "endLine": 615,
        "endChar": 20
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e29c62c2_8dba80e2",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 634,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "I think it\u0027s too complicated to have two for loops, one nested in another. Instead, can we process all data in one `UserspaceSparseCopy` call? You can mmap the input file to avoid `ReadFully`.",
      "range": {
        "startLine": 618,
        "startChar": 2,
        "endLine": 634,
        "endChar": 3
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47a19624_12d346a8",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 634,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Sounds reasonable - I have made this change.",
      "parentUuid": "e29c62c2_8dba80e2",
      "range": {
        "startLine": 618,
        "startChar": 2,
        "endLine": 634,
        "endChar": 3
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16766126_99c05f2a",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 635,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "blocks",
      "range": {
        "startLine": 635,
        "startChar": 22,
        "endLine": 635,
        "endChar": 27
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82ee2a67_3c0a96c8",
        "filename": "libartbase/base/unix_file/fd_file.cc",
        "patchSetId": 4
      },
      "lineNbr": 635,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16766126_99c05f2a",
      "range": {
        "startLine": 635,
        "startChar": 22,
        "endLine": 635,
        "endChar": 27
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3229d763_aa43b1ff",
        "filename": "libartbase/base/unix_file/fd_file.h",
        "patchSetId": 4
      },
      "lineNbr": 195,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-26T16:12:42Z",
      "side": 1,
      "message": "Add a comment to describe what the user is supposed to pass to this parameter.",
      "range": {
        "startLine": 195,
        "startChar": 47,
        "endLine": 195,
        "endChar": 53
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c77088d7_82217fc8",
        "filename": "libartbase/base/unix_file/fd_file.h",
        "patchSetId": 4
      },
      "lineNbr": 195,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-03T16:25:10Z",
      "side": 1,
      "message": "Done. It perhaps is a little clunky, but the alternative is to allocate an array on every call, or make a more complicated conditional (e.g. memcmp `data` with an offset version of itself), which both less desirable.",
      "parentUuid": "3229d763_aa43b1ff",
      "range": {
        "startLine": 195,
        "startChar": 47,
        "endLine": 195,
        "endChar": 53
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04312466_968da93a",
        "filename": "libartbase/base/unix_file/fd_file.h",
        "patchSetId": 4
      },
      "lineNbr": 195,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-03T18:59:46Z",
      "side": 1,
      "message": "Yes, I agree. That\u0027s why all I asked for is a comment. Thanks for adding it!",
      "parentUuid": "c77088d7_82217fc8",
      "range": {
        "startLine": 195,
        "startChar": 47,
        "endLine": 195,
        "endChar": 53
      },
      "revId": "16c10f393b3f9b13b92fcd0fa25ce08569c5f227",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}