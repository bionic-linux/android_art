{
  "comments": [
    {
      "key": {
        "uuid": "b713c6a3_3a3b9484",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 5
      },
      "lineNbr": 305,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-03-03T17:29:47Z",
      "side": 1,
      "message": "This means we install links to the JNI libs only when loading jars in our own APEX. That\u0027s different from the old approach where all classloader-namespaces get links to all APEXes\u0027 exported JNI libs.\n\nI suppose that\u0027s intentional, and it\u0027s great provided we a) can remove all the hardcoded cases, and b) still don\u0027t get compat issues with it. Is that the case? Note (a) applies to the ICU libs in the ART APEX itself too, because we plan to move ICU to a separate APEX.",
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "869a0e96_c49795f3",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 5
      },
      "lineNbr": 305,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2020-03-03T17:57:36Z",
      "side": 1,
      "message": "Yes, limiting the availability of JNI libs to only the same APEX is the intent. By the way, one thing I\u0027m not sure is whether there\u0027s any difference between jar and apk in an apex? Is classloader-namespace created APK as well? I hope that APEX namespace is linked to both cases.\n\nICU libs (and all libs in public.libraries.txt) might be generalized and we could remove hard-coded references. But it would require more information from linkerconfig. That would be the follow-up change.",
      "parentUuid": "b713c6a3_3a3b9484",
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94bd407c_b67d7682",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 5
      },
      "lineNbr": 305,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-03-03T19:09:43Z",
      "side": 1,
      "message": "Good questions, I\u0027ve no idea what APKs in APEXes look like.\n\n\u003e ... That would be the follow-up change.\n\nOk, I\u0027m all for it as long as we think this approach will work, rather than something that iterates over all the APEXes with JNI libs.\n\nI suggest adding a comment here to spell it out more clearly.",
      "parentUuid": "869a0e96_c49795f3",
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd563b0c_f5b2f39b",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 5
      },
      "lineNbr": 388,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-03-03T17:29:47Z",
      "side": 1,
      "message": "const std::string_view here to avoid a string copy in calls from FindExportedNamespace.",
      "range": {
        "startLine": 388,
        "startChar": 48,
        "endLine": 388,
        "endChar": 66
      },
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9ea193e_c7c17838",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 5
      },
      "lineNbr": 388,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2020-03-03T18:53:35Z",
      "side": 1,
      "message": "I tried it but result was not good as expected because of the LOG() line.\nstring_view is not supposed to be used as const char*, which requires constructing std::string for printing.\n\nI don\u0027t think this is a big deal.",
      "parentUuid": "fd563b0c_f5b2f39b",
      "range": {
        "startLine": 388,
        "startChar": 48,
        "endLine": 388,
        "endChar": 66
      },
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78d6b85c_f65395ae",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 5
      },
      "lineNbr": 388,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-03-03T19:09:43Z",
      "side": 1,
      "message": "Aha, that\u0027s a pity. Strictly speaking data() would work since we know the source is null terminated, but it wouldn\u0027t be pretty.",
      "parentUuid": "c9ea193e_c7c17838",
      "range": {
        "startLine": 388,
        "startChar": 48,
        "endLine": 388,
        "endChar": 66
      },
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbbc6756_da7db802",
        "filename": "libnativeloader/public_libraries.cpp",
        "patchSetId": 5
      },
      "lineNbr": 318,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-03-03T17:29:47Z",
      "side": 1,
      "message": "A few unit tests for this to exercise the format of jni.config.txt would be nice.",
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f25a7b03_55f6a5db",
        "filename": "libnativeloader/public_libraries.cpp",
        "patchSetId": 5
      },
      "lineNbr": 318,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2020-03-03T17:57:36Z",
      "side": 1,
      "message": "Sure, I will.",
      "parentUuid": "bbbc6756_da7db802",
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a11cc3ab_68c59955",
        "filename": "libnativeloader/public_libraries.cpp",
        "patchSetId": 5
      },
      "lineNbr": 318,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2020-03-03T18:53:35Z",
      "side": 1,
      "message": "Done. just basic parsing tests. more elaborated tests about linking namespaces might be required. I\u0027ll try it in a future cl.",
      "parentUuid": "f25a7b03_55f6a5db",
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa23ad14_19ed2bf1",
        "filename": "libnativeloader/public_libraries.cpp",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-03-03T17:29:47Z",
      "side": 1,
      "message": "Consider making this \u003c, just in case we\u0027d like to extend the format for some reason in the future.",
      "range": {
        "startLine": 333,
        "startChar": 38,
        "endLine": 333,
        "endChar": 40
      },
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18d3d59b_b3c50f35",
        "filename": "libnativeloader/public_libraries.cpp",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2020-03-03T17:57:36Z",
      "side": 1,
      "message": "I thought both ways and chose to be specific, at least for now. I\u0027d like to rely on tight-coupling, which reveals programming errors in a clear way.",
      "parentUuid": "fa23ad14_19ed2bf1",
      "range": {
        "startLine": 333,
        "startChar": 38,
        "endLine": 333,
        "endChar": 40
      },
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "811efb3d_a66507d6",
        "filename": "libnativeloader/public_libraries.cpp",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2020-03-03T18:53:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18d3d59b_b3c50f35",
      "range": {
        "startLine": 333,
        "startChar": 38,
        "endLine": 333,
        "endChar": 40
      },
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a7ea195_136ae8db",
        "filename": "libnativeloader/public_libraries.cpp",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-03-03T19:09:43Z",
      "side": 1,
      "message": "A risk is that we forget to revisit it before linkerconfig becomes updatable, especially if that were to happen while ART still isn\u0027t (unlikely though that might be). But I see you changed anyway, thanks.",
      "parentUuid": "18d3d59b_b3c50f35",
      "range": {
        "startLine": 333,
        "startChar": 38,
        "endLine": 333,
        "endChar": 40
      },
      "revId": "28c8bf854476fa80244fc5a0b70fc51774f2aa20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}