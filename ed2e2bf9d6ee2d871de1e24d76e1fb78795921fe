{
  "comments": [
    {
      "key": {
        "uuid": "1867e20f_5bb4d722",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 866,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-07-10T10:40:26Z",
      "side": 1,
      "message": "An alternative could be to use Thumb2Assembler::CompareAndBranchIfZero instead of Thumb2Assembler::cbz.",
      "range": {
        "startLine": 866,
        "startChar": 3,
        "endLine": 866,
        "endChar": 86
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_e4e762d3",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 866,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-07-10T11:17:58Z",
      "side": 1,
      "message": "There is a trade-off between how much do we gain by forcing CBZ and how much do we lose by placing this restriction on the register allocation. I\u0027d expect a negligible difference.",
      "parentUuid": "1867e20f_5bb4d722",
      "range": {
        "startLine": 866,
        "startChar": 3,
        "endLine": 866,
        "endChar": 86
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1867e20f_9bd10f43",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 890,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-07-10T11:17:58Z",
      "side": 1,
      "message": "Uint32Value()",
      "range": {
        "startLine": 890,
        "startChar": 62,
        "endLine": 890,
        "endChar": 74
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_823f6a76",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 899,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-07-10T11:17:58Z",
      "side": 1,
      "message": "__ CompareAndBranchIfZero(arg, \u0026return_false)",
      "range": {
        "startLine": 898,
        "startChar": 0,
        "endLine": 899,
        "endChar": 26
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_020a5ad8",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 924,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-07-10T10:40:26Z",
      "side": 1,
      "message": "Use IsAligned from runtime/base/bit_utils.h.",
      "range": {
        "startLine": 924,
        "startChar": 12,
        "endLine": 924,
        "endChar": 42
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_71ce905a",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 925,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-07-10T10:40:26Z",
      "side": 1,
      "message": "Ditto (and turn it into a static_assertion).",
      "range": {
        "startLine": 925,
        "startChar": 12,
        "endLine": 925,
        "endChar": 46
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_f445e0c8",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 927,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-07-10T10:40:26Z",
      "side": 1,
      "message": "\"plus the length of the string in bytes (so twice the number of UTF-16 characters)\"?",
      "range": {
        "startLine": 927,
        "startChar": 35,
        "endLine": 927,
        "endChar": 64
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_d429bc16",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 930,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-07-10T10:40:26Z",
      "side": 1,
      "message": "Move this comment before line 932?",
      "range": {
        "startLine": 930,
        "startChar": 2,
        "endLine": 930,
        "endChar": 59
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1867e20f_5bddb750",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 931,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-07-10T10:40:26Z",
      "side": 1,
      "message": "Maybe add a comment before this line to explain that `temp1` is reset one position (\u003d two bytes in an UTF-16-encoded string) backward to the offset of the last character of the string?\n\nAlso, shouldn\u0027t you also check that the length (`temp`) is not 0 before doing this?  (In other words, shouldn\u0027t lines 937 and 938 be moved before line 931?)",
      "range": {
        "startLine": 931,
        "startChar": 2,
        "endLine": 931,
        "endChar": 42
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_31f12891",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 935,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-07-10T10:40:26Z",
      "side": 1,
      "message": "handled?",
      "range": {
        "startLine": 935,
        "startChar": 71,
        "endLine": 935,
        "endChar": 79
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1867e20f_fb604b05",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 938,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-07-10T11:17:58Z",
      "side": 1,
      "message": "LS (you still need to compare the first 2 characters if EQ)\n\nAnd since you don\u0027t need to compare during the first iteration, you can move this to the end of the loop, avoiding one unconditional branch.",
      "range": {
        "startLine": 938,
        "startChar": 21,
        "endLine": 938,
        "endChar": 23
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_f4a160f8",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 5
      },
      "lineNbr": 941,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-07-10T11:24:47Z",
      "side": 1,
      "message": "Requires Location::kNoOutputOverlap for \"out\".",
      "range": {
        "startLine": 939,
        "startChar": 0,
        "endLine": 941,
        "endChar": 36
      },
      "revId": "ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}