{
  "comments": [
    {
      "key": {
        "uuid": "68cda636_26cc7d44",
        "filename": "compiler/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-03-21T12:05:47Z",
      "side": 1,
      "message": "Names are lexicographically sorted. \"optimizing/iv_simplifier.cc\" must be after \"optimizing/intrinsics.cc\".",
      "range": {
        "startLine": 76,
        "startChar": 8,
        "endLine": 76,
        "endChar": 38
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebb45fca_d469ee95",
        "filename": "compiler/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-03-21T12:05:47Z",
      "side": 1,
      "message": "It is already specified at line 64.",
      "range": {
        "startLine": 77,
        "startChar": 8,
        "endLine": 77,
        "endChar": 32
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10cdd24d_d34d8178",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-03-21T12:05:47Z",
      "side": 1,
      "message": "It must be the current year, 2019.",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "514a04f7_64028d21",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:44:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10cdd24d_d34d8178",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "601f195c_79f39ed6",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "Here and elsewhere in the CL: please could you pay more attention to the code style and indentation (https://google.github.io/styleguide/cppguide.html).",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "178aab13_e7f68740",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:01:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "601f195c_79f39ed6",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f982f5c_3d02cce6",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "here and elsewhere: commented out code.",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 134,
        "endChar": 123
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c16a0b9_8df0bc04",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:01:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f982f5c_3d02cce6",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 134,
        "endChar": 123
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5e0b3d6_b0414b50",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:44:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c16a0b9_8df0bc04",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 134,
        "endChar": 123
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fef2caa_a57372ea",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 289,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "ART specific containers with arena allocator should be used.",
      "range": {
        "startLine": 289,
        "startChar": 2,
        "endLine": 289,
        "endChar": 10
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e479e2c_04c5fac8",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 289,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:01:59Z",
      "side": 1,
      "message": "Done. Used ArenaSafeMap.",
      "parentUuid": "0fef2caa_a57372ea",
      "range": {
        "startLine": 289,
        "startChar": 2,
        "endLine": 289,
        "endChar": 10
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5503a63d_728df4dd",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "There is a lot of patterns like \"if (something ) return false;\" in the code; could you describe in one place as a comment for which type of loops the optimization is applied?\n\nSomething like:\nLoops with \u003cthis\u003e CFG structure, which have only \u003cthis\u003e operations in the body, etc.",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac04bc98_dc3cb869",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:37:21Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "5503a63d_728df4dd",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "415b7ec4_764ce677",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "It seems the traversing the loop instructions might be non-optimal: you visit instructions over and over again, check the loop header structure type (which is invariant) in a loop.",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19c49a1c_f12c0367",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:37:21Z",
      "side": 1,
      "message": "For each phi which is a basic induction variable in the header, I\u0027m checking for a pair \u003cphi, ins\u003e where ins is instruction in the loop body if the pair is a candidate for this optimization. So, for each basic induction variable, I\u0027ll be visiting all  the instructions, which are binary operations in the loop.",
      "parentUuid": "415b7ec4_764ce677",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ae8a5aa_481f27ae",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-25T19:15:16Z",
      "side": 1,
      "message": "Could you briefly describe the algorithm separately from the code?  \n\nfor example: why don\u0027t you traverse the induction phi\u0027s users instead?",
      "parentUuid": "19c49a1c_f12c0367",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "972b91d7_f211b7a1",
        "filename": "compiler/optimizing/iv_simplifier.cc",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-26T14:37:46Z",
      "side": 1,
      "message": "Strength Reduction In Induction Variables\nAlgorithm: Main Modules\n \nFor-each phi in the header, \nS1) CheckPhiCandidate() - Find out if a phi is a basic induction        variable\nPhi must have 2 inputs\nIt should be a basic induction variable i.e, loop condition must be based on this phi\nIt should be incremented by a constant amount\n For-each instruction in the loop blocks,\nS2) IsCandidateForReduction(to_check, phi) - populates the candidate map\nto_check - instruction to check\nphi - the basic induction variable\nCandidate Map: Contains entries pertaining to derived induction variables denoted in the form of a tuple \u003ci, a, b\u003e for derived induction variable j \u003d i*a+b where i is the basic induction variable.\nFor addition operation, one operand must be a member of SCC and the other must be constant\nFor Subtraction operation, left operand must be a member of the SCC and the other must be a constant\nFor multiplication, one operand must be a phi and other must be a  constant\nIf the above criterion is satisfied, we put an entry in the candidate map as follows for example if i is a basic induction variable and there is a statement in the loop as j \u003d c*i, then an entry is placed in the map [ j, \u003ci, c, 0\u003e ] and for j\u003d j+c, an entry is placed as [j,\u003ci,1,c\u003e].\nHigh level algorithm for above function is given below:\n\n \n\nfor each basic induction variable i,\nfor each variable k with a single assignment to k within L, of the form k \u003d j ± b or k \u003d j * b where b is a constant, j is an induction variable,\ndo {\nif (j is a basic i.v.) {\n   then associate to k, the triple (j,1,±b) in the ﬁrst case and (j,b,0) in the second case.\n} \nelse {\n // j is a derived induction variable\n let j be associated with the triple (i,c,d) \n associate (i,c,d±b) with k in the ﬁrst case and (i,b*c,b*d) in the second case \n}\n\nS3) PerformReduction()- Remove Multiplication from the loop\n For each entry in the candidate map,\u003cj, \u003ci, a, b\u003e\u003e\nInsert into the preheader s \u003d a*i+b;\nReplace the definition of j in loop with j\u003d s\nImmediately after biv_increment statement, insert s\u003ds+a*c.",
      "parentUuid": "1ae8a5aa_481f27ae",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ee4e837_785713d6",
        "filename": "compiler/optimizing/iv_simplifier.h",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-03-21T12:05:47Z",
      "side": 1,
      "message": "It must be the current year, 2019.",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d1e8c3a_99211579",
        "filename": "compiler/optimizing/iv_simplifier.h",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:01:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ee4e837_785713d6",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "925c9293_91d8ab8a",
        "filename": "compiler/optimizing/iv_simplifier.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "Please provide a highlevel comment on the class: overview of the algorithm, links \u0026 references.",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69f37e4f_c680c4c4",
        "filename": "compiler/optimizing/iv_simplifier.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-03-21T14:15:48Z",
      "side": 1,
      "message": "I also suggest using induction variable strength reduction in naming instead of simplification to highlight the intent of the optimization pass. Induction variable simplification is usually a set of optimizations, where strength reduction is one of them.\n\nBefore reviewing the implementation it\u0027s worth to discuss the motivation of the optimization (use cases, benchmarking results etc.), requirements and the design of the optimization pass. This will help to understand whether you are trying to optimize common cases or only some particular cases.",
      "parentUuid": "925c9293_91d8ab8a",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e4c10c7_8f90654d",
        "filename": "compiler/optimizing/iv_simplifier.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:01:59Z",
      "side": 1,
      "message": "Hi,\nThank you. Is IvStrengthReduction fine ? \n\nMotivation: A common use case of operator strength reduction is to replace multiplication with addition. In this optimization, we target replacing multiplications involving basic induction variables in loops with their addition equivalents.\n\nLink for idea of the optimization : https://www.cs.cmu.edu/afs/cs/academic/class/15745-s16/www/lectures/L10-Strength-Reduction.pdf\n\nBenchmark Results: \nBinarytrees - 9% improvement \nChameneosredux - 9% improvemnt\n\nAnd is there any way I can upload a document here ? If so please let me know.",
      "parentUuid": "69f37e4f_c680c4c4",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff895c6c_e8f56498",
        "filename": "compiler/optimizing/iv_simplifier.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-25T19:15:16Z",
      "side": 1,
      "message": "1. In the link you have shared there is only one slide about the \"Strength reduction\" which doesn\u0027t give mush information. Could you point to a white paper / book or similar? This will help people to easily agree on naming, algorithm and implementation details.\n\n2. Could you provide more data on benchmarking results, e.g.:\n  - Not only top improvements but geomean/S-curve, any performance degradations.\n  - code size impact.\n  - compile time impact.",
      "parentUuid": "0e4c10c7_8f90654d",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce99df79_f96b8868",
        "filename": "compiler/optimizing/iv_simplifier.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-26T14:37:46Z",
      "side": 1,
      "message": "Hi,\n1. Unfortunately, I could not find any white paper for this optimization. Got the idea from the classroom lecture of link shared in above comment. \n2.I did not evaluate code size impact and compile time.\nThese are the benchmarks that we ran for evaluation.\nBenchmark Name\t        \tResult %\t\nSPECjvm2008-1T\t\n        compiler.compiler\t1.01\t\n\tcompiler.sunflow\t0.08\t\n\tcompress\t        -0.53\t\n\tcrypto.aes\t        0.04\t\n\tcrypto.rsa\t        -0.06\t\n\tcrypto.signverify\t0.09\t\n\tmpegaudio\t        -0.03\t\n\tscimark.fft.small\t0.2\t\n\tscimark.fft.large\t-5.4\t(varinace\u003d3.8%)\n\tscimark.lu.small\t0.35\t\n\tscimark.lu.large\t0\t\n\tscimark_montecarlo\t0\t\n\tscimark.sor.small\t-0.04\t\n\tscimark.sor.large\t-0.34\t\n\tscimark.sparse.small\t0.1\t\n\tscimark.sparse.large\t0.09\t\n\tserial\t                0.45\t\n\tsunflow\t                0.83\t\n\txml.transform\t        -1.19\t\n\txml.validation\t        2.29\t\nSPECjvm2008-4T\t\n        compiler.compiler\t-0.16\t\n\tcompiler.sunflow\t1.7\t\n\tcompress\t        0.32\t\n\tcrypto.aes\t        -0.06\t\n\tcrypto.rsa\t        -0.02\t\n\tcrypto.signverify\t 0.17\t\n\tmpegaudio\t         0.12\t\n\tscimark.fft.small\t-0.05\t\n\tscimark.fft.large\t-7.28\t\n\tscimark.lu.small\t0\t\n\tscimark.lu.large\t1.43\t\n\tscimark_montecarlo\t0\t\n\tscimark.sor.small\t0.01\t\n\tscimark.sor.large\t0.24\t\n\tscimark.sparse.small\t0.04\t\n\tscimark.sparse.large\t-1.63\t\n\tserial\t                 0.02\t\n\tsunflow\t                 0.72\t\n\txml.transform\t         0.06\t\n\txml.validation\t         -0.35\t\nDhrystone\t\t         -0.98\t(variance\u003d2.1%)\nJGF\t\n        ArithRuntime\t         0.01\t\n\tCastRuntime\t         0\t\n\tMathRuntime\t        -0.02\t\nBinary Trees\t\t        10\t\nChameneosredux\t\t        10\t\nMandleBrot\t\t        1.19\t\nSpecJbb2005\t\t        0.76\t\nVellamo-3.2.6\t\n        Browser\t                -0.74\t\n\tMetal\t                0.16\t\n\tMultiCore\t        -1.37\t\nAnTuTu-6.1.4\t\t        -0.37",
      "parentUuid": "ff895c6c_e8f56498",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa8e64df_726c2d38",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 3
      },
      "lineNbr": 785,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2019-03-21T13:14:35Z",
      "side": 1,
      "message": "Could you please explain why you put loop optimizations in this order?",
      "range": {
        "startLine": 777,
        "startChar": 0,
        "endLine": 785,
        "endChar": 14
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48838fac_d912c539",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 3
      },
      "lineNbr": 785,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T09:01:59Z",
      "side": 1,
      "message": "If a trivial loop can be evaluated using TryOptimizeInnerLoopFinite(node), then this optimization is not required. If it is not a trivial loop and cannot be eliminated, then we give chance for InductionVarSimplifictaion(). After InductionVarSimplification, the loop can become trivial, so we give chance to TryOptimizeInnerLoop() or PeelingAndUnrolling(). If InductionVarSimplification() was not able to simplify, then we run PeelingAndUnrolling() as it was before",
      "parentUuid": "fa8e64df_726c2d38",
      "range": {
        "startLine": 777,
        "startChar": 0,
        "endLine": 785,
        "endChar": 14
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c39b700b_31b967bc",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 3
      },
      "lineNbr": 785,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-25T19:15:16Z",
      "side": 1,
      "message": "Are you sure that it is safe to call TryOptimizeInnerLoopFinite again after called itself and after TryInductionVarSimplification? that you don\u0027t need to adjust some info, e.g. induction analysis info?",
      "parentUuid": "48838fac_d912c539",
      "range": {
        "startLine": 777,
        "startChar": 0,
        "endLine": 785,
        "endChar": 14
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87e804ca_afce33b0",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 3
      },
      "lineNbr": 785,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-26T14:37:46Z",
      "side": 1,
      "message": "It is safe because \n1. We are calling TryOptimizeInnerLoopFinite() second time only if the loop structure was not simplified the first time. If it was an empty or a trivial loop whose subsequent index uses can be replaced with the last value and loop can be removed possibly after unrolling its body, we anyway are not calling TryOptimizeInnerLoopFinite() or TryInductionVarSimplification() for the second time.\n2. InductionVarSimplification() does not affect the trip count of the loop and  other basic properties which are used by peeling and unrolling such as instr_num_, bb_num_, invariant_exits_num_, exits_num_ are anyway being calculated in loop_analysis::CalculateLoopBasicProperties(). So I thought, we need not compute induction analysis info again for the loop. But to be on the safer side, I will recompute the induction analysis info.\n3. In the other case where the InductionVarSimplification() was unsuccessful, flow remains the same.",
      "parentUuid": "c39b700b_31b967bc",
      "range": {
        "startLine": 777,
        "startChar": 0,
        "endLine": 785,
        "endChar": 14
      },
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e092cbe_a84b74ec",
        "filename": "test/000-checker-ind-var-ele/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "Here and below: please describe data flow for the checker - instruction arguments.",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ac26142_0961e892",
        "filename": "test/000-checker-ind-var-ele/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T10:53:14Z",
      "side": 1,
      "message": "Sorry I did not understand. I wanted to convey with this checker that before this optimization, there was MUL inside loop and after this optimization and dead code elimination, the MUL inside loop gets eliminated. Can you please tell me what is the data flow for checker arguments that I need to add?",
      "parentUuid": "0e092cbe_a84b74ec",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dbd1a9d_88e8058f",
        "filename": "test/000-checker-ind-var-ele/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-25T19:15:16Z",
      "side": 1,
      "message": "I just suggested to describe the test in more details by specifying the regexp arguments for those Adds and Muls, like you did here \"Add [\u003c\u003cPhi2\u003e\u003e,\u003c\u003cInc2\u003e\u003e]\".",
      "parentUuid": "6ac26142_0961e892",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32517f01_2ba17257",
        "filename": "test/000-checker-ind-var-ele/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-21T13:56:34Z",
      "side": 1,
      "message": "This transformation is illegal as java implements strict IEEE 754; floating point operations are not associative/distributive.",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c4686d_d85f8f0c",
        "filename": "test/000-checker-ind-var-ele/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2019-03-22T10:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32517f01_2ba17257",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0664c157_d07e540f",
        "filename": "test/000-checker-ind-var-ele/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-03-25T19:15:16Z",
      "side": 1,
      "message": "I mean that your transformation must not be applied for floating point types.",
      "parentUuid": "b7c4686d_d85f8f0c",
      "revId": "73f52e73d627dc6f3dce21bc0a3879c12cdacc66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}