{
  "comments": [
    {
      "key": {
        "uuid": "8f9e016b_7d372214",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-14T08:57:08Z",
      "side": 1,
      "message": "There\u0027s an issue with using native argument convention disagree with the implied location of GPRs from the core spill mask. It leads to this messy interwoven pushes and the GprIndexToGprOffset routine in the quick argument visitor.",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 81
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f9e016b_90210d86",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-02-14T13:55:31Z",
      "side": 1,
      "message": "Do you have a better suggestion?  Is the messiness hidden in a couple of routines that aren\u0027t generally visible?",
      "parentUuid": "8f9e016b_7d372214",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 81
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf26394f_7645ae88",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-18T05:33:13Z",
      "side": 1,
      "message": "I think the main places are the FillInCalleeSaves routine in Context and the quick argument visitor. I think for the sake of my sanity I\u0027ll handle the irregular layout in the argument visitor and the FillInCalleeSaves will just scan numerically.",
      "parentUuid": "8f9e016b_90210d86",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 81
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef13fd9e_90a6515c",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-02-14T13:55:31Z",
      "side": 1,
      "message": "Wasn\u0027t Method* being passed in RAX (arg0)?",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f8b8d70_96314c09",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-18T05:33:13Z",
      "side": 1,
      "message": "So this is a bridge, the incoming method is in RDI (unless you want to add RAX as another argument register?) this code is placing the callee save method (to describe the spilt arguments and callee saves) on to the stack. The same code is performed in FinishCalleeSaveFrameSetup, but I\u0027d like to remove that code as it will cut down on the number of arguments being passed and some messy argument stomping problems.",
      "parentUuid": "ef13fd9e_90a6515c",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cff8f9d4_a37e7af4",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-02-15T21:04:01Z",
      "side": 1,
      "message": "The macro could take shorty and arg_array registers as arguments. That would make it easier to read at the call site.",
      "range": {
        "startLine": 234,
        "startChar": 73,
        "endLine": 234,
        "endChar": 76
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f9e016b_b0253191",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-02-14T13:55:31Z",
      "side": 1,
      "message": "comment: arg_array+\u003d2 ??",
      "range": {
        "startLine": 261,
        "startChar": 34,
        "endLine": 261,
        "endChar": 48
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef577db2_04de962e",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-19T03:34:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f9e016b_b0253191",
      "range": {
        "startLine": 261,
        "startChar": 34,
        "endLine": 261,
        "endChar": 48
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f9e016b_f02fb96a",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 302,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-02-14T13:55:31Z",
      "side": 1,
      "message": "rcx?   I am also uncertain about movl r10q vs. movq r10.",
      "range": {
        "startLine": 302,
        "startChar": 17,
        "endLine": 302,
        "endChar": 18
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef577db2_c4d2bef1",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 302,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-19T03:34:13Z",
      "side": 1,
      "message": "So my possibly broken belief is that movl and movq perform about the same, but movl can sometimes avoid a REX prefix (not in this case as I\u0027m using r10). There aren\u0027t partial register penalties. I preferred the movl here as I don\u0027t expect \u003e4GB of arguments :-)",
      "parentUuid": "8f9e016b_f02fb96a",
      "range": {
        "startLine": 302,
        "startChar": 17,
        "endLine": 302,
        "endChar": 18
      },
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cff8f9d4_83837ea8",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-02-15T21:04:01Z",
      "side": 1,
      "message": "You can move this movq lower down.",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef7e9d24_4cd4bf10",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-19T03:34:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cff8f9d4_83837ea8",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f9e016b_303b01b2",
        "filename": "runtime/entrypoints/quick/quick_trampoline_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-02-14T13:55:31Z",
      "side": 1,
      "message": "Is it better to have an array and a range check?",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf26394f_d63cc2f9",
        "filename": "runtime/entrypoints/quick/quick_trampoline_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-18T05:33:13Z",
      "side": 1,
      "message": "Yep, this was a first cut and the arguments are not yet getting passed correctly.",
      "parentUuid": "8f9e016b_303b01b2",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f9e016b_703589ba",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 1492,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-02-14T13:55:31Z",
      "side": 1,
      "message": "Seems like this could be optimized to choosing 0 or 8, and not bothering with the popcount.",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef293d20_172b16aa",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 1492,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-18T05:33:13Z",
      "side": 1,
      "message": "Its more about the readability, we should only ever create these methods when we create the boot image.",
      "parentUuid": "8f9e016b_703589ba",
      "revId": "3cdc8b7712498e9a3b6d47fad5e5956694024d6c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}