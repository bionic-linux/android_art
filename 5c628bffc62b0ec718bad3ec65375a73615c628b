{
  "comments": [
    {
      "key": {
        "uuid": "8b5ca306_87d33060",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-11T14:07:49Z",
      "side": 1,
      "message": "We should also make it clear in the comment it\u0027s in the loop header only. Since other loop blocks may not be executed. Loop header also rules out that the can-throw instruction can move in front of a try boundary within the loop, since try boundary introduces additional blocks so the can-throw instruction can\u0027t be in the loop header. So it rules out something like:\ntry {\n  int i \u003d 0;\n  do {\n    try {\n      i \u003d 1;    // even though there is no field store, following NullCheck should not be hoisted.\n    } catch(Exception e) {}\n  } while (arr.length \u003c 10)\n} catch (Exception e) {}",
      "revId": "5c628bffc62b0ec718bad3ec65375a73615c628b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b5ca306_e7130c3c",
        "filename": "compiler/optimizing/licm.cc",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-11T14:16:04Z",
      "side": 1,
      "message": "Actually if we have:\ni \u003d 0;\ntry {\n  do {\n      i \u003d 1;    // even though there is no field store, following NullCheck should not be hoisted.\n  } while (arr.length \u003c 10)\n} catch (Exception e) {}\n\nThat still doesn\u0027t look right. Do we guard against this case? Looks like the whole thing can\u0027t be in a try block.",
      "parentUuid": "8b5ca306_87d33060",
      "revId": "5c628bffc62b0ec718bad3ec65375a73615c628b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bf54bfd_fe2581c7",
        "filename": "test/625-checker-licm-regressions/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-11-11T10:37:00Z",
      "side": 1,
      "message": "This test isn\u0027t very future-proof. The StaticFieldSet could be hoisted and then the NullCheck+ArrayLength would be hoisted as well. Maybe we should add something like \"j \u003d (j+3)^2\" and change the store to \"sA \u003d j\".",
      "revId": "5c628bffc62b0ec718bad3ec65375a73615c628b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b5ca306_47c918b2",
        "filename": "test/625-checker-licm-regressions/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-11-11T14:07:49Z",
      "side": 1,
      "message": "StaticFieldSet can\u0027t move so it won\u0027t be hoisted.\nI tried yesterday to have other patterns and it\u0027s quite difficult to allow the NullCheck to be hoisted since it\u0027s easy to introduce loop_effects that NullCheck depends on.",
      "parentUuid": "4bf54bfd_fe2581c7",
      "revId": "5c628bffc62b0ec718bad3ec65375a73615c628b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}