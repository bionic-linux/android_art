{
  "comments": [
    {
      "key": {
        "uuid": "03d10a3f_692a8dab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Would it be safe/possible to embed class pointers into compiled code (eg, for faster allocation paths) after this change?\n\nThe classes that are in the image file don\u0027t move and can be embedded, I suppose.\n\nRelated factors are:\n\n- We don\u0027t currently scan compiled code for roots at a GC (which we could in theory.)\n\n- The current way of ahead-of-time compilation precludes embedding pointers to classes that are not created at image creation time, without patching the compiled code (which we don\u0027t want to do.)",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_dee71454",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "It should be possible before too, but you can only do that for classes that are in the image. It would require adding a bunch more entrypoints.",
      "parentUuid": "03d10a3f_692a8dab",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_bdbb43ca",
        "filename": "compiler/image_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 160,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Would it be reasonable to expect that the klass is outside the image in the else block here?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_e3135cb7",
        "filename": "compiler/image_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 160,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "What do you mean by block?",
      "parentUuid": "e3cdd6a7_bdbb43ca",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3df5e7e_054f3481",
        "filename": "compiler/image_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 160,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-07T00:29:57Z",
      "side": 1,
      "message": "I mean, would it make sense to add an else block to the if statement in line 156 and insert EXPECT(...) that asserts the \u0027klass\u0027 is outside of the image if it\u0027s not an image class, that is, something like:\n\nif (image_classes.find(descriptor) !\u003d image_classes.end()) {\n  // Image classes should be located inside the image. \n  EXPECT_LT(image_begin, reinterpret_cast\u003cbyte*\u003e(klass)) \u003c\u003c descriptor;\n  EXPECT_LT(reinterpret_cast\u003cbyte*\u003e(klass), image_end) \u003c\u003c descriptor;\n} else {\n  EXPECT_LE(image_end, reinterpret_cast\u003cbyte*\u003e(klass)) \u003c\u003c descriptor;\n  EXPECT_LT(reinterpret_cast\u003cbyte*\u003e(klass), image_begin) \u003c\u003c descriptor;\n}\n\n?",
      "parentUuid": "e3cdd6a7_e3135cb7",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23f36e1c_e1f200c6",
        "filename": "compiler/image_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 160,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-11T00:01:33Z",
      "side": 1,
      "message": "Done, though what we want is \u003c image || \u003e\u003d image.",
      "parentUuid": "a3df5e7e_054f3481",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_3da97374",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1137,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Was this fixing an oversight that it needed an exclusive lock here, or is this so because we move classes?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_a30d6490",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1137,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Since we are modifying the data structure when objects get moved, its probably good to have a WriterMutex. Before we didn\u0027t have one which happened to work since we never moved classes.",
      "parentUuid": "e3cdd6a7_3da97374",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_aaf41742",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1286,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Would it make sense to let EnsureResolved to take a SirtRef as well as (or instead of) a raw Class* a la EnsureInitialized?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_eb29f119",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1286,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Considered doing that, but the usage is always\nreturn EnsureResolved(...). So no point in having a SirtRef as the input parameter.",
      "parentUuid": "23d44e2d_aaf41742",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_8a8cbbda",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1303,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Is this down_cast necessary?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_2bf7e973",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1303,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Deleted.",
      "parentUuid": "23d44e2d_8a8cbbda",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_c41f4841",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2428,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "The same comment on using const reference if it\u0027s an in parameter (not modified).",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_5e2ae491",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2428,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d10a3f_c41f4841",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_1d5477b0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2974,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "const reference for the \u0027klass\u0027 parameter or use a pointer if it\u0027s modified?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_1e558c14",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2974,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3cdd6a7_1d5477b0",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_043f80a1",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3179,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "a const reference or a pointer?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_23af1411",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3179,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d10a3f_043f80a1",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_4ab2237d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3229,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Optional: using shorter names might make it a bit cleaner such as loader1, loader2, or cl1, cl2. Up to you.",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_832dc8c3",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3229,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23d44e2d_4ab2237d",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_244a7c3c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3256,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Update the comment by replacing klass1 -\u003e class_loader1 and klass2 -\u003e class_loader2?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_3e6e08d4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3256,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d10a3f_244a7c3c",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_7df00b7d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3266,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Optional: not necessary, but for symmetry, wrap found2 in a SirtRef like found1?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_ded15440",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3266,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "I considered that, but I figure no reason to add extra SirtRefs.",
      "parentUuid": "e3cdd6a7_7df00b7d",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_7d192b03",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3275,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Is the intention to rename can_init_parents to can_run_clinit and reorder the two bool parameters?\n\nIt seems odd that can_init_fields is passed as the 3rd param to the other EnsureInitialized which has its 2nd param named can_init_fields? Any bug here?\n\nOn a related note, we should probably match the param names with the .h file (the SirtRef version of EnsureInitialized().)\n\nFinally, do we still need the raw Class* version of EnsureInitialized(), not that I checked all the call site?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83e41a52_24507cef",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3275,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-07T00:29:57Z",
      "side": 1,
      "message": "I believe this comment is addressed. Right?",
      "parentUuid": "e3cdd6a7_7d192b03",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23f36e1c_41d81440",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3275,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-11T00:01:33Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "83e41a52_24507cef",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_dd9f1f4a",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3278,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "I think if a reference is used as a parameter, it should be const and an in parameter. If it\u0027s modified, then it should be a pointer, as per the style guide.",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_eee22346",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3278,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done, I fixed all of these up in the current file.",
      "parentUuid": "e3cdd6a7_dd9f1f4a",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43eea235_1fce63f1",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3278,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-07T00:29:57Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "e3cdd6a7_eee22346",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_2a9da7d4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3302,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "We are only moving classes, not fields with this CL? Is the plan to move fields as well in the future?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_bef218c5",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3302,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Supporting moving fields would add a lot of a code and there are some performance concerns for the jfieldID + jmethodID.",
      "parentUuid": "23d44e2d_2a9da7d4",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_ca599377",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3549,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "I think the lifetime of ClassHelper is shortened compared to the original code by putting into a nested block since ClassHelper does not use SirtRef internally. Have you considered letting ClassHelper use SirtRef internally now that we may move classes?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_0eb1df14",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 3549,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "I think it may be worth moving the class helper functionality directly into the class.h structure in the future.",
      "parentUuid": "23d44e2d_ca599377",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_8a2ddbc3",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 448,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "I wonder if we will eventually end up always passing Class\u0027es wrapped in SirtRef\u0027s in this class for robustness against future code changes.",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_ce3887b8",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 448,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Maybe, SirtRefs aren\u0027t free however.",
      "parentUuid": "23d44e2d_8a2ddbc3",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_24c95c3f",
        "filename": "runtime/class_linker_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "const for \u0027array\u0027 like \u0027array_descripter\u0027?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_9eaf5c7a",
        "filename": "runtime/class_linker_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d10a3f_24c95c3f",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_04d780de",
        "filename": "runtime/class_linker_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "const for \u0027klass\u0027?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_be99f866",
        "filename": "runtime/class_linker_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d10a3f_04d780de",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_bd08e380",
        "filename": "runtime/gc/collector/semi_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Just a side comment: if this marking phase was (or is going to be made) concurrent, this would not be valid?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_bd246098",
        "filename": "runtime/gc/collector/semi_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "I\u0027ll add a comment.",
      "parentUuid": "e3cdd6a7_bd08e380",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_c54e2484",
        "filename": "runtime/globals.h",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Oh, I see that we are not moving fields and methods but classes only (referring to one of my earlier comment.)",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_a588c857",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Just to confirm the rationale (though probably obvious), is it the case that since EnsureInitilized() call below might trigger GC and we are not wrapping the method (inside the MethodHelper) in a SirtRef, this code would break if we move methods, right?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_9d2ac461",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "That is correct.",
      "parentUuid": "23d44e2d_a588c857",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_0563fcf4",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Is this reinterpret_cast necessary?\n\nAlso, the rationale is that now that we move classes, the array_class_ was a new root that was previously not treated as a root, right?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c34d3211_9ee73955",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Needed to move the VisitRoots function to .inl, done.",
      "parentUuid": "23d44e2d_0563fcf4",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_45c69482",
        "filename": "runtime/mirror/art_field.cc",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Looks like the indentation of line 59 (the closing brace of the if block) is off.",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c34d3211_7e1d8d75",
        "filename": "runtime/mirror/art_field.cc",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23d44e2d_45c69482",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_e51a4053",
        "filename": "runtime/mirror/stack_trace_element.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "I\u0027m curious. Why is this SHARED_LOCKS_REQUIRED as opposed to EXCLUSIVE_LOCKS_REQUIRED? This might be equivalent to asking the same question to MarkSweep::MarkRoots() and ReMarkRoots().",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a31cbefb_fa376966",
        "filename": "runtime/mirror/stack_trace_element.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "We mark the roots concurrently at the start of the GC to reduce pauses. If we miss roots, they will get marked in the pause.",
      "parentUuid": "23d44e2d_e51a4053",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43eea235_a2e800d6",
        "filename": "runtime/mirror/stack_trace_element.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-07T00:29:57Z",
      "side": 1,
      "message": "OK. Just to paraphrase, as VisitRoots() is used by both the concurrent root scan and the non-concurrent root scan, it has to use the weaker of SHARED_LOCKS_REQUIRED and EXCLUSIVE_LOCKS_REQUIRED. Hence, it uses SHARED_LOCKS_REQUIRED.",
      "parentUuid": "a31cbefb_fa376966",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3df5e7e_f16772aa",
        "filename": "runtime/mirror/stack_trace_element.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-11T00:01:33Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "43eea235_a2e800d6",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d10a3f_642074fa",
        "filename": "runtime/mirror/string.cc",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "const reference for \u0027array\u0027?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a31cbefb_7a8919c8",
        "filename": "runtime/mirror/string.cc",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03d10a3f_642074fa",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d44e2d_ea29ef19",
        "filename": "runtime/object_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "Is T always mirror::Object? If so, hardcode T \u003d mirror::Object?",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c34d3211_7e74ada7",
        "filename": "runtime/object_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "Since we pass in SirtRefs now, it can be either mirror::Object or mirror::Class. I don\u0027t see any cleaner way to do this.",
      "parentUuid": "23d44e2d_ea29ef19",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdd6a7_1d2477da",
        "filename": "runtime/reflection.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2013-12-06T01:09:08Z",
      "side": 1,
      "message": "A side thought: I wonder if there\u0027s a way to declare certain functions to be MIGHT_TRIGGER_GC and statically check that they do not take raw Class pointers as parameters, etc. sort of like the thread annotation analysis. But I guess there\u0027s none.",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c34d3211_dec70182",
        "filename": "runtime/reflection.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2013-12-06T18:42:41Z",
      "side": 1,
      "message": "That would be nice.",
      "parentUuid": "e3cdd6a7_1d2477da",
      "revId": "7e16be20d0a2b8220301d9bcbb30b7588ac98263",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}