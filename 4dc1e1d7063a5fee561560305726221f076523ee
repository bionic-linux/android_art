{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ea60d158_817b12ea",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-16T21:04:45Z",
      "side": 1,
      "message": "What about indexing the cache on the dex path to avoid this `for` loop?",
      "range": {
        "startLine": 488,
        "startChar": 62,
        "endLine": 488,
        "endChar": 69
      },
      "revId": "4dc1e1d7063a5fee561560305726221f076523ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d07679_218fa424",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-16T23:00:47Z",
      "side": 1,
      "message": "1. Storing the dex path in the cache can lead to wrong results in edge cases. For example, a dex path may initially belong to package A but later belong to package B. Although this can almost never happen given how dex files are organized on Android, I\u0027d like to avoid this for the peace of mind.\n2. With the current implementation, when a package loads a secondary dex file X of package GMS, the cache can also benefit another package that loads a secondary dex file Y of package GMS (the same package). Given that GMS usually have many (~10) secondary files, this implementation is beneficial.\n3. The `for` loop is not bad. According to the doc of `LruCache`:\n\n  \u003e Each time a value is accessed, it is moved to the head of a queue.\n  \n  A commonly used package like GMS is probably near the head of the queue. Therefore, when a package loads a secondary dex file of GMS, we\u0027ll return from the for loop within the first few iterations.",
      "parentUuid": "ea60d158_817b12ea",
      "range": {
        "startLine": 488,
        "startChar": 62,
        "endLine": 488,
        "endChar": 69
      },
      "revId": "4dc1e1d7063a5fee561560305726221f076523ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8144ea8_3b7e62f1",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-07-17T18:33:51Z",
      "side": 1,
      "message": "Re #1, one would still call `checkForPackage` for the cache hit.\n\nRe the rest, sure there\u0027s that, but otoh there are still several times more `checkForPackage` calls to return a cache hit, and there\u0027s also that `LruCache.snapshot` copies the map, and that\u0027s a constant cost in every call. It\u0027s not obvious how the trade-offs compare here.\n\nOne may consider the variant to first do a lookup by dex path, then iterate over the map to check the packages (in the map values) to mostly retain your #2 and #3. Maybe that doesn\u0027t get too fiddly? The cache would get a few more entries, so would need a size of about 50 to keep the same working set.\n\nJust putting it out as an idea to consider, but I\u0027ll leave it to you to decide.",
      "parentUuid": "64d07679_218fa424",
      "range": {
        "startLine": 488,
        "startChar": 62,
        "endLine": 488,
        "endChar": 69
      },
      "revId": "4dc1e1d7063a5fee561560305726221f076523ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c7fbad4_bab48447",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-07-17T22:38:47Z",
      "side": 1,
      "message": "These are good points. Although what you suggested adds some complexity, if it improves performance, then I have no problem with it. PTAL.",
      "parentUuid": "c8144ea8_3b7e62f1",
      "range": {
        "startLine": 488,
        "startChar": 62,
        "endLine": 488,
        "endChar": 69
      },
      "revId": "4dc1e1d7063a5fee561560305726221f076523ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}