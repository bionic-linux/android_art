{
  "comments": [
    {
      "key": {
        "uuid": "cd7ba135_0bce9d6a",
        "filename": "compiler/dex/pass_driver.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-01-14T13:50:43Z",
      "side": 1,
      "message": "The whole point of UniquePtr is defeated by the plain pointer here.",
      "range": {
        "startLine": 74,
        "startChar": 25,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "4e97c539408f47145526f0062c1c06df99146a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d1b3107_c6972c2f",
        "filename": "compiler/dex/pass_driver.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-14T17:20:56Z",
      "side": 1,
      "message": "agreed, I\u0027d overlooked this. Jean can you fix this, this should be a UniquePtr[] or else it is still a memory leak.",
      "parentUuid": "cd7ba135_0bce9d6a",
      "range": {
        "startLine": 74,
        "startChar": 25,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "4e97c539408f47145526f0062c1c06df99146a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6de9d52a_a32be412",
        "filename": "compiler/dex/pass_driver.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1016743
      },
      "writtenOn": "2014-01-14T22:58:32Z",
      "side": 1,
      "message": "So I\u0027ve tried in various ways of doing this but it seems that you can\u0027t really create a UniquePtr of UniquePtrs of non copy-able instances.\n\nEverything I\u0027ve tried gets me yelled at that either UniquePtr is not happy or Pass is not happy.\n\nI would suggest another solution which is to have a global static UniquePtr to a PassHolder that automatically creates these passes internally in an array and we can retrieve them via a simple get API.\n\nOnce that gets killed, I can free the passes without UniquePtr underneath.\n\nOr you have a wonderful solution that I\u0027ve overlooked :)",
      "parentUuid": "4d1b3107_c6972c2f",
      "range": {
        "startLine": 74,
        "startChar": 25,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "4e97c539408f47145526f0062c1c06df99146a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad810d4e_614bc075",
        "filename": "compiler/dex/pass_driver.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-14T23:08:17Z",
      "side": 1,
      "message": "Your solution sounds good to me (sgtm) :-)",
      "parentUuid": "6de9d52a_a32be412",
      "range": {
        "startLine": 74,
        "startChar": 25,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "4e97c539408f47145526f0062c1c06df99146a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8db2895a_d1bea4b6",
        "filename": "compiler/dex/pass_driver.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-01-15T15:17:10Z",
      "side": 1,
      "message": "Why does it need to be allocated on the heap?\n\n  template \u003ctypename PassType\u003e\n  Pass* GetPassInstance() {\n    static PassType pass;\n    return \u0026pass;\n  }\n\n  [...]\n\n  static Pass* const passes[] \u003d {\n      GetPassInstance\u003cCodeLayout\u003e(),\n      GetPassInstance\u003cSSATransformation\u003e(),\n      GetPassInstance\u003cConstantPropagation\u003e(),\n      GetPassInstance\u003cInitRegLocations\u003e(),\n      GetPassInstance\u003cMethodUseCount\u003e(),\n      GetPassInstance\u003cNullCheckEliminationAndTypeInferenceInit\u003e(),\n      GetPassInstance\u003cNullCheckEliminationAndTypeInference\u003e(),\n      GetPassInstance\u003cBBCombine\u003e(),\n      GetPassInstance\u003cBBOptimizations\u003e(),\n  };\n\nShouldn\u0027t the passes be const or even constexpr?",
      "parentUuid": "ad810d4e_614bc075",
      "range": {
        "startLine": 74,
        "startChar": 25,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "4e97c539408f47145526f0062c1c06df99146a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}