{
  "comments": [
    {
      "key": {
        "uuid": "e4c40963_040a40ad",
        "filename": "compiler/dex/quick/x86/assemble_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 331,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-23T20:39:16Z",
      "side": 1,
      "message": "This is unnecessary, use EXT_0F_ENCODING_MAP and pass REX as the prefix.",
      "range": {
        "startLine": 328,
        "startChar": 0,
        "endLine": 331,
        "endChar": 171
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c413859f_6d94ad2d",
        "filename": "compiler/dex/quick/x86/assemble_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 331,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T04:08:46Z",
      "side": 1,
      "message": "Will do a clean-up patch",
      "parentUuid": "e4c40963_040a40ad",
      "range": {
        "startLine": 328,
        "startChar": 0,
        "endLine": 331,
        "endChar": 171
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c1c553_bd6b632e",
        "filename": "compiler/dex/quick/x86/assemble_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-23T20:39:16Z",
      "side": 1,
      "message": "This is unnecessary, use EXT_0F_ENCODING_MAP and pass REX_w as the prefix.",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 341,
        "endChar": 173
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e416c98e_eba5252c",
        "filename": "compiler/dex/quick/x86/assemble_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T04:08:46Z",
      "side": 1,
      "message": "Will do a clean-up patch",
      "parentUuid": "c4c1c553_bd6b632e",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 341,
        "endChar": 173
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c1c553_3724d24b",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1010712
      },
      "writtenOn": "2014-06-23T18:27:46Z",
      "side": 1,
      "message": "Before setting rl_result, we need to clear rl_result.  Otherwise the upper 3 bytes are invalid for usage later on.",
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44d5d5fe_038dd0dc",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-23T18:38:29Z",
      "side": 1,
      "message": "We do not plan to use the upper 3 bytes. See the code below. all arithmetic is 8 bit ending up with sign extension to 64-bit.",
      "parentUuid": "c4c1c553_3724d24b",
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c40963_fe5dd5cb",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1010712
      },
      "writtenOn": "2014-06-23T18:44:11Z",
      "side": 1,
      "message": "Ok.  I didn\u0027t notice the 8-bit sub and sign-extension.  Hopefully, this time is good.  Thanks a lot!",
      "parentUuid": "44d5d5fe_038dd0dc",
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4db2937_6b7bbf02",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-23T20:39:16Z",
      "side": 1,
      "message": "This should be sign-extension to 32-bit.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 75
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c413859f_4d99f161",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T04:08:46Z",
      "side": 1,
      "message": "I do not see x86 instruction allowing us to do a sign extension from 8-bit to 32-bit and use the whole r0-r15 register set at the same time. So I decided to use 8-bit to 64-bit sign extension.",
      "parentUuid": "e4db2937_6b7bbf02",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 75
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "649e596e_461a90d2",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-24T04:22:45Z",
      "side": 1,
      "message": "the same instruction without a REX_W prefix will do a 32-bit movsx, that is 0F BE /r",
      "parentUuid": "c413859f_4d99f161",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 75
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e416c98e_0b76c1ea",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T04:48:52Z",
      "side": 1,
      "message": "Yeah, it will do but it will not allow us to use registers \u003e 4 (r9l for example).",
      "parentUuid": "649e596e_461a90d2",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 75
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "048d9d44_d7a5562c",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-24T08:09:33Z",
      "side": 1,
      "message": "Ugh, that looks like an instruction decode bug in movsx. A REX prefix without REX.W is generating a 64-bit result, and normalizing the byte register doesn\u0027t work :-/ movsxw and movzx at least have the decency to use a REX.W prefix. There will be a bug in the disassembler because of this, we should mask in REX.W when we see a blank REX with movsxb (0F BE).",
      "parentUuid": "e416c98e_0b76c1ea",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 75
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e472491f_054fb27d",
        "filename": "compiler/dex/quick/x86/int_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T08:22:02Z",
      "side": 1,
      "message": "we\u0027ll try to look into this issue in disassembler.",
      "parentUuid": "048d9d44_d7a5562c",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 75
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c40963_e4daa4f3",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 613,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-23T20:39:16Z",
      "side": 1,
      "message": "This looks very broken.",
      "range": {
        "startLine": 611,
        "startChar": 0,
        "endLine": 613,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44d5d5fe_a39b44e9",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 613,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T06:04:24Z",
      "side": 1,
      "message": "And this is required due to sign extension of the constant in later add/mov operation.",
      "parentUuid": "e4c40963_e4daa4f3",
      "range": {
        "startLine": 611,
        "startChar": 0,
        "endLine": 613,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "048d9d44_d7d4767b",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 613,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-24T08:09:33Z",
      "side": 1,
      "message": "I don\u0027t follow. If the value is 0x00 00 00 00 FF FF FF FF then val_lo is 0xFF FF FF FF (or -1) and val_hi is 0. This code will make val_hi \u003d 1. The code below will then generate:\nr_dest :\u003d 1\nr_dest \u003c\u003c\u003d 32\nr_dest +\u003d 0xFF FF FF FF\nwhich will lead to 0x1 FF FF FF FF in r_dest rather than 0xFF FF FF FF.",
      "parentUuid": "44d5d5fe_a39b44e9",
      "range": {
        "startLine": 611,
        "startChar": 0,
        "endLine": 613,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6487392a_6935a5fb",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 613,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T08:22:02Z",
      "side": 1,
      "message": "No, r_dest :\u003d1, r_dest \u003c\u003c\u003d 32 and r_dest +\u003d 0x FF FF FF FF FF FF FF FF (due to sign extension of immediate for add). So it will be 0x 00 00 00 01 00 00 00 00 + 0x FF FF FF FF FF FF FF FF \u003d 0x 00 00 00 00 FF FF FF FF as expected.",
      "parentUuid": "048d9d44_d7d4767b",
      "range": {
        "startLine": 611,
        "startChar": 0,
        "endLine": 613,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "048d9d44_b74a8a8d",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 613,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-24T08:53:10Z",
      "side": 1,
      "message": "Can you address this in a comment, but I\u0027m confused as to why you are doing it this way.\nIf val_hi is 0 then use the B8 encoding with no REX.W prefix. If val_hi is -1 then use C7 with a REX.W prefix, so the immediate is sign-extended. For all other values use the B8 with REX.W prefix and a 64-bit immediate. You shouldn\u0027t be needing to do shifts and adds.",
      "parentUuid": "6487392a_6935a5fb",
      "range": {
        "startLine": 611,
        "startChar": 0,
        "endLine": 613,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6487392a_8983b944",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 613,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T09:00:55Z",
      "side": 1,
      "message": "For now LIR does not support 64-bit immediate. This work is in progress. So we cannot use 64-bit immediate at this moment. This is why all these things.",
      "parentUuid": "048d9d44_b74a8a8d",
      "range": {
        "startLine": 611,
        "startChar": 0,
        "endLine": 613,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "048d9d44_37485a92",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 613,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-24T09:23:07Z",
      "side": 1,
      "message": "Agreed, for the B8+REX.W and 64-immediate you\u0027d need a new encoding kind where you\u0027d store the 64-bit immediate over 2 ints.",
      "parentUuid": "6487392a_8983b944",
      "range": {
        "startLine": 611,
        "startChar": 0,
        "endLine": 613,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4db2937_6bbe5f54",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 618,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-23T20:39:16Z",
      "side": 1,
      "message": "res \u003d LoadConstantNoClobber(...)\nthe top bits are implicitly zero",
      "range": {
        "startLine": 618,
        "startChar": 10,
        "endLine": 618,
        "endChar": 71
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44d5d5fe_c3d7687d",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 618,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T04:08:46Z",
      "side": 1,
      "message": "makes sense to me",
      "parentUuid": "e4db2937_6bbe5f54",
      "range": {
        "startLine": 618,
        "startChar": 10,
        "endLine": 618,
        "endChar": 71
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4db2937_0bfddb18",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-23T20:39:16Z",
      "side": 1,
      "message": "move this into the \"if (val_hi !\u003d 0)\" case",
      "range": {
        "startLine": 620,
        "startChar": 1,
        "endLine": 622,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c413859f_ad7d053c",
        "filename": "compiler/dex/quick/x86/utility_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T04:08:46Z",
      "side": 1,
      "message": "together with above.",
      "parentUuid": "e4db2937_0bfddb18",
      "range": {
        "startLine": 620,
        "startChar": 1,
        "endLine": 622,
        "endChar": 9
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "048d9d44_b48288ae",
        "filename": "compiler/dex/quick/x86/x86_lir.h",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-06-24T04:22:45Z",
      "side": 1,
      "message": "Could you tweak the comment here, an empty REX prefix used to normalize the byte operations so that they apply to R4 through R15.",
      "range": {
        "startLine": 714,
        "startChar": 3,
        "endLine": 714,
        "endChar": 24
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44d5d5fe_63921cd3",
        "filename": "compiler/dex/quick/x86/x86_lir.h",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-06-24T04:48:52Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "048d9d44_b48288ae",
      "range": {
        "startLine": 714,
        "startChar": 3,
        "endLine": 714,
        "endChar": 24
      },
      "revId": "1c55703526827b5fc63f5d4b8477f36574649342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}