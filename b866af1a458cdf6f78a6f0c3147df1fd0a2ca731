{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "24f77078_9b5b0eb9",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-05T09:02:14Z",
      "side": 1,
      "message": "Even though I added the prefix `Try` to `GenerateFrameEntry`, I didn\u0027t want to do it for `Compile` since we already have `TryCompile`. We could rename this to `TryCompile` too for consistency regarding `TryXXX` methods which return `bool` values.",
      "range": {
        "startLine": 189,
        "startChar": 7,
        "endLine": 189,
        "endChar": 14
      },
      "revId": "b866af1a458cdf6f78a6f0c3147df1fd0a2ca731",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f339b29_3b8fd655",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 3
      },
      "lineNbr": 2397,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-02-05T12:06:44Z",
      "side": 1,
      "message": "Does this need to be in GenerateFrameEntry? Looks like you could make this check generically without the need of changing all codegens, higher up.",
      "range": {
        "startLine": 2392,
        "startChar": 0,
        "endLine": 2397,
        "endChar": 3
      },
      "revId": "b866af1a458cdf6f78a6f0c3147df1fd0a2ca731",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a15cc60_5e5315e5",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 943,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-05T10:42:53Z",
      "side": 1,
      "message": "If we add more checks to `codegen-\u003eCompile()`, this shall become misleading. I\u0027m wondering if we should fully move the check here. (We can ask the codegen for frame size and compare it to the SOE reservation size before the call.)",
      "range": {
        "startLine": 942,
        "startChar": 4,
        "endLine": 943,
        "endChar": 93
      },
      "revId": "b866af1a458cdf6f78a6f0c3147df1fd0a2ca731",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4f9f1b_e90ff9b3",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 1043,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-05T10:42:53Z",
      "side": 1,
      "message": "We could strongly `CHECK()` this - intrinsics that pass the leaf method check above should never have such huge frames.",
      "revId": "b866af1a458cdf6f78a6f0c3147df1fd0a2ca731",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}