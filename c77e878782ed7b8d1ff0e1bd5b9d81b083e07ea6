{
  "comments": [
    {
      "key": {
        "uuid": "c81ef943_91880d39",
        "filename": "test/137-cfi/cfi.cc",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-02-08T04:22:18Z",
      "side": 1,
      "message": "Is the same true for yields? This could put quite some load on devices...",
      "range": {
        "startLine": 62,
        "startChar": 26,
        "endLine": 62,
        "endChar": 32
      },
      "revId": "c77e878782ed7b8d1ff0e1bd5b9d81b083e07ea6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6cf4d50_6ee0ee13",
        "filename": "test/137-cfi/cfi.cc",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-02-08T04:25:43Z",
      "side": 1,
      "message": "Note: I don\u0027t remember why I made it sleep(1). Why not just sleep(1000)?\n\n(Maybe it was being afraid of signals and interruption? Could still make it significantly longer sleep, though?)",
      "parentUuid": "c81ef943_91880d39",
      "range": {
        "startLine": 62,
        "startChar": 26,
        "endLine": 62,
        "endChar": 32
      },
      "revId": "c77e878782ed7b8d1ff0e1bd5b9d81b083e07ea6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c154225f_07801c12",
        "filename": "test/137-cfi/cfi.cc",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-02-08T13:01:36Z",
      "side": 1,
      "message": "+1 for sleep(1000)\n\nElaborate on the signals and interruption - what could be the problem?\n\nAlternatively, I was wondering if something like syscall(sys_sched_yield) would bypass the libc issue.",
      "parentUuid": "e6cf4d50_6ee0ee13",
      "range": {
        "startLine": 62,
        "startChar": 26,
        "endLine": 62,
        "endChar": 32
      },
      "revId": "c77e878782ed7b8d1ff0e1bd5b9d81b083e07ea6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d0f8269_17bddc13",
        "filename": "test/137-cfi/cfi.cc",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2018-02-08T21:48:39Z",
      "side": 1,
      "message": "I\u0027ve been looking at this and now I\u0027m wondering if there might be a bug in the new unwinder. I couldn\u0027t see any way that the unwind information is wrong for libc-2.24.so. So if you saw a crash, I\u0027m a little worried. I think a sleep of 1000 is still a good idea, but I\u0027m going to try and provoke the crash to verify if this is really a problem.\n\nSo for this I\u0027ll change this to a sleep of 1000, and still try to provoke a failure.",
      "parentUuid": "c154225f_07801c12",
      "range": {
        "startLine": 62,
        "startChar": 26,
        "endLine": 62,
        "endChar": 32
      },
      "revId": "c77e878782ed7b8d1ff0e1bd5b9d81b083e07ea6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b87f24d2_4c74df19",
        "filename": "test/137-cfi/cfi.cc",
        "patchSetId": 3
      },
      "lineNbr": 231,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2018-02-08T03:42:08Z",
      "side": 1,
      "message": "I\u0027m not sure this is true any more, I definitely see this in the stack traces. But I didn\u0027t want to make that change in this CL because I didn\u0027t test every possible situation.",
      "range": {
        "startLine": 231,
        "startChar": 12,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "c77e878782ed7b8d1ff0e1bd5b9d81b083e07ea6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}