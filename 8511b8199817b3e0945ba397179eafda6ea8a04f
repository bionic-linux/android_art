{
  "comments": [
    {
      "key": {
        "uuid": "4e7c5d8b_43fcb3f6",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2881,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2018-03-10T23:57:43Z",
      "side": 1,
      "message": "This will always move the unused argument into a register, thus inserting an unnecessary move. Is that intentional? If not, there are better values to use here.\n\n(same for all archs)",
      "range": {
        "startLine": 2881,
        "startChar": 24,
        "endLine": 2881,
        "endChar": 32
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77aab66d_21057b3f",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2881,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-12T15:48:59Z",
      "side": 1,
      "message": "Yes, you can do:\nlocations-\u003eSetInAt(0, Location::NoLocation());        // Unused argument.",
      "parentUuid": "4e7c5d8b_43fcb3f6",
      "range": {
        "startLine": 2881,
        "startChar": 24,
        "endLine": 2881,
        "endChar": 32
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac44dbd0_cd5b2252",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2881,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-03-13T01:52:13Z",
      "side": 1,
      "message": "I really want to say that it needs to be someplace from where I could load it into a register if I wanted, but I don\u0027t care whether it actually is in a register. It could be in a stack slot. It could be a constant if it were null, but that\u0027s an unlikely and uninteresting case.\n\nBased on what I could immediately find, NoLocation sounds like it might be too weak, in that it wouldn\u0027t force the value to be kept anywhere? It seems to be used for dead arguments? Is Location::Any() better?",
      "parentUuid": "77aab66d_21057b3f",
      "range": {
        "startLine": 2881,
        "startChar": 24,
        "endLine": 2881,
        "endChar": 32
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de97b10e_4e5f6445",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2881,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-13T13:39:38Z",
      "side": 1,
      "message": "Correct, the liveness analysis will indeed use the location information. So you\u0027re right that Location::Any is best here.",
      "parentUuid": "ac44dbd0_cd5b2252",
      "range": {
        "startLine": 2881,
        "startChar": 24,
        "endLine": 2881,
        "endChar": 32
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92a31526_fcb3ecee",
        "filename": "runtime/intrinsics_list.h",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-12T15:48:59Z",
      "side": 1,
      "message": "Should this be all side effects? (Read + write)",
      "range": {
        "startLine": 221,
        "startChar": 58,
        "endLine": 221,
        "endChar": 75
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "743e15f5_23f7725a",
        "filename": "runtime/intrinsics_list.h",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-03-13T01:52:13Z",
      "side": 1,
      "message": "I think this is correct. This should not be advanced past any read or write accesses to the heap. kWriteSideEffects should have that effect, right?",
      "parentUuid": "92a31526_fcb3ecee",
      "range": {
        "startLine": 221,
        "startChar": 58,
        "endLine": 221,
        "endChar": 75
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b450fda9_4410f646",
        "filename": "runtime/intrinsics_list.h",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-13T13:39:38Z",
      "side": 1,
      "message": "Yes. If you add read to it, that will make other (aliasing) writes not be scheduled before the intrinsic.\n\nI guess scheduling write instructions before the intrinsic is OK?",
      "parentUuid": "743e15f5_23f7725a",
      "range": {
        "startLine": 221,
        "startChar": 58,
        "endLine": 221,
        "endChar": 75
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "442b0e7d_c6602223",
        "filename": "runtime/intrinsics_list.h",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2018-03-20T00:43:43Z",
      "side": 1,
      "message": "I actually don\u0027t understand this. kWriteSideEffects presumably means that any heap location can conceivably be written? But if that\u0027s the case, then reordering it with another write, in either direction, should be unsafe, since a different write will \"win\". Similarly reordering with a read in either direction isn\u0027t safe, since the read will see a different value. That was certainly the assumption that went into the fullFence definition above.\n\nIs that not correct? Otherwise is there a difference between kWriteSideEffects and kAllSideEffects, aside from the fact that the latter can include suspend points, and thus we should be keeping derived pointers across a kAllSideEffects intrinsic?\n\nIn either case, I\u0027m currently leaning towards improving the comments defining these.",
      "parentUuid": "b450fda9_4410f646",
      "range": {
        "startLine": 221,
        "startChar": 58,
        "endLine": 221,
        "endChar": 75
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8245c674_dc1fb261",
        "filename": "runtime/intrinsics_list.h",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-03-20T14:08:19Z",
      "side": 1,
      "message": "The side effects aren\u0027t only used for reordering, they\u0027re also used for eg GVN and LSE (see uses of DoesAnyRead and DoesAnyWrite in the compiler code).\n\nSo I think you are right, this doesn\u0027t need to have a kRead, but needs an artificial side effect to prevent removal and reordering.",
      "parentUuid": "442b0e7d_c6602223",
      "range": {
        "startLine": 221,
        "startChar": 58,
        "endLine": 221,
        "endChar": 75
      },
      "revId": "8511b8199817b3e0945ba397179eafda6ea8a04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}