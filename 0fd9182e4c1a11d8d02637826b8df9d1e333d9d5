{
  "comments": [
    {
      "key": {
        "uuid": "508b33e0_83f44083",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 8
      },
      "lineNbr": 4861,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-19T17:39:33Z",
      "side": 1,
      "message": "This must be right after LoadFromOffset().",
      "range": {
        "startLine": 4861,
        "startChar": 2,
        "endLine": 4861,
        "endChar": 54
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0462f6a_a3003a0f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 8
      },
      "lineNbr": 2136,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-19T17:39:33Z",
      "side": 1,
      "message": "This must be right after the Ldr().",
      "range": {
        "startLine": 2136,
        "startChar": 2,
        "endLine": 2136,
        "endChar": 54
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9085abca_85c1a4f9",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 8
      },
      "lineNbr": 1192,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-19T17:39:33Z",
      "side": 1,
      "message": "This should be merged with the other compression mismatch loop, with different pre-processing and post-processing.",
      "range": {
        "startLine": 1192,
        "startChar": 2,
        "endLine": 1192,
        "endChar": 57
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "508b33e0_e3e2ecc4",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 8
      },
      "lineNbr": 1204,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-19T17:39:33Z",
      "side": 1,
      "message": "Compressed comparison can be done by the same loop as uncompressed comparison with slightly modified pre-processing and post-processing.",
      "range": {
        "startLine": 1204,
        "startChar": 2,
        "endLine": 1204,
        "endChar": 27
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30907f09_1f288344",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 8
      },
      "lineNbr": 1296,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-19T17:39:33Z",
      "side": 1,
      "message": "There are still 2 instructions that do what you need, BIC and UBFX. And it would be still better to move the compression tag to the bottom of the \"count\" field, so that a single LSRS will extract the length while putting the compression tag to the carry flag.",
      "range": {
        "startLine": 1293,
        "startChar": 0,
        "endLine": 1296,
        "endChar": 24
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb1db24e_ac346e94",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 8
      },
      "lineNbr": 1296,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-09-19T18:01:32Z",
      "side": 1,
      "message": "I actually like Vladimir\u0027s suggestion. Of course this would mean you also have to go back to libcore and interpreter to make the representation change, but if you have the time, it would be very interesting to compare how much the \"micro optimizations\" that become possible for arm/x86 help in code size.",
      "parentUuid": "30907f09_1f288344",
      "range": {
        "startLine": 1293,
        "startChar": 0,
        "endLine": 1296,
        "endChar": 24
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0462f6a_03138e65",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 8
      },
      "lineNbr": 1317,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-19T17:39:33Z",
      "side": 1,
      "message": "For the length\u003dINT_MAX (theoretically valid), you\u0027d get a negative result. Lsr() would be correct.",
      "range": {
        "startLine": 1316,
        "startChar": 0,
        "endLine": 1317,
        "endChar": 29
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d049e37c_472f50b0",
        "filename": "compiler/optimizing/intrinsics_arm.cc",
        "patchSetId": 8
      },
      "lineNbr": 2449,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-19T17:39:33Z",
      "side": 1,
      "message": "Reorder the code, please, putting these compression-independent parts first. You can then avoid the string_is_compressed and continue_process branches above, putting the srcBegin addition to each branch of the CMP below.",
      "range": {
        "startLine": 2439,
        "startChar": 0,
        "endLine": 2449,
        "endChar": 18
      },
      "revId": "0fd9182e4c1a11d8d02637826b8df9d1e333d9d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}