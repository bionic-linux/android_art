{
  "comments": [
    {
      "key": {
        "uuid": "e4aeed64_28c19177",
        "filename": "compiler/driver/compiler_driver-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-08-20T00:46:08Z",
      "side": 1,
      "message": "It\u0027s not clear to me what logic drives the FindDexCache -\u003e RegisterDexFile replacement in some places like this line but not for other places (kept as FindDexCache like line 343). Can you clarify?",
      "range": {
        "startLine": 34,
        "startChar": 34,
        "endLine": 34,
        "endChar": 49
      },
      "revId": "ca271ae27825d961e871cc53ba65dc2770f62eac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4fb1585_a5a69fc7",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 4
      },
      "lineNbr": 603,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-08-20T00:46:08Z",
      "side": 1,
      "message": "This makes a copy of the list, which I assume is needed to avoid a lock order issue or something? Can you clarify?",
      "range": {
        "startLine": 603,
        "startChar": 15,
        "endLine": 603,
        "endChar": 16
      },
      "revId": "ca271ae27825d961e871cc53ba65dc2770f62eac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4434d7f_07804302",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 4
      },
      "lineNbr": 1389,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-08-20T00:46:08Z",
      "side": 1,
      "message": "What code removes those local references?",
      "range": {
        "startLine": 1389,
        "startChar": 32,
        "endLine": 1389,
        "endChar": 49
      },
      "revId": "ca271ae27825d961e871cc53ba65dc2770f62eac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "243ac5f6_32db0ee5",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2468,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-08-20T00:46:08Z",
      "side": 1,
      "message": "Add that a null dex cache can occur due to class unloading and we are lazily removing null entries here?",
      "range": {
        "startLine": 2468,
        "startChar": 44,
        "endLine": 2468,
        "endChar": 45
      },
      "revId": "ca271ae27825d961e871cc53ba65dc2770f62eac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4a9e95f_68d8e562",
        "filename": "runtime/runtime-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-08-20T00:46:08Z",
      "side": 1,
      "message": "Is this safe? Does it mean that we may use null as the sentinel up to a point (during class linker initialization) and a non-null value after the initialization is done?\n\nWould it be possible to move up the sentinel allocation site before the first weak global decode?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 87
      },
      "revId": "ca271ae27825d961e871cc53ba65dc2770f62eac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a8755c_f6e6f322",
        "filename": "runtime/trace.cc",
        "patchSetId": 4
      },
      "lineNbr": 643,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-08-20T00:46:08Z",
      "side": 1,
      "message": "Does this mean that we aren\u0027t visiting roots (trace methods)?",
      "range": {
        "startLine": 643,
        "startChar": 4,
        "endLine": 643,
        "endChar": 42
      },
      "revId": "ca271ae27825d961e871cc53ba65dc2770f62eac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}