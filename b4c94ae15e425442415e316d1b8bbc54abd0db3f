{
  "comments": [
    {
      "key": {
        "uuid": "a185ac8b_a6175270",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1033,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-29T15:06:28Z",
      "side": 1,
      "message": "Nit: rename as `src\u0027 for symmetry reasons with Load (likewise in compiler/optimizing/code_generator_arm64.h)?",
      "range": {
        "startLine": 1033,
        "startChar": 43,
        "endLine": 1033,
        "endChar": 45
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0144b839_74133e7f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1033,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-05T16:17:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a185ac8b_a6175270",
      "range": {
        "startLine": 1033,
        "startChar": 43,
        "endLine": 1033,
        "endChar": 45
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0144b839_8b632d37",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1058,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-29T15:06:28Z",
      "side": 1,
      "message": "Ditto?",
      "range": {
        "startLine": 1058,
        "startChar": 50,
        "endLine": 1058,
        "endChar": 52
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c180e07b_15cf44ec",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1058,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-05T16:17:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0144b839_8b632d37",
      "range": {
        "startLine": 1058,
        "startChar": 50,
        "endLine": 1058,
        "endChar": 52
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0144b839_ebce71ee",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1128,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-29T15:06:28Z",
      "side": 1,
      "message": "HeapOperand?",
      "range": {
        "startLine": 1128,
        "startChar": 49,
        "endLine": 1128,
        "endChar": 59
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c180e07b_f5c900e9",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1128,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-05T16:17:41Z",
      "side": 1,
      "message": "I think it is better as is. The MAsm doesn\u0027t handle MemOperand. HeapOperand is just a wrapper returning a MemOperand.",
      "parentUuid": "0144b839_ebce71ee",
      "range": {
        "startLine": 1128,
        "startChar": 49,
        "endLine": 1128,
        "endChar": 59
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6102d48e_5b04473d",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1805,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-12-19T21:29:43Z",
      "side": 1,
      "message": "Does this need to be AnyAny?  My impression is that ISHLD is not sufficient for precluding the incorrect result for IRIW?  I.e.\n\nThread 1: x \u003d 1;\nThread 2: y \u003d 1;\nThread 3: r1 \u003d x; dmb ishld; r2 \u003d y;\nThread 4: r3 \u003d x; dmb ishld; r4 \u003d y;\n\ndoes not ensure sequential consistency?\n\nI think we had concluded that ISHLD is sufficient for lock acquisition and flag testing, such as in initialization checks.  But I\u0027m not sure it\u0027s quite enough for general volatiles.\n\nThis is unfortunately not apparent from the barrier naming.  Either way a comment about the fact that ISHLD does/does not suffice for IRIW would help.",
      "range": {
        "startLine": 1805,
        "startChar": 45,
        "endLine": 1805,
        "endChar": 52
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1b2a05b_5162b4f5",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1805,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-12-22T11:58:01Z",
      "side": 1,
      "message": "If we assume sequential consistency, I believe we need AnyAny after volatile loads so that stores are not reordered past them.\n\nI will change this to kAnyAny as soon as I am back in the office. If Calin is eager to accept this in he can add a TODO and I will fix it soon.\n\nLong term for ARM64 we should be using the Acquire-Release semantics that, at least in theory, ought to be faster (enabled by default for now in the ARM64 backend).",
      "parentUuid": "6102d48e_5b04473d",
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a185ac8b_a6c912bc",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2351,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-29T15:06:28Z",
      "side": 1,
      "message": "I also ran into this Clang bug in other code generators.  This issue was related to the empty  kRuntimeParameterFpuRegisters array (see line 239).  I believe it should work if you populate this array with { s0, s1 } (or { d0, d1 }) and adjust kRuntimeParameterFpuRegistersLength (on line 240).",
      "range": {
        "startLine": 2350,
        "startChar": 0,
        "endLine": 2351,
        "endChar": 85
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0144b839_b445a677",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2351,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-05T16:17:41Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "a185ac8b_a6c912bc",
      "range": {
        "startLine": 2350,
        "startChar": 0,
        "endLine": 2351,
        "endChar": 85
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a18bec6e_84ad96a6",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2484,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-12-19T21:29:43Z",
      "side": 1,
      "message": "Same question here.",
      "range": {
        "startLine": 2484,
        "startChar": 44,
        "endLine": 2484,
        "endChar": 52
      },
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1ade4fd_f29e4871",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2484,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-12-22T11:58:01Z",
      "side": 1,
      "message": "kAnyAny after load volatile. kLoadAny is not sufficient for IRIW.",
      "parentUuid": "a18bec6e_84ad96a6",
      "revId": "b4c94ae15e425442415e316d1b8bbc54abd0db3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}