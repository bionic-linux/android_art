{
  "comments": [
    {
      "key": {
        "uuid": "ab0ebe7a_a60b6884",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 6545,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-09T17:22:07Z",
      "side": 1,
      "message": "Will the rest arrays be passed by value? Anyway to make them passed by reference?",
      "range": {
        "startLine": 6545,
        "startChar": 43,
        "endLine": 6545,
        "endChar": 48
      },
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_86f46c4e",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 6545,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2016-09-09T17:27:05Z",
      "side": 1,
      "message": "no but added things to make it more clear.",
      "parentUuid": "ab0ebe7a_a60b6884",
      "range": {
        "startLine": 6545,
        "startChar": 43,
        "endLine": 6545,
        "endChar": 48
      },
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_6644d09e",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 6545,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-09T17:36:07Z",
      "side": 1,
      "message": "nit: don\u0027t need two functions\n\n  std::reference_wrapper\u003cconst ScopedArenaVector\u003cArtMethod*\u003e\u003e lists[] \u003d {std::cref(list), std::cref(rest)...};\n\n  for (auto\u0026\u0026 list_wrapper : lists) { \n      const ScopedArenaVector\u003cArtMethod*\u003e\u0026 list \u003d list_wrapper.get();\n  // existing code\n  }\n\n  // or just use a pointer instead of reference_wrapper. key is that arrays of references are illegal\n  // but by using an array we can avoid recursively calling this function.",
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_e66ba0ad",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 6545,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2016-09-09T17:41:46Z",
      "side": 1,
      "message": "I like this way better.",
      "parentUuid": "ab0ebe7a_6644d09e",
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_8698ecc6",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 6545,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-09T17:42:01Z",
      "side": 1,
      "message": "Without including \u0026 or \u0026\u0026 it will pass by value, see  http://www.aristeia.com/TalkNotes/C++TypeDeductionandWhyYouCareCppCon2014.pdf page 7",
      "parentUuid": "ab0ebe7a_a60b6884",
      "range": {
        "startLine": 6545,
        "startChar": 43,
        "endLine": 6545,
        "endChar": 48
      },
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_e6f1e05c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 6605,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-09T17:36:07Z",
      "side": 1,
      "message": "nit: separating into 2 CHECKs will make it easier to determine which failed",
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_2688187c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 6605,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2016-09-09T17:41:46Z",
      "side": 1,
      "message": "Really the first is just a short circuit. Also the names should be different from prettyMethod",
      "parentUuid": "ab0ebe7a_e6f1e05c",
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_a61ec879",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 7187,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-09T17:36:07Z",
      "side": 1,
      "message": "Can you turn this into a named constant? 0xFFFF seems pretty magical.",
      "range": {
        "startLine": 7187,
        "startChar": 39,
        "endLine": 7187,
        "endChar": 45
      },
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_a69b68c2",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 5
      },
      "lineNbr": 7187,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2016-09-09T17:41:46Z",
      "side": 1,
      "message": "It\u0027s just getting the lower 16 bits. It\u0027s not very magic",
      "parentUuid": "ab0ebe7a_a61ec879",
      "range": {
        "startLine": 7187,
        "startChar": 39,
        "endLine": 7187,
        "endChar": 45
      },
      "revId": "5b2c149571b2fa168b99f3d2e2bfd1564b8830a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}