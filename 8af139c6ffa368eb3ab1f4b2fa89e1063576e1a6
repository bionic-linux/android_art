{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "77ab1817_ff5fa6bb",
        "filename": "libartservice/service/java/com/android/server/art/Dexopter.java",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-22T22:42:18Z",
      "side": 1,
      "message": "Why should any of this be in play when forcing the filter? It\u0027s more consistent and hence easier to reason about if the forcing is without exception, and if it results in dex2oat failing or the runtime not being able to use the files I argue it\u0027s up to the user to contemplate the consequences.\n\nAlso, with an override of the user\u0027s wish here, one could argue a warning message about it is in order from the `pm` command. It\u0027s easier to just pass it on and let the user look for the error from dex2oat instead (if any).",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 365,
        "endChar": 9
      },
      "revId": "8af139c6ffa368eb3ab1f4b2fa89e1063576e1a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbd347c5_c1721fec",
        "filename": "libartservice/service/java/com/android/server/art/Dexopter.java",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-01-23T14:11:48Z",
      "side": 1,
      "message": "Let me talk about those conditions one by one.\n\n`isVmSafeMode`:\n\nhttps://developer.android.com/guide/topics/manifest/application-element#vmSafeMode\n\n\u003e This attribute was adapted in API level 22, where a value of \"true\" disabled the ART ahead-of-time (AOT) compiler.\n\nIf we ignore this condition, we\u0027ll be violating this guarantee.\n\n`isDebuggable`:\n\nAs the comment on line 336-342 said, the runtime will ignore the compiled code anyway. If we force \"speed-profile\" or \"speed\", users will see that filter in DexoptResult and in the dump, while the runtime treats the app as if it\u0027s in \"verify\", so it will be even harder to reason about.\n\n`isUseEmbeddedDex`:\n\nhttps://developer.android.com/privacy-and-security/security-dex\n\n\u003e On devices running Android 10 (API level 29) and higher you can tell the platform to run embedded DEX code directly from your app\u0027s APK file. This option can help prevent an attack if an attacker ever managed to tamper with the locally compiled code on the device.\n\nThis is for security. If we ignore this condition, we\u0027ll be providing an attack vector.\n\n`FLAG_IGNORE_PROFILE`:\n\nThe order of precedence doesn\u0027t matter.\n\nCurrently, it\u0027s impossible for `FLAG_IGNORE_PROFILE` and `FLAG_FORCE_COMPILER_FILTER` to co-exist. `FLAG_IGNORE_PROFILE` is set through `--ignore-dexopt-profile` in the `adb install` command; `FLAG_FORCE_COMPILER_FILTER` is set through `-m \u003ccompiler-filter\u003e` in the `pm compile` command.\n\nTaking a step back, I can\u0027t think of any use case where `FLAG_IGNORE_PROFILE` and `FLAG_FORCE_COMPILER_FILTER` should co-exist.\n\nAccording to the javadoc on `FLAG_IGNORE_PROFILE`:\n\n\u003e This option is especially useful when the compiler filter is not explicitly specified.\n\nAccording to the javadoc on `FLAG_FORCE_COMPILER_FILTER`:\n\n\u003e Whether to force the specified compiler filter.\n\nAs you can see, their use cases conflict with each other. That\u0027s why the order of precedence doesn\u0027t matter.",
      "parentUuid": "77ab1817_ff5fa6bb",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 365,
        "endChar": 9
      },
      "revId": "8af139c6ffa368eb3ab1f4b2fa89e1063576e1a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b7a1d42_c16f5de6",
        "filename": "libartservice/service/java/com/android/server/art/Dexopter.java",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-23T17:58:52Z",
      "side": 1,
      "message": "You\u0027re assuming the user runs this with the purpose to load it into the runtime. This is a developer tool, so that\u0027s not at all certain. They may want to compile to see the size, or the dex2oat time, or whatever.\n\n\u003e users will see that filter in DexoptResult and in the dump, while the runtime treats the app as if it\u0027s in \"verify\", so it will be even harder to reason about.\n\nRegardless what we do here, the runtime ought to explain why it isn\u0027t loading a file (at least in some debug logging mode). Isn\u0027t that the case? We can\u0027t assume we\u0027ll perfectly anticipate the runtime behaviour anyway.\n\n\u003e This is for security. If we ignore this condition, we\u0027ll be providing an attack vector.\n\nThe runtime blocks that too, yes? I suppose we\u0027re talking about defense in depth here, so that\u0027s the only compelling case.\n\nStill, I maintain that we should let the user know when we override the forced filter. Ideally in the command output, but that\u0027s too much work. However we can still drop something about it in the logcat.",
      "parentUuid": "bbd347c5_c1721fec",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 365,
        "endChar": 9
      },
      "revId": "8af139c6ffa368eb3ab1f4b2fa89e1063576e1a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e12263ac_b52bd7de",
        "filename": "libartservice/service/java/com/android/server/art/Dexopter.java",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-01-23T19:16:17Z",
      "side": 1,
      "message": "\u003e You\u0027re assuming the user runs this with the purpose to load it into the runtime.\n\nYes, I want to minimize user\u0027s confusion in major use cases rather than supporting minor use cases, unless there is a good reason.\n\n\u003e Regardless what we do here, the runtime ought to explain why it isn\u0027t loading a file (at least in some debug logging mode). Isn\u0027t that the case?\n\nYou can take a look at the callers of [`IsJavaDebuggable()`](https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/runtime.h;l\u003d838;drc\u003dd19b6a90b6d689ca4961116a7f35234fb9931169). I\u0027m not sure if any of those prints useful logs or the logs that they print are understandable by ordinary users.\n\n\u003e We can\u0027t assume we\u0027ll perfectly anticipate the runtime behaviour anyway.\n\nThat\u0027s true, but I want to minimize user\u0027s confusion when we can.\n\n\u003e The runtime blocks that too, yes?\n\nYou are right. Initially I thought it didn\u0027t because I couldn\u0027t find any reference to the flag in the runtime, but it turns out that the flag is [handled in the framework](https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/services/core/java/com/android/server/am/ProcessList.java;l\u003d1894;drc\u003d36fc7d357b7ffb7bb1f42d9d487a9d87cc767347).\n\n\u003e Still, I maintain that we should let the user know when we override the forced filter.\n\nI agree. I was asked by others more than once why a package isn\u0027t dexopted with the desired compiler filter. Added logging. ([Test logs](https://paste.googleplex.com/5832316205662208))\n\n\u003e Ideally in the command output, but that\u0027s too much work.\n\nWe actually print the actual compiler filter after adjustments if the user passes `-v` to `pm compile`, though we don\u0027t print specific reasons for the adjustments. It\u0027s unfortunate that we have to hide the actual compiler filter behind the `-v` flag for compatibility reasons.",
      "parentUuid": "6b7a1d42_c16f5de6",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 365,
        "endChar": 9
      },
      "revId": "8af139c6ffa368eb3ab1f4b2fa89e1063576e1a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cb6951d_42e2f74f",
        "filename": "libartservice/service/java/com/android/server/art/Dexopter.java",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-01-24T12:04:57Z",
      "side": 1,
      "message": "This is a developer CUJ; the goals are different here. Any overrides and attempts to second guess what the user wants adds to the confusion rather than makes it less. The express purpose of the force flag is after all to skip all that and just do what the user tells us to.\n\nAlso, I don\u0027t think we can confidently say what\u0027s a minor use case and not in developer workflows. They\u0027re more diverse and even less common ones may be important when they\u0027re actually needed.\n\nThat the files may not be usable later doesn\u0027t overshadow this. What we could do to minimise that confusion is to document in the help text that compiled code produced with `-m` may be rejected by the runtime for various reasons.\n\n\u003e You can take a look at the callers of IsJavaDebuggable().\n\nI tried, but I gave up trying to find the call path up to where the decision is made whether to use an OAT file or interpreter/JIT (if you can point me to it I\u0027d appreciate it). In any case, if there\u0027s no good logging when the file is loaded then that\u0027s something to fix there.\n\n\u003e You are right. Initially I thought it didn\u0027t because I couldn\u0027t find any reference to the flag in the runtime, but it turns out that the flag is handled in the framework.\n\nInteresting, I guess it should end up in [`OatFileManager.only_use_system_oat_files_`](https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/oat/oat_file_manager.h;l\u003d168;drc\u003d689cca840843eeced3206da16e475856de953360), but I fail to follow that path too. Afaict it only gets set from the `-Xonly-use-system-oat-files` runtime arg, but that only gets set in a few tests.\n\n\u003e Added logging. (Test logs)\n\nWas that supposed to become a new patchset here?",
      "parentUuid": "e12263ac_b52bd7de",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 365,
        "endChar": 9
      },
      "revId": "8af139c6ffa368eb3ab1f4b2fa89e1063576e1a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48a57fb4_46ddfaac",
        "filename": "libartservice/service/java/com/android/server/art/Dexopter.java",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-01-24T12:49:02Z",
      "side": 1,
      "message": "Looks like we have different understandings on what developers are trying to do with the `-m` flag. In my experience (given all those questions I got from Jetpack team, sys health team, etc.), by specifying `-m`, developers want to see the performance aspect, that is, how the app performs with the given compiler filter. But both of us are just guessing, so I can\u0027t say my understanding is correct.\n\nI get you point, but I\u0027m sorry that I can\u0027t accept creating a huge gap between the dexopt behavior and the runtime behavior. It\u0027s too confusing when developers want to measure the performance, even if we state this in the help text (nobody really reads it).\n\nTo meet halfway, WDYT about failing the `pm compile` command if the `-m` flag can\u0027t be fulfilled due to these conditions?\n\n\u003e Was that supposed to become a new patchset here?\n\nYes, that\u0027s PS2.",
      "parentUuid": "9cb6951d_42e2f74f",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 365,
        "endChar": 9
      },
      "revId": "8af139c6ffa368eb3ab1f4b2fa89e1063576e1a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}