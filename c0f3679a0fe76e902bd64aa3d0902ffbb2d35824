{
  "comments": [
    {
      "key": {
        "uuid": "12da56a9_e9ef7583",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-04T16:39:25Z",
      "side": 1,
      "message": "Please make the callee-save change a separate CL.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 65
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92c566cf_e5df9651",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-03-04T17:16:47Z",
      "side": 1,
      "message": "Unfortunately, if I don\u0027t change the callee-save registers, I get a failure during register allocation.  If one of the inputs to a long Mul is the result of a long Div, the result is in EAX:EDX, and that uses up both register pairs available (EAX:ECX and EDX:EBX).",
      "parentUuid": "12da56a9_e9ef7583",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 65
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12da56a9_89a7d90c",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-04T18:27:39Z",
      "side": 1,
      "message": "Sure. But you should build the regalloc change on top of the callee-save changes.",
      "parentUuid": "92c566cf_e5df9651",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 65
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9273a693_15d3d455",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-03-04T20:55:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12da56a9_89a7d90c",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 65
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7251d2a7_3c7631d6",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 11
      },
      "lineNbr": 1455,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-03-03T20:55:17Z",
      "side": 1,
      "message": "Any clues on why this doesn\u0027t work would be appreciated.  My best guess is that it is due to EAX:EDX being a non-even/even+1 register pair.",
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c86d9_4dbe9917",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 11
      },
      "lineNbr": 999,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-04T15:54:01Z",
      "side": 1,
      "message": "What happens, when you have FP-\u003eDS, DS-\u003eDS, DS-\u003eFP ? Looks to me that you\u0027re going to split the second move, but this is wrong.",
      "range": {
        "startLine": 999,
        "startChar": 0,
        "endLine": 999,
        "endChar": 95
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2d35e94_07d0f645",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 11
      },
      "lineNbr": 999,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-03-04T16:07:28Z",
      "side": 1,
      "message": "Yes, that seems wrong to me. Unfortunately, we want to split it if you replace FP with RP. BTW, is FP \u0027float pair\u0027, or \u0027XMM reg\u0027?\n\nDo you suggest moving the splitting to the ParallelMoveResolver, where we can scan to see if we have register pairs?",
      "parentUuid": "929c86d9_4dbe9917",
      "range": {
        "startLine": 999,
        "startChar": 0,
        "endLine": 999,
        "endChar": 95
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12da56a9_8997d91a",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 11
      },
      "lineNbr": 999,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-04T16:09:32Z",
      "side": 1,
      "message": "In the context of x86, FP can only be XMM reg. Maybe the splitting should be done in the register allocator instead.",
      "parentUuid": "d2d35e94_07d0f645",
      "range": {
        "startLine": 999,
        "startChar": 0,
        "endLine": 999,
        "endChar": 95
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2d35e94_0753d63c",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 11
      },
      "lineNbr": 999,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-03-04T16:53:37Z",
      "side": 1,
      "message": "Thinking about this, splitting a DS-\u003eDS should be okay.  The actual code used will split it anyways, because we are using a core register to copy.  I think the \u0027Contains\u0027 code should get this right.",
      "parentUuid": "12da56a9_8997d91a",
      "range": {
        "startLine": 999,
        "startChar": 0,
        "endLine": 999,
        "endChar": 95
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c86d9_2db7cd3d",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-04T15:54:01Z",
      "side": 1,
      "message": "How can you state things pass with those checks disabled?",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 108,
        "endChar": 50
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2d35e94_47daee67",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-03-04T16:07:28Z",
      "side": 1,
      "message": "Forgot to restore this...  will do so, and try again.  They were disabled earlier in the development process.",
      "parentUuid": "929c86d9_2db7cd3d",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 108,
        "endChar": 50
      },
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7220f282_a45f424b",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 11
      },
      "lineNbr": 1475,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-03-04T23:04:07Z",
      "side": 1,
      "message": "During gc time, it\u0027s possible both the spill slot and the register need to be relocated. So we need to do SetRegisterBit() as long as it\u0027s a reference. What\u0027s the issue you were seeing?",
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f70a1413_b822b9cf",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 11
      },
      "lineNbr": 1475,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-03-05T02:32:21Z",
      "side": 1,
      "message": "The issue was that a reference was in ECX at the bottom of a loop.  In this case, the parent also had a spill slot, so it wasn\u0027t marking ECX as an object, and RegisterContainsObject wasn\u0027t set.  Although TestSuspend saved and restored ECX, since it wasn\u0027t marked as an object reg, it wasn\u0027t updated by the GC.\n\nShould this be just:\nif (current-\u003eGetType() \u003d\u003d Primitive::kPrimNot) { ...SetRegisterBit} ??",
      "parentUuid": "7220f282_a45f424b",
      "revId": "c0f3679a0fe76e902bd64aa3d0902ffbb2d35824",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}