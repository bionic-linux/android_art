{
  "comments": [
    {
      "key": {
        "uuid": "79d47637_2a1a46b8",
        "filename": "runtime/base/scoped_arena_containers.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f26ee4_9be50e92",
        "filename": "runtime/base/scoped_arena_containers.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79d47637_2a1a46b8",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f936a66e_41e6b24a",
        "filename": "runtime/base/stl_util.h",
        "patchSetId": 4
      },
      "lineNbr": 148,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-20T18:34:48Z",
      "side": 1,
      "message": "Can you also declare the DestroyOnlyDelete\u003cT[]\u003e specialization and deliberately omit definition? That will prevent people from using DestroyOnlyUniquePtr\u003cT[]\u003e which is probably not what they want. It doesn\u0027t work with arenas and I don\u0027t even see any way how to portably implement it for normal new[] allocations anyway.",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 148,
        "endChar": 2
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d90802ae_28eca078",
        "filename": "runtime/base/stl_util.h",
        "patchSetId": 4
      },
      "lineNbr": 148,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T18:56:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f936a66e_41e6b24a",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 148,
        "endChar": 2
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_ea779ebe",
        "filename": "runtime/base/stl_util.h",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "IMHO DestroyOnlyUniquePtr is an anti-pattern because this isn\u0027t Java and freeing memory is actually important to maintain sanity.\n\nThere should be an ArenaUniquePtr or UniquePtrArena (whatever you want to call it) which works *only* by deleting within the arena.\n\nDebug/valgrind modes could store the arena as an extra field (2x pointers instead of 1) so it can deallocate on the arena.\n\n(the arena pointer can be stored by allocating +sizeof(void*) more and storing it in the pre-header, which wastes space in debug mode in return for better safety. maybe there\u0027s an even better way to get back to the arena pointer from the address, vmarko might know).\n\n  debug memory layout of a debug arena object:\n\n  |-------------------------------------|\n  | arena ptr |  allocated memory  .... |\n  |-------------------------------------|\n              ^\n              |\n             unique ptr points here\n\nDouble deletes should be checked, not actually deleting should be checked.",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_aa3e3681",
        "filename": "runtime/base/stl_util.h",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Needing to remember to use ~T() everywhere is more of an antipattern IMO.",
      "parentUuid": "79d47637_ea779ebe",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ec2e3d_489f8ed2",
        "filename": "runtime/dex_instruction.h",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "Why only this?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99020a8c_2daf0ed0",
        "filename": "runtime/dex_instruction.h",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Showed up in profile, the other ones are already inlined.",
      "parentUuid": "b9ec2e3d_489f8ed2",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39de7e5b_77d95b55",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 705,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "This isn\u0027t very clean, this should be brought out to a helper\n\n   unique_ptr\u003cT\u003e MakeArenaArrayZeroed\u003cT\u003e(arena, size);",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91146d4_d74ebfaa",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 705,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Seems like overkill.",
      "parentUuid": "39de7e5b_77d95b55",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19345a65_65bbc04c",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-20T18:34:48Z",
      "side": 1,
      "message": "No longer true, remove.",
      "range": {
        "startLine": 127,
        "startChar": 2,
        "endLine": 127,
        "endChar": 77
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ec2e3d_48866ea8",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T18:56:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19345a65_65bbc04c",
      "range": {
        "startLine": 127,
        "startChar": 2,
        "endLine": 127,
        "endChar": 77
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ec2e3d_28232a48",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "This needs to be an arena unique ptr",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "595172a7_7fb82b4e",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-20T19:19:42Z",
      "side": 1,
      "message": "Do you want all array allocations on the arena to take additional 4B/8B, so that we can implement the ArenaDelete\u003cT[]\u003e specialization? If alignof(T)\u003d\u003d8, it\u0027s 8B also on 32-bit architectures.",
      "parentUuid": "b9ec2e3d_28232a48",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791716fc_1851699d",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T20:18:24Z",
      "side": 1,
      "message": "Not sure what you mean, can you elaborate?\n\nMy original thought (comments in stl_util.h) was that we only introduce extra overhead for either debug or memory checking modes (i.e. no overhead for release / no memory check).",
      "parentUuid": "595172a7_7fb82b4e",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91146d4_776f13e9",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T20:30:25Z",
      "side": 1,
      "message": "Ah, I think it\u0027s because the size is untracked right?\n\nThe type being allocated knows the size though, so we can ask for it.\n\n  template \u003ctypename T\u003e\n  void delete(T* ptr) {\n    size_t array_size \u003d ptr-\u003eGetSizeOf();\n    // made up deleter function\n    // that can mark the bits as unallocated\n    ArenaDeleteArray(ptr, array_size);\n  }\n\n  struct InstructionFlags {\n    size_t GetSizeOf() const {\n      return sizeof(*this) + instruction_length_;\n    }\n  }\n\nThat would work for release modes.\n\nIf it\u0027s debug/memcheck only then we don\u0027t even need to do this, just store the size in the preheader.\n\n   ---------------------------------\n   | arena ptr | array size | data |\n   ---------------------------------\n                            ^\n                            |\n                          unique_ptr.get()\n\n(and of course it can use a custom deleter)",
      "parentUuid": "791716fc_1851699d",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f936a66e_41fd52ca",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-20T20:36:16Z",
      "side": 1,
      "message": "Yes, that\u0027s because we don\u0027t track the size of the array. And it\u0027s indeed a simple array and the first element doesn\u0027t know how many elements are there, so we cannot do the GetSizeOf() trick without overhead either.",
      "parentUuid": "f91146d4_776f13e9",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_aab87617",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T21:19:42Z",
      "side": 1,
      "message": "Ok, thanks for elaborating.\n\nSo can we just do the release 0-overhead/non-release some overhead?",
      "parentUuid": "f936a66e_41fd52ca",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19345a65_2537f87d",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-20T21:42:30Z",
      "side": 1,
      "message": "Not if you want to actually destroy elements of an array held by ArenaUniquePtr\u003cT[]\u003e in release build.",
      "parentUuid": "79d47637_aab87617",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39111e0a_88c523c4",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T22:21:17Z",
      "side": 1,
      "message": "Well, the size has to be stored somewhere right if we actually wanted to call the destructor on each element in T, in which case it might as well be in the arena.\n\nThat being said we only need to call the destructor on elements that are non-trivial, and hence only need the overhead for non-trivial types.\n\n  // Slow path, user-defined destructor in self or in a field\n  // This can also be used for debugging\n  template \u003ctypename T, typename\u003dvoid\u003e\n  T* AllocateArray(size_t count) {\n    size_t actual_size \u003d sizeof(T) * count;\n    actual_size +\u003d sizeof(size_t);\n\n    uint8_t* ptr \u003d actual_allocator(actual_size);\n\n    *(size_t*)ptr \u003d count;\n    return (T*)(ptr + sizeof(size_t));\n  }\n\n  // Fast path, no user-defined destructors anywhere\n  template \u003ctypename T, typename \u003d \n                        typename std::enable_if\u003cstd::is_trivial\u003cT\u003e\u003e::type\u003e::type\u003e\n  T* AllocateArray(size_t count) {\n    size_t actual_size \u003d sizeof(T) * count;\n\n    uint8_t* ptr \u003d actual_allocator(actual_size);\n\n    return (T*)ptr;\n  }\n\n(except implemented with proper style, and the deleters could be done analogously)",
      "parentUuid": "19345a65_2537f87d",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_2575d951",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T22:36:28Z",
      "side": 1,
      "message": "minor: strictly speaking it would be \u0027void* operator new[](std::size_t count, Arena\u0026 arena)\u0027 and not actually \u0027AllocateArray.\u0027\n\nTo make things clean we\u0027d still want a separate \"ArenaUniquePtr\u003cT\u003e MakeUniqueArenaPtr(Arena\u0026, Args\u0026\u0026...)\" function which calls the new(arena) operator under the hood and is specialized to avoid storing \u0027arena\u0027.\n\n-----\nIn other words it\u0027s the special new/delete operators which should know about whether or not the extra bytes are allocated, not the unique ptr itself.",
      "parentUuid": "39111e0a_88c523c4",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99f3ea1a_13abfeb0",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9ec2e3d_28232a48",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791716fc_3efd2d67",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "If you want to call the destructor on each element, its probably better to use a ScopedArenaVector?",
      "parentUuid": "39111e0a_88c523c4",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39111e0a_8d37f57b",
        "filename": "runtime/verifier/method_verifier.h",
        "patchSetId": 4
      },
      "lineNbr": 732,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Seems not worth it.",
      "parentUuid": "595172a7_7fb82b4e",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d90802ae_48211469",
        "filename": "runtime/verifier/reg_type-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "Where is the delete operator that takes the arena?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d90802ae_6363d91b",
        "filename": "runtime/verifier/reg_type-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "I don\u0027t think that is required, after looking at ArenaObject.",
      "parentUuid": "d90802ae_48211469",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791716fc_78633d1b",
        "filename": "runtime/verifier/reg_type.h",
        "patchSetId": 4
      },
      "lineNbr": 287,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "Delete operator taking arena?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ec2e3d_6b3a4cb1",
        "filename": "runtime/verifier/reg_type.h",
        "patchSetId": 4
      },
      "lineNbr": 287,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "791716fc_78633d1b",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39111e0a_6731dace",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "Who is responsible for cleaning up the string then?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_8a6dba81",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Its in the arena, when the arena goes out of scope it gets cleaned up.",
      "parentUuid": "39111e0a_6731dace",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99f3ea1a_b8278982",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 274,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "nit: magic numbers deserve a constant, or at the very least a comment",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 27
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791716fc_9893b999",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 274,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99f3ea1a_b8278982",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 27
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b940aed4_5fb8cb16",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-20T18:34:48Z",
      "side": 1,
      "message": "This is in bits, so 64. Also use plural in the comment.",
      "range": {
        "startLine": 342,
        "startChar": 23,
        "endLine": 342,
        "endChar": 24
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ec2e3d_085bc6e1",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T18:56:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b940aed4_5fb8cb16",
      "range": {
        "startLine": 342,
        "startChar": 23,
        "endLine": 342,
        "endChar": 24
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39de7e5b_7480393b",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "nit: please no magic numbers in our code base, put the 2 into scoped arena as a constexpr with a comment.",
      "parentUuid": "b940aed4_5fb8cb16",
      "range": {
        "startLine": 342,
        "startChar": 23,
        "endLine": 342,
        "endChar": 24
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_ca274250",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39de7e5b_7480393b",
      "range": {
        "startLine": 342,
        "startChar": 23,
        "endLine": 342,
        "endChar": 24
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791716fc_786cddf2",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 389,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "AddEntry should take a unique_ptr so it\u0027s clear it\u0027s taking over ownership",
      "range": {
        "startLine": 389,
        "startChar": 9,
        "endLine": 389,
        "endChar": 17
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ec2e3d_8b35109d",
        "filename": "runtime/verifier/reg_type_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 389,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Overkill",
      "parentUuid": "791716fc_786cddf2",
      "range": {
        "startLine": 389,
        "startChar": 9,
        "endLine": 389,
        "endChar": 17
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "791716fc_783a1dff",
        "filename": "runtime/verifier/reg_type_cache.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "nit: comments?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_4a90f2d6",
        "filename": "runtime/verifier/reg_type_cache.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "791716fc_783a1dff",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d47637_6a95ee36",
        "filename": "runtime/verifier/reg_type_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 657,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "Can\u0027t these 2 lines just go into the RegTypeTest struct to avoid this copy-and-paste?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39111e0a_0df5a5ef",
        "filename": "runtime/verifier/reg_type_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 657,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79d47637_6a95ee36",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f26ee4_9b53cefe",
        "filename": "runtime/verifier/register_line-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "nit: indentation needs 4 more spaces",
      "range": {
        "startLine": 187,
        "startChar": 43,
        "endLine": 187,
        "endChar": 44
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39111e0a_ed1029d5",
        "filename": "runtime/verifier/register_line-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9f26ee4_9b53cefe",
      "range": {
        "startLine": 187,
        "startChar": 43,
        "endLine": 187,
        "endChar": 44
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91146d4_9cbbcc4b",
        "filename": "runtime/verifier/register_line.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "nit: please comment on what the uints are",
      "range": {
        "startLine": 62,
        "startChar": 48,
        "endLine": 62,
        "endChar": 56
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39de7e5b_97a28717",
        "filename": "runtime/verifier/register_line.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f91146d4_9cbbcc4b",
      "range": {
        "startLine": 62,
        "startChar": 48,
        "endLine": 62,
        "endChar": 56
      },
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ec2e3d_48b5ce1b",
        "filename": "runtime/verifier/register_line.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-20T19:05:17Z",
      "side": 1,
      "message": "nit: public method missing comments?",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39111e0a_2d034191",
        "filename": "runtime/verifier/register_line.h",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-20T23:02:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9ec2e3d_48b5ce1b",
      "revId": "5e0990073c6bf07e862d4b0d5a5ec5a1fe63cc06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}