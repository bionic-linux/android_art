{
  "comments": [
    {
      "key": {
        "uuid": "ce980f73_efd04483",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "UMIN",
      "range": {
        "startLine": 480,
        "startChar": 4,
        "endLine": 480,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e192479_16e1890b",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T16:20:59Z",
      "side": 1,
      "message": "As usual, you are one step ahead :-) In the current CL we will never hit the narrow type case (so I can guess your next comment on removing them?)\n\nNote that the SIMD min/max will get a signed/unsigned attribute and the vectorizer will set that attribute correctly for the narrower type (because it is possible that both char and short are involved in either a signed or unsigned min/max operation depending on the context).\n\nIf you prefer, I can do that in this CL already.",
      "parentUuid": "ce980f73_efd04483",
      "range": {
        "startLine": 480,
        "startChar": 4,
        "endLine": 480,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f52fb1e_1f5a8d00",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-12T16:59:53Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "4e192479_16e1890b",
      "range": {
        "startLine": 480,
        "startChar": 4,
        "endLine": 480,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ab86c46_1447332e",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T17:36:37Z",
      "side": 1,
      "message": "Added the concept of signed/unsigned, so future extensions are clear",
      "parentUuid": "5f52fb1e_1f5a8d00",
      "range": {
        "startLine": 480,
        "startChar": 4,
        "endLine": 480,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59b57c5c_50b80823",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 517,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "UMAX",
      "range": {
        "startLine": 517,
        "startChar": 4,
        "endLine": 517,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0c8fcb9_dcf007c3",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 495,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "PMINUW",
      "range": {
        "startLine": 495,
        "startChar": 4,
        "endLine": 495,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed010894_e84a8a92",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "PMAXUW",
      "range": {
        "startLine": 532,
        "startChar": 4,
        "endLine": 532,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73df9b6d_6c46834d",
        "filename": "compiler/optimizing/code_generator_vector_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 488,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "PMINUW",
      "range": {
        "startLine": 488,
        "startChar": 4,
        "endLine": 488,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2501eb39_68d24428",
        "filename": "compiler/optimizing/code_generator_vector_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "PMAXUW",
      "range": {
        "startLine": 525,
        "startChar": 4,
        "endLine": 525,
        "endChar": 30
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22d83c27_1548a3dc",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1141,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T13:26:19Z",
      "side": 1,
      "message": "Line too long",
      "range": {
        "startLine": 1141,
        "startChar": 0,
        "endLine": 1141,
        "endChar": 104
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c229e529_e5224e0d",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1141,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T16:47:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22d83c27_1548a3dc",
      "range": {
        "startLine": 1141,
        "startChar": 0,
        "endLine": 1141,
        "endChar": 104
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c986ef_8c4f4e5c",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1147,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T13:26:19Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1147,
        "startChar": 0,
        "endLine": 1147,
        "endChar": 104
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f316541a_a53321ff",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1147,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T16:47:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1c986ef_8c4f4e5c",
      "range": {
        "startLine": 1147,
        "startChar": 0,
        "endLine": 1147,
        "endChar": 104
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79f48ff9_46304511",
        "filename": "test/651-checker-byte-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-12T16:59:53Z",
      "side": 1,
      "message": "Why aren\u0027t there loop_optimization after cases? Why aren\u0027t there disassembly after cases?\n\nIt\u0027s neither checking for vector HIR nor SIMD instructions actually being emitted. Am I misunderstanding something?\n\n(Here and in all the other test files)",
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84ce8597_63c46163",
        "filename": "test/651-checker-byte-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T17:36:37Z",
      "side": 1,
      "message": "The narrow test cases need a bit more recognition work in the vectorizer (see the kNoHiBits tests). This is all coming soon, and I tried to keep this CL a bit smaller.",
      "parentUuid": "79f48ff9_46304511",
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0b00bde_ab85fb16",
        "filename": "test/651-checker-char-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "Given my comments in the codegens, `(char)0xffff` would be a very interesting value to use in addition to the range [0,256).",
      "range": {
        "startLine": 55,
        "startChar": 4,
        "endLine": 55,
        "endChar": 58
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f141cea_b949f29c",
        "filename": "test/651-checker-double-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "Use Double.doubleToLongBits() to correctly distinguish between +0.0 and -0.0. It returns a canonical representation for all NaNs, so you can drop the special case above.",
      "range": {
        "startLine": 117,
        "startChar": 15,
        "endLine": 117,
        "endChar": 33
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65cf9345_83405138",
        "filename": "test/651-checker-double-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T16:47:39Z",
      "side": 1,
      "message": "Ah yes, I like this!",
      "parentUuid": "6f141cea_b949f29c",
      "range": {
        "startLine": 117,
        "startChar": 15,
        "endLine": 117,
        "endChar": 33
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84afbb36_30b386ab",
        "filename": "test/651-checker-float-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-12T14:09:37Z",
      "side": 1,
      "message": "Use Float.floatToIntBits().",
      "range": {
        "startLine": 117,
        "startChar": 15,
        "endLine": 117,
        "endChar": 33
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3769bc5f_806f2c37",
        "filename": "test/651-checker-float-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T16:47:39Z",
      "side": 1,
      "message": "nice suggestion",
      "parentUuid": "84afbb36_30b386ab",
      "range": {
        "startLine": 117,
        "startChar": 15,
        "endLine": 117,
        "endChar": 33
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76f37baa_10687693",
        "filename": "test/651-checker-long-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-12T13:26:19Z",
      "side": 1,
      "message": "I suggest adding this to the tests where you put TODO, so that you don\u0027t forget to update those tests once you start supporting type conversions.",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01315631_70b2bb40",
        "filename": "test/651-checker-long-simd-minmax/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-12T16:47:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76f37baa_10687693",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "087482cd5be0cf6aed34d7dfb3631d3711336df1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}