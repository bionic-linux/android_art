{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c9ea8c18_7365ba4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-15T19:14:21Z",
      "side": 1,
      "message": "Thanks Vladimir! PTAL.",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "167e2ee8_e24329f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-17T10:37:21Z",
      "side": 1,
      "message": "Ping on this one :) ",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48f0d2e0_8de51474",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Should we not `DEOPT_OR_RETURN r1, /*is_ref\u003d*/ 1` here? This macro is used for allocation entrypoints. (And `StringBuilderAppend` which can be considered a kind of allocation.)\n\n(If yes, maybe we can also remove the `RETURN_IF_RESULT_IS_NON_ZERO` macro just like the `RETURN_IF_RESULT_IS_ZERO`.)",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6695477_af646d08",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Thanks! I missed StringBuilderAppend. I had it in the initial version but got missed somehow. For other alloc related entry points we use instrumented versions that perform the deopt check. I added a comment for that.",
      "parentUuid": "48f0d2e0_8de51474",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "605fb6a8_1e37a708",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-24T14:54:16Z",
      "side": 1,
      "message": "Have a look at `Heap::AllocObjectWithAllocator()` where we may retry an allocation with instrumentation enabled. So, we probably need to check here as well. (And this should not materially affect allocation performance because the macro is used only in the slow path.)",
      "parentUuid": "a6695477_af646d08",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a405c017_02da6b06",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-29T11:44:08Z",
      "side": 1,
      "message": "You are right. I looked at this but I missed that the original runtime entry point is not instrumented yet. We would still return to an uninstrumented entry point from here. I should have moved the check for deoptimization to Heap::AllocObjectWithAllocator instead of the alloc runtime entry points. We could check in Heap::AllocObjectWithAllocator if a deoptimization is required if the instrumentation is enabled. Though I agree checking for a flag in RETURN_IF_RESULT_IS_NON_ZERO macro won\u0027t be much slower too. \n\nOriginally, we didn\u0027t use a per thread flag and loading the data from the instrumentation was slightly more expensive. With the current implementation the overhead might not be too much. I updated the macro.\n\n+Nicolas WDYT about the current approach that just checks the per-thread deopt flag for alloc methods too? Alternate implementation would be to check for a deopt in AllocObjectWithAllocator which I think might not be that different in terms of performance.",
      "parentUuid": "605fb6a8_1e37a708",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3c1ac7_f29f0845",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-29T11:58:25Z",
      "side": 1,
      "message": "Why do we need it for alloc methods? I expect if we fail to alloc, we just go into the runtime, no?",
      "parentUuid": "a405c017_02da6b06",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56a03af1_12e489b3",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-29T12:20:48Z",
      "side": 1,
      "message": "Let\u0027s say a Thread (T1) is suspended during an alloc (possibly because of a GC) and another thread (T2) redefines a class. Before redefining a class we will install instrumented alloc entry points and eventually when T1 starts execution it will restart the allocation with instrumentation in AllocObjectWithAllocator and it most likely succeeds. Then before returning from the alloc runtime method to JITed code, we need to check if we need a deoptimization since T2 has redefined a class. \n\nMy earlier implementation where we were checking in instrumented alloc entry points (artAlloc*FromCode)  won\u0027t work because only AllocObjectWithAllocator is restarted with the instrumentation. It will return to the non-instrumented runtime entry points (artAlloc*FromCode) which weren\u0027t checking for a deopt. In the current implementation we check just before returning from the runtime method (art_quick_alloc*).",
      "parentUuid": "1e3c1ac7_f29f0845",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee93028d_dc025b70",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-29T12:27:28Z",
      "side": 1,
      "message": "So you\u0027re saying even if we are in the runtime, and realizing we need to deopt, we still need to have the entrypoint check for deopt as this is what we will be returning to?",
      "parentUuid": "56a03af1_12e489b3",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3accc617_d0677c43",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-29T12:51:08Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "ee93028d_dc025b70",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a38deb87_2965aa3b",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 234,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-29T13:30:41Z",
      "side": 1,
      "message": "OK, that\u0027s unfortunate, but can we still make the fast path allocation still not check the flag?",
      "parentUuid": "3accc617_d0677c43",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75feae9e_4986f5c4",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 844,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Note: Suffix `_R1` used to denote the temporary used by the macro. Do we want to keep it or are we deliberately removing it? (I\u0027m OK with either.)",
      "range": {
        "startLine": 844,
        "startChar": 82,
        "endLine": 844,
        "endChar": 126
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c36a095b_62878bca",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 844,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "We don\u0027t use the prefix for x86 even though we use ebx. For consistency I dropped R1 here. If it\u0027s better I will bring back R1 and also update x86 to add _EBX.",
      "parentUuid": "75feae9e_4986f5c4",
      "range": {
        "startLine": 844,
        "startChar": 82,
        "endLine": 844,
        "endChar": 126
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30dda227_1193d7ce",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 844,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-29T11:44:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c36a095b_62878bca",
      "range": {
        "startLine": 844,
        "startChar": 82,
        "endLine": 844,
        "endChar": 126
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26e1a1d7_753cc4c5",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 2390,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Do we need the DEOPT check here?",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47cf1dad_e41871b6",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 2390,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "My initial understanding was incorrect. I thought all invokes should be handling deopt checks already. Though I realised now that we do need to check for a deopt here. This can be also used for field accesses. I fixed this by pushing a deoptimization context and set deopt exception for this case. So we won\u0027t need an explicit deopt check here. It is easier that way since we need the shorty to figure out if the result is a reference or not. This also matches other function calls like art_invoke_*",
      "parentUuid": "26e1a1d7_753cc4c5",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e18782b7_7d37fc21",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 2390,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-24T14:54:16Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "47cf1dad_e41871b6",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8de7555d_da71ec7d",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 2404,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "And here?",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da5564d2_c5824704",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 30
      },
      "lineNbr": 2404,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "8de7555d_da71ec7d",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93cb1936_f7368a76",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "We may need to add more DEOPT points, see comments in the arm file. Please review all occurrences of regex `\\bRETURN_`.",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c60e3f6_c74006a9",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Thanks! I took another look. Done.",
      "parentUuid": "93cb1936_f7368a76",
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a1324d4_27477965",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 30
      },
      "lineNbr": 763,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 763,
        "startChar": 24,
        "endLine": 763,
        "endChar": 44
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "101cc350_251e2e1d",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 30
      },
      "lineNbr": 763,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a1324d4_27477965",
      "range": {
        "startLine": 763,
        "startChar": 24,
        "endLine": 763,
        "endChar": 44
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc23cd7d_618ea6a8",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 497,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Add period at the end of the comment.",
      "range": {
        "startLine": 497,
        "startChar": 52,
        "endLine": 497,
        "endChar": 59
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25105d6a_88d15581",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 497,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc23cd7d_618ea6a8",
      "range": {
        "startLine": 497,
        "startChar": 52,
        "endLine": 497,
        "endChar": 59
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e76bee9_f919cee3",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 642,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Update comment (see line 597).",
      "range": {
        "startLine": 642,
        "startChar": 32,
        "endLine": 642,
        "endChar": 39
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c26d892_41ea5ea3",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 642,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e76bee9_f919cee3",
      "range": {
        "startLine": 642,
        "startChar": 32,
        "endLine": 642,
        "endChar": 39
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9488b5e_cc3b4281",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1608,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Use \"compiled\". The word \"quick\" may be misinterpreted as code compiled by the \"Quick\" compiler which was removed several years ago. (Entrypoint names still contains \"quick\" for legacy reasons.)",
      "range": {
        "startLine": 1608,
        "startChar": 27,
        "endLine": 1608,
        "endChar": 32
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11e5fa67_9a2ebbe3",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1608,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9488b5e_cc3b4281",
      "range": {
        "startLine": 1608,
        "startChar": 27,
        "endLine": 1608,
        "endChar": 32
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "580510dd_b16931d2",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1611,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "interpreted",
      "range": {
        "startLine": 1611,
        "startChar": 16,
        "endLine": 1611,
        "endChar": 27
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66e19e79_d4337018",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1611,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "580510dd_b16931d2",
      "range": {
        "startLine": 1611,
        "startChar": 16,
        "endLine": 1611,
        "endChar": 27
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79ddb7ca_084ec8df",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1627,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "Improve readability:\n\n  if (method_needs_deopt) {\n    return true;\n  }\n  if (!Runtime::Current()-\u003eIsJavaDebuggable()) {\n    return false;\n  }\n\nAnd maybe move the comment into the body of the second `if`.",
      "range": {
        "startLine": 1625,
        "startChar": 2,
        "endLine": 1627,
        "endChar": 3
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de38fc78_70432112",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1627,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79ddb7ca_084ec8df",
      "range": {
        "startLine": 1625,
        "startChar": 2,
        "endLine": 1627,
        "endChar": 3
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "238e1113_77e59f17",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1639,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "This is always false in this code path.",
      "range": {
        "startLine": 1639,
        "startChar": 9,
        "endLine": 1639,
        "endChar": 27
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e1b5761_e0f43fc2",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 30
      },
      "lineNbr": 1639,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "238e1113_77e59f17",
      "range": {
        "startLine": 1639,
        "startChar": 9,
        "endLine": 1639,
        "endChar": 27
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a973704_fa19f3f1",
        "filename": "tools/cpp-define-generator/globals.def",
        "patchSetId": 30
      },
      "lineNbr": 86,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "We should add \"CORE\" to the name and remove the architecture prefix. If we use `RuntimeCalleeSaveFrame` to define this \"constant\", it shall be defined differently for different architectures. (Similar to the `POINTER_SIZE`.)",
      "range": {
        "startLine": 86,
        "startChar": 11,
        "endLine": 86,
        "endChar": 51
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b208ea13_4c0e726f",
        "filename": "tools/cpp-define-generator/globals.def",
        "patchSetId": 30
      },
      "lineNbr": 86,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Thanks! that simplifies it a lot.",
      "parentUuid": "4a973704_fa19f3f1",
      "range": {
        "startLine": 86,
        "startChar": 11,
        "endLine": 86,
        "endChar": 51
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efa04c2e_c2ca592d",
        "filename": "tools/cpp-define-generator/globals.def",
        "patchSetId": 30
      },
      "lineNbr": 90,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "We can use `art::POPCOUNT(art::RuntimeCalleeSaveFrame::GetCoreSpills(art::CalleeSaveType::kSaveEverything))`.",
      "range": {
        "startLine": 87,
        "startChar": 11,
        "endLine": 90,
        "endChar": 49
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df04dbe9_efb1a68d",
        "filename": "tools/cpp-define-generator/globals.def",
        "patchSetId": 30
      },
      "lineNbr": 90,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "efa04c2e_c2ca592d",
      "range": {
        "startLine": 87,
        "startChar": 11,
        "endLine": 90,
        "endChar": 49
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b1d73c4_08576411",
        "filename": "tools/cpp-define-generator/globals.def",
        "patchSetId": 30
      },
      "lineNbr": 91,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-03-17T12:48:52Z",
      "side": 1,
      "message": "We can use `POINTER_SIZE` instead.",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 91,
        "endChar": 36
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "133db07f_3d19b7c9",
        "filename": "tools/cpp-define-generator/globals.def",
        "patchSetId": 30
      },
      "lineNbr": 91,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-03-18T14:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b1d73c4_08576411",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 91,
        "endChar": 36
      },
      "revId": "1b70bc0af8c148a9c3ca98ab69ac174559d0e8dc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}