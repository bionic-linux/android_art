{
  "comments": [
    {
      "key": {
        "uuid": "9310f93f_400a8288",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 138,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-08-19T11:32:25Z",
      "side": 1,
      "message": "Remove this DCHECK, it doesn\u0027t necessarily hold. There can be both core reg and fp reg loads/stores from/to dalvik reg and the insns used for them have different ranges. See ArmMir2Lir::Load/StoreBaseDispBody() and the difference in handling of fp and core regs for kSingle/k32 when 1024 \u003c\u003d displacement \u003c 4092.\n\n(And why is the thum2Form in ArmMir2Lir::Load/StoreBaseDispBody() checking for displacement \u003c 4092 instead of displacement \u003c 4096?)",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13fb2935_a159586d",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-08-19T11:32:25Z",
      "side": 1,
      "message": "We could eliminate this_lir under some circumstances but let\u0027s not complicate the current logic at this point.",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3344ad56_3856ad09",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-19T18:35:45Z",
      "side": 1,
      "message": "I guess this is effectively disabling the str-str below.",
      "parentUuid": "13fb2935_a159586d",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33f66d4a_eb94dced",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-08-20T09:20:34Z",
      "side": 1,
      "message": "This stops the search for:\n\nload value, address\n\nstore new_value, address\n\nIf the store is storing a different value to the memory location than stop.",
      "parentUuid": "3344ad56_3856ad09",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9310f93f_60e7c674",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-08-19T11:32:25Z",
      "side": 1,
      "message": "Why don\u0027t we eliminate LDR-STR? (Not that I would actually expect to see it in the generated code.)",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3344ad56_55837cb3",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-08-19T17:14:11Z",
      "side": 1,
      "message": "We can do LDR SRT as long as check_lir-\u003eoperands[0] \u003d\u003d native_reg_id. E.g:\n\nldr value, address\nstr value, address\n\nPlease note that the following can get here:\nldr value, address\nstr new_value, address",
      "parentUuid": "9310f93f_60e7c674",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13fb2935_84d1ca6b",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-08-19T11:32:25Z",
      "side": 1,
      "message": "Use the helper function IsDalvikRegisterClobbered().",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 172,
        "endChar": 3
      },
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9310f93f_808d3abb",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-08-19T11:32:25Z",
      "side": 1,
      "message": "This is broken for load/store generated by ArmMir2Lir::Load/StoreBaseDispBody(). If 1024 \u003c\u003d displacement \u003c 4092, we can erroneously get same_offset \u003d\u003d false for one fp reg and one core reg load/store despite aliasing. We can also get same_offset \u003d\u003d true for the fp reg load/store with displacement \u003e\u003d 1024 and an arbitrary load/store with displacement \u003c 1024.",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3344ad56_380c6d12",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-19T18:35:45Z",
      "side": 1,
      "message": "I would not say that this means *this* code is broken too much.\n\nWe could either clean this up and generalize GetInstructionOffset. For FP load/store instructions, either the displacement is non-zero, in which case the base reg+disp is what we want to look at. Else if it\u0027s zero we need to pull the base + too-large disp from the preceding add. We don\u0027t optimize this in any way, so this pattern should be the only one.\n\nOf course with the optimizations on Quick dying down, it might just be the easiest thing to adjust GetInstructionOffset to return a negative value and treat it like an indexed store, stopping LSE here.",
      "parentUuid": "9310f93f_808d3abb",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13fb2935_47fd0448",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-08-20T09:54:16Z",
      "side": 1,
      "message": "Since https://android-review.googlesource.com/97323 , we can\u0027t reconstruct the original offset based on zero or non-zero displacement.\n\nWe could reuse the alias_info to hold the offset also for heap loads/stores, with some special value indicating it\u0027s out of supported range.",
      "parentUuid": "3344ad56_380c6d12",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f34e9581_05c71227",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-20T22:16:33Z",
      "side": 1,
      "message": "How much improvement did that CL give us, actually, out of curiosity?\n\nI was thinking about the alias_info before. It\u0027s another horrible overloading, but we can easily use it. I guess 2^17-1 is a decent value, as that static displacement is pretty unlikely. Alternatively, 1 would be fine, too, as objects start with a class reference at 0. Note: I think we should not shift the displacement, as Fred\u0027s change might interact with this.",
      "parentUuid": "13fb2935_47fd0448",
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9310f93f_e3b400d3",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-08-19T12:45:42Z",
      "side": 1,
      "message": "The problem is that ArmMir2Lir::Load/StoreBaseDispBody() cannot stick to this assumption since no indexed load/store exists for fp regs.",
      "range": {
        "startLine": 227,
        "startChar": 56,
        "endLine": 228,
        "endChar": 62
      },
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3344ad56_239e8251",
        "filename": "compiler/dex/quick/local_optimizations.cc",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-19T18:35:45Z",
      "side": 1,
      "message": "See above comment. I had || check_lir_offset in the condition before, but thought all of those would have been sorted out by the filter. I think that\u0027s the easiest change.",
      "parentUuid": "9310f93f_e3b400d3",
      "range": {
        "startLine": 227,
        "startChar": 56,
        "endLine": 228,
        "endChar": 62
      },
      "revId": "d1a18e0d7c92ee87b481337e9cb4c74bff947ee7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}