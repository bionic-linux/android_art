{
  "comments": [
    {
      "key": {
        "uuid": "a88b32df_032a70e1",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 16
      },
      "lineNbr": 5119,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-01-20T19:06:08Z",
      "side": 1,
      "message": "Can you elaborate? I\u0027d expect that you can instantiate only if the class status is kStatusInitialized or kStatusInitializing, the latter allowing instantiation only on the initializer thread.",
      "range": {
        "startLine": 5117,
        "startChar": 0,
        "endLine": 5119,
        "endChar": 30
      },
      "revId": "063fc772b5b8aed7d769cd7cccb6ddc7619326ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284ae270_424b9abf",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 16
      },
      "lineNbr": 5119,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-01-20T19:18:02Z",
      "side": 1,
      "message": "Once we set it to kStatusResolved, a subclass can start to be linked since it thinks its super is already linked. And subclass linking has some assumption of invariants about all the single-implementation flags in its supers. So we need to do UpdateAfterLoadingOf() before setting kStatusResolved, otherwise some asserts will fire.\n\nThe comment is probably not that accurate. It\u0027s more about once kStatusResolved is set, the single-implementation flags are in good form already. I\u0027ll update the comments when I get a chance. Thanks for asking.",
      "parentUuid": "a88b32df_032a70e1",
      "range": {
        "startLine": 5117,
        "startChar": 0,
        "endLine": 5119,
        "endChar": 30
      },
      "revId": "063fc772b5b8aed7d769cd7cccb6ddc7619326ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}