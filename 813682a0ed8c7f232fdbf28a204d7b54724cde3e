{
  "comments": [
    {
      "key": {
        "uuid": "a6eada72_fd71cb35",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-10-15T19:32:42Z",
      "side": 1,
      "message": "NB: This condition is here so that it exactly preserves semantics (i.e. MterpHandleIntrinsic is called exactly iff it was called before)\n\nIn particular, changing the semantic to include kInterface invokes breaks the 638-checker-inline-cache-intrinsic test... I am quite sure why.",
      "range": {
        "startLine": 184,
        "startChar": 2,
        "endLine": 185,
        "endChar": 65
      },
      "revId": "813682a0ed8c7f232fdbf28a204d7b54724cde3e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b453929d_9632f842",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-10-15T19:38:24Z",
      "side": 1,
      "message": "I\u0027m also not sure why you need this change when you only renamed the template parameter?",
      "parentUuid": "a6eada72_fd71cb35",
      "range": {
        "startLine": 184,
        "startChar": 2,
        "endLine": 185,
        "endChar": 65
      },
      "revId": "813682a0ed8c7f232fdbf28a204d7b54724cde3e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b060406d_bfb7aad6",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-10-15T19:43:10Z",
      "side": 1,
      "message": "I set the is_mterp argument true for all invokes form mtrep. \nWhereas the fast_invoke was used only of couple select ones.\n\nI would consider that an improvement as the meaning of template arguments is clear now (fast_invoke was rather abstract), and it somewhat explicitly makes it clear here when we call  MterpHandleIntrinsic (we are very picky).\n\nWhy we can not use the MterpHandleIntrinsic fast path (before or after this CL), puzzles me though.",
      "parentUuid": "b453929d_9632f842",
      "range": {
        "startLine": 184,
        "startChar": 2,
        "endLine": 185,
        "endChar": 65
      },
      "revId": "813682a0ed8c7f232fdbf28a204d7b54724cde3e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a4bb952_54d1acdd",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-10-15T19:44:04Z",
      "side": 1,
      "message": "*Why we can not always use",
      "parentUuid": "b060406d_bfb7aad6",
      "range": {
        "startLine": 184,
        "startChar": 2,
        "endLine": 185,
        "endChar": 65
      },
      "revId": "813682a0ed8c7f232fdbf28a204d7b54724cde3e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7aa94c3_ea81b499",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-10-15T19:52:52Z",
      "side": 1,
      "message": "NotifyInterpreterToCompiledCodeTransition is being called in DoCall, and may significantly accelerate the PIC data collection as the warm threshold may be reached earlier (at least the InvokeVirtualOrInterface call above does nothing when there\u0027s no ProfilingInfo object, and the default for a transition seems to be equal to 500 invokes - while the test threshold is 100)? I think you should copy that into the intrinsic handling call (as all intrinsics are compiled).\n\n(I\u0027d guess that adjusting the iteration count / JIT threshold would also recover the behavior.)",
      "parentUuid": "9a4bb952_54d1acdd",
      "range": {
        "startLine": 184,
        "startChar": 2,
        "endLine": 185,
        "endChar": 65
      },
      "revId": "813682a0ed8c7f232fdbf28a204d7b54724cde3e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}