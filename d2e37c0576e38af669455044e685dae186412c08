{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "190abe02_1ec6dde6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-08-26T20:10:10Z",
      "side": 1,
      "message": "The purpose is to ensure that the compiler doesn\u0027t optimize out the entire loop. volatile would ensure that the computation of sum doesn\u0027t take place, which would require touching the page, as required. Just wanted to clarify: [[maybe_unused]] merely suppresses the warning, right?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 0
      },
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54f41728_c95c9700",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1307979
      },
      "writtenOn": "2022-08-26T21:04:24Z",
      "side": 1,
      "message": "Yes, it only suppresses the warning.",
      "parentUuid": "190abe02_1ec6dde6",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 0
      },
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f489c16e_821b504b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-08-26T20:54:32Z",
      "side": 1,
      "message": "IMO, this is broken on the clang side, at least if we generally want to turn this warning on. Clang should not warn for a VOLATILE variable that is written but not read. The assumption should be that a volatile variable can be read by some external agent, e.g. because it is a device register. Given that it is used to communicate with an external agent, there is no reason whatsoever to expect that it should be read by the program. So why warn?\n\nI personally care less about the device driver aspects of this than being able to make value visible to the debugger even when compiling with -O2. I should be able to assign to a volatile to ensure that. This breaks that ability. ",
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72698b47_87f30425",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1307979
      },
      "writtenOn": "2022-08-26T21:18:41Z",
      "side": 1,
      "message": "\u003e The assumption should be that a volatile variable can be read by some external agent, e.g. because it is a device register.\n\n`volatile_sum` is a local variable, not a pointer, so it can\u0027t be a memory-mapped register or interact with any external agent.\n\nI\u0027m actually not sure whether the write to `volatile_sum` really does anything. `start` is already a pointer to volatile, so the compiler is not allowed to optimize away the reads from `*start`. The loop could be changed to this and it should still work:\n\n```\nwhile (start \u003c end) {\n  *start;\n  start +\u003d kPageSize;\n}\n```",
      "parentUuid": "f489c16e_821b504b",
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "041bcd4e_6fadc588",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-08-26T21:25:20Z",
      "side": 1,
      "message": "Correct, just because `volatile_sum` is marked `volatile` doesn\u0027t prevent the compiler from optimizing access to it, assuming that it can prove that the only way to access it is via this sequence. It is 100% an unused but set variable, which is what the warning is trying to show you. I would -1 this patch because I think `[[maybe_unused]]` is the suboptimal way to fix it. The better solution is to delete the variable entirely, as it just promotes more bad behavior around trying to prevent optimizations but not understanding the language semantics.",
      "parentUuid": "72698b47_87f30425",
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e05bfa07_13e2ac12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-08-26T21:48:53Z",
      "side": 1,
      "message": "It can still interact with a debugger, which is an external agent here.\n\nWould the warning not be generated if this were not a local, or it had its address taken? Even then, I don\u0027t see the warning being useful in catching bugs; it still seems to mostly get in the way of legitimate usage, like for debugging. I think it should just not be generated if the variable is volatile.\n\nHas the warning ever identified a bug where the variable was volatile?\n\nI agree that this code is overly paranoid, and there\u0027s probably a way to do this without volatile_sum. But the IMO, the real question is whether we should fix code to work around what seems to me to be an overzealous warning or fix the warning.\n\n(I don\u0027t like the suggested replacement code. It would take me 20 minutes with the standard to figure out whether it\u0027s correct. *start is an lvalue expression. The load only happens as a result of the rvalue conversion. Is that implied if the result is unused? I think this is one of the sticky language corner cases that I would rather not rely on. I\u0027m also not 100% sure the answer is consistent between C and C++. I agree that just dropping the write to volatile_sum at the end should be OK. If we need a workaround, that may be the cleanest. But I really dislike overzealous warnings.)",
      "parentUuid": "72698b47_87f30425",
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23f368f7_a55bc3e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-08-27T00:31:50Z",
      "side": 1,
      "message": "The C++ specification doesn\u0027t even acknowledge the existence of debuggers. As for a way to handle this, could I suggest that ART implement a helper routine similar to `READ_ONCE` from the Linux kernel (see https://github.com/torvalds/linux/blob/master/include/asm-generic/rwonce.h#L44)? Then you could read these objects into an otherwise unused global variable to ensure that the compiler cannot elide the loads, all without using volatile here in this function.\n\nAs for enabling more warnings like this, we\u0027ve already been having discussions about how to proceed for new warnings, so I\u0027ll follow up with the folks creating these kinds of changes. In any case, I do think some cleanup here would be great, so that we don\u0027t continue cargo-culting things that aren\u0027t clear.",
      "parentUuid": "e05bfa07_13e2ac12",
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65cf8687_37f7746d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-08T20:28:01Z",
      "side": 1,
      "message": "Looking at the C++ standard, I don\u0027t think the \"*start;\" fix is correct; it just evaluates to an lvalue, which is not converted to an rvalue, and hence no load is generated.",
      "parentUuid": "e05bfa07_13e2ac12",
      "revId": "d2e37c0576e38af669455044e685dae186412c08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}