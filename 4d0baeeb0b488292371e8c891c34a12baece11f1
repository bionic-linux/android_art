{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1d44bc16_a008f03d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 6
      },
      "lineNbr": 7791,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-01-07T16:16:15Z",
      "side": 1,
      "message": "Why is this optional (and I\u0027m curious what\u0027s the effect here?)?",
      "range": {
        "startLine": 7791,
        "startChar": 2,
        "endLine": 7791,
        "endChar": 16
      },
      "revId": "4d0baeeb0b488292371e8c891c34a12baece11f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "750d1a02_274ce9af",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 6
      },
      "lineNbr": 7791,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-01-07T16:23:54Z",
      "side": 1,
      "message": "The `ScopedAssertNoThreadSuspension` is wrapped in `std::optional\u003c\u003e` because we need to destroy it before throwing an exception. There is even a comment on the previous line.",
      "parentUuid": "1d44bc16_a008f03d",
      "range": {
        "startLine": 7791,
        "startChar": 2,
        "endLine": 7791,
        "endChar": 16
      },
      "revId": "4d0baeeb0b488292371e8c891c34a12baece11f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c06b1d9b_c70d5390",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 6
      },
      "lineNbr": 7791,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-01-07T16:26:28Z",
      "side": 1,
      "message": "The question was more for my education on what std::optional does here: how is it destroyed before throwing the exception?",
      "parentUuid": "750d1a02_274ce9af",
      "range": {
        "startLine": 7791,
        "startChar": 2,
        "endLine": 7791,
        "endChar": 16
      },
      "revId": "4d0baeeb0b488292371e8c891c34a12baece11f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2aa1f7f7_0cad32ca",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 6
      },
      "lineNbr": 7791,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-01-07T16:29:52Z",
      "side": 1,
      "message": "With `sants.reset()` on lines 7879 and 7894. The same can be achieved with `sants \u003d std::nullopt`.",
      "parentUuid": "c06b1d9b_c70d5390",
      "range": {
        "startLine": 7791,
        "startChar": 2,
        "endLine": 7791,
        "endChar": 16
      },
      "revId": "4d0baeeb0b488292371e8c891c34a12baece11f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88c4b0b9_d4810af8",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 6
      },
      "lineNbr": 7791,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-01-07T16:31:03Z",
      "side": 1,
      "message": "I see, thanks!",
      "parentUuid": "2aa1f7f7_0cad32ca",
      "range": {
        "startLine": 7791,
        "startChar": 2,
        "endLine": 7791,
        "endChar": 16
      },
      "revId": "4d0baeeb0b488292371e8c891c34a12baece11f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca2203d4_2ea876b9",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 6
      },
      "lineNbr": 7873,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-01-07T16:16:15Z",
      "side": 1,
      "message": "Should there be a break here (following comment line 7862 about taking the first entry) ?",
      "revId": "4d0baeeb0b488292371e8c891c34a12baece11f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32bddf2b_5812483b",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 6
      },
      "lineNbr": 7873,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-01-07T16:23:54Z",
      "side": 1,
      "message": "No, the \"first entry\" references the lowest vtable index and here we\u0027re walking backwards with a decreasing `current_index`.",
      "parentUuid": "ca2203d4_2ea876b9",
      "revId": "4d0baeeb0b488292371e8c891c34a12baece11f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}