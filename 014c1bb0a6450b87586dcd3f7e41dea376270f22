{
  "comments": [
    {
      "key": {
        "uuid": "4bd16f3e_55d9ac83",
        "filename": "test/800-smali/smali/catch_handler_on_entry.smali",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-22T17:58:05Z",
      "side": 1,
      "message": "I don\u0027t think this exposes the problem. This was only so I had something that throws an exception to check what the verifier is doing.\n\nWhat you\u0027d have to do here is a call. Then we\u0027d have a call-stack of\n\n   catchHandlerOnEntry\n -\u003esomething-called\n\nNow assume deopt hits, so we have two deopted shadow frames:\n\n -\u003eShadow(something-called)-\u003eShadow(catchHandlerOnEntry)\n\nFurther assume something-called now throws an exception (it\u0027s likely easiest to have something-called in a different class that is not written in smali for this). *Now* the entry check becomes interesting, because it\u0027s EnterInterpreterFromDeopt that handles the queue of shadow frames - and I believe we will fail the check.\n\nMy problem was that I don\u0027t know how to force deopt, and my code was only meant to show that it passes the verifier. I guess some VMDebug function could be used?",
      "range": {
        "startLine": 23,
        "startChar": 7,
        "endLine": 23,
        "endChar": 25
      },
      "revId": "014c1bb0a6450b87586dcd3f7e41dea376270f22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b8a4f30_b06616c3",
        "filename": "test/800-smali/smali/catch_handler_on_entry.smali",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-01-22T18:16:56Z",
      "side": 1,
      "message": "No I don\u0027t thing we fail the check if there is no move-exception. In EnterInterpreterFromDeopt, we\u0027ll see an exception is pending so we\u0027ll find a catch handler. Now 2 possibilities:\n- We don\u0027t find a catch handler in the current method: we don\u0027t enter interpreter and pop the frame. Then we continue with the \"caller\" deoptimized frame.\n- Or we find a catch handler in the current method. If it doesn\u0027t start with a move-exception, we clear the exception  (FindNextInstructionFollowingException) before entering the interpreter with the deoptimized frame at the DEX pc of the catch handler found.\nIn both cases, we never enter the interpreter from a deoptimized frame with a pending exception (if the method does not start with a move-exception a DEX pc 0x0).\n\n\nI created a JDWP test for that in https://android-review.googlesource.com/123850 (look at the DeoptimizationWithExceptionHandlingDebuggee class). It causes a deopt when hitting the breakpoint of the last method in the file. Then we throw a NullPointerException while interpreting a deoptimized frame. It is then caught by the caller which also runs with a deoptimized frame.\n\n\nWe should be able to trigger deoptimization by starting method tracing (it switches everything to interpreter) with VMDebug.startMethodTracing.",
      "parentUuid": "4bd16f3e_55d9ac83",
      "range": {
        "startLine": 23,
        "startChar": 7,
        "endLine": 23,
        "endChar": 25
      },
      "revId": "014c1bb0a6450b87586dcd3f7e41dea376270f22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bd16f3e_9584e4ea",
        "filename": "test/800-smali/smali/catch_handler_on_entry.smali",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-22T18:31:49Z",
      "side": 1,
      "message": "You are right about the clearing (though the test is still not testing what we want...)\n\nHowever, I took a look at the verifier and how it handles MOVE_EXCEPTION. It seems we are simply scanning the handlers that start at that PC and accept the exception types for the registered handlers. We don\u0027t check anywhere whether the exception register will actually contain something (whether we reach the block from an exception \"jump\"), which is odd to me, to say the least.\n\nAs usual, the dex spec isn\u0027t helpful, because it doesn\u0027t cover the case.",
      "parentUuid": "4b8a4f30_b06616c3",
      "range": {
        "startLine": 23,
        "startChar": 7,
        "endLine": 23,
        "endChar": 25
      },
      "revId": "014c1bb0a6450b87586dcd3f7e41dea376270f22",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}