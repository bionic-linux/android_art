{
  "comments": [
    {
      "key": {
        "uuid": "04210b15_1f278e2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-18T10:27:47Z",
      "side": 1,
      "message": "Some quick drive-by comments...",
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ecf7a93_c39c26c3",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1509,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-18T10:27:47Z",
      "side": 1,
      "message": "Avoid default unless it has particular value, kVoid here.",
      "range": {
        "startLine": 1509,
        "startChar": 4,
        "endLine": 1509,
        "endChar": 11
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7c6a7de_631076b3",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1509,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-18T10:50:37Z",
      "side": 1,
      "message": "There are also kUint32 and kUint64 which are not included. We have two ways: either add kUint32 with kInt32 and kUint64 with kInt64 even if they are not reachable because if they were, they would be treated the same, or just keep the default. How do you prefer?",
      "parentUuid": "3ecf7a93_c39c26c3",
      "range": {
        "startLine": 1509,
        "startChar": 4,
        "endLine": 1509,
        "endChar": 11
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93d1f03f_445ac7a8",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1509,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-21T08:34:59Z",
      "side": 1,
      "message": "Let\u0027s leave it as-is.",
      "parentUuid": "d7c6a7de_631076b3",
      "range": {
        "startLine": 1509,
        "startChar": 4,
        "endLine": 1509,
        "endChar": 11
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "632ae2e7_a3269646",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1151,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-18T10:27:47Z",
      "side": 1,
      "message": "VarHandleAccessorNeedsReturnTypeCheck.",
      "range": {
        "startLine": 1151,
        "startChar": 12,
        "endLine": 1151,
        "endChar": 29
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08715c1d_ce0beb1e",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1151,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-18T10:50:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "632ae2e7_a3269646",
      "range": {
        "startLine": 1151,
        "startChar": 12,
        "endLine": 1151,
        "endChar": 29
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b025c3d9_bceeae56",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1159,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-18T10:27:47Z",
      "side": 1,
      "message": "default here will cause some work for other Get accessors, CompareAndExchange and GetAndUpdate.",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1159,
        "endChar": 34
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "292545f2_6ccfe545",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1159,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-18T10:50:37Z",
      "side": 1,
      "message": "GetAndSet and CompareAndExchange are not submitted yet. Right now, the only varhandles that need return type check are the get ones. If I add them now, an unnecessary CheckCast node will be added in the graph (because those are not implemented). My plan was to wait until this is merged and then add those cases in this switch. Is that ok?",
      "parentUuid": "b025c3d9_bceeae56",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1159,
        "endChar": 34
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eee2e00d_dc79e469",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1159,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-21T08:34:59Z",
      "side": 1,
      "message": "Can you make the default UNREACHABLE and add the supported cases here?",
      "parentUuid": "292545f2_6ccfe545",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1159,
        "endChar": 34
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d61f94a_edf3a078",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1159,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-21T08:47:42Z",
      "side": 1,
      "message": "I don\u0027t think the \u0027default\u0027 can be UNREACHABLE, this method is called from BuildInvokePolymorphic so this means it\u0027s called for all invoke polymorphic, even for the non-varhandle ones. The purpose of this method is to add a CheckCast node only when necessary. Return false on default seems to be the right choice.",
      "parentUuid": "eee2e00d_dc79e469",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1159,
        "endChar": 34
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d1d7bc4_1935afd8",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1159,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-21T09:27:27Z",
      "side": 1,
      "message": "There are only two signature polymorphic methods in the non-VarHandle cases. These are handled by the runtime and so this method probably should not be called for them.\n\nWe trivially have all the necessary information for VarHandle accessors:\n\nhttps://source.corp.google.com/aosp-android10/art/runtime/mirror/var_handle.cc;l\u003d96?q\u003dAccessModeTemplate\u0026sq\u003dpackage:android\n\nAre there any returning VarType are the ones that do not need CheckCast when the VarType is a reference?",
      "parentUuid": "8d61f94a_edf3a078",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1159,
        "endChar": 34
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6313d147_e97fefc7",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1159,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-21T12:07:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d1d7bc4_1935afd8",
      "range": {
        "startLine": 1156,
        "startChar": 0,
        "endLine": 1159,
        "endChar": 34
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8aaf5b4f_24fbd8af",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1198,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-18T10:27:47Z",
      "side": 1,
      "message": "Suggest making it clear that this is for VarHandles (and not MethodHandles).\nAn additional constraint is that methods declaring class is VarHandle (ie not MethodHandle).",
      "range": {
        "startLine": 1198,
        "startChar": 6,
        "endLine": 1198,
        "endChar": 23
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec2374d2_5c383028",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1198,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-18T10:50:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8aaf5b4f_24fbd8af",
      "range": {
        "startLine": 1198,
        "startChar": 6,
        "endLine": 1198,
        "endChar": 23
      },
      "revId": "3f099516c625b727fd7d427933ffea2e9598064b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}