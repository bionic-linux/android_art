{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e2f61dd_6112b040",
        "filename": "runtime/mirror/object-refvisitor-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2020-12-09T00:16:17Z",
      "side": 1,
      "message": "Would this load get optimized out?",
      "range": {
        "startLine": 42,
        "startChar": 32,
        "endLine": 42,
        "endChar": 40
      },
      "revId": "b390a4508260414b0f988a54686e4e16ad277814",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9119ba67_9b3f3318",
        "filename": "runtime/mirror/object-refvisitor-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-12-09T00:52:57Z",
      "side": 1,
      "message": "Good catch! Any idea how I can ensure the load takes place? Would calling GetObject is \u0027volatile\u0027 help?",
      "parentUuid": "1e2f61dd_6112b040",
      "range": {
        "startLine": 42,
        "startChar": 32,
        "endLine": 42,
        "endChar": 40
      },
      "revId": "b390a4508260414b0f988a54686e4e16ad277814",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aae7064_3121b713",
        "filename": "runtime/mirror/object-refvisitor-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-12-09T01:05:57Z",
      "side": 1,
      "message": "For real production code, I\u0027d be with Mathieu here. But I think it\u0027s unlikely enough that I wouldn\u0027t worry about it. sleep() is a function call that results in a nanosleep() system call. None of these are annotated as special to the compiler. As far as the compiler is concerned. sleep() could change the class.",
      "parentUuid": "9119ba67_9b3f3318",
      "range": {
        "startLine": 42,
        "startChar": 32,
        "endLine": 42,
        "endChar": 40
      },
      "revId": "b390a4508260414b0f988a54686e4e16ad277814",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0c2c612_570d44b3",
        "filename": "runtime/mirror/object-refvisitor-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2020-12-09T00:16:17Z",
      "side": 1,
      "message": "Could also maybe use gc::Verification to dump info such as what space the object is in.",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 13
      },
      "revId": "b390a4508260414b0f988a54686e4e16ad277814",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f7df478_164ba07b",
        "filename": "runtime/mirror/object-refvisitor-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-12-09T00:52:57Z",
      "side": 1,
      "message": "I also wanted to do that, but couldn\u0027t think of a cleaner of doing that in object-refvisitor.h\n\nI\u0027ll move the whole logic in concurrent_copying.cc file and check for the nullptr at class-offset.",
      "parentUuid": "f0c2c612_570d44b3",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 13
      },
      "revId": "b390a4508260414b0f988a54686e4e16ad277814",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}