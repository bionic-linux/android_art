{
  "comments": [
    {
      "key": {
        "uuid": "e968b80c_b5db4c62",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-04T11:54:51Z",
      "side": 1,
      "message": "Bool is a bit odd as it\u0027s really just a single bit, so it feels wrong to return Int8 which can hold 8 bits.",
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0bb1314_891ae91c",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-10-04T16:12:44Z",
      "side": 1,
      "message": "Why? The storage unit of our Java boolean is one byte, we even have Size(kBool) \u003d\u003d Size(kInt8) in this file, so this feels really right to me.\n\nBut let me try to understand. This change makes perfect sense for the only client of ToSignedType() right now (the vectorizer where packed bytes and packed booleans are compatible). What clients do you see in the future that would not want the boolean included?",
      "parentUuid": "e968b80c_b5db4c62",
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1261817_6a1c8c9d",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-04T16:27:21Z",
      "side": 1,
      "message": "Can we move the function to the loop_optimizer.cc then?",
      "parentUuid": "c0bb1314_891ae91c",
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7d341d6_eb065174",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-10-04T16:59:31Z",
      "side": 1,
      "message": "Yes Sir! (I will probably pick nodes_vector.h for that)",
      "parentUuid": "a1261817_6a1c8c9d",
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed015dd3_2bc8302b",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-04T09:36:55Z",
      "side": 1,
      "message": "That will be a problem when profiling pcs -\u003e dex pcs, won\u0027t it?",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 71,
        "endChar": 62
      },
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5f42e51_88bdeeaf",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-10-04T10:00:06Z",
      "side": 1,
      "message": "Yeah, in hindsight perhaps we should try a bit harder to preserve Dex PCs for synthesized instructions.\n\nI think one of the problems mentioned by Aart was that a loop in the original Dex code, represented by a set of HIR instructions (corresponding to a given Dex PC range) could be turned into several loops of HIR instructions by vectorization optimizations (e.g. because of peeling).\n\nIs that really a problem to have several HIR instructions point to the same Dex PC? Is this supported by the debugger?",
      "parentUuid": "ed015dd3_2bc8302b",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 71,
        "endChar": 62
      },
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4887d546_d5c7844e",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-04T10:03:41Z",
      "side": 1,
      "message": "Yes, that\u0027s supported, and that\u0027s what we should ideally generate. We accept that we may loose that information when doing transformations, but doing it best effort would be great.",
      "parentUuid": "d5f42e51_88bdeeaf",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 71,
        "endChar": 62
      },
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17b42e96_81281341",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-10-04T16:12:44Z",
      "side": 1,
      "message": "Okidoki. Then I will change this to putting the dex_pc back where vmarko removed it instead. Coming up.",
      "parentUuid": "4887d546_d5c7844e",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 71,
        "endChar": 62
      },
      "revId": "20bdfb855853e918e3360ef9d3f943efacf45abf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}