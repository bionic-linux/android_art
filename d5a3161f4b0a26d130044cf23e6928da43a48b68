{
  "comments": [
    {
      "key": {
        "uuid": "61f2f667_214fe902",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-07-30T15:01:29Z",
      "side": 1,
      "message": "Why do you need this change? The check in MoveFromReturnRegister whether we actually need to emit a move should be enough.",
      "revId": "d5a3161f4b0a26d130044cf23e6928da43a48b68",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "952bfe65_bb29eda2",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-30T15:09:08Z",
      "side": 1,
      "message": "I needed this because the DCHECK(out.IsRegister()) fails for some varhandles, as they might expect the output to be in a register pair or fpu register. The locations are built using the dex calling convention, so there is no need for a move in the case of varhandles. Therefore, I needed to check if the move is necessary before the DCHECK.",
      "parentUuid": "61f2f667_214fe902",
      "revId": "d5a3161f4b0a26d130044cf23e6928da43a48b68",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89ca43c8_3c312b31",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-07-30T15:12:01Z",
      "side": 1,
      "message": "Ah, odd that we didn\u0027t have such return types before in this slow path, but you can replace the DCHECK with out.IsRegisterKind.",
      "parentUuid": "952bfe65_bb29eda2",
      "revId": "d5a3161f4b0a26d130044cf23e6928da43a48b68",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "803a8c48_7da1c2c9",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-30T15:32:12Z",
      "side": 1,
      "message": "I tried to use IsRegisterKind, but there are some other things to change. There is also the CHECK on the next line that needs changing (for register pairs). What\u0027s more important though is that I\u0027m not entirely sure the MoveFromReturnRegister method can handle all these cases on all architectures (register, fpu register, register pair, fpu register pair). And since varhandles don\u0027t need any move anyway, I thought it is safer to avoid a change there. However, I can explore more and see if I can make it work without splitting the MoveFromReturnRegister, if you want.",
      "parentUuid": "89ca43c8_3c312b31",
      "revId": "d5a3161f4b0a26d130044cf23e6928da43a48b68",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad2e450_6b3f0caf",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-07-30T15:45:12Z",
      "side": 1,
      "message": "Then we should do a `DCHECK(!invoke_-\u003eGetLocations()-\u003eGetLiveRegisters()-\u003eOverlapsRegisters(out))` and define the `OverlapsRegisters()` to handle all register kinds (core/FP, single/pair).",
      "parentUuid": "803a8c48_7da1c2c9",
      "revId": "d5a3161f4b0a26d130044cf23e6928da43a48b68",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1472dbe1_9b6ed6e0",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-07-31T07:39:34Z",
      "side": 1,
      "message": "MoveFromReturnRegister should be able to handle all kinds, looking at its implementation.",
      "parentUuid": "1ad2e450_6b3f0caf",
      "revId": "d5a3161f4b0a26d130044cf23e6928da43a48b68",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "989d94b3_ed4662df",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-07-31T08:21:48Z",
      "side": 1,
      "message": "The check here is intended to prevent the `out` being overwritten by the RestoreLiveRegisters() below.",
      "parentUuid": "1472dbe1_9b6ed6e0",
      "revId": "d5a3161f4b0a26d130044cf23e6928da43a48b68",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}