{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "95427cde_8010e756",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-08-02T14:46:35Z",
      "side": 1,
      "message": "## Memory regression\nb/293358995 \n\nGood build (separate libart-compiler.so):\n```\n\u003e\u003e\u003e com.android.inputmethod.latin (3438) \u003c\u003c\u003c                                                              \n virtual                     shared   shared  private  private                   Anon      Shmem     File      Shared   Private    \n    size      RSS      PSS    clean    dirty    clean    dirty     swap  swapPSS HugePages PmdMapped PmdMapped Hugetlb  Hugetlb    Locked flags object   \n    6328     6328      166     6328        0        0        0        0        0         0         0      6144        0        0        0   r-x /apex/com.android.art/lib64/libart.so\n    2924      108        2      108        0        0        0        0        0         0         0         0        0        0        0   r-x /apex/com.android.art/lib64/libart-compiler.so\n```\nBad build (libart-compiler merged into libart.so):\n```\n virtual                     shared   shared  private  private                   Anon      Shmem     File      Shared   Private    \n    size      RSS      PSS    clean    dirty    clean    dirty     swap  swapPSS HugePages PmdMapped PmdMapped Hugetlb  Hugetlb    Locked flags object   \n    8912     8648      227     8648        0        0        0        0        0         0         0      8192        0        0        0   r-x /apex/com.android.art/lib64/libart.so \n```\n\nNote that libart.so .text pages are listed in the “File PmdMapped” column, while libart-compiler.so pages are not. So with libart-compiler merged into libart, instead of mapping 108 regular (4KiB) pages for libart-compiler, the process maps one additional 2MiB page from libart, which contributes significantly to RSS. But given that libart is widely shared among the processes and PSS hasn’t regressed, I would say RSS regression can be ignored.\n\n## Performance regressions\nb/293406139 (9%)\nb/293428920 (4-6%)\nb/293386378 (4-6%)\nb/293386255 (3.5%)\n\n@jdduke@google.com do you think these performance regressions are negligible?",
      "revId": "af8cbe3b22fa80d5f6c72bbfab6eb12ac479d00e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61b661fb_2160437e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1064003
      },
      "writtenOn": "2023-08-02T16:24:56Z",
      "side": 1,
      "message": "\u003e  do you think these performance regressions are negligible?\n\nI looked at a couple traces and didn\u0027t see anything obvious. I think the main thing would be to make sure we\u0027re not regressing anything *functional* as far as ART behavior (i.e., nothing is impacted in terms of ART\u0027s logic/JIT/execution), and to make sure that the lib itself is compiled with the same flags?\n\nDo we use any predefined PGO profiles or anything else like that for this target? I vaguely recall we have something for dex2oat, not sure if this change would be impacted.",
      "parentUuid": "95427cde_8010e756",
      "revId": "af8cbe3b22fa80d5f6c72bbfab6eb12ac479d00e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c89fe1df_1af79e76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-08-04T18:21:56Z",
      "side": 1,
      "message": "\u003eDo we use any predefined PGO profiles or anything else like that for this target?\n\nYes, there is `dex2oat-pgo-defaults` which is used in `libart-compiler`: https://cs.android.com/android/platform/superproject/main/+/main:art/dex2oat/Android.bp;l\u003d235\nAnd `libart.so` uses AFDO, which is not compatible with PGO: b/255683875\nThe only way to to combine AFDO and PGO at the moment is to build these libraries separately (`libart-compiler.a` with PGO and `libart-runtime.a` with AFDO) and then whole static link them into `libart.so`.\n\n\n\nI\u0027ve run some benchmarks without AFDO/PGO to see if this CL itself introduces any perf changes.\n\nhttp://dashboards/_0e1b06dd_a79e_4433_b625_b62e5cac004b?p\u003dBootImageProfileId:36100\nCandidate 36101 -- separate libart.so/libart-compiler.so, no AFDO/PGO\nCandidate 36102 -- merged libart.so, no AFDO/PGO\nThe difference is very small, but it looks like the merged libart variant has slightly worse app startup time.\n\nmicrobench/instr_metric/resources_perf:\nNo PGO/AFDO, separate libart.so/libart-compiler.so:\nhttps://android-build.googleplex.com/builds/abtd/run/L38200000962372758\nhttps://android-build.googleplex.com/builds/abtd/run/L48100000962374412\nhttps://android-build.googleplex.com/builds/abtd/run/L49200000962373780\ngetFont (mean): 8089 8350 8495\n\nNo PGO/AFDO, merged libart:\nhttps://android-build.googleplex.com/builds/abtd/run/L39100000962359799\nhttps://android-build.googleplex.com/builds/abtd/run/L82800000962375777\nhttps://android-build.googleplex.com/builds/abtd/run/L24500000962374026\ngetFont (mean): 8717 8568 8727\n\nOn the other hand, revert of the initial merge CL shows no performance changes in ART golem benchmarks: http://go/lem/Revision?repository\u003dart\u0026revision\u003d20027",
      "parentUuid": "61b661fb_2160437e",
      "revId": "af8cbe3b22fa80d5f6c72bbfab6eb12ac479d00e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}