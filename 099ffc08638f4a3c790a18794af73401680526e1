{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b7c09b1f_091802ab",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4313,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-11-15T09:50:49Z",
      "side": 1,
      "message": "FYI this is common for both the invoke interface and invoke virtual path. Not sure if there\u0027s an easy way to deduplicate it without more `cmp` or a refactor, though.\n\nIf you do a refactor, I\u0027d move the `  __ cmpl(method_handle_kind, Immediate(mirror::MethodHandle::Kind::kInvokeStatic));` near the `Direct` check above since they are similar.",
      "range": {
        "startLine": 4312,
        "startChar": 0,
        "endLine": 4313,
        "endChar": 43
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfe985d5_417a3f00",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4313,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-11-15T10:22:43Z",
      "side": 1,
      "message": "Agree. I was thinking about too. We can check that `kind` is less than `kInvokeTransform` [1] and then extract this common part.\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/runtime/mirror/method_handle_impl.h;l\u003d53;drc\u003d56d62450fcd69434b94158a42f1a195bd7ee858b",
      "parentUuid": "b7c09b1f_091802ab",
      "range": {
        "startLine": 4312,
        "startChar": 0,
        "endLine": 4313,
        "endChar": 43
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddaa7142_50e3744e",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4317,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-11-15T09:50:49Z",
      "side": 1,
      "message": "```\n    __ movl(temp, Address(receiver, mirror::Object::ClassOffset().Int32Value()));\n    __ MaybeUnpoisonHeapReference(temp);\n    __ movl(temp, Address(temp, mirror::Class::IfTableOffset().Uint32Value()));\n    __ MaybeUnpoisonHeapReference(temp);\n```\nemulating https://cs.android.com/android/platform/superproject/main/+/main:art/compiler/optimizing/code_generator_x86_64.cc;l\u003d7394-7399;drc\u003df8ac417533d9ebee6d02ad84a1e6a6b056e6720d\n\nIn that code they are also maybe poisoning the class (`decl_class` in your case) so that they don\u0027t have to maybe unpoison each class.\n\nYou are probably not running with poisoning enabled and that\u0027s why this was succeeding.",
      "range": {
        "startLine": 4316,
        "startChar": 0,
        "endLine": 4317,
        "endChar": 65
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55aec9cd_9eaced78",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4317,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-11-15T10:22:43Z",
      "side": 1,
      "message": "Added. Should I just add `ART_HEAP_POISONING\u003dtrue` to enable it?",
      "parentUuid": "ddaa7142_50e3744e",
      "range": {
        "startLine": 4316,
        "startChar": 0,
        "endLine": 4317,
        "endChar": 65
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "531d5de7_23498045",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4317,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-11-15T15:10:27Z",
      "side": 1,
      "message": "Not added for the \n\n\u003e In that code they are also maybe poisoning the class (decl_class in your case) so that they don\u0027t have to maybe unpoison each class.\n\ncase.\n\n\u003e Added. Should I just add ART_HEAP_POISONING\u003dtrue to enable it?\n\nYes, I think that should be enough.",
      "parentUuid": "55aec9cd_9eaced78",
      "range": {
        "startLine": 4316,
        "startChar": 0,
        "endLine": 4317,
        "endChar": 65
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3876af4_74a2a82e",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4331,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-11-15T09:50:49Z",
      "side": 1,
      "message": "`.Uint32Value()`",
      "range": {
        "startLine": 4331,
        "startChar": 63,
        "endLine": 4331,
        "endChar": 65
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47abf61f_0bb56924",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4331,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-11-15T10:22:43Z",
      "side": 1,
      "message": "Can using dedicated constructor which takes `MemberOffset` [1] lead to errors?\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/compiler/utils/x86_64/assembler_x86_64.h;l\u003d224;drc\u003d68f7caffe7a2e7d728d5447b28cf8c422be46748",
      "parentUuid": "c3876af4_74a2a82e",
      "range": {
        "startLine": 4331,
        "startChar": 63,
        "endLine": 4331,
        "endChar": 65
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc6bf18a_2366436c",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4331,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-11-15T15:10:27Z",
      "side": 1,
      "message": "That one uses `Int32` internally instead of `Uint32` so the raw value can be static_casted into the wrong type. Not sure if this can result into errors",
      "parentUuid": "47abf61f_0bb56924",
      "range": {
        "startLine": 4331,
        "startChar": 63,
        "endLine": 4331,
        "endChar": 65
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd011b6a_5b5d9bfc",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4344,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-11-15T09:50:49Z",
      "side": 1,
      "message": "You found the match in the loop with `Address(temp, counter, TIMES_4, iftable_data_offset)`. Why are you adding kHeapReferenceSize?",
      "range": {
        "startLine": 4344,
        "startChar": 50,
        "endLine": 4344,
        "endChar": 90
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "285a1c24_d7c624bf",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4344,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-11-15T10:22:43Z",
      "side": 1,
      "message": "`iftable` is array of (class, method array) pairs (that\u0027s why `__ addl(counter, 2)`). Once match is found I need \"method array\", which is just the next element.\n\nThis is what [1] is doing. Should I explain what\u0027s going on better?\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/runtime/mirror/class-inl.h;l\u003d587;drc\u003d29ec7aef84f4b47d89edee274562b22a177b00b8",
      "parentUuid": "cd011b6a_5b5d9bfc",
      "range": {
        "startLine": 4344,
        "startChar": 50,
        "endLine": 4344,
        "endChar": 90
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bad4993_b1129b47",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 6
      },
      "lineNbr": 4344,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-11-15T15:10:27Z",
      "side": 1,
      "message": "Ah I see. Maybe a comment like:\n```\n`temp + counter * TIMES_4 + iftable_data_offset` points to `(class, method array)`. To get the method array, we can add kHeapReferenceSize\n```\n\nbefore `    // temp \u003d iftable-\u003eGetMethodArray(counter / 2)`.",
      "parentUuid": "285a1c24_d7c624bf",
      "range": {
        "startLine": 4344,
        "startChar": 50,
        "endLine": 4344,
        "endChar": 90
      },
      "revId": "099ffc08638f4a3c790a18794af73401680526e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}