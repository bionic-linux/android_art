{
  "comments": [
    {
      "key": {
        "uuid": "84ccd984_d0b5e7a5",
        "filename": "compiler/optimizing/escape.cc",
        "patchSetId": 17
      },
      "lineNbr": 138,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T15:02:17Z",
      "side": 1,
      "message": "I would strongly recommend avoiding std::function. This is especially relevant in context where it can be constructed repeatedly as that adds the overhead of a malloc/free pair each time we execute that code.\n\n(I would personally prefer to add std::function to a denylist for the ART project and purge the sources.)",
      "range": {
        "startLine": 138,
        "startChar": 2,
        "endLine": 138,
        "endChar": 15
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25455e98_3f41e83b",
        "filename": "compiler/optimizing/escape.cc",
        "patchSetId": 17
      },
      "lineNbr": 138,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-11T00:39:42Z",
      "side": 1,
      "message": "Done. Just used custom closure types.\n\nAlso are you sure std::function does mallocs?",
      "parentUuid": "84ccd984_d0b5e7a5",
      "range": {
        "startLine": 138,
        "startChar": 2,
        "endLine": 138,
        "endChar": 15
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b12c517c_6ae210dd",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 17
      },
      "lineNbr": 99,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T15:02:17Z",
      "side": 1,
      "message": "Use `(Scoped)?ArenaHashSet\u003c\u003e`. It is more memory efficient and allows tracking the source (kArenaAllocLSA).",
      "range": {
        "startLine": 99,
        "startChar": 4,
        "endLine": 99,
        "endChar": 22
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73fca0c1_1c31bd5a",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 17
      },
      "lineNbr": 99,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-11T00:39:42Z",
      "side": 1,
      "message": "Done. Here and elsewhere.",
      "parentUuid": "b12c517c_6ae210dd",
      "range": {
        "startLine": 99,
        "startChar": 4,
        "endLine": 99,
        "endChar": 22
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0654869a_7ec2243b",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 17
      },
      "lineNbr": 146,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T15:02:17Z",
      "side": 1,
      "message": "Why not simply `pred-\u003eGetSuccessors()`?",
      "range": {
        "startLine": 146,
        "startChar": 15,
        "endLine": 146,
        "endChar": 93
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b7dce50_d33f40bf",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 17
      },
      "lineNbr": 146,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-11T00:39:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0654869a_7ec2243b",
      "range": {
        "startLine": 146,
        "startChar": 15,
        "endLine": 146,
        "endChar": 93
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb1f4c75_52bbfa69",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 17
      },
      "lineNbr": 171,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T15:02:17Z",
      "side": 1,
      "message": "I prefer ArrayRef\u003c\u003e as long as we do not need to deal with `element_size !\u003d sizeof(T)`.",
      "range": {
        "startLine": 171,
        "startChar": 2,
        "endLine": 171,
        "endChar": 12
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02afae5f_53e349ba",
        "filename": "compiler/optimizing/load_store_analysis.h",
        "patchSetId": 17
      },
      "lineNbr": 171,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-11T00:39:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb1f4c75_52bbfa69",
      "range": {
        "startLine": 171,
        "startChar": 2,
        "endLine": 171,
        "endChar": 12
      },
      "revId": "5cfb791421ba1a9d5b79816cdce627326b481c5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}