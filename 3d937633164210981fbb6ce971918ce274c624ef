{
  "comments": [
    {
      "key": {
        "uuid": "4d90030a_7f966f9e",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-11-28T15:09:06Z",
      "side": 1,
      "message": "Having the reference to InlineCache here and in the other Is* methods seems out of the blue and makes the code less readable as you need to wonder \u0027why do I reference this clas?\u0027. Do the dcheck actually add any value now?",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 25
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_a25940a7",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-29T10:45:14Z",
      "side": 1,
      "message": "They do add value (showing the query is related to the size of our inline caches).\n\nAs discussed, I don\u0027t agree it\u0027s out of the blue. IsMonomoprhic/Polymorphic are all inline cache terminology.",
      "parentUuid": "4d90030a_7f966f9e",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 25
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_5f14cb6c",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 331,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-11-28T13:54:50Z",
      "side": 1,
      "message": "Use a reference here?",
      "range": {
        "startLine": 331,
        "startChar": 17,
        "endLine": 331,
        "endChar": 18
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_7f1f4f78",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 331,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-28T14:21:21Z",
      "side": 1,
      "message": "It won\u0027t be const, so I\u0027d rather not.",
      "parentUuid": "4d90030a_5f14cb6c",
      "range": {
        "startLine": 331,
        "startChar": 17,
        "endLine": 331,
        "endChar": 18
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_bf4dd788",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 331,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-11-28T14:36:20Z",
      "side": 1,
      "message": "Your call; but note that the only context where the style guide forbids non-const references is when passing arguments.",
      "parentUuid": "4d90030a_7f1f4f78",
      "range": {
        "startLine": 331,
        "startChar": 17,
        "endLine": 331,
        "endChar": 18
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_3f2307ce",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-11-28T13:54:50Z",
      "side": 1,
      "message": "down_cast?",
      "range": {
        "startLine": 343,
        "startChar": 40,
        "endLine": 343,
        "endChar": 56
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_5f1a8b89",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-28T14:21:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d90030a_3f2307ce",
      "range": {
        "startLine": 343,
        "startChar": 40,
        "endLine": 343,
        "endChar": 56
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06c8cba_76e7ae63",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 406,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-11-28T13:17:50Z",
      "side": 1,
      "message": "This seems to be inconsistent with AllowInlineCacheAccess().",
      "range": {
        "startLine": 406,
        "startChar": 8,
        "endLine": 406,
        "endChar": 39
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_ff56ff47",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 406,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-28T13:22:01Z",
      "side": 1,
      "message": "Yeah, I just shared the way you wake up waiting threads between the two configs.\n\nThe only difference between the two versions is the update of is_weak_access_enabled_. Do you prefer having it under kUseReadBarrier?",
      "parentUuid": "d06c8cba_76e7ae63",
      "range": {
        "startLine": 406,
        "startChar": 8,
        "endLine": 406,
        "endChar": 39
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d041ec2c_34ed3646",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 406,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-11-28T14:27:46Z",
      "side": 1,
      "message": "If we\u0027re consistently updating is_weak_access_enabled_ even for kUseReadBarrier, why don\u0027t we simply return is_weak_access_enabled_ regardless of the configuration? Otherwise the code unnecessarily relies on a specific behavior of Runtime::Allow/DisallowNewSystemWeaks().",
      "parentUuid": "4d90030a_ff56ff47",
      "range": {
        "startLine": 406,
        "startChar": 8,
        "endLine": 406,
        "endChar": 39
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d90030a_df569b21",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 406,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-11-28T14:29:27Z",
      "side": 1,
      "message": "DisallowInlineCacheAccess is not called on read-barrier config.",
      "parentUuid": "d041ec2c_34ed3646",
      "range": {
        "startLine": 406,
        "startChar": 8,
        "endLine": 406,
        "endChar": 39
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "705120f4_93ab5e6f",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 406,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-11-28T15:49:44Z",
      "side": 1,
      "message": "I see (at last). Then just follow Calin\u0027s suggestion of adding DCHECK()s.",
      "parentUuid": "4d90030a_df569b21",
      "range": {
        "startLine": 406,
        "startChar": 8,
        "endLine": 406,
        "endChar": 39
      },
      "revId": "3d937633164210981fbb6ce971918ce274c624ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}