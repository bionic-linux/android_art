{
  "comments": [
    {
      "key": {
        "uuid": "74ba6836_4329bc27",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 4
      },
      "lineNbr": 160,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-04-09T15:48:24Z",
      "side": 1,
      "message": "I would prefer we avoid this composite condition, for example\n\n  if (!cache.empty()) {\n    for (auto it \u003d cache.begin(), end \u003d std::prev(cache.end()); it !\u003d end; ++it) {\n      // ...\n    }\n  }\n\n(I see you got creative with the remove_if in your own way and it\u0027s easily readable.)",
      "range": {
        "startLine": 160,
        "startChar": 12,
        "endLine": 160,
        "endChar": 35
      },
      "revId": "acd2e0224b194400ff32d999e716773ce6e8c1d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37cd6a73_e7bd96a3",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 4
      },
      "lineNbr": 160,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-04-09T16:23:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74ba6836_4329bc27",
      "range": {
        "startLine": 160,
        "startChar": 12,
        "endLine": 160,
        "endChar": 35
      },
      "revId": "acd2e0224b194400ff32d999e716773ce6e8c1d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4edfdb9c_bbb161e4",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-04-09T16:17:17Z",
      "side": 1,
      "message": "This moves elements around a bit, doesn\u0027t it? You could instead count the elements to keep in the loop above, and copy them in another loop that replaces the class_cache_.insert() below.",
      "revId": "acd2e0224b194400ff32d999e716773ce6e8c1d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54cc4333_d56b26e3",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-04-09T16:23:07Z",
      "side": 1,
      "message": "remove_if is pretty clever: O(n) \n\nWith the std::map gone, I guess the copy below is redundant actually.",
      "parentUuid": "4edfdb9c_bbb161e4",
      "revId": "acd2e0224b194400ff32d999e716773ce6e8c1d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b8fa0a4_2acc5593",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-04-09T16:35:28Z",
      "side": 1,
      "message": "Sure, there was no different in ordo, only constant extra work moving elements around.\n\n\u003e With the std::map gone, I guess the copy below is redundant actually.\n\nUsing the deque directly for the binary search is a bit slower though:\n\nhttps://en.cppreference.com/w/cpp/container/deque: \"As opposed to std::vector, the elements of a deque are not stored contiguously: typical implementations use a sequence of individually allocated fixed-size arrays, with additional bookkeeping, which means indexed access to deque must perform two pointer dereferences, compared to vector\u0027s indexed access which performs only one.\"\n\nIsn\u0027t it better to pay for an extra copy here to keep the vector?",
      "parentUuid": "54cc4333_d56b26e3",
      "revId": "acd2e0224b194400ff32d999e716773ce6e8c1d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c58d5a5e_310a2320",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-04-09T16:39:31Z",
      "side": 1,
      "message": "Maybe... tough question.  I am inclined to agree.\n\nDoes anyone know what the deque bucket size is on Android.  The docs say \"8 items or 4k\", which big memory difference.\n\nI am inclined to keep the vector just since that guarantees the minimum.",
      "parentUuid": "5b8fa0a4_2acc5593",
      "revId": "acd2e0224b194400ff32d999e716773ce6e8c1d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "317dbff4_07e6e1ac",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2020-04-09T16:40:55Z",
      "side": 1,
      "message": "\u003e (e.g. 8 times the object size on 64-bit libstdc++; 16 times the object size or 4096 bytes, whichever is larger, on 64-bit libc++).\n\nI am pretty sure we build with libc++, so at least 4k.",
      "parentUuid": "c58d5a5e_310a2320",
      "revId": "acd2e0224b194400ff32d999e716773ce6e8c1d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}