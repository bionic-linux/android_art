{
  "comments": [
    {
      "key": {
        "uuid": "f6d0433d_3ea968ff",
        "filename": "build/Android.common_build.mk",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "Is this the default anyway?",
      "range": {
        "startLine": 275,
        "startChar": 35,
        "endLine": 275,
        "endChar": 57
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_c5c96c38",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 1
      },
      "lineNbr": 684,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "This looks like an error.  I\u0027m not saying that it is, it just looks like one.  You are passing the address of a temp string, taking its c_str() and adding that to a set.  When the std::string goes out of scope the c_str() is no longer valid.\n\nMaybe GetDescriptor() is doing some magic I can\u0027t see here.",
      "range": {
        "startLine": 682,
        "startChar": 2,
        "endLine": 684,
        "endChar": 2
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_85dcc4f7",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 1
      },
      "lineNbr": 762,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "Like above, this descriptor will be invalid the second time around the loop.  At least that what it looks like to me.  If it\u0027s not, perhaps an explanation of how it works would be good.",
      "range": {
        "startLine": 761,
        "startChar": 0,
        "endLine": 762,
        "endChar": 96
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_fe49b099",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "What was wrong with the typedef?",
      "range": {
        "startLine": 106,
        "startChar": 38,
        "endLine": 106,
        "endChar": 59
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_e5183012",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "So if we ever want to change the type of the DescriptoSet we have to go around and replace all these instances of std::set\u003cstd::string\u003e.  Seems like an abstraction would be better here (like it was before).",
      "range": {
        "startLine": 274,
        "startChar": 2,
        "endLine": 274,
        "endChar": 23
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6ca4b8f_3fbde29c",
        "filename": "runtime/dex_file-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "Is this faster than calling memcmp directly?  An extra compare and branch forward.  memcmp might be doing it too.",
      "range": {
        "startLine": 57,
        "startChar": 9,
        "endLine": 57,
        "endChar": 27
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_c1f975e6",
        "filename": "runtime/utf-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "++ prefix operator",
      "range": {
        "startLine": 54,
        "startChar": 4,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_6543c0c8",
        "filename": "runtime/utf-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 78,
        "startChar": 6,
        "endLine": 78,
        "endChar": 14
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_6109814b",
        "filename": "runtime/utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "++c",
      "range": {
        "startLine": 248,
        "startChar": 4,
        "endLine": 248,
        "endChar": 7
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}