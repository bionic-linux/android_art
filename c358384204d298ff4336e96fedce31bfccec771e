{
  "comments": [
    {
      "key": {
        "uuid": "f6d0433d_3ea968ff",
        "filename": "build/Android.common_build.mk",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "Is this the default anyway?",
      "range": {
        "startLine": 275,
        "startChar": 35,
        "endLine": 275,
        "endChar": 57
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_c5c96c38",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 1
      },
      "lineNbr": 684,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "This looks like an error.  I\u0027m not saying that it is, it just looks like one.  You are passing the address of a temp string, taking its c_str() and adding that to a set.  When the std::string goes out of scope the c_str() is no longer valid.\n\nMaybe GetDescriptor() is doing some magic I can\u0027t see here.",
      "range": {
        "startLine": 682,
        "startChar": 2,
        "endLine": 684,
        "endChar": 2
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6ca4b8f_7f859ab8",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 1
      },
      "lineNbr": 684,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-08-12T16:42:23Z",
      "side": 1,
      "message": "It is, as described in the commit message.",
      "parentUuid": "9633877e_c5c96c38",
      "range": {
        "startLine": 682,
        "startChar": 2,
        "endLine": 684,
        "endChar": 2
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_c1b055cc",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 1
      },
      "lineNbr": 684,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:55:28Z",
      "side": 1,
      "message": "Ah, the image_classes-\u003einsert() is constructing a new string out of the const char * returned (the same as temp).  Subtle.  Perhaps a comment in the code so that future people don\u0027t get confused and break it.",
      "parentUuid": "b6ca4b8f_7f859ab8",
      "range": {
        "startLine": 682,
        "startChar": 2,
        "endLine": 684,
        "endChar": 2
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_85dcc4f7",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 1
      },
      "lineNbr": 762,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "Like above, this descriptor will be invalid the second time around the loop.  At least that what it looks like to me.  If it\u0027s not, perhaps an explanation of how it works would be good.",
      "range": {
        "startLine": 761,
        "startChar": 0,
        "endLine": 762,
        "endChar": 96
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_fe49b099",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "What was wrong with the typedef?",
      "range": {
        "startLine": 106,
        "startChar": 38,
        "endLine": 106,
        "endChar": 59
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6ca4b8f_df76ee16",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-08-12T16:42:23Z",
      "side": 1,
      "message": "The typedef tells me nothing, a set is a thing with defined operations, as is a string. The typedef is more characters. The place where this gets annoying is with iterators and we use auto there.",
      "parentUuid": "f6d0433d_fe49b099",
      "range": {
        "startLine": 106,
        "startChar": 38,
        "endLine": 106,
        "endChar": 59
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_c8d2e33e",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:55:28Z",
      "side": 1,
      "message": "The typedef might be changed to a class.  Maybe we want to store the strings in a hash table, or some sort of other storage other than a std::set (due to performance issues or something).  Removing the abstraction prevents this.",
      "parentUuid": "b6ca4b8f_df76ee16",
      "range": {
        "startLine": 106,
        "startChar": 38,
        "endLine": 106,
        "endChar": 59
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_e5183012",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "So if we ever want to change the type of the DescriptoSet we have to go around and replace all these instances of std::set\u003cstd::string\u003e.  Seems like an abstraction would be better here (like it was before).",
      "range": {
        "startLine": 274,
        "startChar": 2,
        "endLine": 274,
        "endChar": 23
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6ca4b8f_5f6bfe28",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-08-12T16:42:23Z",
      "side": 1,
      "message": "a typedef isn\u0027t an abstraction, its just information hiding",
      "parentUuid": "9633877e_e5183012",
      "range": {
        "startLine": 274,
        "startChar": 2,
        "endLine": 274,
        "endChar": 23
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_014bedea",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:55:28Z",
      "side": 1,
      "message": "It\u0027s a shorthand alias.  Replace it with a class and it\u0027s an abstraction.  The point is, as long as the interface is the same, the caller doesn\u0027t need to be aware of what it is.\n\nBut whatever.",
      "parentUuid": "b6ca4b8f_5f6bfe28",
      "range": {
        "startLine": 274,
        "startChar": 2,
        "endLine": 274,
        "endChar": 23
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6ca4b8f_3fbde29c",
        "filename": "runtime/dex_file-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "Is this faster than calling memcmp directly?  An extra compare and branch forward.  memcmp might be doing it too.",
      "range": {
        "startLine": 57,
        "startChar": 9,
        "endLine": 57,
        "endChar": 27
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_81549de0",
        "filename": "runtime/dex_file-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-08-12T16:42:23Z",
      "side": 1,
      "message": "I\u0027ve reverted this, it was from Mathieu\u0027s change and I don\u0027t think its sound. The string length is the utf16 length and so may be too short.",
      "parentUuid": "b6ca4b8f_3fbde29c",
      "range": {
        "startLine": 57,
        "startChar": 9,
        "endLine": 57,
        "endChar": 27
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_c1f975e6",
        "filename": "runtime/utf-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "++ prefix operator",
      "range": {
        "startLine": 54,
        "startChar": 4,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9633877e_6543c0c8",
        "filename": "runtime/utf-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 78,
        "startChar": 6,
        "endLine": 78,
        "endChar": 14
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6d0433d_6109814b",
        "filename": "runtime/utils.cc",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-08-12T16:22:59Z",
      "side": 1,
      "message": "++c",
      "range": {
        "startLine": 248,
        "startChar": 4,
        "endLine": 248,
        "endChar": 7
      },
      "revId": "c358384204d298ff4336e96fedce31bfccec771e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}