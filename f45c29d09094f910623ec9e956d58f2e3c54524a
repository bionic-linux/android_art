{
  "comments": [
    {
      "key": {
        "uuid": "b0c20ffb_29b22f6f",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-05-10T18:20:24Z",
      "side": 1,
      "message": "Are the bits stored in the exact same order as before? If not you probably need to increment the oat version.",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 80
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4befa354_e58978fc",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-05-10T18:36:07Z",
      "side": 1,
      "message": "Yes, that was definitely the intention.  I will double check.",
      "parentUuid": "b0c20ffb_29b22f6f",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 80
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad06705e_7f6f90b6",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-05-10T18:20:24Z",
      "side": 1,
      "message": "Does this need to work with 32vs64 cross compilation? Seems like there could be some issues?",
      "range": {
        "startLine": 126,
        "startChar": 2,
        "endLine": 128,
        "endChar": 23
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f852dee8_37ccad68",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-05-10T18:36:07Z",
      "side": 1,
      "message": "What possible issues do you have in mind?\n\nOne thing I was wondering about - the implementation can handle uintptr store/load.  Should I artificially limit it to uint32?\n\nEither way, having data_ uintptr aligned is beneficial for performance.  Although I have not measured if downgrading to uint32 would cost much.  Should I try?",
      "parentUuid": "ad06705e_7f6f90b6",
      "range": {
        "startLine": 126,
        "startChar": 2,
        "endLine": 128,
        "endChar": 23
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ef0e40b_f01e8223",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-05-10T18:38:54Z",
      "side": 1,
      "message": "It would certainly be easier to reason the logic is correct for 32 bit compiler + 64 bit runtime if it\u0027s using uint32_t.",
      "parentUuid": "f852dee8_37ccad68",
      "range": {
        "startLine": 126,
        "startChar": 2,
        "endLine": 128,
        "endChar": 23
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf54830_17c22b77",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-05-10T18:47:33Z",
      "side": 1,
      "message": "I don\u0027t understand the comment. The underlying format isn\u0027t size-dependent, I thought - it\u0027s a bitset, after all. So the \"logic\" is size-independent. So it doesn\u0027t matter what size accesses you use (as long as they\u0027re functionally correct).",
      "parentUuid": "9ef0e40b_f01e8223",
      "range": {
        "startLine": 126,
        "startChar": 2,
        "endLine": 128,
        "endChar": 23
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62ff6d25_67245832",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-05-10T18:57:42Z",
      "side": 1,
      "message": "I understand Mathieu\u0027s point of view.  uintptr as in/out argument of the bit manipulation methods is more flexible but less defensive.  People might accidentally write uint64 value and it would work for 64-bit compiler only. uint32 interface enforces tighter contract.",
      "parentUuid": "eaf54830_17c22b77",
      "range": {
        "startLine": 126,
        "startChar": 2,
        "endLine": 128,
        "endChar": 23
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b31e994_fc8f6960",
        "filename": "libartbase/base/bit_memory_region_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-05-10T18:20:24Z",
      "side": 1,
      "message": "Nit: Preferred style is one arg per line.",
      "range": {
        "startLine": 23,
        "startChar": 23,
        "endLine": 24,
        "endChar": 67
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eac6ba9_a4ee914f",
        "filename": "libartbase/base/bit_memory_region_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-05-10T18:20:24Z",
      "side": 1,
      "message": "missing space",
      "range": {
        "startLine": 56,
        "startChar": 64,
        "endLine": 56,
        "endChar": 65
      },
      "revId": "f45c29d09094f910623ec9e956d58f2e3c54524a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}