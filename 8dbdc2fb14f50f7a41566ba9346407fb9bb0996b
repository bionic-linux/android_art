{
  "comments": [
    {
      "key": {
        "uuid": "53ef61ff_2ac2536a",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-08-27T18:58:23Z",
      "side": 1,
      "message": "the code and the comment below don\u0027t match up. Why do we only check in the zygote case? dex2oat allocates objects like Strings, that may end up as large object allocations.",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9333997e_28b90f61",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-27T19:47:34Z",
      "side": 1,
      "message": "This was derived from talking with mathieuc and basically up for review. Valgrind consistently gives us a non-moving space before the image space. If that can be fixed, I\u0027d be fine with that, too.",
      "parentUuid": "53ef61ff_2ac2536a",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7321c530_62064cf2",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-08-27T23:20:52Z",
      "side": 1,
      "message": "I can see that we can skip this no-gap check if there is no image (eg dex2oat).\n\nI don\u0027t see what the Valgrind case looks like. It\u0027s got an image, but the non-moving space comes before the image space? I don\u0027t see how that happens. Does it have a separate non-moving space (from the main space)? Can you clarify?\n\nIn any case, this check should be enabled as much as possible. Or else, we\u0027d have a large object being treated as immune and a GC crash.",
      "parentUuid": "9333997e_28b90f61",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7321c530_a2fc644d",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-08-27T23:27:53Z",
      "side": 1,
      "message": "dex2oat has an image in the case that we\u0027re compiling an app.",
      "parentUuid": "7321c530_62064cf2",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "931c79fc_ba449181",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-28T00:07:05Z",
      "side": 1,
      "message": "Running dex2oat under valgrind, it consistently makes it so that the non_moving_space_ has a lower address then the image space, so CheckNoGaps triggers a check.\n\nAnd yes, this was *with* an image, as I was trying to compile an app.",
      "parentUuid": "7321c530_62064cf2",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7338e55c_950b94b8",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-08-28T00:43:05Z",
      "side": 1,
      "message": "With the current logic, the only time the compiler might attempt to immune the non moving space is if GSS is enabled. In this case separate_non_moving_space\u003d\u003dtrue and hopefully we would have that the space is right after the image.",
      "parentUuid": "931c79fc_ba449181",
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7321c530_a8c68350",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-08-28T00:55:07Z",
      "side": 1,
      "message": "If separate_non_moving_space is false in your dex2oat situation, the main space and the non-moving space are the same space, in which case we should allocate the main space right after the image, but to allocate the main space (main_mem_map_1) we use MapAnonymousPreferredAddress() which does not guarantee the result is at the specified address, instead of MapAnonymous() which does, as in:\n\n267:  main_mem_map_1.reset(MapAnonymousPreferredAddress(kMemMapSpaceName[0], request_begin, capacity_,\n268:                                         PROT_READ | PROT_WRITE, \u0026error_str));\n\nThis seems a bug to me.\n\nBut I am not sure if separate_non_moving_space is false in your dex2oat situation. Can you instrument this function and see what the value separate_non_moving_space is (as well as, if you will, the result addresses of the MapAnonymousPreferredAddress() and MapAnonymous() which could be added to the error message of the LOG(FATAL) in line 417)?",
      "parentUuid": "931c79fc_ba449181",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9333997e_564bd43e",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-28T00:59:36Z",
      "side": 1,
      "message": "It doesn\u0027t get to the gap. The aborting CHECK is in CheckNoGaps:\n\nCheck failed: begin_map-\u003eBaseBegin() \u003c\u003d end_map-\u003eBaseBegin() (begin_map-\u003eBaseBegin()\u003d0x70000000, end_map-\u003eBaseBegin()\u003d0x5e3f000)\n\nLet me put in some debug info before.",
      "parentUuid": "7321c530_a8c68350",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "931c79fc_ddc61f84",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-08-28T01:01:55Z",
      "side": 1,
      "message": "dex2oatd I 31595 31595 art/runtime/gc/heap.cc:412] 0\n\nSo separate_non_moving_space is false.",
      "parentUuid": "9333997e_564bd43e",
      "range": {
        "startLine": 410,
        "startChar": 65,
        "endLine": 412,
        "endChar": 81
      },
      "revId": "8dbdc2fb14f50f7a41566ba9346407fb9bb0996b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}