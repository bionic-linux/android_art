{
  "comments": [
    {
      "key": {
        "uuid": "94a57ac9_42e9f4d1",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 730,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-01-27T10:42:27Z",
      "side": 1,
      "message": "We should collect string ids in parallel and then resolve them single-threaded. This would also remove the overhead of changing to runnable and back and looking up the dex cache for each const-string.",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 730,
        "endChar": 38
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54c4e260_3ee90869",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 730,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-01-27T17:45:10Z",
      "side": 1,
      "message": "Sure, I\u0027ll implement that optimization. I wanted something simple for the first iteration (considering you\u0027d need a map of dex file to ordered set, etc).",
      "parentUuid": "94a57ac9_42e9f4d1",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 730,
        "endChar": 38
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34520eae_3cee311b",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 2
      },
      "lineNbr": 730,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-01-27T17:59:36Z",
      "side": 1,
      "message": "I\u0027m fine with this as is for the first iteration. Just add a TODO.",
      "parentUuid": "54c4e260_3ee90869",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 730,
        "endChar": 38
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d49b728b_e19b6699",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 2
      },
      "lineNbr": 565,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-01-27T08:35:23Z",
      "side": 1,
      "message": "From an API standpoint, you have to agree, this isn\u0027t great. But it was already pretty bad, I give you that :-)\n\nCan we make the thread_pool_ a field of CompilerDriver (most methods take it, so not sure why it wasn\u0027t the case before), and change the thread_count argument to \"bool deterministic\" (in the end that\u0027s what it\u0027s for).",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 565,
        "endChar": 33
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4a43ebb_5ac50266",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 2
      },
      "lineNbr": 565,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-01-27T17:45:10Z",
      "side": 1,
      "message": "Well, the parallel thread pool is created late and not stored in a field. But sure, I can push it there.",
      "parentUuid": "d49b728b_e19b6699",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 565,
        "endChar": 33
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7431e681_7688504c",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 358,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-01-27T22:08:38Z",
      "side": 1,
      "message": "Turn this into a constexpr somewhere?",
      "range": {
        "startLine": 358,
        "startChar": 61,
        "endLine": 358,
        "endChar": 71
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4c1566d_faf2e901",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 359,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-01-27T10:42:27Z",
      "side": 1,
      "message": "Why do we need this? (Does GC walk the heap in a different order for different addresses? Does the address contribute to the identity hash?)",
      "range": {
        "startLine": 356,
        "startChar": 0,
        "endLine": 359,
        "endChar": 3
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4b8d2d6_c2e67344",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 359,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-01-27T17:45:10Z",
      "side": 1,
      "message": "There are sets in the compiler (image writer) that have object pointers as keys. I wanted this to be low-impact, so not change it to an ordered set/map. But then the addresses need to be reproduce-able.",
      "parentUuid": "f4c1566d_faf2e901",
      "range": {
        "startLine": 356,
        "startChar": 0,
        "endLine": 359,
        "endChar": 3
      },
      "revId": "6edfa30858649ecbcf8fd507985e5cdcfc09db9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}