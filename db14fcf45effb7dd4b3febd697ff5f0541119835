{
  "comments": [
    {
      "key": {
        "uuid": "43af211d_e5ed7d06",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1004,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-26T09:27:10Z",
      "side": 1,
      "message": "Isn\u0027t that disabled??",
      "range": {
        "startLine": 1004,
        "startChar": 6,
        "endLine": 1004,
        "endChar": 67
      },
      "revId": "db14fcf45effb7dd4b3febd697ff5f0541119835",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9012809e_cc97ec0d",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1004,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-26T09:28:49Z",
      "side": 1,
      "message": "Ah I\u0027ve looked at your commit message after writing this comment.\n\nDo we really gain anything by handling string char at in the vectorizer? What kind of code will we optimize?",
      "parentUuid": "43af211d_e5ed7d06",
      "range": {
        "startLine": 1004,
        "startChar": 6,
        "endLine": 1004,
        "endChar": 67
      },
      "revId": "db14fcf45effb7dd4b3febd697ff5f0541119835",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c3eae97_cce65cfa",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1004,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T14:05:52Z",
      "side": 1,
      "message": "Bug 37151445, https://android-review.googlesource.com/370001 .\n\n  // String digits0 \u003d all unicode zeros\n  char[] digits9 \u003d new char[digits0.length()];\n  for (int i \u003d 0; i \u003c digits0.length(); ++i] {\n    digits9[i] \u003d digits0.charAt(i) + 9;\n  }\n\nNot sure that\u0027s worth the effort.",
      "parentUuid": "9012809e_cc97ec0d",
      "range": {
        "startLine": 1004,
        "startChar": 6,
        "endLine": 1004,
        "endChar": 67
      },
      "revId": "db14fcf45effb7dd4b3febd697ff5f0541119835",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aab0c617_9b5a9d7e",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1004,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-04-26T15:57:58Z",
      "side": 1,
      "message": "Note that this CL just makes booleans bitmaps and add the is_string_char_at boolean to the array load (which seems a good idea, even if it is dead now, for when we enable later, or when people copy and paste this cloning method).\n\nAs for usefulness, the golden rule of vectorization is that you want to be able to vectorize everything, but let proper cost heuristics decide when to proceed (something coming up post O of course). You never know where a simple looking construct shows up.\n\nAs an example, in Dacapo, we have the following loop in calculateSumDB() (the actual loop is more complex, but this is the core idea).\n\n   long result \u003d 0;\n\n   for (int i \u003d 0; i \u003c v.length(); i++) {\n      result +\u003d v.charAt(i);\n   }\n\nSuch a 16-bit to 64-bit reduction is an awesome candidate for vectorization!",
      "parentUuid": "9c3eae97_cce65cfa",
      "range": {
        "startLine": 1004,
        "startChar": 6,
        "endLine": 1004,
        "endChar": 67
      },
      "revId": "db14fcf45effb7dd4b3febd697ff5f0541119835",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be3042fa_710ccce0",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1004,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-26T16:25:51Z",
      "side": 1,
      "message": "Is that safe to vectorize without a prior transformation?\n\n    long result \u003d 0;\n    char[] tmp \u003d v.toCharArray();\n    for (int i \u003d 0; i \u003c tmp.length; i++) {\n           result +\u003d tmp[i];\n    }\n\n----\n\nthe underlying problem being that the string might be ascii and charAt would then have to inflate it\n\n(or alternatively emitting two code paths for compressed/uncompressed strings first)",
      "parentUuid": "aab0c617_9b5a9d7e",
      "range": {
        "startLine": 1004,
        "startChar": 6,
        "endLine": 1004,
        "endChar": 67
      },
      "revId": "db14fcf45effb7dd4b3febd697ff5f0541119835",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8846dbb0_5bc64c0f",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1004,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-04-26T22:04:53Z",
      "side": 1,
      "message": "Yes, the code (which I have ready in another CL) will test the compression bit to see what kind of load to use, very much like what the sequential code is doing now (but potentially faster :-)\n\nNote however, that this CL just introduces the packed bool. I thought it was a good idea to introduce this bool in the same CL, since they all relate to packing bools for SIMD operations. If you feel they should in the actual string CL, fine with me (but please don\u0027t comment then that it should be in a separate CL :-)",
      "parentUuid": "be3042fa_710ccce0",
      "range": {
        "startLine": 1004,
        "startChar": 6,
        "endLine": 1004,
        "endChar": 67
      },
      "revId": "db14fcf45effb7dd4b3febd697ff5f0541119835",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "103a1cc3_8057b03f",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 2
      },
      "lineNbr": 1004,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-26T22:15:54Z",
      "side": 1,
      "message": "Thanks for explaining. Looking forward to seeing that CL.",
      "parentUuid": "8846dbb0_5bc64c0f",
      "range": {
        "startLine": 1004,
        "startChar": 6,
        "endLine": 1004,
        "endChar": 67
      },
      "revId": "db14fcf45effb7dd4b3febd697ff5f0541119835",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}