{
  "comments": [
    {
      "key": {
        "uuid": "1479039e_e998a343",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1413436
      },
      "writtenOn": "2019-12-16T08:03:09Z",
      "side": 1,
      "message": "If this will be used frequently how about define sysprop for this?",
      "range": {
        "startLine": 176,
        "startChar": 35,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "594c08f1fc6a265416dff225b25d7e23578d2b9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1909e751_428c8732",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1386891
      },
      "writtenOn": "2019-12-19T15:10:12Z",
      "side": 1,
      "message": "https://android-review.googlesource.com/c/platform/system/libsysprop/+/1191679/1/srcs/android/sysprop/VndkProperties.sysprop\nIt seems to be defined. Can we use it?",
      "parentUuid": "1479039e_e998a343",
      "range": {
        "startLine": 176,
        "startChar": 35,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "594c08f1fc6a265416dff225b25d7e23578d2b9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24bea154_7052d7a6",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-12-19T15:15:25Z",
      "side": 1,
      "message": "Yeah, using the generated API is always preferred.",
      "parentUuid": "1909e751_428c8732",
      "range": {
        "startLine": 176,
        "startChar": 35,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "594c08f1fc6a265416dff225b25d7e23578d2b9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4d63f3b_160944c2",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2020-01-02T05:26:42Z",
      "side": 1,
      "message": "I used GetProperty instead of using sysprop interface because sysprop does not supoprt host variant.\nTo use sysprop, I had to split libnativeloader for host version.\nInseob, do you plan to update the sysprop for host_supported modules?",
      "parentUuid": "24bea154_7052d7a6",
      "range": {
        "startLine": 176,
        "startChar": 35,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "594c08f1fc6a265416dff225b25d7e23578d2b9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "589c3a97_e6803e84",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2020-01-02T05:53:26Z",
      "side": 1,
      "message": "I\u0027m not sure. Host version of libbase mocks system property functions internally, and they only can be accessed with libbase functions. Also using libbase from sysprop_library is a little tricky due to dependency problems. That said, sysprop_library should be split into device version and host version, which doesn\u0027t seem trivial. In addition, currently ADDITIONAL_PRODUCT_PROPERTIES sets ro.product.vndk.version, but then android::base::GetProperty(\"ro.product.vndk.version\") will always return empty string on host.\n\nHow about conditionally using sysprop_library? e.g.,\n\n// Android.bp\ntarget: {\n    android: {\n        static_libs: [\"PlatformProperties\"],\n    },\n},\n\n// C++\n#if !defined(__BIONIC__) // or anything to distinguish whether we\u0027re in host or device\nstd::string GetProductVndkVersion() { return \"\"; }\n#else\n#include \u003candroid/sysprop/VndkProperties.sysprop.h\u003e\nstd::string GetProductVndkVersion() {\n    return android::sysprop::VndkProperties::product_vndk_version().value_or(\"\");\n}\n#endif",
      "parentUuid": "b4d63f3b_160944c2",
      "range": {
        "startLine": 176,
        "startChar": 35,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "594c08f1fc6a265416dff225b25d7e23578d2b9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45292f56_849863c3",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1413436
      },
      "writtenOn": "2020-01-02T06:32:56Z",
      "side": 1,
      "message": "I also thought about this way (__ANDROID__ instead of __BIONIC anyway), but in this case we should consider \u0027what would be the benefit of sysprop with sacrifice of this long conditional code?\u0027.",
      "parentUuid": "589c3a97_e6803e84",
      "range": {
        "startLine": 176,
        "startChar": 35,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "594c08f1fc6a265416dff225b25d7e23578d2b9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}