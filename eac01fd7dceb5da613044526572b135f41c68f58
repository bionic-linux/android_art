{
  "comments": [
    {
      "key": {
        "uuid": "f0e4430a_9e1bdf8b",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-18T17:25:09Z",
      "side": 1,
      "message": "Hope to see use libc header.\nIf it\u0027s not affordable, that means we need to talk with system team?",
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a2504b6_1a65caf9",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-18T19:00:24Z",
      "side": 1,
      "message": "Actually it\u0027s a problem only in cases where either the MADV_FREE is not implemented or for host builds (see the comment above).\n\nIdeally I wanted to define MADV_FREE as MADV_DONTNEED, which would inherently take care of the fall-back I have implemented in MAdviseFree() below. The reason I instead set it to 8 is so that golem results can be obtained, which are run on hosts.\n\nFixed in latest patch.",
      "parentUuid": "f0e4430a_9e1bdf8b",
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98c8c3ad_781b5d2f",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-18T19:07:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2a2504b6_1a65caf9",
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88082b48_9cf5bfef",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 1238,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-18T17:25:09Z",
      "side": 1,
      "message": "Can\u0027t we check kernel version \u003e\u003d 4.12 in build time? I hope so.\nIf it\u0027s possible, we could call MADV_DONTNEED or MADV_FREE selectively without relying on the error value.\nI also hope to see different function name(e.g., purge_range or whatever to cover both meaning) instead of MadviseFree because the implementation will support madv_dontneed as well as madvise_free.",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1238,
        "endChar": 26
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91357102_ba0d81a3",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 1238,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-18T19:00:24Z",
      "side": 1,
      "message": "It\u0027ll be fixed with the change I\u0027m proposing for the MADV_FREE macro above.\n\nChanged the name in latest patch.",
      "parentUuid": "88082b48_9cf5bfef",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1238,
        "endChar": 26
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44504c8a_6f6cfb78",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-18T17:25:09Z",
      "side": 1,
      "message": "It\u0027s a good idea! \n\nI want to understand when ClearFromSpace is called.\nAre objects in the memory ranges to be marked usually in the memory when ClearFromSpace is called?\nOtherwise, the marking will cause swapping-in.",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cb31604_e3da7b43",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-18T19:00:24Z",
      "side": 1,
      "message": "ClearFromSpace is called at end of every GC cycle to reclaim all the memory pages corresponding to freed space. There are objects in the memory range and some of them are read from during GC, so must be in the RAM, right?",
      "parentUuid": "44504c8a_6f6cfb78",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c75d158_a847453e",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-18T19:07:33Z",
      "side": 1,
      "message": "Depends on how GC works. For example, if we do gc very rarely, the objects in GC space had swapped by kernel\u0027s LRU or by AppCompaction. Thus, marking for the page will cause swapping-in which ends up charging the memory and freed later.",
      "parentUuid": "0cb31604_e3da7b43",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b013a16_ee182cfa",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-02-18T19:11:20Z",
      "side": 1,
      "message": "IOW if kernel evicted the page from LRU before GC got to run then this marking will cause a page refault.",
      "parentUuid": "6c75d158_a847453e",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0caec1e0_5e656eaf",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-18T19:30:55Z",
      "side": 1,
      "message": "GC runs in two phases. The first phase is where objects are traversed through. It is expected that some pages that are MADV_FREE\u0027ed are touched at this time. Immediately following this first phase is when we call ClearFromSpace.\n\nIdeally I\u0027d love not to mark the pages, but there isn\u0027t any guarantee that the first word (or any chosen word for that matter) is always non-zero and hence can be tested later during allocation.\n\nBy the end of first phase I can gather info on which pages were untouched, and then skip marking them here, but then the same problem as described in previous para.\n\nWhile it is possible that pages that were untouched during GC are re-faulted, but they will immediately after MADV_FREE\u0027ed as well. So will that not suffice?\n\nI\u0027d really appreciate any suggestions on how differently this can be implemented.",
      "parentUuid": "2b013a16_ee182cfa",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe94d48f_1a9ad809",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-20T22:02:17Z",
      "side": 1,
      "message": "Sorry for the late reply. I have missed the comment.\n\nMy concern is the refault means memory charging(temporal RSS increase, which causes LMKD kill) + swap-in overhead(page allocation + swap cache handling) which never happens MADV_DONTNEED.\n\nThe idea in my mind is mincore(2), so you could check page residency before the madvise.\nI don\u0027t know what\u0027s the lifetime of objects in the region space.\nIf they have almost same lifetime(iow, they are used together so freed together), it might be enough to check residency of the first page in the address range. If it has been swapped out, we could do madv_dontneed without touching for the marking instead of madv_free.",
      "parentUuid": "0caec1e0_5e656eaf",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "761f5fc9_108dffb2",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-20T22:22:15Z",
      "side": 1,
      "message": "I really liked this idea. Thanks for suggestion.\n\nI\u0027ll resume working on this CL next week.",
      "parentUuid": "fe94d48f_1a9ad809",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "709fe871_f90eb94d",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-20T22:27:17Z",
      "side": 1,
      "message": "BTW, isn\u0027t it enough to call MADV_FREE (without writing into), instead of MADV_DONTNEED, a swapped out page? I mean what is the behavior when a swapped out page is MADV_FREE\u0027ed? Is it still lazily freed, or given that it\u0027s anyway not in the RAM, it\u0027s immediately reclaimed from swap?",
      "parentUuid": "761f5fc9_108dffb2",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21721eb7_8f32f5c4",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-20T22:36:29Z",
      "side": 1,
      "message": "Yub, it works because swapped page on MADV_FREE will remove the charge of swap space, which is same with MADV_DONTNEED. I thought MADV_DONTNEED would make your code simple/straightforward.\nIf you want to do MADV_FREE on swapped out page, I\u0027m also okay unless it touch the swapped-page.\nThanks.",
      "parentUuid": "709fe871_f90eb94d",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41ba426c_a2ce25db",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-20T22:41:00Z",
      "side": 1,
      "message": "This way I would require lesser number of madvise syscalls. Imagine, if a range of address space has inter-mixed swapped-out and in-RAM pages, then I would require doing multiple madvise syscalls. With this, I can just choose which pages to touch using mincore(2), and then make 1 madvise(MADV_FREE) call for the entire range.",
      "parentUuid": "21721eb7_8f32f5c4",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "390acff9_4145bf84",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-20T22:42:17Z",
      "side": 1,
      "message": "Totally agreed.",
      "parentUuid": "41ba426c_a2ce25db",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 464,
        "endChar": 31
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a16500db_20d8f0c4",
        "filename": "runtime/gc/space/region_space.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2020-02-18T17:25:09Z",
      "side": 1,
      "message": "Just minor: How about kMadvFreeMagic and uses some meaningful value(e.g., 0xdf for 0xdeadfree) rather than common 0xff?",
      "range": {
        "startLine": 47,
        "startChar": 25,
        "endLine": 47,
        "endChar": 39
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd0bd7bf_36d29092",
        "filename": "runtime/gc/space/region_space.h",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-02-18T19:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a16500db_20d8f0c4",
      "range": {
        "startLine": 47,
        "startChar": 25,
        "endLine": 47,
        "endChar": 39
      },
      "revId": "eac01fd7dceb5da613044526572b135f41c68f58",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}