{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "56f340a9_ccd93b7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "You\u0027re omitting essential changes here. How does the new scheme work? Can we still meaningfully set thresholds for warm and hot? (Seems like those are now hard-coded to 0xffff.)\n\nYou should also add a proper description to `ArtMethod::hotness_count_`.",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "484f5391_74560b0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "As discussed, the old state had the threshold hard-coded in the assembly code. This CL is removing this, but doesn\u0027t address setting the threshold dynamically. I will follow-up with another CL for this.",
      "parentUuid": "56f340a9_ccd93b7a",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df1579bb_f08f86d5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 11,
        "startChar": 17,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f363dedd_c7175bce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df1579bb_f08f86d5",
      "range": {
        "startLine": 11,
        "startChar": 17,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d28bc234_1d172be0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-11T07:23:52Z",
      "side": 1,
      "message": "Vladimir, David, friendly TH ping.",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fb3ef95_7d71a09c",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 1114,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "Do this in a register, otherwise racing threads could cause underflow.",
      "range": {
        "startLine": 1110,
        "startChar": 4,
        "endLine": 1114,
        "endChar": 60
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b95efa83_1f526cd6",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 1114,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6fb3ef95_7d71a09c",
      "range": {
        "startLine": 1110,
        "startChar": 4,
        "endLine": 1114,
        "endChar": 60
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba452c5d_e306673a",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 4
      },
      "lineNbr": 1496,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "Do this in a register, otherwise racing threads could cause underflow.",
      "range": {
        "startLine": 1492,
        "startChar": 4,
        "endLine": 1496,
        "endChar": 60
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fda22b12_460ff557",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 4
      },
      "lineNbr": 1496,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "As I\u0027m not changing the previous overflow logic (which are tolerated), ok to keep this as-is?",
      "parentUuid": "ba452c5d_e306673a",
      "range": {
        "startLine": 1492,
        "startChar": 4,
        "endLine": 1496,
        "endChar": 60
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8b3a261_f0e81e99",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 4
      },
      "lineNbr": 1496,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-19T13:32:33Z",
      "side": 1,
      "message": "Keep this in mind for a future CL.",
      "parentUuid": "fda22b12_460ff557",
      "range": {
        "startLine": 1492,
        "startChar": 4,
        "endLine": 1496,
        "endChar": 60
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d32d58e_52f097d3",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 434,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-14T13:39:47Z",
      "side": 1,
      "message": "Would this one-liner do?\nhotness_count_ \u003d std::max(hotness_count_ - new_samples, 0);\n\nMaybe the method should be called DecrementCounter, or DecrementHotnessCountdown.\nI keep getting confused whether the arg is supposed to be -1 or +1. \nI guess we should DCHECK the sign of the arg anyway.",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6660bcc_7dfa0ea0",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 434,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "The arg is unsigned, and it can be any value.",
      "parentUuid": "6d32d58e_52f097d3",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70f851b4_774b0592",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 434,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-19T13:57:01Z",
      "side": 1,
      "message": "Right, I realize how the arg is used and that it can have samples other than 1.  My point is that from the callsites it is not obvious if the arg should be positive int, or negative int.  \"Update\" kind of implies the arg is added.  Can we rename the method, and DCHECK that people don\u0027t pass the wrong sign?\n\nThe other question was if this method can be reduced to the one-liner (which is another way to address Vladimirs concern below).",
      "parentUuid": "d6660bcc_7dfa0ea0",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dc4601a_89b20dc7",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 434,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T14:29:15Z",
      "side": 1,
      "message": "How do you DCHECK? The type is unsigned so a \u003c0 check doesn\u0027t make sense ðŸ˜Š\n\nHappy to rename the method, do you have any preference?",
      "parentUuid": "70f851b4_774b0592",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66e55b7e_8129869d",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 434,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-19T15:05:51Z",
      "side": 1,
      "message": "(see below)",
      "parentUuid": "4dc4601a_89b20dc7",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5d7722d_710dd21c",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 436,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "\u003c\u003d",
      "range": {
        "startLine": 436,
        "startChar": 21,
        "endLine": 436,
        "endChar": 22
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ddcf4af_6ec8b50f",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 436,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5d7722d_710dd21c",
      "range": {
        "startLine": 436,
        "startChar": 21,
        "endLine": 436,
        "endChar": 22
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "229403b0_205e4590",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 438,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "Explicitly inline? (Related to the comment below.)",
      "range": {
        "startLine": 438,
        "startChar": 4,
        "endLine": 438,
        "endChar": 20
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec047522_60e760da",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 438,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "229403b0_205e4590",
      "range": {
        "startLine": 438,
        "startChar": 4,
        "endLine": 438,
        "endChar": 20
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07397ee7_4e7a953c",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "You should load `hotness_count_` to a local variable to avoid thread races causing underflow. (Maybe that\u0027s not possible with clang++ optimizations but I don\u0027t want to rely on that.)",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc46cc57_d318b074",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "We don\u0027t mark hotness_count_ as atomic for performance reasons, so clang can do anything it wants here. Moving it to a local variable shouldn\u0027t change how clang optimizes.",
      "parentUuid": "07397ee7_4e7a953c",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11bff8ee_229c0b9f",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-19T13:32:33Z",
      "side": 1,
      "message": "You\u0027re relying on GVN in clang++ here. Using a local variable for the first `hotness_count_` read above would provide correct behavior even for -O0.",
      "parentUuid": "dc46cc57_d318b074",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62dfaa79_1a96480f",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-19T13:57:01Z",
      "side": 1,
      "message": "The be clear, this issue here isn\u0027t atomicity - I think we are fine with one thread racing with other thread, and thus one of the updates being ignored.  That is fine by me. We are not suggesting adding the cost of atomicity.\n\nI think Vladimirs point is that as written, this can write negative values into the hotness_counts_ (i.e. the check above passes, but then other thread decrements it, and then this thread decrements it further into negative numbers - to make it worse, this skips the hot value of 0 so potentially might not trigger compilation).  Both Vladimir\u0027s or my suggestion avoid that.",
      "parentUuid": "dc46cc57_d318b074",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96b865d4_793555ca",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T14:29:15Z",
      "side": 1,
      "message": "The check is really to avoid dirtying the method if it already has a value of 0. Overflowing here is indeed something that can be tolerated.\n\nBut I\u0027m not sure what you\u0027re saying Vladimir about GVN - given hotness_threshold_ isnt\u0027 marked atomic, whether you put in a local or not doesn\u0027t make a difference. The compiler is free to make as much optimizations and load/store eliminations it wants on that field.",
      "parentUuid": "62dfaa79_1a96480f",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3371a751_24367fca",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-19T15:05:51Z",
      "side": 1,
      "message": "Vladimir suggestion is to non-atomically load the counter just once rather than twice, which ensures we don\u0027t run past zero.  GVN might do that as optimization anyway... but let\u0027s not rely on that.\n\nSure, not writing unnecessarily is reasonable... what about:\n\n```\nDecrementHotnessCounter(int32_t num_samples \u003d 1) {\n  DCHECK_GE(num_samples, 0);\n  if (hotness_counter_ \u003e 0) {\n    hotness_counter_ \u003d std::max\u003cint32_t\u003e(0, hotness_counter_ - num_samples);\n  }\n}\n```\n\nNote that the arg is signed, so we can DCHECK.\nNote that this also addresses Vladimir\u0027s concern since the code can not write \"negative\" value into the hotness counter.",
      "parentUuid": "96b865d4_793555ca",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e8f85b0_cb929c2b",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T15:16:15Z",
      "side": 1,
      "message": "My plan was not to rely on GVN :) I\u0027ve rewritten it. Let me know what you think.",
      "parentUuid": "3371a751_24367fca",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7a0b961_2503fc2f",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-19T15:19:09Z",
      "side": 1,
      "message": "Well, that would work but rely on doing the calculation as `int32_t` whereas the code\n\n  uint16_t old_hotness_count \u003d hotness_count_\n  if (old_hotness_count !\u003d 0u) {\n    hotness_count_ \u003d (old_hotness_count \u003c\u003d new_samples) ? 0u : old_hotness_count - new_samples;\n  }\n\ndoes not rely on a larger signed type.",
      "parentUuid": "3371a751_24367fca",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "983507ce_baace497",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-19T15:20:43Z",
      "side": 1,
      "message": "And contains only one read of `hotness_count_`, so it cannot underflow by racing with another thread.",
      "parentUuid": "e7a0b961_2503fc2f",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c40738b9_48701513",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T16:23:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "983507ce_baace497",
      "range": {
        "startLine": 440,
        "startChar": 4,
        "endLine": 440,
        "endChar": 50
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c97e2493_96c89147",
        "filename": "runtime/art_method.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-14T13:39:47Z",
      "side": 1,
      "message": "This should be initialized to the warm-threshold, right?\n\nAlso, when we get to zero, how do we track whether we reached the warm-threshold or hot-threshold?",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78e84608_90027109",
        "filename": "runtime/art_method.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "Warm threshold is now getting obsolete, there are really two thresholds:\n- from nterp to baseline: kNterpHotnessMask \n- from baseline to optimizing: kTieredHotnessMask",
      "parentUuid": "c97e2493_96c89147",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea065b43_4a2cac94",
        "filename": "runtime/art_method.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-19T13:57:01Z",
      "side": 1,
      "message": "Ah, fair enough.  I am fine with pushing the dynamic setting to further CLs.\n\nWould you consider renaming it from \"Mask\" to threshold?",
      "parentUuid": "78e84608_90027109",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eae6ec7_f856049f",
        "filename": "runtime/art_method.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T14:29:15Z",
      "side": 1,
      "message": "Yes, it should be renamed, and I was planning on doing that as part of making the treshold adjustable through command line.",
      "parentUuid": "ea065b43_4a2cac94",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a81db1ee_24c831b1",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1961,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "This is odd. We should probably just reset the counter in `ImageWriter::CopyAndFixupMethod()` to avoid this work at runtime.",
      "range": {
        "startLine": 1959,
        "startChar": 8,
        "endLine": 1961,
        "endChar": 30
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31a74302_d20c877a",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 1961,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "The idea behind this is that the counter can be changed through the command line (not implemented in this CL). So doing this at the image writer wouldn\u0027t work.",
      "parentUuid": "a81db1ee_24c831b1",
      "range": {
        "startLine": 1959,
        "startChar": 8,
        "endLine": 1961,
        "endChar": 30
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c2032e5_630596a7",
        "filename": "runtime/interpreter/mterp/nterp.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-14T13:39:47Z",
      "side": 1,
      "message": "The rest of the code is kind of difficult to read with the \"negative increment\".\nI think \"decrement\" would be more readable.\n\nAnother alternative would be initialized the counter to say -1000 (depending on threshold) and count upwards to zero.  Based on the naming, I thought that is what you were doing...",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0a95fd6_37b2444c",
        "filename": "runtime/interpreter/mterp/nterp.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "If it\u0027s confusing, I can drop the constant and just put 1 / -1 in the places where it is being used. Do you think that would be better?",
      "parentUuid": "4c2032e5_630596a7",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0859a304_43e0bf7d",
        "filename": "runtime/interpreter/mterp/nterp.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-19T13:57:01Z",
      "side": 1,
      "message": "That sounds better than the current solution, yes.\n\nTo just bikeshed a bit, my preference would be something like:\n\nArtMethod::DecrementHotnessCounter(int32_t num_samples \u003d 1) {\n  DCHECK_GE(num_samples, 0);\n  hotness_counter_ \u003d std::max(0, hotness_counter_ - num_samples);\n}\n\nThe default means we don\u0027t need the constant at all in most callsites.",
      "parentUuid": "a0a95fd6_37b2444c",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c922d521_d3182818",
        "filename": "runtime/interpreter/mterp/nterp.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T14:29:15Z",
      "side": 1,
      "message": "Done, but note that most call sites are assembly code, where we put the constant :)",
      "parentUuid": "0859a304_43e0bf7d",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c54ce824_10796f8e",
        "filename": "runtime/interpreter/mterp/nterp.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-19T15:05:51Z",
      "side": 1,
      "message": "Ah, right.  Thanks.",
      "parentUuid": "c922d521_d3182818",
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f2eb771_5ee518ce",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 1501,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-13T13:43:00Z",
      "side": 1,
      "message": "Both Nterp and AddSamples() reset the counter when reaching \"hot\" state, so we do not really collect anything here.",
      "range": {
        "startLine": 1501,
        "startChar": 8,
        "endLine": 1501,
        "endChar": 31
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6721e92_6c4db153",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 4
      },
      "lineNbr": 1501,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-19T13:20:18Z",
      "side": 1,
      "message": "Thanks for spotting. I think this is now stale. I\u0027ve changed it to check if the method is still only baseline compiled.",
      "parentUuid": "2f2eb771_5ee518ce",
      "range": {
        "startLine": 1501,
        "startChar": 8,
        "endLine": 1501,
        "endChar": 31
      },
      "revId": "a96ba08f2e8edc8775ba678382dac5895467286f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}