{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6be04cda_d390f834",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 19
      },
      "lineNbr": 72,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T13:43:51Z",
      "side": 1,
      "message": "We can\u0027t do this, when we preopt, we may be running dex2oatd.\n\nYou\u0027ll need another flag to enable it.",
      "range": {
        "startLine": 72,
        "startChar": 51,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e95c4033_89209cc7",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 19
      },
      "lineNbr": 72,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T14:02:19Z",
      "side": 1,
      "message": "Like `CompilerOptions::EmitRunTimeChecksInDebugMode()`?",
      "parentUuid": "6be04cda_d390f834",
      "range": {
        "startLine": 72,
        "startChar": 51,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b35c875_2efe7324",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 19
      },
      "lineNbr": 72,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T14:51:33Z",
      "side": 1,
      "message": "The CC check also runs on debug builds (https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/gc/collector/concurrent_copying.cc;l\u003d68;drc\u003d565b3b67de4b3b781b1c97aa86164c1bd604cd3d).\n\nNote that the runtime check has the same performance as not having the WBE pass enabled. The check would run only for removed write barriers (which would have been emitted if WBE didn\u0027t exist). I don\u0027t think this will have a performance/code size effect.",
      "parentUuid": "e95c4033_89209cc7",
      "range": {
        "startLine": 72,
        "startChar": 51,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1386ffe_a4967bde",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 19
      },
      "lineNbr": 72,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T15:24:47Z",
      "side": 1,
      "message": "About https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/gc/collector/concurrent_copying.cc;l\u003d68;drc\u003d565b3b67de4b3b781b1c97aa86164c1bd604cd3d\n\nThat\u0027s OK as it\u0027s runtime behavior. TLDR is that the code we generate with `dex2oatd` should be exactly the same as the one we generate with `dex2oat`.",
      "parentUuid": "6b35c875_2efe7324",
      "range": {
        "startLine": 72,
        "startChar": 51,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fcd543e_f80b4842",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 19
      },
      "lineNbr": 72,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T15:43:15Z",
      "side": 1,
      "message": "Ack, changed to use `GetCompilerOptions().EmitRunTimeChecksInDebugMode`",
      "parentUuid": "a1386ffe_a4967bde",
      "range": {
        "startLine": 72,
        "startChar": 51,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8916560_0c33e7b2",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 19
      },
      "lineNbr": 5934,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T13:43:51Z",
      "side": 1,
      "message": "Move this logic to `StoreNeedsWriteBarrier`.",
      "range": {
        "startLine": 5932,
        "startChar": 0,
        "endLine": 5934,
        "endChar": 60
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c668292f_2d4a6460",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 19
      },
      "lineNbr": 5934,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T14:51:33Z",
      "side": 1,
      "message": "`StoreNeedsWriteBarrier` is used in other contexts too where WBE doesn\u0027t run e.g. VarHandles.\n\nIf you want, I can add a new method `StoreNeedsWriteBarrier` with an extra `WriteBarrierKind` parameter that has this logic. It can also be a method with a different name.",
      "parentUuid": "a8916560_0c33e7b2",
      "range": {
        "startLine": 5932,
        "startChar": 0,
        "endLine": 5934,
        "endChar": 60
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e902cde_21bdeed1",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 19
      },
      "lineNbr": 5934,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T15:24:47Z",
      "side": 1,
      "message": "Sounds good for another helper, which you will be able to use in the other places.",
      "parentUuid": "c668292f_2d4a6460",
      "range": {
        "startLine": 5932,
        "startChar": 0,
        "endLine": 5934,
        "endChar": 60
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "587bddbc_6cce4a9c",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 19
      },
      "lineNbr": 5934,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T15:43:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e902cde_21bdeed1",
      "range": {
        "startLine": 5932,
        "startChar": 0,
        "endLine": 5934,
        "endChar": 60
      },
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e614521_161d3b6c",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1343,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T13:43:51Z",
      "side": 1,
      "message": "Add a comment that we expect the original reference to be in the same block.",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb24e03c_40e2c70b",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1343,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T14:51:33Z",
      "side": 1,
      "message": "The original reference can be in a different block. For example NullConstant will be in a different block for sure.\n\nDid you mean that the write barrier we are relying on must be in the same block? If so, I added a comment regarding that.",
      "parentUuid": "3e614521_161d3b6c",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5903063_d0d4e5e4",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1343,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T15:24:47Z",
      "side": 1,
      "message": "Doesn\u0027t the code below rely on finding the instruction in the same block?",
      "parentUuid": "eb24e03c_40e2c70b",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dced44e6_195c4cfb",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1343,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T15:43:15Z",
      "side": 1,
      "message": "The instruction yes, but not the original reference. The original reference is about the class, object, or array we are setting (not about the instruction itself).",
      "parentUuid": "f5903063_d0d4e5e4",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61cbe145_76b8f1f6",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1379,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T13:43:51Z",
      "side": 1,
      "message": "Comment what this line is about.",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7306ff62_ed2fa69b",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1379,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T14:51:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61cbe145_76b8f1f6",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99000915_714fe316",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1409,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T13:43:51Z",
      "side": 1,
      "message": "Looks like you could share a lot of code between the two VisitArraySet and VisitInstanceFieldSet.",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "985abf3d_8ca7cf95",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1409,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T14:51:33Z",
      "side": 1,
      "message": "The code is slightly different for the three of them: there are casts like IsInstanceField and AsInstanceField which would need a macro or an if/elseif/else when encountered.\n\nAlso, the ArraySet case is slightly different for ArraySet instructions that can trigger GC.\n\nGiven that these are graph checker checks I\u0027d be leaning towards keeping them as-is.",
      "parentUuid": "99000915_714fe316",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd4aca2d_a77b5953",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 19
      },
      "lineNbr": 1409,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T17:25:54Z",
      "side": 1,
      "message": "Hmm, but the casts to check if its the right instruction kind you could get away with passing a predicate no? (the other cast is for taking the input, so it isn\u0027t needed.",
      "parentUuid": "985abf3d_8ca7cf95",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdf7fa03_966f53e0",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 19
      },
      "lineNbr": 6373,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-15T13:43:51Z",
      "side": 1,
      "message": "Add that this is the default behavior.",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e8a31fa_7061bc6c",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 19
      },
      "lineNbr": 6373,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T14:51:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bdf7fa03_966f53e0",
      "revId": "b37aa046078e18050dfc703052b31262421a82cd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}