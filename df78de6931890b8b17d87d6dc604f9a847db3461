{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "452ffdc1_2e6dda5b",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4067,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "Can we turn this into a `DCHECK_IMPLIES` or a DCHECK in the `else` case?",
      "range": {
        "startLine": 4067,
        "startChar": 0,
        "endLine": 4067,
        "endChar": 55
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cdd1ae5_b4f9bab3",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4067,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "Check for what exactly?\n\nType of invoke is not available in `HInvokePolymorphic`, it is part of `MethodHandle` object.",
      "parentUuid": "452ffdc1_2e6dda5b",
      "range": {
        "startLine": 4067,
        "startChar": 0,
        "endLine": 4067,
        "endChar": 55
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d207bd83_9e5a2419",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4067,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-09T12:37:12Z",
      "side": 1,
      "message": "Check for the comment. It is saying `If it is not reference, it is not InvokeVirtual`. This is something we are relying on. Can it be turned into a DCHECK?",
      "parentUuid": "0cdd1ae5_b4f9bab3",
      "range": {
        "startLine": 4067,
        "startChar": 0,
        "endLine": 4067,
        "endChar": 55
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b3cbf8f_b2446c27",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4067,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T15:26:09Z",
      "side": 1,
      "message": "It can be `InvokeStatic` MethodHandle which takes one `int` (like `MethodHandle` for `Integer::valueOf` might look like). We don\u0027t know what is `MethodHandle`\u0027s type at this point.\n\nI\u0027ve added DCHECK to `IntrinsicCodeGeneratorX86_64::VisitMethodHandleInvokeExact` as we discussed.",
      "parentUuid": "d207bd83_9e5a2419",
      "range": {
        "startLine": 4067,
        "startChar": 0,
        "endLine": 4067,
        "endChar": 55
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7983c57_a361f195",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4106,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "style: define local variables for the `block` and the `graph` and query them just once",
      "range": {
        "startLine": 4106,
        "startChar": 13,
        "endLine": 4106,
        "endChar": 31
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25af9cd5_5eef2025",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4106,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7983c57_a361f195",
      "range": {
        "startLine": 4106,
        "startChar": 13,
        "endLine": 4106,
        "endChar": 31
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fa0d198_8f5ff76a",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4111,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "We need this because we do `CreateLoadMethodTypeRuntimeCallLocationSummary` in line 4117. Alternatively we can remove both lines 4111-4120 and do\n\n```\nMoveConstant(Location::RegisterLocation(RAX), load_method_type-\u003eGetProtoIndex().index_);\nCheckEntrypointTypes\u003ckQuickResolveMethodType, void*, uint32_t\u003e();\nInvokeRuntime(kQuickResolveMethodType, load_method_type, load_method_type-\u003eGetDexPc());\n```\n\nIf you do this, please add a comment that this is the result of manually inlining CreateLoadMethodTypeRuntimeCallLocationSummary and GenerateLoadMethodTypeRuntimeCall in this intrinsic",
      "range": {
        "startLine": 4111,
        "startChar": 4,
        "endLine": 4111,
        "endChar": 51
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8efd731_2050c956",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4111,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "`new LocationSummary` [1] needs it to be set, I think.\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/compiler/optimizing/locations.cc;l\u003d56;drc\u003dcde6497d286337de2ed21c71c85157e2745b742b",
      "parentUuid": "5fa0d198_8f5ff76a",
      "range": {
        "startLine": 4111,
        "startChar": 4,
        "endLine": 4111,
        "endChar": 51
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d929a6ee_96af9221",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4111,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-09T12:37:12Z",
      "side": 1,
      "message": "But the location `LocationSummary` is only used for the `MoveConstant` right?",
      "parentUuid": "c8efd731_2050c956",
      "range": {
        "startLine": 4111,
        "startChar": 4,
        "endLine": 4111,
        "endChar": 51
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046fac7f_386b5d7c",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4111,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T15:26:09Z",
      "side": 1,
      "message": "`LocationSummary` constructor needs it to be set [1]\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/compiler/optimizing/locations.cc;l\u003d56;drc\u003dcde6497d286337de2ed21c71c85157e2745b742b",
      "parentUuid": "d929a6ee_96af9221",
      "range": {
        "startLine": 4111,
        "startChar": 4,
        "endLine": 4111,
        "endChar": 51
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae46b38_d03406f9",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4142,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "Can we use one less temporary register? `temp` lifetime seems to end before `vtable_index`\u0027s begins",
      "range": {
        "startLine": 4138,
        "startChar": 0,
        "endLine": 4142,
        "endChar": 79
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d72d133_cae0f3da",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4142,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "Thanks, done.",
      "parentUuid": "3ae46b38_d03406f9",
      "range": {
        "startLine": 4138,
        "startChar": 0,
        "endLine": 4142,
        "endChar": 79
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71d6fe09_6ccf4380",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4142,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-09T12:37:12Z",
      "side": 1,
      "message": "Let\u0027s just reuse `temp` so that there\u0027s no implicit clobber of `GetTemp(0)`. If you want, you can add a comment in line 4148 mentioning that\n```\n`temp` now has the value of the vtable index\n```",
      "parentUuid": "4d72d133_cae0f3da",
      "range": {
        "startLine": 4138,
        "startChar": 0,
        "endLine": 4142,
        "endChar": 79
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45025caa_39c0d2f0",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4142,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T15:26:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71d6fe09_6ccf4380",
      "range": {
        "startLine": 4138,
        "startChar": 0,
        "endLine": 4142,
        "endChar": 79
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b934939c_687681cd",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4157,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "Not sure I understand this. No need to check what?",
      "range": {
        "startLine": 4157,
        "startChar": 7,
        "endLine": 4157,
        "endChar": 30
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81ec0072_8b21b576",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 16
      },
      "lineNbr": 4157,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "It\u0027s no longer relevant, thanks for catching!",
      "parentUuid": "b934939c_687681cd",
      "range": {
        "startLine": 4157,
        "startChar": 7,
        "endLine": 4157,
        "endChar": 30
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c48e0c4_1822eaa7",
        "filename": "test/3000-mh-com/Android.bp",
        "patchSetId": 16
      },
      "lineNbr": 1,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "FYI this file is not required to submit tests. Roland creates them for new tests on batches",
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbdea3ad_df798438",
        "filename": "test/3000-mh-com/Android.bp",
        "patchSetId": 16
      },
      "lineNbr": 1,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "Thanks, removed.",
      "parentUuid": "9c48e0c4_1822eaa7",
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d22b11e2_e0deb2f9",
        "filename": "test/3000-mh-com/src/Main.java",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "Please fix this ERROR reported by Copyright header: Missing AOSP copyright header\n\nAnalyzer Description: Validates if source files start with correct copyright header\n\nMissing AOSP copyright header\n\n---\n\nYou can copy it from any other ART test. Make sure it says 2024",
      "range": {
        "startLine": 0,
        "startChar": 0,
        "endLine": 0,
        "endChar": 0
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c7137f9_4541aea5",
        "filename": "test/3000-mh-com/src/Main.java",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d22b11e2_e0deb2f9",
      "range": {
        "startLine": 0,
        "startChar": 0,
        "endLine": 0,
        "endChar": 0
      },
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1db6a1f1_92c40ce2",
        "filename": "test/3000-mh-com/src/Main.java",
        "patchSetId": 16
      },
      "lineNbr": 1,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-08T15:51:52Z",
      "side": 1,
      "message": "Style question: Why `3000` in the test name? People usually grab the latest test and add `1` to it. We are in the low 2000 now so it is quite a jump to 3k",
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db42d1a0_e5343038",
        "filename": "test/3000-mh-com/src/Main.java",
        "patchSetId": 16
      },
      "lineNbr": 1,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-07-09T11:32:51Z",
      "side": 1,
      "message": "So I can always add `-t 3000` and not worry that it will run two tests. Renamed now.",
      "parentUuid": "1db6a1f1_92c40ce2",
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "752b176b_82427cde",
        "filename": "test/3000-mh-com/src/Main.java",
        "patchSetId": 16
      },
      "lineNbr": 1,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-07-09T12:37:12Z",
      "side": 1,
      "message": "Ah you can always do `-t 2277-methodhandle-invokeexact` in that case",
      "parentUuid": "db42d1a0_e5343038",
      "revId": "df78de6931890b8b17d87d6dc604f9a847db3461",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}