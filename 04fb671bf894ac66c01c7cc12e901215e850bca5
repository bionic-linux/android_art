{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2d59d503_16d6b43d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-10-10T08:41:36Z",
      "side": 1,
      "message": "PTAL. Thanks!",
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ab699f5_a385278c",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-10-10T18:03:01Z",
      "side": 1,
      "message": "I doubt that this would work, at least not for thread-pool workers. The ThreadStart callback (below) gets called as part of `Thread::Attach`, but in case of thread-pool `is_runtime_thread_` is set after `AttachCurrentThread()` (see `ThreadPoolWorker::Callback()` in runtime/thread_pool.cc",
      "range": {
        "startLine": 189,
        "startChar": 12,
        "endLine": 189,
        "endChar": 27
      },
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "676c0407_6b236d26",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-10-11T11:27:30Z",
      "side": 1,
      "message": "Thanks! You are right. I missed this entirely. I guess we could make it work by passing an extra argument to Thread::Attach but not sure if it\u0027s worth it. I think clearing callbacks on Shutdown might be a better fix. Also we may not need GCCriticalSection in deopt manager. Let\u0027s discuss this in Today\u0027s meeting and update the CL depending on it.",
      "parentUuid": "8ab699f5_a385278c",
      "range": {
        "startLine": 189,
        "startChar": 12,
        "endLine": 189,
        "endChar": 27
      },
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37dd32b0_034598f9",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-10-10T08:41:36Z",
      "side": 1,
      "message": "This is only a temporary hack to check if this fixes libjdwp timeouts. I can also do it as a separate CL and revert it once we have a proper fix in place.",
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a3ce850_6aa10378",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-10T08:54:08Z",
      "side": 1,
      "message": "Can\u0027t the name of a thread be defined at the user level? Don\u0027t we have something in the runtime that can do this check instead? Would IsShuttingDown be good enough to avoid sending events?",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 199,
        "endChar": 42
      },
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70f3fa6b_7a9ccb7a",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-10T08:54:08Z",
      "side": 1,
      "message": "Up to you what will be the easiest, both work for me.",
      "parentUuid": "37dd32b0_034598f9",
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10b9dbc5_282e5374",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-10-10T10:26:01Z",
      "side": 1,
      "message": "\u003e Can\u0027t the name of a thread be defined at the user level?\n\nYes, you are right about thread name. I think thread name isn\u0027t a good fix. \n\n\u003e Don\u0027t we have something in the runtime that can do this check instead?\n\nI couldn\u0027t find anything else to identify the Shutdown thread. Maybe we could consider adding a \"InternalThreadGroup\" to identify such threads but since it\u0027s a temporary fix it might not be a good idea. Though, I could potentially set the Shutdown thread as a runtime thread and the callbacks won\u0027t be called.  We don\u0027t allow class loading on runtime threads. Do we need this on a Shutdown thread or can I just set it as a Runtime thread?\n\n\u003e Would IsShuttingDown be good enough to avoid sending events?\n\nIsShuttingDown is set much later in the shutdown process. The very first thing we do in ~Runtime is to attach a thread which is where this callback is being called. IsShuttingDown is set after we shutdown JIT and wait for any ongoing GC to complete. I don\u0027t think I can set the shutting_down_ earlier because we disallow many things once that is set including Attaching threads. I could introduce a new variable to indicate that shutdown was initiated and prevent any Thread attach callbacks. I will try this if setting it as a Runtime thread isn\u0027t an option.",
      "parentUuid": "4a3ce850_6aa10378",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 199,
        "endChar": 42
      },
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b66690f3_3d8dd659",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-10-10T11:10:58Z",
      "side": 1,
      "message": "\u003e Do we need this on a Shutdown thread or can I just set it as a Runtime thread?\n\nUnfortunately, I think the shutdown thread is just the main thread no?",
      "parentUuid": "10b9dbc5_282e5374",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 199,
        "endChar": 42
      },
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df6a04dc_d44b1b0d",
        "filename": "runtime/runtime_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-10-10T11:47:05Z",
      "side": 1,
      "message": "Yes, you are right. Shutdown thread is the main thread. \n\nI was actually thinking of a different solution. Maybe once the Shutdown starts, we don\u0027t expect any callbacks other than phase_callbacks_ (for VMDeath) and sigquit_callbacks_ (for dumping when aborting). So maybe we can simply clear the callbacks related to other things like thread callbacks, method callbacks etc., Though I am not quite sure I understand what the standard says. Standard is clear that we don\u0027t need to send any events after VMDeath event. VMDeath event is sent in ~Runtime after attaching the GC thread and waiting for any GC to finish. I will think a bit more about this.",
      "parentUuid": "b66690f3_3d8dd659",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 199,
        "endChar": 42
      },
      "revId": "04fb671bf894ac66c01c7cc12e901215e850bca5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}