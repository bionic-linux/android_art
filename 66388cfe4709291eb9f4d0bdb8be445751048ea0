{
  "comments": [
    {
      "key": {
        "uuid": "7e715abf_2591fbca",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-07T23:45:12Z",
      "side": 1,
      "message": "nit: Can we not use pid_t everywhere?",
      "range": {
        "startLine": 266,
        "startChar": 2,
        "endLine": 266,
        "endChar": 10
      },
      "revId": "66388cfe4709291eb9f4d0bdb8be445751048ea0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c9c226e_c3a805ae",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-08T00:55:08Z",
      "side": 1,
      "message": "See my first comment on this CL. I don\u0027t know why this originally used a uint type, and I can only think of a semi-plausible reason for leaving it with a fixed known size.\n\nThe use of (pid_t)(-1) also seems slightly more brittle than (uint32_t)(-1). But in practice, I think neither is completely legit nor really broken.\n\nIf there\u0027s a preference for changing it, I can.",
      "parentUuid": "7e715abf_2591fbca",
      "range": {
        "startLine": 266,
        "startChar": 2,
        "endLine": 266,
        "endChar": 10
      },
      "revId": "66388cfe4709291eb9f4d0bdb8be445751048ea0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b004845c_2f2a4aa5",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-08T15:28:56Z",
      "side": 1,
      "message": "Why is it more brittle? pid_t is signed.\n\nhttp://pubs.opengroup.org/onlinepubs/009696699/basedefs/sys/types.h.html\n\n\u003e blksize_t, pid_t, and ssize_t shall be signed integer types.\n\nDoesn\u0027t it always fit into atomic?\n(this seems to imply sizeof(pid_t) \u003c\u003d sizeof(long) , no?)\n\n\u003e The implementation shall support one or more programming environments in which the widths of blksize_t, pid_t, size_t, ssize_t, suseconds_t, and useconds_t are no greater than the width of type long.",
      "parentUuid": "1c9c226e_c3a805ae",
      "range": {
        "startLine": 266,
        "startChar": 2,
        "endLine": 266,
        "endChar": 10
      },
      "revId": "66388cfe4709291eb9f4d0bdb8be445751048ea0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c9700c6_54cf7df2",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-09-08T17:03:14Z",
      "side": 1,
      "message": "pid_t also seems more intention-revealing. java has so many different \"thread ids\" that using pid_t seems like a useful clue that we\u0027re talking about the \"real\" one here.",
      "parentUuid": "b004845c_2f2a4aa5",
      "range": {
        "startLine": 266,
        "startChar": 2,
        "endLine": 266,
        "endChar": 10
      },
      "revId": "66388cfe4709291eb9f4d0bdb8be445751048ea0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72f3b582_19438445",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-08T17:35:53Z",
      "side": 1,
      "message": "OK. I\u0027ll use pid_t in the next version.",
      "parentUuid": "8c9700c6_54cf7df2",
      "range": {
        "startLine": 266,
        "startChar": 2,
        "endLine": 266,
        "endChar": 10
      },
      "revId": "66388cfe4709291eb9f4d0bdb8be445751048ea0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}