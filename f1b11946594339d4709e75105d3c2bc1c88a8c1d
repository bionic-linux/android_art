{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "97e4a115_06c139b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-12T16:00:26Z",
      "side": 1,
      "message": "I recommend `--optimizing` as the primary test set for compiler changes.",
      "range": {
        "startLine": 9,
        "startChar": 63,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de589816_cd12ecba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 3163676
      },
      "writtenOn": "2024-02-12T16:29:28Z",
      "side": 1,
      "message": "But `--jit-on-first-use` looks more interesting for JIT since force to compile methods, otherwise some parts of tests are being executed on interpreter.\n\nThere was discussion on github https://github.com/google/android-riscv64/issues/120#issuecomment-1815176523\n\nIsn\u0027t `StringEquals` similar case?",
      "parentUuid": "97e4a115_06c139b8",
      "range": {
        "startLine": 9,
        "startChar": 63,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13de7f03_8b15697e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-12T16:41:07Z",
      "side": 1,
      "message": "Elliot quoted me there. But if you read carefully, that bit about `--jit-on-first-use` is conditional on testing \"JIT-specific code\".\n\nThere is no \"JIT-specific code\" in this change, so I would just stick with `--optimizing`. It should sufficiently test the StringEquals intrinsic code and it\u0027s usually faster.",
      "parentUuid": "de589816_cd12ecba",
      "range": {
        "startLine": 9,
        "startChar": 63,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85ddbbf5_69929e44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 3163676
      },
      "writtenOn": "2024-02-12T17:02:58Z",
      "side": 1,
      "message": "So, does it mean that `--optimizing` will generate intrinsic code on first use of it?\nI\u0027m asking because found some errors in my implementation when did arraycopy only in `--jit-on-first-use` configuration. Probably I missed something.",
      "parentUuid": "13de7f03_8b15697e",
      "range": {
        "startLine": 9,
        "startChar": 63,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f65dad3e_f0c35f58",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-14T08:32:16Z",
      "side": 1,
      "message": "With `--optimizing`, the code is emitted ahead of time by running `dex2oat`.\n\nFor a change like this, I would not expect `--jit-on-first-use` to uncover issues that `--optimizing` did not find but it can sometimes happen.\n\nFeel free to keep the `Test:` as is. (But some tests are a bit flaky for `--no-image` with OOME occasionally thrown at some unexpected places.)",
      "parentUuid": "85ddbbf5_69929e44",
      "range": {
        "startLine": 9,
        "startChar": 63,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de62412_323c01ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 3163676
      },
      "writtenOn": "2024-02-14T15:29:52Z",
      "side": 1,
      "message": "I see, thank you!",
      "parentUuid": "f65dad3e_f0c35f58",
      "range": {
        "startLine": 9,
        "startChar": 63,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d87576f_acafbb4e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 3298324
      },
      "writtenOn": "2024-03-16T22:17:17Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9de62412_323c01ae",
      "range": {
        "startLine": 9,
        "startChar": 63,
        "endLine": 9,
        "endChar": 92
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50ccbee1_503a0ad4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-12T16:00:26Z",
      "side": 1,
      "message": "Please add\n\n    Bug: 283082089",
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5e42101_b86de362",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 3298324
      },
      "writtenOn": "2024-03-16T22:17:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50ccbee1_503a0ad4",
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "946de284_55392692",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1168,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-12T16:00:26Z",
      "side": 1,
      "message": "We should be able to allocate another X register from `srs` (and request one less temp from the register allocator) but we shall need to use explicit `Ld()` instead of `Loadd()` below.",
      "range": {
        "startLine": 1168,
        "startChar": 2,
        "endLine": 1168,
        "endChar": 66
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1296b52a_d00ef9a8",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1168,
      "author": {
        "id": 3298324
      },
      "writtenOn": "2024-03-16T22:17:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "946de284_55392692",
      "range": {
        "startLine": 1168,
        "startChar": 2,
        "endLine": 1168,
        "endChar": 66
      },
      "revId": "f1b11946594339d4709e75105d3c2bc1c88a8c1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}