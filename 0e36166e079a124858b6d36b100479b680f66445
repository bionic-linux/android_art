{
  "comments": [
    {
      "key": {
        "uuid": "e541c27a_e67c4f4c",
        "filename": "runtime/gc/collector/concurrent_copying-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Add a comment why the region-space large objects aren\u0027t marked?",
      "range": {
        "startLine": 36,
        "startChar": 61,
        "endLine": 36,
        "endChar": 74
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_86210b58",
        "filename": "runtime/gc/collector/concurrent_copying-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Maybe \"last non-sticky GC\"?",
      "range": {
        "startLine": 38,
        "startChar": 53,
        "endLine": 38,
        "endChar": 60
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_06b17bef",
        "filename": "runtime/gc/collector/concurrent_copying-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "This is because if the object may have a from-space reference, it should be dirty, and because we just need to enable the read barrier on this object for GC marking not to avoid missing the reference, correct? Expand the comment?",
      "range": {
        "startLine": 42,
        "startChar": 15,
        "endLine": 42,
        "endChar": 63
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_a699a779",
        "filename": "runtime/gc/collector/concurrent_copying-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Can you expand on this? I don\u0027t understand.",
      "range": {
        "startLine": 44,
        "startChar": 51,
        "endLine": 45,
        "endChar": 22
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_c9b164db",
        "filename": "runtime/gc/collector/concurrent_copying-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "I see kNoUnEvac means we do not mark the unevac objects. Since it\u0027s passed through other functions like Scan, how about negating the meaning and renaming it to kMarkUnEvac (to avoid a double negative) or something a bit more specific?",
      "range": {
        "startLine": 160,
        "startChar": 10,
        "endLine": 160,
        "endChar": 19
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_89f2bc96",
        "filename": "runtime/gc/collector/concurrent_copying-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "If everything in the unevac space should be marked in the mark bitmap aside from large objects, when does the second condition apply?",
      "range": {
        "startLine": 161,
        "startChar": 14,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_172334ac",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "If we create this once and never delete it, do this in the constructor maybe?",
      "range": {
        "startLine": 173,
        "startChar": 6,
        "endLine": 173,
        "endChar": 26
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_d786dcc3",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "This case corresponds to both the non-moving space and the region space?",
      "range": {
        "startLine": 178,
        "startChar": 6,
        "endLine": 178,
        "endChar": 15
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_77c0309d",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 179,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Does this work for the region space? I thought the region space doesn\u0027t have the bitmaps registered in the space itself.",
      "range": {
        "startLine": 179,
        "startChar": 45,
        "endLine": 179,
        "endChar": 65
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_b7a4884f",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 180,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "This says the region space, but is this both for the region space and the non-moving space?",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 50
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_97a98427",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "This doesn\u0027t need to be Limit() because we don\u0027t care the cards that get dirty at the newly-expanded end of the non-moving space?",
      "range": {
        "startLine": 183,
        "startChar": 17,
        "endLine": 183,
        "endChar": 20
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_979d0465",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 565,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "/* kNoUnevac */",
      "range": {
        "startLine": 565,
        "startChar": 9,
        "endLine": 565,
        "endChar": 13
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_1a10f9a6",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 629,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "This if statement is between the two above/below blocks that are kind of related. Move this up or down by one block?\n\n(You said this needs to go before the immune space scan in person)",
      "range": {
        "startLine": 629,
        "startChar": 2,
        "endLine": 629,
        "endChar": 22
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_daa5e19c",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 644,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "This also scans the non-moving space, right?",
      "range": {
        "startLine": 644,
        "startChar": 48,
        "endLine": 644,
        "endChar": 68
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_5a89d11d",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 647,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "I don\u0027t follow. Can you expand?",
      "range": {
        "startLine": 646,
        "startChar": 9,
        "endLine": 647,
        "endChar": 67
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_3a961d3e",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 661,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Maybe rename this to done_generational_card_scanning_ or something along that line to be more specific?",
      "range": {
        "startLine": 661,
        "startChar": 4,
        "endLine": 661,
        "endChar": 18
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_3a6cdd30",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 1378,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "/* kNoUnEvac */",
      "range": {
        "startLine": 1378,
        "startChar": 11,
        "endLine": 1378,
        "endChar": 15
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_bab90d8e",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 1381,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "I guess this change needs to be rebased to pick up the new logic to mark the unevac space object later in this function?",
      "range": {
        "startLine": 1381,
        "startChar": 28,
        "endLine": 1381,
        "endChar": 44
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_5ac1d1fe",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 1382,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Move this down out of the if statement blocks to dedup?",
      "range": {
        "startLine": 1382,
        "startChar": 6,
        "endLine": 1382,
        "endChar": 25
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_ac867710",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 1623,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "As we discussed, I think we should set the newly allocated flag in AllocLarge() and only clear a large object if it\u0027s newly allocated and unreachable in ClearFromSpace()?",
      "range": {
        "startLine": 1623,
        "startChar": 19,
        "endLine": 1623,
        "endChar": 33
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_da8601c4",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 1650,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Needs a rebase to use IsMarkedUnevacFromSpace()?",
      "range": {
        "startLine": 1650,
        "startChar": 8,
        "endLine": 1650,
        "endChar": 13
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_faaae51b",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 1653,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "After a rebase, this applies to the generational case only and we need to use IsMarkedUnevacFromSpace() if non-generational?",
      "range": {
        "startLine": 1653,
        "startChar": 8,
        "endLine": 1653,
        "endChar": 13
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_5a655116",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 1845,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Do we need to pass in kNoUnEvac here?",
      "range": {
        "startLine": 1845,
        "startChar": 16,
        "endLine": 1845,
        "endChar": 24
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_da2a8193",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2088,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "This marks the moved object and is necessary so that we can walk the objects in the next gc, as you said in person?",
      "range": {
        "startLine": 2088,
        "startChar": 26,
        "endLine": 2088,
        "endChar": 42
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_3a24ddc1",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2123,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "I think we can move the above AtomicTestAndSet calls here and dedup.\n\nAfter a rebase, is this still okay because a mutator may be setting on the mark bitmap here even though we changed it so only the GC thread does it without a CAS in the other CL?",
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_7a513536",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2224,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "If generational, assert this case shouldn\u0027t happen (it must be set in the bitmap)? Or is this about the large object space (which can be asserted)?",
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_fa30a5ec",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2230,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Is a similar change necessary in AsserToSpaceInvarint()?",
      "range": {
        "startLine": 2227,
        "startChar": 0,
        "endLine": 2230,
        "endChar": 5
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_7a45b553",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2283,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "You mentioned this in person, but some synchronization will be necessary for this variable?",
      "range": {
        "startLine": 2283,
        "startChar": 9,
        "endLine": 2283,
        "endChar": 23
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_5a743191",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2286,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Also say we need to set the gray bit to trigger the read barrier for loads from this object?",
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_1af919df",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2295,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "For a sticky the mark bitmap is bound to the live bitmap, right? Then the alloc/live stack will make sure they will be marked after this GC and we don\u0027t need to mark them here?\n\n(Update: you are going to change it so that we collect the non-moving and the LOS in the sticky CC.)",
      "range": {
        "startLine": 2291,
        "startChar": 0,
        "endLine": 2295,
        "endChar": 9
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25bd9ae6_ec090f8c",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 2299,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Can we just return here without falling through if done_scanning is true because we aren\u0027t reclaiming the non-moving or LOS object here?\n\n(Update: you are going to change it so that we collect the non-moving and the LOS in the sticky CC.)",
      "range": {
        "startLine": 2299,
        "startChar": 4,
        "endLine": 2299,
        "endChar": 5
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_c67313a9",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-08-27T00:12:38Z",
      "side": 1,
      "message": "Add the kEvacModeForceAll case here?",
      "range": {
        "startLine": 121,
        "startChar": 53,
        "endLine": 121,
        "endChar": 54
      },
      "revId": "0e36166e079a124858b6d36b100479b680f66445",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}