{
  "comments": [
    {
      "key": {
        "uuid": "16b509da_1a229d75",
        "filename": "runtime/gc/accounting/bitmap.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-23T19:25:01Z",
      "side": 1,
      "message": "Would it make sense to have this line in jit_code_cache.cc rather than here because jit_code_cache depends on bitmap, not the other way around?\n\n(If you feel like it, I think it\u0027s an option to try to move this class to a more generic location, outside of gc/. Mathieu? No problem not to do that in this CL though.)",
      "range": {
        "startLine": 95,
        "startChar": 15,
        "endLine": 95,
        "endChar": 32
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16c1896c_fa9f898c",
        "filename": "runtime/gc/accounting/bitmap.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T21:00:25Z",
      "side": 1,
      "message": "I think I need it here because that\u0027s where the template methods of MemoryRangeBitmap are (to avoid stl template instantiation errors). I agree having it elsewhere is cleaner.",
      "parentUuid": "16b509da_1a229d75",
      "range": {
        "startLine": 95,
        "startChar": 15,
        "endLine": 95,
        "endChar": 32
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7671e51a_6546a63c",
        "filename": "runtime/gc/accounting/bitmap.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-10-26T17:15:36Z",
      "side": 1,
      "message": "it\u0027s unfortunate to need keeping this here...",
      "parentUuid": "16c1896c_fa9f898c",
      "range": {
        "startLine": 95,
        "startChar": 15,
        "endLine": 95,
        "endChar": 32
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7671e51a_e531b6d0",
        "filename": "runtime/gc/accounting/bitmap.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T18:12:39Z",
      "side": 1,
      "message": "Yeah agree. But it requires the cleanup Hiroshi mentions, so in another change.",
      "parentUuid": "7671e51a_6546a63c",
      "range": {
        "startLine": 95,
        "startChar": 15,
        "endLine": 95,
        "endChar": 32
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76dac536_5d717b0b",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-23T19:25:01Z",
      "side": 1,
      "message": "I think this should use the parallel version AtomicTestAndSetBit() as multiple runnable threads could try to set in a checkpoint.",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56b5c1f6_bca901b8",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T21:00:25Z",
      "side": 1,
      "message": "Why could it be a problem that multiple threads set the same bit?",
      "parentUuid": "76dac536_5d717b0b",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76dac536_038072c0",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T21:55:21Z",
      "side": 1,
      "message": "You can lose writes if two threads are marking bits to the same word in the bitmap if you dont use AtomicTestAndSet.",
      "parentUuid": "56b5c1f6_bca901b8",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f69a3588_e1cda697",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T22:16:42Z",
      "side": 1,
      "message": "Ah good to know, will change to AtomicTestAndSet then, thanks!",
      "parentUuid": "76dac536_038072c0",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b04d09_1bed9be4",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f69a3588_e1cda697",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16b509da_fa8ec9bc",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 312,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-23T19:25:01Z",
      "side": 1,
      "message": "How about adding\n\nCHECK(thread \u003d\u003d self || thread-\u003eIsSuspended());\n\nlike the other checkpoint closure classes?",
      "range": {
        "startLine": 312,
        "startChar": 7,
        "endLine": 312,
        "endChar": 10
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b04d09_fb1aefb5",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 312,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16b509da_fa8ec9bc",
      "range": {
        "startLine": 312,
        "startChar": 7,
        "endLine": 312,
        "endChar": 10
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6b795e1_b94e1f56",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-23T19:25:01Z",
      "side": 1,
      "message": "Would we want to LOG instead VLOG if a non-debug build? This should happen rarely in production but if it happens, it may be worth warning as performance could degrade noticeably and someone may want to know about?",
      "range": {
        "startLine": 326,
        "startChar": 2,
        "endLine": 326,
        "endChar": 6
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b04d09_db1f33a4",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6b795e1_b94e1f56",
      "range": {
        "startLine": 326,
        "startChar": 2,
        "endLine": 326,
        "endChar": 6
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e4cdf6_417a767a",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T22:08:17Z",
      "side": 1,
      "message": "Do you want to clear the live bitmap? If this is not done, the things which end up marked will be held live permanantly in future GCs.",
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56b5c1f6_7cb4990a",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T22:16:42Z",
      "side": 1,
      "message": "Yeah that was the intent of the Clear call below on the individual bit. Should I use Bitmap::Clear() for clearing everything?",
      "parentUuid": "36e4cdf6_417a767a",
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b04d09_bb146789",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56b5c1f6_7cb4990a",
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e4cdf6_6196921b",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T22:08:17Z",
      "side": 1,
      "message": "Is there a race here with multiple JIT compiler threads where a thread could compile a method, set the entry point, but not have the live/mark bit set?",
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1683491e_8ab3ab22",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T22:16:42Z",
      "side": 1,
      "message": "Good catch. Adding a WaitForPotentialGCToComplete or maybe just marking the bit if we see a GC when setting an entry point should fix it. WDYT?",
      "parentUuid": "36e4cdf6_6196921b",
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1698a98e_e2312627",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T14:27:19Z",
      "side": 1,
      "message": "Actually, I don\u0027t think we have a problem. We only set the entry point when we have the lock. And we only have the lock if there is no collection in progress. I added a DCHECK in CommitCode.",
      "parentUuid": "1683491e_8ab3ab22",
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e4cdf6_2111ea6a",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 363,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T21:55:21Z",
      "side": 1,
      "message": "Iterating over this is probably not safe since the ArtMethod pointers may have been class unloaded, any idea how to deal with this? Maybe I should add a sweeping phase that removes ArtMethods that have an unmarked class loader.",
      "range": {
        "startLine": 363,
        "startChar": 19,
        "endLine": 363,
        "endChar": 35
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7671e51a_85b3a222",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 363,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T22:16:42Z",
      "side": 1,
      "message": "Two options I think:\n1) We don\u0027t do much with the ArtMethod if the bit is not set: we clear the counter of the method and we dcheck the entrypoint. We could decide on not doing anything by removing the dcheck and have a different strategy for counting again in the interpreter.\n2) We could have a hook when the class loader is being deleted to clear the methods in the cache.",
      "parentUuid": "36e4cdf6_2111ea6a",
      "range": {
        "startLine": 363,
        "startChar": 19,
        "endLine": 363,
        "endChar": 35
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96df3923_84f80a30",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 363,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T23:00:25Z",
      "side": 1,
      "message": "If the ArtMethod\u0027s linear alloc has been freed then it could cause corruption to clear the counter. I think clearing ArtMethods as we perform unloading might be OK. I\u0027ll try to implement that soon.",
      "parentUuid": "7671e51a_85b3a222",
      "range": {
        "startLine": 363,
        "startChar": 19,
        "endLine": 363,
        "endChar": 35
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16c1896c_da1f25a4",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 363,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T14:27:19Z",
      "side": 1,
      "message": "Turns out it\u0027s more the changing of all entry points to interpreter that will be problematic. I\u0027ve added the hook form the class loader destructor.",
      "parentUuid": "96df3923_84f80a30",
      "range": {
        "startLine": 363,
        "startChar": 19,
        "endLine": 363,
        "endChar": 35
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56e941ce_bce0c180",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 372,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-23T19:25:01Z",
      "side": 1,
      "message": "Is this necessary? We just checked if it\u0027s set?",
      "range": {
        "startLine": 372,
        "startChar": 25,
        "endLine": 372,
        "endChar": 30
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7671e51a_25a58edc",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 372,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T21:00:25Z",
      "side": 1,
      "message": "Isn\u0027t it necessary for the next GC round?",
      "parentUuid": "56e941ce_bce0c180",
      "range": {
        "startLine": 372,
        "startChar": 25,
        "endLine": 372,
        "endChar": 30
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96df3923_21af2806",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 372,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T21:55:21Z",
      "side": 1,
      "message": "Hiroshi means that you alrady know the live bit is not set since that is what is checked in the condition.",
      "parentUuid": "7671e51a_25a58edc",
      "range": {
        "startLine": 372,
        "startChar": 25,
        "endLine": 372,
        "endChar": 30
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d67c51f3_a8d95b56",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 372,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-23T22:16:42Z",
      "side": 1,
      "message": "Yup got things mixed up, this should have been in the if branch.",
      "parentUuid": "96df3923_21af2806",
      "range": {
        "startLine": 372,
        "startChar": 25,
        "endLine": 372,
        "endChar": 30
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6ceb575_2aa0e3cb",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 372,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T23:00:25Z",
      "side": 1,
      "message": "I think its better to clear the whole bitmap at the end of the GC since that will madvise dirty pages in the bitmap.",
      "parentUuid": "d67c51f3_a8d95b56",
      "range": {
        "startLine": 372,
        "startChar": 25,
        "endLine": 372,
        "endChar": 30
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76dac536_83272252",
        "filename": "runtime/jit/jit_code_cache.h",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T22:08:17Z",
      "side": 1,
      "message": "Sort alphabetically.",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 123,
        "endChar": 23
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96df3923_81a47cf7",
        "filename": "runtime/jit/jit_code_cache.h",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-23T22:08:17Z",
      "side": 1,
      "message": "GUARDED_BY(lock_)?",
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6d53101_20d00ab6",
        "filename": "runtime/jit/profiling_info.cc",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-23T19:25:01Z",
      "side": 1,
      "message": "Do you mind changing this to \"Read()\" (enabling the read barrier)? Or I\u0027ll make this change separately.",
      "range": {
        "startLine": 89,
        "startChar": 53,
        "endLine": 89,
        "endChar": 74
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b04d09_9b19abc1",
        "filename": "runtime/jit/profiling_info.cc",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-26T14:27:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6d53101_20d00ab6",
      "range": {
        "startLine": 89,
        "startChar": 53,
        "endLine": 89,
        "endChar": 74
      },
      "revId": "30a27db1a95500f039bccfacfe908783d133e3bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}