{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "63880c6d_33e1ce6a",
        "filename": "test/639-checker-code-sinking/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 428,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-14T11:06:52Z",
      "side": 0,
      "message": "In tries like these we are eliminating the `TryBoundary` instruction making this test (and below) useless. The only way to keep the `TryBoundary` instructions is to add throwing instructions, but those block code sinking the Object creation to the catch.",
      "range": {
        "startLine": 426,
        "startChar": 0,
        "endLine": 428,
        "endChar": 7
      },
      "revId": "25d29d9e4104e30c38748371255566c3e50043d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc8a57b4_2bdc54ce",
        "filename": "test/639-checker-code-sinking/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 428,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-22T10:06:45Z",
      "side": 0,
      "message": "What if we changed the `doEarlyReturn` to\n\n    private static boolean $noinline$doEarlyReturn() { return false; }\n\n?",
      "parentUuid": "63880c6d_33e1ce6a",
      "range": {
        "startLine": 426,
        "startChar": 0,
        "endLine": 428,
        "endChar": 7
      },
      "revId": "25d29d9e4104e30c38748371255566c3e50043d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bbf8f6a_c349e511",
        "filename": "test/639-checker-code-sinking/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 428,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-22T11:40:21Z",
      "side": 0,
      "message": "If we use a method call, it is a throwing instruction so we keep the `TryBoundary`. However, when doing so we have a throwing instruction so we cannot code sink past it.",
      "parentUuid": "dc8a57b4_2bdc54ce",
      "range": {
        "startLine": 426,
        "startChar": 0,
        "endLine": 428,
        "endChar": 7
      },
      "revId": "25d29d9e4104e30c38748371255566c3e50043d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8ec527c_abda3316",
        "filename": "test/639-checker-code-sinking/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 428,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-22T11:58:51Z",
      "side": 0,
      "message": "Ack.",
      "parentUuid": "3bbf8f6a_c349e511",
      "range": {
        "startLine": 426,
        "startChar": 0,
        "endLine": 428,
        "endChar": 7
      },
      "revId": "25d29d9e4104e30c38748371255566c3e50043d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}