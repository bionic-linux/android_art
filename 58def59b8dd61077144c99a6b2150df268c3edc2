{
  "comments": [
    {
      "key": {
        "uuid": "b50311ec_30537124",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 2
      },
      "lineNbr": 597,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-08-21T12:40:48Z",
      "side": 1,
      "message": "Maybe refactor this part with a method like this:\n\n  static void ReassignInGMaps(MemMap\u0026 memmap1, MemMap\u0026 memmap2) {\n    if (memmap1.IsValid()) {\n      auto memmap1_it \u003d GetGMapsEntry(memmap1);\n      DCHECK(memmap1_it !\u003d gMaps-\u003eend());\n      DCHECK_EQ(memmap1_it-\u003esecond, \u0026memmap1);\n      memmap1_it-\u003esecond \u003d \u0026memmap2;\n    }\n  }\n\n[â€¦]\n\n  ReassignInGMaps(this, other);\n  ReassignInGMaps(other, this);\n\n?",
      "range": {
        "startLine": 586,
        "startChar": 0,
        "endLine": 597,
        "endChar": 5
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c903c1d_bb7892ec",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 2
      },
      "lineNbr": 597,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-21T12:54:14Z",
      "side": 1,
      "message": "I\u0027d rather not. The case where one of the maps is a \"reuse\" map with the same base_begin_ as the other map would be very weird. (I\u0027m not very fond of the gMaps bookkeeping in general and would like to see it removed.)",
      "parentUuid": "b50311ec_30537124",
      "range": {
        "startLine": 586,
        "startChar": 0,
        "endLine": 597,
        "endChar": 5
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8463ee9a_ca8434d5",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2018-08-21T01:08:05Z",
      "side": 1,
      "message": "I prefer using default variables at declaration but up to you.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 73,
        "endChar": 28
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c513b337_d82c36a2",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-08-21T01:18:45Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "8463ee9a_ca8434d5",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 73,
        "endChar": 28
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7954465_6d10ca7f",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-21T12:28:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c513b337_d82c36a2",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 73,
        "endChar": 28
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b35e713_3b53a2e4",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-08-21T01:18:45Z",
      "side": 1,
      "message": "Why do we need this valid/invalid?\n\nstd::optional\u003cMemMap\u003e would do the same thing and it doesn\u0027t have any indirection.",
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "426cf003_10909ef5",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-21T12:28:17Z",
      "side": 1,
      "message": "std::optional\u003c\u003e adds another unnecessary bool and extra verbosity so I\u0027ve got a mild preference for the current approach.\n\nAnd we didn\u0027t upgrade to C++17 yet. I\u0027m surprised that \"#include \u003coptional\u003e\" compiles but using std::optional\u003c\u003e does not.",
      "parentUuid": "0b35e713_3b53a2e4",
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb45e310_24f00e0d",
        "filename": "libdexfile/dex/art_dex_file_loader.cc",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-08-21T12:40:48Z",
      "side": 1,
      "message": "Move the definition of `size` from line 199 above this line and use it here?",
      "range": {
        "startLine": 191,
        "startChar": 6,
        "endLine": 191,
        "endChar": 16
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e39df7b7_d48757cc",
        "filename": "libdexfile/dex/art_dex_file_loader.cc",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-21T12:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb45e310_24f00e0d",
      "range": {
        "startLine": 191,
        "startChar": 6,
        "endLine": 191,
        "endChar": 16
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2bbdb17_c9befc1d",
        "filename": "runtime/gc/accounting/bitmap.h",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-08-21T12:40:48Z",
      "side": 1,
      "message": "Nit: Indentation is off.",
      "range": {
        "startLine": 180,
        "startChar": 2,
        "endLine": 180,
        "endChar": 5
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3fe4022_3c5b9151",
        "filename": "runtime/gc/accounting/bitmap.h",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-21T12:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2bbdb17_c9befc1d",
      "range": {
        "startLine": 180,
        "startChar": 2,
        "endLine": 180,
        "endChar": 5
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f14eab5d_2e55cef5",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 2
      },
      "lineNbr": 811,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-08-21T12:40:48Z",
      "side": 1,
      "message": "Nit: Indentation is off.",
      "range": {
        "startLine": 811,
        "startChar": 30,
        "endLine": 811,
        "endChar": 31
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "477716cc_e51a33d6",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 2
      },
      "lineNbr": 811,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-21T12:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f14eab5d_2e55cef5",
      "range": {
        "startLine": 811,
        "startChar": 30,
        "endLine": 811,
        "endChar": 31
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00534be2_c85bc6af",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 2
      },
      "lineNbr": 353,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-08-21T12:40:48Z",
      "side": 1,
      "message": "Nit: Move argument to its own line.",
      "range": {
        "startLine": 353,
        "startChar": 57,
        "endLine": 353,
        "endChar": 62
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ca776de_64e64156",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 2
      },
      "lineNbr": 353,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-21T12:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00534be2_c85bc6af",
      "range": {
        "startLine": 353,
        "startChar": 57,
        "endLine": 353,
        "endChar": 62
      },
      "revId": "58def59b8dd61077144c99a6b2150df268c3edc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}