{
  "comments": [
    {
      "key": {
        "uuid": "d229854d_cfb1e785",
        "filename": "runtime/art_method.h",
        "patchSetId": 7
      },
      "lineNbr": 261,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-26T15:15:54Z",
      "side": 1,
      "message": "Why do you want toe native bit too? If there\u0027s a specific reason, please add it as a comment.",
      "range": {
        "startLine": 261,
        "startChar": 45,
        "endLine": 261,
        "endChar": 57
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39c60a9e_d6765736",
        "filename": "runtime/art_method.h",
        "patchSetId": 7
      },
      "lineNbr": 261,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-26T18:40:18Z",
      "side": 1,
      "message": "This is for historical reasons, I don\u0027t really care. But this way, we can reuse the bits for flags that do not make sense for native methods. (We could make kAccMiranda|kAccDefaultConflict overlap kAccFastNative|kAccCriticalNative instead of kAccIntrinsicBits.)",
      "parentUuid": "d229854d_cfb1e785",
      "range": {
        "startLine": 261,
        "startChar": 45,
        "endLine": 261,
        "endChar": 57
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f0f388c_defd6ace",
        "filename": "runtime/art_method.h",
        "patchSetId": 7
      },
      "lineNbr": 261,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-26T21:44:26Z",
      "side": 1,
      "message": "That seems preferrable. kAccMiranda and kAccDefaultConflict are closer tied together since they\u0027re \"fake\" access flags set up by the class linker when the vtable/iftable are being built.",
      "parentUuid": "39c60a9e_d6765736",
      "range": {
        "startLine": 261,
        "startChar": 45,
        "endLine": 261,
        "endChar": 57
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed1d3f02_8e2b7abe",
        "filename": "runtime/art_method.h",
        "patchSetId": 7
      },
      "lineNbr": 261,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-27T11:54:45Z",
      "side": 1,
      "message": "It\u0027s not so simple, kAccSkipAccessChecks\u003d\u003dkAccFastNative gets in the way.",
      "parentUuid": "3f0f388c_defd6ace",
      "range": {
        "startLine": 261,
        "startChar": 45,
        "endLine": 261,
        "endChar": 57
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b64463_09804a9e",
        "filename": "runtime/art_method.h",
        "patchSetId": 7
      },
      "lineNbr": 268,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-26T15:15:54Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 268,
        "startChar": 51,
        "endLine": 268,
        "endChar": 61
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89517bbd_b7e602c0",
        "filename": "runtime/dex_file_annotations.cc",
        "patchSetId": 7
      },
      "lineNbr": 1224,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-26T15:15:54Z",
      "side": 1,
      "message": "drop",
      "range": {
        "startLine": 1224,
        "startChar": 61,
        "endLine": 1224,
        "endChar": 63
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91e10807_8a41373d",
        "filename": "runtime/dex_file_annotations.cc",
        "patchSetId": 7
      },
      "lineNbr": 1224,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-26T18:40:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89517bbd_b7e602c0",
      "range": {
        "startLine": 1224,
        "startChar": 61,
        "endLine": 1224,
        "endChar": 63
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab03a9a1_7eba745c",
        "filename": "runtime/dex_file_annotations.cc",
        "patchSetId": 7
      },
      "lineNbr": 1251,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-26T17:07:03Z",
      "side": 1,
      "message": "This is a bit magical to me. How does it ensure that the annotation class that would be resolved is in the bootclasspath?",
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b07d1d3_ad81acf1",
        "filename": "runtime/dex_file_annotations.cc",
        "patchSetId": 7
      },
      "lineNbr": 1251,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-26T18:40:18Z",
      "side": 1,
      "message": "This cannot be compared with class resolution.\n\nIn https://android-review.googlesource.com/423760 we made the decision to only _lookup_ the type in the boot class path. And given that we made sure that the @FastNative/@CriticalNative annotations are always resolved in the boot class path loader in https://android-review.googlesource.com/252426 and https://android-review.googlesource.com/268778 , the strcmp() \u003d\u003d 0 in this CL succeeds iff LookupClass() \u003d\u003d WellKnownClasses::Fast/CriticalNative would succeed before this CL.",
      "parentUuid": "ab03a9a1_7eba745c",
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce5c5f36_f860cf65",
        "filename": "runtime/dex_file_annotations.cc",
        "patchSetId": 7
      },
      "lineNbr": 1251,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-26T21:44:26Z",
      "side": 1,
      "message": "\u003e the strcmp() \u003d\u003d 0 in this CL succeeds iff LookupClass() \u003d\u003d WellKnownClasses::Fast/CriticalNative would succeed before this CL.\n\nI don\u0027t understand why this is true?",
      "parentUuid": "1b07d1d3_ad81acf1",
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83449ff2_c3800a93",
        "filename": "runtime/dex_file_annotations.cc",
        "patchSetId": 7
      },
      "lineNbr": 1251,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-27T11:54:45Z",
      "side": 1,
      "message": "Maybe it will be easier to understand after I have separated this out to its own CL: https://android-review.googlesource.com/522216 .\n\nOr maybe I should have done it in smaller steps? Such as first changing the \"Lookup(descriptor)\u003d\u003dWellKnownClasses::FastNative\" into \"WellKnownClasses::FastNative-\u003eDescriptorEquals(descriptor)\"?",
      "parentUuid": "ce5c5f36_f860cf65",
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a7be7d_c10c6134",
        "filename": "runtime/dex_file_annotations.cc",
        "patchSetId": 7
      },
      "lineNbr": 1251,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-01T14:49:35Z",
      "side": 1,
      "message": "Thanks for splitting it up, it\u0027s more clear now.",
      "parentUuid": "83449ff2_c3800a93",
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbc43167_da8a08ce",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-10-26T15:15:54Z",
      "side": 1,
      "message": "Curious what made your realize it would be good to have a \ncheck? Is it just by reading the code?",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 76
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e758a4d6_552f9b4a",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-26T18:40:18Z",
      "side": 1,
      "message": "Reading the code and realizing that we have a missing an optimization opportunity here. We\u0027re penalizing non-synchronized @FastNative because of synchronized @FastNative (is that even used?).",
      "parentUuid": "dbc43167_da8a08ce",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 76
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e88a400_9fb6e21f",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-10-26T21:44:26Z",
      "side": 1,
      "message": "That seems unlikely. non-synchronized fast jni goes to JniMethodFastStart.\n\nDid you mean to say \"we\u0027re penalizing non-synchronized regular JNI because of synchronized @FastNative\" ?",
      "parentUuid": "e758a4d6_552f9b4a",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 76
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "173b350d_841dc6cd",
        "filename": "runtime/entrypoints/quick/quick_jni_entrypoints.cc",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-10-27T11:54:45Z",
      "side": 1,
      "message": "Right, that\u0027s what I meant when I wrote the code.",
      "parentUuid": "4e88a400_9fb6e21f",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 76
      },
      "revId": "4e4e0aaa5a9543c866f9a2df3db63ce4ecf43501",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}