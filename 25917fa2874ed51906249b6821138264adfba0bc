{
  "comments": [
    {
      "key": {
        "uuid": "d3e2706d_c30afc7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-06-17T15:13:56Z",
      "side": 1,
      "message": "I\u0027m trying to understand the implications of this. Does it mean that libdexfile_support, libdexfile_external and all its dependencies are compiled for the host (read x86) arch and end up somewhere in /system/lib? And that is besides the ordinary libs in /system/apex/com.android.art/lib?\n\nIf so, there could be a potential for ODR violations between the two sets of libs?",
      "range": {
        "startLine": 7,
        "startChar": 24,
        "endLine": 7,
        "endChar": 51
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e8affea_5c749262",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2020-06-17T16:20:43Z",
      "side": 1,
      "message": "No. \"native_bridge_supported: true\" allows soong to build library for guest architecture (arm usually), not for native architecture (x86).\n\nNative x86 libraries are untouched in that scenario.\n\nThis is done that way because out of hundreds of libraries and programs compiled natively only a handful need native_bridge version (mostly public ones exposed in NDK).\n\nRenderScript needs about 40 different libraies from 20 different projects, though.",
      "parentUuid": "d3e2706d_c30afc7a",
      "range": {
        "startLine": 7,
        "startChar": 24,
        "endLine": 7,
        "endChar": 51
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbcdaf05_feb3659e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-06-17T19:16:52Z",
      "side": 1,
      "message": "Thanks for the clarifications. It still means that all these libraries end up in /system/lib, in addition to their normal instances in /apex/com.android.art?\n\nI assume APEX updatability still isn\u0027t a factor for native_bridge use cases. Even so, if the above is correct then it\u0027s a setup I doubt we\u0027d be able to support. One reason is the different linker namespace configuration, another is the risk of ODR issues.\n\nWould it be possible to bridge the native ABI from libdexfile_external.so to the guest and use native_bridge_supported on libdexfile_support only? It\u0027s a C interface that is fairly small: https://cs.android.com/android/platform/superproject/+/master:art/libdexfile/external/include/art_api/dex_file_external.h\n\nI might also mention that it\u0027s easy to create a dummy libdexfile_support that does nothing and depends on nothing (-DNO_DEXFILE_SUPPORT), as a stop-gap fix to decouple this from the rest.",
      "parentUuid": "9e8affea_5c749262",
      "range": {
        "startLine": 7,
        "startChar": 24,
        "endLine": 7,
        "endChar": 51
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5f00457_f1e4b4d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2020-06-17T19:42:33Z",
      "side": 1,
      "message": "They end up in the /system/lib/arm and /system/lib/arm64 (like all native_bridge libraries), never in /system/lib\n\nAPEX is not a problem because currently all devices where native_bridge is used are updated regularly (actually none of them are bare-metal devices).\n\nThere are no risk of ODR vilation not just because they go into a different directory, but mainly because they are for a different CPU arch: arm vs x86.\n\nBionic linker would never accept library of wrong arch, it would continue to look for a different one of suitable arch.\n\nAs for bridging native library to guest - yes, this is possible and we are doing that with many libraries (like libEGL), but currently this involves building two libraries: both original one (for arm architecture) and so-called \"stub\" library used to cross the bridge.\n\nIt\u0027s because of http://b/145028007 - we are working on it... but it takes longer than we hoped.\n\nI think dummy library would work just fine for our use-case, too: we only need libdexfile_support because libbacktrace depends on it - and I\u0027m pretty sure it\u0027s not actually used when everything works correctly.",
      "parentUuid": "fbcdaf05_feb3659e",
      "range": {
        "startLine": 7,
        "startChar": 24,
        "endLine": 7,
        "endChar": 51
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d9203e6_756cb587",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-06-18T14:21:46Z",
      "side": 1,
      "message": "\u003e They end up in the /system/lib/arm and /system/lib/arm64 (like all native_bridge libraries), never in /system/lib\n\nSure, I meant generally somewhere in /system, or really anywhere that\u0027s not in /apex/com.android.art where we have the expected linker namespace setup.\n\nRegarding ODR\u0027s, the assumption that there\u0027s a single instance of an object in the process breaks, even though the objects are in different architectures and in many ways \"invisible\" to each other. Whether this matters or not depends on how the assumption is used, but it might matter.\n\n\u003e I think dummy library would work just fine for our use-case, too /.../\n\nGood, can we pursue that for now then? If you\u0027re only coming from libbacktrace then I think the best way is to just add a native_bridge target clause there with -DNO_LIBDEXFILE_SUPPORT in it - there are a few already: https://cs.android.com/android/platform/superproject/+/master:system/core/libbacktrace/Android.bp;l\u003d117-122;drc\u003ded96fe1d305d7842e21dc8dc9255bcf7e3139e7d That way I think this CL can be dropped altogether.\n\nOtherwise basically the same approach on libdexfile_support should do the trick.\n\nThe effect of this is of course that stack unwinding wouldn\u0027t provide function and offset for dex stack frames, but it wouldn\u0027t error out either.",
      "parentUuid": "b5f00457_f1e4b4d7",
      "range": {
        "startLine": 7,
        "startChar": 24,
        "endLine": 7,
        "endChar": 51
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bfcec1c_177fc488",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2020-06-18T23:37:03Z",
      "side": 1,
      "message": "That\u0027s true that having two libraries is awkward - that\u0027s why we decide on case-bu-case basis if we would like to have two libraries it one.\n\nIn that case I think having NO_LIBDEXFILE_SUPPORT is fine: since we have arm library here and x86 art I\u0027m not sure dex stack frames could even be observed!\n\nI think we may try to support them at some point but definitely now now.",
      "parentUuid": "0d9203e6_756cb587",
      "range": {
        "startLine": 7,
        "startChar": 24,
        "endLine": 7,
        "endChar": 51
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e16f644d_362cbe60",
        "filename": "libartbase/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-06-17T15:13:56Z",
      "side": 1,
      "message": "This happens when renderscript is retired, or some other condition?",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 55
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c53cc36b_6ee743c0",
        "filename": "libartbase/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2020-06-17T16:20:43Z",
      "side": 1,
      "message": "Yes, this could be removed when renderscript is removed.\n\nIn theory we may try to introduce \"proxy\" library which would redirect work from arm library to x86 library.\n\nWe try to avoid that if possible, though: marshalling function calls between two architectures is not easy.",
      "parentUuid": "e16f644d_362cbe60",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 55
      },
      "revId": "25917fa2874ed51906249b6821138264adfba0bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}