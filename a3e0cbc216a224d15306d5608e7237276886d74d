{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4a3f6d40_f59d8aee",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-03-31T00:54:15Z",
      "side": 1,
      "message": "go/android-ndk-api-guidelines#opaque-structs\n\nI think the fact that you have now needed to modify this is a good argument against this being a candidate for non-opaque.",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fec5098_cc4450b9",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-31T18:41:27Z",
      "side": 1,
      "message": "As it is returned by pointer (rather then by value) means we can freely extend the struct.\n\nNote that adding fields at the end is backwards compatible.\n\nI am reluctant to add explicit accessors per field.  But due to complexity and a lot of extra code on hot-path for the consumers.\n\nWe follow the opaque rule for ExtDexFile as it makes sense there.",
      "parentUuid": "4a3f6d40_f59d8aee",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb432054_405a6699",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-03-31T22:26:51Z",
      "side": 1,
      "message": "You\u0027re still sensitive to alignment and padding changes, and callers can mistakenly use this struct in an array which will be broken. For APIs that are immortal the stability of those APIs across releases is extremely important.\n\nIs accessing any of this really a hot path? I have no context for how this API is used; all I have is what\u0027s in the review.\n\nThis does not fit the exception that\u0027s allowed by the API guidelines. If other classes of exceptions need to be added then we\u0027ll need to start that discussion with the rest of the API council.\n\nOr maybe you don\u0027t even want a system API here? Couldn\u0027t this just be a library separate from the OS? If you do that you don\u0027t even have to care about C or any other type of compatibility beyond what you *choose* to guarantee to your users.",
      "parentUuid": "3fec5098_cc4450b9",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dcb8e29_f75a2ac9",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-31T23:23:50Z",
      "side": 1,
      "message": "I suppose caller could make copy to an array, which would be valid to an extend (if they also deep copy strings).\n\nIt is hot enough for us to have passionate debates about single string alloc cost.\n\nRight, one thing that you should know is that this is internal API from libunwindstack/simpleperf to ART.  That is it.  It is not intended to be used by applications, other NDK code, etc...  \n\nIt just that libunwindstack wants to read dex files and ART already has the code (and the module will be up to date if we ever release new dex file version, or ART tweaks it internally).  We want to make the boundary between those two \"proper\", but it is not really for other people to use.",
      "parentUuid": "fb432054_405a6699",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cf303b6_15eea235",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-31T23:37:18Z",
      "side": 1,
      "message": "PS: I can make the \u0027addr\u0027 and \u0027size\u0027 into \u0027size_t\u0027, which makes the struct into trivial set of pointer-sized fields, which would be pretty hard for any compiler to accidentally mess up.",
      "parentUuid": "4dcb8e29_f75a2ac9",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96a66c31_7e455498",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-04-01T00:29:47Z",
      "side": 1,
      "message": "\u003e It is not intended to be used by applications, other NDK code, etc...\n\nThis always comes up but the reason these go through NDK API review is because they all can potentially become NDK APIs. This case in particular seems like it *should* be an NDK API. People use libunwindstack in their apps for crash handling. They need to build libunwindstack against the NDK to do that.\n\nI\u0027ll ask for a second opinion but this does not conform to the API rules.",
      "parentUuid": "1cf303b6_15eea235",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8531259_c54bef04",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-04-01T00:59:38Z",
      "side": 1,
      "message": "I think we are reading the guideline ambiguously again :-)  My reading is \"don\u0027t expose unnecessary implementation details which might change\" - the C version of encapsulation.  The guideline does explicitly allow structs as naive POD types, and I use it as such.  My reading is that I should use opaque for ADexFile, which is non-trivial, and I agree opaque is appropriate there.  \n\nSpecifically, can you think of compatibility issue with POD type (of pointer-sized fields only)?\n\nI am not sure how to grep for NDK API, but when I look for files with __BEGIN_DECLS, I see that structs are in fairly wide spread use.\n\nAlso, as I get the impression you thought the callback was unnecessarily complaicted before, would the idea here be C-method calling implementation calling callback which in turn would be calling several accessors on the opaque object provided in the callback?\n\nEither way, I suppose this is a debate for different CL, as such change would be pretty big, and require changes to libunwind and simpleperf, and performance testing.",
      "parentUuid": "96a66c31_7e455498",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89a0a583_512904a8",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-04-02T19:25:55Z",
      "side": 1,
      "message": "\u003e The guideline does explicitly allow structs as naive POD types, and I use it as such.\n\nThe guideline is also explicit it\u0027s only allowed for POD types that are inherently fixed in nature, which this definitely isn\u0027t.\n\nIf this must be an non-opaque struct for performance reasons, then this needs to be explicitly versioned such as:\n\nstruct ADexFile_MethodInfoV1 {\n   // the V1 fields\n   uint32_t offset;\n   uint32_t size;\n   [...]\n}\n\nthen with the main struct being:\n\nstruct ADexFile_MethodInfo {\n   uint32_t version;\n   ADexFile_MethodInfoV1 v1;\n   // future versions added in order\n}\n\nsizeof()-based version isn\u0027t allowed, it\u0027s too fragile (eg, it doesn\u0027t work if the app is passing data to the platform), and it doesn\u0027t play well with documentation. As in, you can\u0027t say \"this field is available on sizeof() \u003d\u003d 12\" or whatever, especially since sizeof() isn\u0027t inherently stable across 32-bit \u0026 64-bit (or across different architectures, even). And the fields need to be divided up to make it cleaner \u0026 easier to reason about in future versions. Otherwise it\u0027s hard to spot an accidental field read of a field that doesn\u0027t exist on that particular version.",
      "parentUuid": "b8531259_c54bef04",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16edd1bd_76598026",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-04-08T18:59:27Z",
      "side": 1,
      "message": "I have not such versioning before (v1 v2 sub-structs), but that sounds fairly reasonable...\n\nAlthough it still requires adjusting clients.\n\nI would like to punt that work to followup CLs.",
      "parentUuid": "89a0a583_512904a8",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e333fda_03fefedf",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-04-12T20:11:55Z",
      "side": 1,
      "message": "Same reasoning as for tests. Can\u0027t wait for a follow up.",
      "parentUuid": "16edd1bd_76598026",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6435394c_2dc85fb5",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-04-12T20:15:28Z",
      "side": 1,
      "message": "Sure, but I worry that this \"simple method rename\" CL will keep snowballing forever until it is too late and we are stuck with what we have now...",
      "parentUuid": "5e333fda_03fefedf",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3884671d_4e7245c2",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-04-12T20:26:50Z",
      "side": 1,
      "message": "I don\u0027t think you need to worry about snowballing. No new requests are happening here, just the ones that have been open since my initial round of review.\n\nIf you don\u0027t have time to fix it now you don\u0027t have time for follow ups either. If you\u0027re worried about the API being finished in time for S, worth considering moving it to T?",
      "parentUuid": "6435394c_2dc85fb5",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72fe2e38_751c092e",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-04-12T20:34:02Z",
      "side": 1,
      "message": "I thought that whatever we ship in S, we need to keep supporting...\nIf we can keep changing the API past S, I am happy to postpone it.",
      "parentUuid": "3884671d_4e7245c2",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7633c93c_92f6cc29",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-04-12T21:00:59Z",
      "side": 1,
      "message": "No, I mean the whole API.",
      "parentUuid": "72fe2e38_751c092e",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49783c2c_944b97bf",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-04-12T21:08:08Z",
      "side": 1,
      "message": "I don\u0027t follow, the API is over a year old, it is being actively used.\nIt is just that before we ship ART as module, we can still change it.",
      "parentUuid": "7633c93c_92f6cc29",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b55ef674_67bec3d3",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-04-12T21:47:18Z",
      "side": 1,
      "message": "\"Revert making this API a part of the ART module\" then? I\u0027m not familiar with the mainline terminology so maybe that\u0027s not right either. Whatever deadline is freezing this API. If that can\u0027t be met it shouldn\u0027t be shipped in that release.\n\nMaybe I\u0027m missing some context here. *Something* is changing that is going to freeze this API. It needs to conform to the API requirements before that deadline. If that deadline can\u0027t be met then it can\u0027t be included in the API surface that is freezing the API for this release.",
      "parentUuid": "49783c2c_944b97bf",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f451a70_b997265e",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-04-12T21:52:43Z",
      "side": 1,
      "message": "I mean, technically we are fine.  The API is needed, but it has been part of the ART module since R, so keeping it as-is if fine functionality wise.\n\nI was just trying to eagerly proactive and try to clean it up, as this is the last change we get without worrying about backwards compatibility. (because ART will be updatable since S)",
      "parentUuid": "b55ef674_67bec3d3",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23f86c37_05b2f51b",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-03-31T00:54:15Z",
      "side": 1,
      "message": "WithMethodAtOffset? The \"Get\" naming is odd since it\u0027s not actually returning a ExtDexFileMethodInfo",
      "range": {
        "startLine": 73,
        "startChar": 9,
        "endLine": 73,
        "endChar": 42
      },
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3666bdf0_5fec51a1",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-31T18:41:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23f86c37_05b2f51b",
      "range": {
        "startLine": 73,
        "startChar": 9,
        "endLine": 73,
        "endChar": 42
      },
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a4badcc_36364594",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-03-31T00:54:15Z",
      "side": 1,
      "message": "Similarly, ForEachMethod?",
      "range": {
        "startLine": 81,
        "startChar": 9,
        "endLine": 81,
        "endChar": 37
      },
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28c31ab0_95d71d72",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-31T18:41:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a4badcc_36364594",
      "range": {
        "startLine": 81,
        "startChar": 9,
        "endLine": 81,
        "endChar": 37
      },
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c907f97_9c3ac144",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-03-31T00:54:15Z",
      "side": 1,
      "message": "Needs *some* documentation. In this case not much to say other than \"returns nullptr for unrecognized errors\", but say that.",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9867f1e_6f6788db",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-31T19:52:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c907f97_9c3ac144",
      "revId": "a3e0cbc216a224d15306d5608e7237276886d74d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}