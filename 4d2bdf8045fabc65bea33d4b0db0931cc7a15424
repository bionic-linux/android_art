{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9aa2e607_2701352f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-09T19:41:35Z",
      "side": 1,
      "message": "Please test with `atest -a` on a multilib target.",
      "range": {
        "startLine": 14,
        "startChar": 6,
        "endLine": 14,
        "endChar": 11
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "796bf10c_3325be25",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-12T13:05:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9aa2e607_2701352f",
      "range": {
        "startLine": 14,
        "startChar": 6,
        "endLine": 14,
        "endChar": 11
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2440bcd3_bb5a440f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-09T19:41:35Z",
      "side": 1,
      "message": "There\u0027s a lot of duplication here. I have a few initial questions before reviewing all the files.",
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ade67694_48f5997e",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-09T19:41:35Z",
      "side": 1,
      "message": "Is this generalization in these commands useful? Sure, you don\u0027t hardcode the subdir in the test directory that\u0027s no longer mentioned explicitly above. But if another directory was to be added, why would we assume that this is the right treatment for it too?",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 76
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33839dd5_75d93eac",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-12T13:05:19Z",
      "side": 1,
      "message": "The directories here are related to the build arch.\nE.g., the directory which get pushed:\n`out/target/product/vsoc_x86_64/testcases/art_standalone_runtime_tests`\nTest dir contents:\n`art_standalone_runtime_tests.config  x86  x86_64`\n\nGiven that this .xml config has to work with x86/arm 32/64 bitness (at least), the generalization here seems unavoidable.",
      "parentUuid": "ade67694_48f5997e",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 76
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9d6a44c_816137e3",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-14T21:30:36Z",
      "side": 1,
      "message": "Aha, so there\u0027s a new arch dir level here compared to the old approach. I see. Thanks for clarifying with \"ARCH_DIR\" in the commands.\n\nHowever, judging from the old code these pushers and preparers are run for each arch. So with the new code doesn\u0027t that mean we\u0027re running `generate-boot-image??` for both arches in both preparers? Iow, it gets run twice for each arch.\n\nIf so, that doesn\u0027t seem ideal. Is it possible to use some kind of expansion or environment variable to find out which arch is actually getting tested?",
      "parentUuid": "33839dd5_75d93eac",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 76
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cf5b455_72081bf6",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-15T14:50:21Z",
      "side": 1,
      "message": "I\u0027ve checked, the preparer is indeed called twice if I run atest with `-a`.\nUnfortunately, there is no identifying information in `env` on target device during the test run.\nAlso, tradefed classes don\u0027t provide info about arch in preparers. The closest I found is in RunHostCommand preparer: https://cs.android.com/android/platform/superproject/+/master:tools/tradefederation/core/test_framework/com/android/tradefed/targetprep/RunHostCommandTargetPreparer.java;l\u003d319\nBut it only expands paths to host/target test dirs.\n\nFor now I don\u0027t have any better ideas than just to check if boot-image dir exists. This way the second preparer run will just skip generating boot-images",
      "parentUuid": "f9d6a44c_816137e3",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 76
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27d257a9_f221b91f",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-15T21:28:18Z",
      "side": 1,
      "message": "\u003e I\u0027ve checked, the preparer is indeed called twice if I run atest with -a.\n\nI think it may be called twice also when you don\u0027t, if the install tree in out/target/product has an earlier build of the test for the other arch. It\u0027s hardly ever cleaned up unless done explicitly with `m installclean` - normally things are only overwritten.\n\nWhat happens if a user has some old 32 bit build of the test in their install directory, and then tries to build and test only the 64 bit variant? It\u0027d still push and run the old `generate-boot-image32`, won\u0027t it? If there\u0027s some problem there the test may mysteriously fail and the user will probably start looking for problems in the fresh 64 bit build.\n\nIncremental building is used heavily in CI too, and then you never know what kind of build already is present. Some build do `m installclean` first, but I\u0027m not sure all do.\n\nIf this can happen it could be confusing and waste time chasing false leads, so then I think we need to think of another way, unfortunately. Maybe reach out to TradeFed team and see if we can send a CL to implement what we need. But first please check if the case I describe above actually can occur.",
      "parentUuid": "4cf5b455_72081bf6",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 76
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17571d08_e8ab8193",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-16T15:59:27Z",
      "side": 1,
      "message": "The case of one arch seems to work fine because of the way `FilePusher` handles directories: https://cs.android.com/android/platform/superproject/+/master:tools/tradefederation/core/test_framework/com/android/tradefed/targetprep/PushFilePreparer.java;l\u003d443;drc\u003d5a4c83d3adbdb8a72a146737fc84965fac26d185\nNote the `filter` argument. In my test it only copied relevant arch dir.",
      "parentUuid": "27d257a9_f221b91f",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 76
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "131ef58f_b733569a",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-16T18:21:39Z",
      "side": 1,
      "message": "Good, thanks for checking.",
      "parentUuid": "17571d08_e8ab8193",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 76
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e9a71b3_2a0f4805",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-09T19:41:35Z",
      "side": 1,
      "message": "I gather this is the bitness. It\u0027s worth a comment.\n\nAlso, are we guaranteed that both 32 and 64 bit binaries cannot be present at the same time?",
      "range": {
        "startLine": 30,
        "startChar": 106,
        "endLine": 30,
        "endChar": 108
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8fb7c3_14670b09",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-12T13:05:19Z",
      "side": 1,
      "message": "\u003eIt\u0027s worth a comment.\n\nDone\n\n\u003eAlso, are we guaranteed that both 32 and 64 bit binaries cannot be present at the same time?\n\nIt relies on the buildsystem populating `testcases` dirs correctly. Do you think it\u0027s worth double checking here?",
      "parentUuid": "8e9a71b3_2a0f4805",
      "range": {
        "startLine": 30,
        "startChar": 106,
        "endLine": 30,
        "endChar": 108
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "902b7ec7_f8303935",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-14T21:30:36Z",
      "side": 1,
      "message": "No, if it doesn\u0027t conflict when you use `atest -a` I think it should be fine.",
      "parentUuid": "4d8fb7c3_14670b09",
      "range": {
        "startLine": 30,
        "startChar": 106,
        "endLine": 30,
        "endChar": 108
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a56e07dd_e6b84e2c",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-09T19:41:35Z",
      "side": 1,
      "message": "I\u0027m confused on how the bitness suffixes work now: With the added `??` above I take it `append-bitness` only added the bitness to the source and not the target. So changing to pushing the whole test directory means other files as well keep their bitness suffixes, like the test binary itself. But then how is it picked up here?",
      "range": {
        "startLine": 37,
        "startChar": 42,
        "endLine": 37,
        "endChar": 71
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbe65fb2_ca18988f",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-12T13:05:19Z",
      "side": 1,
      "message": "Yes, all files keep their bitness, including test binary.\nTradefed GTest class handles the bitness logic:\nhttps://cs.android.com/android/platform/superproject/+/master:tools/tradefederation/core/test_framework/com/android/tradefed/testtype/GTest.java;l\u003d177\nIt recursively checks each file with `shouldRunFile`, which ignores suffix:\nhttps://cs.android.com/android/platform/superproject/+/master:tools/tradefederation/core/test_framework/com/android/tradefed/testtype/GTest.java;l\u003d238",
      "parentUuid": "a56e07dd_e6b84e2c",
      "range": {
        "startLine": 37,
        "startChar": 42,
        "endLine": 37,
        "endChar": 71
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8307b89d_11334739",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-15T21:28:18Z",
      "side": 1,
      "message": "Ok, thanks.",
      "parentUuid": "fbe65fb2_ca18988f",
      "range": {
        "startLine": 37,
        "startChar": 42,
        "endLine": 37,
        "endChar": 71
      },
      "revId": "4d2bdf8045fabc65bea33d4b0db0931cc7a15424",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}