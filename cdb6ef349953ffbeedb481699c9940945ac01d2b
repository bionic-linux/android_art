{
  "comments": [
    {
      "key": {
        "uuid": "9f448158_6f47d17e",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2135,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-21T09:12:49Z",
      "side": 1,
      "message": "Explain the magic constant and put it in a kFoobar variable.",
      "range": {
        "startLine": 2135,
        "startChar": 55,
        "endLine": 2135,
        "endChar": 59
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3a79c4_b1e9a017",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 2179,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-21T09:12:49Z",
      "side": 1,
      "message": "indentation is off.",
      "range": {
        "startLine": 2179,
        "startChar": 10,
        "endLine": 2179,
        "endChar": 12
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_c678e2b2",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2092,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-21T09:12:49Z",
      "side": 1,
      "message": "Can this really happen? Don\u0027t the instructions and inputs have the same type?",
      "range": {
        "startLine": 2092,
        "startChar": 24,
        "endLine": 2092,
        "endChar": 37
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ff64148_8547867d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-11-20T19:04:34Z",
      "side": 1,
      "message": "Isn\u0027t converting to uint32_t, doing the shift, and converting back, easier and more readable?",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe73d92_4883d3e7",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-11-20T19:08:50Z",
      "side": 1,
      "message": "I\u0027m not deep enough in the code. But does this take Java semantics (preserved by dex) into account, i.e., is y in the right range when this is called? y is implicitly masked by 0x1f...\n\nThis has an impact here as you are not ensuring that y is non-negative, which is required in C/C++.",
      "parentUuid": "9ff64148_8547867d",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa32ebd1_0d9f55f0",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-11-21T00:22:23Z",
      "side": 1,
      "message": "Maybe. I don\u0027t have a strong preference. I tried to match the Java spec here.",
      "parentUuid": "9ff64148_8547867d",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa32ebd1_edb92171",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-11-21T00:22:23Z",
      "side": 1,
      "message": "It doesn\u0027t. C++ has undefined behaviour when the shift count is out of range. I figured it after uploading but didn\u0027t have time to fix it:)",
      "parentUuid": "ffe73d92_4883d3e7",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ff84938_71a56097",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-11-21T00:26:49Z",
      "side": 1,
      "message": "I wonder whether we should follow Java or Dex spec. Dex actually defines what ushr-int is equivalent to... :-)\n\nhttps://source.android.com/devices/tech/dalvik/dalvik-bytecode.html, section \"Mathematical operation details\"",
      "parentUuid": "fa32ebd1_0d9f55f0",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5313fc_b344e2e7",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-11-21T00:29:56Z",
      "side": 1,
      "message": "I wasn\u0027t aware of that. Thanks! :) I think it\u0027s better to match the dex one then. They should be equivalent anyway.",
      "parentUuid": "5ff84938_71a56097",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df151930_59a84396",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-11-21T02:15:10Z",
      "side": 1,
      "message": "Agreed. You could also use interpreter as reference as well since it has to adhere to the spec.",
      "parentUuid": "ba5313fc_b344e2e7",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_a685e630",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1871,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-21T09:12:49Z",
      "side": 1,
      "message": "Yes, please follow Dex spec.",
      "parentUuid": "df151930_59a84396",
      "range": {
        "startLine": 1871,
        "startChar": 4,
        "endLine": 1871,
        "endChar": 49
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_ef3aa1e9",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 1874,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-21T09:12:49Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1874,
        "startChar": 10,
        "endLine": 1874,
        "endChar": 18
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_cf37dd01",
        "filename": "test/429-optimizing-arith-shifts/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-21T09:12:49Z",
      "side": 1,
      "message": "indentation is off.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 99,
        "endChar": 7
      },
      "revId": "cdb6ef349953ffbeedb481699c9940945ac01d2b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}