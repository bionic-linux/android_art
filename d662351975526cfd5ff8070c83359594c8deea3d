{
  "comments": [
    {
      "key": {
        "uuid": "fc14e289_4c71da1b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-03-22T13:51:15Z",
      "side": 1,
      "message": "x86/x86_64",
      "range": {
        "startLine": 7,
        "startChar": 52,
        "endLine": 7,
        "endChar": 58
      },
      "revId": "d662351975526cfd5ff8070c83359594c8deea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c5f5acd_46d1f219",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-03-24T09:24:28Z",
      "side": 1,
      "message": "Is that described anywhere?",
      "range": {
        "startLine": 50,
        "startChar": 22,
        "endLine": 50,
        "endChar": 47
      },
      "revId": "d662351975526cfd5ff8070c83359594c8deea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc14e289_ac820e28",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5358,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-03-22T13:50:34Z",
      "side": 1,
      "message": "Combine into one else if???",
      "range": {
        "startLine": 5357,
        "startChar": 8,
        "endLine": 5358,
        "endChar": 41
      },
      "revId": "d662351975526cfd5ff8070c83359594c8deea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "766bcf9b_877de4bc",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5358,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-09-09T15:26:55Z",
      "side": 1,
      "message": "an elseif is not possible, due to following code.\nbut I agree this reads very misleading and can be made more clear if you put a clarifying comment in a new line after the else, but before the if",
      "parentUuid": "fc14e289_ac820e28",
      "range": {
        "startLine": 5357,
        "startChar": 8,
        "endLine": 5358,
        "endChar": 41
      },
      "revId": "d662351975526cfd5ff8070c83359594c8deea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c5f5acd_06fd3a7f",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5360,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-03-24T10:03:20Z",
      "side": 1,
      "message": "How can you guarantee that?",
      "range": {
        "startLine": 5360,
        "startChar": 25,
        "endLine": 5360,
        "endChar": 74
      },
      "revId": "d662351975526cfd5ff8070c83359594c8deea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc14e289_430fd281",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5360,
      "author": {
        "id": 1061369
      },
      "writtenOn": "2016-03-24T11:03:15Z",
      "side": 1,
      "message": "is_gc_marking is set and reset only at safepoint. If there is no safepoint between the two heap references (immediately after is_gc_marking test), we can say the two references are up to date (marked) with guard of !is_gc_marking.\n\nActually there is only one potential risk among code sequence: !is_gc_marking, load, load, cmpl. It\u0027s null check. If null check does not pass, the whole code sequence will canceled together, and the two heap references load are discarded together. We still can say the two load without read barrier are safe. right ?\n\nThe inexact !is_gc_marking guard has potential performance risk, because this guard is coarse grain, and always take slow path when concurrent marking.\n\nIf the exact baker\u0027s read barrier has been implemented, this patch should be abandoned.",
      "parentUuid": "3c5f5acd_06fd3a7f",
      "range": {
        "startLine": 5360,
        "startChar": 25,
        "endLine": 5360,
        "endChar": 74
      },
      "revId": "d662351975526cfd5ff8070c83359594c8deea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "766bcf9b_a78ae8c2",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 4858,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-09-09T15:26:55Z",
      "side": 1,
      "message": "same suggestion here, but an else comment before the if, so that the flow is easier to read",
      "revId": "d662351975526cfd5ff8070c83359594c8deea3d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}