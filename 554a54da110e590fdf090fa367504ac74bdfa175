{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c061cdc0_4ecf2ad8",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 15
      },
      "lineNbr": 2700,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "Can we move this to the JIT part of `HSharpening::ProcessLoadMethodType()`?",
      "range": {
        "startLine": 2700,
        "startChar": 2,
        "endLine": 2700,
        "endChar": 44
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a3a3a4b_1b9e1bfa",
        "filename": "compiler/optimizing/sharpening.cc",
        "patchSetId": 15
      },
      "lineNbr": 491,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "Either explicitly set the kind to `kRuntimeCall`, or `DCHECK()` that it is already set. Keep in sync with the \"test configuration\" code below.",
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a67ef45_9a9e8b80",
        "filename": "runtime/jit/jit_code_cache-inl.h",
        "patchSetId": 15
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "One check per line.",
      "range": {
        "startLine": 54,
        "startChar": 12,
        "endLine": 55,
        "endChar": 94
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "602cd9f7_f2a23050",
        "filename": "runtime/jit/jit_code_cache-inl.h",
        "patchSetId": 15
      },
      "lineNbr": 56,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "Add \"to\".",
      "range": {
        "startLine": 56,
        "startChar": 24,
        "endLine": 56,
        "endChar": 25
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f665171_a273d8d3",
        "filename": "runtime/jit/jit_code_cache-inl.h",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "`MethodType` is final, so check for reference equality. However, one of these can be a from-space reference while the other is a to-space reference, so the check needs to be a bit more robust. Something like\n\n    if (kIsDebugBuild) {\n      ObjPtr\u003cmirror::Class\u003e klass \u003d object-\u003eGetClass\u003ckDefaultVerifyFlags, kWithoutReadBarrier\u003e();\n      CHECK(klass \u003d\u003d method_type_class ||\n            klass \u003d\u003d IsMarked(method_type_class) ||\n            IsMaked(klass) \u003d\u003d method_type_class);\n    }",
      "range": {
        "startLine": 60,
        "startChar": 15,
        "endLine": 60,
        "endChar": 88
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcf3ddb1_84ea4c59",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 15
      },
      "lineNbr": 439,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "Check for reference equality, the `MethodType` is `final`.\n\nI think this check should be OK because by the time we\u0027re sweeping weak references the declaring class reference in `*WellKnownClasses::java_lang_invoke_MethodType_makeImpl` (and any other live method) should be updated to the to-space reference by the CC GC.",
      "range": {
        "startLine": 439,
        "startChar": 14,
        "endLine": 439,
        "endChar": 96
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f22fe456_7b14d4ba",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 15
      },
      "lineNbr": 558,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "The `erase()` must not be in a `DCHECK()` as it would not be present in a release build. Store the result in a local variable and do the `DCHECK()` on a separate line. (Or `DCHECK()` the `count()` before erasing as in `RemoveUnmarkedCode()`.)",
      "range": {
        "startLine": 558,
        "startChar": 10,
        "endLine": 558,
        "endChar": 58
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69dda9ce_36606805",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 15
      },
      "lineNbr": 934,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "We could use `extract()`, then modify and reinsert the node.",
      "range": {
        "startLine": 933,
        "startChar": 4,
        "endLine": 934,
        "endChar": 60
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5085c457_2f019f82",
        "filename": "runtime/mirror/object.h",
        "patchSetId": 15
      },
      "lineNbr": 133,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-04-10T10:35:25Z",
      "side": 1,
      "message": "This can be reverted if we do class reference comparisons for `MethodType`.",
      "range": {
        "startLine": 133,
        "startChar": 11,
        "endLine": 133,
        "endChar": 66
      },
      "revId": "554a54da110e590fdf090fa367504ac74bdfa175",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}