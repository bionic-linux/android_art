{
  "comments": [
    {
      "key": {
        "uuid": "46071a71_cd0afc01",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-05-14T16:31:58Z",
      "side": 1,
      "message": "Same note about null pointer dereference.",
      "range": {
        "startLine": 98,
        "startChar": 10,
        "endLine": 98,
        "endChar": 46
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "532b870d_c112b693",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-05-15T09:38:39Z",
      "side": 1,
      "message": "Can we attach this method to a place that will avoid the duplication with the other codegens?",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6a699e3_c2b12bdb",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-15T10:18:25Z",
      "side": 1,
      "message": "I don\u0027t like the idea of adding `#include \"runtime.h\"` to another header file. It brings in way too much.",
      "parentUuid": "532b870d_c112b693",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3869ec5_499ef313",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-05-15T12:40:45Z",
      "side": 1,
      "message": "Sure, but you could have something like HGraph::UseJitCompilation, or CodeGenerator::UseJitCompilation.\n\n(thinking about it, it could make sense to have a jit flag in HGraph).",
      "parentUuid": "d6a699e3_c2b12bdb",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b92fb74f_2e43767c",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-15T12:56:49Z",
      "side": 1,
      "message": "Or maybe in CompilerOptions?\n\nCan we submit this one without further modifications and then work on a separate follow-up CL?",
      "parentUuid": "c3869ec5_499ef313",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a160be8c_e4ecdd65",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-05-15T13:11:33Z",
      "side": 1,
      "message": "CompilerOptions SGTM. Doing this in a follow-up CL works for me.",
      "parentUuid": "b92fb74f_2e43767c",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f53f2f61_8a3d1728",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-05-14T16:31:58Z",
      "side": 1,
      "message": "What if `runtime \u003d\u003d nullptr` and `!kIsDebugBuild`, will this be a null pointer dereference? If this combination is impossible, maybe add a DCHECK.",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 46
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e726076_0b6c3309",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-15T10:18:25Z",
      "side": 1,
      "message": "That combination should be impossible, we do not run gtests in release mode (see line 98). And DCHECK() is  a no-op for release build, so it would have to be a hard CHECK() which I\u0027m not eager to add.",
      "parentUuid": "f53f2f61_8a3d1728",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 46
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13684972_7fd68802",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-05-15T10:35:17Z",
      "side": 1,
      "message": "So there is a guarantee that Runtime::Current() is not null for release builds? Then add a comment.\n\nOtherwise I\u0027d change the check to:\n  return runtime !\u003d nullptr \u0026\u0026 runtime-\u003eUseJitCompilation();\nIn debug build, it would be the same as before, and in release mode it would the non-null check.",
      "parentUuid": "2e726076_0b6c3309",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 46
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5882df10_530ab9b1",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-05-15T12:56:49Z",
      "side": 1,
      "message": "Only one caller used to check `runtime !\u003d nullptr`, so it would not be the same as before for all the other callers.",
      "parentUuid": "13684972_7fd68802",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 46
      },
      "revId": "fab460ad2b8677e1be2d23aeb46facd30ed022a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}