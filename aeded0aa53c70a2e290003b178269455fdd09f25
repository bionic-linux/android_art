{
  "comments": [
    {
      "key": {
        "uuid": "e474097d_d4a5d5a8",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2111,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-07-09T01:31:52Z",
      "side": 1,
      "message": "Technically, this is wrong, since page_map_[i] can presumably be concurrently modified?  Memory barriers don\u0027t change that.  An atomic\u003cbool\u003e (or perhaps Atomic\u003ct\u003e for now) shouldn\u0027t be any bigger than a bool, so there shouldn\u0027t be a fundamental reason not to use it.\n\nThis doesn\u0027t quite look like double-checked locking.  As far as I can tell, nothing bad happens if this erroneously reads a wrong value outside the critical section.  I suspect there\u0027s not a real memory ordering issue here, and a memory_order_relaxed load should be OK. \n\nAs a practical matter, since there doesn\u0027t seem to be an ordering issue, this is also extremely likely to work if page_map_ is volatile.",
      "range": {
        "startLine": 2111,
        "startChar": 9,
        "endLine": 2111,
        "endChar": 27
      },
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9015cf5_55cfec95",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2111,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-07-09T22:42:32Z",
      "side": 1,
      "message": "Thanks, Hans.\n\nI think that as long as we are okay with missing an opportunity to release pages occasionally (leaving an just-freed page as kPageMapEmpty rather than kPageMapReleased), it is fine.\n\nAs I understand, in the \u0027lazy initialization or singleton\u0027 pattern (a common example of double-checked locking), the equivalent of missing an opportunity to release pages occasionally would correspond to returning an not-yet-fully-initialized object, which is bad.",
      "parentUuid": "e474097d_d4a5d5a8",
      "range": {
        "startLine": 2111,
        "startChar": 9,
        "endLine": 2111,
        "endChar": 27
      },
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "995e582a_6d2111bd",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2111,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-07-09T23:30:25Z",
      "side": 1,
      "message": "The race here should be benign. I\u0027ll add a comment.",
      "parentUuid": "b9015cf5_55cfec95",
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e474097d_34cc496b",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2157,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-07-09T01:31:52Z",
      "side": 1,
      "message": "Can we do this when we resurrect the page instead?  Memset may bring this into the cache, which would be bad here, and might be useful at the other end.",
      "range": {
        "startLine": 2157,
        "startChar": 4,
        "endLine": 2157,
        "endChar": 34
      },
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9045004_961b3c65",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2157,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-07-09T23:30:25Z",
      "side": 1,
      "message": "I\u0027ll add TODO: I think only the mac build has that madvise doesn\u0027t zero.",
      "parentUuid": "e474097d_34cc496b",
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e474097d_14c74d4b",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2166,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2014-07-09T01:31:52Z",
      "side": 1,
      "message": "Can this ever be false?  Is it safe to do the madvise if it\u0027s false?",
      "range": {
        "startLine": 2166,
        "startChar": 8,
        "endLine": 2166,
        "endChar": 43
      },
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9f75445_925eaa24",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2166,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-07-09T22:42:32Z",
      "side": 1,
      "message": "This is safe as the case where it can be false is when it\u0027s already kPageMapReleased. The other cases are caught by the DHECK in the previous line.",
      "parentUuid": "e474097d_14c74d4b",
      "range": {
        "startLine": 2166,
        "startChar": 8,
        "endLine": 2166,
        "endChar": 43
      },
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9045004_5625b496",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 2166,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-07-09T23:30:25Z",
      "side": 1,
      "message": "Correct.",
      "parentUuid": "f9f75445_925eaa24",
      "revId": "aeded0aa53c70a2e290003b178269455fdd09f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}