{
  "comments": [
    {
      "key": {
        "uuid": "2204b597_c6f2a2cc",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-04T19:50:26Z",
      "side": 1,
      "message": "Should the flip_function be GUARDED_BY(Locks::thread_suspend_count_lock_)?",
      "range": {
        "startLine": 1008,
        "startChar": 62,
        "endLine": 1008,
        "endChar": 75
      },
      "revId": "2e75cd86957e18b6562a646b15092caa5be049f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02a09108_0d27711f",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-04T20:28:03Z",
      "side": 1,
      "message": "I\u0027d like to avoid it as that would mean mutators would have to contend on the lock when getting the flip function in Thread::TransitionFromRunnableToSuspended(). I think it\u0027s safe to get the flip function without acquiring the lock there because flip function is set while threads are suspended.",
      "parentUuid": "2204b597_c6f2a2cc",
      "range": {
        "startLine": 1008,
        "startChar": 62,
        "endLine": 1008,
        "endChar": 75
      },
      "revId": "2e75cd86957e18b6562a646b15092caa5be049f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c21af956_4355a619",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-05T14:03:11Z",
      "side": 1,
      "message": "But you are relying on the Locks::thread_suspend_count_lock_ for the visibility here, aren\u0027t you?",
      "parentUuid": "02a09108_0d27711f",
      "range": {
        "startLine": 1008,
        "startChar": 62,
        "endLine": 1008,
        "endChar": 75
      },
      "revId": "2e75cd86957e18b6562a646b15092caa5be049f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02a09108_acbe167d",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-05T17:46:16Z",
      "side": 1,
      "message": "I think I am (unless waking up from a futex wait is enough.) It\u0027s GUARDED_BY(Locks::thread_suspend_count_lock_) in that sense. But I\u0027d like to not put GUARDED_BY there to avoid needing to acquire the lock in TransitionFromSuspendedToRunnable to satisfy the annotation constraint where I think it\u0027s safe not to.",
      "parentUuid": "c21af956_4355a619",
      "range": {
        "startLine": 1008,
        "startChar": 62,
        "endLine": 1008,
        "endChar": 75
      },
      "revId": "2e75cd86957e18b6562a646b15092caa5be049f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f85bcca_a27dbe3e",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-10-05T21:39:20Z",
      "side": 1,
      "message": "If this can never actually be read concurrently with an update, it should be fine to read it without a lock. Whatever communication is used to wake up a thread after suspension (futex wake presumably), or to let the suspending thread know we are suspended, should provide the required synchronization/visibility guarantees.",
      "parentUuid": "02a09108_acbe167d",
      "range": {
        "startLine": 1008,
        "startChar": 62,
        "endLine": 1008,
        "endChar": 75
      },
      "revId": "2e75cd86957e18b6562a646b15092caa5be049f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f85bcca_22220eab",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 234,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-10-05T21:39:20Z",
      "side": 1,
      "message": "I think we should always document cases in which this lock is temporarily released by the function, since that may break atomicity in the caller. Hopefully that\u0027s OK here?",
      "range": {
        "startLine": 234,
        "startChar": 6,
        "endLine": 234,
        "endChar": 50
      },
      "revId": "2e75cd86957e18b6562a646b15092caa5be049f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df7734bf_17863673",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 234,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-10-06T01:03:19Z",
      "side": 1,
      "message": "Added a comment. The existing call sites look OK to me.",
      "parentUuid": "9f85bcca_22220eab",
      "range": {
        "startLine": 234,
        "startChar": 6,
        "endLine": 234,
        "endChar": 50
      },
      "revId": "2e75cd86957e18b6562a646b15092caa5be049f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}