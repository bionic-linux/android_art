{
  "comments": [
    {
      "key": {
        "uuid": "9baf638f_78b3a1c2",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 4306,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-11-23T12:06:20Z",
      "side": 1,
      "message": "Does this initial value matters at all? It feels like it should not. Please add a comment.",
      "range": {
        "startLine": 4306,
        "startChar": 17,
        "endLine": 4306,
        "endChar": 21
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b77ab0e_a6942605",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 4306,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "It does. What I\u0027m trying to do here is make sure that phis are constructed live, marked dead if undefined/conflicting and never revived. That\u0027s not achievable with the current implementation (viz my DeadPhiHandling CL), hence TODOs and comments.\n\nI\u0027ve added a comment.",
      "parentUuid": "9baf638f_78b3a1c2",
      "range": {
        "startLine": 4306,
        "startChar": 17,
        "endLine": 4306,
        "endChar": 21
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bc96b78_96e92ca8",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 4312,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-23T11:30:16Z",
      "side": 1,
      "message": "Add a comment why you just don\u0027t type it with the first input type.",
      "range": {
        "startLine": 4310,
        "startChar": 0,
        "endLine": 4312,
        "endChar": 75
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bb2aff7_f7f0a08b",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 4312,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "Removed, typing with ToPhiType(first_input_type) as discussed.",
      "parentUuid": "5bc96b78_96e92ca8",
      "range": {
        "startLine": 4310,
        "startChar": 0,
        "endLine": 4312,
        "endChar": 75
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b80ef13_a7334a37",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 4313,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-11-23T12:06:20Z",
      "side": 1,
      "message": "what if this is object? (kPrimNot)",
      "range": {
        "startLine": 4313,
        "startChar": 58,
        "endLine": 4313,
        "endChar": 74
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bc96b78_f63a60c0",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 4313,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "Then it\u0027s typed kPrimInt. MergeTypes in PrimitiveTypePropagation allows the int-\u003eref transition.\n\nNicolas suggested removing this altogether, though. I was being extra cautious but it\u0027s worth typing it with ToPhiType(first_input_type) for the algorithm to converge faster.",
      "parentUuid": "7b80ef13_a7334a37",
      "range": {
        "startLine": 4313,
        "startChar": 58,
        "endLine": 4313,
        "endChar": 74
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9baf638f_d8858dee",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-23T11:30:16Z",
      "side": 1,
      "message": "Add a comment that this is a temporary state for a loop phi, and the loop phi will be removed in phi elimination.",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 1
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b80ef13_47928e3c",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9baf638f_d8858dee",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 1
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bb2aff7_d7571c4e",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-23T11:30:16Z",
      "side": 1,
      "message": "How about graph visualizer? We do not run it between the different passes of the SsaBuilder, but I sometimed had to, and it\u0027d be nice to not break it.",
      "range": {
        "startLine": 233,
        "startChar": 45,
        "endLine": 233,
        "endChar": 55
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bc4b760_b54aa0a3",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "GraphVisualizer should never-ever-ever have to deal with that. This comment is meant to say that we do not need to remove the phi here (we\u0027d need to remove it\u0027s phi users/inputs too). It will be removed by SsaPhiElimination, assuming it wasn\u0027t revived, and SsaChecker works as a DCHECK that all the components worked together as expected.\n\nIf the phi is marked dead here and not removed, then GraphVisualizer has every right to crash.",
      "parentUuid": "7bb2aff7_d7571c4e",
      "range": {
        "startLine": 233,
        "startChar": 45,
        "endLine": 233,
        "endChar": 55
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bc96b78_16a43c7a",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-23T11:30:16Z",
      "side": 1,
      "message": "I think this should only be for even reg_number, but then better be safe, and you actually test for 64bit below, so let\u0027s keep it like this.",
      "range": {
        "startLine": 678,
        "startChar": 0,
        "endLine": 679,
        "endChar": 65
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbb8a7d5_d90cb352",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "I think that is allowed. Either way, no reason why we couldn\u0027t handle it.",
      "parentUuid": "5bc96b78_16a43c7a",
      "range": {
        "startLine": 678,
        "startChar": 0,
        "endLine": 679,
        "endChar": 65
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbbdbfca_93977c09",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 684,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-11-23T12:06:20Z",
      "side": 1,
      "message": "you work with 3 locations in this function:\nreg_number - 1\nreg_number\nreg_number + 1\nbut we should never set all 3 of them at the same time.\n\nSo it would be nice and more readable to document in the beginning what you expect them to hold (depending on the case) and when you\u0027ll (over)write them.",
      "range": {
        "startLine": 684,
        "startChar": 25,
        "endLine": 684,
        "endChar": 39
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b80ef13_c7859eee",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 684,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "Why not all three? Imagine:\n\n  long-to-double v3, v2\n\nInitially, v2|3 is a long value. Writing into v3 invalidates v2, and because we\u0027re writing a double, v4 is invalidated too.",
      "parentUuid": "fbbdbfca_93977c09",
      "range": {
        "startLine": 684,
        "startChar": 25,
        "endLine": 684,
        "endChar": 39
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbbdbfca_d330142d",
        "filename": "compiler/optimizing/ssa_phi_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-23T11:30:16Z",
      "side": 1,
      "message": "Why don\u0027t you use the same IsUndefinedLoopHeaderPhi method instead?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 53
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbbdbfca_53aec459",
        "filename": "compiler/optimizing/ssa_phi_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "Because I intend to do away with IsUndefinedLoopHeaderPhi (there\u0027s a TODO in GetWhateverPhiEquivalent, and DeadPhiHandling will be replaced). This is meant to be permanent and also a more general assurance about this algorithm.",
      "parentUuid": "fbbdbfca_d330142d",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 53
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbb8a7d5_590fc378",
        "filename": "compiler/optimizing/ssa_phi_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-23T11:30:16Z",
      "side": 1,
      "message": "has_non_phi_use?",
      "range": {
        "startLine": 43,
        "startChar": 11,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbbdbfca_73b3c0c2",
        "filename": "compiler/optimizing/ssa_phi_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbb8a7d5_590fc378",
      "range": {
        "startLine": 43,
        "startChar": 11,
        "endLine": 43,
        "endChar": 25
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b77ab0e_26a91651",
        "filename": "test/550-checker-regression-wide-store/smali/TestCase.smali",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-11-23T12:06:20Z",
      "side": 1,
      "message": "What\u0027s the use of checker here? Would any of these checker tests actually fail without this patch?",
      "range": {
        "startLine": 28,
        "startChar": 3,
        "endLine": 28,
        "endChar": 14
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bc4b760_1588b408",
        "filename": "test/550-checker-regression-wide-store/smali/TestCase.smali",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-23T12:46:14Z",
      "side": 1,
      "message": "Q1: This test would fail at runtime even without Checker (unlike the bottom one). Nicolas had a good point that that, however, relies on the strategy we use for try/catch (reading vregs from dex reg map) and could stop testing the right thing if we changed the strategy.\n\nQ2: Yes, both of these Checker tests will fail on AOSP master (hence the reported bug). invalidateLow will have \u003c\u003cArg\u003e\u003e at v0 and invalidateHigh will have 0x0 at v1.",
      "parentUuid": "5b77ab0e_26a91651",
      "range": {
        "startLine": 28,
        "startChar": 3,
        "endLine": 28,
        "endChar": 14
      },
      "revId": "db6469bc488c696b017f8d05e26789a882f9bf50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}