{
  "comments": [
    {
      "key": {
        "uuid": "f0079550_1046e436",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-07T08:56:03Z",
      "side": 1,
      "message": "At this level, this looks like black magic. Why isn\u0027t the allocator dealing with all of this?",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 211,
        "endChar": 93
      },
      "revId": "0672703d9c8c5891f157e4d098ca7257d4371993",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d00a915c_29abc1b2",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-07T21:01:57Z",
      "side": 1,
      "message": "Happy to change this to whatever you suggest.\n---\n\nWell, I can move it into AllocateMemory but then the return type is still \n\n   std::aligned_storage\u003clong expression, long expression\u003e::type*\n\nwhich is perfectly fine if you want me to change this to\n\n   // Allocate well-aligned memory to store an ArtLambdaMethod.\n   auto* uninitialized_lambda_method \u003d lambda::LeakingAllocator::AllocateMemory\u003cArtLambdaMethod\u003e(self);\n\nor it could just use a void* but I find that loses the alignment and the size information which is problematic.\n\nI suppose even in this case it might not even matter too much that if it was \"auto*\" since it gets used only for in-place new which works on any non-const void* (unfortunately there\u0027s no easy way to say non-const auto).\n\n----\nThe real simple answer is that AllocateMemory can over-allocate (for structs that have a [0]sized array element, \"flexible arrays\") so I just wanted to reuse that same mechanism for allocating non-flexible structs.\n\nIn the end that whole class is going to go away so I didn\u0027t want to put too much thought into it, other than clearly marking every call site to be updated later.",
      "parentUuid": "f0079550_1046e436",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 211,
        "endChar": 93
      },
      "revId": "0672703d9c8c5891f157e4d098ca7257d4371993",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70664538_d4357c13",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-10-07T08:56:03Z",
      "side": 1,
      "message": "nit: this one the line above and the arguments each on their line?",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 247,
        "endChar": 65
      },
      "revId": "0672703d9c8c5891f157e4d098ca7257d4371993",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0435d80_0d0d1d04",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-10-07T21:01:57Z",
      "side": 1,
      "message": "This way is preferred because the arguments are aligned to the (\n\nIt\u0027s always preferable to align to the (, {, etc over doing a \"i give up, so just wrap and indent 4 spaces\" type of alignment.\n\n----\nAs for something like\n\n   var \u003d foo(x,\n             y,\n             z)\n\nThat doesn\u0027t actually fit because the \"\u003d ...\" part of the expression is pretty long.\n\nI can update the guide if this was stated ambiguous earlier?",
      "parentUuid": "70664538_d4357c13",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 247,
        "endChar": 65
      },
      "revId": "0672703d9c8c5891f157e4d098ca7257d4371993",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}