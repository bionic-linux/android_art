{
  "comments": [
    {
      "key": {
        "uuid": "386feb54_744850d1",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2020-03-04T01:36:28Z",
      "side": 1,
      "message": "Should we have an assert that the existing class loader is null? Or would that fail for the DexFile APIs",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 16
      },
      "revId": "a0448538e23f2cc1c3645c14709fc6fb6cc37588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a3e5464_e843581b",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1611842
      },
      "writtenOn": "2020-03-04T02:28:23Z",
      "side": 1,
      "message": "I don\u0027t think it should. Taking DexFiles across classloaders has thrown in FindClass for a while, I believe, so we\u0027d simply break earlier or something.\n\nI don\u0027t have an app doing that at hand to test, though. Could make it API-level specific, just to be sure?",
      "parentUuid": "386feb54_744850d1",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 16
      },
      "revId": "a0448538e23f2cc1c3645c14709fc6fb6cc37588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "692e4330_a70f2406",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-03-04T12:10:50Z",
      "side": 1,
      "message": "We\u0027re throwing _before_ calling ClassLinker::RegisterDexFileLocked(), so having a check here should be fine. The condition for the throw is not API level-specific and therefore I believe the check should not be either.\n\nOTOH, I do not see much value in the check, given the existing prevention of double-registration.",
      "parentUuid": "4a3e5464_e843581b",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 16
      },
      "revId": "a0448538e23f2cc1c3645c14709fc6fb6cc37588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c229cd94_8d37c4e4",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-03-04T15:12:57Z",
      "side": 1,
      "message": "Are we replacing a non-null ClassLoader from the app image with another one? That would be working as intended, so a `CHECK(GetClassLoader() \u003d\u003d nullptr)` would be broken.\n\nSee also ClassLinker::AddImageSpace(), section \"AppImage:UpdateClassLoaders\".",
      "parentUuid": "692e4330_a70f2406",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 16
      },
      "revId": "a0448538e23f2cc1c3645c14709fc6fb6cc37588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31697f76_d649ed82",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1611842
      },
      "writtenOn": "2020-03-04T16:20:54Z",
      "side": 1,
      "message": "You\u0027re right. I had assumed the cleaning code in the image writer would generically clean the non-table parts of the dex cache objects, but obviously it doesn\u0027t do that (yet).\n\nWhat\u0027s your opinion? Should it be nulled out (like the cookies and other stuff that is re-bound when loading)?",
      "parentUuid": "c229cd94_8d37c4e4",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 16
      },
      "revId": "a0448538e23f2cc1c3645c14709fc6fb6cc37588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}