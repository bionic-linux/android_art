{
  "comments": [
    {
      "key": {
        "uuid": "739b89a4_589ad6d8",
        "filename": "runtime/thread.cc",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: This can be hidden further with a helper function\n\n  StateAndFlags old_state_and_flags \u003d GetCurrentStateAndFlags();",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9f755ac_01d8add6",
        "filename": "runtime/thread.cc",
        "patchSetId": 7
      },
      "lineNbr": 1390,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: prefer \u003d over construction syntax (esp. for trivial types)",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "030c2578_01e824e4",
        "filename": "runtime/thread.cc",
        "patchSetId": 7
      },
      "lineNbr": 1409,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: prefer \u003d over construction syntax (esp. for trivial types)",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87b0131a_118352d6",
        "filename": "runtime/thread.cc",
        "patchSetId": 7
      },
      "lineNbr": 1418,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: prefer \u003d over construction syntax (esp. for trivial types)",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd9e6cd1_e53a1aec",
        "filename": "runtime/thread.cc",
        "patchSetId": 7
      },
      "lineNbr": 2098,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "SetAtomicStateUnsafe(kNative)\n\n?",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50f105e4_42c08afb",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1323,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: AtomicSetStateUnsafe seems to be more appropriate as this cannot be sanely interleaved with other totally ordered operations",
      "range": {
        "startLine": 1323,
        "startChar": 14,
        "endLine": 1323,
        "endChar": 28
      },
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0f1156d_8281f90a",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1325,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: I found this reinterpret cast to be a bit harmful for readability (and standards-compliance) since its hiding the fact that an atomic int is being aliased as an atomic byte.",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2367709b_7aee0fbd",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1327,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "This seems to work in terms of the correct assembly code produced by clang:\n\n  union AtomicStateAndFlags {\n    struct {\n      std::atomic\u003cThreadFlags\u003e flags;\n      std::atomic\u003cThreadState\u003e state;\n    } as_disjoint;\n    std::atomic\u003cStateAndFlag\u003e as_combined;\n    std::atomic\u003cint32_t\u003e as_int;\n  };\n  static_assert(sizeof(AtomicStateAndFlags) \u003d\u003d sizeof(int32_t));\n\nSeems like it could be promising w.r.t. to being well-defined. At least if we remove std::atomic then it\u0027s well-defined w.r.t. to aliasing rules.\n\n---------\n\nOn a related note, regardless of whether its union or reinterpret_cast:\n\nNot sure how well defined it is in C++ though to atomically access a word while another thread is accessing a halfword though. I mean it should work if we were writing assembly but will the C++ Standard be ok with it?",
      "range": {
        "startLine": 1325,
        "startChar": 0,
        "endLine": 1327,
        "endChar": 57
      },
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "682ce986_a0ec4528",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1329,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "return value is being dropped, why isn\u0027t this void+store ?",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afc3ca04_64f90dbd",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1420,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: redundant",
      "range": {
        "startLine": 1420,
        "startChar": 9,
        "endLine": 1420,
        "endChar": 18
      },
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ada59b3b_1d077cbb",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1426,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: StateAndFlags(state, 0)",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21083098_0e247489",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1431,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: StateAndFlags(0, flags)",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84ce3206_ee79ae74",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1458,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: redundant",
      "range": {
        "startLine": 1458,
        "startChar": 13,
        "endLine": 1458,
        "endChar": 22
      },
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8e57c17_0dbc9cd1",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1460,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "nit: Probably worth mentioning that the order matters. flags **has** to be first otherwise the fetch_or/fetch_and aliasing to int will break. Could be a static assert\n\n  static_assert(offsetof(as_struct.flags) \u003d\u003d 0)",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6a7cb61_adad2bc2",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1463,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "I think using ThreadFlag and ThreadState here should work now that you\u0027ve defined explicit operators for OR-ing the flags.\n\nThis avoids the need for static_casts and makes it more clear what the underlying data is.",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4e6d5f0_f856fa4f",
        "filename": "runtime/thread.h",
        "patchSetId": 7
      },
      "lineNbr": 1513,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-12T22:54:01Z",
      "side": 1,
      "message": "I doubt this makes a tangible difference, but this is an alternative to having the two helpers\n\n  struct AtomicStateAndFlags : std::atomic\u003cStateAndFlags\u003e {\n    operator StateAndFlags() {\n      return load(...);\n    }\n    SetFlag(StateAndFlags flag) { /*reinterpret cast to uint32 here, then fetch_or */ }\n    ClearFlag(StateAndFlags flag) { ... }\n  } state_and_flags;\n\nalthough if we use the union trick I describe above, these functions can go into the union instead.",
      "revId": "055446b78fe9d0fc8654dc275a2cb8d614f95666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}