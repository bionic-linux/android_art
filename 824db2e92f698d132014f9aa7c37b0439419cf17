{
  "comments": [
    {
      "key": {
        "uuid": "7b6aafda_a0bb80e5",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-11-17T18:11:46Z",
      "side": 1,
      "message": "we have something similar in the boolean_simplifier\nperhaps time to move this to a more general place",
      "range": {
        "startLine": 361,
        "startChar": 19,
        "endLine": 361,
        "endChar": 39
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b816bc7_791a03bd",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-11-17T18:24:46Z",
      "side": 1,
      "message": "Do you have a suggestion on where to put it?",
      "parentUuid": "7b6aafda_a0bb80e5",
      "range": {
        "startLine": 361,
        "startChar": 19,
        "endLine": 361,
        "endChar": 39
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb75bfb9_965eca51",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-11-17T18:39:37Z",
      "side": 1,
      "message": "More experienced team members may chime in here, but right now nodes.h/cc seem to be the only place we have for this; we should consider having a general util place perhaps",
      "parentUuid": "5b816bc7_791a03bd",
      "range": {
        "startLine": 361,
        "startChar": 19,
        "endLine": 361,
        "endChar": 39
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b67fde4b_957d144c",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-17T18:59:58Z",
      "side": 1,
      "message": "You don\u0027t need to pass the arena in, btw. Just get it from\n\n  cond-\u003eGetBlock()-\u003eGetGraph()-\u003eGetArena()",
      "range": {
        "startLine": 361,
        "startChar": 56,
        "endLine": 361,
        "endChar": 61
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b2597a9_fbdff154",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-11-17T18:11:46Z",
      "side": 1,
      "message": "I find doing the opposite this way a bit more error prone than using our built in  GetOppositeCondition() and simply generating the same condition as reflected by the enum",
      "range": {
        "startLine": 364,
        "startChar": 27,
        "endLine": 364,
        "endChar": 28
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b6aafda_6015688c",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-11-17T18:24:46Z",
      "side": 1,
      "message": "Will use the common code from boolean_simplifier.cc",
      "parentUuid": "3b2597a9_fbdff154",
      "range": {
        "startLine": 364,
        "startChar": 27,
        "endLine": 364,
        "endChar": 28
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b6aafda_80767ce3",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-11-17T18:39:37Z",
      "side": 1,
      "message": "thanks",
      "parentUuid": "7b6aafda_6015688c",
      "range": {
        "startLine": 364,
        "startChar": 27,
        "endLine": 364,
        "endChar": 28
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56278298_4c5cf3ca",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-17T18:59:58Z",
      "side": 1,
      "message": "If you cannot find a suitable common place, I suggest duplicating because I intend to turn BooleanSimplifier into a SelectGenerator and move the condition simplification here anyway.\n\nThat said, could you make this completely general, just like it is in BooleanSimplifier? You\u0027d have three cases:\n- `cond` is an HIntConstant \u003d\u003e return opposite bool\n- `cond` is a non-float HCondition \u003d\u003e do the switch and generate opposite cond\n- otherwise generate HBooleanNot\n\nThis would also reduce the changes in VisitEqual to:\n\n  if (input_const-\u003eIsZero) {\n    ReplaceAndRemoveWith(equal, GetOppositeCond(input_value));\n  }",
      "parentUuid": "7b6aafda_6015688c",
      "range": {
        "startLine": 364,
        "startChar": 27,
        "endLine": 364,
        "endChar": 28
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "169a6aee_e5f6acb9",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-17T18:59:58Z",
      "side": 1,
      "message": "Please leave this to dead code elimination. I know it is safe to remove here, but the instruction simplifier is getting pretty bloated so let\u0027s aim to keep it as simple/compact as possible.",
      "range": {
        "startLine": 410,
        "startChar": 8,
        "endLine": 412,
        "endChar": 9
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "169a6aee_45de802d",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 438,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-17T18:59:58Z",
      "side": 1,
      "message": "Wanna do the same thing here?",
      "range": {
        "startLine": 438,
        "startChar": 0,
        "endLine": 438,
        "endChar": 47
      },
      "revId": "824db2e92f698d132014f9aa7c37b0439419cf17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}