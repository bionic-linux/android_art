{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "43ecf9f4_da9b4660",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 8
      },
      "lineNbr": 1566,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Style: We could put this on one line.\n\nAnd if you\u0027re using `{`, `}` for initialization of `JniStubKey`, maybe we could use the same style here and remove the `\u003d`. But feel free to leave the `\u003d` here - the `JniStubMethodRelocation` is plain `struct`.",
      "range": {
        "startLine": 1563,
        "startChar": 4,
        "endLine": 1566,
        "endChar": 6
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c59a264_d7dd23c9",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 8
      },
      "lineNbr": 1566,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43ecf9f4_da9b4660",
      "range": {
        "startLine": 1563,
        "startChar": 4,
        "endLine": 1566,
        "endChar": 6
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "004337ee_32e5c904",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 8
      },
      "lineNbr": 2618,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "`/*kUpdate\u003d*/`\n\nThe argument name does not contain the trailing `d` in the header file. And I\u0027d prefer the `\u003d` even if I don\u0027t expect clang-tidy to check template argument names.",
      "range": {
        "startLine": 2618,
        "startChar": 39,
        "endLine": 2618,
        "endChar": 51
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0407b150_c1b8ebf1",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 8
      },
      "lineNbr": 2618,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "004337ee_32e5c904",
      "range": {
        "startLine": 2618,
        "startChar": 39,
        "endLine": 2618,
        "endChar": 51
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "151d06a3_f54c79fb",
        "filename": "runtime/jni_stub_hash_map.cc",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Style: `kMaxFloatOrDoubleRegisterArgs` (compile-time constant). Similarly `kMaxIntLikeRegisterArgs` below. Same for \"Equals\".",
      "range": {
        "startLine": 117,
        "startChar": 19,
        "endLine": 117,
        "endChar": 52
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ebd3b0f_c84867f9",
        "filename": "runtime/jni_stub_hash_map.cc",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "151d06a3_f54c79fb",
      "range": {
        "startLine": 117,
        "startChar": 19,
        "endLine": 117,
        "endChar": 52
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e7de34f_5c1272f9",
        "filename": "runtime/jni_stub_hash_map.cc",
        "patchSetId": 8
      },
      "lineNbr": 144,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "\"if it\u0027s in a register\"",
      "range": {
        "startLine": 144,
        "startChar": 36,
        "endLine": 144,
        "endChar": 52
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e62c41f_c6647148",
        "filename": "runtime/jni_stub_hash_map.cc",
        "patchSetId": 8
      },
      "lineNbr": 144,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e7de34f_5c1272f9",
      "range": {
        "startLine": 144,
        "startChar": 36,
        "endLine": 144,
        "endChar": 52
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5c73e95_6890bb01",
        "filename": "runtime/jni_stub_hash_map.cc",
        "patchSetId": 8
      },
      "lineNbr": 149,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "\"code\"",
      "range": {
        "startLine": 149,
        "startChar": 54,
        "endLine": 149,
        "endChar": 59
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2eba315_fb44f578",
        "filename": "runtime/jni_stub_hash_map.cc",
        "patchSetId": 8
      },
      "lineNbr": 149,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5c73e95_6890bb01",
      "range": {
        "startLine": 149,
        "startChar": 54,
        "endLine": 149,
        "endChar": 59
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97927380_406337d3",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Move the `jni_stub_hash_map*` files to `oat/`?",
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6476159c_83b096aa",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97927380_406337d3",
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa564905_a7b37009",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Move to initializer-list (before `shorty_(shorty)`).",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 90
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c690f15_c3fd622e",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa564905_a7b37009",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 90
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "152782be_f0414f31",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Simply forward to the other constructor:\n\n    JniStubKey(ArtMethod* method) REQUIRES_SHARED(Locks::mutator_lock_)\n        : JniStubKey(method-\u003eGetAccessFlags(), method-\u003eGetShortyView()) {}",
      "range": {
        "startLine": 55,
        "startChar": 70,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74b57ffb_96b5fc65",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "152782be_f0414f31",
      "range": {
        "startLine": 55,
        "startChar": 70,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10b1e1fe_11c1caf0",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "We should rewrite the `HashMap\u003c\u003e` to wrap an `EmptyFn` for `Key` to provide the \"empty\" API for the pair, so that we can drop this template argument. But that\u0027s out of scope in this change.",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 83,
        "endChar": 25
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4874a8d_1051a5bb",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 97,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Move implementation to the .cc file. (Then we can remove the forward declarations for `JniStubKeyOptimizedHash` and `JniStubKeyGenericHash` above and explicit specializations from the .cc file.)",
      "range": {
        "startLine": 97,
        "startChar": 46,
        "endLine": 97,
        "endChar": 47
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47414192_c604a84d",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 97,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4874a8d_1051a5bb",
      "range": {
        "startLine": 97,
        "startChar": 46,
        "endLine": 97,
        "endChar": 47
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70998681_79d5e11c",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Move implementation to .cc file.",
      "range": {
        "startLine": 129,
        "startChar": 48,
        "endLine": 129,
        "endChar": 49
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b76b21e7_a0685c09",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70998681_79d5e11c",
      "range": {
        "startLine": 129,
        "startChar": 48,
        "endLine": 129,
        "endChar": 49
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e32bd0_ea46e9bd",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Nit: Use `typename` for consistency.",
      "range": {
        "startLine": 160,
        "startChar": 10,
        "endLine": 160,
        "endChar": 15
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6628e751_8c66311d",
        "filename": "runtime/jni_stub_hash_map.h",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5e32bd0_ea46e9bd",
      "range": {
        "startLine": 160,
        "startChar": 10,
        "endLine": 160,
        "endChar": 15
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68eccfcb_bd6c3040",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Unused, please remove. (Note: We usually pass `ArrayRef\u003c\u003e` by value.)",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4fbf739_694c8fc6",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "I refered this [link](https://google.github.io/googletest/advanced.html#teaching-googletest-how-to-print-your-values) to customize the output of machine code. It\u0027s much easier to use if we want to convert it to assembly instructions (I can paste all the output to online hex to arm/x86_64 [website](https://armconverter.com/?disasm) to get the final assembly instructions). This way we can compare exactly which lines of assembly instructions are inconsistent, and we can better modify our code according to the test results. This is especially effective in boot image self-check.\n\nBut imperfection, however, is that now we store \u0027const void*\u0027 in boot_image_jni_stubs_ map. So we can\u0027t back out the ArtMethod and get its pretty name. Do you have idea on this? Thanks!\n\n[Original output: x86_64]\n```\nart/runtime/oat/jni_stub_hash_map_test.cc:(151) Failure in test JniStubHashMapTest.CriticalNative\nExpected: (method_code) !\u003d (cmp_method_code), actual: { \u0027H\u0027 (72, 0x48), \u0027\\x83\u0027 (131), \u0027\\xEC\u0027 (236), \u0027(\u0027 (40, 0x28), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027|\u0027 (124, 0x7C), \u0027$\u0027 (36, 0x24), \u0027 \u0027 (32, 0x20), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027t\u0027 (116, 0x74), \u0027$\u0027 (36, 0x24), \u0027\\x18\u0027 (24), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027l\u0027 (108, 0x6C), \u0027$\u0027 (36, 0x24), \u0027\\x10\u0027 (16), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027d\u0027 (100, 0x64), \u0027$\u0027 (36, 0x24), \u0027\\b\u0027 (8), ... } vs { \u0027H\u0027 (72, 0x48), \u0027\\x83\u0027 (131), \u0027\\xEC\u0027 (236), \u0027(\u0027 (40, 0x28), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027|\u0027 (124, 0x7C), \u0027$\u0027 (36, 0x24), \u0027 \u0027 (32, 0x20), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027t\u0027 (116, 0x74), \u0027$\u0027 (36, 0x24), \u0027\\x18\u0027 (24), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027l\u0027 (108, 0x6C), \u0027$\u0027 (36, 0x24), \u0027\\x10\u0027 (16), \u0027\\xF2\u0027 (242), \u0027D\u0027 (68, 0x44), \u0027\\xF\u0027 (15), \u0027\\x11\u0027 (17), \u0027d\u0027 (100, 0x64), \u0027$\u0027 (36, 0x24), \u0027\\b\u0027 (8), ... }\nbase method: int MyClassNatives.returnInt_Critical(), compared method: double MyClassNatives.returnDouble_Critical()\n```\n\n[Current output: x86_64]\n```\nart/runtime/oat/jni_stub_hash_map_test.cc:(151) Failure in test JniStubHashMapTest.CriticalNative\nExpected: (method_code) !\u003d (cmp_method_code), actual: [[[ 48 83 ec 28 f2 44 0f 11 7c 24 20 f2 44 0f 11 74 24 18 f2 44 0f 11 6c 24 10 f2 44 0f 11 64 24 08 48 89 f8 ff 50 10 f2 44 0f 10 64 24 08 f2 44 0f 10 6c 24 10 f2 44 0f 10 74 24 18 f2 44 0f 10 7c 24 20 48 83 c4 28 c3 ]]] vs [[[ 48 83 ec 28 f2 44 0f 11 7c 24 20 f2 44 0f 11 74 24 18 f2 44 0f 11 6c 24 10 f2 44 0f 11 64 24 08 48 89 f8 ff 50 10 f2 44 0f 10 64 24 08 f2 44 0f 10 6c 24 10 f2 44 0f 10 74 24 18 f2 44 0f 10 7c 24 20 48 83 c4 28 c3 ]]]\nbase method: int MyClassNatives.returnInt_Critical(), compared method: double MyClassNatives.returnDouble_Critical()\n```",
      "parentUuid": "68eccfcb_bd6c3040",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "831d986f_4bd1bdee",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-29T15:08:45Z",
      "side": 1,
      "message": "I see. Can you add `static` so that this cannot leak to other tests?\n\nI don\u0027t understand your question about the `ArtMethod` and its pretty name. In all the `ASSERT_{EQ,NE}` statements that use the `PrintTo` you have already added the pretty name with additional `\u003c\u003c`.",
      "parentUuid": "d4fbf739_694c8fc6",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6777baea_bdddc64c",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-29T15:10:01Z",
      "side": 1,
      "message": "Also, please add a comment that this is teaching gtest how to print the `ArrayRef\u003c\u003e`?",
      "parentUuid": "831d986f_4bd1bdee",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f8d8efa_026b1e3a",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-03-01T03:04:13Z",
      "side": 1,
      "message": "Done.\n\n\u003e I don\u0027t understand your question about the ArtMethod and its pretty name. In all the ASSERT_{EQ,NE} statements that use the PrintTo you have already added the pretty name with additional \u003c\u003c.\n\nSorry, my bad. I didn\u0027t say it clearly. The pain point exists in boot image self check. As you can see, I only print the method pretty name, but not the compared one, because the compared stub was got from `boot_image_jni_stubs_` map, it\u0027s a raw pointer. I could modify the return of ClassLinker\u0027s `FindBootJniStub` method to meet the needs, but it\u0027s only used for test, seems unnecessary. However, if the pretty name of the compared method is missing, then the shorty information is missing when test failed. It\u0027s not convenient for us to find the real issue. But since you have plan to generate a large set of shorty and flags combinations, maybe it doesn\u0027t seem to matter if compared method\u0027s pretty name is missing. What do you think? Thanks!\n\n```\n          ASSERT_EQ(method_code_size, boot_jni_stub_size)\n              \u003c\u003c \"method: \" \u003c\u003c method.PrettyMethod();\n          ASSERT_EQ(memcmp(quick_code, boot_jni_stub, method_code_size), 0)\n              \u003c\u003c \"method: \" \u003c\u003c method.PrettyMethod();\n```",
      "parentUuid": "6777baea_bdddc64c",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "105dee45_7ec4276e",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-03-04T06:31:28Z",
      "side": 1,
      "message": "I think it\u0027s OK as is. If the boot image self check failed, I would expect it to be reproducible and we could then easily modify the code to find the method. (For example by visiting the JNI stub methods in boot images and checking their oat code pointers.)",
      "parentUuid": "9f8d8efa_026b1e3a",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b25c07a6_1af6f921",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Style: Does this fit on one line?",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 68,
        "endChar": 57
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f1403ef_174d7116",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b25c07a6_1af6f921",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 68,
        "endChar": 57
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c085ff5_96a10865",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 270,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "By default, the CommonRuntimeTest only load primary boot image, how do we get it to load more boot images to enrich the test set? Thanks!",
      "range": {
        "startLine": 270,
        "startChar": 0,
        "endLine": 270,
        "endChar": 57
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efb827cc_33315bf2",
        "filename": "runtime/jni_stub_hash_map_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 270,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-29T15:08:45Z",
      "side": 1,
      "message": "We could compile a custom boot image with more dex files but I find that unnecessary.",
      "parentUuid": "1c085ff5_96a10865",
      "range": {
        "startLine": 270,
        "startChar": 0,
        "endLine": 270,
        "endChar": 57
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6321fcd7_b5009177",
        "filename": "runtime/oat/image-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 118,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "`kUpdate`",
      "range": {
        "startLine": 118,
        "startChar": 15,
        "endLine": 118,
        "endChar": 23
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b20501e_15c7b9b7",
        "filename": "runtime/oat/image-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 118,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6321fcd7_b5009177",
      "range": {
        "startLine": 118,
        "startChar": 15,
        "endLine": 118,
        "endChar": 23
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcdb1579_e6576c35",
        "filename": "test/667-jit-jni-stub/src/Main.java",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "Add space before `(`.",
      "range": {
        "startLine": 160,
        "startChar": 17,
        "endLine": 160,
        "endChar": 18
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbfbd68e_ff98acab",
        "filename": "test/667-jit-jni-stub/src/Main.java",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcdb1579_e6576c35",
      "range": {
        "startLine": 160,
        "startChar": 17,
        "endLine": 160,
        "endChar": 18
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4003ffe_c3b53bfd",
        "filename": "test/common/runtime_state.cc",
        "patchSetId": 8
      },
      "lineNbr": 452,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-28T16:13:01Z",
      "side": 1,
      "message": "\"to avoid entrypoint being set\"",
      "range": {
        "startLine": 452,
        "startChar": 50,
        "endLine": 452,
        "endChar": 72
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd669777_36ba8bbb",
        "filename": "test/common/runtime_state.cc",
        "patchSetId": 8
      },
      "lineNbr": 452,
      "author": {
        "id": 1868486
      },
      "writtenOn": "2024-02-29T07:14:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4003ffe_c3b53bfd",
      "range": {
        "startLine": 452,
        "startChar": 50,
        "endLine": 452,
        "endChar": 72
      },
      "revId": "ce4f82a4e54f1507fa68397fa9a3e9ef1b8eb9bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}