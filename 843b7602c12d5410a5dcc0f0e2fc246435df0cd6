{
  "comments": [
    {
      "key": {
        "uuid": "b9a97860_c5a55a03",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Please expand the comment saying that it\u0027s for a phi that is not associated to any vref. On the other hand, maybe an invalid index in the HPhi class is better? Or a constructor that does not take an index?",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 62
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_79b0cb4e",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "I noticed there is a kNoRegNumber in nodes.h and I\u0027m using that one. Also added a comment when we new the synthetic phi.",
      "parentUuid": "b9a97860_c5a55a03",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 62
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_84f1a60f",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 310,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Don\u0027t you know it\u0027s the first block? Could it make sense to declare the iterator outside of the for, and do an it_loop.Advance() with a dcheck that the current is the loop header?\n\nthen you wouldn\u0027t need this check in the loop.",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 310,
        "endChar": 7
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b97b38ac_3e5a287c",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 310,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Turned out HBlocksInLoopIterator doesn\u0027t guarantee header to be the first block returned. I added a HBlocksInLoopReversePostOrderIterator. Then did what you suggested.",
      "parentUuid": "99a8345d_84f1a60f",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 310,
        "endChar": 7
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79c9c09b_b3aa588c",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 310,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-08T08:59:42Z",
      "side": 1,
      "message": "On the other hand, does the order matter here? If not, maybe best to just do what you did before.",
      "parentUuid": "b97b38ac_3e5a287c",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 310,
        "endChar": 7
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "796b8031_c0e73fd1",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 310,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-10T14:32:24Z",
      "side": 1,
      "message": "Order doesn\u0027t matter with regard to correctness. There is one less test in this for loop (no header test) so it\u0027s a little better. A reverse post order traversal of loop blocks is probably useful under some other situations so it\u0027s nice to have that.",
      "parentUuid": "79c9c09b_b3aa588c",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 310,
        "endChar": 7
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a97860_a59cdeba",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 347,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Can that only happen with what you\u0027re just adding? Should you dcheck that this is the phi you synthesized?",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 347,
        "endChar": 46
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d588cf_e229663d",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 347,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "This is Finder phase so the phi hasn\u0027t been added yet. In theory this may happen e.g. for nested loops. The outer loop finds one array and adds deoptimization (thus the phi for array length) for it already so the inner loop should just skip it. However right now, outer loop won\u0027t pick up the arrays inside inner loop since the inner loop body doesn\u0027t dominate outer loop\u0027s back edge.\n\nI added a DCHECK(!length_value-\u003eIsPhi()); before the if statement and it didn\u0027t catch anything. Still it\u0027s on the safe side to skip collecting those arrays just in case there are really such cases.",
      "parentUuid": "b9a97860_a59cdeba",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 347,
        "endChar": 46
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_29dd2952",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 625,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Please provide an example. It looks to me that this covers cases like:\n\nfor (int a \u003d foo(); a \u003c 42; a++) {}\n\nWhere foo() does not dominate the pre-header.\n\nSo in most situations, I guess we are not going to add deoptimization for non-constant checks in the for.",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 625,
        "endChar": 81
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b97b38ac_d44af5a3",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 625,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "for (int a \u003d foo(); a \u003c 42; a++) is ok since a\u003dfoo() is actually in the loop pre-header.\n\nThis covers case like:\n  for (int a \u003d 10; a \u003e\u003d foo(); a--) array[a] \u003d 1;\nsince we can\u0027t add deopt like\nif (foo() \u003c 0) deopt() in the loop pre-header since we can\u0027t move foo() to pre-header.\n\nI\u0027ll add some comments.",
      "parentUuid": "d9ae2c65_29dd2952",
      "range": {
        "startLine": 625,
        "startChar": 0,
        "endLine": 625,
        "endChar": 81
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_27dd5452",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 656,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "dcheck that it is the pre header of the loop information of the header?",
      "range": {
        "startLine": 656,
        "startChar": 0,
        "endLine": 656,
        "endChar": 57
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59d23ce8_de26826b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 656,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99a8345d_27dd5452",
      "range": {
        "startLine": 656,
        "startChar": 0,
        "endLine": 656,
        "endChar": 57
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a97860_854d22bf",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 669,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Maybe DCHECK that the check cannot be proven?",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 669,
        "endChar": 31
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d96c6c17_7d03a87b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 669,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "I added a test that if the test can be proven, such as between constants, we can totally skip the loop body entry test.\n\nI didn\u0027t do the DCHECK() to make sure this call is necessary though. It seems a little too repetitive.",
      "parentUuid": "b9a97860_854d22bf",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 669,
        "endChar": 31
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_e963910b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 729,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Maybe add a helper (eg CanBeMovedToLoopPreHeader) for this and share it with CanAddDeoptimizationConstant?",
      "range": {
        "startLine": 723,
        "startChar": 0,
        "endLine": 729,
        "endChar": 5
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b97b38ac_3726cbf1",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 729,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "I\u0027ll move the value-before-header tests before we do Finder to quickly skip such cases.\n\nI don\u0027t do CanBeMovedToLoopPreHeader check though. I assume licm has already done its part.",
      "parentUuid": "d9ae2c65_e963910b",
      "range": {
        "startLine": 723,
        "startChar": 0,
        "endLine": 729,
        "endChar": 5
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_493ae5fa",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 731,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "what is this?",
      "range": {
        "startLine": 731,
        "startChar": 9,
        "endLine": 731,
        "endChar": 44
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_070ff86a",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 731,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "what\u0027s the meaning of \"right\" here?",
      "range": {
        "startLine": 731,
        "startChar": 54,
        "endLine": 731,
        "endChar": 59
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59d23ce8_7e60b62d",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 731,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "I\u0027ll use \"correct\". array_length_in_loop_body_if_needed will hold the correct array.length value inside the loop body. But array_length_in_loop_body_if_needed will be always 0 if the loop body isn\u0027t entered so it would be wrong to use array_length_in_loop_body_if_needed as array.length in the loop header if the loop isn\u0027t entered.\n\nI\u0027ll move the comments containing array_length_in_loop_body_if_needed earlier so it comes before this comment.",
      "parentUuid": "99a8345d_070ff86a",
      "range": {
        "startLine": 731,
        "startChar": 54,
        "endLine": 731,
        "endChar": 59
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_2939a901",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 736,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "loop header already -\u003e the loop header",
      "range": {
        "startLine": 736,
        "startChar": 47,
        "endLine": 736,
        "endChar": 66
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_c94d7590",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 736,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "in *the* loop body.",
      "range": {
        "startLine": 736,
        "startChar": 71,
        "endLine": 736,
        "endChar": 83
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_60532e41",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 736,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9ae2c65_c94d7590",
      "range": {
        "startLine": 736,
        "startChar": 71,
        "endLine": 736,
        "endChar": 83
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_e7f5fcc3",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 737,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "in loop -\u003e in the loop",
      "range": {
        "startLine": 737,
        "startChar": 25,
        "endLine": 737,
        "endChar": 33
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a97860_482c1fd3",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 737,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "what is this?",
      "range": {
        "startLine": 737,
        "startChar": 44,
        "endLine": 737,
        "endChar": 80
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d588cf_45471cce",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 737,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99a8345d_e7f5fcc3",
      "range": {
        "startLine": 737,
        "startChar": 25,
        "endLine": 737,
        "endChar": 33
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b97b38ac_f7c0531f",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 737,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "As explained above. I also added some debug check to make sure phi\u0027s use is dominated by array_length inside the loop body.\n\nSome uses are not officially in the loop since some can be on the exit edge (like a return block) and won\u0027t be considered as part of the loop. Still the use is safe since it\u0027s after the loop body is entered.",
      "parentUuid": "b9a97860_482c1fd3",
      "range": {
        "startLine": 737,
        "startChar": 44,
        "endLine": 737,
        "endChar": 80
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_8702083b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 810,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "One line?",
      "range": {
        "startLine": 809,
        "startChar": 0,
        "endLine": 810,
        "endChar": 45
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d588cf_a8057d4b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 810,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Looks close to that red line on the right. Let me try it :)",
      "parentUuid": "99a8345d_8702083b",
      "range": {
        "startLine": 809,
        "startChar": 0,
        "endLine": 810,
        "endChar": 45
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_e94ab175",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 820,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Please add comments around this.",
      "range": {
        "startLine": 812,
        "startChar": 0,
        "endLine": 820,
        "endChar": 38
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59d23ce8_60d1f0c4",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 820,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9ae2c65_e94ab175",
      "range": {
        "startLine": 812,
        "startChar": 0,
        "endLine": 820,
        "endChar": 38
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_e991515b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 904,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "This comes a bit late. How about making this comment a top-level one?",
      "range": {
        "startLine": 904,
        "startChar": 0,
        "endLine": 904,
        "endChar": 49
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d588cf_e83dc59b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 904,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "I\u0027ll move it before the very first mention of deopt-based loop bce to set the context earlier.",
      "parentUuid": "d9ae2c65_e991515b",
      "range": {
        "startLine": 904,
        "startChar": 0,
        "endLine": 904,
        "endChar": 49
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_8719a8ac",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 941,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "a legal",
      "range": {
        "startLine": 941,
        "startChar": 68,
        "endLine": 941,
        "endChar": 73
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ae2c65_8058aa5c",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 941,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99a8345d_8719a8ac",
      "range": {
        "startLine": 941,
        "startChar": 68,
        "endLine": 941,
        "endChar": 73
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_a7162478",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1287,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Nit: one per line?",
      "range": {
        "startLine": 1287,
        "startChar": 41,
        "endLine": 1287,
        "endChar": 76
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d588cf_486ad113",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1287,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99a8345d_a7162478",
      "range": {
        "startLine": 1287,
        "startChar": 41,
        "endLine": 1287,
        "endChar": 76
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a8345d_4753b040",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1292,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Please add comments.",
      "range": {
        "startLine": 1291,
        "startChar": 0,
        "endLine": 1292,
        "endChar": 44
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d588cf_480651d3",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1292,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99a8345d_4753b040",
      "range": {
        "startLine": 1291,
        "startChar": 0,
        "endLine": 1292,
        "endChar": 44
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a97860_a816f377",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1725,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-02T11:32:30Z",
      "side": 1,
      "message": "Instead of making this a state, it might make sense for this pass to control the iteration over the blocks.",
      "range": {
        "startLine": 1721,
        "startChar": 0,
        "endLine": 1725,
        "endChar": 35
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d588cf_933a2ef8",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1725,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-04T20:14:38Z",
      "side": 1,
      "message": "GetReversePostOrder() is read only and returns constant so it\u0027s kind of difficult to control it myself. I\u0027ll just leave it this way.",
      "parentUuid": "b9a97860_a816f377",
      "range": {
        "startLine": 1721,
        "startChar": 0,
        "endLine": 1725,
        "endChar": 35
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9cfb89d_156454c1",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1725,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-06-08T08:59:42Z",
      "side": 1,
      "message": "What I meant was adding a method that would do the same as the HGraphVisitor when iterating over the graph, but move these two fields into local variables in that method.",
      "parentUuid": "39d588cf_933a2ef8",
      "range": {
        "startLine": 1721,
        "startChar": 0,
        "endLine": 1725,
        "endChar": 35
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f94050d5_c5dc0e58",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 1725,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-06-10T14:32:24Z",
      "side": 1,
      "message": "Done. initial_block_size_ is still needed. I added a IsAddedBlock() method.",
      "parentUuid": "b9cfb89d_156454c1",
      "range": {
        "startLine": 1721,
        "startChar": 0,
        "endLine": 1725,
        "endChar": 35
      },
      "revId": "843b7602c12d5410a5dcc0f0e2fc246435df0cd6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}