{
  "comments": [
    {
      "key": {
        "uuid": "a48dbaf4_e0ebc2b1",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 578,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-08T10:15:06Z",
      "side": 1,
      "message": "When does it actually matter what type a move is? Don\u0027t you reference the same register, whether you\u0027re an X or W? (or S and D?)",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_1fc5e31b",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 578,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Thinking about it now, the type is actually only useful when moving from a constant or between two (core of fp) registers. We have 32bit move instructions that are preferable to the 64bit variants. In other situations the Locations will contain all the information we need.\n\nThis function was required in this patch because `MoveLocation()` was built to require the type as an argument to use 32bit moves when possible. I think this was when there was no FP support yet, and before this the type was always available. So now we could make that argument optional. If that\u0027s ok with you I\u0027ll look at refactoring that in another patch.",
      "parentUuid": "a48dbaf4_e0ebc2b1",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_df877ba1",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 578,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-08T13:41:31Z",
      "side": 1,
      "message": "Why are 32bits moves preferables to 64bits?\n\nShould we have a bit in Location telling whether you should use 32bits?",
      "parentUuid": "84927610_1fc5e31b",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_5f1a8be2",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 578,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T14:29:39Z",
      "side": 1,
      "message": "TLDR:\n- 32bit moves should be better for power consumption.\n- I\u0027m not sure about the \u0027bit\u0027 solution.\n\n(Diving in, take what you need from the comments!)\n\n32bit moves should be better at least for power consumption, and maybe for other things. I don\u0027t know/remember the details, but the rule of thumb is that we prefer using a 32bit regs if 64bit is not required. So 64bit moves are not very bad, but 32bit moves would be nice.\n\nI am trying to see how having a bit to indicate whether we need a 32bit or 64bit move would work.\nIf that has to be specified manually, then we can only benefit from it in manually generated moves.\nIf we want the register allocator to be able to do this, doesn\u0027t Location needs to be extended with some type information?\nI touched this topic earlier when we met in London. If we were to add more information in the Location, wouldn\u0027t embedding the primitive type be more appropriate than a single 32/64 bit? After all, an other architecture could use 16bit, 32bit, and 64bit regs and could prefer 16bit moves.\nIn earlier work for arm64 I embedded the type into Locations so I could directly convert a Location to a W or X arm64 register (or other); it was working fine.\nHowever as you noted at the time this would need some thinking about how this fits in the more general structure. A few points I am thinking of immediately:\n1) Where is the \u0027source of truth\u0027 for the type of an IR? The result location or the IR GetType()?\n2) Would that require introducing type information in the register allocator? If so is that a good idea?\n3) Are we thinking of using a Location with multiple types (eg. a shared stack slot for temporaries)?\n4) By embedding the type we may be able to get rid of StackSlot vs DoubleStackSlot. Maybe we can even optimise further stack slots for smaller types?\n\nOn a related topic, there are other things that we would eventually like to optimise in the parallel move resolver. For example ARM64 provides \u0027Load pair\u0027 and \u0027Store pair\u0027 instructions, so ideally we\u0027d like to be able to \u0027merge\u0027 parallel moves to use those. That\u0027s likely something to discuss later.",
      "parentUuid": "84927610_df877ba1",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_fe3cc105",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 578,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-12-08T15:42:22Z",
      "side": 1,
      "message": "it would be interesting to see some numbers if any are available (i.e. how much do you save?).",
      "parentUuid": "84927610_5f1a8be2",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_61cb30b4",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 580,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-12-08T15:42:22Z",
      "side": 1,
      "message": "nit: i\u0027d prefer to have this at the top. I find it hard to read cause || implies to me that both can be valid...\n\nMaybe you could use xor? might also help you simplify other if(...) {DCHECK()...} patterns.",
      "range": {
        "startLine": 580,
        "startChar": 4,
        "endLine": 580,
        "endChar": 56
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_be5f196a",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 594,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-12-08T15:42:22Z",
      "side": 1,
      "message": "nit: just a matter of preference but I think most of the code in art uses is_reg1/loc1 etc... style. For me loc1 reads better but I don\u0027t really care.",
      "range": {
        "startLine": 594,
        "startChar": 7,
        "endLine": 594,
        "endChar": 15
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffad7dfd_7287f86f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 610,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-05T16:18:29Z",
      "side": 1,
      "message": "Nit: extra `.\u0027.",
      "range": {
        "startLine": 610,
        "startChar": 37,
        "endLine": 610,
        "endChar": 38
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_3fca272d",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 610,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "ffad7dfd_7287f86f",
      "range": {
        "startLine": 610,
        "startChar": 37,
        "endLine": 610,
        "endChar": 38
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f133113_b31cd8d6",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 614,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-05T16:18:29Z",
      "side": 1,
      "message": "Shouldn\u0027t we add a DCHECK for that?",
      "range": {
        "startLine": 614,
        "startChar": 5,
        "endLine": 614,
        "endChar": 41
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_dfce9b3f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 614,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "We can. Done.",
      "parentUuid": "1f133113_b31cd8d6",
      "range": {
        "startLine": 614,
        "startChar": 5,
        "endLine": 614,
        "endChar": 41
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_5e4cd5c2",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 889,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-12-08T15:42:22Z",
      "side": 1,
      "message": "prefer 2 DCHECKS. In case of error it will better reveal the culprit.",
      "range": {
        "startLine": 889,
        "startChar": 2,
        "endLine": 889,
        "endChar": 52
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_7e519159",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 905,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-12-08T15:42:22Z",
      "side": 1,
      "message": "does it worth using the xor \"trick\" and remove the need for a temp?\n\n(x \u003d x^y, y \u003d x^y, x \u003d x^y)",
      "range": {
        "startLine": 905,
        "startChar": 4,
        "endLine": 905,
        "endChar": 47
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f133113_f3cf70e8",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 936,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-05T16:18:29Z",
      "side": 1,
      "message": "Shouldn\u0027t `loc_2` and `loc_1\u0027 be swapped in those lines?",
      "range": {
        "startLine": 935,
        "startChar": 4,
        "endLine": 936,
        "endChar": 46
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a48dbaf4_40caae2d",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 936,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "1f133113_f3cf70e8",
      "range": {
        "startLine": 935,
        "startChar": 4,
        "endLine": 936,
        "endChar": 46
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfb2795b_5432a211",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1543,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-05T16:18:29Z",
      "side": 1,
      "message": "Is there any reason why you kept this empty `else\u0027 statement?",
      "range": {
        "startLine": 1541,
        "startChar": 6,
        "endLine": 1543,
        "endChar": 5
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_5ef8558c",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1543,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-08T10:15:06Z",
      "side": 1,
      "message": "The comment is a good enough reason for me :). though it could be improved.",
      "parentUuid": "dfb2795b_5432a211",
      "range": {
        "startLine": 1541,
        "startChar": 6,
        "endLine": 1543,
        "endChar": 5
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_5e5cd5f4",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1543,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Detailed the comment.",
      "parentUuid": "64974203_5ef8558c",
      "range": {
        "startLine": 1541,
        "startChar": 6,
        "endLine": 1543,
        "endChar": 5
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_bfe2b7d1",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2137,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-08T10:15:06Z",
      "side": 1,
      "message": "Trend is to put ATTRIBUTE_UNUSED on the parameter instead.",
      "range": {
        "startLine": 2137,
        "startChar": 2,
        "endLine": 2137,
        "endChar": 8
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_7e6191a3",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2137,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84927610_bfe2b7d1",
      "range": {
        "startLine": 2137,
        "startChar": 2,
        "endLine": 2137,
        "endChar": 8
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_7fac2f7e",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-08T10:15:06Z",
      "side": 1,
      "message": "Remove virtual (here and below).",
      "range": {
        "startLine": 147,
        "startChar": 2,
        "endLine": 147,
        "endChar": 9
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a48dbaf4_e0ce623f",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84927610_7fac2f7e",
      "range": {
        "startLine": 147,
        "startChar": 2,
        "endLine": 147,
        "endChar": 9
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffad7dfd_72a8981a",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-05T16:18:29Z",
      "side": 1,
      "message": "Nit: put each Boolean statement on its own line (either break a line before or after \u0026\u0026).",
      "range": {
        "startLine": 72,
        "startChar": 10,
        "endLine": 73,
        "endChar": 65
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a48dbaf4_c0e23ed3",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-08T10:15:06Z",
      "side": 1,
      "message": "Actually, we can put a if (kX86_64 || kArm64) return true line 66, and make this loop not look at the instruction set.",
      "parentUuid": "ffad7dfd_72a8981a",
      "range": {
        "startLine": 72,
        "startChar": 10,
        "endLine": 73,
        "endChar": 65
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a48dbaf4_c0d55eca",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Fixed following Nicolas\u0027s suggestion.",
      "parentUuid": "a48dbaf4_c0e23ed3",
      "range": {
        "startLine": 72,
        "startChar": 10,
        "endLine": 73,
        "endChar": 65
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f133113_73f3607e",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-05T16:18:29Z",
      "side": 1,
      "message": "Likewise.",
      "range": {
        "startLine": 76,
        "startChar": 10,
        "endLine": 76,
        "endChar": 68
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_bfd5d7ca",
        "filename": "compiler/optimizing/register_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-08T13:34:50Z",
      "side": 1,
      "message": "Now moved to a previous test. See comment above.",
      "parentUuid": "1f133113_73f3607e",
      "range": {
        "startLine": 76,
        "startChar": 10,
        "endLine": 76,
        "endChar": 68
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffad7dfd_d2b8646d",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-12-05T16:18:29Z",
      "side": 1,
      "message": "Wow! Great job. :)",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 45
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64974203_7eed1149",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-12-08T15:42:22Z",
      "side": 1,
      "message": "btw, just a head up that I added REM_FLOAT tests to this list in https://android-review.googlesource.com/#/c/118233/ :)",
      "parentUuid": "ffad7dfd_d2b8646d",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 45
      },
      "revId": "15dc2660646905b0a75cf5700b0617e06bff386d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}