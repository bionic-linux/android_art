{
  "comments": [
    {
      "key": {
        "uuid": "8be1fa42_c930c2f7",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-14T01:02:48Z",
      "side": 1,
      "message": "ruhler, any comments on this? I wonder whether your planned work to make things correctly synchronize obviates the need for any of this (as we don\u0027t really care which zygote would create the boot image, as long as they don\u0027t collide doing it)...",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b7a6a68_96744c2b",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-09-14T07:47:35Z",
      "side": 1,
      "message": "What are the symptoms this CL is trying to resolve?\n\nMy \"planned\" work for b/30971238 regards the case when there are two zygotes both with permission to generate the boot image. But in this case, it sounds like the unprivileged zygote would not have permission to create the boot image in the first place? In that case, we don\u0027t have same \"race to generate\" issue as described in b/30971238.\n\nI assume the symptoms this CL is trying to resolve is that without root permissions you get logcat messages that suggest something went wrong, either due to permissions issues or selinux denials. The goal is not to cause misleading logcat messages, right?\n\nLooking through the code, it appears to me the IsZygote flag is used for 3 different reasons:\n1. To indicate that processes will be forked from this process, so it is not acceptable to create any threads.\n2. To indicate what level of permissions this process has, so it can avoid performing actions that it knows would fail and lead to misleading log messages.\n3. Andreas\u0027s hack to address the \"race to generate\" issue.\n\nI think \"zygote-privileged\" and \"zygote-unprivileged\" flags are decent ways to indicate and distinguish between (1) and (2). Alternatively it may be useful to reorganize the flags into separate \"zygote\" and \"privileged\" flags, which allow for the option of a privileged non-zygote process that could make sense for test cases. I\u0027m not sure.\n\nRegardless of what flags are used, I would like to see them clearly documented so the meaning and intention of the flags are well defined.",
      "parentUuid": "8be1fa42_c930c2f7",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30423f4d_12c98a6c",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-09-19T17:12:19Z",
      "side": 1,
      "message": "\u003e What are the symptoms this CL is trying to resolve?\n \u003e \n \u003e My \"planned\" work for b/30971238 regards the case when there are two zygotes both with permission to generate the boot image. But in this case, it sounds like the unprivileged zygote would not have permission to create the boot image in the first place? In that case, we don\u0027t have same \"race to generate\" issue as described in b/30971238.\n \u003e \n \u003e I assume the symptoms this CL is trying to resolve is that without root permissions you get logcat messages that suggest something went wrong, either due to permissions issues or selinux denials. The goal is not to cause misleading logcat messages, right?\n\nWe are introducing a new zygote process type for creating WebView renderers. Since it\u0027s going to be a specialization of the system zygote, it doesn\u0027t need to write the boot marker or have direct write access to the Dalvik cache. The runtime in some cases choses to abort if it doesn\u0027t have permission to do certain privileged operations, so we\u0027re adding this flag to skip privileged ops.\n\nI\u0027m not too familiar with b/30971238 so I can\u0027t comment on that (your #3 below).\n\n \u003e Looking through the code, it appears to me the IsZygote flag is used for 3 different reasons:\n \u003e 1. To indicate that processes will be forked from this process, so it is not acceptable to create any threads.\n \u003e 2. To indicate what level of permissions this process has, so it can avoid performing actions that it knows would fail and lead to misleading log messages.\n \u003e 3. Andreas\u0027s hack to address the \"race to generate\" issue.\n \u003e \n \u003e I think \"zygote-privileged\" and \"zygote-unprivileged\" flags are decent ways to indicate and distinguish between (1) and (2). Alternatively it may be useful to reorganize the flags into separate \"zygote\" and \"privileged\" flags, which allow for the option of a privileged non-zygote process that could make sense for test cases. I\u0027m not sure.\n\nThe first version of the patch set did your latter suggestion, but per review advice I\u0027ve switched it to the former to make things more explicit. I don\u0027t have a preference so will defer to you all.\n\n \u003e Regardless of what flags are used, I would like to see them clearly documented so the meaning and intention of the flags are well defined.\n\nI left documentation around the member variables in runtime.h. Is there another place you\u0027d like this to be documented?",
      "parentUuid": "0b7a6a68_96744c2b",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb1db24e_ac554eed",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-19T17:48:43Z",
      "side": 1,
      "message": "But what are these \"privileged operations?\" Right now it\u0027s boot image creation only. Are there other things that are not in this CL (it would be *highly* relevant for the design)?\n\nThe question then is: why and how is it not allowed to create the boot image? If it\u0027s on an ACL/selinux basis, why do we need to track this ourselves? Is that really just to suppress the messages?\n\nIf the webview zygote is actually root and technically has rights to write, then Richard\u0027s work becomes relevant. At that point the question would be: why do we have to restrict which zygote writes the boot image, if there\u0027s no observable difference in the end (when things are correctly \"synchronized\")?",
      "parentUuid": "30423f4d_12c98a6c",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30423f4d_182c09a0",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-09-19T18:54:33Z",
      "side": 1,
      "message": "\u003e But what are these \"privileged operations?\" Right now it\u0027s boot image creation only. Are there other things that are not in this CL (it would be *highly* relevant for the design)?\n\nThere were three separate operations that the webview zygote didn\u0027t have access to perform:\n1) The unshare and remount operations that I recently moved out of art/ into frameworks/base/. This caused a runtime abort.\n2) Writing to the dalvik-cache as part of RelocateImage(). This causes SELinux denials to be printed.\n3) Attempting to write the boot marker. This just fails with an EPERM error.\n\n1 and 3 are because the webview zygote is non-root, and 2 is because it runs in a different SELinux domain.\n\n \u003e The question then is: why and how is it not allowed to create the boot image? If it\u0027s on an ACL/selinux basis, why do we need to track this ourselves? Is that really just to suppress the messages?\n\nNow that the code that led to fatal errors has been moved out of art/ (per #1 above), this is just to suppress the messages (both the SELinux denials and logcat). Android Security I believe prefer to not have known-ignored SELinux denial messages, since they obscure real problems, so I do think it\u0027s worth finding a way to suppress that.\n\nMaybe it\u0027s possible to come up with a smaller change that short-circuits ImageCreationAllowed() in a different manner?\n\n \u003e If the webview zygote is actually root and technically has rights to write, then Richard\u0027s work becomes relevant. At that point the question would be: why do we have to restrict which zygote writes the boot image, if there\u0027s no observable difference in the end (when things are correctly \"synchronized\")?\n\nWebview zygote is deliberately non-root and runs in a different SELinux context than the main zygote. For security reasons, we don\u0027t want the webview zygote to be able to write the boot image. (More details about the security architecture are here: https://docs.google.com/document/d/17PWlC5MPBw_PbmvWkH44blJ-lQQ_tT6v0FxSjk4v0oE/edit).",
      "parentUuid": "cb1db24e_ac554eed",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "305b1f41_8a72ebd6",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-09-20T07:13:36Z",
      "side": 1,
      "message": "Just to double check: do you need to use a zygote flag at all for the Webview zygote? What goes wrong if you don\u0027t pass --zygote?\n\nI would like to see more detailed documentation for the flags in parsed_options.cc ParsedOptions::Usage that shows up when you run dalvikvm -help, for example.",
      "parentUuid": "30423f4d_182c09a0",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30423f4d_c327b6d2",
        "filename": "runtime/gc/space/image_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-09-20T14:36:41Z",
      "side": 1,
      "message": "Yes, we do need to pass the -Xzygote flag, otherwise Runtime::Start() calls InitNonZygoteOrPostFork(), which starts threads and makes forking unsafe.",
      "parentUuid": "305b1f41_8a72ebd6",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8be1fa42_02e8caa5",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-13T18:33:03Z",
      "side": 1,
      "message": "Would it make sense to make this more explicit? Have -Xprivileged-zygote and -Xunprivileged-zygote?",
      "range": {
        "startLine": 69,
        "startChar": 7,
        "endLine": 70,
        "endChar": 29
      },
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b1462d4_9b3f4f75",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-09-13T19:53:27Z",
      "side": 1,
      "message": "When writing this, I was thinking -Xzygote\u003d\u003cprivileged|unprivileged\u003e. Do you have a preference?",
      "parentUuid": "8be1fa42_02e8caa5",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8be1fa42_a8ed7ff1",
        "filename": "runtime/parsed_options.cc",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-13T20:46:14Z",
      "side": 1,
      "message": "Seems fine to me, though parsing would be harder, I think. You\u0027d have to write a type for it.",
      "parentUuid": "4b1462d4_9b3f4f75",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8be1fa42_e29a0660",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 724,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-13T18:30:11Z",
      "side": 1,
      "message": "I was discussing with bdc a couple weeks ago. Why is any of this here? Can we move this to frameworks code? Then we might not need the flag here.",
      "range": {
        "startLine": 684,
        "startChar": 0,
        "endLine": 724,
        "endChar": 1
      },
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b1462d4_fb23eb69",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 724,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-09-13T19:53:27Z",
      "side": 1,
      "message": "I think so. It looks like it could move to com_android_internal_os_Zygote_nativeUnmountStorageOnInit. This code was originally added here: https://android.googlesource.com/platform/art/+/bd86bccf1b47f1151842152ee52cf5d46d6b34ab%5E%21/#F12 from dalvik_system_Zygote.cc. And that file looks like it became com_android_internal_os_Zygote.cpp in frameworks.",
      "parentUuid": "8be1fa42_e29a0660",
      "revId": "cb811a45c540c9835f296eb9f8e41c1b31af9e00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}