{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "86b7590b_92ad4a21",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-18T12:54:03Z",
      "side": 0,
      "message": "Dropping this makes `ADexFile_create` reject cdex files with `ADEXFILE_ERROR_INVALID_HEADER`, which causes some simpleperf tests to [fail](http://android-build/test_investigate/invocation/I58800010317282283/test/TR68329447776166796/?blocking\u003dblocking\u0026status\u003dnone), which is due to `testdata/base.vdex` containing cdex.\n\n@yabinc@google.com, you added it [here](https://r.android.com/664058). Is the intention to test cdex?\n\nDo we have any compat considerations to take into account that require us to continue supporting cdex files to some extent? The ART runtime can no longer load them to actually execute anything.",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "583e0280_bee66916",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2024-09-18T16:05:23Z",
      "side": 0,
      "message": "Yes, simpleperf releases static executables in Android NDK and Studio, which can run on older Android versions. I want to keep its ability to collect Java symbols on somewhat old Android versions (at most back to Q). What\u0027s the oldest Android version are supposed to stop using cdex?",
      "parentUuid": "86b7590b_92ad4a21",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e66f4f4e_16d6016f",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-19T22:10:36Z",
      "side": 0,
      "message": "We dropped the runtime support in VIC, or more precisely in the M-2024-03 Mainline rollout.\n\nSo then I take it you want us to keep everything unwind-related around for quite some time then? That\u0027s probably most of the stuff I was hoping to clean up here.\n\nWhat\u0027s the user journey when the static NDK binary reads vdex files containing cdex? Is it on host or device?",
      "parentUuid": "583e0280_bee66916",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0194e6d6_7722387c",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-09-20T13:00:55Z",
      "side": 0,
      "message": "I wonder if we could move the compact_dex subclass into simpleperf (and possibly remove large part of it).\n\nAlternatively, I wonder what is the minimal code needed to get method names from both standard and compact dex (i.e. make that part of simpleperf independent of ART code base).",
      "parentUuid": "e66f4f4e_16d6016f",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07dae7d4_76346dc0",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2024-09-23T16:58:29Z",
      "side": 0,
      "message": "The user journey is: user (can be Android Studio) adb pushes simpleperf static binary on device, then collects samples for an app. At the end of collection, simpleperf static binary reads vdex files containing cdex for symbols touched by the samples, and puts symbols in the recording file. The symbol reading happens on device.\nI am also happy of keeping the code reading symbols from cdex files in simpleperf, if you really want to clean it up in ART.",
      "parentUuid": "0194e6d6_7722387c",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6c3cb26_de4a0f8a",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-23T17:25:08Z",
      "side": 0,
      "message": "On S+ it\u0027d be better to load libdexfile.so on device and use its stable ABI, because that\u0027s guaranteed to be in sync with the vdex\u0027es. If you need to be compatible with R- (i.e. before it had a stable ABI) then it\u0027d require keeping cdex compat around, either in ART or in simpleperf.\n\nThe benefit of linking against libdexfile.so on device is that it\u0027ll keep working regardless what we do in the future. If we fork off a cdex-aware lib somewhere then sooner or later it\u0027ll need to live alongside a new lib that supports the latest dex features, and you\u0027ll have to include both (or more) versions into simpleperf and call into the right one depending on the platform version.\n\nLinking libdexfile dynamically means changing the binary to not be entirely static, so it has implications.",
      "parentUuid": "07dae7d4_76346dc0",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c5f7e3e_b5501ede",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2024-09-23T17:47:02Z",
      "side": 0,
      "message": "The support of cdex doesn\u0027t need to kept forever, but I want to keep the ability of profiling on at least 2-3 years old devices.\nI guess it would be pretty hard to build a non-static simpleperf binary in AOSP and run it on older Android versions. Especially considering both simpleperf and libdexfile.so link a bunch of other libraries.",
      "parentUuid": "d6c3cb26_de4a0f8a",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33b715f7_0387cf90",
        "filename": "libdexfile/external/dex_file_ext.cc",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-23T17:59:47Z",
      "side": 0,
      "message": "\u003e but I want to keep the ability of profiling on at least 2-3 years old devices.\n\nThen you\u0027re fine with dropping compat for R and older? That\u0027d certainly make it simpler.\n\n\u003e I guess it would be pretty hard to build a non-static simpleperf binary in AOSP and run it on older Android versions. Especially considering both simpleperf and libdexfile.so link a bunch of other libraries.\n\nLinker namespaces and linkerconfig should handle that - it\u0027s been there since the early days of Mainline and we already rely heavily on it for dynamic linking with updated Mainline modules. In that aspect it\u0027d actually work better since it avoids potential [symbol conflicts](http://b/169885605).\n\nOr is there some other issue I\u0027m missing here?",
      "parentUuid": "5c5f7e3e_b5501ede",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 55
      },
      "revId": "3905813c7f87a08337d84e7b137317f216332932",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}