{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5f3bbbe6_1ac0e8d1",
        "filename": "runtime/jni/jni_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-10-31T09:40:03Z",
      "side": 1,
      "message": "Maybe we should add `|| LIKELY(!art_method-\u003eIsCopied())` here for performance because `ArtMethod::GetCanonicalMethod()` is not `inline`. See also `Canonicalize(ReflectiveHandle\u003cArtMethod\u003e t)` in `jni_id_manager.cc`.",
      "range": {
        "startLine": 131,
        "startChar": 34,
        "endLine": 131,
        "endChar": 35
      },
      "revId": "d017a357a036a6fd8432cb2ca4c211580ac41848",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16ba5589_35d8f1af",
        "filename": "runtime/jni/jni_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-10-31T13:29:12Z",
      "side": 1,
      "message": "I just found out that there are `CallNonvirtual\u003ctype\u003eMethod{,A,V}()` methods in the JNI interface. If we find a default conflict method, the canonical method is simply one of the conflicting methods. So, `CallNonvirtual\u003ctype\u003eMethod{,A,V}()` with the canonicalization shall simply execute that method, without the canonicalization it would throw ICCE.",
      "range": {
        "startLine": 134,
        "startChar": 51,
        "endLine": 134,
        "endChar": 69
      },
      "revId": "d017a357a036a6fd8432cb2ca4c211580ac41848",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4833875d_3c3a2e2a",
        "filename": "runtime/jni/jni_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2022-10-31T14:43:49Z",
      "side": 1,
      "message": "So, should we check for such cases and not canonicalize in such cases? Though we already canonicalize if we use --opaque-jni-ids. So I guess this is already a problem there? Should we also fix that one?",
      "parentUuid": "16ba5589_35d8f1af",
      "range": {
        "startLine": 134,
        "startChar": 51,
        "endLine": 134,
        "endChar": 69
      },
      "revId": "d017a357a036a6fd8432cb2ca4c211580ac41848",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5978cc0_138b7f82",
        "filename": "runtime/jni/jni_internal.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-10-31T16:39:01Z",
      "side": 1,
      "message": "I don\u0027t know. The JNI spec is not exactly detailed. We could check the RI behavior if we try to find and call a conflict method via JNI.",
      "parentUuid": "4833875d_3c3a2e2a",
      "range": {
        "startLine": 134,
        "startChar": 51,
        "endLine": 134,
        "endChar": 69
      },
      "revId": "d017a357a036a6fd8432cb2ca4c211580ac41848",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}