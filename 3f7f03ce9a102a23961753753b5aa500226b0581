{
  "comments": [
    {
      "key": {
        "uuid": "c54be3fb_1bca5b9a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-09-27T20:33:15Z",
      "side": 1,
      "message": "Why is DisallowThreadSuspension not good enough? If we already do a pass over all the places where we have mirror::Object* pointers lying around, we could instead just use DisallowThreadSuspension?",
      "range": {
        "startLine": 9,
        "startChar": 52,
        "endLine": 10,
        "endChar": 60
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5c1c7c3_a4bac28b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T20:36:45Z",
      "side": 1,
      "message": "Too hard to put DisallowThreadSuspension at all the right places. Ideally we would have better static analysis support.",
      "parentUuid": "c54be3fb_1bca5b9a",
      "range": {
        "startLine": 9,
        "startChar": 52,
        "endLine": 10,
        "endChar": 60
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c54be3fb_fb4f6f34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-09-27T20:40:02Z",
      "side": 1,
      "message": "How about a combination of handles and DisallowThreadSuspension? Why would that be harder than replacing all (?) mirror::Object with ObjPtr? Do you have some examples in mind?\n\nDon\u0027t get me wrong, I like the idea of better protection mechanism, but having too many can lead to confusion about what to use.",
      "parentUuid": "e5c1c7c3_a4bac28b",
      "range": {
        "startLine": 9,
        "startChar": 52,
        "endLine": 10,
        "endChar": 60
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5c1c7c3_84318611",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T20:47:40Z",
      "side": 1,
      "message": "Don\u0027t worry I will convert everything over eventually soon maybe. The main issue I have is that it would require DisallowThreadSuspension in almost every block and it would be hard to reason about the callee / caller relationship.",
      "parentUuid": "c54be3fb_fb4f6f34",
      "range": {
        "startLine": 9,
        "startChar": 52,
        "endLine": 10,
        "endChar": 60
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c54be3fb_5b5f83e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-09-27T20:54:48Z",
      "side": 1,
      "message": "OK, I\u0027ll trust you can give us a consistent story :)\n\nCan that story be:\n1) Never use mirror::Object*\n2) Use ObjPtr in places that are performance sensitive, and have no suspension.\n3) Use Handles in all other situations\n\n?",
      "parentUuid": "e5c1c7c3_84318611",
      "range": {
        "startLine": 9,
        "startChar": 52,
        "endLine": 10,
        "endChar": 60
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "051b3b2a_157ad4c0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2381,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-09-27T14:16:24Z",
      "side": 1,
      "message": "Please comment why here.",
      "range": {
        "startLine": 2381,
        "startChar": 0,
        "endLine": 2381,
        "endChar": 31
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_47691288",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2381,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T16:53:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "051b3b2a_157ad4c0",
      "range": {
        "startLine": 2381,
        "startChar": 0,
        "endLine": 2381,
        "endChar": 31
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_02a418b4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2381,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-27T17:58:19Z",
      "side": 1,
      "message": "Is there a way to cover all suspend points by instrumenting in a few well-defined points like, for example, CheckSuspend(), TransitionFromRunnableToSuspended() and the allocation path?",
      "parentUuid": "05d89b6b_47691288",
      "range": {
        "startLine": 2381,
        "startChar": 0,
        "endLine": 2381,
        "endChar": 31
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_76560161",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 2381,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T18:13:36Z",
      "side": 1,
      "message": "Not 100% since things like\n\nif (sometimes) {\nDoSuspension();\n}\nAccessStaleHandle();\n\nMight pass even though they are not correct. I\u0027ll try to put this at most places that could cause problems.",
      "parentUuid": "05d89b6b_02a418b4",
      "range": {
        "startLine": 2381,
        "startChar": 0,
        "endLine": 2381,
        "endChar": 31
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_a2fd449b",
        "filename": "runtime/mirror/obj_ptr.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-27T17:58:19Z",
      "side": 1,
      "message": "Comment on where a race condition happens?",
      "range": {
        "startLine": 32,
        "startChar": 31,
        "endLine": 32,
        "endChar": 51
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_3660792a",
        "filename": "runtime/mirror/obj_ptr.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T18:13:36Z",
      "side": 1,
      "message": "I think we only access from a single thread so it should be OK, maybe ill delete comment.",
      "parentUuid": "05d89b6b_a2fd449b",
      "range": {
        "startLine": 32,
        "startChar": 31,
        "endLine": 32,
        "endChar": 51
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_82348894",
        "filename": "runtime/mirror/obj_ptr.h",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-27T17:58:19Z",
      "side": 1,
      "message": "Maybe also print the pointer value as well?",
      "range": {
        "startLine": 88,
        "startChar": 47,
        "endLine": 88,
        "endChar": 48
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_f6bf917a",
        "filename": "runtime/mirror/obj_ptr.h",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T18:13:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05d89b6b_82348894",
      "range": {
        "startLine": 88,
        "startChar": 47,
        "endLine": 88,
        "endChar": 48
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c54be3fb_9b366b05",
        "filename": "runtime/thread-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-09-27T14:16:24Z",
      "side": 1,
      "message": "And put parts of the commit message here.",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_6783ee3e",
        "filename": "runtime/thread-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T16:53:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c54be3fb_9b366b05",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_62e75cfe",
        "filename": "runtime/thread-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-27T17:58:19Z",
      "side": 1,
      "message": "Move this into CheckSuspend()?",
      "parentUuid": "05d89b6b_6783ee3e",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_b65fc915",
        "filename": "runtime/thread-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T18:15:23Z",
      "side": 1,
      "message": "AllowThreadSuspension is not called often enough to cause performance problems. I\u0027d rather leave it here have poisoning happen each time AllowThreadSuspension is called.",
      "parentUuid": "05d89b6b_62e75cfe",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_36d3d9f7",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 480,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-27T17:58:19Z",
      "side": 1,
      "message": "Is there a way to turn this into a no-op (no overhead) in a non-debug build?",
      "range": {
        "startLine": 474,
        "startChar": 0,
        "endLine": 480,
        "endChar": 3
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_f68d51e6",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 480,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T18:13:36Z",
      "side": 1,
      "message": "The test relies on it and I did not disable it for NDEBUG. The current callers are common enough to cause performance problems. For object allocation I will guard it behind kIsDebugBuild.",
      "parentUuid": "05d89b6b_36d3d9f7",
      "range": {
        "startLine": 474,
        "startChar": 0,
        "endLine": 480,
        "endChar": 3
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_c2cf307c",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 1539,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-27T17:58:19Z",
      "side": 1,
      "message": "Why not put this in the packed struct? And how is the cross compilation no-access enforced?",
      "range": {
        "startLine": 1539,
        "startChar": 47,
        "endLine": 1539,
        "endChar": 89
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d89b6b_56f0a555",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 1539,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-27T18:13:36Z",
      "side": 1,
      "message": "Putting stuff in packed struct can change offsets and require more changes. Only things that are access from compiled code / entrypoints should be there IMO.",
      "parentUuid": "05d89b6b_c2cf307c",
      "range": {
        "startLine": 1539,
        "startChar": 47,
        "endLine": 1539,
        "endChar": 89
      },
      "revId": "3f7f03ce9a102a23961753753b5aa500226b0581",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}