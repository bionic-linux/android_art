{
  "comments": [
    {
      "key": {
        "uuid": "c2bbb59e_ea2b87c3",
        "filename": "runtime/debugger.cc",
        "patchSetId": 3
      },
      "lineNbr": 585,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-19T12:18:30Z",
      "side": 1,
      "message": "One per line.",
      "range": {
        "startLine": 584,
        "startChar": 10,
        "endLine": 585,
        "endChar": 45
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82dc5dfe_76c4685e",
        "filename": "runtime/debugger.cc",
        "patchSetId": 3
      },
      "lineNbr": 585,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-02-19T17:34:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2bbb59e_ea2b87c3",
      "range": {
        "startLine": 584,
        "startChar": 10,
        "endLine": 585,
        "endChar": 45
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b881d5_9c2ea9d5",
        "filename": "runtime/debugger.cc",
        "patchSetId": 3
      },
      "lineNbr": 630,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2016-02-23T08:45:24Z",
      "side": 1,
      "message": "As Nicolas said, I think you need to do this every time a debugger connects. But you should also restore the compiled code when the debugger disconnects.",
      "range": {
        "startLine": 630,
        "startChar": 6,
        "endLine": 630,
        "endChar": 34
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2bd19cb_56079269",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2016-02-23T08:45:24Z",
      "side": 1,
      "message": "One per line",
      "range": {
        "startLine": 111,
        "startChar": 9,
        "endLine": 111,
        "endChar": 57
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "421b45b8_a62ec6d4",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-19T12:18:30Z",
      "side": 1,
      "message": "This looks like the only thing interesting to keep in this method. I would remove everything else: don\u0027t bother updating the entrypoint, just expect the runtime to do the interpreter -\u003e jit transition.",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2d5e1d0_97e1cce6",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-02-19T17:34:14Z",
      "side": 1,
      "message": "Sorry can you be more specific? We need to install the entry-exit stub as wrapper around quick code. However if there is no quick code that can be used, I install the interpreter bridge (if entry-exit stub is installed, then seems to me there will be double instrumentation happening, one by the entry-exit stub and the other by interpreter).\n\nI also have a question on Instrumentation::UpdateMethodsCode(), which is called by jit to install jitted code in method. However when entry_exit_stubs_installed_ is true, GetQuickInstrumentationEntryPoint() is installed, not jitted code. The entry-exit stub will still call GetQuickCodeFor() to get the oat code to call, instead of the jitted code.",
      "parentUuid": "421b45b8_a62ec6d4",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c283b51b_8a456b91",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-22T09:46:00Z",
      "side": 1,
      "message": "How about we kill those entry-exit stubs and just rely on the interpreter? With mterp we should get enough performance benefits that I think we can afford it.",
      "parentUuid": "a2d5e1d0_97e1cce6",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2981592_564c1417",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-02-22T21:39:04Z",
      "side": 1,
      "message": "Method tracing and debugger on at the same time should be extremely rare. Even when that happens it should be fine some debuggability is reduced. I think we should keep the entry-exit stubs for good method tracing performance.",
      "parentUuid": "c283b51b_8a456b91",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62b209f8_571f8cf2",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-22T22:51:50Z",
      "side": 1,
      "message": "Since JIT won\u0027t update the entry point (for now it\u0027s too risky to expose entry points that are not in an ArtMethod\u0027s entry point), we won\u0027t get performance under JIT anyway.\n\nActually, why do you need to change this method at all? To get \"accurate\" method tracing in the presence of inlining? I think that did not work even before, as Quick was inlining within the boot image.",
      "parentUuid": "c2981592_564c1417",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62a5a9c6_94fa9223",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-02-22T23:06:18Z",
      "side": 1,
      "message": "I just try to handle the situation that when both method tracing and debugger are on, use interpreter for boot image code. Otherwise, just use the entry-exit stub as was done before.",
      "parentUuid": "62b209f8_571f8cf2",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82affd8e_d8958d68",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 793,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-22T22:51:50Z",
      "side": 1,
      "message": "Why? This is an \"undeoptimize operation\", why can\u0027t you restore the AOT code?",
      "range": {
        "startLine": 791,
        "startChar": 2,
        "endLine": 793,
        "endChar": 7
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2981592_5171bead",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 793,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-02-22T23:06:18Z",
      "side": 1,
      "message": "For the purpose of debugging framework code. NeedDebugVersionForBootImageCode() basically detects situations when boot image oat code shouldn\u0027t be used.",
      "parentUuid": "82affd8e_d8958d68",
      "range": {
        "startLine": 791,
        "startChar": 2,
        "endLine": 793,
        "endChar": 7
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2bd19cb_760c8e8b",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 3
      },
      "lineNbr": 793,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2016-02-23T08:45:24Z",
      "side": 1,
      "message": "Not sure about this either. When the debugger is about to disconnect, it undeoptimizes every method where a breakpoint is set (see Instrumentation::DisableDeoptimization).\n\nSo here, NeedDebugVersionForBootImageCode would still return true and you would not restore the compiled code.",
      "parentUuid": "c2981592_5171bead",
      "range": {
        "startLine": 791,
        "startChar": 2,
        "endLine": 793,
        "endChar": 7
      },
      "revId": "19241d8f4b27f77f4ddc6bb89414a77050d0f802",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}