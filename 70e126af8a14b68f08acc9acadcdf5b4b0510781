{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e1926213_a17b6ce3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-25T14:46:15Z",
      "side": 1,
      "message": "It seems I have misinterpreted TH data by calling the failure a flake. It was a pre-existing failure which does not look like a flake on closer inspection.",
      "revId": "70e126af8a14b68f08acc9acadcdf5b4b0510781",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20b42f22_09a1eff6",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 1096,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-25T14:33:10Z",
      "side": 1,
      "message": "Judging by DCHECK at line 1110 this cannot be nullptr, so I don\u0027t understand why you return tuple and not just a pointer.",
      "range": {
        "startLine": 1096,
        "startChar": 18,
        "endLine": 1096,
        "endChar": 34
      },
      "revId": "70e126af8a14b68f08acc9acadcdf5b4b0510781",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc98fe22_f6d23796",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 1096,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-25T14:46:15Z",
      "side": 1,
      "message": "I hope clang++ shall perform thorough jump threading after inlining with the tuple approach. I do not trust clang++ to assume that `\u0026fields-\u003eAt(mid)` cannot be null, so I would expect code without the tuple to perform unnecessary null checks.",
      "parentUuid": "20b42f22_09a1eff6",
      "range": {
        "startLine": 1096,
        "startChar": 18,
        "endLine": 1096,
        "endChar": 34
      },
      "revId": "70e126af8a14b68f08acc9acadcdf5b4b0510781",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0a81de4_e838def8",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 1096,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-25T15:40:40Z",
      "side": 1,
      "message": "TBH I still don\u0027t understand how the boolean component of the tuple helps clang++ to generate fewer checks. To clarify what I mean, I consider the code roughly equivalent to this (godbolt): https://godbolt.org/z/v4r1Eej1v\n\nTo me it seems that if you check the pointer the compiler knows as much or (likely) more about the pointer than if you check the accompanying boolean.",
      "parentUuid": "fc98fe22_f6d23796",
      "range": {
        "startLine": 1096,
        "startChar": 18,
        "endLine": 1096,
        "endChar": 34
      },
      "revId": "70e126af8a14b68f08acc9acadcdf5b4b0510781",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f17843a_72ae2112",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 1096,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-25T16:18:28Z",
      "side": 1,
      "message": "You need to consider that `ClassMemberBinarySearch` and `BinarySearch` are `ALWAYS_INLINE`. Every return from `BinarySearch` has a constant `success`, so the checks in `ClassMemberBinarySearch` can be statically resolved. Same for the checks of return value `success` in `FindFieldByNameAndType` and again in its callers. I would not expect that to make a difference in `FindDeclared{Instance,Static}Field` where we just return the field or null, but in `FindFieldImpl` clang++ should avoid some null checks by redirecting the code flow.",
      "parentUuid": "e0a81de4_e838def8",
      "range": {
        "startLine": 1096,
        "startChar": 18,
        "endLine": 1096,
        "endChar": 34
      },
      "revId": "70e126af8a14b68f08acc9acadcdf5b4b0510781",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}