{
  "comments": [
    {
      "key": {
        "uuid": "5a03994f_6b6fcb8e",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-06-26T13:30:39Z",
      "side": 1,
      "message": "size_t extra_index \u003d (bit_start_ + bit_offset + (bit_length - 1u)) / width;\n\nThat should be one less addition (after CSE) and no dependencies on `index` and `shift`.",
      "range": {
        "startLine": 126,
        "startChar": 24,
        "endLine": 126,
        "endChar": 66
      },
      "revId": "fb3447106e8267f92d3afa73da03c08bc3a4509d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbded51e_f0b5fc79",
        "filename": "libartbase/base/bit_memory_region.h",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-06-26T13:30:39Z",
      "side": 1,
      "message": "Improve the comments. The `\u0026 (width - 1)` is a no-op unless `shift \u003d\u003d 0` and in that case `value \u003d\u003d extra` (because of bit_length \u003c\u003d width causing the `value` and `extra` to be read from the same location) and therefore the `|` is value-preserving.\n\nI\u0027m wondering whether the compiler optimizes this for ARM64:\n\n  (width - shift) \u0026 (width - 1)  -\u003e  (-shift) \u0026 (width - 1)\n\nas the latter can be done in 2 instructions while the former needs three (no RSB on ARM64). But maybe there is enough stalls in the code above to materialize the constant `width` in register at no performance cost. OTOH, maybe rewriting it with the latter and rewriting comments to deal with `shift \u003d\u003d 0` and `shift !\u003d 0` separately would be better.",
      "range": {
        "startLine": 129,
        "startChar": 33,
        "endLine": 129,
        "endChar": 86
      },
      "revId": "fb3447106e8267f92d3afa73da03c08bc3a4509d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}