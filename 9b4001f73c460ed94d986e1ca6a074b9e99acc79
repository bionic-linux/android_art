{
  "comments": [
    {
      "key": {
        "uuid": "ab0ebe7a_09f88ddc",
        "filename": "runtime/gc/system_weak.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "Since it\u0027s a bit wordy, we could try to shorten the names like Allow, Disallow, Broadcast, Sweep and Wait, for example?",
      "range": {
        "startLine": 31,
        "startChar": 15,
        "endLine": 31,
        "endChar": 34
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_69c7810b",
        "filename": "runtime/gc/system_weak.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "This has to be public for annotations?",
      "range": {
        "startLine": 72,
        "startChar": 8,
        "endLine": 72,
        "endChar": 28
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_49cc452e",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "Can this be part of the SystemWeakHolder interface?",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 17
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_49e3a599",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "May not matter for this test, but do we want to lock allow_disallow_lock_ around this function like the existing ones?",
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_e92251b1",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "Regarding the synchronization around AddSystemWeakHolder():\n\n- I think a suspend-all isn\u0027t sufficient and it must be a ScopedGCCriticalSection because we could suspend all threads in the middle of a GC, which would break/race with GC\u0027s system weak handling. This is sort of like adding an app image space.\n\n- Do we want to support adding a new holder dynamically? Or, is it enough to (statically) add each to the runtime (that is, add at startup) as a need arises? An option is to leave some holders added at startup but empty when not in use. This would work around the synchronization issue.",
      "range": {
        "startLine": 87,
        "startChar": 24,
        "endLine": 87,
        "endChar": 43
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_69994124",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "Does this fail with the CC build because allow/disallow are called only if the read barrier is disabled.\n\nAlso fail with SS? I think the SS collector doesn\u0027t call these at all as it\u0027s not a concurrent collector?",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 104,
        "endChar": 35
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_897f5db2",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "Use IsNull()?",
      "range": {
        "startLine": 107,
        "startChar": 25,
        "endLine": 107,
        "endChar": 42
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_c98955d3",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "Same.",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 129,
        "endChar": 35
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_29b62993",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "IsNull()?",
      "range": {
        "startLine": 132,
        "startChar": 25,
        "endLine": 132,
        "endChar": 42
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_292c69a4",
        "filename": "runtime/gc/system_weak_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "If it\u0027s manageable, it might make sense to add a test that exercises WaitForAllowance. Maybe if it\u0027s possible to spawn a thread, one thread invoking GC in a loop and another accessing the weak in a loop? Or leave a TODO?",
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_497d6573",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 1721,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-09-09T18:54:46Z",
      "side": 1,
      "message": "I think we could try to convert the above four to the SystemWeakHolder style later, but it\u0027s also an option to leave them as is (at least for now), because some of them have some custom behavior, and focus here on the other/extended system weaks?",
      "range": {
        "startLine": 1717,
        "startChar": 0,
        "endLine": 1721,
        "endChar": 3
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ebe7a_e64d6090",
        "filename": "runtime/runtime.h",
        "patchSetId": 1
      },
      "lineNbr": 891,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-09-09T17:33:50Z",
      "side": 1,
      "message": "system_weak_holders_?",
      "range": {
        "startLine": 891,
        "startChar": 45,
        "endLine": 891,
        "endChar": 58
      },
      "revId": "9b4001f73c460ed94d986e1ca6a074b9e99acc79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}