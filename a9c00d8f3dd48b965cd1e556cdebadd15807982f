{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e796ef13_d955b8b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-08-11T16:38:20Z",
      "side": 1,
      "message": "I suggest you have a look at other places where `__GLIBC__` is tested and consider if they need to be adapted to MUSL too, to avoid discovering them one by one through bugs. In particular in art/runtime/gc/heap.cc there\u0027s very similar code to deal with mallinfo.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 44
      },
      "revId": "a9c00d8f3dd48b965cd1e556cdebadd15807982f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4692d6c4_f9b5cd3c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1980056
      },
      "writtenOn": "2023-08-14T13:37:16Z",
      "side": 1,
      "message": "Thanks for pointing it out, Martin.\n\n@vmarko@google.com I see similar `defined(__GLIC__)` condition in other art files, namely, `art/runtime/gc/heap.cc`, `art/runtime/thread.cc`, and `art/openjdkjvm/OpenjdkJvm.cc` without equivalent conditions for `ANDROID_HOST_MUSL`. Should I add the condition `defined(ANDROID_HOST_MUSL)` at all these places?",
      "parentUuid": "e796ef13_d955b8b1",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 44
      },
      "revId": "a9c00d8f3dd48b965cd1e556cdebadd15807982f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b2ce329_fcfc9ff3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-08-16T07:38:51Z",
      "side": 1,
      "message": "The `heap.cc` also deals with `mallinfo()`, so I guess we could enable that for MUSL. But it also has some workarounds for glibc, so we would need to investigate if MUSL needs those or not.\n\nThe `OpenJdkJvm.cc` seems to just wrap `strerror_r()` if available. I don\u0027t know know if MUSL defines that.\n\nI don\u0027t know if the workaround for glibc in `thread.cc` is needed for MUSL.",
      "parentUuid": "4692d6c4_f9b5cd3c",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 44
      },
      "revId": "a9c00d8f3dd48b965cd1e556cdebadd15807982f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0161357a_4090da45",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1980056
      },
      "writtenOn": "2023-08-16T14:52:23Z",
      "side": 1,
      "message": "I have added the condition `defined(ANDROID_HOST_MUSL)` in `heap.cc` at places which were not workarounds for glibc. \n\n`strerror_r()` in MUSL seems to have a different definition. I have thus left `OpenJdkJvm.cc`.\n\n@vmarko@google.com, I believe we can investigate and update the remaining ones later.",
      "parentUuid": "2b2ce329_fcfc9ff3",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 44
      },
      "revId": "a9c00d8f3dd48b965cd1e556cdebadd15807982f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d13e9ff7_5f2b20d2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-08-17T07:26:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0161357a_4090da45",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 44
      },
      "revId": "a9c00d8f3dd48b965cd1e556cdebadd15807982f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}