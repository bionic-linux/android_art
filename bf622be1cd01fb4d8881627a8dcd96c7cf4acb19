{
  "comments": [
    {
      "key": {
        "uuid": "706b9231_0f334870",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 3838,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-04-24T21:50:24Z",
      "side": 1,
      "message": "We shouldn\u0027t do this. Who knows what optimizations after BCE can do.",
      "range": {
        "startLine": 3838,
        "startChar": 6,
        "endLine": 3838,
        "endChar": 43
      },
      "revId": "bf622be1cd01fb4d8881627a8dcd96c7cf4acb19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d076fe11_97e90bb0",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 3838,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-04-24T21:54:40Z",
      "side": 1,
      "message": "You told me not to check for them both being constants because BCE fixed it.  \n\nDo you want me to make this an \u0027if\u0027 and not generate any code if it is in range?  Or should I just delete the DCHECK?",
      "parentUuid": "706b9231_0f334870",
      "range": {
        "startLine": 3838,
        "startChar": 6,
        "endLine": 3838,
        "endChar": 43
      },
      "revId": "bf622be1cd01fb4d8881627a8dcd96c7cf4acb19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "309d9a70_b2fb638c",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 3838,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-04-24T21:58:55Z",
      "side": 1,
      "message": "FYI: that DCHECK actually triggers when compiling core.",
      "parentUuid": "d076fe11_97e90bb0",
      "range": {
        "startLine": 3838,
        "startChar": 6,
        "endLine": 3838,
        "endChar": 43
      },
      "revId": "bf622be1cd01fb4d8881627a8dcd96c7cf4acb19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0d43e30_24da6566",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 3838,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-04-24T22:00:00Z",
      "side": 1,
      "message": "Disregard: hadn\u0027t synced over the other CL in that tree. :-(",
      "parentUuid": "309d9a70_b2fb638c",
      "range": {
        "startLine": 3838,
        "startChar": 6,
        "endLine": 3838,
        "endChar": 43
      },
      "revId": "bf622be1cd01fb4d8881627a8dcd96c7cf4acb19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "706b9231_6ff4bc04",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 3838,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-04-24T22:00:07Z",
      "side": 1,
      "message": "No, I didn\u0027t tell you not to check, I just mentioned that this feels like constant folding in the code generators. As if VisitAdd could also say input 0 can be constant and input1 can be constant. I know this is different, but it looks like it.\n\nI didn\u0027t disagree with your initial change, I actually did not realize you were trying to avoid generating a slow path :-).",
      "parentUuid": "d076fe11_97e90bb0",
      "range": {
        "startLine": 3838,
        "startChar": 6,
        "endLine": 3838,
        "endChar": 43
      },
      "revId": "bf622be1cd01fb4d8881627a8dcd96c7cf4acb19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d076fe11_d7a54380",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 3838,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-04-24T22:06:46Z",
      "side": 1,
      "message": "So what is the final decision?  Should I check and not call AddSlowPath if it is in range (with some code rearrangement)?  Or leave the DCHECK?",
      "parentUuid": "706b9231_6ff4bc04",
      "range": {
        "startLine": 3838,
        "startChar": 6,
        "endLine": 3838,
        "endChar": 43
      },
      "revId": "bf622be1cd01fb4d8881627a8dcd96c7cf4acb19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "309d9a70_724e5b4f",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 5
      },
      "lineNbr": 3838,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-04-24T22:12:55Z",
      "side": 1,
      "message": "I think Nicolas wants the DCHECK removed. The options are:\n\n1) Generate the slow-path, but not branch to it.\n2) Fast bail-out. I don\u0027t think that needs rearrangement. Just a \"simple\"\n\n if (isConstant() \u0026\u0026 isConstant() \u0026\u0026 ...) {\n   return;\n }",
      "parentUuid": "d076fe11_d7a54380",
      "range": {
        "startLine": 3838,
        "startChar": 6,
        "endLine": 3838,
        "endChar": 43
      },
      "revId": "bf622be1cd01fb4d8881627a8dcd96c7cf4acb19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}