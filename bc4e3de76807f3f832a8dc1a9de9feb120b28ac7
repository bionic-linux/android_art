{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "05c1043c_a6506f65",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-07-07T09:58:30Z",
      "side": 1,
      "message": "Remove? it is not used",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 163,
        "endChar": 38
      },
      "revId": "bc4e3de76807f3f832a8dc1a9de9feb120b28ac7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10f1c35a_3b721a9a",
        "filename": "runtime/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-07-07T09:58:30Z",
      "side": 1,
      "message": "Is this an optimization to early break? If so, WDYT about changing `ThrowInvocationTimeError` slightly to do \n\n```\n  if (IsDefaultConflicting()) {\n    ThrowIncompatibleClassChangeErrorForMethodConflict(this);\n    return;\n  }\n  if (GetDeclaringClass()-\u003eIsInterface() \u0026\u0026 receiver !\u003d nullptr) {\n    ... with returns...\n    Maybe we could have a `if (np_method-\u003eIsAbstract()) { break }` if the early return is needed, explaining why we are throwing AbstractMethodError in that case.\n  }\n    \n  // Catch all   \n  DCHECK(IsAbstract());\n  ThrowAbstractMethodError(this);\n```",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 173,
        "endChar": 47
      },
      "revId": "bc4e3de76807f3f832a8dc1a9de9feb120b28ac7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20a4246a_4b07b365",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 8115,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-07-07T09:58:30Z",
      "side": 1,
      "message": "Do we need to encode the IsAbstract too? i.e. `found \u0026\u003d (!vtable_method-\u003eIsAbstract() \u0026\u0026 !vtable_method-\u003eIsPublic());`",
      "range": {
        "startLine": 8115,
        "startChar": 0,
        "endLine": 8115,
        "endChar": 49
      },
      "revId": "bc4e3de76807f3f832a8dc1a9de9feb120b28ac7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2797c836_acdcdc52",
        "filename": "runtime/interpreter/interpreter_common.h",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-07-07T09:58:30Z",
      "side": 1,
      "message": "if we move this part inside of the 263-275 block we can do `called_method-\u003eThrowInvocationTimeError(receiver)` and not get the receiver again.\n\nI think it also fits logically to put both unlikely early returns together.",
      "range": {
        "startLine": 276,
        "startChar": 0,
        "endLine": 281,
        "endChar": 3
      },
      "revId": "bc4e3de76807f3f832a8dc1a9de9feb120b28ac7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de1a508b_39f2afbf",
        "filename": "test/840-resolution/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-07-07T09:58:30Z",
      "side": 1,
      "message": "nit: `IllegalAccessError` to be in line with the other throw comments. Same for s2 and s3 below.",
      "range": {
        "startLine": 63,
        "startChar": 32,
        "endLine": 63,
        "endChar": 37
      },
      "revId": "bc4e3de76807f3f832a8dc1a9de9feb120b28ac7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}