{
  "comments": [
    {
      "key": {
        "uuid": "918f4c7c_2fb609a1",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 681,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-02-05T17:39:11Z",
      "side": 1,
      "message": "Hans, can you confirm that we need to emit the barrier only if we write a non-zero value to a final field?",
      "range": {
        "startLine": 681,
        "startChar": 10,
        "endLine": 681,
        "endChar": 82
      },
      "revId": "b91427260ce395a6cdd39e40b1ebdc7a8620893a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11951cbd_1bacdbaa",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 2
      },
      "lineNbr": 681,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-02-05T23:01:49Z",
      "side": 1,
      "message": "I assume we\u0027re just suppressing known zero stores to final fields?  If so, I believe the answer is yes.  If not, this gets more complicated ...\n\nDetails:\nI believe AllocObjectWithAllocator always clears memory and calls pre_fence_visitor to set the class pointer before executing a suitable fence.  Hopefully any other allocation paths do something equivalent.  Thus these implicitly \"final\" values are already guarded by a suitable fence.\n\nNon-final fields currently don\u0027t need top be guarded.  If you communicate the object to another thread via a data race, and then access a non-final field initialized in the constructor, you lose.  This rule may change.  I would rather it didn\u0027t.  But that\u0027s a long story.\n\nThere seems to be an unrealized opportunity here to move some final field stores into something like the pre_fence_visitor, thus avoiding one fence in many cases.  Worth considering for O?",
      "parentUuid": "918f4c7c_2fb609a1",
      "range": {
        "startLine": 681,
        "startChar": 10,
        "endLine": 681,
        "endChar": 82
      },
      "revId": "b91427260ce395a6cdd39e40b1ebdc7a8620893a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}