{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3ee18fab_a62c644c",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-09T14:57:50Z",
      "side": 1,
      "message": "All these transitive dependencies look like a maintenance burden. Doesn\u0027t it work to have a `tools` dependency on art-script?",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de3e909_1d031011",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1307893
      },
      "writtenOn": "2024-09-10T04:58:52Z",
      "side": 1,
      "message": "`art-script` is just a `shell script`, its dependencies are not explicitly defined. \nThese shared libraries are used by `dalvikvm`, as `dalvikvm` does not use only `static` libraries. Because `genrule` is in `sandbox` mode, the required `shared` libraries must be copied into the `sandbox` environment for execution. \n\n@ccross Regarding this issue, to your knowledge, are there any other solutions besides copying them into the `genrule` sandbox?",
      "parentUuid": "3ee18fab_a62c644c",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d378cb1_8d7f12d1",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-10T14:26:57Z",
      "side": 1,
      "message": "\u003e art-script is just a shell script, its dependencies are not explicitly defined.\n\nIt depends on dalvikvm (and dex2oat) through `required` [here](https://cs.android.com/android/platform/superproject/main/+/main:art/tools/Android.bp;l\u003d58-59;drc\u003ddf673f5bbf81bc154d696e10de3119027659bc10).\n\nI\u0027m not that acquainted with the sandbox mode, but I reckon Soong ought to use those dependencies (together with `tools` in the genrule) to pull the host build with all its dependencies into the sandbox.",
      "parentUuid": "7de3e909_1d031011",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c68cc649_e55dba3a",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1318142
      },
      "writtenOn": "2024-09-11T01:36:23Z",
      "side": 1,
      "message": "Property \"required\" is confusing and misleading sometimes. It doesn\u0027t work like what you mentioned. It is used by make(not soong) to make sure a required module is installed with the module requires it. So it is used in packaging but not in building, and soong doesn\u0027t uses it like property tools or srcs in genrule modules and required modules are not available in the sandbox if they are not explicitly listed in srcs.",
      "parentUuid": "5d378cb1_8d7f12d1",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25b82d7b_9e86b0e9",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1318142
      },
      "writtenOn": "2024-09-11T01:46:00Z",
      "side": 1,
      "message": "https://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:build/soong/android/androidmk.go;drc\u003d4301e29a02937b1ef1b50e7660ee33205bc33d9c;l\u003d536, soong just gives the required modules list to the packaging logic in make.",
      "parentUuid": "c68cc649_e55dba3a",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "957a2e90_43afeded",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1307893
      },
      "writtenOn": "2024-09-11T08:25:55Z",
      "side": 1,
      "message": "There are two reasons for setting `dalvikvm` as `srcs` instead of `tools`:\n\n1. I\u0027m not sure if successfully setting `dalvikvm` as tools would solve this issue, but currently, setting `dalvikvm` as `tools` results in an error under any circumstances.\ne.g. (`copy dalvikvm`)\n```\ncc_genrule {\n    name: \"use_art_cc_binary_as_tools\",\n    host_supported: true,\n    tools: [\"dalvikvm\"],\n    out: [\"my_out\"],\n    cmd: \"cp $(location dalvikvm) \u003e $(out)\",\n}   \n```\ne.g. (`run dalvikvm --help`)\n```\ncc_genrule {\n    name: \"use_art_cc_binary_as_tools\",\n    host_supported: true,\n    tools: [\"dalvikvm\"],\n    out: [\"my_out\"],\n    cmd: \"$(location dalvikvm) --help \u0026\u003e $(out)\",\n}     \n```\nError Message: \nhttps://paste.googleplex.com/6496777642704896\n```\ninternal error: panic in GenerateBuildActions for module \"use_art_cc_binary_as_tools\" variant \"linux_glibc_x86_64\"\nruntime error: invalid memory address or nil pointer dereference\n```\n\n\n2. The program must be started by the `art script`, and the `art script` restricts `the path` where `dalvikvm` can be executed. Therefore, `dalvikvm` must be copied to the specified path first.",
      "parentUuid": "25b82d7b_9e86b0e9",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a4c3b50_8ab9dc04",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1307893
      },
      "writtenOn": "2024-09-11T09:17:40Z",
      "side": 1,
      "message": "Verification shows that setting **`dalvikvm`** as a `tools` still doesn\u0027t resolve the issue of it requiring related shared libraries.\n\nVerification steps:    \n\nStep 1: Remove `\"symlink_preferred_arch: true\"` from `dalvikvm` to address the null pointer issue when setting `dalvikvm` as a `tools`.\n\nStep 2: Set `dalvikvm` as a `tool` and remove the dalvikvm-related `shared libraries` in aosp/3213216.\n\nStep 3: The following error occurs during execution:   \n\nE JniInvocation: Failed to dlopen **`libart.so`**:     \n**`libart.so`**: cannot open **shared object file**: No such file or directory    \nFailed to initialize JNI invocation API from (null)    \n**Segmentation fault**",
      "parentUuid": "957a2e90_43afeded",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "650eeb83_5f4c3b53",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 143,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-11T12:51:17Z",
      "side": 1,
      "message": "Sorry to hear of all the problems. It seems to be a combination of both lack of support and plain bugs. Then the outcome is that the build system doesn\u0027t support this use case very well? In the corresponding .mk file we didn\u0027t need to maintain this duplicate set of transitive dependencies, so it seems Soong needs more work to achieve feature parity.\n\nI\u0027d rather avoid this approach since it incurs significant tech debt. This also only converts the `AHAT_TEST_DUMP_HPROF` rule from the .mk file, and there are a further two more or less similar rules for `AHAT_TEST_DUMP_BASE_HPROF` and `AHAT_RI_TEST_DUMP_HPROF` that may end up the same way, and that\u0027s just in this directory.\n\nWe can discuss going forward with something along these lines as a temporary workaround, but before that I\u0027d like to know a bit better what the path forward is and have a timeline for a proper solution.",
      "parentUuid": "6a4c3b50_8ab9dc04",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 143,
        "endChar": 25
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85ad3d2a_b684bbec",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 153,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-09-09T14:57:50Z",
      "side": 1,
      "message": "What\u0027s the reason for using this directory (as opposed to the normal install directories for host artifacts, e.g `out/host/linux-x86/bin`)?",
      "range": {
        "startLine": 153,
        "startChar": 28,
        "endLine": 153,
        "endChar": 42
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39b9f834_4fb00b98",
        "filename": "tools/ahat/Android.bp",
        "patchSetId": 22
      },
      "lineNbr": 153,
      "author": {
        "id": 1307893
      },
      "writtenOn": "2024-09-10T04:58:52Z",
      "side": 1,
      "message": "In reality, there isn\u0027t a specific reason, this just lists out the minimal directory structure required by the `art-script` shell.\n\nFor `art-script`, the essentials are:\n\n1. A subdirectory of `host` or `target`\n```\n  ANDROID_ROOT_MINUS_PWD\u003d\"${ANDROID_ROOT#$PWD/}\"  # For example: out/host/linux-x86\n  if [[ \"$ANDROID_ROOT_MINUS_PWD\" \u003d\u003d */host/* ]]; then\n    DEX2OAT_BCP\u003d\"$(get_boot_class_path $ANDROID_ROOT)\"\n    DEX2OAT_BCP_LOCS\u003d\"$(get_boot_class_path $ANDROID_ROOT_MINUS_PWD)\"\n  elif [[ \"$ANDROID_ROOT_MINUS_PWD\" \u003d\u003d */target/* ]]; then\n    DEX2OAT_BCP\u003d\"$(get_boot_class_path $ANDROID_ROOT)\"\n    DEX2OAT_BCP_LOCS\u003d\"$(get_boot_class_path)\"\n  else\n    echo \"Can not determine whether are running on host or target\"\n    exit 1\n```\n\n2. LD path must include `lib` or `lib64`\n```\nfunction find_libdir() {\n  # Get the actual file, $1 is the ART_BINARY_PATH and may be a symbolic link.\n  # Use realpath instead of readlink because Android does not have a readlink.\n  if [[ \"$(realpath \"$1\")\" \u003d\u003d *dalvikvm64 ]]; then\n    echo \"lib64\"\n  else\n    echo \"lib\"\n  fi\n}\n```\n\nTherefore, we simply copy the files from srcs to `host/srcs`, and the libraries to `host/srcs/lib` (or `/lib64`).",
      "parentUuid": "85ad3d2a_b684bbec",
      "range": {
        "startLine": 153,
        "startChar": 28,
        "endLine": 153,
        "endChar": 42
      },
      "revId": "1c92f9450a5ecf3da198f005e3fb64a95ce26e0d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}