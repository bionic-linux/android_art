{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "12095619_2c480ed0",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-15T21:28:18Z",
      "side": 1,
      "message": "If the user runs `atest -d` and then another `atest` later, this means they\u0027ll skip this entirely on the second run, I think. That wouldn\u0027t be good. (I use `atest -d` every so often because I want to check the files from the test on device, and/or run the test commands manually with `adb shell`.)\n\nThis is fine if atest cleans things up in the install step before the test run, but I don\u0027t think it necessarily does.",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "750520d1_f4d25fd9",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-16T15:59:27Z",
      "side": 1,
      "message": "I\u0027ve tried some workarounds for this, but didn\u0027t manage to make any of them work. It\u0027s possible to fix for single-arch run, but with dual-arch there seem to be no way to generate boot-image exactly once while also keeping the dirs. (I tried to use a timestamp file, but FilePusher is also called twice, so the timestamp always triggers boot-image generation)\n\nI\u0027m thinking about implementing ${ARCH} expansion in RunCommandTargetPreparer, so that each preparer run will only generate boot-image for its arch directory.\nDo you have any other ideas?",
      "parentUuid": "12095619_2c480ed0",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00f45861_c5e3f6c9",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-16T18:21:39Z",
      "side": 1,
      "message": "Well, I suppose in the worst case we can live with the generation happening twice. It\u0027s a waste of time (how much, approximately?) but at least it seems it won\u0027t cause any adverse effects with stale files etc.\n\nHowever it\u0027s also quirky and difficult to reason about. `${ARCH}` would help a lot to make all this much more straightforward, so it definitely has my vote. I don\u0027t know of any other options really, but I suggest reaching out to the tradefed team to see if they have any advice on this. A yaqs/ question could be one option (#tradefed seems like an actively used tag).",
      "parentUuid": "750520d1_f4d25fd9",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c549170_67d8469c",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-16T18:30:17Z",
      "side": 1,
      "message": "Another option is to implement make/ninja style mtime checks in `generate-boot-image` so that it skips the work if the output is more recent than the inputs. But it\u0027d still leave this hard-to-follow mess here, so adding an expansion to TradeFed seems much better (and is also probably much simpler).",
      "parentUuid": "00f45861_c5e3f6c9",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}