{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "12095619_2c480ed0",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-15T21:28:18Z",
      "side": 1,
      "message": "If the user runs `atest -d` and then another `atest` later, this means they\u0027ll skip this entirely on the second run, I think. That wouldn\u0027t be good. (I use `atest -d` every so often because I want to check the files from the test on device, and/or run the test commands manually with `adb shell`.)\n\nThis is fine if atest cleans things up in the install step before the test run, but I don\u0027t think it necessarily does.",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "750520d1_f4d25fd9",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-12-16T15:59:27Z",
      "side": 1,
      "message": "I\u0027ve tried some workarounds for this, but didn\u0027t manage to make any of them work. It\u0027s possible to fix for single-arch run, but with dual-arch there seem to be no way to generate boot-image exactly once while also keeping the dirs. (I tried to use a timestamp file, but FilePusher is also called twice, so the timestamp always triggers boot-image generation)\n\nI\u0027m thinking about implementing ${ARCH} expansion in RunCommandTargetPreparer, so that each preparer run will only generate boot-image for its arch directory.\nDo you have any other ideas?",
      "parentUuid": "12095619_2c480ed0",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00f45861_c5e3f6c9",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-16T18:21:39Z",
      "side": 1,
      "message": "Well, I suppose in the worst case we can live with the generation happening twice. It\u0027s a waste of time (how much, approximately?) but at least it seems it won\u0027t cause any adverse effects with stale files etc.\n\nHowever it\u0027s also quirky and difficult to reason about. `${ARCH}` would help a lot to make all this much more straightforward, so it definitely has my vote. I don\u0027t know of any other options really, but I suggest reaching out to the tradefed team to see if they have any advice on this. A yaqs/ question could be one option (#tradefed seems like an actively used tag).",
      "parentUuid": "750520d1_f4d25fd9",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c549170_67d8469c",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-12-16T18:30:17Z",
      "side": 1,
      "message": "Another option is to implement make/ninja style mtime checks in `generate-boot-image` so that it skips the work if the output is more recent than the inputs. But it\u0027d still leave this hard-to-follow mess here, so adding an expansion to TradeFed seems much better (and is also probably much simpler).",
      "parentUuid": "00f45861_c5e3f6c9",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d34df42_76ca4e00",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-02-07T16:09:23Z",
      "side": 1,
      "message": "We had a discussion about `${ARCH}` with EngProd last week. To summarize: they don\u0027t want to allow tests to be aware of current ABI.\nOne of the possible solutions is to make a separate .xml file for each ABI and hardcode all paths in those files. But given the amount of art_standalone*.xml files -- it doesn\u0027t look feasible to support.\n\n\nAlso, from the discussion: `atest` should push and run only one ARCH dir at a time (and I\u0027ve double checked that it is the case, including with `--all-abi` flag).\nSo it is possible to implement your mtime proposal by checking if `ARCH_DIR` is newer than `art_boot_images`. This should work even for `--all-abi -d` runs.\nBash code for this will get more complicated of course.\n\n\n\u003ein the worst case we can live with the generation happening twice. It\u0027s a waste of time (how much, approximately?)\n\nIt takes a bit more than 2.1-2.3 seconds on x86_64 VM. If `-d` flag is only used in manual testing -- this could be a reasonable trade-off to avoid complicating the code.",
      "parentUuid": "5c549170_67d8469c",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99225818_4b5be028",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-02-15T21:35:45Z",
      "side": 1,
      "message": "Checking mtime on directories seems fragile. Is it possible to use some specific files instead?\n\n\u003e Bash code for this will get more complicated of course.\n\nYes, and given these commands are heavily duplicated it gets even worse. WDYT about putting both the run-command and the teardown-command, along with explanatory comments etc, in a bash script that\u0027s pushed to device and then run from this preparer? Is it possible to push a file from the source directory?\n\nIf that\u0027s a feasible approach it may even be worthwhile compared to the brute force regen approach, due to the amount of duplication. Not sure though, it\u0027s borderline.\n\nBut if you don\u0027t like it I suppose we can just go with the repeated regen.",
      "parentUuid": "8d34df42_76ca4e00",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15638d99_b690522c",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-02-21T23:23:45Z",
      "side": 1,
      "message": "We could check mtime of `generate-boot-image` executable, but it wouldn\u0027t be a complete solution, because its outputs depend on `dex2oat` and boot-image jar files.\nPaths for these files are not necessarily constant, for example: https://cs.android.com/android/platform/superproject/+/master:art/test/generate-boot-image/generate-boot-image.cc;l\u003d43\nThat logic would have to be implemented in the script.\n\nAssuming that `atest -d` is not used on pre-/post-submit runs, I\u0027m slightly more in favor of repeated regen.",
      "parentUuid": "99225818_4b5be028",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fc89ff3_8056bdef",
        "filename": "compiler/art_standalone_compiler_tests.xml",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-02-23T19:47:57Z",
      "side": 1,
      "message": "Yes, that makes sense. Please mention in the commit message how this may behave with `-d`, for posterity.",
      "parentUuid": "15638d99_b690522c",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "eb0b191424aca68f81418b851ff89aa430313e6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}