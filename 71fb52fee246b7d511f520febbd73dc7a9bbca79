{
  "comments": [
    {
      "key": {
        "uuid": "8b0c4779_32be8ed7",
        "filename": "compiler/optimizing/intrinsics_list.h",
        "patchSetId": 27
      },
      "lineNbr": 84,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-21T14:10:58Z",
      "side": 1,
      "message": "why is this kVirtual? it\u0027s a private method and should be kDirect.\n\nI also double check what code gets generated when invoked and it\u0027s a direct call:\n\n: java.lang.Object java.lang.ref.Reference.get() (dex_method_idx\u003d3754)\n    DEX CODE:\n      0x0000: invoke-direct {v1}, java.lang.Object java.lang.ref.Reference.getReferent() // method@3755\n      0x0003: move-result-object v0\n      0x0004: return-object v0",
      "range": {
        "startLine": 84,
        "startChar": 26,
        "endLine": 84,
        "endChar": 34
      },
      "revId": "71fb52fee246b7d511f520febbd73dc7a9bbca79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb3abfc4_34dc7e27",
        "filename": "compiler/optimizing/intrinsics_list.h",
        "patchSetId": 27
      },
      "lineNbr": 87,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-15T22:32:28Z",
      "side": 1,
      "message": "Uh, just found this... What is this for?",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 87,
        "endChar": 80
      },
      "revId": "71fb52fee246b7d511f520febbd73dc7a9bbca79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b7777c2_d67f6295",
        "filename": "compiler/optimizing/intrinsics_list.h",
        "patchSetId": 27
      },
      "lineNbr": 87,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-15T22:41:44Z",
      "side": 1,
      "message": "This is the standard for lists. The linter will complain if you don\u0027t put the #ifndef #define part at the top. But if you want to include the file multiple times, this is how we do it in our codebase. Compare for dex instructions, for example.",
      "parentUuid": "cb3abfc4_34dc7e27",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 87,
        "endChar": 80
      },
      "revId": "71fb52fee246b7d511f520febbd73dc7a9bbca79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_0d3dd1df",
        "filename": "compiler/optimizing/intrinsics_list.h",
        "patchSetId": 27
      },
      "lineNbr": 87,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-16T08:44:37Z",
      "side": 1,
      "message": "Why would you want to include it multiple times? It\u0027s just a macro.\n\nWhere is it stated that it\u0027s a standard for lists?",
      "parentUuid": "0b7777c2_d67f6295",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 87,
        "endChar": 80
      },
      "revId": "71fb52fee246b7d511f520febbd73dc7a9bbca79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abdbcb04_6af1dbf5",
        "filename": "compiler/optimizing/intrinsics_list.h",
        "patchSetId": 27
      },
      "lineNbr": 87,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-01-16T17:46:06Z",
      "side": 1,
      "message": "Can\u0027t I use INTRINSICS_LIST(foo) and then later INTRINSICS_LIST(bar) without including the header multiple times?",
      "parentUuid": "4bc24f1f_0d3dd1df",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 87,
        "endChar": 80
      },
      "revId": "71fb52fee246b7d511f520febbd73dc7a9bbca79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bcfdb48_db59bf86",
        "filename": "compiler/optimizing/intrinsics_list.h",
        "patchSetId": 27
      },
      "lineNbr": 87,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-16T17:50:58Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s true - I mean it\u0027s a general define. My guess is it was made for locality - whenever you have a list you keep this local and undefine right after use.\n\nAnyways, I copied that from dex_instruction.h (and now the Quick entrypoints are written in the same way). If you prefer to do it differently in the optimizing compiler I can do that...",
      "parentUuid": "abdbcb04_6af1dbf5",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 87,
        "endChar": 80
      },
      "revId": "71fb52fee246b7d511f520febbd73dc7a9bbca79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_a1b12652",
        "filename": "compiler/optimizing/intrinsics_list.h",
        "patchSetId": 27
      },
      "lineNbr": 87,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-21T11:11:19Z",
      "side": 1,
      "message": "So it\u0027s only to protect against a macro name clash, right?",
      "parentUuid": "2bcfdb48_db59bf86",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 87,
        "endChar": 80
      },
      "revId": "71fb52fee246b7d511f520febbd73dc7a9bbca79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}