{
  "comments": [
    {
      "key": {
        "uuid": "a48dbaf4_c3d24889",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 578,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-09T10:23:14Z",
      "side": 1,
      "message": "For the time being, could we avoid this complexity, and just do 64bits moves?",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "ff1306c07d724848e329a3a1b82936f131db5828",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_824bdcf9",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 578,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-09T10:40:23Z",
      "side": 1,
      "message": "Ok I\u0027ll clean that up now.\nNote that this function did not allow generating 32bit moves. It was just necessary to find an appropriate type for the `MoveLocation()` helper. I\u0027ll remove it by making the type optional in `MoveLocation()`.",
      "parentUuid": "a48dbaf4_c3d24889",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "ff1306c07d724848e329a3a1b82936f131db5828",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_0257cc9c",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 578,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-09T10:42:38Z",
      "side": 1,
      "message": "Thanks. What\u0027s your opinion on it? Did you get any feedback from other teams?",
      "parentUuid": "84927610_824bdcf9",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "ff1306c07d724848e329a3a1b82936f131db5828",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84927610_65a4a2be",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 578,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2014-12-09T15:13:31Z",
      "side": 1,
      "message": "32bit moves might bring some (little?) power gain, but will almost certainly not\nbring any performance improvement. So my opinion is that we should keep\ngenerating 32bit moves where we can, but that this issue should not drive any\nwork now.\nHowever we should stay open to investigating other changes around the\nparallel move resolver. I\u0027m thinking in particular of using \u0027load pair\u0027 and\n\u0027store pair\u0027, but we will have a look at that later.\n\nI\u0027m still waiting for feedback. I\u0027m afraid there may not be much data on this\n32bit vs 64bit move. For other instructions (eg. data processing) we should note\nthat this may have a bigger impact on power, and that in certain cases it has an\nexplicit impact on latencies (eg. 32bit and 64bit SDIV instructions respectively\nhave a 19 and 35 cycles latency).",
      "parentUuid": "84927610_0257cc9c",
      "range": {
        "startLine": 578,
        "startChar": 43,
        "endLine": 578,
        "endChar": 59
      },
      "revId": "ff1306c07d724848e329a3a1b82936f131db5828",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}