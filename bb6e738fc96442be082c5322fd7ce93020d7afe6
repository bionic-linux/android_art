{
  "comments": [
    {
      "key": {
        "uuid": "5a66321a_daf725b1",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 1912,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-05-18T11:06:57Z",
      "side": 1,
      "message": "I would have though hwasan wouldn\u0027t have the same issue?",
      "range": {
        "startLine": 1912,
        "startChar": 42,
        "endLine": 1912,
        "endChar": 61
      },
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83219a45_003d2662",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 1912,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-05-18T11:14:54Z",
      "side": 1,
      "message": "Large number of the same interp-ac tests were failing, so I assumed it is the same reason - I didn\u0027t investigate too closely.\n\nI would expect hwasan and normal asan to behave very similarily... so it makes sense to me.  Why wouldn\u0027t you expect it from hwasan?",
      "parentUuid": "5a66321a_daf725b1",
      "range": {
        "startLine": 1912,
        "startChar": 42,
        "endLine": 1912,
        "endChar": 61
      },
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9cf4c0d_fff71603",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 1912,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-05-18T13:18:58Z",
      "side": 1,
      "message": "Maybe because it could have requirement on stack size lower than asan?",
      "parentUuid": "83219a45_003d2662",
      "range": {
        "startLine": 1912,
        "startChar": 42,
        "endLine": 1912,
        "endChar": 61
      },
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633fe124_fc20157e",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 1912,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-05-19T21:37:20Z",
      "side": 1,
      "message": "hwasan and asan are actually quite different here. Inlining should not create huge stack frames with hwasan because it does not suppress stack slot reuse the same way that asan does.",
      "parentUuid": "a9cf4c0d_fff71603",
      "range": {
        "startLine": 1912,
        "startChar": 42,
        "endLine": 1912,
        "endChar": 61
      },
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1a29a8c_84d77fb9",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 1912,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-05-20T12:32:26Z",
      "side": 1,
      "message": "I guess it might still be increasing the stack size somehow.\nThe interpreter tests were failing, and this fixed it.",
      "parentUuid": "633fe124_fc20157e",
      "range": {
        "startLine": 1912,
        "startChar": 42,
        "endLine": 1912,
        "endChar": 61
      },
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2c7efbb_24bbe174",
        "filename": "runtime/oat_quick_method_header.h",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-05-19T21:37:20Z",
      "side": 1,
      "message": "FYI the program counter can not be tagged (not with hwasan, not with Arm MTE). If you jump to the generated code, the tag would need to be removed.",
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e66a3cbf_e25a6397",
        "filename": "runtime/oat_quick_method_header.h",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-05-20T12:32:26Z",
      "side": 1,
      "message": "I am not sure where the jump is, but it seems to work as-is.\nAny chance the tag is removed automatically when branched to?",
      "parentUuid": "f2c7efbb_24bbe174",
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f751cd98_408ff03f",
        "filename": "runtime/oat_quick_method_header.h",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-05-20T17:57:02Z",
      "side": 1,
      "message": "Yes, you are right, that\u0027s exactly what happens.",
      "parentUuid": "e66a3cbf_e25a6397",
      "revId": "bb6e738fc96442be082c5322fd7ce93020d7afe6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}