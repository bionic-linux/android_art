{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ed784c63_47a42ea8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-09T13:43:42Z",
      "side": 1,
      "message": "I am worried that we may not be fully utilizing this MADV_FREE. If you look at `AllocateRegion()`, we look for first free region from the beginning. The chosen region may have been freed prior to previous GC cycle, while there are regions, later in the order, which were freed in the last GC cycle. This means we\u0027d be doing FIFO type usage whereas `MADV_FREE` is best suited for LIFO type usage.\n\nIf this is happening then we are not only taking the sub-optimal path of releasing the pages (via kswapd), we are also doubling the memset overhead.",
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a5776b4_4963be8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-09T13:50:40Z",
      "side": 1,
      "message": "Ack, you\u0027re suggesting to add some \"time-when-freed\" bit to regions to find out the best one to use?\n\nThis will be difficult to evaluate, should we do that as future optimization?",
      "parentUuid": "ed784c63_47a42ea8",
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ab8ec7e_3fdc25c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-09T14:29:40Z",
      "side": 1,
      "message": "Yeah, I guess a 1-byte counter might suffice. We just want the `freed-in-last-gc-cycle` regions to be given priority for allocation.\n\nCertainly, doing it as a future optimization should be fine.",
      "parentUuid": "9a5776b4_4963be8c",
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ebd8d5d_35f0f777",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-16T10:28:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1ab8ec7e_3fdc25c9",
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b41b4d0_8483390d",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 13
      },
      "lineNbr": 1238,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T18:12:55Z",
      "side": 1,
      "message": "Should probably eventually add \"inline\". But it would be very interesting to see what this compiles to. Does it turn into a memset call that uses DC ZVA instructions on ARM? Some other interesting instruction sequence?",
      "range": {
        "startLine": 1238,
        "startChar": 0,
        "endLine": 1238,
        "endChar": 11
      },
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f94fa04_02118b3c",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 13
      },
      "lineNbr": 1238,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-12T08:36:03Z",
      "side": 1,
      "message": "Looked at the disassembly on arm64, and it just calls memset.",
      "parentUuid": "1b41b4d0_8483390d",
      "range": {
        "startLine": 1238,
        "startChar": 0,
        "endLine": 1238,
        "endChar": 11
      },
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0613f0b_6d67f32a",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 13
      },
      "lineNbr": 1251,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T18:12:55Z",
      "side": 1,
      "message": "I\u0027m not sure what typical values of length here are. We may eventually want to pass in dirty page information to allow fewer mincore() calls? But that can wait.",
      "range": {
        "startLine": 1250,
        "startChar": 2,
        "endLine": 1251,
        "endChar": 46
      },
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3b8688c_0493343e",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 13
      },
      "lineNbr": 1251,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-12T08:36:03Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e0613f0b_6d67f32a",
      "range": {
        "startLine": 1250,
        "startChar": 2,
        "endLine": 1251,
        "endChar": 46
      },
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e35ca8_e4f37447",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-09T18:12:55Z",
      "side": 1,
      "message": "Should presumably also be release_eagerly? Also in .cc file.",
      "range": {
        "startLine": 392,
        "startChar": 31,
        "endLine": 392,
        "endChar": 45
      },
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f347a6a5_6cb78ee2",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-12T08:36:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72e35ca8_e4f37447",
      "range": {
        "startLine": 392,
        "startChar": 31,
        "endLine": 392,
        "endChar": 45
      },
      "revId": "a5673460bcfc19490ab6fe865b18a97da70ad52b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}