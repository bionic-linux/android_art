{
  "comments": [
    {
      "key": {
        "uuid": "cbd63fdb_b423ae11",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 205,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-19T12:09:56Z",
      "side": 1,
      "message": "Maybe\n   if (mem_op.IsImmediateOffset()) {\n?",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_34d1fe8f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 208,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-19T12:09:56Z",
      "side": 1,
      "message": "Change to\n    DCHECK(mem_op.IsRegisterOffset();\n?",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_74c786d9",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1025,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-19T12:09:56Z",
      "side": 1,
      "message": "What about using only one line?\n    __ Add(temp_base, src.base(), OperandFromMemOperand(src));\n?",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_3d0acfc8",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "XRegisterFrom() DCHECKs this.",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb586371_602946ac",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "This was more in line with the style of the other helpers, and gives better error reporting (don\u0027t have to look at a trace to figure out what is actually wrong), but I\u0027ll change it for tighter code.",
      "parentUuid": "4b408f75_3d0acfc8",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_fd798730",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 479,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "No temp needed from the register allocator - see my comment below.",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_f43ff6f3",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "I suggest we get this temp from VIXL (d/s31). Also we can rename this to temp (instead of temp1).\n\neg:\n\nUseScratchRegisterScope temps(GetVIXLAssembler());\nFPRegister temp \u003d AcquireSameSizeAs(in_reg);\n\n\nThis way we will reuse VIXL\u0027s FP temp - D/S 31, instead of using asking the register allocator for a temp.",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab52eb4e_bb0d535e",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "Your choice. I\u0027m not up to speed about how many registers are reserved by VIXL...",
      "parentUuid": "cbd63fdb_f43ff6f3",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_60e02ca2",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-20T10:58:01Z",
      "side": 1,
      "message": "See code_generator_arm64.h. Currently we block 2 GP regs and 1 FP reg.\n\nconst vixl::CPURegList vixl_reserved_core_registers(vixl::ip0, vixl::ip1);\nconst vixl::CPURegList vixl_reserved_fp_registers(vixl::d31);\n\nThis will enable the VIXL MacroAssembler handle any sort of immediate field for most of the instructions. \n\nIn both cases mentioned here it is safe to use the VIXL blocked registers. The instructions generated inside the scope do not need any extra temp registers.\n\nIn the cases where we get this wrong we should hit the VIXL_CHECK() in:\nCPURegister UseScratchRegisterScope::AcquireNextAvailable(CPURegList* available) {}",
      "parentUuid": "ab52eb4e_bb0d535e",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_133df4df",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 491,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "Both variants can be encoded in the immediate field.\n\nAnyway a misuse will be caught in a debug version of ART. libvixld asserts when it tries to use a temp register and none is available.",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b57e740_fa306506",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 491,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "Vixl has this with double and float signature. Should I not make it obvious here (Quick says the encoding is the same and relies and this, though)? (It\u0027s somewhat contradicting with the \"we don\u0027t want to allow encodings for stuff that has aliases\")",
      "parentUuid": "4bc24f1f_133df4df",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_961d525a",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 491,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-20T10:58:01Z",
      "side": 1,
      "message": "I would leave it as it is.\n\nI have mentioned the fact that they can be encoded in the immediate field since otherwise the macro assembler would place it in the literal pool. \n\nOther instructions like Fcmp() would use the extra FP temp - D/S31 if the immediate field cannot be encoded in the instruction stream.",
      "parentUuid": "8b57e740_fa306506",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_338590e6",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 624,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "Should this be a WRegister for kPrinNot too? (I guess that this should be the case if we decide to use 32bit regs \"in flight\").",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb586371_c00db25d",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 624,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "Yes, I\u0027ll change all the occurrences of object pointers.",
      "parentUuid": "4bc24f1f_338590e6",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_d3b76cc6",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 650,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "This is the register that we use in LoadAcquire() - temp_base ?\n\nWe get that one from a different register poll (VIXL temps - IP0, IP1).",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b57e740_da2da1ae",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 650,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "Stale comment, after I added code to LoadAcquire...",
      "parentUuid": "4bc24f1f_d3b76cc6",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_338cb018",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 744,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "kUseAcquireRelease variant ?\n\nI need to understand what is_ordered guarantees. We might need to enforce ordering through a DMB even for a acquire-release variant.",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb586371_e0143666",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 744,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "Variant will be added. As ordered is weaker than volatile, I think it\u0027s easiest just to use the volatile code...",
      "parentUuid": "4bc24f1f_338cb018",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_17239c98",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 787,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "Add a comment ? // Unused this* ?",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_00ffa8bd",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 795,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "No need for temps here - see my comment below.",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_a0019431",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 810,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "Here we can use VIXLs temps IP1, IP0. This should be perfectly safe and should put less pressure on the Optimizing Compiler register allocator. \n\nUseScratchRegisterScope temps(GetVIXLAssembler());\nRegister tmp_ptr \u003d temps.AcquireX();\nRegister tmp_value \u003d temps.AcquireSameSizeAs(value);",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_37282070",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 812,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "no need. value is a W for kPrimNot, not like in Quick where it is X.",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_5da35b0e",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 813,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "ditto",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_d73c34b4",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 821,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "Operand(offset) ?\n\nOne of the Operand constructors:\n Operand(Register reg, Shift shift \u003d LSL, unsigned shift_amount \u003d 0);",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_80ebb805",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 831,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "tmp_value ?",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_57a4c498",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 835,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "value?",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_13b89466",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 837,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-19T16:44:27Z",
      "side": 1,
      "message": "Cbnz(tmp_32, \u0026loop_head);\n\nGblame me :-).",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab52eb4e_3b430377",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 837,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "Micro-optimizations once stuff is done. Premature ...  ;-)",
      "parentUuid": "4bc24f1f_13b89466",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_b0ae56f0",
        "filename": "compiler/optimizing/intrinsics_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-01-19T12:09:56Z",
      "side": 1,
      "message": "In the codegen we have GetAssembler() and GetVIXLAssembler(). Should we name this one GetVIXLAssembler() for coherency, or do you prefer this one to stay in line with other archs?",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b57e740_3a6c9df7",
        "filename": "compiler/optimizing/intrinsics_arm64.h",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-19T19:36:40Z",
      "side": 1,
      "message": "Coherency is not a must. Will change.",
      "parentUuid": "4bc24f1f_b0ae56f0",
      "revId": "8bd43173c02355500e9b356f22461dad4cc70511",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}