{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9225ec46_658d66d7",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-03T09:55:25Z",
      "side": 0,
      "message": "I need education here - libnativeloader doesn\u0027t have these version_script for the linker, yet frameworks fail to build if I remove methods from libnativeloader.map.txt that frameworks. If I don\u0027t remove the version_script for libnativebridge, then ART fails to build.\n\nHow is the build system deciding when to compile against a stub, compared to using the version_script ?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e383a20_3ddf5dd6",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-03T14:01:05Z",
      "side": 0,
      "message": "In light of the TH failures, not sure why my local build was successful. But then why do we have a version script if the stubs library already does the job?",
      "parentUuid": "9225ec46_658d66d7",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04763f10_ba2db25c",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-11-03T15:58:36Z",
      "side": 0,
      "message": "Note the intermediate path out/soong/.intermediates/art/runtime/libart/android_arm_armv8-a_cortex-a53_shared/unstripped/libart.so - it\u0027s not an APEX variant and shouldn\u0027t be built at all. Maybe one of the continuous test targets causes ART to be compiled in platform?\n\n\u003e why do we have a version script\n\nIt was probably seen as a belt-and-suspenders approach, but it only works as long as we\u0027re using the same symbols both internally and externally. I agree this needs to go away.",
      "parentUuid": "7e383a20_3ddf5dd6",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e33f5e1f_3f38b4b9",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-11-03T22:54:54Z",
      "side": 0,
      "message": "$ env NINJA_ARGS\u003d\"-t path platform_tests out/soong/.intermediates/art/runtime/libart/android_x86_shared/unstripped/libart.so\" m\nplatform_tests\nout/target/product/vsoc_x86/obj/PACKAGING/platform_tests_intermediates/platform_tests.zip\nout/target/product/vsoc_x86/obj/SHARED_LIBRARIES/libarttest_intermediates/libarttest.so\nout/target/product/vsoc_x86/symbols/data/nativetest/art/x86/libarttest.so\nout/soong/.intermediates/art/test/libarttest/android_x86_shared/unstripped/libarttest.so\nout/soong/.intermediates/art/runtime/libart/android_x86_shared/libart.so.toc\nout/soong/.intermediates/art/runtime/libart/android_x86_shared/libart.so\nout/soong/.intermediates/art/runtime/libart/android_x86_shared/unstripped/libart.so\n\nplatform_tests probably shouldn\u0027t depend on ART anymore. Exactly how it happens I don\u0027t know - they\u0027re make-stage expansions that aren\u0027t reflected in ninja. +rpl, do you know what this is?",
      "parentUuid": "04763f10_ba2db25c",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec09df28_d7b94760",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-04T10:13:32Z",
      "side": 0,
      "message": "Also, how come this build is currently successful when libartd says apex_available only com.android.art.debug ?",
      "parentUuid": "e33f5e1f_3f38b4b9",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2e82966_6813d68a",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-11-04T11:10:53Z",
      "side": 0,
      "message": "Martin, what branch and lunch target did you use in your examples?",
      "parentUuid": "ec09df28_d7b94760",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1660e7d4_cbd03a63",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-11-04T11:20:56Z",
      "side": 0,
      "message": "Nicolas: This is a make-level dependency that apex_available doesn\u0027t cover, I think. The platform variant should arguably not be enabled at all by Soong, but it is. There are probably edge cases (e.g. code that\u0027s neither platform nor APEX) that fail if that changes.\n\nRoland: I try to recreate the TH failures, so it\u0027s on internal, but then I just used my usual build target (cf_x86_phone-userdebug) because it looks like it doesn\u0027t matter.",
      "parentUuid": "a2e82966_6813d68a",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f9d7e4c_cb9cb623",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-11-04T11:37:51Z",
      "side": 0,
      "message": "Thanks Martin. I tried to reproduce this on AOSP, to no avail. Looking for `platform_test` in internal master, I found this: \n\nhttp://cs/android/vendor/google/build/tasks/tests/platform_test_list.mk?l\u003d161-174\u0026rcl\u003dad834fecec34da605a2fc7691fc2edf320c96f16\n\n  ifeq ($(HOST_OS),linux)\n    platform_tests +\u003d \\\n      $(ART_TEST_DEX_MAKE_TARGETS) \\\n      $(ART_TEST_OAT_MAKE_TARGETS) \\\n      $(COMPILER_TARGET_GTEST_MAKE_TARGETS) \\\n      $(RUNTIME_TARGET_GTEST_MAKE_TARGETS) \\\n      dex2oatd.com.android.art.debug \\\n      libartd.com.android.art.debug \\\n      libartd-compiler.com.android.art.debug \\\n      libopenjdk.com.android.art.debug \\\n      libopenjdkd.com.android.art.debug \\\n      libopenjdkjvm.com.android.art.debug \\\n      libopenjdkjvmd.com.android.art.debug\n  endif\n\nNot sure why we do have this here. Dan, do you know?\n\nMaybe we could remove this.",
      "parentUuid": "1660e7d4_cbd03a63",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820f82a5_4474ad44",
        "filename": "libnativebridge/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-11-04T13:26:16Z",
      "side": 0,
      "message": "\u003e Thanks Martin. I tried to reproduce this on AOSP, to no avail.\n\nYeah, only on internal do we get the failure.\n\n\u003e Looking for `platform_test` in internal master, I found this: \n\u003e \n\u003e http://cs/android/vendor/google/build/tasks/tests/platform_test_list.mk?l\u003d161-174\u0026rcl\u003dad834fecec34da605a2fc7691fc2edf320c96f16\n\u003e \n\u003e   ifeq ($(HOST_OS),linux)\n\u003e     platform_tests +\u003d \\\n\u003e       $(ART_TEST_DEX_MAKE_TARGETS) \\\n\u003e       $(ART_TEST_OAT_MAKE_TARGETS) \\\n\u003e       $(COMPILER_TARGET_GTEST_MAKE_TARGETS) \\\n\u003e       $(RUNTIME_TARGET_GTEST_MAKE_TARGETS) \\\n\u003e       dex2oatd.com.android.art.debug \\\n\u003e       libartd.com.android.art.debug \\\n\u003e       libartd-compiler.com.android.art.debug \\\n\u003e       libopenjdk.com.android.art.debug \\\n\u003e       libopenjdkd.com.android.art.debug \\\n\u003e       libopenjdkjvm.com.android.art.debug \\\n\u003e       libopenjdkjvmd.com.android.art.debug\n\u003e   endif\n\u003e \n\u003e Not sure why we do have this here. Dan, do you know?\n\u003e \n\u003e Maybe we could remove this.\n\nAre these problematic though? They\u0027re explicit that the libraries are in the apex.",
      "parentUuid": "9f9d7e4c_cb9cb623",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 61,
        "endChar": 6
      },
      "revId": "de91ca90389e4b41ed27b320a6c43ff56a6d75ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}