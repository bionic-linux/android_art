{
  "comments": [
    {
      "key": {
        "uuid": "fe1dd11b_5611f4ab",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 18
      },
      "lineNbr": 1045,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-08-15T09:40:13Z",
      "side": 1,
      "message": "Why use a load exclusive? Is this what was mentioned the other day, where you try to achieve atomicity?\n\nUnless other code accessing the target memory also use load/store exclusive, I don\u0027t think the \u0027exclusive\u0027 brings anything.\n\nIs what you want to know whether the LDRD is loads the 64 bits atomically? In this case have a look at `ArmInstructionSetFeatures::has_atomic_ldrd_strd_`.",
      "revId": "a8dace7f398e07adb5793748a08ba753e45f98ea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe9071cc_3e17c9a4",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 18
      },
      "lineNbr": 1045,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-08-15T15:27:57Z",
      "side": 1,
      "message": "I am not sure if we\u0027re even supporting anything older than ARMv7, is it ever the case it\u0027s not atomic then (the architecture document seemed to imply it was single-copy atomic always on v7+)?\n\nWe already use LDRD/STRD elsewhere in this file assuming it is atomic.",
      "parentUuid": "fe1dd11b_5611f4ab",
      "revId": "a8dace7f398e07adb5793748a08ba753e45f98ea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e6cd5b9_739340f6",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 18
      },
      "lineNbr": 1045,
      "author": {
        "id": 1109993
      },
      "writtenOn": "2016-08-15T17:27:43Z",
      "side": 1,
      "message": "Ok, I had looked into this at the time of this change, and per the arm instruction manual:\n\n\"LDM, LDC, LDC2, LDRD, STM, STC, STC2, STRD, PUSH, POP, RFE, SRS, VLDM, VLDR, VSTM, and VSTR instructions are executed as a sequence of word-aligned word accesses. Each 32-bit word access is guaranteed to be single-copy atomic. The architecture does not require subsequences of two or more word accesses from the sequence to be single-copy\natomic.\n\nLDRD and STRD accesses to 64-bit aligned locations are 64-bit single-copy atomic as seen by translation table walks\nand accesses to translation tables.\"\n\nFurther down, the manual mentions that this means there are more restrictions on where translation tables are in order for them to meet the atomicity requirements. \n\nTo be safe, I had decided to not assume that ldrd is atomic, since technically it never says that it is atomic in all cases on v7 and on. Perhaps I was too conservative--which would be awesome for me because it would reduce the time this takes pretty significantly.\n\nAlso, in instruction_set_features_arm_test.cc, we perform the following: \n\n  EXPECT_FALSE(arm7_features-\u003eAsArmInstructionSetFeatures()-\u003eHasAtomicLdrdAndStrd());\n\nThis leads me to believe further that I shouldn\u0027t be assuming ldrd/strd are atomic, but again, I would love to be wrong!\n\nDo either of you have more insight on whether or not I can make this assumption given the above?",
      "parentUuid": "fe9071cc_3e17c9a4",
      "revId": "a8dace7f398e07adb5793748a08ba753e45f98ea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e6cd5b9_d305f41c",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 18
      },
      "lineNbr": 1045,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-15T17:34:01Z",
      "side": 1,
      "message": "We do not assume it for plain armv7, but all actual variants we use in practice (stuff like krait) set it to true.\n\nDon\u0027t know whether we want to ditch correctness for legacy chips (sounds OK to me). Worst case, you could leave this as-is and write an equivalent for \"good\" devices, and decide at runtime. Note that at the moment the runtime itself ignores instruction-set-features AFAIK.",
      "parentUuid": "9e6cd5b9_739340f6",
      "revId": "a8dace7f398e07adb5793748a08ba753e45f98ea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e6cd5b9_b36eb894",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 18
      },
      "lineNbr": 1045,
      "author": {
        "id": 1109993
      },
      "writtenOn": "2016-08-15T17:55:50Z",
      "side": 1,
      "message": "Ok, so ldrd sounds ok to use here. If someone else will confirm for me that ldrd is ok to use here since it is a relatively important change (@igor?), I would love to switch to that (will save us time yay!).",
      "parentUuid": "9e6cd5b9_d305f41c",
      "revId": "a8dace7f398e07adb5793748a08ba753e45f98ea",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}