{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc254bb3_366597fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-09-12T15:35:30Z",
      "side": 1,
      "message": "David PTAL. This is the runtime aspect of try catch inlining. There are some compiler/ files but they are the ones related to stack maps.\n\nI added tests for this (see test 2240-), which are included in the compiler part of the topic (https://android-review.googlesource.com/c/platform/art/+/2138475)\n\nVladimir, Nicolas as FYI.",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b8d8c5e_8be23c29",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 14
      },
      "lineNbr": 1343,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "Don\u0027t save it for `!kIsDebugBuild`?",
      "range": {
        "startLine": 1343,
        "startChar": 29,
        "endLine": 1343,
        "endChar": 83
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436c01ac_3ec27f99",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 14
      },
      "lineNbr": 1343,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T14:30:37Z",
      "side": 1,
      "message": "Side note: I always keep thinking that one day we need to add something like SmallVector\u003cT\u003e which stores few elements on stack and resorts to malloc only if there is many elements.\n\nThat would avoid things like this where the cost should in theory be negligible, and yet we have to care now because it is std::vector.",
      "parentUuid": "8b8d8c5e_8be23c29",
      "range": {
        "startLine": 1343,
        "startChar": 29,
        "endLine": 1343,
        "endChar": 83
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "530da4fe_abbca93c",
        "filename": "compiler/optimizing/code_generator.cc",
        "patchSetId": 14
      },
      "lineNbr": 1356,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "drop?",
      "range": {
        "startLine": 1356,
        "startChar": 36,
        "endLine": 1356,
        "endChar": 42
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd62a8bb_0d5edce5",
        "filename": "runtime/oat_quick_method_header.cc",
        "patchSetId": 14
      },
      "lineNbr": 57,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-09-12T15:35:30Z",
      "side": 1,
      "message": "Separated `ToNativeQuickPc` into two separate methods: one for catch handler, and the other one for normal handlers.",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e739dce_acb8804c",
        "filename": "runtime/oat_quick_method_header.cc",
        "patchSetId": 14
      },
      "lineNbr": 57,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T13:31:20Z",
      "side": 1,
      "message": "I would be tempted to put the \u0027Catch\u0027 in method name as well, just for clarity.\n\nOtherwise it seems like single-element array should be equivalent to the scalar overload.",
      "parentUuid": "dd62a8bb_0d5edce5",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a6cda6e_632254d1",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 221,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T14:30:37Z",
      "side": 1,
      "message": "Is the handler method the outermost, and the dex pc the innermost?",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f48029f7_c3a626e2",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 306,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T14:30:37Z",
      "side": 1,
      "message": "Does this have to be equal to catch_depth?  If so, can we DCHECK it?",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb979f04_20abf1e6",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 312,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T14:30:37Z",
      "side": 1,
      "message": "Does this do the expensive dex location decoding just to throw it away?",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b748a3d_015730aa",
        "filename": "runtime/quick_exception_handler.h",
        "patchSetId": 14
      },
      "lineNbr": 111,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T13:31:20Z",
      "side": 1,
      "message": "Should this be `\u0026\u0026`?",
      "range": {
        "startLine": 111,
        "startChar": 32,
        "endLine": 111,
        "endChar": 38
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35fd1cb_52e66fca",
        "filename": "runtime/stack.cc",
        "patchSetId": 14
      },
      "lineNbr": 143,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "a vector",
      "range": {
        "startLine": 143,
        "startChar": 11,
        "endLine": 143,
        "endChar": 17
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57150704_048b7e02",
        "filename": "runtime/stack.h",
        "patchSetId": 14
      },
      "lineNbr": 194,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "ComputeDexPcList?",
      "range": {
        "startLine": 194,
        "startChar": 24,
        "endLine": 194,
        "endChar": 36
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ad07c3f_3cdc019c",
        "filename": "runtime/stack.h",
        "patchSetId": 14
      },
      "lineNbr": 194,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "Nit: add a high-level comment.",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1273ecbe_c95b1204",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 27,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-09-12T15:35:30Z",
      "side": 1,
      "message": "For DCHECK_IMPLIES",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 25
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea1ab09_4210e5a7",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 369,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T14:30:37Z",
      "side": 1,
      "message": "This is inconsistent with the other overload.\n\nGetDexRegisterMapOf(stack_map, inline_info) gets you vregs for the inner method,\n\nbut GetDexRegisterMapOf(stack_map, 1) gets you vregs for both the outer and inner.\n\nIt is also code duplication, the other overload should probably just call this one. (or remove the other one)",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a00a66_c480225d",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 433,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "Add kIsDebugBuild check.",
      "range": {
        "startLine": 431,
        "startChar": 0,
        "endLine": 433,
        "endChar": 9
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb2de533_f96b3baa",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 440,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T14:30:37Z",
      "side": 1,
      "message": "GetInlineInfosOf is not cheap, call it just once.",
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82297775_da7b7ebd",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 441,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "is_found?",
      "range": {
        "startLine": 441,
        "startChar": 13,
        "endLine": 441,
        "endChar": 21
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3e92c70_d31f9693",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 444,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-09-13T13:20:18Z",
      "side": 1,
      "message": "Nit: how about:\n\n```\nif (... !\u003d ...) {\n   is_found \u003d false;\n   break;\n}\n```",
      "range": {
        "startLine": 444,
        "startChar": 10,
        "endLine": 444,
        "endChar": 98
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b02e8ba1_203b9bb2",
        "filename": "runtime/stack_map.h",
        "patchSetId": 14
      },
      "lineNbr": 444,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-09-13T14:30:37Z",
      "side": 1,
      "message": "Maybe.  As-is also looks ok to me.\n\nThe lack of `is_valid \u0026\u003d` makes it look like a bug, but I know it is not.",
      "parentUuid": "c3e92c70_d31f9693",
      "range": {
        "startLine": 444,
        "startChar": 10,
        "endLine": 444,
        "endChar": 98
      },
      "revId": "a1697292467b4165c4eaea6c5b7b39b059b3b008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}