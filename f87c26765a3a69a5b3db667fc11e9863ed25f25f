{
  "comments": [
    {
      "key": {
        "uuid": "bd0ae6c7_e6939991",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-07-31T13:25:43Z",
      "side": 1,
      "message": "Could add something more descriptive to this CL message?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b123294_19836713",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-07-31T13:25:43Z",
      "side": 1,
      "message": "If you don\u0027t intend to add a bug number here, please remove.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 4
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ade81da4_33510d44",
        "filename": "test/480-checker-dead-blocks/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-07-31T13:20:30Z",
      "side": 1,
      "message": "Why?",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "678a0776_cb5a458c",
        "filename": "test/480-checker-dead-blocks/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1327199
      },
      "writtenOn": "2019-07-31T13:22:46Z",
      "side": 1,
      "message": "Please see the comment on the CL from Jul 30 10:30 AM.",
      "parentUuid": "ade81da4_33510d44",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd206dd6_2386835e",
        "filename": "test/480-checker-dead-blocks/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-07-31T13:25:43Z",
      "side": 1,
      "message": "Could you provide us with a link to this CL?",
      "parentUuid": "678a0776_cb5a458c",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "006dba74_2e5f1dc5",
        "filename": "test/480-checker-dead-blocks/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1327199
      },
      "writtenOn": "2019-07-31T13:33:06Z",
      "side": 1,
      "message": "It is originally from Jan 18, https://r8-review.googlesource.com/c/r8/+/29902, but was disabled on Jan 24 due to a bug in ART on Q (b/123284765). Now, reenabled in R8 1.6.17-dev, https://r8-review.googlesource.com/c/r8/+/40900.",
      "parentUuid": "dd206dd6_2386835e",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8804f03d_f7b50a3f",
        "filename": "test/480-checker-dead-blocks/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-07-31T13:37:53Z",
      "side": 1,
      "message": "Please include some of the comment in the commit message.\n\nAre you trying to optimize for code size, hoping to use add-int/2addr rather than add-int/lit8? Do you realize that this can be a bit slower while interpreting as we need to read the vreg from memory (probably L1 cache here but still a few more instructions) rather than decode it from the instruction stream? Do you realize that this puts additional burden on the compiler to recognize that it\u0027s a constant in this context, otherwise it may generate suboptimal code?\n\n(I\u0027m obviously not in favor of this \"constant obfuscation\" that you have implemented in r8.)",
      "parentUuid": "006dba74_2e5f1dc5",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57387d34_8419bb1d",
        "filename": "test/480-checker-dead-blocks/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1327199
      },
      "writtenOn": "2019-07-31T14:39:32Z",
      "side": 1,
      "message": "Both D8 and R8 optimize for code size and has been the entire time. I do not agree that this is \"obfuscating\" constants more than they may already be in the original code. It should generally not be important if someone writes `if (x \u003d\u003d null) return null` or `if (x \u003d\u003d null) return x`.",
      "parentUuid": "8804f03d_f7b50a3f",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69f618fc_ce0e59f3",
        "filename": "test/480-checker-dead-blocks/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-07-31T15:03:16Z",
      "side": 1,
      "message": "You\u0027re insisting on that trivial example with null references but the case here is about mixing `boolean` and `int`. You cannot even write that code in Java:\n\n  boolean tmp;\n  while (tmp \u003d inlineFalse()) {\n    x +\u003d tmp;  // Does not compile.\n  }\n\nBut my objection is that you\u0027re hiding constants from the compiler, potentially preventing optimizations. Just think about this code:\n\n  if (foo() \u003d\u003d 1) {\n    for (int i \u003d 0; i \u003c arr.length; ++i) {\n      do something with arr[i];\n    }\n  }\n\nIf you use the result of `foo()` to replace the constant 1 in `++i`, ART will not recognize the loop as having \"stride 1\" and therefore will not eliminate the bound check on `a[i]` (what if `foo()` is negative?) and also will not be able to vectorize the loop.\n\nAre we now supposed to implement a pass that replaces all uses of a value with a constant in blocks dominated by a block with single predecessor entered when the value equals the constant? It shall never be implemented for older versions of ART, so you\u0027re deliberately impairing performance for a large group of devices. And if you somehow create a little more complicated pattern, are we supposed to go hunting for constants even deeper to undo all your obfuscations?",
      "parentUuid": "57387d34_8419bb1d",
      "range": {
        "startLine": 98,
        "startChar": 6,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7587686_b1f0e71e",
        "filename": "test/536-checker-intrinsic-optimization/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 288,
      "author": {
        "id": 1327199
      },
      "writtenOn": "2019-07-30T08:30:06Z",
      "side": 1,
      "message": "Trailing space.",
      "range": {
        "startLine": 288,
        "startChar": 68,
        "endLine": 288,
        "endChar": 69
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "894a4a2f_9b9b733b",
        "filename": "test/567-checker-compare/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1327199
      },
      "writtenOn": "2019-07-30T08:30:06Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 42
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82ac49a3_8ffc8cb6",
        "filename": "test/567-checker-compare/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-07-31T13:20:30Z",
      "side": 1,
      "message": "Drop all the `doThrow` changes, please. I\u0027ve prepared a separate CL to remove these from the 3 tests: https://android-review.googlesource.com/1093959 .",
      "parentUuid": "894a4a2f_9b9b733b",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 42
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eab5801_289f9149",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1327199
      },
      "writtenOn": "2019-07-30T08:30:06Z",
      "side": 1,
      "message": "Alternatively, we could remove the if-statement from the test. There are more instances below.",
      "range": {
        "startLine": 256,
        "startChar": 2,
        "endLine": 256,
        "endChar": 63
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba2d3cdf_cc3043c9",
        "filename": "test/591-checker-regression-dead-loop/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-07-31T13:20:30Z",
      "side": 1,
      "message": "Why? What code does the new D8/R8 emit for the original code to necessitate this change?",
      "range": {
        "startLine": 28,
        "startChar": 14,
        "endLine": 28,
        "endChar": 15
      },
      "revId": "f87c26765a3a69a5b3db667fc11e9863ed25f25f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}