{
  "comments": [
    {
      "key": {
        "uuid": "367ca807_c3d04a0a",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 671,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T21:10:56Z",
      "side": 1,
      "message": "The elf file setup looks odd. We mmap the whole file and ignore the program headers, then we set the begin_ and end_ to the .rodata. I\u0027d guess that the memory at the .bss offset would actually contain sections like .dynstr, .dynsym, etc.",
      "range": {
        "startLine": 671,
        "startChar": 64,
        "endLine": 671,
        "endChar": 80
      },
      "revId": "46c1950ed2276b0751084f442d479412907b4a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4830f481_30f7c62b",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T21:10:56Z",
      "side": 1,
      "message": "The above check validates that the mapping is contained in the .rodata section. This check is perfectly valid for non-executable ElfOatFile and it clearly passes.\n\nThe `!IsExecutable()` check should therefore be moved here and clear the method_bss_mapping. Only the code below tries to validate the mapping against the BssSize() which has not been initialized correctly for ElfOatFile (i.e. \"oatbss\", \"oatbsslastword\", etc. have not been processed).",
      "revId": "46c1950ed2276b0751084f442d479412907b4a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fe79fef_23174687",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-11-07T21:23:27Z",
      "side": 1,
      "message": "What is the reason to load the mapping? Just to check whether the oat file is somehow corrupted? I don\u0027t really understand the necessity for it when we will ignore it, anyways.",
      "parentUuid": "4830f481_30f7c62b",
      "revId": "46c1950ed2276b0751084f442d479412907b4a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d959016_e851588a",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-15T17:24:51Z",
      "side": 1,
      "message": "The check is part of normal loading of the OatFile and it should be consistent whether loading as executable or non-executable. So I\u0027d limit this fix to what happens under `kIsDebugBuild`.",
      "parentUuid": "1fe79fef_23174687",
      "revId": "46c1950ed2276b0751084f442d479412907b4a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d390b77a_b185e457",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 696,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-11-20T18:55:04Z",
      "side": 1,
      "message": "Except that the BSS isn\u0027t required at all for non-executable running. So I partially disagree, as with this change a system that could boot won\u0027t.",
      "parentUuid": "2d959016_e851588a",
      "revId": "46c1950ed2276b0751084f442d479412907b4a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}