{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f8ed8bd_a6cacf31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-08-28T17:37:02Z",
      "side": 1,
      "message": "Adding Hans to take a look.",
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c65e08bd_c24b581b",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-08-28T17:37:02Z",
      "side": 1,
      "message": "Maybe adding a small wait before this might solve the issue?",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 16
      },
      "fixSuggestions": [
        {
          "fixId": "717d3e17_9d0f45e6",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
              "range": {
                "startLine": 65,
                "startChar": 0,
                "endLine": 65,
                "endChar": 0
              },
              "replacement": "        // Wait for the JIT to finish compiling the method.\n        Thread.sleep(1000);\n\n"
            }
          ]
        }
      ],
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f696d8b_8c41009c",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-08-28T18:13:32Z",
      "side": 1,
      "message": "I would try it without that. I think the missing runFinalization() calls are the problem.",
      "parentUuid": "c65e08bd_c24b581b",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 16
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40889d14_e7a13d7d",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-08-28T17:37:02Z",
      "side": 1,
      "message": "To me it seems like even 5 should have been sufficient. Are you sure there\u0027s nothing else wrong going on?",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "fixSuggestions": [
        {
          "fixId": "248ecbc4_0bea0893",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
              "range": {
                "startLine": 73,
                "startChar": 0,
                "endLine": 74,
                "endChar": 0
              },
              "replacement": "        for (int i \u003d 0; i \u003c 5; ++i) {\n"
            }
          ]
        }
      ],
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d27f46c_8baf7459",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-08-28T18:13:32Z",
      "side": 1,
      "message": "A small number of iterations (maybe 3) of\n\nSystem.gc(); System.runFinalization();\n\nwould be better. Otherwise, there\u0027s probably some risk of running lots of GCs, but not getting around to actually running the cleanup code afterwards.",
      "parentUuid": "40889d14_e7a13d7d",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a5e3f68_5ee1325f",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-08-29T13:50:27Z",
      "side": 1,
      "message": "Thanks, done.\n\nDo you why it works for `141-class-unload`, but not this test [1]? Can `MethodType` instances referenced from `JitCodeCache` cause these failures?\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/test/141-class-unload/src/Main.java;l\u003d102;drc\u003df65b1c4e254b3fcd262ed6f26420d4d13b127709",
      "parentUuid": "3d27f46c_8baf7459",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "717b261d_355e753f",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-08-29T18:16:00Z",
      "side": 1,
      "message": "Great point. Looking at this more closely, I don\u0027t think we\u0027re really looking at the right issue here. Since we\u0027re only waiting for the WeakReference to be cleared, not enqueued, a single GC should probably take care of it. I think we actually clear the WeakReferences before we return from the explicit GC call. And since it\u0027s a WeakReference, not a PhantomReference, there should be no issue with finalizers possibly referring to it.\n\nI wonder if the real issue here is that we somehow end up with a copy of the loader reference in a dex virtual register, so that the GC still considers it live. The usual workround seems to be to put the first half od callDoWork() in a separate $noinline$ method, so that the entire frame goes away before the call to do Unload().\n\nI don\u0027t fully understand why this is non-repeatable. That was more consistent with the original theory. I would keep the current change (which makes more sense than collecting that many times anyway), and create a separate method, and see if that fixes this.\n\nMaybe Santiago has a better ide why we might occasionally keep the load reference, but not consistently?\n\nNote that setting loader to null is a dead assignment to a local, which might be getting optimized out?",
      "parentUuid": "4a5e3f68_5ee1325f",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "597eed1b_4e0939fe",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-04T13:00:00Z",
      "side": 1,
      "message": "I rewrote it in the same way as `141-class-unload` is done (and made some fixes).",
      "parentUuid": "717b261d_355e753f",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce83688f_833fc54e",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-09-04T13:18:06Z",
      "side": 1,
      "message": "I wrote this comment yesterday but I forgot to click send, whoops. Sending it now\n\n\u003e Maybe Santiago has a better ide why we might occasionally keep the load reference, but not consistently?\n\u003e\n\u003e Note that setting loader to null is a dead assignment to a local, which might be getting optimized out?\n\nIt would be nice to be able to take a look at the compiled code to be able to see what\u0027s going on.\n\nI left some comments in the CL that originally added this test (aosp/3145296).\n\n\u003e I rewrote it in the same way as 141-class-unload is done (and made some fixes).\n\nI noticed that tests e.g. 141- would do `Runtime.getRuntime().gc();` and not the `System.gc()` + `System.runFinalization()`. I also noticed that 661- was stopping and restarting the JIT https://cs.android.com/android/platform/superproject/main/+/main:art/test/661-classloader-allocator/src/Main.java;l\u003d24-34;drc\u003d48b40cc97377fe67657b9936ad19395c4218b489 Not sure which alternative is the best, just wanted to point it out.",
      "parentUuid": "717b261d_355e753f",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d75d498_75ac9b88",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-09T15:18:31Z",
      "side": 1,
      "message": "\u003e I noticed that tests e.g. 141- would do Runtime.getRuntime().gc(); and not the System.gc() + System.runFinalization().\n\nThanks, that was unintentional.\n\nThis test unloads class. Will stopping/restart JIT make any difference here?\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:libcore/ojluni/src/main/java/java/lang/System.java;l\u003d1603;drc\u003db4ad9827cceaf1daada4846f8a2840c92ffac0c2",
      "parentUuid": "ce83688f_833fc54e",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb7348cb_a4d9df5a",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-09-09T16:05:28Z",
      "side": 1,
      "message": "\u003e \u003e I noticed that tests e.g. 141- would do Runtime.getRuntime().gc(); and not the System.gc() + System.runFinalization().\n\u003e \n\u003e Thanks, that was unintentional.\n\nYou left the `System.runFinalization`. Was that intentional?\n\n\u003e This test unloads class. Will stopping/restart JIT make any difference here?\n\u003e \n\u003e [1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:libcore/ojluni/src/main/java/java/lang/System.java;l\u003d1603;drc\u003db4ad9827cceaf1daada4846f8a2840c92ffac0c2\n\nNot sure to be honest, it is an old test",
      "parentUuid": "7d75d498_75ac9b88",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eeeb374_f2ac038d",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-18T13:31:14Z",
      "side": 1,
      "message": "\u003e You left the System.runFinalization. Was that intentional?\n\nYes, it was.",
      "parentUuid": "eb7348cb_a4d9df5a",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5becfac_41a153d2",
        "filename": "test/2276-const-method-type-gc-cleanup/src-art/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-09-18T13:34:54Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0eeeb374_f2ac038d",
      "range": {
        "startLine": 73,
        "startChar": 28,
        "endLine": 73,
        "endChar": 30
      },
      "revId": "913e20993923935d92effa4bca1b9885d48f3d08",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}