{
  "comments": [
    {
      "key": {
        "uuid": "f55aabd4_79cf8193",
        "filename": "compiler/optimizing/graph_checker.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-01-06T12:57:36Z",
      "side": 1,
      "message": "Suggestion: you could replace these two lines with:\n\n  bool check_reference_type_info_ \u003d true;\n\n(and avoid the constructor change line 38).",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 128,
        "endChar": 0
      },
      "revId": "1944a362d67478fce61f1244c9fc5bdde3419b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38927a76_d05e2211",
        "filename": "compiler/optimizing/graph_checker.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-01-07T13:20:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f55aabd4_79cf8193",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 128,
        "endChar": 0
      },
      "revId": "1944a362d67478fce61f1244c9fc5bdde3419b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2ba1ec4_2dfafeda",
        "filename": "compiler/optimizing/optimizing_unit_test.h",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-01-06T12:57:36Z",
      "side": 1,
      "message": "Could we simplify this by passing an (optional) Boolean instead of introducing an interface? E.g. something like this:\n\n  bool CheckGraph(check_ref_type_info \u003d true) {\n    GraphChecker checker(graph_, check_ref_type_info);\n    checker.Run();\n    if (!checker.IsValid()) {\n      for (const std::string\u0026 error : checker.GetErrors()) {\n        std::cout \u003c\u003c error \u003c\u003c std::endl;\n      }\n      return false;\n    }\n    return true;\n  }\n\n?",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 259,
        "endChar": 3
      },
      "revId": "1944a362d67478fce61f1244c9fc5bdde3419b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da7e0b56_b86f5d75",
        "filename": "compiler/optimizing/optimizing_unit_test.h",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-01-06T13:42:32Z",
      "side": 1,
      "message": "A problem with this approach is that \u0027CheckGraph(false)\u0027 looks very unclear. It will require code readers to go to the declaration to check what \u0027false\u0027 means. So we need to embed its meaning either using a comment \u0027CheckGraph(/* check_ref_type_info */ false)\u0027 or introducing a bool variable \u0027bool check_ref_type_info \u003d false; CheckGraph(check_ref_type_info)\u0027.\nAnother approach, which I prefer more, is to use an enum:\nenum class GraphSkipCheck {\n  kRefTypeInfo\n};\n\nbool CheckGraph(GraphSkipCheck check);\n\nA use:\n\nCheckGraph(GraphSkipCheck::kRefTypeInfo);\n\n\nAll these approaches have an issue with when additional checks need to be skipped. All existing code will need to be modified.",
      "parentUuid": "a2ba1ec4_2dfafeda",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 259,
        "endChar": 3
      },
      "revId": "1944a362d67478fce61f1244c9fc5bdde3419b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5db2ff4a_60d781df",
        "filename": "compiler/optimizing/optimizing_unit_test.h",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-01-06T15:00:51Z",
      "side": 1,
      "message": "To be honest, the Boolean flag + comment (checked by clang-tidy, see https://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) seems like the best tradeoff to me:\n\n  CheckGraph(/*check_ref_type_info\u003d*/ false)\n\nI think introducing an interface for just one Boolean is overkill here.",
      "parentUuid": "da7e0b56_b86f5d75",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 259,
        "endChar": 3
      },
      "revId": "1944a362d67478fce61f1244c9fc5bdde3419b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e922720e_febc81a9",
        "filename": "compiler/optimizing/optimizing_unit_test.h",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-01-07T13:20:47Z",
      "side": 1,
      "message": "Switched to the bool flag.",
      "parentUuid": "5db2ff4a_60d781df",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 259,
        "endChar": 3
      },
      "revId": "1944a362d67478fce61f1244c9fc5bdde3419b43",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}