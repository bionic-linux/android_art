{
  "comments": [
    {
      "key": {
        "uuid": "172bc674_41103986",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-05-11T14:00:47Z",
      "side": 1,
      "message": "access",
      "range": {
        "startLine": 326,
        "startChar": 68,
        "endLine": 326,
        "endChar": 75
      },
      "revId": "3b3f4267073de4baded567adc73bb33ab0d7ee44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f9f68ac_9019050f",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-10T15:11:51Z",
      "side": 1,
      "message": "Something more eye-popping would be nice, maybe. Clobbering register in Contexts uses kBadGprBase \u003d 0xebad6070.",
      "range": {
        "startLine": 328,
        "startChar": 77,
        "endLine": 328,
        "endChar": 80
      },
      "revId": "3b3f4267073de4baded567adc73bb33ab0d7ee44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07184d43_526d73d5",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-10T15:12:48Z",
      "side": 1,
      "message": "Yeah, but how am I guaranteed that loading from that address will crash?",
      "parentUuid": "0f9f68ac_9019050f",
      "range": {
        "startLine": 328,
        "startChar": 77,
        "endLine": 328,
        "endChar": 80
      },
      "revId": "3b3f4267073de4baded567adc73bb33ab0d7ee44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83b105b2_9cef1290",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-05-10T15:36:30Z",
      "side": 1,
      "message": "I\u0027m just saying that 0x1 isn\u0027t the greatest sentinel. We had enough \"corruption\" before that wrote small integers into unexpected areas.\n\nMaybe we can rely on a SIGBUS for 0xebad6071 being misaligned. Maybe we can explicitly map that single page and mprotect it.\n\n(Anyways, just a comment, not blocking the CL in any way)",
      "parentUuid": "07184d43_526d73d5",
      "range": {
        "startLine": 328,
        "startChar": 77,
        "endLine": 328,
        "endChar": 80
      },
      "revId": "3b3f4267073de4baded567adc73bb33ab0d7ee44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f32389fd_1194aae6",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-10T15:39:59Z",
      "side": 1,
      "message": "I know it\u0027s not the greatest sentinel. But I cannot afford a read to a potentially accessible address, as I want the crash to happen just as if there was no sentinel.\n\nThis is supposedly a class, so reads can be of different size.\n\nBefore I went with 0x1, we\u0027ve chatted with Vladimir if there was another address we could poke into, but didn\u0027t know any. Obviously, I\u0027ll take any better sentinel that would ensure a crash.",
      "parentUuid": "83b105b2_9cef1290",
      "range": {
        "startLine": 328,
        "startChar": 77,
        "endLine": 328,
        "endChar": 80
      },
      "revId": "3b3f4267073de4baded567adc73bb33ab0d7ee44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a925f80_b8e1da2f",
        "filename": "runtime/jit/jit_code_cache.cc",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-10T15:45:38Z",
      "side": 1,
      "message": "On ARM CPUs we\u0027re always running with unaligned access allowed, so only a handful of instructions (for example, exclusive load/store) would fault.",
      "parentUuid": "83b105b2_9cef1290",
      "range": {
        "startLine": 328,
        "startChar": 77,
        "endLine": 328,
        "endChar": 80
      },
      "revId": "3b3f4267073de4baded567adc73bb33ab0d7ee44",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}