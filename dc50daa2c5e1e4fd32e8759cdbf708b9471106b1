{
  "comments": [
    {
      "key": {
        "uuid": "5e56fcc0_e417159c",
        "filename": "runtime/art_method.h",
        "patchSetId": 6
      },
      "lineNbr": 718,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-16T08:13:26Z",
      "side": 1,
      "message": "I think putting \"Enabled\" at the end makes things clearer.",
      "range": {
        "startLine": 718,
        "startChar": 14,
        "endLine": 718,
        "endChar": 40
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20d9f3d5_cd0de6d2",
        "filename": "runtime/art_method.h",
        "patchSetId": 6
      },
      "lineNbr": 718,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-16T14:33:00Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "5e56fcc0_e417159c",
      "range": {
        "startLine": 718,
        "startChar": 14,
        "endLine": 718,
        "endChar": 40
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a59585d9_ae1e540c",
        "filename": "runtime/base/logging.h",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-06-19T18:02:12Z",
      "side": 1,
      "message": "Doesn\u0027t Slow checks imply Fast checks? What does \"Al\"l mean  here?",
      "range": {
        "startLine": 71,
        "startChar": 19,
        "endLine": 71,
        "endChar": 31
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f05ef66a_7c60668e",
        "filename": "runtime/base/logging_test.cc",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-16T14:33:00Z",
      "side": 1,
      "message": "What does it really say? I think you\u0027d want to move this static assert to the parser to ensure every level has parsing coverage.",
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdd22724_dca782b7",
        "filename": "runtime/base/logging_test.cc",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-16T15:06:35Z",
      "side": 1,
      "message": "This isn\u0027t about parser coverage, at all. This is about test coverage here. (Now should I also *add* it there - maybe)\n\nIf I move the check to the parser, then this test won\u0027t break if people don\u0027t extend kLevels...",
      "parentUuid": "f05ef66a_7c60668e",
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1270a853_9c3ab4cb",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 6
      },
      "lineNbr": 1601,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-16T08:13:26Z",
      "side": 1,
      "message": "Probably want a uniform way of naming these tests that a check needs to be enabled.",
      "range": {
        "startLine": 1601,
        "startChar": 20,
        "endLine": 1601,
        "endChar": 48
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1696da43_784ddf4b",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 6
      },
      "lineNbr": 1601,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-16T14:33:00Z",
      "side": 1,
      "message": "+1\n\nhow about \"IsCheckEnabled(ENUM/VARIABLE NAME)\" or similar?\n\n\n    IsCheckEnabled(kToSpaceInvariantChecks) etc.",
      "parentUuid": "1270a853_9c3ab4cb",
      "range": {
        "startLine": 1601,
        "startChar": 20,
        "endLine": 1601,
        "endChar": 48
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "730c8e0a_595a610f",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 6
      },
      "lineNbr": 1601,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-16T15:06:35Z",
      "side": 1,
      "message": "-1 with group discussion.\n\nThat means there needs to be a global database of flags, and except for very few we have tried to strongly avoid that. I seriously prefer to have definitions close to their uses. Otherwise a simple flag change will likely recompile the world.",
      "parentUuid": "1696da43_784ddf4b",
      "range": {
        "startLine": 1601,
        "startChar": 20,
        "endLine": 1601,
        "endChar": 48
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72944cde_a85d39be",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 6
      },
      "lineNbr": 1601,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-16T15:34:54Z",
      "side": 1,
      "message": "Why would it need to recompile the world?\n\nWe already have the flags today, I\u0027m just suggesting they change to be the level instead of a boolean. The level itself would still get runtime checked (i.e. all uses of the flag would get replaced with IsEnabled...(flag) ) .",
      "parentUuid": "730c8e0a_595a610f",
      "range": {
        "startLine": 1601,
        "startChar": 20,
        "endLine": 1601,
        "endChar": 48
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "725741c3_d34db2af",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 6
      },
      "lineNbr": 1601,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-16T16:00:46Z",
      "side": 1,
      "message": "Nicolas combined the uniform naming way w/ a uniform place to collect them. I misunderstood that you didn\u0027t include that part.\n\nNot sure about using the level. I like to have a more clearly named function rather than argument, but that\u0027s just me...",
      "parentUuid": "72944cde_a85d39be",
      "range": {
        "startLine": 1601,
        "startChar": 20,
        "endLine": 1601,
        "endChar": 48
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b074fdd_ad39ae71",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 6
      },
      "lineNbr": 1601,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-16T16:16:18Z",
      "side": 1,
      "message": "It might be less dissonance to just re-use the old variable names. People are already used to them, it will be a smaller mental switch to go to \"if (func(flag))\" from the old \"if (flag)\" and more greppable.\n\nSince the function names are already quite long it\u0027s not really any different (typing-wise) to wrapping it in another function call.\n\n---\nI\u0027d like to hear the reasons for why you might prefer to use a function name?",
      "parentUuid": "725741c3_d34db2af",
      "range": {
        "startLine": 1601,
        "startChar": 20,
        "endLine": 1601,
        "endChar": 48
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3241150e_c5a33c4e",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 6
      },
      "lineNbr": 1601,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-19T15:24:56Z",
      "side": 1,
      "message": "The function name encapsulates any underlying implementation. But I\u0027m fine switching it to a field storing the level.",
      "parentUuid": "6b074fdd_ad39ae71",
      "range": {
        "startLine": 1601,
        "startChar": 20,
        "endLine": 1601,
        "endChar": 48
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73ba6476_26d156d9",
        "filename": "runtime/read_barrier.h",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-06-16T08:13:26Z",
      "side": 1,
      "message": "nit: I\u0027d suggest moving such methods to one place (eg DebugCheckLevel)",
      "range": {
        "startLine": 43,
        "startChar": 28,
        "endLine": 43,
        "endChar": 58
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a904f22_70eea9b3",
        "filename": "runtime/read_barrier.h",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-16T15:06:35Z",
      "side": 1,
      "message": "See my comment on Igor\u0027s post. Against, because I don\u0027t want to recompile the world when I change one of those hard-codings.",
      "parentUuid": "73ba6476_26d156d9",
      "range": {
        "startLine": 43,
        "startChar": 28,
        "endLine": 43,
        "endChar": 58
      },
      "revId": "dc50daa2c5e1e4fd32e8759cdbf708b9471106b1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}