{
  "comments": [
    {
      "key": {
        "uuid": "f247b43c_6721c9ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2016-05-12T19:02:00Z",
      "side": 1,
      "message": "This seems like a workaround to me. Is it a normal exit that causes DCHECK failures? What is the root cause for DCHECK failures?",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 10,
        "endChar": 68
      },
      "revId": "249b4d1a9132338aeb28fcbfa3d31de3b188d9f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f247b43c_a2a8ff8a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-05-12T20:07:39Z",
      "side": 1,
      "message": "Yes, a normal exit causes a DCHECK failure. The DCHECK asserts that a mutex has no owner (being unlocked) in ~Mutex(). An atexit handler calls the destructor for the global Mutexes if we use the normal exit. But a program calls exit via System.exit() in an arbitrary time. In an arbitrary time, it\u0027s possible that one of the mutexes may happen to be locked.",
      "parentUuid": "f247b43c_6721c9ee",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 10,
        "endChar": 68
      },
      "revId": "249b4d1a9132338aeb28fcbfa3d31de3b188d9f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f247b43c_7308af1f",
        "filename": "runtime/runtime_options.def",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2016-05-12T06:57:41Z",
      "side": 1,
      "message": "Where is this code used?",
      "revId": "249b4d1a9132338aeb28fcbfa3d31de3b188d9f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b711ae44_dace856b",
        "filename": "runtime/runtime_options.def",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-05-12T09:02:03Z",
      "side": 1,
      "message": "One line?",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 135,
        "endChar": 75
      },
      "revId": "249b4d1a9132338aeb28fcbfa3d31de3b188d9f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f247b43c_e93cb2d2",
        "filename": "runtime/runtime_options.def",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-05-12T17:29:48Z",
      "side": 1,
      "message": "In Runtime::Init(),\n\n  exit_ \u003d runtime_options.GetOrDefault(Opt::HookExit);",
      "parentUuid": "f247b43c_7308af1f",
      "revId": "249b4d1a9132338aeb28fcbfa3d31de3b188d9f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f247b43c_e913d252",
        "filename": "runtime/runtime_options.def",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-05-12T17:29:48Z",
      "side": 1,
      "message": "As it looks like the original format intends to align the beginning of the second parameters, I\u0027ll keep it that way.",
      "parentUuid": "b711ae44_dace856b",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 135,
        "endChar": 75
      },
      "revId": "249b4d1a9132338aeb28fcbfa3d31de3b188d9f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}