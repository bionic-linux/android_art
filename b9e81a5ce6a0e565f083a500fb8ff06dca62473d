{
  "comments": [
    {
      "key": {
        "uuid": "31c3005d_9424c48e",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-02-02T17:47:24Z",
      "side": 1,
      "message": "This can fail in the case where one of the inputs is HX86LoadFromConstantTable, which has emitted_at_use_site_ true and no output.  How about:\nDCHECK(has_out_location || input-\u003eIsEmittedAtUseSite())?",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 186,
        "endChar": 31
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5116b490_a5ba3e24",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-02-02T17:52:44Z",
      "side": 1,
      "message": "No, that is not enough, as the input has no SSA index.  I think you need to handle this case (IsEmittedAtUseSite) first.  Will confirm",
      "parentUuid": "31c3005d_9424c48e",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 186,
        "endChar": 31
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91d90c41_3fd587de",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-02-02T17:57:58Z",
      "side": 1,
      "message": "There\u0027s nothing wrong with the DCHECK. What this says is that if an instruction expects an input value, the input instruction must produce one.\n\nWhat you need to do is not set the in-location on the input which uses the HX86LoadFromConstantTable in the LocationBuilder. If you look at LocationBuilderX86::VisitAdd, you\u0027ll see that I\u0027ve added code that does exactly that. You should do the same with the instructions you\u0027re modifying in your CL.",
      "parentUuid": "5116b490_a5ba3e24",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 186,
        "endChar": 31
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5116b490_8530e28e",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-02-02T17:58:13Z",
      "side": 1,
      "message": "Working version:\n  for (size_t i \u003d 0, e \u003d current-\u003eInputCount(); i \u003c e; ++i) {\n    HInstruction* input \u003d current-\u003eInputAt(i);\n    if (input-\u003eIsEmittedAtUseSite()) {\n      // `Input` is inlined into `current`. Walk over its inputs and record\n      // uses at `current`.\n      RecursivelyProcessInputs(input, actual_user, live_in);\n    } else {\n      bool has_in_location \u003d current-\u003eGetLocations()-\u003eInAt(i).IsValid();\n      bool has_out_location \u003d input-\u003eGetLocations()-\u003eOut().IsValid();\n\n      if (has_in_location) {\n        DCHECK(has_out_location);\n        DCHECK(input-\u003eHasSsaIndex());\n        // `Input` generates a result used by `current`. Add use and update\n        // the live-in set.\n        input-\u003eGetLiveInterval()-\u003eAddUse(current, /* environment */ nullptr, i, actual_user);\n        live_in-\u003eSetBit(input-\u003eGetSsaIndex());\n      } else if (has_out_location) {\n        // `Input` generates a result but it is not used by `current`.\n      }\n    }\n  }\n\nThis is similar to the version that I had in my code.  You could eliminate the last else if and replace the bools has_in_location and has_out_location with their expression in the only uses of them",
      "parentUuid": "5116b490_a5ba3e24",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 186,
        "endChar": 31
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1b5e8da_7a10f92b",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-03T08:43:56Z",
      "side": 1,
      "message": "Add a \u003c\u003c that would explain why it must have an out location.",
      "range": {
        "startLine": 186,
        "startChar": 6,
        "endLine": 186,
        "endChar": 31
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91d90c41_3fd027d5",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-03T08:43:56Z",
      "side": 1,
      "message": "maybe ditto",
      "range": {
        "startLine": 187,
        "startChar": 6,
        "endLine": 187,
        "endChar": 35
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1d6100b_404b4e63",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-03T08:43:56Z",
      "side": 1,
      "message": "input",
      "range": {
        "startLine": 188,
        "startChar": 10,
        "endLine": 188,
        "endChar": 15
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1b8e4d6_59e8a331",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-03T08:43:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 193,
        "startChar": 10,
        "endLine": 193,
        "endChar": 15
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cf0471_6144d633",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-03T08:43:56Z",
      "side": 1,
      "message": "input",
      "range": {
        "startLine": 195,
        "startChar": 10,
        "endLine": 195,
        "endChar": 15
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1cc087f_a2fb3e29",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-03T08:43:56Z",
      "side": 1,
      "message": "We should probably also DCHECK that the input is not a phi, otherwise loop phi could send us to infinite loop.",
      "range": {
        "startLine": 197,
        "startChar": 6,
        "endLine": 197,
        "endChar": 42
      },
      "revId": "b9e81a5ce6a0e565f083a500fb8ff06dca62473d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}