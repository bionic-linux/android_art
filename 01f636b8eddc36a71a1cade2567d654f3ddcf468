{
  "comments": [
    {
      "key": {
        "uuid": "b6b19df3_b73b8890",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1464,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-10-26T13:58:15Z",
      "side": 1,
      "message": "Load aquire seems a better solution to me. Alternatively DMB ISHLD after the ldr would also work.",
      "range": {
        "startLine": 1452,
        "startChar": 0,
        "endLine": 1464,
        "endChar": 21
      },
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6ceb575_2ad45e1b",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1464,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-26T18:27:44Z",
      "side": 1,
      "message": "My measurement indicated this \u0027fake dependence\u0027 approach was faster than the dmb ishld + dmb ishst approach (by ~10-20% on arm32 at least). Better in what sense?",
      "parentUuid": "b6b19df3_b73b8890",
      "range": {
        "startLine": 1452,
        "startChar": 0,
        "endLine": 1464,
        "endChar": 21
      },
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f69a3588_e1924696",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1464,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-10-27T11:20:46Z",
      "side": 1,
      "message": "Load acquire and store release have a finer granularity when compared to their ldr/str + dmbs equivalents, regarding memory ordering.\n\nFuture CPU implementations might decide to exploit this and to optimise even further the acquire-release path.\n\nTherefore the acuqire-release path seems better to me.\n\nFor curiosity what have you measure this on?",
      "parentUuid": "f6ceb575_2ad45e1b",
      "range": {
        "startLine": 1452,
        "startChar": 0,
        "endLine": 1464,
        "endChar": 21
      },
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96df3923_dbccacc1",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1464,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-27T17:26:43Z",
      "side": 1,
      "message": "Serban, there are three things we are comparing here. 1) ldr + the \u0027fake dependence\u0027 eor/add + no dmb (as is in this CL currently), 2) ldra, 3) ldr+dmb ishld. Are you saying that 2) is better than 3) or that 2) and 3) are better than 1) or something else?\n\nThe measurement was on a Nexus 5, which uses the arm32 version of this code, where 1) was faster than 3) for me.",
      "parentUuid": "f69a3588_e1924696",
      "range": {
        "startLine": 1452,
        "startChar": 0,
        "endLine": 1464,
        "endChar": 21
      },
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6199d10_375f3851",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1464,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-10-29T11:50:59Z",
      "side": 1,
      "message": "Sorry for the confusion. What I am saying is that 2) should always be preferred over 3), and as I mentioned future CPU versions will probably optimise this even further.\n\nThe comparison between 1) and 2) is debatable. The best way of comparing is writing a very directed ubenchmark, and even so there are CPU variants out there that decided to implement 2) as 3) for simplicity.\n\nTherefore I think 1), the variant that you are currently using is the best in this case.",
      "parentUuid": "96df3923_dbccacc1",
      "range": {
        "startLine": 1452,
        "startChar": 0,
        "endLine": 1464,
        "endChar": 21
      },
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "769c85d8_07710a0d",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1464,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-29T17:59:16Z",
      "side": 1,
      "message": "Agreed. Thanks.",
      "parentUuid": "b6199d10_375f3851",
      "range": {
        "startLine": 1452,
        "startChar": 0,
        "endLine": 1464,
        "endChar": 21
      },
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36920d67_6b7e819d",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1470,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-10-26T13:58:15Z",
      "side": 1,
      "message": "#if THREAD_LOCAL_ALLOC_STACK_END_OFFSET !\u003d (THREAD_LOCAL_ALLOC_STACK_TOP_OFFSET + __SIZEOF_POINTER__)\n#error \"The assumption below that we can use ldrd from the STACK_TOP is invalid.\"\n#endif\n\nldrd, x3, x4, [xSELF, #THREAD_LOCAL_ALLOC_STACK_TOP_OFFSET]",
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76d48537_70d04e53",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1470,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-26T18:27:44Z",
      "side": 1,
      "message": "Can ldrd load two 64-bit words?",
      "parentUuid": "36920d67_6b7e819d",
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16b509da_f4d9787c",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1470,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-26T18:50:30Z",
      "side": 1,
      "message": "Serban probably meant ldp.",
      "parentUuid": "76d48537_70d04e53",
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6d8bd3b_99f94bed",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1470,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-26T22:15:44Z",
      "side": 1,
      "message": "ldp does not seems to work as the offset is out of the supported range.\n\nart/runtime/arch/arm64/quick_entrypoints_arm64.S:1474:23: error: index must be a multiple of 8 in range [-512, 504].\n    ldp x3, x4, [x19, #(((128 + 150 * 8) + 3 * 8) + 34 * 8)]",
      "parentUuid": "16b509da_f4d9787c",
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56b5c1f6_5c4f9d53",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1470,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-10-27T11:20:46Z",
      "side": 1,
      "message": "I did mean ldp. Sorry for the confusion.",
      "parentUuid": "b6d8bd3b_99f94bed",
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b04d09_5b3e83f2",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1531,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-10-26T13:58:15Z",
      "side": 1,
      "message": "And with the above dmb this can be an dmb ishst",
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96cad9dc_e9d931e1",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 1
      },
      "lineNbr": 1531,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-10-28T19:01:33Z",
      "side": 1,
      "message": "That\u0027s what Hiroshi started with.  This does seem faster for now, in a place where it matters.  We should probably revisit once we have a faster acquire load implementation.\n\nI think we all agree that the acquire load would be cleaner. But in spite of my reputation for hating performance :-), I think that wins here.",
      "parentUuid": "36b04d09_5b3e83f2",
      "revId": "01f636b8eddc36a71a1cade2567d654f3ddcf468",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}