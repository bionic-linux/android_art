{
  "comments": [
    {
      "key": {
        "uuid": "3cc8f574_bc8fe9d3",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1778,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-03-13T19:43:37Z",
      "side": 1,
      "message": "shouldn\u0027t this be the same situation as the new enter_interpreter block below?",
      "range": {
        "startLine": 1778,
        "startChar": 5,
        "endLine": 1778,
        "endChar": 81
      },
      "revId": "fcdcb0c4bb5c4fad4846f7ae81d9153021468123",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cc5f15c_b85d35b4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1778,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-13T22:20:40Z",
      "side": 1,
      "message": "This is handled as the block below applies to methods that hit this branch.\n\nThe block is down below because we also need to fix when the native method is static (the case of the top branch).",
      "parentUuid": "3cc8f574_bc8fe9d3",
      "range": {
        "startLine": 1778,
        "startChar": 5,
        "endLine": 1778,
        "endChar": 81
      },
      "revId": "fcdcb0c4bb5c4fad4846f7ae81d9153021468123",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb3e9f9_2034905d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1796,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-03-13T19:43:37Z",
      "side": 1,
      "message": "We shouldn\u0027t expect to link methods twice should we?",
      "range": {
        "startLine": 1796,
        "startChar": 0,
        "endLine": 1796,
        "endChar": 54
      },
      "revId": "fcdcb0c4bb5c4fad4846f7ae81d9153021468123",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cc8f574_8563acec",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1796,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-13T22:20:40Z",
      "side": 1,
      "message": "Changed to a DCHECK.",
      "parentUuid": "5cb3e9f9_2034905d",
      "range": {
        "startLine": 1796,
        "startChar": 0,
        "endLine": 1796,
        "endChar": 54
      },
      "revId": "fcdcb0c4bb5c4fad4846f7ae81d9153021468123",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb3e9f9_a047c0db",
        "filename": "runtime/entrypoints/quick/quick_trampoline_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 1507,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-03-13T19:43:37Z",
      "side": 1,
      "message": "DCHECK(self-\u003eIsExceptionPending());\nI\u0027m fine with duplication in debug builds for the sake of readability and correctness. If the check were removed from artFindNativeMethod then we could be broken here.",
      "range": {
        "startLine": 1507,
        "startChar": 6,
        "endLine": 1507,
        "endChar": 57
      },
      "revId": "fcdcb0c4bb5c4fad4846f7ae81d9153021468123",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cc8f574_aa1b17ce",
        "filename": "runtime/entrypoints/quick/quick_trampoline_entrypoints.cc",
        "patchSetId": 2
      },
      "lineNbr": 1507,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-13T22:20:40Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "5cb3e9f9_a047c0db",
      "range": {
        "startLine": 1507,
        "startChar": 6,
        "endLine": 1507,
        "endChar": 57
      },
      "revId": "fcdcb0c4bb5c4fad4846f7ae81d9153021468123",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}