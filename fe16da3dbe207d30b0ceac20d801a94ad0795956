{
  "comments": [
    {
      "key": {
        "uuid": "85656bf7_09828903",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-09-23T06:56:26Z",
      "side": 1,
      "message": "What is libbase, what is the motivation for using libbase, and what are the important points I, as an ART developer, should know about how this changes logging in ART moving forward?\n\nI would like to see the answers to these questions in the commit message.",
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0938fd9_dad5040b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-23T16:08:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85656bf7_09828903",
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85656bf7_4978811b",
        "filename": "runtime/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-09-23T06:56:26Z",
      "side": 1,
      "message": "more easily",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 28,
        "endChar": 36
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0938fd9_3ae6e841",
        "filename": "runtime/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-23T15:58:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85656bf7_4978811b",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 28,
        "endChar": 36
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85656bf7_491c01dc",
        "filename": "runtime/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2016-09-23T09:00:48Z",
      "side": 1,
      "message": "It might be \"nice to have\" a corresponding dummy stream that had no-ops for the overloads of operator\u003c\u003c to avoid doing the string manipulation work for discarded messages.",
      "range": {
        "startLine": 95,
        "startChar": 7,
        "endLine": 95,
        "endChar": 20
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0938fd9_dae9847c",
        "filename": "runtime/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-23T14:49:29Z",
      "side": 1,
      "message": "That\u0027s non-trivial, see line 100.\n\nLOG_STREAM_S returns an std::ostream so the types won\u0027t match\n\n   BOOL ? OSTREAM : NOT_OSTREAM\n\nwill give a compilation error\n\nso we\u0027d have to wrap both of this with\n\n   BOOL ? WRAPPED_STREAM(OSTREAM) : WRAPPED_STREAM(NONE)\n\nor similar. I\u0027m not sure if that would work either , it depends on what type the call sites of that macro expect.",
      "parentUuid": "85656bf7_491c01dc",
      "range": {
        "startLine": 95,
        "startChar": 7,
        "endLine": 95,
        "endChar": 20
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85656bf7_a94edd63",
        "filename": "runtime/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2016-09-23T15:51:04Z",
      "side": 1,
      "message": "Line 100 expands to a statement that conditionally calls LoggingDummyMessage::GetStream().\n\nThis method returns a reference to a std::ostream. The suggestion was to change the type of LoggingDummyMessage::dummy_ to an entirely new flavor of ostream class that simply discards the output without buffering. No wrapper, no type mismatch.",
      "parentUuid": "b0938fd9_dae9847c",
      "range": {
        "startLine": 95,
        "startChar": 7,
        "endLine": 95,
        "endChar": 20
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0938fd9_1a012cde",
        "filename": "runtime/base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-23T15:58:27Z",
      "side": 1,
      "message": "I think it is possible. LoggingDummyMessage is in the end a wrapper to make the ostringstring look like an ostream.\n\nHowever, the whole setup is intentional, as it retains old behavior. E.g., we have tests that are configured to do this with LOG(INFO) but have a comment that says \"test dumping\" - which would be totally filtered.",
      "parentUuid": "b0938fd9_dae9847c",
      "range": {
        "startLine": 95,
        "startChar": 7,
        "endLine": 95,
        "endChar": 20
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85656bf7_297d4d0b",
        "filename": "runtime/jni_env_ext-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-09-23T06:56:26Z",
      "side": 1,
      "message": "Is this TODO for a later CL, or did you mean to re-enable it in this CL?",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 32
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0938fd9_5ae3b430",
        "filename": "runtime/jni_env_ext-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-23T15:58:27Z",
      "side": 1,
      "message": "Thanks, done.",
      "parentUuid": "85656bf7_297d4d0b",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 35,
        "endChar": 32
      },
      "revId": "fe16da3dbe207d30b0ceac20d801a94ad0795956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}