{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "74f4d2dc_8e1cae52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "I think the custom is to line break commit messages at 72 columns.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 109
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3403e63_64c69b5e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-10-20T15:06:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74f4d2dc_8e1cae52",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 109
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4edfb152_00c12851",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "Please test art/build/apex/runtests.sh as well. I suspect you\u0027ll need to update art/build/apex/art_apex_test.py.",
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd7710b_a5ccccff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-20T14:08:25Z",
      "side": 1,
      "message": "Please verify that tests work in the chroot setup following https://cs.android.com/android/platform/superproject/+/master:art/test/README.chroot.md on host and target on master-art, including gtests, run tests, libcore tests and JDWP tests.",
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2869f00_d81f6817",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "Why do dependent libs need these headers?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 42,
        "endChar": 6
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6897b5f_eb2eef5b",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-10-20T15:06:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2869f00_d81f6817",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 42,
        "endChar": 6
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "283d02f6_499bd474",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "Please document the purpose of these dependencies defaults.",
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c22a32a6_26e22eda",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-10-20T15:06:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "283d02f6_499bd474",
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9d05a78_643b4b6a",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "There\u0027s already an `ART_TARGET` define that can be used instead of this.",
      "range": {
        "startLine": 253,
        "startChar": 8,
        "endLine": 254,
        "endChar": 41
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d356a3aa_3bfd2a4c",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-10-20T15:06:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9d05a78_643b4b6a",
      "range": {
        "startLine": 253,
        "startChar": 8,
        "endLine": 254,
        "endChar": 41
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50c9bfff_b1974c2c",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 287,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "What\u0027s the reason for this? Isn\u0027t it a dependency inversion?",
      "range": {
        "startLine": 287,
        "startChar": 8,
        "endLine": 287,
        "endChar": 25
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d23b32fb_9b07a536",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 287,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-10-19T19:05:21Z",
      "side": 1,
      "message": "There\u0027s no inversion here. \nPreviously `libart-compiler` was linking to `libart` dynamically.\nAfter the name change `libart` -\u003e `libart-runtime` this dependency still holds.\nThe only thing I\u0027ve changed is the type of linking from dynamic to static.\nSince `libart-compiler` will always be built as a static library it shouldn\u0027t matter much, but leaving `libart-runtime` in `shared_libs` would force the build of dynamic `libart-runtime`, which is not used anywhere.",
      "parentUuid": "50c9bfff_b1974c2c",
      "range": {
        "startLine": 287,
        "startChar": 8,
        "endLine": 287,
        "endChar": 25
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f8c539_242b750b",
        "filename": "compiler/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 287,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-20T14:08:25Z",
      "side": 1,
      "message": "So it\u0027s a cyclic dependency - one at compile time and the opposite at runtime. But it\u0027s not surprising and probably not something we feasibly can avoid.\n\nHowever, doesn\u0027t this mean the code from `libart-runtime` that gets linked into `libart-compiler` also gets linked in again directly into `libart`? Symbols aren\u0027t deduped in static linking as nicely as they are for shared libs.\n\nSo to avoid that it seems necessary to both make this `whole_static_libs` and drop `libart-runtime` as a direct `libart` dependency. However, that still seems error prone to me. I think it\u0027s better to avoid this static library altogether and instead put it all into a defaults that\u0027s used in `libart` so that it all gets linked together in one pass.\n\nThat defaults could be the `libart-compiler_dependencies` you introduced above, couldn\u0027t it? I.e. it would only go into `libart` and `libart-compiler_static_defaults`, assuming it gets reinstated as I suggested elsewhere.",
      "parentUuid": "d23b32fb_9b07a536",
      "range": {
        "startLine": 287,
        "startChar": 8,
        "endLine": 287,
        "endChar": 25
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27c00712_11e3de93",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "This isn\u0027t a host-vs-target issue. I think it was excluded because in completely static builds where the binary doesn\u0027t have a runtime linker, `dlopen` doesn\u0027t work.\n\nWe shouldn\u0027t need to do that anywhere, but unfortunately there are still dex2oats and dexdumps. They\u0027re legacy things that should be removed (b/172063604).\n\nThe problem with your change here is that it affects all host builds, not just dex2oats and dexdumps, so they\u0027ll regress in this regard. I don\u0027t know how significant that is. If it isn\u0027t, then it\u0027s ok to do this and leave a TODO(b/172063604) about it. Otherwise I don\u0027t see any solution without addressing that ticket first, although that shouldn\u0027t be too hard, given that hansson@ recently got rid of the external dependencies on dex2oats.",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 131,
        "endChar": 80
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f9cc44a_3724ab09",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-10-19T19:05:21Z",
      "side": 1,
      "message": "My understanding is this issue indeed is host-vs-target.\nWe don\u0027t need to use `dlopen` in static builds because functions from `libart-disassembler` are accessible directly.\nFor target builds we don\u0027t want to pay the price of linking to `libart-disassembler` until we actually need it.\n\nWhat kind of regression this would introduce? From what I\u0027ve found:\n`dex2oat` -\u003e (host) static_libs: `libdex2oat_static` -\u003e `libart-compiler_static_defaults` -\u003e `libart-disassembler_static_defaults`\n`oatdump` -\u003e (host) static_libs: `liboatdump_static` -\u003e `libart-disassembler_static_defaults`\n\nAnd in `libart-disassembler_static_defaults`:\n```\nwhole_static_libs: [\n    \"libart-disassembler\",\n```\nSame goes for dex2oatd and oatdumpd.\nThis means that host builds of dex2oat(d) and oatdump(d) don\u0027t need to use `dlopen`, since `libart-disassembler` should be available anyway.",
      "parentUuid": "27c00712_11e3de93",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 131,
        "endChar": 80
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "796f8582_09cdb1c1",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-20T14:08:25Z",
      "side": 1,
      "message": "There\u0027s also dalvikvm, which doesn\u0027t link ART libs statically. It\u0027s also a fragile assumption that we continue to link dex2oat and oatdump on host this way.\n\nYou bring up a good point though - we need to account for that `libart-disassembler` is linked either statically or not, and that depends on the final binary linkage. Best would be if it can be done at runtime here, so that `dlopen` is only called if `libart-disassembler` hasn\u0027t been linked statically. One possibility is to check a symbol in it with `dlsym` first, but then that symbol needs to exported to the symbol table even when it\u0027s linked statically. Hopefully there\u0027s a better way.\n\nThen on top of that the calls to both `dlsym` and `dlopen` need to be #ifdef\u0027ed out if the build is fully static, which is the messy bit discussed earlier.",
      "parentUuid": "6f9cc44a_3724ab09",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 131,
        "endChar": 80
      },
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a86b848_563150f2",
        "filename": "runtime/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 658,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-10-19T17:58:53Z",
      "side": 1,
      "message": "Doesn\u0027t this comment still belong on `libart`?",
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a38ba605_83809da5",
        "filename": "runtime/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 658,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-10-20T15:06:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a86b848_563150f2",
      "revId": "8225c2008ef09cff6152b34778a86126762cda29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}