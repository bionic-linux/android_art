{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f37ca166_d0dcac9e",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 7
      },
      "lineNbr": 196,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-03-21T11:11:37Z",
      "side": 1,
      "message": "For a follow up CL: we are missing this check in `Riscv64Assembler::CAddi16Sp`  https://cs.android.com/android/platform/superproject/main/+/main:art/compiler/utils/riscv64/assembler_riscv64.cc;l\u003d996-999;drc\u003da24ffcd41360ed6f6d2fb984041237495e39f7f2",
      "range": {
        "startLine": 196,
        "startChar": 33,
        "endLine": 196,
        "endChar": 50
      },
      "revId": "6215419bfe6365905a79a438a2bd769fc584d0b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f576d75_28eb2353",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 7
      },
      "lineNbr": 196,
      "author": {
        "id": 3190653
      },
      "writtenOn": "2024-03-21T12:04:52Z",
      "side": 1,
      "message": "Added https://android-review.googlesource.com/c/platform/art/+/3008266/2",
      "parentUuid": "f37ca166_d0dcac9e",
      "range": {
        "startLine": 196,
        "startChar": 33,
        "endLine": 196,
        "endChar": 50
      },
      "revId": "6215419bfe6365905a79a438a2bd769fc584d0b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "747aab7a_4ab59e45",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 7
      },
      "lineNbr": 314,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-03-21T11:11:37Z",
      "side": 1,
      "message": "There are also the cases of e.g. `Add(rd, rd, x0)` which would be `CNop()` (i.e. rd \u003d\u003d rs1, and rs2 being zero). Not sure if we can make this a bit more generic or if we just add more cases.\n\nI am thinking adding in line 298 something like:\n```\nconst bool rs1_is_zero \u003d rs1 \u003d\u003d Zero;\nconst bool rs2_is_zero \u003d rs1 \u003d\u003d Zero;\nconst bool rs1_is_rd \u003d rs1 \u003d\u003d Zero;\nconst bool rs2_is_rd \u003d rs1 \u003d\u003d Zero;\n```\n\nand then doing the cases. Given that `rs1_is_zero` and `rs2_is_zero` can\u0027t be true at the same time we would have 8 cases. For example `rs1_is_rd` and `rs2_is_rd` could turn into a shift (or even just when they are equal and not necessarily rd)\n\nAlso, why are we not converting the case of `Add(rd, zero, zero)`?",
      "revId": "6215419bfe6365905a79a438a2bd769fc584d0b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b78fc87_f0483796",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 7
      },
      "lineNbr": 314,
      "author": {
        "id": 3190653
      },
      "writtenOn": "2024-03-21T11:35:58Z",
      "side": 1,
      "message": "\u003e Also, why are we not converting the case of Add(rd, zero, zero)?\n\nIt\u0027s going to be converted into `cmv(rd, zero)`. Do you have some other conversion in mind? \n\n\u003e could turn into a shift\n\nI was thinking we should follow the clang conversion rules for testing purposes.",
      "parentUuid": "747aab7a_4ab59e45",
      "revId": "6215419bfe6365905a79a438a2bd769fc584d0b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e05f6581_ef4c16b1",
        "filename": "compiler/utils/riscv64/assembler_riscv64.cc",
        "patchSetId": 7
      },
      "lineNbr": 314,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-03-21T12:58:47Z",
      "side": 1,
      "message": "\u003e \u003e Also, why are we not converting the case of Add(rd, zero, zero)?\n\u003e \n\u003e It\u0027s going to be converted into `cmv(rd, zero)`. Do you have some other conversion in mind? \n\nThe line 297 is asking for `rs1 !\u003d Zero || rs2 !\u003d Zero`. Is that conversion happening some place else?\n\n\u003e \n\u003e \u003e could turn into a shift\n\u003e \n\u003e I was thinking we should follow the clang conversion rules for testing purposes.\n\nAck, maybe a comment would be nice explaining why we don\u0027t optimize it.",
      "parentUuid": "3b78fc87_f0483796",
      "revId": "6215419bfe6365905a79a438a2bd769fc584d0b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85aa870e_34e2c315",
        "filename": "compiler/utils/riscv64/assembler_riscv64_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-03-21T11:11:37Z",
      "side": 1,
      "message": "It might be a good idea for a future cleanup to generate these strings based on `kExcludedExtensions`. Not sure how many more extensions we will support in the future but if we start supporting a new one this string will be outdated.",
      "range": {
        "startLine": 98,
        "startChar": 29,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "6215419bfe6365905a79a438a2bd769fc584d0b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}