{
  "comments": [
    {
      "key": {
        "uuid": "569062ca_219fa8d2",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1331,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-13T10:52:43Z",
      "side": 1,
      "message": "GenerateTestAndBranch() allows\n\n    true_fallthrough \u003d\u003d true\n    true_target \u003d\u003d nullptr\n    false_falthrough \u003d\u003d false\n    false_target !\u003d null\n\nand then we could call GenerateCompareTestAndBranch() with true_target \u003d\u003d nullptr which is invalid.\n\nThis discrepancy seems to be at the API level, GenerateTestAndBranch() taking the true_fallthrough argument and GenerateCompareTestAndBranch() not having such parameter.",
      "range": {
        "startLine": 1331,
        "startChar": 6,
        "endLine": 1331,
        "endChar": 92
      },
      "revId": "782ea1f833ce80ee990e006bf31947508893cf7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "569062ca_61a9b0fc",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1331,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-13T11:06:55Z",
      "side": 1,
      "message": "Well spotted, you have a keen eye for details, sir. This comes down to how HIf and HDeoptimize call the function and what conditions they might have. Hence the DCHECKs at the top of GenerateTestAndBranch and GenerateCompareTestAndBranch.\n\nHIf will always provide non-null targets. So no problem there. HSelect will be the same story.\n\nHDeoptimize always calls this with:\n- true_branch !\u003d nullptr\n- false_branch \u003d\u003d nullptr\n- true_fallthrough \u003d\u003d false\n- false_fallthrough \u003d\u003d true\n\nThat passes the DCHECKs at the top of GenerateTestAndBranch but would fail it entered GenerateCompareTestAndBranch. However, it will never do that because the condition on HDeoptimize is either an integer comparison or a constant.\n\nDo you have an API change in mind that would make this more obvious?",
      "parentUuid": "569062ca_219fa8d2",
      "range": {
        "startLine": 1331,
        "startChar": 6,
        "endLine": 1331,
        "endChar": 92
      },
      "revId": "782ea1f833ce80ee990e006bf31947508893cf7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36220e8b_48f3ff06",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1331,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-13T11:42:31Z",
      "side": 1,
      "message": "What about dropping the true_fallthrough and false_fallthrough parameters and just declaring that nullptr means fallthrough? If the function needs to branch to the fallthrough target, it can use a local Label.\n\nAnd we should actually handle the \"true fallthrough\" case in GenerateCompareTestAndBranch(). That would make it future-proof and consistent with other cases around here.",
      "parentUuid": "569062ca_61a9b0fc",
      "range": {
        "startLine": 1331,
        "startChar": 6,
        "endLine": 1331,
        "endChar": 92
      },
      "revId": "782ea1f833ce80ee990e006bf31947508893cf7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36220e8b_081027d7",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1331,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-13T12:03:26Z",
      "side": 1,
      "message": "We cannot do that because CompareGenerateTestAndBranch generates a decision tree where it branches into the fallthrough branch (early exit). The false_fallthrough bool is there to prevent generating the very last jump.\n\nI agree that that code could be refactored in the same manner, but that\u0027s a more complicated job beyond the scope of this CL.",
      "parentUuid": "36220e8b_48f3ff06",
      "range": {
        "startLine": 1331,
        "startChar": 6,
        "endLine": 1331,
        "endChar": 92
      },
      "revId": "782ea1f833ce80ee990e006bf31947508893cf7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "569062ca_61d7f06e",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1331,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-13T12:32:38Z",
      "side": 1,
      "message": "As I said, if you need to branch to the fallthrough, create a local Label.\n\n    Label fallthrough;\n    if (false_target \u003d\u003d nullptr) { false_target \u003d \u0026fallthrough; }\n    ...\n    if (fallthrough.IsLinked()) { __ Bind(\u0026fallthrough); }",
      "parentUuid": "36220e8b_081027d7",
      "range": {
        "startLine": 1331,
        "startChar": 6,
        "endLine": 1331,
        "endChar": 92
      },
      "revId": "782ea1f833ce80ee990e006bf31947508893cf7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "569062ca_41bbd400",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1331,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-11-13T16:42:12Z",
      "side": 1,
      "message": "Fair enough, check out PS4. It\u0027s actually quite neat, except for ARM64 but I don\u0027t want to extract the FP comparison to a separate function...",
      "parentUuid": "569062ca_61d7f06e",
      "range": {
        "startLine": 1331,
        "startChar": 6,
        "endLine": 1331,
        "endChar": 92
      },
      "revId": "782ea1f833ce80ee990e006bf31947508893cf7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}