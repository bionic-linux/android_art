{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f4aeeba7_ac7f806e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "(This is the final set of comments.)",
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc0b4891_b3ad9c45",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 853,
      "author": {
        "id": 1168158
      },
      "writtenOn": "2021-05-06T17:24:49Z",
      "side": 1,
      "message": "\"ExtraDescriptor\" seems to be the only extra information compared with the old version profile besides the structure changes, right? May I ask what\u0027s \"ExtraDescriptor\" for?",
      "range": {
        "startLine": 853,
        "startChar": 5,
        "endLine": 853,
        "endChar": 21
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca226fdc_b832b8a5",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 853,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "See comment for `kExtraDescriptors` starting on line 198.",
      "parentUuid": "cc0b4891_b3ad9c45",
      "range": {
        "startLine": 853,
        "startChar": 5,
        "endLine": 853,
        "endChar": 21
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b23011d_88561f42",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 853,
      "author": {
        "id": 1168158
      },
      "writtenOn": "2021-05-11T02:10:49Z",
      "side": 1,
      "message": "Sorry I mean how the \"ExtraDescriptor\" will be used in dex2oat? Will it be used for any optimization? Because the profile will aggregate methods/classes in method/class section and filter them based on the count. How should it handle \"ExtraDescriptor\"? Shall we just ignore all of them or union them?",
      "parentUuid": "ca226fdc_b832b8a5",
      "range": {
        "startLine": 853,
        "startChar": 5,
        "endLine": 853,
        "endChar": 21
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a500c321_9f73d11c",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 853,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T09:48:20Z",
      "side": 1,
      "message": "dex2oat is fetching descriptors as strings using `GetClassDescriptors()` which has been updated to use `GetTypeDescriptor()` and that checks `if (type_index.index_ \u003c num_type_ids)` and returns either a descriptor from the dex file, or an \"extra descriptor\". The inliner similarly calls `GetTypeDescriptor()` for inline caches.\n\nWhen aggregating profiles, all type indexes where `type_index.index_ \u003e\u003d num_type_ids` are referencing the type with the descriptor `extra_descriptors_[type_index.index_ - num_type_ids]`. As the array of extra descriptors can differ between profiles, these need to be grouped based on the descriptor string instead of the numeric type index. When some extra descriptor does not reach the threshold for inclusion in the combined profile, it does not need to be written to the file (unless referenced by an inline cache that passed the threshold for inclusion).",
      "parentUuid": "2b23011d_88561f42",
      "range": {
        "startLine": 853,
        "startChar": 5,
        "endLine": 853,
        "endChar": 21
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5546b978_de758988",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 853,
      "author": {
        "id": 1168158
      },
      "writtenOn": "2021-05-11T17:19:14Z",
      "side": 1,
      "message": "The non-deterministic of the extra descriptor index makes the merging of app profile very tricky. Could we use the fixed index of the extra descriptor in the dex files instead? Maybe an array of (index, extra descriptor) pairs?",
      "parentUuid": "a500c321_9f73d11c",
      "range": {
        "startLine": 853,
        "startChar": 5,
        "endLine": 853,
        "endChar": 21
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19fb70d4_522e0403",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 1051,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Why flush here and not just at the end?\n\nAnd why flush explicitly at all, is it what we usually do when writing to file?",
      "range": {
        "startLine": 1049,
        "startChar": 0,
        "endLine": 1051,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20d76851_fe2dba65",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 1051,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "I\u0027d prefer to avoid bad files with valid headers, so we write data, then flush, then write header, then flush again. We do the same for `art` files and `oat` files even though the latter needs to be cleaned up as the `oat file` is embedded in an ELF file.",
      "parentUuid": "19fb70d4_522e0403",
      "range": {
        "startLine": 1049,
        "startChar": 0,
        "endLine": 1051,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4aeb22b8_1bc3146f",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 1051,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-11T15:46:59Z",
      "side": 1,
      "message": "I see, makes sense.",
      "parentUuid": "20d76851_fe2dba65",
      "range": {
        "startLine": 1049,
        "startChar": 0,
        "endLine": 1051,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec8f1333_0853c0f6",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 1304,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Why not const ref? I\u0027ve see other places use it by value, but it\u0027s a struct with a few fields.",
      "range": {
        "startLine": 1304,
        "startChar": 16,
        "endLine": 1304,
        "endChar": 25
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93cd1f69_1ad32b5d",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 1304,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Done.\n\nThanks for catching this. I have flagged this issue before but I missed this instance.",
      "parentUuid": "ec8f1333_0853c0f6",
      "range": {
        "startLine": 1304,
        "startChar": 16,
        "endLine": 1304,
        "endChar": 25
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "260c26e1_6500ea24",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2328,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "It may be more efficient to make used_flags uint32_t and do one cast before return.",
      "range": {
        "startLine": 2328,
        "startChar": 20,
        "endLine": 2328,
        "endChar": 42
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffee4454_6cf242fe",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2328,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "260c26e1_6500ea24",
      "range": {
        "startLine": 2328,
        "startChar": 20,
        "endLine": 2328,
        "endChar": 42
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c92b2a8c_860edfad",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2524,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "16 ?",
      "range": {
        "startLine": 2524,
        "startChar": 34,
        "endLine": 2524,
        "endChar": 36
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bf75d11_31efb307",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2524,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c92b2a8c_860edfad",
      "range": {
        "startLine": 2524,
        "startChar": 34,
        "endLine": 2524,
        "endChar": 36
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "493c9aac_d3b51042",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2569,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Deduplicate with lines 2521-2528.",
      "range": {
        "startLine": 2562,
        "startChar": 0,
        "endLine": 2569,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83962884_21807d0b",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2569,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "493c9aac_d3b51042",
      "range": {
        "startLine": 2562,
        "startChar": 0,
        "endLine": 2569,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "486bc690_4f596988",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2586,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "This is repeated 3 times, maybe add a function.",
      "range": {
        "startLine": 2586,
        "startChar": 34,
        "endLine": 2586,
        "endChar": 93
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d68fa3d_eaa59591",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2586,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Done using `BitsToBytesRoundUp()` from `bit_utils.h`.",
      "parentUuid": "486bc690_4f596988",
      "range": {
        "startLine": 2586,
        "startChar": 34,
        "endLine": 2586,
        "endChar": 93
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62dbc088_9c222968",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2605,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "This code is similar in structure to GetUsedBitmapFlags, but it does the opposite. Maybe extract it into a function SetUsedBitmapFlags and put close to GetUsedBitmapFlags ?",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2605,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5bcd980_418c2561",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2605,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T14:45:05Z",
      "side": 1,
      "message": "Extracted the loop structure to a helper template function. The remaining lambda is not similar to `GetUsedBitmapFlags` at all.",
      "parentUuid": "62dbc088_9c222968",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2605,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b654f44_d53399c4",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2636,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Is this still for Calin?",
      "range": {
        "startLine": 2636,
        "startChar": 14,
        "endLine": 2636,
        "endChar": 19
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "870f130f_8a042aba",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2636,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "5b654f44_d53399c4",
      "range": {
        "startLine": 2636,
        "startChar": 14,
        "endLine": 2636,
        "endChar": 19
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b361ec45_edd3472b",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2685,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "It is unclear why this means that the profile contains data for boot image (as opposed to checking kFlagLastBoot flag).",
      "range": {
        "startLine": 2685,
        "startChar": 28,
        "endLine": 2685,
        "endChar": 82
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93c42c62_011df28a",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2685,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "We need to check all flags higher than `kFlagLastRegular`, from `kFlag32bit` to `kFlagStartupMaxBin`.",
      "parentUuid": "b361ec45_edd3472b",
      "range": {
        "startLine": 2685,
        "startChar": 28,
        "endLine": 2685,
        "endChar": 82
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "120d6413_6fb3f451",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2716,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Possible candidate for deduplication with lines 2590-2605. I see that it\u0027s doing yet another different thing (reading from saved_bitmap instead of writing to it), but maybe this difference can be abstracted away with a functor.",
      "range": {
        "startLine": 2699,
        "startChar": 0,
        "endLine": 2716,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfaad2ee_31690034",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2716,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T14:45:05Z",
      "side": 1,
      "message": "Extracted the loop structure to a helper template function. There are enough differences between the remaining writing and reading lambdas.",
      "parentUuid": "120d6413_6fb3f451",
      "range": {
        "startLine": 2699,
        "startChar": 0,
        "endLine": 2716,
        "endChar": 3
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5efb9008_4d0492e1",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2721,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Why this constant? Can it have a name?",
      "range": {
        "startLine": 2721,
        "startChar": 59,
        "endLine": 2721,
        "endChar": 67
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9ba5e66_3244c51a",
        "filename": "libprofile/profile/profile_compilation_info.cc",
        "patchSetId": 14
      },
      "lineNbr": 2721,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T15:38:55Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "5efb9008_4d0492e1",
      "range": {
        "startLine": 2721,
        "startChar": 59,
        "endLine": 2721,
        "endChar": 67
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7a980df_eea5bc08",
        "filename": "libprofile/profile/profile_compilation_info_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 474,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "The name kInvalidDexFileLocationLength suggests that the test should fail in some way. Is it the load failure at line 480?",
      "range": {
        "startLine": 474,
        "startChar": 27,
        "endLine": 474,
        "endChar": 56
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "140dd25c_1f9d0d5a",
        "filename": "libprofile/profile/profile_compilation_info_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 474,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "f7a980df_eea5bc08",
      "range": {
        "startLine": 474,
        "startChar": 27,
        "endLine": 474,
        "endChar": 56
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b1795f2_5d6fd2f3",
        "filename": "libprofile/profile/profile_compilation_info_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 657,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Why 33?",
      "range": {
        "startLine": 657,
        "startChar": 26,
        "endLine": 657,
        "endChar": 30
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "743b5362_7f74b00a",
        "filename": "libprofile/profile/profile_compilation_info_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 657,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "Arbitrary; that dex pc is already used in this file. I could change that to the traditional 42 but I don\u0027t think it matters.",
      "parentUuid": "9b1795f2_5d6fd2f3",
      "range": {
        "startLine": 657,
        "startChar": 26,
        "endLine": 657,
        "endChar": 30
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c88a4ffa_9b70f984",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 445,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Why all the _x suffixes? Does it mean something special?",
      "range": {
        "startLine": 445,
        "startChar": 23,
        "endLine": 445,
        "endChar": 25
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9ce62ff_147357cd",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 445,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T14:45:05Z",
      "side": 1,
      "message": "It\u0027s different from the member variables `dex1` and `dex2`.",
      "parentUuid": "c88a4ffa_9b70f984",
      "range": {
        "startLine": 445,
        "startChar": 23,
        "endLine": 445,
        "endChar": 25
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e5c3479_478ddea2",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 778,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "I somehow got the idea that arrays of primitive types don\u0027t have type IDs no matter how many dimensions. Is this wrong?",
      "range": {
        "startLine": 778,
        "startChar": 35,
        "endLine": 778,
        "endChar": 94
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c4c2cb6_46e207fd",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 778,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "If a method takes an array argument or returns an array type, there shall be a `TypeId` for that array in the dex file, whether the element type is primitive or not.",
      "parentUuid": "2e5c3479_478ddea2",
      "range": {
        "startLine": 778,
        "startChar": 35,
        "endLine": 778,
        "endChar": 94
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5069f70_cb2a3ad8",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 1885,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Nit: remove spaces inside of the comments to match the style elsewhere (here and below).",
      "range": {
        "startLine": 1885,
        "startChar": 38,
        "endLine": 1885,
        "endChar": 53
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78526ac9_65741ac2",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 1885,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T14:45:05Z",
      "side": 1,
      "message": "Done in a separate CL, including the one line I did not previously touch in this file.",
      "parentUuid": "c5069f70_cb2a3ad8",
      "range": {
        "startLine": 1885,
        "startChar": 38,
        "endLine": 1885,
        "endChar": 53
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a57d5c09_d6cd98ab",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 1957,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Nit: forgotten \"\u003d\"",
      "range": {
        "startLine": 1957,
        "startChar": 48,
        "endLine": 1957,
        "endChar": 49
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a15f6f07_572348a9",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 14
      },
      "lineNbr": 1957,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T14:45:05Z",
      "side": 1,
      "message": "Done; also done for pre-existing code that I copy-pasted here in a separate CL.",
      "parentUuid": "a57d5c09_d6cd98ab",
      "range": {
        "startLine": 1957,
        "startChar": 48,
        "endLine": 1957,
        "endChar": 49
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "523a43a9_78448dc7",
        "filename": "profman/profman.cc",
        "patchSetId": 14
      },
      "lineNbr": 1072,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "Can you add a comment?\n\nIf this is trying to find if the string has more than one \u0027(\u0027, maybe `std::count(...) !\u003d 1` would be shorter.",
      "range": {
        "startLine": 1069,
        "startChar": 0,
        "endLine": 1072,
        "endChar": 37
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ec5cfda_8345dd57",
        "filename": "profman/profman.cc",
        "patchSetId": 14
      },
      "lineNbr": 1072,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-11T14:45:05Z",
      "side": 1,
      "message": "Using `substr(.).contains(.)` would be shorter but `contains()` shall be available only from C++23. So, I just dropped this condition and let it fail with the \"Could not create type list\" message below.",
      "parentUuid": "523a43a9_78448dc7",
      "range": {
        "startLine": 1069,
        "startChar": 0,
        "endLine": 1072,
        "endChar": 37
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4972f45_70b9d14a",
        "filename": "profman/profman.cc",
        "patchSetId": 14
      },
      "lineNbr": 1395,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-05-06T16:59:57Z",
      "side": 1,
      "message": "This seems simpler to me:\n\n  size_t array_dim \u003d 0;\n  while (array_dim \u003c klass.size() \u0026\u0026 klass[array_dim] \u003d\u003d \u0027[\u0027) ++array_dim;",
      "range": {
        "startLine": 1394,
        "startChar": 0,
        "endLine": 1395,
        "endChar": 64
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "407867d7_39557e26",
        "filename": "profman/profman.cc",
        "patchSetId": 14
      },
      "lineNbr": 1395,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-07T16:29:44Z",
      "side": 1,
      "message": "There is a composite condition in the `while`, so it\u0027s not really that simple to read. And the while-body needs braces to conform to ART style, so it\u0027s also two lines longer.",
      "parentUuid": "e4972f45_70b9d14a",
      "range": {
        "startLine": 1394,
        "startChar": 0,
        "endLine": 1395,
        "endChar": 64
      },
      "revId": "f262814204b92c1deb9997b606c06a70eb976e11",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}