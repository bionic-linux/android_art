{
  "comments": [
    {
      "key": {
        "uuid": "070e2bc9_4a2f5857",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T15:30:16Z",
      "side": 1,
      "message": "Should we start using `std::filesystem::temp_directory_path` instead of `mkdtemp` (see also b/130214123)?",
      "range": {
        "startLine": 61,
        "startChar": 13,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "145f67fb_1c2f9d50",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-07T16:03:27Z",
      "side": 1,
      "message": "Seems like the issue it they might throw?",
      "parentUuid": "070e2bc9_4a2f5857",
      "range": {
        "startLine": 61,
        "startChar": 13,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c43d47a_b7d45344",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T16:22:58Z",
      "side": 1,
      "message": "There\u0027s an overloading which takes an `std::error_code` and does not seem to throw.",
      "parentUuid": "145f67fb_1c2f9d50",
      "range": {
        "startLine": 61,
        "startChar": 13,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63a2d550_63e4da6f",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-10T10:14:19Z",
      "side": 1,
      "message": "It not marked \"nothrow\" and the documentation says it \"may throw std::bad_alloc if memory allocation fails\"",
      "parentUuid": "5c43d47a_b7d45344",
      "range": {
        "startLine": 61,
        "startChar": 13,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c02905ee_c9aef1cc",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-10T11:35:18Z",
      "side": 1,
      "message": "Yes, but that\u0027s also the case of other C++ standard functions, e.g. most std::vector constructors; not sure this should be blocking us to use it.",
      "parentUuid": "63a2d550_63e4da6f",
      "range": {
        "startLine": 61,
        "startChar": 13,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b18d13a1_c3f5a0e6",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-10T14:49:47Z",
      "side": 1,
      "message": "Oh.  I didn\u0027t realize that.\n\nSo what is the story with exceptions in Android?  I assumed it was pretty hard rule (i.e. they might not work at all, code might not compile, etc...)",
      "parentUuid": "c02905ee_c9aef1cc",
      "range": {
        "startLine": 61,
        "startChar": 13,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "755b5b79_8e270a9c",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-10T16:08:55Z",
      "side": 1,
      "message": "I\u0027m not sure; we should check with the Clang and Build teams.",
      "parentUuid": "b18d13a1_c3f5a0e6",
      "range": {
        "startLine": 61,
        "startChar": 13,
        "endLine": 61,
        "endChar": 20
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef59a26d_eb3b4859",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T15:30:16Z",
      "side": 1,
      "message": "Likewise, should we start using `std::filesystem::recursive_directory_iterator` instead of `nftw`?",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 6
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b367570a_0f3bd199",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-07T16:03:27Z",
      "side": 1,
      "message": "Same?",
      "parentUuid": "ef59a26d_eb3b4859",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 6
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5315e6c9_9fa26ea6",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T16:22:58Z",
      "side": 1,
      "message": "Ditto. :)",
      "parentUuid": "b367570a_0f3bd199",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 6
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04dccff2_7fc75cdf",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 395,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T15:30:16Z",
      "side": 1,
      "message": "Should we also support the case where `jar_prefix` is neither `conscrypt` nor `boot`? This looks like a regression.",
      "range": {
        "startLine": 395,
        "startChar": 4,
        "endLine": 395,
        "endChar": 97
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c319f13_8cbef25e",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 395,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-07T16:03:27Z",
      "side": 1,
      "message": "It is conscrypt vs anything else.  (i.e. conscrypt is an exception as it lives in other apex)",
      "parentUuid": "04dccff2_7fc75cdf",
      "range": {
        "startLine": 395,
        "startChar": 4,
        "endLine": 395,
        "endChar": 97
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbb13d00_856e10ca",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 395,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T16:22:58Z",
      "side": 1,
      "message": "Maybe we should add a comment about this. I thought at first that this routine could be used to get any Dex file under \"/system/framework/\" on device, but its use is limited to Dex files used in ART testing, so the current boot image + conscrypt image.",
      "parentUuid": "0c319f13_8cbef25e",
      "range": {
        "startLine": 395,
        "startChar": 4,
        "endLine": 395,
        "endChar": 97
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2cc86918_5bd29c07",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 531,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T15:30:16Z",
      "side": 1,
      "message": "I think this literal should be put in a string constant.",
      "range": {
        "startLine": 531,
        "startChar": 29,
        "endLine": 531,
        "endChar": 58
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b6776df_091ea6ce",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 531,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-07T16:03:27Z",
      "side": 1,
      "message": "Why?  This is a string constant, no?",
      "parentUuid": "2cc86918_5bd29c07",
      "range": {
        "startLine": 531,
        "startChar": 29,
        "endLine": 531,
        "endChar": 58
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e35c1514_3d82be7f",
        "filename": "libartbase/base/common_art_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 531,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T16:22:58Z",
      "side": 1,
      "message": "I saw that this literal was used several times in this file, in `CommonArtTestImpl::GetCoreFileLocation` (here) and in `CommonRuntimeTestImpl::GetImageDirectory` (in runtime/common_runtime_test.cc) and thought we could introduce a constant; but actually we should probably refactor these two routines instead.",
      "parentUuid": "9b6776df_091ea6ce",
      "range": {
        "startLine": 531,
        "startChar": 29,
        "endLine": 531,
        "endChar": 58
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63ae04e7_82901b06",
        "filename": "runtime/common_runtime_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 530,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T15:30:16Z",
      "side": 1,
      "message": "I\u0027d capture this logic in its own function, so that it can be used in `CommonRuntimeTestImpl::GetImageLocation` (here), in `CommonRuntimeTestImpl::GetSystemImageFile` (below) and in `CommonArtTestImpl::GetCoreFileLocation` (line 523).",
      "range": {
        "startLine": 530,
        "startChar": 31,
        "endLine": 530,
        "endChar": 69
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dc10c3f_1c774910",
        "filename": "runtime/common_runtime_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 530,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-07T16:03:27Z",
      "side": 1,
      "message": "True... of course, unless we manage to kill core.art as planed...",
      "parentUuid": "63ae04e7_82901b06",
      "range": {
        "startLine": 530,
        "startChar": 31,
        "endLine": 530,
        "endChar": 69
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60f949af_04a719e8",
        "filename": "runtime/dexopt_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T15:30:16Z",
      "side": 1,
      "message": "Ideally, I think this method should return an object representing the generated image (able to provide the path to it), and that would delete the produced file(s) as part in its destructor.",
      "range": {
        "startLine": 72,
        "startChar": 24,
        "endLine": 72,
        "endChar": 46
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cdb5a5c_71914e12",
        "filename": "runtime/dexopt_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-02-07T16:03:27Z",
      "side": 1,
      "message": "Isn\u0027t that overkill thought?\nWhat do you think of just returning the ScratchDir?",
      "parentUuid": "60f949af_04a719e8",
      "range": {
        "startLine": 72,
        "startChar": 24,
        "endLine": 72,
        "endChar": 46
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2539ae69_3e404ce5",
        "filename": "runtime/dexopt_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T16:22:58Z",
      "side": 1,
      "message": "Right; I didn\u0027t realize the alternate image was generated in a scratch directory whose removal was already taken care of. :)",
      "parentUuid": "4cdb5a5c_71914e12",
      "range": {
        "startLine": 72,
        "startChar": 24,
        "endLine": 72,
        "endChar": 46
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf55b2cd_22472965",
        "filename": "runtime/dexopt_test.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2020-02-07T15:30:16Z",
      "side": 1,
      "message": "I would have copied and adjusted the comment that preceded the declaration of `GetImageLocation2` (in runtime/dex2oat_environment_test.h) here.",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 35,
        "endChar": 69
      },
      "revId": "cf0c6ef642517fba3bc9a211acaed742ff39b86d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}