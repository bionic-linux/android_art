{
  "comments": [
    {
      "key": {
        "uuid": "593f80b5_5026ecd6",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 3
      },
      "lineNbr": 822,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T05:37:39Z",
      "side": 1,
      "message": "I see that this code is already in AOSP with this FIXME.\nTo me actually, the question is to fix this FIXME or not at all. As I understand the problem is that code rl_dest which fp can be associated with core reg. So the question whether we want to have a restriction that fp RegLocation contains only fp RegStorage and non-fp RegLocation contains only non-fp RegStorage. Please note that this condition is broken not only in this place but lowering of move bytecode can lead to the same situation. So we really want to have such restriction we should fix StoreValue and StoreWideValue from my point of view.\n\nAlso please note that sGet should also be fixed, I have uploaded a patch for it: https://android-review.googlesource.com/#/c/100641/1/compiler/dex/quick/gen_common.cc. The only one think I cannot decide for now is whether kRefReg is required or not.",
      "range": {
        "startLine": 822,
        "startChar": 4,
        "endLine": 822,
        "endChar": 84
      },
      "revId": "7b7593b77670b97d4b2f956c54e83cc5639e2d87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19298885_ee14df61",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 3
      },
      "lineNbr": 822,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T05:39:45Z",
      "side": 1,
      "message": "Correction :)\nSo IF we really want to have such restriction....",
      "parentUuid": "593f80b5_5026ecd6",
      "range": {
        "startLine": 822,
        "startChar": 4,
        "endLine": 822,
        "endChar": 84
      },
      "revId": "7b7593b77670b97d4b2f956c54e83cc5639e2d87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "593f80b5_7048d076",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 3
      },
      "lineNbr": 822,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T07:33:49Z",
      "side": 1,
      "message": "Please ignore the part related to \"already fixed\" and \"please note\". I have mixed-up iget and iput and completely confused myself :)",
      "parentUuid": "593f80b5_5026ecd6",
      "range": {
        "startLine": 822,
        "startChar": 4,
        "endLine": 822,
        "endChar": 84
      },
      "revId": "7b7593b77670b97d4b2f956c54e83cc5639e2d87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9045004_462d0317",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-10T12:42:49Z",
      "side": 1,
      "message": "What you did seems right, but then this means the code above was clearly wrong. I wonder how it could have worked. Do you know whether the code was never called for ARM, x86 or did it just work by accident?\n\nConcerning how we fix the issue, I don\u0027t have a strong opinion on this. Using different flavours of registers (GP/FP) may slightly complicate the code (in the original C++ implementation and above) without a clear benefit apart from being slightly cleaner. The way you did it looks acceptable to me.",
      "revId": "7b7593b77670b97d4b2f956c54e83cc5639e2d87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19526823_69c58175",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1003299
      },
      "writtenOn": "2014-07-10T18:26:46Z",
      "side": 1,
      "message": "This problem only shows up for Mips because  the return value is in different registers depending on the return type, where for Arm, it is always in r0:r1.",
      "parentUuid": "d9045004_462d0317",
      "revId": "7b7593b77670b97d4b2f956c54e83cc5639e2d87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "593f80b5_33281208",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-10T18:46:12Z",
      "side": 1,
      "message": "I saw this problem on x86_64 when it needed double. The reason we did not mention it before probably because FastGet is false seems to be a rare condition + for floats/doubles it will just results in incorrect calculation and we can simply missed that the result is incorrect.",
      "parentUuid": "19526823_69c58175",
      "revId": "7b7593b77670b97d4b2f956c54e83cc5639e2d87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}