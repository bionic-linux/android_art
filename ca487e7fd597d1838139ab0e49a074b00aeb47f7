{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8d416590_80a2b72f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "Finished a full pass here.",
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60404cee_95b7ded3",
        "filename": "build/art.go",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T16:57:49Z",
      "side": 1,
      "message": "I thought we had a (size-segregated) notion of TLAB for CMS as well?",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19edaa4b_155745aa",
        "filename": "build/art.go",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Not sure about that. But ART_USE_TLAB is not set for CMS.",
      "parentUuid": "60404cee_95b7ded3",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b7b51e3_c8db3dd0",
        "filename": "build/art.go",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-06-04T01:21:26Z",
      "side": 1,
      "message": "Can we just change the comment to \"The only GC which does not want ART_USE_TLAB set is CMS, ...",
      "parentUuid": "19edaa4b_155745aa",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afe927cf_9cc4b95f",
        "filename": "build/art.go",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-06-08T21:26:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b7b51e3_c8db3dd0",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6238b7_68b63722",
        "filename": "compiler/utils/arm/jni_macro_assembler_arm_vixl.cc",
        "patchSetId": 17
      },
      "lineNbr": 219,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T16:57:49Z",
      "side": 1,
      "message": "Please fix all of these.",
      "range": {
        "startLine": 219,
        "startChar": 29,
        "endLine": 219,
        "endChar": 38
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ff348e1_e19f4ac0",
        "filename": "compiler/utils/arm/jni_macro_assembler_arm_vixl.cc",
        "patchSetId": 17
      },
      "lineNbr": 219,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a6238b7_68b63722",
      "range": {
        "startLine": 219,
        "startChar": 29,
        "endLine": 219,
        "endChar": 38
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e79ae409_8ea60a35",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 17
      },
      "lineNbr": 142,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T16:57:49Z",
      "side": 1,
      "message": "Is this really the right abstraction? Does it suffice to have a \"is kernel version \u003e\u003d X.Y?\" function? That would allow easy reuse in memfd.cc and membarrier.cc, among others.\n\nI would defer updating that other code, but it would be nice to get the simplest possible abstraction here to start with.",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 142,
        "endChar": 6
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50a48594_ec9e7d4f",
        "filename": "libartbase/base/utils.h",
        "patchSetId": 17
      },
      "lineNbr": 142,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e79ae409_8ea60a35",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 142,
        "endChar": 6
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baddbd6f_ae2ef816",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 63,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "This should presumably be static or in an anonymous namespace? Especially since this is clearly meant to be called exactly once.",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 63,
        "endChar": 29
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01d66971_4968c6e8",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 63,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baddbd6f_ae2ef816",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 63,
        "endChar": 29
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "244c14ce_b04a3e03",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 79,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "Again, I think this could be simpler with a different API.",
      "range": {
        "startLine": 72,
        "startChar": 1,
        "endLine": 79,
        "endChar": 24
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70f09546_330ae702",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 105,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "Can\u0027t we simplify this to\n\n(kUseBakerReadBarrier || kUseTableLookupReadBarrier) \u0026\u0026 (!ShouldUseUserfaultfd() || kForceReadBarrier)",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 105,
        "endChar": 56
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd924afa_7f1a890f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 105,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "No this won\u0027t be possible. Because this gets further complicated in a subsequent CL due to phenotype flag.\n\nRegarding kForceReadBarrier, I think it\u0027s time to get rid of it. Please take a look at my reply to the following comment. If you agree, then I\u0027ll remove it.",
      "parentUuid": "70f09546_330ae702",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 105,
        "endChar": 56
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29a2ff91_988d00a0",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 105,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-06-04T01:21:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dd924afa_7f1a890f",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 105,
        "endChar": 56
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5d9b112_68459a5a",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 108,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "Isn\u0027t that redundant? Or what\u0027s the relationship between kForceReadBarrier and ART_FORCE_USE_READ_BARRIER?",
      "range": {
        "startLine": 108,
        "startChar": 38,
        "endLine": 108,
        "endChar": 55
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4542c1c_2e471212",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 108,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "None, actually! kForceReadBarrier is set to \u0027false\u0027 in runtime/read_barrier_config.h and but seems to be there for testing purposes with the following:\n\n\"// TODO: Remove this flag when the read barriers compiler\n// instrumentation is completed.\n\"\n\nI guess it\u0027s time to act on the TODO?",
      "parentUuid": "e5d9b112_68459a5a",
      "range": {
        "startLine": 108,
        "startChar": 38,
        "endLine": 108,
        "endChar": 55
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7bce720_76cbc100",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 108,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-06-04T01:21:26Z",
      "side": 1,
      "message": "Agreed. This is needlessly confusing.",
      "parentUuid": "b4542c1c_2e471212",
      "range": {
        "startLine": 108,
        "startChar": 38,
        "endLine": 108,
        "endChar": 55
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0427817b_d211b50b",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 108,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-06-08T21:26:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7bce720_76cbc100",
      "range": {
        "startLine": 108,
        "startChar": 38,
        "endLine": 108,
        "endChar": 55
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1c0973b_ef40309b",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 113,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "If you\u0027re changing this anyway, please make that \"off\"",
      "range": {
        "startLine": 113,
        "startChar": 8,
        "endLine": 113,
        "endChar": 10
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b22982a_0ff11033",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 17
      },
      "lineNbr": 113,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1c0973b_ef40309b",
      "range": {
        "startLine": 113,
        "startChar": 8,
        "endLine": 113,
        "endChar": 10
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d288f0b3_b43f83e3",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 17
      },
      "lineNbr": 1037,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "Why are we keeping this at all? If we want to keep it, could we rename it to MayHaveConcurrentGC(), since there is no longer an allocator involved?",
      "range": {
        "startLine": 1037,
        "startChar": 24,
        "endLine": 1037,
        "endChar": 52
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8da977e_0b0d8c5d",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 17
      },
      "lineNbr": 1037,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "d288f0b3_b43f83e3",
      "range": {
        "startLine": 1037,
        "startChar": 24,
        "endLine": 1037,
        "endChar": 52
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "944106a8_ba030e0d",
        "filename": "runtime/gc/reference_processor.cc",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "gOtherReadBarrier -\u003e otherUseReadBarrier\n\nAnd I would reveres the operands of \u0026\u0026 to have the compile-time subexpression first. (The compiler probably does that anyway, but ...)",
      "range": {
        "startLine": 121,
        "startChar": 15,
        "endLine": 121,
        "endChar": 76
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3c653c4_94d7f6ab",
        "filename": "runtime/gc/reference_processor.cc",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "944106a8_ba030e0d",
      "range": {
        "startLine": 121,
        "startChar": 15,
        "endLine": 121,
        "endChar": 76
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6e00405_adc05bd7",
        "filename": "runtime/oat_file_assistant.cc",
        "patchSetId": 17
      },
      "lineNbr": 422,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "Is this still correct? What\u0027s the intended logic here? If we\u0027re not using read barriers, will we still be able to use read barrier code?\n\nAt a minimum, the is_cc name here seems wrong, It should be something like has_read_barriers?",
      "range": {
        "startLine": 422,
        "startChar": 13,
        "endLine": 422,
        "endChar": 18
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48493926_79080293",
        "filename": "runtime/oat_file_assistant.cc",
        "patchSetId": 17
      },
      "lineNbr": 422,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "It is correct because with the new GC we only tolerate read-barriers in nterp interpreter. All the oat files, will have is_cc \u003d false.\n\nOTOH, when running with read-barrier, the recompiled oat files must have CC flag set.\n\nSince there was just single use of is_cc, eliminated it.",
      "parentUuid": "e6e00405_adc05bd7",
      "range": {
        "startLine": 422,
        "startChar": 13,
        "endLine": 422,
        "endChar": 18
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bcf428e_e646d6dd",
        "filename": "runtime/oat_file_assistant.cc",
        "patchSetId": 17
      },
      "lineNbr": 422,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-06-04T01:21:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "48493926_79080293",
      "range": {
        "startLine": 422,
        "startChar": 13,
        "endLine": 422,
        "endChar": 18
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58209e59_fd0ffad2",
        "filename": "runtime/read_barrier-inl.h",
        "patchSetId": 17
      },
      "lineNbr": 201,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "Do you understand this comment, or why the next 3 lines are correct?",
      "range": {
        "startLine": 200,
        "startChar": 1,
        "endLine": 201,
        "endChar": 23
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2733b3c7_527527d1",
        "filename": "runtime/read_barrier-inl.h",
        "patchSetId": 17
      },
      "lineNbr": 201,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "Since this code was written back when CC happened to be the first concurrent moving GC, the comment means that only when read-barriers are in use can we have a situation where mutators are running concurrently. IOW, if we reach this function and we aren\u0027t running in read-barrier config, then simply return the ref as is.\n\nThe code in next 3 lines continues to be correct with the new GC as well, because mutators just can\u0027t get hold of a from-space reference when compacting.",
      "parentUuid": "58209e59_fd0ffad2",
      "range": {
        "startLine": 200,
        "startChar": 1,
        "endLine": 201,
        "endChar": 23
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6b0c797_a5ee3106",
        "filename": "runtime/read_barrier-inl.h",
        "patchSetId": 17
      },
      "lineNbr": 201,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-06-04T01:21:26Z",
      "side": 1,
      "message": "I think I don\u0027t understand how this is intended to be used. Even with CMS, mutators can run while the GC is setting mark bits, and an object may not yet have been marked by the GC. The comment in the .h file appears to say that we should return null in that case. It seems that \"marked\" here means something else, but that still seems unclear to me.\n\nI\u0027ll add this to b/233815394. since it\u0027s not really related to this CL.",
      "parentUuid": "2733b3c7_527527d1",
      "range": {
        "startLine": 200,
        "startChar": 1,
        "endLine": 201,
        "endChar": 23
      },
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ccd640f_e680b52b",
        "filename": "runtime/runtime.cc",
        "patchSetId": 17
      },
      "lineNbr": 203,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-05-25T19:29:19Z",
      "side": 1,
      "message": "So we now have a parameter to which we\u0027re unconditionally adding one? If so, should we file a bug to fix this so that we use the parameter directly? Presumably this requires adjusting a bunch of configurations, but this seems really confusing as is.\n\n(And maybe we don\u0027t actually want to adjust all the configurations, since the result may be too large anyway.)",
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20ed308e_9894c5b9",
        "filename": "runtime/runtime.cc",
        "patchSetId": 17
      },
      "lineNbr": 203,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-05-27T05:08:22Z",
      "side": 1,
      "message": "I have removed the constant and directly adding 1.0 to the foreground_heap_growth_multiplier below. You are right, even though most likely we are using the default value only, but you never know. So can\u0027t simply increase the default value and expect no regression.\n\nTo be frank, I think this extra growth multiplier for concurrent GCs doesn\u0027t make sense. This multiplier should apply only to concurrent_start_bytes_. Why do we apply it min/max_free and utilization? Isn\u0027t the purpose to give extra legroom for concurrent GC to finish before hitting the wall?",
      "parentUuid": "3ccd640f_e680b52b",
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6e40e57_12ae60a4",
        "filename": "runtime/runtime.cc",
        "patchSetId": 17
      },
      "lineNbr": 203,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-06-04T01:21:26Z",
      "side": 1,
      "message": "Isn\u0027t it effectively to increase the extra heap size we give ourselves, so that we have to GC less frequently for foreground apps that are actively running and allocating? It\u0027s basically a multiplier for the extra heap space we allow ourselves before the next GC.\n\nCan we add a comment that the +1.0 is for historical reasons, and that it should be removed when we revisit the heap configurations",
      "parentUuid": "20ed308e_9894c5b9",
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "540d46c2_7999f98f",
        "filename": "runtime/runtime.cc",
        "patchSetId": 17
      },
      "lineNbr": 203,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-06-08T21:26:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6e40e57_12ae60a4",
      "revId": "ca487e7fd597d1838139ab0e49a074b00aeb47f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}