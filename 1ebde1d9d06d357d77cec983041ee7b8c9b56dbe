{
  "comments": [
    {
      "key": {
        "uuid": "004c64b8_81fd12fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 44
      },
      "lineNbr": 7,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: more consistent to JLS and the RI.",
      "range": {
        "startLine": 7,
        "startChar": 32,
        "endLine": 7,
        "endChar": 38
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe5099d8_0225c343",
        "filename": "/COMMIT_MSG",
        "patchSetId": 44
      },
      "lineNbr": 54,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: I don\u0027t think we need --host here if --jvm is also used.",
      "range": {
        "startLine": 54,
        "startChar": 24,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62344b74_6d3990aa",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 44
      },
      "lineNbr": 382,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "(Just suggesting some optional cleanup here, if you like the idea, it could be done in a future CL)\n\nMight be worth to encode such constraints directly into a helper in class.h. It would do the usual \"FindClassMethod\" lookup and then do the constraint check last.\n\nfor example, direct, virtual, static, declaring, etc. This way the CHECKs/LOG(FATAL) don\u0027t have to be duplicated.",
      "range": {
        "startLine": 382,
        "startChar": 26,
        "endLine": 382,
        "endChar": 54
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8e6a03e_c244ef45",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 44
      },
      "lineNbr": 729,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Can you add comment here why it would be null?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "325de272_f516e241",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 44
      },
      "lineNbr": 753,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Add comment why its safe for this DCHECK?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5658ef5d_6f0c5635",
        "filename": "compiler/verifier_deps_test.cc",
        "patchSetId": 44
      },
      "lineNbr": 381,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: just use dex_dep.second-\u003emethods_ directly, having it be auto only makes it more confusing?",
      "range": {
        "startLine": 381,
        "startChar": 57,
        "endLine": 381,
        "endChar": 64
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271f8ce5_e70a969d",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 122,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear why it would do this, it directly contradicts your comments for FindInterfaceMethod in class.h which says it would only check other superinterfaces and java.lang.Object only.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d87fbb7_504c9906",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 136,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Worth adding test case for this (pass --min-sdk-version\u003d16 to dx, source/target version 1.7 to javac)?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2010c1fb_9ee75f65",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 219,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Seems super complicated, can we just add a helper for this, GetReferredMethodIfProxy, GetReferrer, etc?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b272e5bf_602d72cd",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 225,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 225,
        "startChar": 41,
        "endLine": 225,
        "endChar": 79
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ad94c96_3bdb503d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 44
      },
      "lineNbr": 7983,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "What\u0027s the difference between LookupResolvedType and GetResolvedMethod?  Maybe those 2 functions need extra comments added to their declaration?\n\nI think GetResolvedMethod can return a method that would fail the extra error checks that full resolution requires, but I\u0027m not 100% sure.\n\nIt seems to me if that\u0027s the case then \"GetResolvedMethod\" is also inaccurate name, it\u0027s more like GetUncheckedResolvedMethod or GetPartiallyResolvedMethod, etc.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4edf6903_a5b20abf",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 284,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear what this means. If ResolveMode::kCheckICCEAndIAE is used, does that mean functions will throw that exception?",
      "range": {
        "startLine": 284,
        "startChar": 11,
        "endLine": 284,
        "endChar": 77
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ec53391_769b4f45",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 1201,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Either its really simple (and allows noninterface-\u003eclass and interface-\u003einterface only) or it needs more explanation.\n\nIf it\u0027s really that simple, maybe just add it in there as a comment?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8026819e_b3bc7b1b",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 1208,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Can you add a comment here to explain difference between this and above?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3f277c2_763d7829",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 428,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "If its returning a copied method here  then how does the accessibility check work w.r.t. to referrer? Does it take into account where copied method was copied from?\n\nAlthough maybe its only a problem for abstract (miranda) methods? Defaults might never have accessibility problems, I\u0027m not 100% sure [but this should be stated somewhere if we rely on that assumption].",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "312e1627_abfb5233",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 464,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Not sure about this for copied methods either. See comment on L428.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27d4df9a_78275ff4",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 506,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Why does it need separate code? If you call GetInterfaceMethodIfProxy it returns \u0027this\u0027 for non-proxy.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9d900fc_504d1d2c",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 517,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "? proxy has a superclass java.lang.Object so how is this working?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6216d6d_657ebf19",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 545,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Missing IsInheritedMethod checks?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b17cb57_3e430767",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 549,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear if it can return null? What is supposed to happen in exceptional cases?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ac550e2_56e09a11",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 655,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "This seems very similar to FindClassMethodWithSignature, why can\u0027t they be combined together?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4e2bd0d_4a79b355",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 659,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Why? Proxy classes have constructors too.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aafddf8_9ecf9069",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 918,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: Consider removing, as it is confusing and makes me think of a java overload , but this is referring to the fact there\u0027s 3 C++ overloads?",
      "range": {
        "startLine": 918,
        "startChar": 78,
        "endLine": 918,
        "endChar": 87
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3c55aff_d7f2ab4a",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 924,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "FindClassMethod has a section about ICCE, IAE, etc, this does not?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ffff4f_0a747318",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 940,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: Consider removing, as it is confusing and makes me think of a java overload , but this is referring to the fact there\u0027s 3 C++ overloads?",
      "range": {
        "startLine": 940,
        "startChar": 78,
        "endLine": 940,
        "endChar": 91
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df012fb5_942f09c4",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 959,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "It might be worth to be more detailed about error conditions here as well (in a follow up CL)?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81a91e14_ba90daae",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 960,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "NoSuchMethodError?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2698fd1d_3a8b508d",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 963,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear what happens. Does it return null? Does it throw an error? Does it return a method, if invoked would throw an error? How does the caller fulfill the responsibility to check for the error condition?\n\nPlease document the exact behavior.",
      "range": {
        "startLine": 961,
        "startChar": 0,
        "endLine": 963,
        "endChar": 28
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a64ea15f_d519e492",
        "filename": "test/162-method-resolution/info.txt",
        "patchSetId": 44
      },
      "lineNbr": 1,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T21:12:13Z",
      "side": 1,
      "message": "(See Main.java for per-test details)",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65aa331c_c0efea43",
        "filename": "test/162-method-resolution/multidex.jpp",
        "patchSetId": 44
      },
      "lineNbr": 0,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T21:12:13Z",
      "side": 1,
      "message": "This is jack only afaik, so what does it do for javac? Why does only jack need it?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}