{
  "comments": [
    {
      "key": {
        "uuid": "004c64b8_81fd12fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 44
      },
      "lineNbr": 7,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: more consistent to JLS and the RI.",
      "range": {
        "startLine": 7,
        "startChar": 32,
        "endLine": 7,
        "endChar": 38
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fecf795_91ce5cdd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 44
      },
      "lineNbr": 7,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "004c64b8_81fd12fb",
      "range": {
        "startLine": 7,
        "startChar": 32,
        "endLine": 7,
        "endChar": 38
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe5099d8_0225c343",
        "filename": "/COMMIT_MSG",
        "patchSetId": 44
      },
      "lineNbr": 54,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: I don\u0027t think we need --host here if --jvm is also used.",
      "range": {
        "startLine": 54,
        "startChar": 24,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ebdaba3_6603e501",
        "filename": "/COMMIT_MSG",
        "patchSetId": 44
      },
      "lineNbr": 54,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Maybe unnecessary but not wrong and this is how I run the test.",
      "parentUuid": "fe5099d8_0225c343",
      "range": {
        "startLine": 54,
        "startChar": 24,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62344b74_6d3990aa",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 44
      },
      "lineNbr": 382,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "(Just suggesting some optional cleanup here, if you like the idea, it could be done in a future CL)\n\nMight be worth to encode such constraints directly into a helper in class.h. It would do the usual \"FindClassMethod\" lookup and then do the constraint check last.\n\nfor example, direct, virtual, static, declaring, etc. This way the CHECKs/LOG(FATAL) don\u0027t have to be duplicated.",
      "range": {
        "startLine": 382,
        "startChar": 26,
        "endLine": 382,
        "endChar": 54
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d9d888f_7816a779",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 44
      },
      "lineNbr": 382,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Most such checks are in tests. This one is an exception and I\u0027d rather keep the Class API clean.",
      "parentUuid": "62344b74_6d3990aa",
      "range": {
        "startLine": 382,
        "startChar": 26,
        "endLine": 382,
        "endChar": 54
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8e6a03e_c244ef45",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 44
      },
      "lineNbr": 729,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Can you add comment here why it would be null?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac193ae4_93bacaac",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 44
      },
      "lineNbr": 729,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8e6a03e_c244ef45",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "325de272_f516e241",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 44
      },
      "lineNbr": 753,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Add comment why its safe for this DCHECK?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3210bab_2e5b3105",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 44
      },
      "lineNbr": 753,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "325de272_f516e241",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5658ef5d_6f0c5635",
        "filename": "compiler/verifier_deps_test.cc",
        "patchSetId": 44
      },
      "lineNbr": 381,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: just use dex_dep.second-\u003emethods_ directly, having it be auto only makes it more confusing?",
      "range": {
        "startLine": 381,
        "startChar": 57,
        "endLine": 381,
        "endChar": 64
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a111719d_91e310f6",
        "filename": "compiler/verifier_deps_test.cc",
        "patchSetId": 44
      },
      "lineNbr": 381,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5658ef5d_6f0c5635",
      "range": {
        "startLine": 381,
        "startChar": 57,
        "endLine": 381,
        "endChar": 64
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271f8ce5_e70a969d",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 122,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear why it would do this, it directly contradicts your comments for FindInterfaceMethod in class.h which says it would only check other superinterfaces and java.lang.Object only.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a285ae76_a0771432",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 122,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Removed most of the cut-and-pasted comment.",
      "parentUuid": "271f8ce5_e70a969d",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d87fbb7_504c9906",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 136,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Worth adding test case for this (pass --min-sdk-version\u003d16 to dx, source/target version 1.7 to javac)?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b766ec3d_23df8a93",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 136,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s worth it.",
      "parentUuid": "2d87fbb7_504c9906",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2010c1fb_9ee75f65",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 219,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Seems super complicated, can we just add a helper for this, GetReferredMethodIfProxy, GetReferrer, etc?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d26045_c22de9ff",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 219,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "What do you find super complicated?\n\nAnd do you want another method just because the GetInterfaceMethodIfProxy() is a bad name when we\u0027re using it for the proxy constructor?",
      "parentUuid": "2010c1fb_9ee75f65",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b272e5bf_602d72cd",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 225,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 225,
        "startChar": 41,
        "endLine": 225,
        "endChar": 79
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba497cfa_aab61f6c",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 225,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "We fill the DexCache method arrays with the resolution method. This should actually disappear in https://android-review.googlesource.com/431679 .",
      "parentUuid": "b272e5bf_602d72cd",
      "range": {
        "startLine": 225,
        "startChar": 41,
        "endLine": 225,
        "endChar": 79
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ad94c96_3bdb503d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 44
      },
      "lineNbr": 7983,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "What\u0027s the difference between LookupResolvedType and GetResolvedMethod?  Maybe those 2 functions need extra comments added to their declaration?\n\nI think GetResolvedMethod can return a method that would fail the extra error checks that full resolution requires, but I\u0027m not 100% sure.\n\nIt seems to me if that\u0027s the case then \"GetResolvedMethod\" is also inaccurate name, it\u0027s more like GetUncheckedResolvedMethod or GetPartiallyResolvedMethod, etc.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f98f85d3_0967f137",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 44
      },
      "lineNbr": 7983,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "I don\u0027t understand why you\u0027re comparing the LookupResolvedType() with GetResolvedMethod() at all.\n\nBut I do see that GetResolvedMethod() is a bad name, though this is for historical reasons and I\u0027d be willing to hear suggestions for renaming.",
      "parentUuid": "0ad94c96_3bdb503d",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4edf6903_a5b20abf",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 284,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear what this means. If ResolveMode::kCheckICCEAndIAE is used, does that mean functions will throw that exception?",
      "range": {
        "startLine": 284,
        "startChar": 11,
        "endLine": 284,
        "endChar": 77
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f624b7a_5b8183f9",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 284,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Not necessarily, the ResolveMethod\u003c\u003e() functions do throw but the GetResolvedMethod() function does not. However, they perform the same checks.",
      "parentUuid": "4edf6903_a5b20abf",
      "range": {
        "startLine": 284,
        "startChar": 11,
        "endLine": 284,
        "endChar": 77
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ec53391_769b4f45",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 1201,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Either its really simple (and allows noninterface-\u003eclass and interface-\u003einterface only) or it needs more explanation.\n\nIf it\u0027s really that simple, maybe just add it in there as a comment?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ade2496_a03debea",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 1201,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ec53391_769b4f45",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8026819e_b3bc7b1b",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 1208,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Can you add a comment here to explain difference between this and above?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5371c11_29d6388a",
        "filename": "runtime/class_linker.h",
        "patchSetId": 44
      },
      "lineNbr": 1208,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8026819e_b3bc7b1b",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6e937d5_c7e2cd59",
        "filename": "runtime/dex_file-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 184,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-19T15:39:16Z",
      "side": 1,
      "message": "Why is this change related?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "740bee2b_6b469e31",
        "filename": "runtime/dex_file-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 184,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Minor unrelated cleanup. Do you want to split that out?",
      "parentUuid": "c6e937d5_c7e2cd59",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91082223_ac2a6bd9",
        "filename": "runtime/dex_file-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 184,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-20T11:38:49Z",
      "side": 1,
      "message": "It does make the CL shorter, but up to you.",
      "parentUuid": "740bee2b_6b469e31",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e060d896_1c9496f0",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 81,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-19T15:39:16Z",
      "side": 1,
      "message": "Add a check that outer_method is not obsolete (it can\u0027t be because we don\u0027t inline in jvmti).",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24ddc0b6_1837f619",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 81,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e060d896_1c9496f0",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07ed1ca7_6baa687c",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 94,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-19T15:39:16Z",
      "side": 1,
      "message": "Indentation is off.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5983a09c_a49fa92c",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 94,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "No, it isn\u0027t. Check your gerrit settings.",
      "parentUuid": "07ed1ca7_6baa687c",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92948ae9_72563a4b",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 94,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-20T11:38:49Z",
      "side": 1,
      "message": "It\u0027s before your change, but there\u0027s 2 more spaces before the LOG(FATAL).",
      "parentUuid": "5983a09c_a49fa92c",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d95de018_5a1365f5",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 94,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-20T12:25:32Z",
      "side": 1,
      "message": "Ah, now I see.",
      "parentUuid": "92948ae9_72563a4b",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4548d029_afd2a787",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 100,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-19T15:39:16Z",
      "side": 1,
      "message": "Can you address this TODO?",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 86
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f400e04_ccdaed92",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 100,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Actually, I\u0027ll just drop it. It seems to me that we shouldn\u0027t have such a restriction here.",
      "parentUuid": "4548d029_afd2a787",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 86
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e18b9f5_0e1038af",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 540,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-19T15:39:16Z",
      "side": 1,
      "message": "Why not keeping the old contract of only passing an interface method?",
      "range": {
        "startLine": 536,
        "startChar": 0,
        "endLine": 540,
        "endChar": 3
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bbb519e_963c6626",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 540,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "That would spread the changes required for the lookup change (search Object for interfaces) across many places.",
      "parentUuid": "3e18b9f5_0e1038af",
      "range": {
        "startLine": 536,
        "startChar": 0,
        "endLine": 540,
        "endChar": 3
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3f277c2_763d7829",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 428,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "If its returning a copied method here  then how does the accessibility check work w.r.t. to referrer? Does it take into account where copied method was copied from?\n\nAlthough maybe its only a problem for abstract (miranda) methods? Defaults might never have accessibility problems, I\u0027m not 100% sure [but this should be stated somewhere if we rely on that assumption].",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bc4aa03_2841bfb8",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 428,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Interfaces do not have \"copied\" methods in ART.",
      "parentUuid": "d3f277c2_763d7829",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cdf8592_37f43e11",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 428,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "Default methods were copied into class methods, has this changed?",
      "parentUuid": "5bc4aa03_2841bfb8",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56e9a02c_4e9568c2",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 428,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Only for non-interface classes and this is FindInterfaceMethod().",
      "parentUuid": "4cdf8592_37f43e11",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "312e1627_abfb5233",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 464,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Not sure about this for copied methods either. See comment on L428.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd1751d9_a7a577cc",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 464,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "This is not used for \"copied\" methods. That\u0027s why it was originally named IsInheritedDeclaredMethod().",
      "parentUuid": "312e1627_abfb5233",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27d4df9a_78275ff4",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 506,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Why does it need separate code? If you call GetInterfaceMethodIfProxy it returns \u0027this\u0027 for non-proxy.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d92c51c_d5cb5622",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 506,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Maybe it does not. Is it premature optimization to try and avoid checking the IsProxyMethod() for each method?",
      "parentUuid": "27d4df9a_78275ff4",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4edb75ba_864d5c00",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 506,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "Yeah I don\u0027t think its really a win at all, it just makes this code more confusing. GetInterfaceMethodIfProxy will be quite fast since it just needs to check its own access flag and return itself.",
      "parentUuid": "8d92c51c_d5cb5622",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0189c300_f8d2d4e1",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 506,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Done; OK, let\u0027s have some extra instructions in the fast path in the loop (LDR+LDR+TBNZ on arm64, 4 dependent instructions on arm).",
      "parentUuid": "4edb75ba_864d5c00",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7db29859_ddffc93d",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 506,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T17:21:42Z",
      "side": 1,
      "message": "If you think it\u0027s really hot this could be refactored into a template method:\n\n    template \u003cbool kIsProxy\u003e\n\n    for (ArtMethod\u0026 method : this_klass-\u003eGetDeclaredMethodsSlice(pointer_size)) {\n      ArtMethod* np_method \u003d (kIsProxy ? \n          method.GetInterfaceMethodIfProxy(pointer_size) : method);\n      if (np_method-\u003eGetName() \u003d\u003d name \u0026\u0026 np_method-\u003eGetSignature() \u003d\u003d signature) {\n        return \u0026method;\n      }\n    }",
      "parentUuid": "0189c300_f8d2d4e1",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5784808d_977ee852",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 506,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:36:22Z",
      "side": 1,
      "message": "I do not expect this to be critical.",
      "parentUuid": "7db29859_ddffc93d",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9d900fc_504d1d2c",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 517,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "? proxy has a superclass java.lang.Object so how is this working?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f074560_39133fe1",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 517,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Proxy classes are final and we\u0027ve already gone at least one step up from `this_klass`, so the current `klass` cannot be a proxy class.",
      "parentUuid": "a9d900fc_504d1d2c",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6216d6d_657ebf19",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 545,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Missing IsInheritedMethod checks?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51e1f688_cbc9c5cc",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 545,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "I think \"copied\" methods are by definition inherited, otherwise we would not copy them in the first place.\n\n(Also, I intend to deal with \"copied\" methods later as they seem to be somewhat broken.)",
      "parentUuid": "b6216d6d_657ebf19",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01c2901b_69ff85ee",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 545,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "Maybe it just needs some DCHECKs then with some comments?",
      "parentUuid": "51e1f688_cbc9c5cc",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c04ba8c6_ba827cd9",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 545,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Done, just comments.",
      "parentUuid": "01c2901b_69ff85ee",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b17cb57_3e430767",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 549,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear if it can return null? What is supposed to happen in exceptional cases?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5565b89_4f1f664a",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 549,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "This can return `null` if we find nothing in steps 2 (lines 516-530) and 3 (lines 541-548).",
      "parentUuid": "5b17cb57_3e430767",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ac550e2_56e09a11",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 655,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "This seems very similar to FindClassMethodWithSignature, why can\u0027t they be combined together?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ee4d24f_1342a728",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 655,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "This is an optimized version that\u0027s trying to compare a few numbers if possible instead of comparing lots of strings and accessing data all over the dex file.",
      "parentUuid": "3ac550e2_56e09a11",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a3ae249_9157439a",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 655,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "Maybe the parts that are different can be factored out into an overloaded function? It seems no real reason to keep 2 separate implementations, they will just drift apart over time.",
      "parentUuid": "4ee4d24f_1342a728",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad5e762_3650e290",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 655,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "I do not see an obvious way to refactor any shared parts.",
      "parentUuid": "9a3ae249_9157439a",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4e2bd0d_4a79b355",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 659,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Why? Proxy classes have constructors too.",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffef5374_1d7dce0b",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 659,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "This is a convenience method for a few calls in the runtime. It\u0027s not used on proxy classes. (Though it\u0027s used to find the constructor of java.lang.reflect.Proxy when creating proxy classes.)",
      "parentUuid": "e4e2bd0d_4a79b355",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "635f792c_ae5a20ec",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 659,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "Ok, but why is this DCHECK necessary? The code seems like it should work on a proxy class.\n\nDoes it break for L661 or something because it has a DexFile dependency?",
      "parentUuid": "ffef5374_1d7dce0b",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "253f87e2_dda39459",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 44
      },
      "lineNbr": 659,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Added a comment. Line 662 would need GetInterfaceMethodIfProxy().",
      "parentUuid": "635f792c_ae5a20ec",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aafddf8_9ecf9069",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 918,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: Consider removing, as it is confusing and makes me think of a java overload , but this is referring to the fact there\u0027s 3 C++ overloads?",
      "range": {
        "startLine": 918,
        "startChar": 78,
        "endLine": 918,
        "endChar": 87
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d00bbb1_68c62596",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 918,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3aafddf8_9ecf9069",
      "range": {
        "startLine": 918,
        "startChar": 78,
        "endLine": 918,
        "endChar": 87
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3c55aff_d7f2ab4a",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 924,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "FindClassMethod has a section about ICCE, IAE, etc, this does not?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d73de7a_1385208b",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 924,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "No, FindClassMethod() does not have a section about ICCE/IAE. It has a section about one very odd corner case.",
      "parentUuid": "c3c55aff_d7f2ab4a",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ffff4f_0a747318",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 940,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "nit: Consider removing, as it is confusing and makes me think of a java overload , but this is referring to the fact there\u0027s 3 C++ overloads?",
      "range": {
        "startLine": 940,
        "startChar": 78,
        "endLine": 940,
        "endChar": 91
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "677edeab_51488cf7",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 940,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92ffff4f_0a747318",
      "range": {
        "startLine": 940,
        "startChar": 78,
        "endLine": 940,
        "endChar": 91
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df012fb5_942f09c4",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 959,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "It might be worth to be more detailed about error conditions here as well (in a follow up CL)?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7ac49c4_76f34412",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 959,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "This function does not have error conditions. It either finds something or it doesn\u0027t.",
      "parentUuid": "df012fb5_942f09c4",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01ec0894_bfdf6022",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 959,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-19T15:36:57Z",
      "side": 1,
      "message": "L961-L963 are what I was referring to. What would you call that? Edge conditions? The point is it\u0027s not detailed enough (L961-L963).",
      "parentUuid": "a7ac49c4_76f34412",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4cf2064_b5251b43",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 959,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T17:09:31Z",
      "side": 1,
      "message": "Whatever you call it, the level of detail is exactly as intended. The next level would be a one-pager for the changes to be implemented by callers, i.e. *not here*.",
      "parentUuid": "01ec0894_bfdf6022",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81a91e14_ba90daae",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 960,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "NoSuchMethodError?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c723115d_63ebd0ae",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 960,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "NoSuchMethodError is for the case where we didn\u0027t find anything. I do not think it needs particular attention here. This note is about a non-intuitive result of returning a method that has not been inherited.",
      "parentUuid": "81a91e14_ba90daae",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2698fd1d_3a8b508d",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 963,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T22:25:55Z",
      "side": 1,
      "message": "Unclear what happens. Does it return null? Does it throw an error? Does it return a method, if invoked would throw an error? How does the caller fulfill the responsibility to check for the error condition?\n\nPlease document the exact behavior.",
      "range": {
        "startLine": 961,
        "startChar": 0,
        "endLine": 963,
        "endChar": 28
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22e95cb7_21dc218f",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 44
      },
      "lineNbr": 963,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "This note describes the case where we return a method (not null) that has _not_ been inherited. I\u0027d interpret this as breaking the \"m still exists in the type T\" (see JLS 15.12.4.3) but I think it\u0027s more reasonable to interpret this case as providing \"less access\" (13.4.7) and throwing ICCE itself rather than the NSME.\n\nFor the moment we do not perform the correct checks, i.e. the caller does not fully enforce 15.12.4.3.",
      "parentUuid": "2698fd1d_3a8b508d",
      "range": {
        "startLine": 961,
        "startChar": 0,
        "endLine": 963,
        "endChar": 28
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "323454a2_2ece2c5a",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 44
      },
      "lineNbr": 3852,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-07-18T23:36:02Z",
      "side": 1,
      "message": "This seems OK, but really relies on us correctly annotating all points that check the cache. I hope we have enough test coverage...",
      "range": {
        "startLine": 3850,
        "startChar": 0,
        "endLine": 3852,
        "endChar": 5
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba789ae0_e825c357",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 44
      },
      "lineNbr": 3852,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "I already reviewed all callers of ResolveMethod\u003c\u003e() to make sure they pass the correct ResolveMode.",
      "parentUuid": "323454a2_2ece2c5a",
      "range": {
        "startLine": 3850,
        "startChar": 0,
        "endLine": 3852,
        "endChar": 5
      },
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a64ea15f_d519e492",
        "filename": "test/162-method-resolution/info.txt",
        "patchSetId": 44
      },
      "lineNbr": 1,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T21:12:13Z",
      "side": 1,
      "message": "(See Main.java for per-test details)",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af532225_0794599c",
        "filename": "test/162-method-resolution/info.txt",
        "patchSetId": 44
      },
      "lineNbr": 1,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a64ea15f_d519e492",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65aa331c_c0efea43",
        "filename": "test/162-method-resolution/multidex.jpp",
        "patchSetId": 44
      },
      "lineNbr": 0,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-18T21:12:13Z",
      "side": 1,
      "message": "This is jack only afaik, so what does it do for javac? Why does only jack need it?",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a56e9367_01c345d6",
        "filename": "test/162-method-resolution/multidex.jpp",
        "patchSetId": 44
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-19T14:48:51Z",
      "side": 1,
      "message": "Because jack is weird. For javac we\u0027re using the source location (\"*-multidex/\" or not) but jack needs this spelled out.",
      "parentUuid": "65aa331c_c0efea43",
      "revId": "1ebde1d9d06d357d77cec983041ee7b8c9b56dbe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}