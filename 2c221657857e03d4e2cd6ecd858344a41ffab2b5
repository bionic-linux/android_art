{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e888c679_d53dc123",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T21:13:57Z",
      "side": 1,
      "message": "I think this version should be solid. enh also suggested using pidfd instead. That\u0027s probably an even better, but much more intrusive solution.",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5afeef8_72d47a2f",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 752,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-10-12T21:42:21Z",
      "side": 1,
      "message": "`stat`",
      "range": {
        "startLine": 752,
        "startChar": 44,
        "endLine": 752,
        "endChar": 49
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7765fd6_d74e3c46",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 752,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T02:48:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5afeef8_72d47a2f",
      "range": {
        "startLine": 752,
        "startChar": 44,
        "endLine": 752,
        "endChar": 49
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56dac071_e756e992",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 756,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T21:36:20Z",
      "side": 1,
      "message": "isn\u0027t an infinite loop likely to be easier to spot and debug?",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93024e87_083ff31a",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 756,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T22:37:22Z",
      "side": 1,
      "message": "I think I would rather see a crash in the log. I\u0027ve otherwise usually had a hard time finding the cause of the boot process hanging, especially if it\u0027s an intermittent failure in postsubmit or later. Which seems to be my usual problem.",
      "parentUuid": "56dac071_e756e992",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9464212f_1f7187cc",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 757,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T21:36:20Z",
      "side": 1,
      "message": "do you have a reason to avoid libc\u0027s BUFSIZ?",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b64641b_333228c1",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 757,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T22:37:22Z",
      "side": 1,
      "message": "To be honest, I wasn\u0027t really aware of it. But it sounds like it\u0027s not really intended to be compatible with possible frame size constraints?",
      "parentUuid": "9464212f_1f7187cc",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "426f7bb3_88aa5967",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 757,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T18:31:22Z",
      "side": 1,
      "message": "Marking resolved.",
      "parentUuid": "3b64641b_333228c1",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87474cc1_39570764",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 759,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T21:36:20Z",
      "side": 1,
      "message": "`|O_CLOEXEC`",
      "range": {
        "startLine": 759,
        "startChar": 42,
        "endLine": 759,
        "endChar": 50
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f266e72e_afbba173",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 759,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T22:37:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87474cc1_39570764",
      "range": {
        "startLine": 759,
        "startChar": 42,
        "endLine": 759,
        "endChar": 50
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df049af1_57b6df31",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T21:36:20Z",
      "side": 1,
      "message": "y u hate fscanf()?\n\nsomething like this should work, i think:\n```\n  FILE* fp \u003d fopen(\"/proc/self/stat\", \"re\");\n  CHECK(fp !\u003d nullptr) \u003c\u003c strerror(errno);\n  CHECK(fscanf(fp,\n      \"%*c \"   // state\n      \"%*d \"   // ppid\n      \"%*d \"   // pgrp\n      \"%*d \"   // session\n      \"%*d \"   // tty_nr\n      \"%*d \"   // tpgid\n      \"%*u \"   // flags\n      \"%*lu \"  // minflt\n      \"%*lu \"  // cminflt\n      \"%*lu \"  // majflt\n      \"%*lu \"  // cmajflt\n      \"%*lu \"  // utime\n      \"%*lu \"  // stime\n      \"%*ld \"  // cutime\n      \"%*ld \"  // cstime\n      \"%*ld \"  // priority\n      \"%*ld \"  // nice\n      \"%ld \",  // num_threads\n      \u0026num_threads) \u003d\u003d 1);\n  fclose(fp);\n```",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c62d60b_1cea826d",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T21:43:35Z",
      "side": 1,
      "message": "oh, actually i\u0027ve just realized that format string was for status, not stat...\n\nyou can either do that the \"hard\" way (still easier than what you have here, though; see https://source.corp.google.com/h/android/platform/superproject/main/+/main:system/libprocinfo/process.cpp;l\u003d149) if you want the name, or the code above but with this format string:\n```\n\"%*d \" // pid\n\"%*s \" // comm\n\"%*c \" // state\n\"%*d \" // ppid\n\"%*d \" // pgrp\n\"%*d \" // session\n\"%*d \" // tty_nr\n\"%*d \" // tpgid\n\"%*u \" // flags\n\"%*lu \" // minflt\n\"%*lu \" // cminflt\n\"%*lu \" // majflt\n\"%*lu \" // cmajflt\n\"%*lu \" // utime\n\"%*lu \" // stime\n\"%*ld \" // cutime\n\"%*ld \" // cstime\n\"%*ld \" // priority\n\"%*ld \" // nice\n\"%ld \"  // num_threads\n```\n(untested, just copied from what `man 5 proc` says.)",
      "parentUuid": "df049af1_57b6df31",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7745d6a_a1dcbdb4",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T22:37:22Z",
      "side": 1,
      "message": "In general, sure. But in this case, I wanted to be very sure that the result I get corresponds to a single read call. I guess this could be done similarly with sscanf, But, given the need for paren matching, it didn\u0027t seem any less obscure. I assume the command name can include blanks, so we either need a messy scanf format or a mixture of styles? Or is there an easy way to match anything up to the first \")\"?",
      "parentUuid": "df049af1_57b6df31",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fe4f2f3_7b5bbb35",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T22:49:35Z",
      "side": 1,
      "message": "you will get a single read() --- you\u0027re basically just replacing your own char[] with stdio\u0027s one. you\u0027re relying on the kernel allocating a page and servicing any \u003c\u003dPAGE_SIZE read() as a single[1] read either way (and, yes, you can rely on that). fscanf() is the same, but shorter and clearer.\n\n___\n1. well, \"single\" in the TEMP_FAILURE_RETRY() sense, but i know that\u0027s what you mean :-)",
      "parentUuid": "e7745d6a_a1dcbdb4",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cc080a7_831f045b",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T02:48:02Z",
      "side": 1,
      "message": "I assume that library you pointed at isn\u0027t directly usable from ART. But borrowing existing code does sound more attractive. I\u0027ll see if I can do that.",
      "parentUuid": "9fe4f2f3_7b5bbb35",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cb26e58_33fdde06",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-10-13T03:30:51Z",
      "side": 1,
      "message": "Making an explicit read call (you are already doing that) and then using sscanf(buf...) to simplify the code seems like the best way?\n\nRegarding the parren matching and command name, aren\u0027t we sure that it will always be `(zygote)` or `(zygote64)`? That should be correctly captured by `%*s`, right? If you want to be even more robust regarding command name then also once you are past `)`, I\u0027d recommend using sscanf for the rest",
      "parentUuid": "3cc080a7_831f045b",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dad8889_f9336520",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T03:32:16Z",
      "side": 1,
      "message": "I changed my version to sscanf, and then read the man page more carefully when I ran into lint complaints. The man page basically says sscanf is deprecated for numeric conversions because of a C standard bug. And lint complains about %ld in that it doesn\u0027t want me to declare a plain long.\n\nIt seems easier to leave the code the way it is. The number of lines is about the same, though I agree the scanf version is easier to read.\n\nAll this is oddly similar to some memories I have about scanf from long ago. So I\u0027m getting closer to your original assessment of my feelings for scanf.",
      "parentUuid": "3cc080a7_831f045b",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49c2f4c_9c8492b3",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-13T15:53:01Z",
      "side": 1,
      "message": "actually, ART already uses libprocinfo, so that might be the best choice of all.\n\n(the macros like SCNd32 are the solution to 32-/64-bit format issues, though i\u0027m supicious that libprocinfo doesn\u0027t have to use them...)",
      "parentUuid": "5dad8889_f9336520",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b12fd823_b121424b",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 767,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T18:30:32Z",
      "side": 1,
      "message": "It appears to me that we would have to use GetProcessTids(), which has the same issue that we currently have: It relies on multiple calls to readdir returning consistent results, and not failing, even when the underlying directory is concurrently changing. That may happen to work, but we currently have some empirical evidence that it might not, at least in some cases. And I haven\u0027t found a claim that it should work. I really want code that does a manifestly atomic read of some value that indicates the number of threads.\n\nI\u0027m still inclined to leave this as, at least for now.",
      "parentUuid": "b49c2f4c_9c8492b3",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e17c424d_d1ac69ac",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 770,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-10-12T21:42:21Z",
      "side": 1,
      "message": "I don\u0027t think you have to be worried about partial reads.",
      "range": {
        "startLine": 767,
        "startChar": 2,
        "endLine": 770,
        "endChar": 5
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ef3bb68_ba9a61f0",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 770,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T02:48:02Z",
      "side": 1,
      "message": "My concern was finding that guarantee somewhere in a spec, since we seem to be having some issues around this now. (Though I\u0027m not sure exactly what system call sequence the current code results in.) But there seems to be enough reliance on that for it to be OK.",
      "parentUuid": "e17c424d_d1ac69ac",
      "range": {
        "startLine": 767,
        "startChar": 2,
        "endLine": 770,
        "endChar": 5
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab3e023b_d5b59fb5",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 770,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-10-13T03:30:51Z",
      "side": 1,
      "message": "Only `read` syscall is involved here. The kernel (in the VFS layer) figures out from the inode associated with the passed fd that it belongs to procfs, and then the procfs\u0027 relevant function computes/captures the values, writes them on the user buffer, and returns.\n\nThat\u0027s why I don\u0027t see any possibility of partial reads here.",
      "parentUuid": "0ef3bb68_ba9a61f0",
      "range": {
        "startLine": 767,
        "startChar": 2,
        "endLine": 770,
        "endChar": 5
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d1c529f_15fc386d",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 770,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T03:32:16Z",
      "side": 1,
      "message": "Removed most of the code to deal with short reads.",
      "parentUuid": "0ef3bb68_ba9a61f0",
      "range": {
        "startLine": 767,
        "startChar": 2,
        "endLine": 770,
        "endChar": 5
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03a1edc4_fe88282a",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 788,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-10-12T21:42:21Z",
      "side": 1,
      "message": "Wouldn\u0027t it be simpler to use `sscanf` instead?",
      "range": {
        "startLine": 771,
        "startChar": 2,
        "endLine": 788,
        "endChar": 5
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "379ae8be_8ae1d1c8",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 788,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T02:48:02Z",
      "side": 1,
      "message": "See above discussion :-) Feel free to chime in there.",
      "parentUuid": "03a1edc4_fe88282a",
      "range": {
        "startLine": 771,
        "startChar": 2,
        "endLine": 788,
        "endChar": 5
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6685cc9_6a26947a",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 791,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-10-12T21:42:21Z",
      "side": 1,
      "message": "Isn\u0027t it too brittle? Maybe log it with warning but continue to loop?",
      "range": {
        "startLine": 791,
        "startChar": 6,
        "endLine": 791,
        "endChar": 11
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e7cd443_a6b1c439",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 791,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-13T02:48:02Z",
      "side": 1,
      "message": "I guess there\u0027s not much of a cost to increase the iteration count, so we wait at least a second before crashing. I\u0027ll do that. Though we are waiting for a thread that has already finished unregistering itself, so it should be really really close to exiting.\n\nI would rather not continue indefinitely in this case. Given the limited information we get from many crashes, I think that would be hard to diagnose.",
      "parentUuid": "c6685cc9_6a26947a",
      "range": {
        "startLine": 791,
        "startChar": 6,
        "endLine": 791,
        "endChar": 11
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "016f8a0d_64cb6a81",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 793,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T21:36:20Z",
      "side": 1,
      "message": "we\u0027re counting in https://en.wikipedia.org/wiki/Myriad s now? :-)\n\n(`#include \u003candroid-base/chrono_utils.h\u003e` to take advantage of the chrono literals and `std::this_thread::sleep_for(2s);` or whatever you actually want to say.)",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9858808b_996daca2",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 793,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T22:37:22Z",
      "side": 1,
      "message": "Oops. Fixed. Not that I expect this code to ever be executed.\n\nART currently has several dozen uses of usleep, and none of sleep_for. We should probably clean this up separately.",
      "parentUuid": "016f8a0d_64cb6a81",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dab2db9_b4f861e6",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 793,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T22:49:35Z",
      "side": 1,
      "message": "(yeah, philosophically i\u0027m not a huge fan of user-defined literals, but std::chrono_literals is pretty cool.)",
      "parentUuid": "9858808b_996daca2",
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0366f46_46cdcf04",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 821,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-12T21:36:20Z",
      "side": 1,
      "message": "wouldn\u0027t this be more useful in your failure case code in WaitUntilSingleThreaded()? _that_ seems like when i\u0027d want to see this? (but was also what i meant by \"are you sure it isn\u0027t more useful to just hang so i can inspect to work out what\u0027s wrong?\")",
      "range": {
        "startLine": 813,
        "startChar": 4,
        "endLine": 821,
        "endChar": 7
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff5f8f68_5cf3cd05",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 821,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T22:37:22Z",
      "side": 1,
      "message": "I agree this reads strangely. The condition should actually be established by WaitForUnregisterToComplete. So I moved up the checks. Since we still hold the thread_list_lock_, it can\u0027t be invalidated.",
      "parentUuid": "e0366f46_46cdcf04",
      "range": {
        "startLine": 813,
        "startChar": 4,
        "endLine": 821,
        "endChar": 7
      },
      "revId": "2c221657857e03d4e2cd6ecd858344a41ffab2b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}