{
  "comments": [
    {
      "key": {
        "uuid": "7c0657a0_eed9fb41",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2980,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-10-24T17:54:34Z",
      "side": 1,
      "message": "Is `vixl::aarch32::LeaveFlags` the equivalent of `art::arm::kCcKeep`?  If so, the current code seems correct (with respect to the current version of VIXL in AOSP).",
      "range": {
        "startLine": 2979,
        "startChar": 0,
        "endLine": 2980,
        "endChar": 53
      },
      "revId": "eb0db020f168deb0d239db391e8cd5d0ee6aa68e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "617f90e7_2773da5d",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2980,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2016-10-26T16:18:37Z",
      "side": 1,
      "message": "Yes, it works correctly.\nCurrently if you don\u0027t provide any LeaveFlags option for macroinstruction vixl will use instruction which doesn\u0027t touches the flags, so ADD will never transform into ADDS. This can lead to code size increase due to 16bit/32bit encodings usage\n\nOn the other hand the current ART arm assembler approach leads sometimes to excessive use of flags which may lead to performance regressions.\n\nThus we stick with current implementation; a little bit later we shall work on it as a \"reach parity\" task.\n\nI have rephrased the comment.",
      "parentUuid": "7c0657a0_eed9fb41",
      "range": {
        "startLine": 2979,
        "startChar": 0,
        "endLine": 2980,
        "endChar": 53
      },
      "revId": "eb0db020f168deb0d239db391e8cd5d0ee6aa68e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612f9071_e71ea284",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2980,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-26T16:55:30Z",
      "side": 1,
      "message": "The kCcDontCare tells the Thumb2Assembler that the flags are irrelevant for correctness, so is optimizes for code size. That\u0027s the simple optimization target. Trying to optimize for speed is more difficult because performance depends on too many factors (including code size).\n\nFor 32-bit instructions, Thumb2Assembler treats kCcDontCare as kCcKeep.",
      "parentUuid": "617f90e7_2773da5d",
      "range": {
        "startLine": 2979,
        "startChar": 0,
        "endLine": 2980,
        "endChar": 53
      },
      "revId": "eb0db020f168deb0d239db391e8cd5d0ee6aa68e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612f9071_47e76e69",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 2980,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2016-10-26T17:17:16Z",
      "side": 1,
      "message": "Yes, I just meant that we haven\u0027t enabled this code-size-only optimization in VIXL and later will come back and investigate possible improvements (including performance probably).",
      "parentUuid": "612f9071_e71ea284",
      "range": {
        "startLine": 2979,
        "startChar": 0,
        "endLine": 2980,
        "endChar": 53
      },
      "revId": "eb0db020f168deb0d239db391e8cd5d0ee6aa68e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_cede3728",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3251,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-10-24T17:54:34Z",
      "side": 1,
      "message": "Maybe add a TODO (in compiler/utils/arm/assembler_arm_shared.h or in compiler/utils/arm/assembler_arm_vixl.h) to (eventuelly) replace `art::arm::SetCc` with `vixl::aarch32::FlagsUpdate`?",
      "range": {
        "startLine": 3251,
        "startChar": 59,
        "endLine": 3251,
        "endChar": 64
      },
      "revId": "eb0db020f168deb0d239db391e8cd5d0ee6aa68e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0195f44b_8c674743",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 3251,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2016-10-26T16:18:37Z",
      "side": 1,
      "message": "Have put the comment here - it\u0027s the single place where it is used for now.",
      "parentUuid": "7c0657a0_cede3728",
      "range": {
        "startLine": 3251,
        "startChar": 59,
        "endLine": 3251,
        "endChar": 64
      },
      "revId": "eb0db020f168deb0d239db391e8cd5d0ee6aa68e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}