{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3721b99f_68582738",
        "filename": "test/536-checker-needs-access-check/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-30T09:45:24Z",
      "side": 0,
      "message": "Isn\u0027t that exposing that we have a bug in ART, and therefore some discrepancy between R8 (which I guess changes this code to returning 0?), and ART (throws an exception) ?",
      "range": {
        "startLine": 70,
        "startChar": 14,
        "endLine": 70,
        "endChar": 49
      },
      "revId": "de54c46811f0a77089996776c758b71934e730f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b1cec54_6d05cdb8",
        "filename": "test/536-checker-needs-access-check/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1241761
      },
      "writtenOn": "2023-06-30T10:38:26Z",
      "side": 0,
      "message": "Yes, that is the issue with ART doing type resolution before the checking null. Posted an FYI in https://b.corp.google.com/issues/288376353#comment2 but maybe it should be split out to its own bug.",
      "parentUuid": "3721b99f_68582738",
      "range": {
        "startLine": 70,
        "startChar": 14,
        "endLine": 70,
        "endChar": 49
      },
      "revId": "de54c46811f0a77089996776c758b71934e730f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b39d65ce_12198bf6",
        "filename": "test/536-checker-needs-access-check/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-30T10:45:08Z",
      "side": 0,
      "message": "Hmm, should we have R8 just behave like ART for consistency?",
      "parentUuid": "4b1cec54_6d05cdb8",
      "range": {
        "startLine": 70,
        "startChar": 14,
        "endLine": 70,
        "endChar": 49
      },
      "revId": "de54c46811f0a77089996776c758b71934e730f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a167f763_ac0432bb",
        "filename": "test/536-checker-needs-access-check/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1241761
      },
      "writtenOn": "2023-06-30T11:15:30Z",
      "side": 0,
      "message": "Doing so will increase the complexity of the workaround for the the verifier bug as it will require D8 to insert additional code to trigger the resolution and cause an IllegalAccessException.",
      "parentUuid": "b39d65ce_12198bf6",
      "range": {
        "startLine": 70,
        "startChar": 14,
        "endLine": 70,
        "endChar": 49
      },
      "revId": "de54c46811f0a77089996776c758b71934e730f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9dbb354_75f85643",
        "filename": "test/536-checker-needs-access-check/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1241761
      },
      "writtenOn": "2023-06-30T11:21:46Z",
      "side": 0,
      "message": "Also, I actually did do an extended workaround to translate the code:\n```\nboolean result \u003d null instanceof InaccessibleClass;\n\u003ctail\u003e\n```\nto\n```\nboolean unused \u003d null instanceof InaccessibleClass;\nboolean result \u003d false;\n\u003ctail\u003e\n```\n\nAnd with this code DEX VM 6.0.1 did not throw an instance of IllegalAccessError. I did not investigate that further as neither do any JVMs and the spec is clear that it should not.\n\nJust an FYI, that I\u0027m not sure what the workaround for this code would look like to be consistent on all VMs.",
      "parentUuid": "a167f763_ac0432bb",
      "range": {
        "startLine": 70,
        "startChar": 14,
        "endLine": 70,
        "endChar": 49
      },
      "revId": "de54c46811f0a77089996776c758b71934e730f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb5e4833_743a6a82",
        "filename": "test/536-checker-needs-access-check/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-30T13:12:08Z",
      "side": 0,
      "message": "JVMS is not strictly relevant for ART. If it\u0027s not in JLS, we don\u0027t need to follow.\n\nIn this case, JLS surely says that the code would not compile, so the only requirements are in the Chapter 13, Binary Compatibility. (I\u0027 looking at SE17.) 13.4.3 says that IAE is thrown but the phrasing is \"needs but no longer has access to\", so the question is whether the expression `null instanceof C` \"needs\" access to `C`. And the description of `instanceof` in 15.20.2 does not really help answering the question whether the RHS operand of the `instanceof` operator is evaluated before processing the `instanceof` operator itself. I consider it reasonable to evaluate the RHS operand first (as ART does).",
      "parentUuid": "b9dbb354_75f85643",
      "range": {
        "startLine": 70,
        "startChar": 14,
        "endLine": 70,
        "endChar": 49
      },
      "revId": "de54c46811f0a77089996776c758b71934e730f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}