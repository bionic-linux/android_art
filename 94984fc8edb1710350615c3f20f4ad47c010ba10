{
  "comments": [
    {
      "key": {
        "uuid": "d9063859_9a14f23d",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1652,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "I would pull this out the if condition on its own line:\n\n  value \u003d AdjustConstantForCondition(value, \u0026copy);\n\nThen the AdjustConstantForCondition() can do other adjustments in future, not only those that change the value to 0. For example, it can change \"\u003c\u003d0xdfff\" to \"\u003c0xe000\" to allow using modified immediate. Other code can be refactored to take advantage of this, see the comment at lines 1857-1866.",
      "range": {
        "startLine": 1652,
        "startChar": 6,
        "endLine": 1652,
        "endChar": 46
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "286805a3_0a3e4748",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1652,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-04-26T15:46:49Z",
      "side": 1,
      "message": "So far the intention has been to confine any adjustments to this block (which is the reason the function operates on a copy of the condition), but I agree that it will make it easier to extend the code.",
      "parentUuid": "d9063859_9a14f23d",
      "range": {
        "startLine": 1652,
        "startChar": 6,
        "endLine": 1652,
        "endChar": 46
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8abc82a_6a9538b5",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1842,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "We should adjust the value here with the AdjustConstantForCondition() to keep in sync with the GenerateLongTestConstant() and not miss optimization opportunities.",
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "553ddb15_e75b5505",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1842,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-04-26T15:46:49Z",
      "side": 1,
      "message": "Oh, yes, 1 is not handled properly.",
      "parentUuid": "c8abc82a_6a9538b5",
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fe84360_c30d27bc",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1866,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "Note that this adjustment could be moved into AdjustConstantForCondition() but I\u0027m not asking you to do that in this CL.",
      "range": {
        "startLine": 1857,
        "startChar": 13,
        "endLine": 1866,
        "endChar": 9
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "210ab699_b548efe0",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1866,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-04-26T15:46:49Z",
      "side": 1,
      "message": "I\u0027d rather remove this function completely, i.e. assume that it always returns true. If the VIXL-based backend is the way forward, it can handle all inputs with minimal code changes, i.e. for the CMP + IT + CMP case, it is sufficient to simply add two lines after the first CMP (well, actually it should be made conditional on whether the value is encodable or not):\n\n vixl32::Register temp \u003d temps.Acquire();\n __ Mov(LeaveFlags, temp, Low32Bits(value));\n\nand adjust the second parameter of the second CMP.",
      "parentUuid": "3fe84360_c30d27bc",
      "range": {
        "startLine": 1857,
        "startChar": 13,
        "endLine": 1866,
        "endChar": 9
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be89abc9_bfacef59",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1866,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T16:28:52Z",
      "side": 1,
      "message": "Let\u0027s leave this for later, when we get rid of the old backend. (Unless you want to add the \"SetCc set_cc \u003d kCcDontCare\" parameter to the old assembler\u0027s LoadImmediate() which should be rather trivial.)",
      "parentUuid": "210ab699_b548efe0",
      "range": {
        "startLine": 1857,
        "startChar": 13,
        "endLine": 1866,
        "endChar": 9
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "625221a0_9b71d714",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1936,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "This is unnecessary for correctness if you reorder the SUB+EOR below.",
      "range": {
        "startLine": 1932,
        "startChar": 0,
        "endLine": 1936,
        "endChar": 3
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3be8d780_77502bad",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1936,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-05-08T14:07:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "625221a0_9b71d714",
      "range": {
        "startLine": 1932,
        "startChar": 0,
        "endLine": 1936,
        "endChar": 3
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf20742b_e11c225d",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1943,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "This has no impact on whether SUB encoding T1 can be used.",
      "range": {
        "startLine": 1938,
        "startChar": 0,
        "endLine": 1943,
        "endChar": 3
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1a5bb7e_b9d11e1e",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1943,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-04-26T15:46:49Z",
      "side": 1,
      "message": "Right, I was using a pair of EORs initialy, and it must have remained from then.",
      "parentUuid": "bf20742b_e11c225d",
      "range": {
        "startLine": 1938,
        "startChar": 0,
        "endLine": 1943,
        "endChar": 3
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f40dd556_382a9c48",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2170,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "GenerateConditionWithZero()?",
      "range": {
        "startLine": 2170,
        "startChar": 10,
        "endLine": 2170,
        "endChar": 34
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cfd9648_a8568592",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2170,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-04-26T15:46:49Z",
      "side": 1,
      "message": "Definitely not because kCondLE and kCondGT are unreachable cases in GenerateConditionWithZero() (and are meant to be). I can replace the function call with a \"break\", but some other people felt that this way was clearer.",
      "parentUuid": "f40dd556_382a9c48",
      "range": {
        "startLine": 2170,
        "startChar": 10,
        "endLine": 2170,
        "endChar": 34
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ae6d00a_f0c0d880",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2170,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T16:28:52Z",
      "side": 1,
      "message": "I see. I would prefer a \"break\" but it doesn\u0027t make much difference.",
      "parentUuid": "4cfd9648_a8568592",
      "range": {
        "startLine": 2170,
        "startChar": 10,
        "endLine": 2170,
        "endChar": 34
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "857eab1b_f9638734",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 2170,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-05-08T14:07:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ae6d00a_f0c0d880",
      "range": {
        "startLine": 2170,
        "startChar": 10,
        "endLine": 2170,
        "endChar": 34
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f6a98cf_c49903cf",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 3198,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "Can you inline the IT+MOV into the four callers, so that we do not need this weird dependency across functions?",
      "range": {
        "startLine": 3198,
        "startChar": 8,
        "endLine": 3198,
        "endChar": 53
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "549886ee_b6859355",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 3198,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-05-08T14:07:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f6a98cf_c49903cf",
      "range": {
        "startLine": 3198,
        "startChar": 8,
        "endLine": 3198,
        "endChar": 53
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2549cb4_70e99409",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 3222,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "Reorder:\n\n  case kCondGE:\n    __ mvn(out, ShifterOperand(in));\n    in \u003d out;\n    FALLTHROUGH_INTENDED;\n  case kCondLT:",
      "range": {
        "startLine": 3217,
        "startChar": 0,
        "endLine": 3222,
        "endChar": 7
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aca1e592_37d37ecc",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 3222,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-05-08T14:07:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2549cb4_70e99409",
      "range": {
        "startLine": 3217,
        "startChar": 0,
        "endLine": 3222,
        "endChar": 7
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b9ede61_1c4cf080",
        "filename": "test/409-materialized-condition/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "I think we should test values 0, 1, -1, Integer.MAX_VALUE, Integer.MIN_VALUE and maybe the 42. We could just put these values into an array and have another array with expected outputs.\n\nSimilar for the other tests.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 98,
        "endChar": 5
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13b3c85e_a83d6f3a",
        "filename": "test/409-materialized-condition/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-05-08T14:07:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b9ede61_1c4cf080",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 98,
        "endChar": 5
      },
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "670bbf3c_fe0db85d",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 732,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-04-26T12:10:54Z",
      "side": 1,
      "message": "Test also 1, -1, 0x100000000L, Long.MAX_VALUE, Long.MIN_VALUE.",
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e23ae6c_279eb0e0",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 732,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-05-08T14:07:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "670bbf3c_fe0db85d",
      "revId": "94984fc8edb1710350615c3f20f4ad47c010ba10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}