{
  "comments": [
    {
      "key": {
        "uuid": "2033601c_97b6fe7f",
        "filename": "cmdline/cmdline_types.h",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "Perhaps instead of copying-and-pasting the above code we can refactor it to a template?",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff07a714_135498fe",
        "filename": "cmdline/cmdline_types.h",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "Can I leave this to you? I\u0027m not the greatest fan of std::enable_if. Any simpler ideas how this could be restricted to primitives?",
      "parentUuid": "2033601c_97b6fe7f",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2866e699_44b98e7f",
        "filename": "cmdline/cmdline_types.h",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-31T00:03:21Z",
      "side": 1,
      "message": "I don\u0027t think you need any enable_if here.\n\nLeave cmdlinetype\u003cint\u003e/cmdline\u003cunsigned int\u003e specializations as-is.\n\nRefactor parse into a template function\n\n  template \u003ctypename T\u003e\n  Result ParseNumeric(...) {\n\n    // same code as CmdlineType\u003cunsigned int\u003e::Parse\n    // replace \"unsigned int\" -\u003e T\n    // replace \"int\" -\u003e std::make_signed\u003cT\u003e::type\n  }\n\nMaybe don\u0027t let \"unsigned long long\" or anything larger than \"long long\" through since that would fail.",
      "parentUuid": "ff07a714_135498fe",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85ff7f81_0e43f70a",
        "filename": "compiler/driver/compiler_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "Misleading. \"Failed to construct std::ofstream\" makes more sense, since it\u0027s unlikely out-of-memory, but \"option\" is likely illegal parameter for ofstream",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "928d27d4_0548f448",
        "filename": "compiler/driver/compiler_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "These very-scary templates should probably go into a separate file (compiler_options_map.cc, etc)",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6a56715_e6d2df49",
        "filename": "compiler/driver/compiler_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "return std::make_unique",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "903d4e05_2026daa0",
        "filename": "compiler/driver/compiler_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "Should be consistent with dex2oat_options: no unique_ptr necessary anyways.",
      "parentUuid": "c6a56715_e6d2df49",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e82de31_fc3fec1c",
        "filename": "compiler/driver/compiler_options_map-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "This wasn\u0027t always required was it? I don\u0027t remember writing it like this.",
      "range": {
        "startLine": 89,
        "startChar": 11,
        "endLine": 89,
        "endChar": 20
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a48c2c3_7bcd5532",
        "filename": "compiler/driver/compiler_options_map-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "I think it\u0027s because b is a template parameter itself?",
      "parentUuid": "4e82de31_fc3fec1c",
      "range": {
        "startLine": 89,
        "startChar": 11,
        "endLine": 89,
        "endChar": 20
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65a200a3_09381dbb",
        "filename": "compiler/driver/compiler_options_map-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-31T00:03:21Z",
      "side": 1,
      "message": "Ok, that explains it.",
      "parentUuid": "3a48c2c3_7bcd5532",
      "range": {
        "startLine": 89,
        "startChar": 11,
        "endLine": 89,
        "endChar": 20
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08a5cc17_3f86b325",
        "filename": "compiler/driver/compiler_options_map.def",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "nit: not aligned to below",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22abda77_5c2e432b",
        "filename": "compiler/driver/compiler_options_map.def",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "nit: is there any reason for these blank lines?",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5162b9d7_f053a3d4",
        "filename": "compiler/driver/compiler_options_map.h",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "?",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79256910_1fcd6d3a",
        "filename": "compiler/driver/compiler_options_map.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "move to top",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62c57726_97812f16",
        "filename": "compiler/driver/compiler_options_map.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "I don\u0027t think so? It\u0027s in the end a current-lib include, so it should be in this block.",
      "parentUuid": "79256910_1fcd6d3a",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b8ba884_5a555c5b",
        "filename": "compiler/driver/compiler_options_map.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-31T00:03:21Z",
      "side": 1,
      "message": "current-lib includes should go before system headers, that way if those headers themselves are missing includes they won\u0027t spuriously succeed\n\nthis is in our style guide",
      "parentUuid": "62c57726_97812f16",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5fffcf3_961a0f77",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 4
      },
      "lineNbr": 1110,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "I don\u0027t even want to know....",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca0a11c_fbfe9f68",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 4
      },
      "lineNbr": 1110,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "We already had this for the key-value store. I did not want to go through and change all our std::vector\u003cconst char*\u003e and such.",
      "parentUuid": "f5fffcf3_961a0f77",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c77f369_6109ac34",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 4
      },
      "lineNbr": 1125,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "AssignOrDefault(map,key,out,default_value)",
      "range": {
        "startLine": 1125,
        "startChar": 7,
        "endLine": 1125,
        "endChar": 25
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4b60321_155a5f66",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 4
      },
      "lineNbr": 1125,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "That assumes I know the defaults for everything. That\u0027s why I didn\u0027t encode them, yet. Would like this for incremental cleanup. Besides the const char* crappage above, none of these Assign functions should exist.",
      "parentUuid": "6c77f369_6109ac34",
      "range": {
        "startLine": 1125,
        "startChar": 7,
        "endLine": 1125,
        "endChar": 25
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0df14bfd_064b99c9",
        "filename": "dex2oat/dex2oat.cc",
        "patchSetId": 4
      },
      "lineNbr": 1125,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-31T00:03:21Z",
      "side": 1,
      "message": "I only pointed out this case because you know the defaults for this case is \u0027true\u0027",
      "parentUuid": "a4b60321_155a5f66",
      "range": {
        "startLine": 1125,
        "startChar": 7,
        "endLine": 1125,
        "endChar": 25
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0434460f_a719d74d",
        "filename": "dex2oat/dex2oat_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "I\u0027m actually not a fan of spreading these include-macro-templates into the middle of a file, can we move to another file to isolate this [even if it\u0027s just an -inl header]?",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7308930c_3ce9a7b0",
        "filename": "dex2oat/dex2oat_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "I have to check how to properly do this. I need the template instantiation to be visible to the parser code below, I don\u0027t remember whether the storage was the same.",
      "parentUuid": "0434460f_a719d74d",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8a301c1_91d22b93",
        "filename": "dex2oat/dex2oat_options.cc",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-31T00:03:21Z",
      "side": 1,
      "message": "If you can\u0027t put it into another .cc file, hide inside another -inl.h (or maybe .def) file is better too.",
      "parentUuid": "7308930c_3ce9a7b0",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ebce659_83e924f9",
        "filename": "dex2oat/dex2oat_options.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "nit: example should be relevant to Dex2OatArgumentMap",
      "range": {
        "startLine": 52,
        "startChar": 14,
        "endLine": 52,
        "endChar": 32
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7f9c31d_980313dd",
        "filename": "dex2oat/dex2oat_options.h",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "Yeah, comments are still mostly stale and will be fixed in another patchset.",
      "parentUuid": "9ebce659_83e924f9",
      "range": {
        "startLine": 52,
        "startChar": 14,
        "endLine": 52,
        "endChar": 32
      },
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f1eb7af_1fc62b22",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 4
      },
      "lineNbr": 240,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "Missing comment as above.\n\nName should probably be \"MaybeAssign\", \"MaybeAssignInto\", not sure which one sounds better.\n\nThat being said the most reasonable thing would\u0027ve been \"AssignOrDefault\" to match above, I\u0027m not sure why you chose to keep default values out of the key definitions?",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "321148d4_37391a49",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 4
      },
      "lineNbr": 240,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-30T23:54:25Z",
      "side": 1,
      "message": "Because we didn\u0027t have defaults before, and we have a few things that show being optional through pointers. I\u0027d like to clean those up (the CL is already too large), and then remove this again.",
      "parentUuid": "0f1eb7af_1fc62b22",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1409e41_8f457429",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 4
      },
      "lineNbr": 240,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-31T00:03:21Z",
      "side": 1,
      "message": "So if no explicit default value is specified for the key, it uses T{} which I think will give nullptr for pointers, 0 for ints, etc.",
      "parentUuid": "321148d4_37391a49",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cafda7c_662977ba",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 4
      },
      "lineNbr": 241,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-30T23:19:28Z",
      "side": 1,
      "message": "DCHECK(out !\u003d nullptr) ?",
      "revId": "322cd7168fd984a705994e8261ae8a1d35b05224",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}