{
  "comments": [
    {
      "key": {
        "uuid": "79bc9b97_0aa93b29",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 73,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-08-08T12:04:00Z",
      "side": 1,
      "message": "Might be worth a short comment inside the branch that this means it was inserted so people don\u0027t have to open c++ reference.",
      "range": {
        "startLine": 73,
        "startChar": 38,
        "endLine": 73,
        "endChar": 44
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_bd26c320",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 73,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-10T00:00:47Z",
      "side": 1,
      "message": "I will add this to a future CL.",
      "parentUuid": "79bc9b97_0aa93b29",
      "range": {
        "startLine": 73,
        "startChar": 38,
        "endLine": 73,
        "endChar": 44
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99478f8f_bbf0a763",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 85,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-08-08T12:04:00Z",
      "side": 1,
      "message": "find(other) !\u003d adjacent_nodes_.end()",
      "range": {
        "startLine": 85,
        "startChar": 27,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_1d36d74d",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 85,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-10T00:00:47Z",
      "side": 1,
      "message": "I will add this to a future CL.",
      "parentUuid": "99478f8f_bbf0a763",
      "range": {
        "startLine": 85,
        "startChar": 27,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19239fed_a7dc0a3b",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 138,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-08-08T12:04:00Z",
      "side": 1,
      "message": "!Primitive::IsFloatingPointType(interval-\u003eGetType())",
      "range": {
        "startLine": 137,
        "startChar": 9,
        "endLine": 138,
        "endChar": 55
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_fd051b6c",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 138,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-10T00:00:47Z",
      "side": 1,
      "message": "Good catch; I\u0027ll rector this in my next CL.",
      "parentUuid": "19239fed_a7dc0a3b",
      "range": {
        "startLine": 137,
        "startChar": 9,
        "endLine": 138,
        "endChar": 55
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39b223c6_0833871a",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 210,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-08-08T12:04:00Z",
      "side": 1,
      "message": "So how exactly do you guarantee that this won\u0027t loop indefinitely in production? Should we have linear scan as a fallback?",
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_5da52ffb",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 210,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-10T00:00:47Z",
      "side": 1,
      "message": "See the comment above the definition of kMaxGraphColoringAttemptsDebug. Essentially, if a coloring round fails, it is guaranteed that live intervals are split, which makes the interference graph sparser. We avoid trying to split the same intervals repeatedly (and thus looping forever) by making sure that we split long intervals before short ones.",
      "parentUuid": "39b223c6_0833871a",
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79bc9b97_ea49478b",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 225,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-08-08T12:04:00Z",
      "side": 1,
      "message": "This seems expensive. Do you have to build it from scratch in each iteration? In how many iterations does this thing typically finish?",
      "range": {
        "startLine": 225,
        "startChar": 6,
        "endLine": 225,
        "endChar": 28
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_bac0094b",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 225,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-10T00:00:47Z",
      "side": 1,
      "message": "Very few in practice: 90% of methods take 1 iteration, ~9% take 2, ~1% take 3, and I believe 6 iterations is the highest I\u0027ve seen.",
      "parentUuid": "79bc9b97_ea49478b",
      "range": {
        "startLine": 225,
        "startChar": 6,
        "endLine": 225,
        "endChar": 28
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "990eaf7b_c332d657",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 361,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-08-08T12:04:00Z",
      "side": 1,
      "message": "long line",
      "range": {
        "startLine": 361,
        "startChar": 100,
        "endLine": 361,
        "endChar": 107
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_1d9fb7a5",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 361,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-10T00:00:47Z",
      "side": 1,
      "message": "Good catch; fixing in next CL.",
      "parentUuid": "990eaf7b_c332d657",
      "range": {
        "startLine": 361,
        "startChar": 100,
        "endLine": 361,
        "endChar": 107
      },
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b977f3bf_fb57e0cd",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 557,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-08-05T22:46:45Z",
      "side": 1,
      "message": "Maybe a question for Nicolas. If it\u0027s not a slow path only safepoint, do we need to add to safepoints_ here? I thought live registers are only meaningful for slow path only safepoint.",
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16fd3327_fee021bc",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 557,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-09-02T11:44:01Z",
      "side": 1,
      "message": "They\u0027re meaningful also for regular calls, where we need to know live callee-savee registers (IIRC).",
      "parentUuid": "b977f3bf_fb57e0cd",
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76ee6f74_473f4277",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 557,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-09-02T17:22:25Z",
      "side": 1,
      "message": "I found GetLiveRegisters()/SaveLiveRegisters() all seem to be related to slow path code.",
      "parentUuid": "16fd3327_fee021bc",
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b977f3bf_5edda20d",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 835,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-08-05T22:46:45Z",
      "side": 1,
      "message": "Can you assert here that adjacent-\u003eGetInterval()-\u003eIsFixed()?",
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b977f3bf_3e90e6ef",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 34
      },
      "lineNbr": 835,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-05T22:56:04Z",
      "side": 1,
      "message": "There are cases where a pre-colored interval is not \"fixed\". For example,  I split an interval just after a fixed register def and assign the parent interval a register, but the interval itself is not marked as fixed.\nPerhaps I can clear this up in my next CL by changing adjacent-\u003eGetInterval()-\u003eHasRegister() to adjacent-\u003eIsPrecolored().",
      "parentUuid": "b977f3bf_5edda20d",
      "revId": "d9ffd0dd7266f6a5e76f29d98dbe1a04f64cbb9b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}