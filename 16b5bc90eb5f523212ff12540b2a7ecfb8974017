{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fda18d6b_fdd8fe1d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 3
      },
      "lineNbr": 7619,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-05T16:08:58Z",
      "side": 1,
      "message": "Pull this load out of the loop:\n\n  size_t end \u003d (resolved_methods !\u003d nullptr) ? dex_cache-\u003eNumResolvedMethods() : 0u;",
      "range": {
        "startLine": 7619,
        "startChar": 60,
        "endLine": 7619,
        "endChar": 91
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "359c64f2_dcb25728",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 3
      },
      "lineNbr": 7619,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-06T14:28:21Z",
      "side": 1,
      "message": "Done (pulled out of loop; the ternary operator seems like overkill)",
      "parentUuid": "fda18d6b_fdd8fe1d",
      "range": {
        "startLine": 7619,
        "startChar": 60,
        "endLine": 7619,
        "endChar": 91
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7eed16aa_68360660",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 3
      },
      "lineNbr": 7619,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-06T14:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fda18d6b_fdd8fe1d",
      "range": {
        "startLine": 7619,
        "startChar": 60,
        "endLine": 7619,
        "endChar": 91
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22c50897_b6c14a63",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 3
      },
      "lineNbr": 7619,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-06T15:11:50Z",
      "side": 1,
      "message": "Without the ternary operator you\u0027re relying on the compiler to optimize it properly. But it should be quite easy for clang++ to pull the `resolved_methods !\u003d nullptr \u0026\u0026` out of the loop, so it\u0027s OK to keep the PS4 version.",
      "parentUuid": "7eed16aa_68360660",
      "range": {
        "startLine": 7619,
        "startChar": 60,
        "endLine": 7619,
        "endChar": 91
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29c8c46d_0735ac3e",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-05T16:08:58Z",
      "side": 1,
      "message": "We could use `ObjectLock` on the `DexCache` object. No other code should lock on these internal objects.",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 45
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfbf9e13_189865ba",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-06T14:28:21Z",
      "side": 1,
      "message": "The \"should\" makes me a little uncomfortable though.  I don\u0027t want to deadlock the run-time just because some app is doing something they should not... \n\nBut still... it does appropritate to lock the object to change it\u0027s fields and one less global lock would be nice.\n\nNicolas ... any preference?",
      "parentUuid": "29c8c46d_0735ac3e",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 45
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cca799f_e3efa59d",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-07T09:29:28Z",
      "side": 1,
      "message": "Yeah, I\u0027d also be hesitant given the DexCache is a Java object that can enter user code.\n\nUsing a global lock looks overkill though, it\u0027d be nice if the lock in the linear alloc was also protecting the store in a field, and we would CAS on it (and free the allocated memory if the CAS fails).",
      "parentUuid": "dfbf9e13_189865ba",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 45
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5b19bbe_947780bf",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-07T09:42:12Z",
      "side": 1,
      "message": "I also get a feeling that \"java locks\" are for user code, and \"mutex locks\" are for the runtime.\n\nGlobal lock is a bit of overkill, but by definition the allocation of array happens just once (at least in this CL), so I don\u0027t feel too bad.\n\nI have one version of the followup CLs with alloc+CAS+free, but that is not applicable to linear alloc as it does not have free.  Also, for the growing version, that turned out suboptimal as all threads tend to hit the path at the same time so there was a lot of redundant alloc+free operations.\n\nOn second read, I think you might mean something more elaborate with making linear alloc more clever... Does linear alloc have it\u0027s own lock? I guess in that case we would replace one globabl lock with other, which makes no difference.",
      "parentUuid": "6cca799f_e3efa59d",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 45
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff555a9b_7c69d94d",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-05T16:08:58Z",
      "side": 1,
      "message": "reinterpret_cast64",
      "range": {
        "startLine": 74,
        "startChar": 47,
        "endLine": 74,
        "endChar": 63
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cb5b55b_04d2a863",
        "filename": "runtime/mirror/dex_cache-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-06T14:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff555a9b_7c69d94d",
      "range": {
        "startLine": 74,
        "startChar": 47,
        "endLine": 74,
        "endChar": 63
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eeb7597_933d8f6b",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-05T11:21:02Z",
      "side": 1,
      "message": "Not sure what this means?\n\nIs it saying two threads are concurrently creating the dex cache and the one looked at in this method will be obsolete?",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 79
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ecc98d2_1bf5529a",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-05T11:47:55Z",
      "side": 1,
      "message": "The array is initialized just once (under a lock), but it might be on other thread.\n\nThe initializing thread sets the data pointer and the size count.\n\nWhich means that if the timing is right, this thread might try to loop over the array right in between the update of those two fields. (i.e. seeing non-zero count, but seeing zero data pointer).\n\nThe simplest fix is to check both fields are initialized.",
      "parentUuid": "9eeb7597_933d8f6b",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 79
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4523150_1771815f",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-05T14:11:46Z",
      "side": 1,
      "message": "So we\u0027re either dealing with:\n1) Empty dex cache\n2) Dex cache created concurrently and hence we know there aren\u0027t any entries to update?",
      "parentUuid": "8ecc98d2_1bf5529a",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 79
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfc79c1e_17782cd0",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-05T14:23:25Z",
      "side": 1,
      "message": "Yes.  In fairness, I assume that most usecases of the visitors are going to be ensure there is no concurrent DexCache access in the caller.\n\nHowever, it is also possible to iterate over dex cache on one thread while other thread initializes it and adds entries.",
      "parentUuid": "c4523150_1771815f",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 79
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c700912e_3fe6a1bf",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-10-05T14:33:32Z",
      "side": 1,
      "message": "Oh so now I understand the comment :) That\u0027s pretty scary this code then, what happens in the situation we\u0027re changing the size of the cache? Should you insread do fields-\u003eSize() instead of calling NumResolvedFields, which can be changed randomly?",
      "parentUuid": "cfc79c1e_17782cd0",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 79
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01de58be_cfb817c2",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-05T14:46:12Z",
      "side": 1,
      "message": "As of this CL the size is still constant.\n\nThe followup resizible CL does indeed have fields-\u003eSize() to avoid this.",
      "parentUuid": "c700912e_3fe6a1bf",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 79
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "555d4f65_ff48981c",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-05T16:08:58Z",
      "side": 1,
      "message": "Pull this load out of the loop.",
      "range": {
        "startLine": 58,
        "startChar": 46,
        "endLine": 58,
        "endChar": 65
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "263b96e8_9f06a43d",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-06T14:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "555d4f65_ff48981c",
      "range": {
        "startLine": 58,
        "startChar": 46,
        "endLine": 58,
        "endChar": 65
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6774492f_2f0bb9a2",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-05T16:08:58Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 78,
        "startChar": 47,
        "endLine": 78,
        "endChar": 67
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ff9323f_bb2dab3f",
        "filename": "runtime/mirror/dex_cache.cc",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-06T14:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6774492f_2f0bb9a2",
      "range": {
        "startLine": 78,
        "startChar": 47,
        "endLine": 78,
        "endChar": 67
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a420510e_7c2d94d5",
        "filename": "runtime/mirror/dex_cache.h",
        "patchSetId": 3
      },
      "lineNbr": 518,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-05T16:08:58Z",
      "side": 1,
      "message": "You have already removed pre-resolved strings from images with https://android-review.googlesource.com/1513860 . You should prepare a separate cleanup CL to completely remove preresolved strings from DexCache before proceeding with this CL.",
      "range": {
        "startLine": 518,
        "startChar": 2,
        "endLine": 518,
        "endChar": 32
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc541009_8ca3144c",
        "filename": "runtime/mirror/dex_cache.h",
        "patchSetId": 3
      },
      "lineNbr": 518,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-10-06T14:28:21Z",
      "side": 1,
      "message": "I have split some of the pre-resolved sting cleanup from this CL.\n\nI am aware I should also remove the DexCache field... However, I am planing to remove bunch of other fields (the counts) in follow up CLs.\n\nSo, I would rather do the field clean-up as followup.",
      "parentUuid": "a420510e_7c2d94d5",
      "range": {
        "startLine": 518,
        "startChar": 2,
        "endLine": 518,
        "endChar": 32
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd91bf30_e583da24",
        "filename": "runtime/mirror/dex_cache.h",
        "patchSetId": 3
      },
      "lineNbr": 518,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-10-06T15:11:50Z",
      "side": 1,
      "message": "Thank you, that\u0027s enough for now.",
      "parentUuid": "fc541009_8ca3144c",
      "range": {
        "startLine": 518,
        "startChar": 2,
        "endLine": 518,
        "endChar": 32
      },
      "revId": "16b5bc90eb5f523212ff12540b2a7ecfb8974017",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}