{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fc4fcdb9_6cac0759",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2020-07-24T13:30:06Z",
      "side": 1,
      "message": "\u003e Patch Set 32:\n\u003e \n\u003e (3 comments)\n\u003e \n\u003e Hi Neeraj,\n\u003e \n\u003e Thanks for another PS in the series.\n\u003e \n\u003e A few comments on the tests (as I commented before I would prefer not to go into reviewing the implementation (.cc) before the tests are fully provided and reviewed):\n\u003e \n\u003e 1. It is not clear for which types/categories of loops the optimization will be applied and for which it won\u0027t.\n\u003e   - Induction kind (kInvariant, kLinear, kPolynomial, kGeometric, kWrapAround, kPeriodic) \n\u003e   - Number of basic blocks (more than two?).\n\u003e   - while loops (if the last instruction of the loop header is not HIf exit).\n\u003e Basically if \"This optimization is applied to all loops except for A, B, and C types\" then I would suggest there should be negative tests for A, B, and C. E.g. when in the implementation in the corresponding method there is \"return false\" so the optimization is not applied then it might be worth to introduce a test to cover that case.\n\u003e \n\u003e 2. I am sorry, I didn\u0027t get are there still any cases when an extra induction is introduced now? I\u0027d suggest you could put a detailed comment around this into the sources/tests rather than having in only as a gerrit comment here.\n\u003e \n\u003e Thanks,\n\u003e Artem.\n\nHi Artem,\nI couldn\u0027t checked above comments due to other prior tasks.\nI will recheck and resolve the same.\n\nThanks \u0026 Regards\nNeeraj",
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06bf1567_9e535abe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-07-07T11:24:00Z",
      "side": 1,
      "message": "Hi Neeraj,\n\nMay I ask, are you or other Intel engineers planning to continue working on this effort? There has been no updates since June 2020.\n\nIf not, we in Linaro will be considering to continue on Dynamic Loop Unrolling on our own, providing our own brand-new implementation.\n\nThanks,\nArtem.\n\n",
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6379c71_edda1768",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-07-12T11:15:22Z",
      "side": 1,
      "message": "Hi Artem,\nThanks for pinging about loop unrolling patch.\nI have put significant efforts on this optimization earlier and is interested to resume this task.\nPlease share your review comments about the optimization implementation.\nWe will resume the task and resolve the review comments.\n\nThanks \u0026 Regards,\nNeeraj",
      "parentUuid": "06bf1567_9e535abe",
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01dfd5dd_80ed199c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "Hi Neeraj,\n\nSorry for a delayed reply!\n\nLet me please summarise the current state of the review from my side.\n\nI). My CL-level comment from PS32 (Jul 03, 2020 3:52 PM) on “which types/categories of loops the optimization will be applied” and insufficient (in my opinion) test coverage has not been addressed. Am including it here again:\n\u003e 1. It is not clear for which types/categories of loops the optimization will be applied and for which it won\u0027t.\n\u003e  - Induction kind (kInvariant, kLinear, kPolynomial, kGeometric, kWrapAround, kPeriodic) \n\u003e  - Number of basic blocks (more than two?).\n\u003e  - while loops (if the last instruction of the loop header is not HIf exit).\n\u003e Basically if \"This optimization is applied to all loops except for A, B, and C types\" then I would suggest there should be negative tests for A, B, and C. E.g. when in the implementation in the corresponding method there is \"return false\" so the optimization is not applied then it might be worth to introduce a test to cover that case.\n\u003e 2. I am sorry, I didn\u0027t get are there still any cases when an extra induction is introduced now? I\u0027d suggest you could put a detailed comment around this into the sources/tests rather than having in only as a gerrit comment here.”\n\nII). There were 6 file-level unresolved comments from previous reviews.\n\nIII). I have submitted a first portion of implementation review comments just now.\n\nIV). As the CL has some formatting issues I would suggest to consider using clang format and cpp-lint as a presubmit check.\n\nThanks,\nArtem.\n",
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d27dafc2_98149c1b",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 954,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "As suggested in the CL general comment about testing, I\u0027d suggest to have a clear way to describe which loop patterns are supported, e.g. by having a function IsLoopSupportedForDynamicUnrolling.",
      "range": {
        "startLine": 954,
        "startChar": 8,
        "endLine": 954,
        "endChar": 47
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c3bd1cb_013137b1",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 954,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-10-05T07:26:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d27dafc2_98149c1b",
      "range": {
        "startLine": 954,
        "startChar": 8,
        "endLine": 954,
        "endChar": 47
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7b95f6f_3073542c",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 955,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "The expected logic behind \"generate_code\" is that once you enter the section, you do the full optimization in full.\n\nIn this function you do versioning first (line 948) and only then have a partial check whether the optimization should be applied at all (here), leaving the graph in an unexpected mid-way through state.",
      "range": {
        "startLine": 955,
        "startChar": 6,
        "endLine": 955,
        "endChar": 19
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfcf7304_80bb0bc5",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 955,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-10-05T07:26:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7b95f6f_3073542c",
      "range": {
        "startLine": 955,
        "startChar": 6,
        "endLine": 955,
        "endChar": 19
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35ce15b1_3ccca01f",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 980,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "nit: function arguments - either all on one line or one per line.",
      "range": {
        "startLine": 979,
        "startChar": 43,
        "endLine": 980,
        "endChar": 60
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "051e9330_bb272f19",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 980,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-10-05T07:26:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35ce15b1_3ccca01f",
      "range": {
        "startLine": 979,
        "startChar": 43,
        "endLine": 980,
        "endChar": 60
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31e84152_67163453",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1010,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "nit: double space here and in other places.",
      "range": {
        "startLine": 1010,
        "startChar": 62,
        "endLine": 1010,
        "endChar": 64
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53796445_60cabc5f",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1010,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-10-05T07:26:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31e84152_67163453",
      "range": {
        "startLine": 1010,
        "startChar": 62,
        "endLine": 1010,
        "endChar": 64
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f920a3b_463a143f",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1061,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "Please add a comment for this function, e.g. defining what is a main induction variable.",
      "range": {
        "startLine": 1061,
        "startChar": 12,
        "endLine": 1061,
        "endChar": 30
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38039a29_7a2f2c5f",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1061,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-10-05T07:26:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f920a3b_463a143f",
      "range": {
        "startLine": 1061,
        "startChar": 12,
        "endLine": 1061,
        "endChar": 30
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b527c564_1a7bbe46",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1087,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "This function is too big in my opinion (https://google.github.io/styleguide/cppguide.html#Write_Short_Functions); could you please split it?",
      "range": {
        "startLine": 1087,
        "startChar": 24,
        "endLine": 1087,
        "endChar": 62
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2eec4f31_3941c1d8",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1087,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-10-05T07:26:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b527c564_1a7bbe46",
      "range": {
        "startLine": 1087,
        "startChar": 24,
        "endLine": 1087,
        "endChar": 62
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd91c167_c2c9808f",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1131,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-09-01T15:10:22Z",
      "side": 1,
      "message": "nit: long line.",
      "range": {
        "startLine": 1131,
        "startChar": 100,
        "endLine": 1131,
        "endChar": 103
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d2028a4_2061cf41",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 32
      },
      "lineNbr": 1131,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-10-05T07:26:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd91c167_c2c9808f",
      "range": {
        "startLine": 1131,
        "startChar": 100,
        "endLine": 1131,
        "endChar": 103
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4daa18de_5c7f2c83",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 32
      },
      "lineNbr": 171,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-07-03T14:52:09Z",
      "side": 1,
      "message": "So now there are only two original phis, great! Could you add a CHECK-NOT to check there are no extra phis?",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 171,
        "endChar": 42
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e1e8706_264cdf5f",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 32
      },
      "lineNbr": 171,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-11-16T04:16:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4daa18de_5c7f2c83",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 171,
        "endChar": 42
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "849e4b62_2273a466",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 32
      },
      "lineNbr": 191,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-07-03T14:52:09Z",
      "side": 1,
      "message": "If the loop *is* gonna be unrolled could you add a minimum checker set? (e.g. counting loops, PHIs, ArrayGets or similar)?\n\nHere and in below.",
      "range": {
        "startLine": 191,
        "startChar": 0,
        "endLine": 191,
        "endChar": 44
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab513c57_abc169bd",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 32
      },
      "lineNbr": 191,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-11-16T04:16:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "849e4b62_2273a466",
      "range": {
        "startLine": 191,
        "startChar": 0,
        "endLine": 191,
        "endChar": 44
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4eb1062_5d865d97",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 32
      },
      "lineNbr": 204,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2020-07-03T14:52:09Z",
      "side": 1,
      "message": "In theory those instructions could be introduced by other optimizations (e.g. dynamic BCE); I would suggest to check that there is only one loop instead (by looking at \"loop:{{B\\d+}} and Phis) for the negative tests.\n\nHere and below.",
      "range": {
        "startLine": 202,
        "startChar": 0,
        "endLine": 204,
        "endChar": 45
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08b85084_a808beaa",
        "filename": "test/530-checker-unroll-unknown-iter/src/Main.java",
        "patchSetId": 32
      },
      "lineNbr": 204,
      "author": {
        "id": 1367653
      },
      "writtenOn": "2021-11-16T04:16:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4eb1062_5d865d97",
      "range": {
        "startLine": 202,
        "startChar": 0,
        "endLine": 204,
        "endChar": 45
      },
      "revId": "c200424e41ab4d438ccae2c7f26ed32ffefbd62c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}