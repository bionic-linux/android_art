{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6a5a823f_435da423",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-09-16T09:14:58Z",
      "side": 1,
      "message": "You mean the users of `FindVirtualMethodForInterface` may give wrong inputs? The DCHECKs only guard from that.",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e189df_75485ff6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-16T09:27:26Z",
      "side": 1,
      "message": "\u003e You mean the users of FindVirtualMethodForInterface may give wrong inputs?\n\nI think they do: adding similar DCHECK `FindVirtualMethodForInterface` leads to crashes in `800-smali` and `069-field-type`. \n\nDo you think `FindVirtualMethodForVirtual` and `FindVirtualMethodForSuper` should also return `null` when input is invalid? Callers seem to check result for nullness.",
      "parentUuid": "6a5a823f_435da423",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e36fee2_a135f1ca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-09-16T15:47:08Z",
      "side": 1,
      "message": "I wonder if you\u0027re hitting copied methods in these cases. Are we returning bogus methods in these test cases?",
      "parentUuid": "d6e189df_75485ff6",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41925676_22850df5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-16T16:03:20Z",
      "side": 1,
      "message": "In `800-smali` case [this](https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/runtime/entrypoints/entrypoint_utils-inl.h;l\u003d583;drc\u003d05a5ff2a4152571e8e82ba4c407cf0fba0a57ddd) `FindVirtualMethodForInterface ` call crashes:\n\n```\n09-16 15:53:40.003 837485 837485 F dalvikvm64: class-inl.h:578\nCheck failed: method-\u003eGetDeclaringClass()-\u003eIsAssignableFrom(this)\nMethod void java.lang.Runnable.run() is not declared\nin B29778499_1 or its super classes\n```\n\nIn `069-field-type` [this](https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/runtime/entrypoints/quick/quick_trampoline_entrypoints.cc;l\u003d2310;drc\u003d956fbc47a697f893c0311606c283b6d6672c01c2) `FindVirtualMethodForInterface ` call crashes with\n\n```\n09-16 15:58:47.527 850032 850032 F dalvikvm64: class-inl.h:578\nCheck failed: method-\u003eGetDeclaringClass()-\u003eIsAssignableFrom(this)\nMethod void java.lang.Runnable.run() is not declared\nin Blah or its super classes\n```",
      "parentUuid": "7e36fee2_a135f1ca",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "466033f5_c57caf6f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-09-17T09:26:08Z",
      "side": 1,
      "message": "If this is happening, looks like you can craft a test case where this is crashing invoking the wrong method?",
      "parentUuid": "41925676_22850df5",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63a7c138_f374656a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-17T09:40:49Z",
      "side": 1,
      "message": "I don\u0027t think so: `FindVirtualMethodForInterface` expects `method` either to be defined in an interface or `java.lang.Object` method. In interface case it has\n```\nif (iftable-\u003eGetInterface(i) \u003d\u003d declaring_class) {\n```\ncheck. So if `method` is defined in a wrong class, `FindVirtualMethodForInterface` returns null.\n\nOr did you mean `FindVirtualMethodForVirtual`?",
      "parentUuid": "466033f5_c57caf6f",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1de859bb_c202f7b2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-09-18T09:18:25Z",
      "side": 1,
      "message": "But then I\u0027m not sure what this CL is trying to achieve. You want the callers to check that they don\u0027t pass unrelated methods/classes ?",
      "parentUuid": "63a7c138_f374656a",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f2242be_c93f9816",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-18T11:21:57Z",
      "side": 1,
      "message": "I am not sure how to interpret current comment [1]\n\n```\n  // Given a method implemented by this class but potentially from a super class, return the\n  // specific implementation method for this class.\n```\n\nCurrent implementation already has argument validation [2] so I added more.\n\n\u003e You want the callers to check that they don\u0027t pass unrelated methods/classes ?\n\nWe can\u0027t enforce that. Should these methods just return null for unrelated methods?\n\n[1] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/runtime/mirror/class.h;l\u003d915;drc\u003d6f40f3867459b66ec315dd4f70f4474171065aab\n\n[2] https://source.corp.google.com/h/android/platform/superproject/main/+/main:art/runtime/mirror/class-inl.h;l\u003d598;drc\u003d75e123b2850ac20123351341d7b23400fed229af",
      "parentUuid": "1de859bb_c202f7b2",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30ee7c5f_867c3ae5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-09-18T15:51:22Z",
      "side": 1,
      "message": "Oh wait, you say it crashes for `FindVirtualMethodForInterface` but you add checks on `FindVirtualMethodForVirtual` and `FindVirtualMethodForSuper`. Why you do you mention these crashes then?\n\nThe DCHECK you added makes sense given the line later uses the vtable offset.",
      "parentUuid": "8f2242be_c93f9816",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1565b0a2_23323270",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2024-09-18T16:28:15Z",
      "side": 1,
      "message": "\u003e Why you do you mention these crashes then?\n\nThere are 3 similar methods with similar comments and this CL only changes two of them. I thought it worths explaning why `FindVirtualMethodForInterface` is not updated.\n\n\u003e the line later uses the vtable offset.\n\nThat is my concern. But I wasn\u0027t sure which is better here: 1) to add DCHECK or 2) return `null`, as `FindVirtualMethodForInterface` does, if `method` is unrelated.",
      "parentUuid": "30ee7c5f_867c3ae5",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "d7447dd1bc02cea65cd666fdc8c3dc4e1ce23f96",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}