{
  "comments": [
    {
      "key": {
        "uuid": "2e40ba4a_cd3f71a4",
        "filename": "compiler/optimizing/code_generator_vector_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T21:18:55Z",
      "side": 1,
      "message": "remove commented out code completely",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953df81c_0554f87e",
        "filename": "compiler/optimizing/code_generator_vector_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-06-28T15:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e40ba4a_cd3f71a4",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b49f03da_4bbc7fa5",
        "filename": "compiler/optimizing/code_generator_vector_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 633,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-27T21:18:55Z",
      "side": 1,
      "message": "short comment on static helper?",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa1a8b03_47c4aa9a",
        "filename": "compiler/optimizing/code_generator_vector_arm_vixl.cc",
        "patchSetId": 1
      },
      "lineNbr": 633,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-06-28T15:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b49f03da_4bbc7fa5",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6682d468_3f022d8b",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-26T19:01:46Z",
      "side": 1,
      "message": "Can you make this comment a bit more similar to what we ahve at L1043/1044 please?",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "726939f3_b2adeae9",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-06-28T15:48:05Z",
      "side": 1,
      "message": "It\u0027s a little bit different on ARM. ARM 32-bit platforms are not guaranteed to have a NEON and VFP extensions however their presence has been assumed in the ART compiler for a while.",
      "parentUuid": "6682d468_3f022d8b",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be39c34f_543809b7",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-28T22:49:05Z",
      "side": 1,
      "message": "Then we should probably make this a feature like SSE4 below\n(note that we can still decide to enable that feature for our default target, as we are considering for x86, but at least that will allow clients to set a flag that disables the neon assumption on arm32",
      "parentUuid": "726939f3_b2adeae9",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68498fd8_41fc88dd",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-06-29T16:57:53Z",
      "side": 1,
      "message": "NEON instructions are already used in regular codegen (see BitCount intrinsic) without checking for NEON feature. So I think it\u0027s a good idea to have this check as a separate CL. Do you suggest to prepare that feature-checking CL first and only then merge the arm32 vectorization?",
      "parentUuid": "be39c34f_543809b7",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11651f42_2aa5d914",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-06-29T18:05:54Z",
      "side": 1,
      "message": "Ah, if we already have a precedent to do this, then it is okay with me. Let\u0027s add a TODO to make this a feature flag test though.\n\nNicolas, Andreas, any strong feelings on this?",
      "parentUuid": "68498fd8_41fc88dd",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64369c7d_c45e2e2e",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-06-29T18:37:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11651f42_2aa5d914",
      "revId": "8f3c5c8464b0327fb0806044e1c0847697d1b825",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}