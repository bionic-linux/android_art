{
  "comments": [
    {
      "key": {
        "uuid": "e8f9973d_11029c14",
        "filename": "runtime/native/java_lang_reflect_Method.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-08-19T17:35:57Z",
      "side": 0,
      "message": "Where did these go to? Shouldn\u0027t they be moved into Executable?",
      "revId": "3049b2a54b5b55d094fea603236f492c31b842e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a846bf69_232a0a7c",
        "filename": "runtime/native/java_lang_reflect_Method.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1038039
      },
      "writtenOn": "2016-08-19T17:46:33Z",
      "side": 0,
      "message": "They went to AbstractMethod because they were (near) identical.\n\nThe only other one I think it may be possible to move was getExceptionTypes but the implementation is sufficiently different with the one in Constructor that I didn\u0027t want to try. Figured the differences were for a good reason.\n\nI\u0027ve kept all the ART-related code in AbstractMethod for now because not everything on AbstractMethod could be moved to Executable (since the API of Executable is public), and it made sense to me to keep all the native ART / Android knowledge together.\n\nI think it could move up in this case if we wanted to.",
      "parentUuid": "e8f9973d_11029c14",
      "revId": "3049b2a54b5b55d094fea603236f492c31b842e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8f9973d_ac94abdb",
        "filename": "runtime/native/java_lang_reflect_Method.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-08-19T18:39:30Z",
      "side": 0,
      "message": "It\u0027s very confusing now where the actual code lives.\n\nJust looking at the APIs all the real inherited logic should come from Executable (if not on the original class that had it).\n\nThe next person to come look at this will have to dig through a lot of java code in libcore and understand its intricacies of why everything was moved to AbstractMethod.\n\n--------\nI have no comment regarding the structure of the java code but it would be really good if the JNI code wasn\u0027t all just in AbstractMethod.cc .\n\nIf putting it into java_lang_reflect_Executable doesn\u0027t make sense (since it doesn\u0027t really have native functions! and you can\u0027t have default natives in Java), what if we put it into the AnnotatedElements equivalent cc file (or similar)?",
      "parentUuid": "a846bf69_232a0a7c",
      "revId": "3049b2a54b5b55d094fea603236f492c31b842e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}