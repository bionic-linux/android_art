{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5241761b_28b831b9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-11T13:50:39Z",
      "side": 1,
      "message": "\"an absolute symlink\", to be more precise.",
      "range": {
        "startLine": 10,
        "startChar": 20,
        "endLine": 10,
        "endChar": 29
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c43b3c52_f8672565",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-10-14T10:06:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5241761b_28b831b9",
      "range": {
        "startLine": 10,
        "startChar": 20,
        "endLine": 10,
        "endChar": 29
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3f4629d_f356ba33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-11T13:50:39Z",
      "side": 1,
      "message": "Worth mentioning that the checks err on the side strictness by disallowing any symlinks. Relative symlinks in the path could actually be fine.",
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "620035e9_2716e1dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-10-14T10:06:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3f4629d_f356ba33",
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38db543c_f10b18fc",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-11T13:50:39Z",
      "side": 1,
      "message": "Where did you run into this?",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "489c7ad3_73920fd2",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-10-14T10:06:35Z",
      "side": 1,
      "message": "On /metadata.",
      "parentUuid": "38db543c_f10b18fc",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae0db7db_61c6f35f",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-15T13:04:00Z",
      "side": 1,
      "message": "I saw https://r.android.com/3307255. Provided that gets in, can this be restricted, e.g. based on SDK level?",
      "parentUuid": "489c7ad3_73920fd2",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a285ae4_e530f31c",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-10-15T13:10:06Z",
      "side": 1,
      "message": "I\u0027m afraid we can\u0027t. We recursively bind-mount /proc, /sys, and /dev, and OEMs may have their own customizations in those directories, so we can\u0027t be sure that we have the permission.",
      "parentUuid": "ae0db7db_61c6f35f",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d383a7ef_d0f879e0",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-15T13:40:47Z",
      "side": 1,
      "message": "Well, if they test OTAs they\u0027d notice and can correct.\n\nBut backing up a step, doesn\u0027t the bind mount operation itself need this permission to find the source and target?",
      "parentUuid": "5a285ae4_e530f31c",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58cd6813_3c423958",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-10-15T13:48:29Z",
      "side": 1,
      "message": "\u003e doesn\u0027t the bind mount operation itself need this permission to find the source and target?\n\nNo, mounting doesn\u0027t need the \"getattr\" permission.\n\n\u003e if they test OTAs they\u0027d notice and can correct.\n\nYou are probably right, but another aspect to consider is that we don\u0027t have a way to check the SDK level right now. I followed a discussion. Let\u0027s see how it goes.",
      "parentUuid": "d383a7ef_d0f879e0",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4070529d_a271175e",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-10-15T14:03:46Z",
      "side": 1,
      "message": "\u003e No, mounting doesn\u0027t need the \"getattr\" permission.\n\nWeird. I thought the kernel bind operation would operate on inodes, so something on the way would need to follow symlinks first. Then I suppose one could use bind mounting as a backdoor to glean some getattr info(?).\n\n\u003e we don\u0027t have a way to check the SDK level right now.\n\nJust check if the ro.build.version.sdk property is higher than 35? It\u0027d mean this bypass is enabled in dogfood, but that\u0027s not a big deal.",
      "parentUuid": "58cd6813_3c423958",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ed83a3f_bfcc21ff",
        "filename": "dexopt_chroot_setup/dexopt_chroot_setup.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-10-15T15:21:36Z",
      "side": 1,
      "message": "\u003e Weird. I thought the kernel bind operation would operate on inodes, so something on the way would need to follow symlinks first. Then I suppose one could use bind mounting as a backdoor to glean some getattr info(?).\n\nThat\u0027s an interesting point! You made me dig more into this, and it turned out that \"getattr\" is not needed for resolving symlinks. The Bionic implementation of [`realpath`](https://cs.android.com/android/platform/superproject/main/+/main:bionic/libc/bionic/realpath.cpp;l\u003d46;drc\u003d22fb267ad6f95ab083abb56e914f8081552108a7) needs \"getattr\" because it calls `stat(2)` to handle the case where the file is removed during the call. I don\u0027t think we expect file changes in our use case.\n\nI reimplemented this function with the idea borrowed from Bionic to avoid the need for \"getattr\".\n\n\u003e Just check if the ro.build.version.sdk property is higher than 35?\n\nThat\u0027s an idea, but I\u0027d like to see how the discussion goes in case someone yells at us that we shouldn\u0027t be doing it. We may have to do it when we have a strong need, but that\u0027s for later discussions. Anyway, we don\u0027t need the \"getattr\" permission now.",
      "parentUuid": "4070529d_a271175e",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 62
      },
      "revId": "bd5d3bf25b8f393d2530ba17a4a0914b5e9452d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}