{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "21064a9b_eddb47ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T10:52:21Z",
      "side": 1,
      "message": "So.... both reasonable suggestions, but neither works because `-Walign-mismatch` is buggy.\n\nStill, those couple of cases are the only offenders in the whole Android code base as far as I can tell.\n\nI would be mildly tempted to commit this CL as-is just so that we not the blockers.\n\nBut then yes, the warning/feature is of very questionable usefulness.",
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa599733_b72febbf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-28T11:04:38Z",
      "side": 1,
      "message": "What shall I do with this CL?  Commit as-is or abandon?\n\nPro: It makes Android compile with the compile flag.\n\nCon: The compile flag does not have much value.",
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "489ad7de_4e1699ae",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-13T08:57:11Z",
      "side": 1,
      "message": "Is this the style we want to use for converting l-values to r-values?",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36fff8eb_1f0cec33",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-15T17:49:29Z",
      "side": 1,
      "message": "It is simple enough.  What are the alternatives?",
      "parentUuid": "489ad7de_4e1699ae",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9dc11a0_e47a9c76",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-16T09:05:26Z",
      "side": 1,
      "message": "We could use `static_cast\u003c\u003e` but that\u0027s actually a lot longer. Or we could define a helper template to read from an unaligned memory location and return by value.",
      "parentUuid": "36fff8eb_1f0cec33",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cc57ce4_32cc7c80",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T09:22:50Z",
      "side": 1,
      "message": "Longer and a bit more obscure.  Making a copy of the value is the specific intent, so I like that this shows that you are constructing a new value.  I think cast would do the same anyway, but part of my brain associates cast with just type-checking, and just erasing the alignment from type is what I specifically do not want.\n\nIt seems like an overkill to have a template just to copy an integer.  However, at least it would be descriptive of why it is happening.  I am not sure what that helper would be called.  `AlignValue`?",
      "parentUuid": "c9dc11a0_e47a9c76",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a615adf_1dcb82f1",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-16T09:44:47Z",
      "side": 1,
      "message": "I\u0027d call it `UnalignedRead()`. And it\u0027s a lot better than explicit construction as you don\u0027t need to specify the actual type explicitly, so it cannot get out of sync with future code changes.",
      "parentUuid": "2cc57ce4_32cc7c80",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a2fb31b_c3e7d3f4",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T09:47:52Z",
      "side": 1,
      "message": "`UnalignedRead` or `UnalignedCopy` ?",
      "parentUuid": "5a615adf_1dcb82f1",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52d26005_b5166821",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T10:12:20Z",
      "side": 1,
      "message": "Hmmm... that seems hard as well.  It seems the compiler ignores the attribute on arguments as well:\n\n```\ntemplate\u003ctypename T\u003e                                                                                                                       inline T UnalignedRead(ALIGNED(1) const ALIGNED(1) T ALIGNED(1)* ALIGNED(1) value ALIGNED(1)) {\n   T copy;\n   memcpy(copy, value, sizeof(T));\n   return copy;\n }\n```\n\nThe above methods still expects naturally aligned value according to the compiler.",
      "parentUuid": "7a2fb31b_c3e7d3f4",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbd206a9_91da5cfb",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T10:13:16Z",
      "side": 1,
      "message": "```\ntemplate\u003ctypename T\u003e\ninline T UnalignedRead(ALIGNED(1) const ALIGNED(1) T ALIGNED(1)* ALIGNED(1) value ALIGNED(1)) {\n  T copy;\n  memcpy(copy, value, sizeof(T));\n  return copy;\n}\n```",
      "parentUuid": "52d26005_b5166821",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05706f44_c1880bff",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-16T20:29:25Z",
      "side": 1,
      "message": "I\u0027m not completely clear on what this is doing",
      "parentUuid": "489ad7de_4e1699ae",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f907afd9_4e86817a",
        "filename": "compiler/debug/elf_debug_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-17T00:29:53Z",
      "side": 1,
      "message": "`fde` is unalgined, thus the field is unlined, but the `DCHECK` consumes it via ref, so via pointer, so we are passing unaligned pointer into function that expected aligned pointer and thus might trap.\n\nthe extra `uint64_t(...)` makes temporary r-value that is aligned, and copy data into it.",
      "parentUuid": "05706f44_c1880bff",
      "range": {
        "startLine": 218,
        "startChar": 39,
        "endLine": 218,
        "endChar": 48
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b39fe2cd_3283c5d7",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-09T22:18:36Z",
      "side": 1,
      "message": "PS: I was checking the disassembly, and I am pretty sure the compiler removes the memcpy anyway (as expected).",
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4056b697_487350ba",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-13T08:57:11Z",
      "side": 1,
      "message": "If we expect unaligned data structures, we should add the attribute here.",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae1892e9_9994bda4",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T09:22:50Z",
      "side": 1,
      "message": "I tried and I can not seem to get it to work.  I think the align attribute mostly affects storage, but it is not really part of the type.  At least I get the impression that align attribute here gets ignored.",
      "parentUuid": "4056b697_487350ba",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75b195ec_5caee236",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T09:43:02Z",
      "side": 1,
      "message": "Also, the reader usually operates on std::vector\u003cuint8_t\u003e so I made the types unaligned.  But then, I am not convinced they can ever by unaligned in practice.",
      "parentUuid": "ae1892e9_9994bda4",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56a11eb6_8759d92a",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-16T09:44:47Z",
      "side": 1,
      "message": "I was afraid that this may not work. But that just shows that the `-Walign-mismatch` analysis is rather arbitrary. In my opinion, it\u0027s just not worth it.",
      "parentUuid": "ae1892e9_9994bda4",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9adb2d67_2552d3d2",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-16T09:47:52Z",
      "side": 1,
      "message": "I would say that any warning that can catch bugs is worth it.\n\nIt is sad if it is full of holes and can not be relied on though.",
      "parentUuid": "56a11eb6_8759d92a",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ee45aff_22aff3a8",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-16T16:42:53Z",
      "side": 1,
      "message": "\u003e I would say that any warning that can catch bugs is worth it.\n\n\u003e It is sad if it is full of holes and can not be relied on though.\n\nthis is always the trade-off --- a lot of these clang warnings _sound_ useful, but the actual implementation is either (a) too superficial to really catch anything or (b) has too many false positives to actually be useful. we suffer both from too little signal _and_ too much noise. so any time you see us come along like this with a new warning, assume it is basically an \"is this useful?\" experiment. (because in my experience, most aren\u0027t.)",
      "parentUuid": "9adb2d67_2552d3d2",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b320222c_c3412f77",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-16T20:29:25Z",
      "side": 1,
      "message": "Which \"attribute\" are we talking about here? I think the standard facilities can only increase alignment.\n\nSo do we think this warning would be issued if I cast a random char* to int* and then accessed the integer?\n\nI expect we still have the issue that people usually do this only in situations in which it actually works on our hardware. And we probably don\u0027t care about hardware that traps on misaligned accesses? So the benefit appears marginal.",
      "parentUuid": "5ee45aff_22aff3a8",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bdbfdcd_747a11e7",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-03-17T00:29:53Z",
      "side": 1,
      "message": "`__attribute__((aligned(1)))` can be used to under-align as well (`ALIGNED(1)` in ART)\n\nIn general the idea is to ensure that you don\u0027t pass unaligned pointer into method that expects aligned one (and thus might trap). (but it only works for trivial cases)\n\nWell - my main question is - is there hardware that can trap that we care about?  It is configurable for ARM, right?  Does anyone enable that?",
      "parentUuid": "b320222c_c3412f77",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef5e5409_5630d736",
        "filename": "libelffile/elf/elf_debug_reader.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-17T00:50:40Z",
      "side": 1,
      "message": "\u003e Well - my main question is - is there hardware that can trap that we care about? It is configurable for ARM, right? Does anyone enable that?\n\nthey\u0027d be in for a world of other pain if they did...",
      "parentUuid": "4bdbfdcd_747a11e7",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 179,
        "endChar": 9
      },
      "revId": "afd854133372c044434d3c7c57a824371da1cbb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}