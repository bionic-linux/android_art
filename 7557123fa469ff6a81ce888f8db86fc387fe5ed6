{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb1212bd_5ed0f6d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-23T01:08:10Z",
      "side": 1,
      "message": "I\u0027ve always wanted to get rid of this, but it may be more difficult than this.\n\nAFAICT, this information propagates much further, to Region::ObjectsAllocated, and from there to various other places like from_space_num_objects_at_first_pause_. I can\u0027t quite tell where they all flow. I think we should either remove those (prefereable, I think) or document them as inaccurate. Or we should compute them only on demand via instrumentation.\n\nI haven\u0027t traced through the code to see whether the VMDebug stuff sactually still relies on any of this.\n\nBased on past discussions, I\u0027m also not sure that the Android Studio team is OK with this. Even if if few people actually look at it, they may still display the information.",
      "revId": "7557123fa469ff6a81ce888f8db86fc387fe5ed6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ba65453_89522395",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-23T08:20:17Z",
      "side": 1,
      "message": "\u003e from there to various other places like from_space_num_objects_at_first_pause_. I can\u0027t quite tell where they all flow. I think we should either remove those (prefereable, I think) or document them as inaccurate.\n\nThe CL does remove `from_space_num_objects_at_first_pause_`. I agree it\u0027s all spaghetti code which is hard to follow.\n\nMy understanding of the flow is that this info only gets reported when VMDebug.startAllocCounting happens, which forces instrumentation stubs, where we do proper accounting there.\n\nSo I\u0027m willing to assume this is the only use case, and any other use case which we don\u0027t know, take and handle the potential breakage.",
      "parentUuid": "eb1212bd_5ed0f6d2",
      "revId": "7557123fa469ff6a81ce888f8db86fc387fe5ed6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7af475cb_baa797dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-06-28T22:34:14Z",
      "side": 1,
      "message": "I\u0027m concerned about leaving a bunch of broken code that we\u0027re hoping is essentially dead. For example, https://cs.android.com/android/platform/superproject/+/refs/heads/master:art/runtime/gc/space/region_space.cc;l\u003d918 and the RecordThreadLocalAllocations() function itself, looks that way to me.\n\nAnd I suspect there\u0027s significantly more such code. I think all the other GetObjectsAllocated()/GetObjectsAllocatedEver() functions are also broken. Or does some of the instrumentation reenable those?\n\nSome of this stuff is printed by DumpGcPerformanceInfo(), which will now be wrong.\n\nSo I think this CL is fine for testing. I\u0027m encouraged that ART still generally works with just this change. But I think this should either go in under a default-off compile-time flag for now, or with an attempt to clean up all the dead/broken code.\n\nI think Lokesh worked on this at some point and may be able to find more of the (minimally) affected code.",
      "parentUuid": "5ba65453_89522395",
      "revId": "7557123fa469ff6a81ce888f8db86fc387fe5ed6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}