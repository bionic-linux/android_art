{
  "comments": [
    {
      "key": {
        "uuid": "503b335a_26df0226",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 4245,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2016-09-22T04:38:04Z",
      "side": 1,
      "message": "Vladimir, could you please educate me on what irreducible loops are and how they\u0027re related to PC-relative loads of strings, classes and other things? Namely, why we\u0027re currently avoiding some (but not all) PC-relative loads in the presence of such loops? I wonder if some PC-relative loads could be enabled despite irreducible loops.",
      "range": {
        "startLine": 4244,
        "startChar": 0,
        "endLine": 4245,
        "endChar": 28
      },
      "revId": "0c8dda83679c2e2bc4e042d1c693931f79a032e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "101e1b18_b6ee88b2",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 4245,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-22T09:58:20Z",
      "side": 1,
      "message": "Irreducible loops are loops where there isn\u0027t a single block through which the loop is entered. For example\n\n    B1 -\u003e B2, B3\n    B2 -\u003e B3, B4  // loop header?\n    B3 -\u003e B4      // loop header?\n    B4 -\u003e B5, B2  // conditional loop exit\n    B5 -\u003e ...\n\nNote that in this case, we could clone the B2 into two blocks and, after rearranging edges, we would have a natural loop with header B3 but there are situations where this may not be possible.\n\nAt irreducible loop headers we currently force all (non-constant?) dalvik registers into memory and assume that there are no other live variables (except for the ArtMethod* stored at the bottom of the stack). So the PC-relative base would not be preserved across the loop header.\n\nNote that for OSR, we treat all loops as irreducible even though they are not and they could be dealt with differently. However, all loop headers in OSR mode are kind of a method entry and PC-relative bases calculated before the loop header would not be valid if we enter through OSR.",
      "parentUuid": "503b335a_26df0226",
      "range": {
        "startLine": 4244,
        "startChar": 0,
        "endLine": 4245,
        "endChar": 28
      },
      "revId": "0c8dda83679c2e2bc4e042d1c693931f79a032e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30195f0f_b7f7c873",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 4245,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-22T10:22:33Z",
      "side": 1,
      "message": "If you want to simply enable PC-relative loads for irreducible loop on mips, you need to remove MipsAssembler::pc_rel_base_label_ and keep that information in the codegen attached to HMipsComputeBaseMethodAddress, so that you can use multiple HMipsComputeBaseMethodAddress instructions. Then you can simply create a HMipsComputeBaseMethodAddress just before each instruction that needs it, though I have a plan to implement a smarter distribution of the PC-relative bases for x86/arm.",
      "parentUuid": "101e1b18_b6ee88b2",
      "range": {
        "startLine": 4244,
        "startChar": 0,
        "endLine": 4245,
        "endChar": 28
      },
      "revId": "0c8dda83679c2e2bc4e042d1c693931f79a032e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0938fd9_507e3070",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 4245,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2016-09-23T21:46:53Z",
      "side": 1,
      "message": "So, if a special base register isn\u0027t needed and there are only true PC-relative loads/arithmetics involved (e.g. on R6), I can safely relax the logic to allow some optimizations in static/direct calls and string/class loads irrespective of the irreducible loops, right?",
      "parentUuid": "101e1b18_b6ee88b2",
      "range": {
        "startLine": 4244,
        "startChar": 0,
        "endLine": 4245,
        "endChar": 28
      },
      "revId": "0c8dda83679c2e2bc4e042d1c693931f79a032e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}