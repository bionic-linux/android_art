{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "21c0ef7a_43583cba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-04T04:08:56Z",
      "side": 1,
      "message": "I still want to consider Lokesh\u0027s comment on aosp/1784003 tomorrow. I don\u0027t think that CL fixes this, but that approach may be better.",
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9975319c_9ccaf967",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1083259
      },
      "writtenOn": "2021-08-06T00:13:58Z",
      "side": 1,
      "message": "Is there any update?",
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c06de52_ee5a3c3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-06T00:55:44Z",
      "side": 1,
      "message": "Given that aosp/1784003 turned out to be problematic, and the replacements look fairly subtle, I\u0027d like to move ahead with this. I\u0027d be happy if we came up with a better long-term-fix later, but for now ...\n\nRandy - did you still have concerns about the \"self\" code? To me, it makes sense to always pass something that\u0027s clearly the Id of the current thread. But that\u0027s not a strong preference.\n\nLokesh - are you OK with this?",
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afaa0a90_e45e127f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1083259
      },
      "writtenOn": "2021-08-06T01:08:17Z",
      "side": 1,
      "message": "Hans, it\u0027s just my preference.",
      "parentUuid": "3c06de52_ee5a3c3d",
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b3fe662_ac3aeff8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-06T03:58:27Z",
      "side": 1,
      "message": "FWIW, the related CL that uses a different approach is aosp/1789067 . But it\u0027s riskier, and doesn\u0027t handle the specific problem here. (It also hasn\u0027t really been tested yet.)",
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c1b998_a68079af",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 9721,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-06T18:11:29Z",
      "side": 1,
      "message": "I just went through the code in ConcurrentCopying. I don\u0027t see any checkpoint being done by the GC thread while weak-ref access is disabled. Which one am I missing?",
      "range": {
        "startLine": 9721,
        "startChar": 51,
        "endLine": 9721,
        "endChar": 78
      },
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35b928b8_5af89a17",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 9721,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-06T20:50:17Z",
      "side": 1,
      "message": "There are partial stack traces in the bug. I think we\u0027re actually running the checkpoint to disable weak reference access. Presumably they\u0027ve been disabled in SignalCatcher, since it\u0027s waiting. I\u0027m guessing that HeapTaskDaemon is actually waiting for JIT thread pool to respond to the checkpoint?\n\nClassLinker::InsertClass holds the mutator lock, so that makes sense.",
      "parentUuid": "56c1b998_a68079af",
      "range": {
        "startLine": 9721,
        "startChar": 51,
        "endLine": 9721,
        "endChar": 78
      },
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50b2c046_d2cf7d71",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 9721,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-06T22:40:40Z",
      "side": 1,
      "message": "Yeah it makes sense. The very checkpoint that disabled weak-ref access itself can cause this.",
      "parentUuid": "35b928b8_5af89a17",
      "range": {
        "startLine": 9721,
        "startChar": 51,
        "endLine": 9721,
        "endChar": 78
      },
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ecfc27_c320eb08",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 9724,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-06T18:11:29Z",
      "side": 1,
      "message": "I\u0027m curious, shouldn\u0027t we make a generic change wherein any thread blocking on any runtime lock should periodically check for checkpoints?",
      "range": {
        "startLine": 9723,
        "startChar": 33,
        "endLine": 9724,
        "endChar": 33
      },
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db840a2c_a2598659",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 9724,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-08-06T20:50:17Z",
      "side": 1,
      "message": "My understanding of the theory here is that the mutator lock participates in the lock hierarchy, preventing lock-based deadlocks here. So long as we only acquire locks that should be acquired after the mutator lock while we\u0027re runnable, we should always be OK. The problematic piece here is waiting on a CV while runnable. WaitHoldingLocks has a TODO saying basically that it should not exist. And I agree. But it does. AFAICT, we\u0027ve dealt with any resulting deadlocks individually, which I think we should move away from.\n\nNote also that b/191921480 mentions some other deadlocks that may be related.",
      "parentUuid": "f2ecfc27_c320eb08",
      "range": {
        "startLine": 9723,
        "startChar": 33,
        "endLine": 9724,
        "endChar": 33
      },
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de960acf_912083dc",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 9724,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-08-06T22:40:40Z",
      "side": 1,
      "message": "As per our offline discussion, I understand the issue. On one hand the thread waiting on acquiring a lock is breaking its promise that when it\u0027s runnable it will service the checkpoint requests. But at the same time, it is not possible to ensure that always as in some (or many) cases the threads are not in a position to run checkpoints when they are trying to acquire some lock.\n\nI\u0027m +2 this CL because in this case, at least, it seems safe to wait for any on-going GC to finish, even if that takes several milliseconds to finish.",
      "parentUuid": "db840a2c_a2598659",
      "range": {
        "startLine": 9723,
        "startChar": 33,
        "endLine": 9724,
        "endChar": 33
      },
      "revId": "405d8c3f5c435d34ea32dd8c2c8feb6b1c14560e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}