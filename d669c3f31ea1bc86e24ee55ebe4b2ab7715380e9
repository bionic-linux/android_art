{
  "comments": [
    {
      "key": {
        "uuid": "79af3bf6_52d4740f",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1196,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-08-10T14:20:43Z",
      "side": 1,
      "message": "I think this should be GetDexCache(patch.TargetStringDexFile());",
      "range": {
        "startLine": 1195,
        "startChar": 52,
        "endLine": 1196,
        "endChar": 38
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_11cebb87",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 1196,
      "author": {
        "id": 1109993
      },
      "writtenOn": "2016-08-10T17:51:02Z",
      "side": 1,
      "message": "Yes, I will change this.",
      "parentUuid": "79af3bf6_52d4740f",
      "range": {
        "startLine": 1195,
        "startChar": 52,
        "endLine": 1196,
        "endChar": 38
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59dd179f_692a6584",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-08-10T14:20:43Z",
      "side": 1,
      "message": "std::min(dex_file-\u003eNumStringIds(), mirror::DexCache::kDexCacheStringCacheSize)",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b927f349_b12b479a",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1109993
      },
      "writtenOn": "2016-08-10T17:51:02Z",
      "side": 1,
      "message": "All dex caches need to be of size 1024 because of assumptions other places in the code. There isn\u0027t a lot of space lost doing this, and we still have 95% savings total compared to previous string dex cache.",
      "parentUuid": "59dd179f_692a6584",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fefcf12c_1ee3cd2c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-08-11T18:34:16Z",
      "side": 1,
      "message": "Where do we make such assumptions? I\u0027d expect everything to be fine if we use the min() because for\n\n    index \u003c dex_file-\u003eNumStringIds()\n\nwe would access entry at\n\n    index % 1024 \u003c min(1024, dex_file-\u003eNumStringIds())",
      "parentUuid": "b927f349_b12b479a",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee9e168_2ce41cd1",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-11T18:36:31Z",
      "side": 1,
      "message": "That would require an additional load in the fast-path, wouldn\u0027t it?\n\nI think it would be easiest to show statistics. I\u0027d imagine that for most cases the size of the string table is simply larger than 1024, anyways.",
      "parentUuid": "fefcf12c_1ee3cd2c",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e69c5e4_57326cf5",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-08-11T18:38:18Z",
      "side": 1,
      "message": "Why would it require an additional load?",
      "parentUuid": "7ee9e168_2ce41cd1",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee9e168_8c720812",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-11T18:39:50Z",
      "side": 1,
      "message": "How do you find the slot you\u0027re interested in? I thought the scheme is a direct mapping using %. If you have a non-constant size, you\u0027d have to use that here.",
      "parentUuid": "1e69c5e4_57326cf5",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee9e168_4c9080f4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-08-11T18:43:30Z",
      "side": 1,
      "message": "Actually the % is a red herring, it uses \u0026(1-size) in the assembly so it has to be a power of 2.\n\nSo it would need the loads and the slower division code potentially if you wanted to minimize memory use.",
      "parentUuid": "7ee9e168_8c720812",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee9e168_ec4bd483",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-11T18:48:42Z",
      "side": 1,
      "message": "The \"and (size-1)\" is an implementation detail of \"%\"... :-)",
      "parentUuid": "7ee9e168_4c9080f4",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee9e168_8c11e864",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1109993
      },
      "writtenOn": "2016-08-11T18:51:44Z",
      "side": 1,
      "message": "Yes, for the reasons that both Igor and Andreas stated above, I decided to do 1024 for all arrays. I also talked to Nicolas about it when he was here, and he was fine with doing so. I\u0027ll find numbers and upload a statistic.",
      "parentUuid": "7ee9e168_4c9080f4",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e69c5e4_172cf493",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-08-11T18:51:51Z",
      "side": 1,
      "message": "Guys, this is simple math. The function\n\n    f(x) \u003d x%1024\n\nmaps the range [0,N) to [0,min(1024,N)).\n\nSo, using a valid string index, you cannot map it beyond the proposed\n\n    std::min(dex_file-\u003eNumStringIds(), mirror::DexCache::kDexCacheStringCacheSize)",
      "parentUuid": "7ee9e168_ec4bd483",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee9e168_8ce9e80f",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1109993
      },
      "writtenOn": "2016-08-11T19:00:48Z",
      "side": 1,
      "message": "Oh I see what you\u0027re saying. You\u0027re proposing to leave all entrypoints as they are and then just change the c++ because theoretically if everything is done right, x%N and x%1024 are the same if N \u003c 1024.",
      "parentUuid": "1e69c5e4_172cf493",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee9e168_ec251455",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1275,
      "author": {
        "id": 1109993
      },
      "writtenOn": "2016-08-11T19:05:34Z",
      "side": 1,
      "message": "Yes upon further reflection, I realize that you literally just have 1024-N empty spaces and that we don\u0027t lose anything by doing this. I\u0027m going to start implementing it because it will save us space without any type of runtime hit. First I\u0027m going to upload my current patch though, because it has all current comments fixed except this one. LMK if anyone thinks it\u0027s a bad idea to change.",
      "parentUuid": "7ee9e168_8ce9e80f",
      "range": {
        "startLine": 1275,
        "startChar": 35,
        "endLine": 1275,
        "endChar": 77
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9a8d3f4_acb3c3b2",
        "filename": "runtime/utils/dex_cache_arrays_layout-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-08-10T14:20:43Z",
      "side": 1,
      "message": "std::min(dex_file-\u003eNumStringIds(), mirror::DexCache::kDexCacheStringCacheSize), there is no reason to waste memory for small dex files.",
      "range": {
        "startLine": 96,
        "startChar": 19,
        "endLine": 96,
        "endChar": 61
      },
      "revId": "d669c3f31ea1bc86e24ee55ebe4b2ab7715380e9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}