{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "707f207a_a9c339eb",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 712,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-30T09:42:02Z",
      "side": 1,
      "message": "`CanEnsureNotNullAt()` looks for a dominating `HNullCheck`, so if we somehow propagated that `HNullCheck` here, we could do the correct replacement here.\n\nBut the new run-test is about something completely different. It\u0027s about propagating an explicit `if (ref !\u003d null)` check to avoid the `HNullCheck(ref)` in the then-block. Are we not doing such optimizations in constant folding or DCE?",
      "range": {
        "startLine": 712,
        "startChar": 23,
        "endLine": 712,
        "endChar": 41
      },
      "revId": "a7797165edfae422d111d21a0a0e62e3a7ff2f42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ef6ec18_cb5af514",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 712,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-10-30T09:46:42Z",
      "side": 1,
      "message": "I added this comment as a drive-by since I was taking a look at `HNullCheck` instructions. We could do a mini-GVN here but I don\u0027t know how much benefit we will have since GVN should catch all of the cases. I can prepare a follow-up CL with this.\n\n\u003e But the new run-test is about something completely different. It\u0027s about propagating an explicit if (ref !\u003d null) check to avoid the HNullCheck(ref) in the then-block. Are we not doing such optimizations in constant folding or DCE?\n\nWe only do that in RTP by generating BoundType instructions. We have [RemoveNonNullControlDependences](https://cs.android.com/android/platform/superproject/main/+/main:art/compiler/optimizing/dead_code_elimination.cc;l\u003d153;drc\u003d56dcaeec46dd53e271d6f201d2028996bf19f9dd) in DCE but it is not the same",
      "parentUuid": "707f207a_a9c339eb",
      "range": {
        "startLine": 712,
        "startChar": 23,
        "endLine": 712,
        "endChar": 41
      },
      "revId": "a7797165edfae422d111d21a0a0e62e3a7ff2f42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6804746_aed55236",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 712,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-30T10:01:07Z",
      "side": 1,
      "message": "I\u0027m not sure we should be adding another pass just to eliminate a few null checks when we could and maybe should do that somewhere else. But it helps to make the pass conditional, so we can get this in for now.",
      "parentUuid": "5ef6ec18_cb5af514",
      "range": {
        "startLine": 712,
        "startChar": 23,
        "endLine": 712,
        "endChar": 41
      },
      "revId": "a7797165edfae422d111d21a0a0e62e3a7ff2f42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}