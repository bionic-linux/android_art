{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1d6ad84e_2fda9c16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2021-01-22T00:44:05Z",
      "side": 1,
      "message": "Hey Lokesh, does this output look like it\u0027d work for you? If so, would you mind reviewing the CL?\n\nThanks!",
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c181389e_134da424",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-01-22T03:22:50Z",
      "side": 1,
      "message": "The confidence interval function in the histogram class that is currently being used also prints sum, max, avg in addition to CI. \nhttps://cs.android.com/android/platform/superproject/+/master:art/libartbase/base/histogram-inl.h;drc\u003dmaster;l\u003d193\n\nBut maybe they can added as a separate counter in metrics, rather than making histogram more complicated. Is it possible that you can add a \u0027MetricsBasicStats\u0027, which inherits MetricsCounter, and maintains Max, Min, Avg, in addition to Sum (already done by MetricsCounter)?",
      "parentUuid": "1d6ad84e_2fda9c16",
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3b41fbe_33587d6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2021-01-27T18:02:31Z",
      "side": 1,
      "message": "Another option to consider is having MetricsCounter have an accumulator parameter, which could maintain Max or Min automatically. This is probably less ergonomic though, since you\u0027d have to update three or four counters instead of one.\n\nAverage wouldn\u0027t work as well with this accumulator option, since it isn\u0027t monotonic, but we could track a sum and a count and compute the average when needed.",
      "parentUuid": "c181389e_134da424",
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "866240ce_d15e5bf8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-01-27T20:04:43Z",
      "side": 1,
      "message": "To me it seems like having a separate metric which inherits (or not) MetricsCounter as a more straightforward approach, unless there are any concerns with this?\n\nOtherwise, accumulator should work too. The average computation in the current implementation isn\u0027t perfect either:\nhttps://cs.android.com/android/platform/superproject/+/master:art/libartbase/base/histogram-inl.h;drc\u003dmaster;l\u003d146\n\nBTW, I don\u0027t get why you say that three/four counters will have to be updated?",
      "parentUuid": "f3b41fbe_33587d6f",
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "035f57f2_a2a5f18b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2021-01-27T20:58:49Z",
      "side": 1,
      "message": "For the three/four counters being updated, I was describing a situation where you\u0027d define your metrics like this:\n\n    COUNTER(MetricTotal, Sum)\n    COUNTER(MetricMin, Min)\n    COUNTER(MetricMax, Max)\n    COUNTER(MetricCount, Add1)\n\nThen when you go update metrics, you\u0027d have to do:\n\n    GetMetrics()-\u003eMetricTotal()-\u003eAdd(value);\n    GetMetrics()-\u003eMetricMin()-\u003eAdd(value);\n    GetMetrics()-\u003eMetricMax()-\u003eAdd(value);\n    GetMetrics()-\u003eMetricCount()-\u003eAdd(value);\n\nThis is obviously terrible. It might make sense to have things implemented this way under the covers, since that wouldn\u0027t require any changes to how we report things to StatsD, but I think we should hide all of this from the person adding metrics.\n\nThe subclass (or class that has a common interface, which is how Counters and Histograms currently work) should be fine. The part I\u0027m hesitating on is the fact that we have the ART_COUNTERS macro and the ART_HISTOGRAMS macro already and if possible I\u0027d like to do this without having to add something like an ART_SUPERCOUNTERS. I think some magic around varargs or default values could work though.\n\nI kind of want to rework the grand metrics list anyway though, since in some cases we\u0027ll want to be able to have different sets or groups of metrics. For example, regular app processes don\u0027t need have boot time metrics taking up space in the process.",
      "parentUuid": "866240ce_d15e5bf8",
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e068433c_002ff492",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-01-27T22:21:24Z",
      "side": 1,
      "message": "\u003e For the three/four counters being updated, I was describing a situation where you\u0027d define your metrics like this:\n\u003e \n\u003e     COUNTER(MetricTotal, Sum)\n\u003e     COUNTER(MetricMin, Min)\n\u003e     COUNTER(MetricMax, Max)\n\u003e     COUNTER(MetricCount, Add1)\n\u003e \n\u003e Then when you go update metrics, you\u0027d have to do:\n\u003e \n\u003e     GetMetrics()-\u003eMetricTotal()-\u003eAdd(value);\n\u003e     GetMetrics()-\u003eMetricMin()-\u003eAdd(value);\n\u003e     GetMetrics()-\u003eMetricMax()-\u003eAdd(value);\n\u003e     GetMetrics()-\u003eMetricCount()-\u003eAdd(value);\n\u003e \n\u003e This is obviously terrible. It might make sense to have things implemented this way under the covers, since that wouldn\u0027t require any changes to how we report things to StatsD, but I think we should hide all of this from the person adding metrics.\n\nYeah without hiding it would be a terrible idea ðŸ˜Š\n\u003e \n\u003e The subclass (or class that has a common interface, which is how Counters and Histograms currently work) should be fine. The part I\u0027m hesitating on is the fact that we have the ART_COUNTERS macro and the ART_HISTOGRAMS macro already and if possible I\u0027d like to do this without having to add something like an ART_SUPERCOUNTERS. I think some magic around varargs or default values could work though.\n\nYou understand the issues involved and how best to take care of them. But I think we both agree that in the interest of keeping the metrics\u0027 efficient as well as uncomplicated, it would be best to have a separate metric which maintains min, max, avg, sum etc. I believe this metric which has all these basic stats would be quite useful for others too.\n\u003e \n\u003e I kind of want to rework the grand metrics list anyway though, since in some cases we\u0027ll want to be able to have different sets or groups of metrics. For example, regular app processes don\u0027t need have boot time metrics taking up space in the process.",
      "parentUuid": "035f57f2_a2a5f18b",
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec22b07a_f56b77a4",
        "filename": "runtime/metrics/metrics_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-01-22T03:22:50Z",
      "side": 1,
      "message": "Line\u0027s too long",
      "range": {
        "startLine": 244,
        "startChar": 6,
        "endLine": 244,
        "endChar": 109
      },
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55ec28b2_b64f4d50",
        "filename": "runtime/metrics/metrics_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2021-01-22T03:22:50Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 249,
        "startChar": 5,
        "endLine": 249,
        "endChar": 112
      },
      "revId": "7a4a971bd8db2ff8a3430ef910f9a1083abd6e71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}