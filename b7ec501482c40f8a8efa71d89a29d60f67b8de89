{
  "comments": [
    {
      "key": {
        "uuid": "34894a78_0570c00b",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 114,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "this is a minor nit that you can ignore, but I would have a slight preference for putting helper methods and helper classes at the top, followed by all class methods defined in the public header (and then following decl order strictly, see below)",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_4d0b4e7b",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 114,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:36:59Z",
      "side": 1,
      "message": "Good point; I\u0027ll move helper classes to the top. Some helper methods I\u0027ll try to keep close to their use points, though.",
      "parentUuid": "34894a78_0570c00b",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_058c40de",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 170,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "rather than marking stuff with TUNING, maybe use the more common TODO (our team is more used to searching for those)",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_b7ea47de",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 170,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:36:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_058c40de",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_051e80c6",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 191,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "our readability prefers that methods in the cc file follow the declaration order found in the h file. So validate should come after AllocateRegisters",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_3a9b9e63",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 191,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:36:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_051e80c6",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_e5ad7c39",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 236,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "when a loop is this long, I would recommend closing this with a comment such as\n\n}  // for processing_core_regs",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_daa29295",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 236,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:36:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_e5ad7c39",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_1a0fba3d",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 271,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-08-04T19:25:00Z",
      "side": 1,
      "message": "Does each attempt start with the full set of intervals? It seems to me all intervals that can be trivially pruned shouldn\u0027t go into the next attempt. Each attempt should be dealing with a smaller subset only.",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_6d7bb2d0",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 271,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:47:07Z",
      "side": 1,
      "message": "That\u0027s a really good point. Things may get trickier in my next CL where I start coalescing nodes that can be pruned trivially, but I believe what you suggest is still possible then. (One complication is that if the nodes interfering with a trivially prunable nodes are split, then it might actually open up a more preferable register for the trivially prunable node.)\n\nI\u0027ll definitely look into this, but perhaps it\u0027s best for a future CL? The current implementation is safer/simpler for now.",
      "parentUuid": "34894a78_1a0fba3d",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_65a2ec46",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 317,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "same suggestion, mark the while and the for loop",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_5aaf827a",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 317,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:36:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_65a2ec46",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_a52c54b3",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 722,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "add some vertical space here, and a comment, you are sorting here!",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_daddb210",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 722,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:36:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_a52c54b3",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_65174c57",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 761,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "this will be important yes!",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_9ac08a28",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 761,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:36:59Z",
      "side": 1,
      "message": "This is used in my iterative move coalescing CL :)",
      "parentUuid": "34894a78_65174c57",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_9a772a99",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 924,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2016-08-04T19:25:00Z",
      "side": 1,
      "message": "Some idea here, if I understand your algorithm right. I\u0027d consider the option of incrementally rebuilding the interference graph since the intervals from the split can only interfere with its neighbors (a subset of remaining nodes). With my previous comment, you can start to prune away the trivially prunable nodes after the split. And then proceed from there, dealing with a smaller and smaller interference graph. So the algorithm is more like a loop of split-prune of remaining graph, instead of attempting again with all intervals.",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_8d629612",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 28
      },
      "lineNbr": 924,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:47:07Z",
      "side": 1,
      "message": "I definitely like the idea of using the current interference graph to help build the next interference graph. (See my other reply as well.) Perhaps this is also best left for a future CL, since the present implementation is simpler.",
      "parentUuid": "34894a78_9a772a99",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_8ad91f4c",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 39,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "nice detailed comment!",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_6aa71bbd",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 77,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "overall this is a very clean written and documented header file, kudos!",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_85c03028",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 151,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "I am not sure if we have a strict rule for this, but I have a slight preference for one field per line",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_0d39c6d9",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 151,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:56:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_85c03028",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_45ca4848",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 161,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 161,
        "startChar": 29,
        "endLine": 161,
        "endChar": 53
      },
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_ad2d1a98",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 161,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:56:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_45ca4848",
      "range": {
        "startLine": 161,
        "startChar": 29,
        "endLine": 161,
        "endChar": 53
      },
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_8a8b5f1c",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 181,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-08-04T17:29:04Z",
      "side": 1,
      "message": "reads ambiguous at first; several rounds or allocators? Also, I am not 100% what having several implies? Can you make this a bit more clear?",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34894a78_cd6dfed6",
        "filename": "compiler/optimizing/register_allocator_graph_color.h",
        "patchSetId": 28
      },
      "lineNbr": 181,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-08-04T19:56:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34894a78_8a8b5f1c",
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "145606ee_afcc7990",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 28
      },
      "lineNbr": 372,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-08-04T22:01:27Z",
      "side": 1,
      "message": "indentation is off",
      "range": {
        "startLine": 372,
        "startChar": 0,
        "endLine": 372,
        "endChar": 42
      },
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "145606ee_efc6816c",
        "filename": "compiler/optimizing/ssa_liveness_analysis.cc",
        "patchSetId": 28
      },
      "lineNbr": 388,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-08-04T22:01:27Z",
      "side": 1,
      "message": "nit: one per line.",
      "range": {
        "startLine": 387,
        "startChar": 11,
        "endLine": 388,
        "endChar": 76
      },
      "revId": "b7ec501482c40f8a8efa71d89a29d60f67b8de89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}