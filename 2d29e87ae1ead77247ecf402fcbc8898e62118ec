{
  "comments": [
    {
      "key": {
        "uuid": "39758253_0bdf5d7d",
        "filename": "compiler/optimizing/code_generator_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-20T14:06:08Z",
      "side": 1,
      "message": "Seems very ad-hoc. Can\u0027t you use induction variable analysis for this information?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 151,
        "endChar": 3
      },
      "revId": "2d29e87ae1ead77247ecf402fcbc8898e62118ec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "317f9f37_4cd2d745",
        "filename": "compiler/optimizing/code_generator_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-08-20T16:07:46Z",
      "side": 1,
      "message": "I had an idea to use the induction variable analysis. However, the results of the analysis during optimizations are not available to the codegen. Rerunning the analysis at the codegen does not look reasonable.\n\nA solution can be to move this to InstructionSimplifierArm/Arm64 which can be provided an access to the induction variable analysis.\n\nWhat do you think?",
      "parentUuid": "39758253_0bdf5d7d",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 151,
        "endChar": 3
      },
      "revId": "2d29e87ae1ead77247ecf402fcbc8898e62118ec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdda9b27_46cda141",
        "filename": "compiler/optimizing/code_generator_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-08-20T21:33:49Z",
      "side": 1,
      "message": "The idea of using InstructionSimplifierArm/Arm64 won\u0027t work.",
      "parentUuid": "317f9f37_4cd2d745",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 151,
        "endChar": 3
      },
      "revId": "2d29e87ae1ead77247ecf402fcbc8898e62118ec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a1af340_66cc01fb",
        "filename": "compiler/optimizing/code_generator_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-21T08:32:47Z",
      "side": 1,
      "message": "Why not?",
      "parentUuid": "fdda9b27_46cda141",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 151,
        "endChar": 3
      },
      "revId": "2d29e87ae1ead77247ecf402fcbc8898e62118ec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a6d228b_e71dd015",
        "filename": "compiler/optimizing/code_generator_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1308278
      },
      "writtenOn": "2020-08-21T11:33:42Z",
      "side": 1,
      "message": "Thank you for your question üëç. It made me to think harder. üòä\n\nThe idea I was thinking about was to simplify div/rem into HIR instructions.\nIt won\u0027t works for constant divisors which are not power of 2. The problem is that there is no instruction for \u0027get_high(a * b)\u0027. Introducing such an instruction does not look reasonable.\n\nHowever, it should work for divisors which are power of 2. In such cases we have all needed HIR instructions. And it can be done in the general instruction simplifier. This might cover most of cases I have seen in libcore and frameworks.",
      "parentUuid": "1a1af340_66cc01fb",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 151,
        "endChar": 3
      },
      "revId": "2d29e87ae1ead77247ecf402fcbc8898e62118ec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfc25785_4cb4fcdf",
        "filename": "compiler/optimizing/code_generator_utils.cc",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-20T14:06:08Z",
      "side": 1,
      "message": "Please add comments around this.",
      "range": {
        "startLine": 159,
        "startChar": 9,
        "endLine": 159,
        "endChar": 94
      },
      "revId": "2d29e87ae1ead77247ecf402fcbc8898e62118ec",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}