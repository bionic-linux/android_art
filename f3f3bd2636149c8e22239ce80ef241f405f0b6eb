{
  "comments": [
    {
      "key": {
        "uuid": "05e3c4ac_905369b1",
        "filename": "compiler/utils/assembler_test.h",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-09-15T15:59:29Z",
      "side": 1,
      "message": "Could you comment here why a single function for address test cases is OK? I was wondering whether allowed address modes aren\u0027t uniform enough (e.g., whether register-offset is allowed or not) between instructions in the ISAs the test has to support.\n\n(I.e., why is it not necessary to have a generation function given to Repeat that generates them specifically for the instruction under test?)",
      "range": {
        "startLine": 644,
        "startChar": 2,
        "endLine": 644,
        "endChar": 47
      },
      "revId": "f3f3bd2636149c8e22239ce80ef241f405f0b6eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac315620_8a03d82d",
        "filename": "compiler/utils/assembler_test.h",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-09-15T16:10:13Z",
      "side": 1,
      "message": "Ok, will add a comment. \n\nShort answer is that GetAddresses is fully under control of tests, so that e.g. by pointing to a different vector that is returned, the repeat will go over a more restricted set of addressing modes.\n\nOf course your point is that perhaps\n\nRepeatA_full(...)\nRepeatA_reg_off(....)\n\nis perhaps cleaner than\n\nSetAddressesVectorToFull();\nRepeatA(...)\nSetAddressesVectorRegOfll();\nRepeatA(....)\n\nbut my counter argument is that (1) it will be a lot more coding in the test driver for very little test gain and (2) the approach will need coding a new Repeat every time we can think of a new class of address sets. \"My\" approach does not have that drawback....\n\nSounds reasonable?",
      "parentUuid": "05e3c4ac_905369b1",
      "range": {
        "startLine": 644,
        "startChar": 2,
        "endLine": 644,
        "endChar": 47
      },
      "revId": "f3f3bd2636149c8e22239ce80ef241f405f0b6eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6383b343_03dcac40",
        "filename": "compiler/utils/assembler_test.h",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-09-15T16:15:25Z",
      "side": 1,
      "message": "My comparison wasn\u0027t against multiple repeat functions, but instead of using a member function for creation like I did before (when I wasn\u0027t the template wizard I am now ;-) ), add a function to the parameters (something that accepts a lambda). Then it would look more like yours, but without the side effect that\u0027s somewhat hard to follow (and also disallows sharding, if we ever decide for multithreaded gtest execution).\n\n RepeatA(AddressesVectorToFull, ...)\n RepeatA(SetAddressesVectorRegOfll, ...)\n\n(and allows to have a local lambda in the test for anything that isn\u0027t shared and thus doesn\u0027t deserve to have a predefined member function in the test).",
      "parentUuid": "ac315620_8a03d82d",
      "range": {
        "startLine": 644,
        "startChar": 2,
        "endLine": 644,
        "endChar": 47
      },
      "revId": "f3f3bd2636149c8e22239ce80ef241f405f0b6eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "721b79bd_b7cbe0e0",
        "filename": "compiler/utils/assembler_test.h",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-09-15T16:29:20Z",
      "side": 1,
      "message": "I like the idea, but it would deviate from the existing setup (not necessarily a bad thing, but ideally we would have to rewrite the others too than; having restricted sets of registers is a feature too).\n\nThe concurrent execution argument is an interesting one. In such an environment, refresh my memory, does each thread gets its own testing fixture (so my approach would work), or do they share one fixture between all?",
      "parentUuid": "6383b343_03dcac40",
      "range": {
        "startLine": 644,
        "startChar": 2,
        "endLine": 644,
        "endChar": 47
      },
      "revId": "f3f3bd2636149c8e22239ce80ef241f405f0b6eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c44d74b0_22b39985",
        "filename": "compiler/utils/assembler_test.h",
        "patchSetId": 2
      },
      "lineNbr": 644,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-09-15T16:35:01Z",
      "side": 1,
      "message": "Honestly don\u0027t know. Argument could be made that all the initialization data should be shared, as it\u0027s the same. :-)\n\nI do understand the refactoring argument for the other things (that\u0027s why I am not \"forcing\" my view). :-)",
      "parentUuid": "721b79bd_b7cbe0e0",
      "range": {
        "startLine": 644,
        "startChar": 2,
        "endLine": 644,
        "endChar": 47
      },
      "revId": "f3f3bd2636149c8e22239ce80ef241f405f0b6eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}