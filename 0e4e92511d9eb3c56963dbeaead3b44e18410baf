{
  "comments": [
    {
      "key": {
        "uuid": "c88a26db_6416e46b",
        "filename": "runtime/stack_map.h",
        "patchSetId": 1
      },
      "lineNbr": 890,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-20T09:10:31Z",
      "side": 1,
      "message": "Please don\u0027t put a state in StackMap. It\u0027s supposed to only be a region.",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 890,
        "endChar": 25
      },
      "revId": "0e4e92511d9eb3c56963dbeaead3b44e18410baf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284ae270_ce369bbb",
        "filename": "runtime/stack_map.h",
        "patchSetId": 1
      },
      "lineNbr": 890,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-01-20T17:35:41Z",
      "side": 1,
      "message": "So you\u0027d prefer something like like passing in the bit offset for each getter and setter function?",
      "parentUuid": "c88a26db_6416e46b",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 890,
        "endChar": 25
      },
      "revId": "0e4e92511d9eb3c56963dbeaead3b44e18410baf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284ae270_6e0b27da",
        "filename": "runtime/stack_map.h",
        "patchSetId": 1
      },
      "lineNbr": 890,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-20T17:44:58Z",
      "side": 1,
      "message": "Mathieu is not the first one to try adding a state here. I remember at least a few other persons updating this class with a state (I think dserbesky was the last one).\n\nWe should add a comment on the class to make this design decision explicit.\n\n\nMathieu, could this be carried around in the econding itself?",
      "parentUuid": "284ae270_ce369bbb",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 890,
        "endChar": 25
      },
      "revId": "0e4e92511d9eb3c56963dbeaead3b44e18410baf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284ae270_c350a219",
        "filename": "runtime/stack_map.h",
        "patchSetId": 1
      },
      "lineNbr": 890,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2017-01-21T02:43:53Z",
      "side": 1,
      "message": "Actually, that would not work since the encoding is shared for all the stack maps. What I am thinking now is changing\nStackMap to StackMaps and having an index for most of the getters. Example:\nStackMaps m \u003d encoding.GetStackMaps();\nsize_t index \u003d encoding.GetStackMapIndexForNativePcOffset(native_pc);\nfor (...) {\n  x \u003d code_info.GetDexRegisterMapOf(stack_maps, index, encoding, number_of_dex_registers);\n}\n\nThis change would be much more invasive compared to adding a bit of state, what are your thoughts?\n\nOtherwise I could add something like a BitMemoryRegion abstraction and use that in StackMap. BitMemoryRegion would support bit offsets instead of only byte offsets.",
      "parentUuid": "284ae270_6e0b27da",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 890,
        "endChar": 25
      },
      "revId": "0e4e92511d9eb3c56963dbeaead3b44e18410baf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c88a26db_0a1d9f2e",
        "filename": "runtime/stack_map.h",
        "patchSetId": 1
      },
      "lineNbr": 890,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2017-01-24T13:57:18Z",
      "side": 1,
      "message": "BitMemoryRegion - that was my first though as well.\n\nIndexes - I do not like the invasive change of the API - and further bloating of it.  On the other hand, we could replace bit_offset_ with index_ and have have region_ point to the whole stackmaps area.  It is equivalent to the current version, but with slightly different API for the FieldEncoding.\n\nAdding state - Nicolas might not like me here.  I do not see a problem with adding state like this.  It is equivalent with regards to performance, and it keeps the API simple.",
      "parentUuid": "284ae270_c350a219",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 890,
        "endChar": 25
      },
      "revId": "0e4e92511d9eb3c56963dbeaead3b44e18410baf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}