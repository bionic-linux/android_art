{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e4ddac0d_20373a08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-12-21T21:51:29Z",
      "side": 1,
      "message": "LGTM on the API overall, just a few comments.",
      "revId": "bb17e1929ae8b601830d320979cb8894b4ad51aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9c93802_3f855d59",
        "filename": "libartservice/service/java/com/android/server/art/model/ArtManagedFileStats.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-12-21T21:51:29Z",
      "side": 1,
      "message": "Should this still be here? What does it mean to hide the class when it has unhidden methods?",
      "range": {
        "startLine": 36,
        "startChar": 3,
        "endLine": 36,
        "endChar": 8
      },
      "revId": "bb17e1929ae8b601830d320979cb8894b4ad51aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd5a9c42_05072281",
        "filename": "libartservice/service/java/com/android/server/art/model/ArtManagedFileStats.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2023-12-21T22:18:42Z",
      "side": 1,
      "message": "@SystemApi must always come with @hide, where @hide means hiding from public SDK (i.e., apps). Public unannotated methods in this class inherit the class\u0027es visibility.",
      "parentUuid": "d9c93802_3f855d59",
      "range": {
        "startLine": 36,
        "startChar": 3,
        "endLine": 36,
        "endChar": 8
      },
      "revId": "bb17e1929ae8b601830d320979cb8894b4ad51aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc1ec716_f234a828",
        "filename": "libartservice/service/java/com/android/server/art/model/ArtManagedFileStats.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-12-22T19:08:01Z",
      "side": 1,
      "message": "Except when @SystemApi is on the class level and not on the methods, apparently.\n\nThis isn\u0027t the first time I\u0027m confused by @hide and the different API annotations. Is there some comprehensive docs on them somewhere, so I can stop asking embarrassing questions? I don\u0027t find much with a search (there\u0027s go/android-api-types, but I don\u0027t see any details about class vs method semantics in it).",
      "parentUuid": "fd5a9c42_05072281",
      "range": {
        "startLine": 36,
        "startChar": 3,
        "endLine": 36,
        "endChar": 8
      },
      "revId": "bb17e1929ae8b601830d320979cb8894b4ad51aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c13505ff_2b7e92e3",
        "filename": "libartservice/service/java/com/android/server/art/model/ArtManagedFileStats.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-12-21T21:51:29Z",
      "side": 1,
      "message": "Should we also provide a `getTotalSizeBytes`, to avoid the potential antipattern\n\n```\nlong myGetAllArtManagedSizeBytes() {\n  ArtManagedFileStats stats \u003d artLocalManager.getArtManagedFileStats(...);\n  return stats.getTotalSizeBytesByType(TYPE_DEXOPT_ARTIFACT) +\n         stats.getTotalSizeBytesByType(TYPE_CUR_PROFILE) +\n         stats.getTotalSizeBytesByType(TYPE_REF_PROFILE);\n}\n```\n\n?",
      "range": {
        "startLine": 94,
        "startChar": 16,
        "endLine": 94,
        "endChar": 39
      },
      "revId": "bb17e1929ae8b601830d320979cb8894b4ad51aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "254e07ce_f8b6757c",
        "filename": "libartservice/service/java/com/android/server/art/model/ArtManagedFileStats.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2023-12-21T22:47:12Z",
      "side": 1,
      "message": "Discussed with carmenjackson@ and haiping@. The size information is for app developers to do debugging and telemetry. The size of each file type is used in a different use case. A sum of all file types is not particularly helpful to app developers.\n\nAlso, providing a sum will make it easier for app developers to do wrong things. Since the platform provides an API that returns the size of an app\u0027s all data (https://developer.android.com/reference/android/app/usage/StorageStats#getDataBytes()), app developers may do wrong things like subtracting all data size by all ART managed file size and think that the result is the size of their own data, which doesn\u0027t make sense. ART managed files are not necessarily in app\u0027s data dir. For example, some of them can also be in /data/dalvik-cache, which does not count into app\u0027s all data size. We can\u0027t prevent app developers from doing wrong things, but we can at least make it harder by not providing `getTotalSizeBytes`.",
      "parentUuid": "c13505ff_2b7e92e3",
      "range": {
        "startLine": 94,
        "startChar": 16,
        "endLine": 94,
        "endChar": 39
      },
      "revId": "bb17e1929ae8b601830d320979cb8894b4ad51aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e828aa97_6c76535f",
        "filename": "libartservice/service/java/com/android/server/art/model/ArtManagedFileStats.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-12-22T19:08:01Z",
      "side": 1,
      "message": "\u003e A sum of all file types is not particularly helpful to app developers.\n\nOk, good.\n\n\u003e We can\u0027t prevent app developers from doing wrong things, but we can at least make it harder by not providing getTotalSizeBytes.\n\nJustifying doing one thing wrong because another thing is done wrong seems dubious to me, but I\u0027m certainly not one for adding APIs without clear use cases, so let\u0027s skip it.\n\nBtw, when you talk about app developers there it sounds like they\u0027d have direct access to this API. That won\u0027t be the case, right?",
      "parentUuid": "254e07ce_f8b6757c",
      "range": {
        "startLine": 94,
        "startChar": 16,
        "endLine": 94,
        "endChar": 39
      },
      "revId": "bb17e1929ae8b601830d320979cb8894b4ad51aa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}