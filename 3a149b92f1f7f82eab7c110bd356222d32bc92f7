{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6eedf255_1ce05394",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-11T17:02:04Z",
      "side": 1,
      "message": "Vladimir PTAL",
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c51c5b8_9833192b",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 494,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T11:06:45Z",
      "side": 1,
      "message": "Remove",
      "range": {
        "startLine": 494,
        "startChar": 47,
        "endLine": 494,
        "endChar": 57
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aa9b122_c9eb60fc",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 494,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-13T13:58:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c51c5b8_9833192b",
      "range": {
        "startLine": 494,
        "startChar": 47,
        "endLine": 494,
        "endChar": 57
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afd15b5c_ee84b4c3",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 572,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T11:06:45Z",
      "side": 1,
      "message": "I prefer a simple DCHECK(). If this fails, the value of `top_loop_` provides no useful information. Same below.",
      "range": {
        "startLine": 572,
        "startChar": 4,
        "endLine": 572,
        "endChar": 34
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f40fb18_351bb6fd",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 572,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-13T13:58:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afd15b5c_ee84b4c3",
      "range": {
        "startLine": 572,
        "startChar": 4,
        "endLine": 572,
        "endChar": 34
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c619e74a_1c4afdea",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 652,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T11:06:45Z",
      "side": 1,
      "message": "Rename to `Calculate*`, `Compute*`, `Determine*` or something similar. `Set*` should presumably take the value as an argument. (See for example `ArtMethod::CalculateAndSetImtIndex()` and `String::ComputeAndSetHashCode()`.)",
      "range": {
        "startLine": 652,
        "startChar": 24,
        "endLine": 652,
        "endChar": 39
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13581677_31dc8e04",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 5
      },
      "lineNbr": 652,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-13T13:58:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c619e74a_1c4afdea",
      "range": {
        "startLine": 652,
        "startChar": 24,
        "endLine": 652,
        "endChar": 39
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfc6faed_a411ce0a",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T11:06:45Z",
      "side": 1,
      "message": "Prefix test methods with `$noinline$`.",
      "range": {
        "startLine": 39,
        "startChar": 20,
        "endLine": 39,
        "endChar": 24
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98ef0fb6_7fbf00f6",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-13T13:58:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfc6faed_a411ce0a",
      "range": {
        "startLine": 39,
        "startChar": 20,
        "endLine": 39,
        "endChar": 24
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9adb507c_4cfab16f",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T11:06:45Z",
      "side": 1,
      "message": "This looks like a pre-condition check. Maybe it should be moved before the other checks? (Same for other tests below.)",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 65,
        "endChar": 28
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd23da4_d33c0f49",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-13T13:58:37Z",
      "side": 1,
      "message": "I think it is fine to keep them over there since it is something unrelated to what we are testing (i.e. the loop optimization). I added them as a safety net. WDYT about keeping them there?",
      "parentUuid": "9adb507c_4cfab16f",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 65,
        "endChar": 28
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6622c322_abbd6b14",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T15:01:43Z",
      "side": 1,
      "message": "I think checker statements are checked in the order in which they appear in the file. So, if we eliminate the `TryBoundary`, we would probably see a failure from the `loop_optimization (after)` statements above without being told that the `TryBoundary` was eliminated. It would be better to move the pre-condition check earlier. We could simply add a `CHECK-DAG: TryBoundary` to the first `loop_optimization (before)` section above and drop this section.",
      "parentUuid": "6bd23da4_d33c0f49",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 65,
        "endChar": 28
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2788fd7d_2835178f",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-14T10:57:52Z",
      "side": 1,
      "message": "Ack, moved them up.",
      "parentUuid": "6622c322_abbd6b14",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 65,
        "endChar": 28
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e385eac8_7c30147e",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 632,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T11:06:45Z",
      "side": 1,
      "message": "Separate sections for counting `ArrayGet` and `ArraySet`. (And please fix `530-checker-peel-unroll`.)\n\nSame for all tests below.",
      "range": {
        "startLine": 631,
        "startChar": 2,
        "endLine": 632,
        "endChar": 110
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "586ced87_cb1d6c0b",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 632,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-13T13:58:37Z",
      "side": 1,
      "message": "Due to how the IR is generated (and how the checker works) we would end up with a similar thing as a separate check:\n\n```\n/// CHECK-DAG:                  ArrayGet\n/// CHECK-DAG:                  ArrayGet\n/// CHECK-DAG:                  ArraySet\n/// CHECK-NOT:                  ArrayGet\n/// CHECK-NOT:                  ArraySet\n```\n\nIf that looks better to you I can do it but I am not sure how much it improves readability. I have no hard feelings either way.",
      "parentUuid": "e385eac8_7c30147e",
      "range": {
        "startLine": 631,
        "startChar": 2,
        "endLine": 632,
        "endChar": 110
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8862c8fb_0264cb53",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 632,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-04-13T15:01:43Z",
      "side": 1,
      "message": "I meant separate sections for counting each instruction kind.\n\n  /// CHECK-START: ...\n  /// CHECK:     ArrayGet\n  /// CHECK:     ArrayGet\n  /// CHECK-NOT: ArrayGet\n  //\n  /// CHECK-START: ...\n  /// CHECK:     ArraySet\n  /// CHECK-NOT: ArrayGet\n\nI actually do not know how `CHECK-DAG` interacts witch `CHECK-NOT`. Does the sequence\n\n  NullCheck\n  ArrayGet\n\nsatisfy the statements\n\n  CHECK-DAG: ArrayGet\n  CHECK-NOT: NullCheck\n\nor not?",
      "parentUuid": "586ced87_cb1d6c0b",
      "range": {
        "startLine": 631,
        "startChar": 2,
        "endLine": 632,
        "endChar": 110
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cb37783_e288f670",
        "filename": "test/530-checker-loops-try-catch/src/Main.java",
        "patchSetId": 5
      },
      "lineNbr": 632,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-04-14T10:57:52Z",
      "side": 1,
      "message": "Ack, updated the CHECKs regarding ArraySet and ArrayGet here and in `530-checker-peel-unroll`\n\n---\n\nYes, that example would pass. CHECK-DAG + CHECK-NOT interact like \"Do all the CHECK-DAG and after that make sure nothing else with CHECK-NOT appears\". What we were checking is that we don\u0027t have more ArrayGets after the ones we have.\n\nAs a note, if you had CHECK-NOT + CHECK-DAG (i.e. the checks the other way around) that would fail since it means \"check that we don\u0027t have `NullCheck` before starting the CHECK-DAG\")",
      "parentUuid": "8862c8fb_0264cb53",
      "range": {
        "startLine": 631,
        "startChar": 2,
        "endLine": 632,
        "endChar": 110
      },
      "revId": "3a149b92f1f7f82eab7c110bd356222d32bc92f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}