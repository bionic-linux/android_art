{
  "comments": [
    {
      "key": {
        "uuid": "822622c9_d8ffaafd",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1303,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T12:01:20Z",
      "side": 1,
      "message": "This is a bit weak if you rely on a-\u003eGetPackedType() below. Instead, I think, it should be marked explicitly in the HVecDotProd whether to treat inputs as signed or unsigned.",
      "range": {
        "startLine": 1302,
        "startChar": 2,
        "endLine": 1303,
        "endChar": 61
      },
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e53030c3_9e9e607f",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1303,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2018-08-30T13:25:24Z",
      "side": 1,
      "message": "Ok, I agree on the check - switch to exact type checking.\n\nTo add a packed bit for the type of operand sign/unsigned extension - is this what you are suggesting? Are you aware of the situation when relying on the input type is wrong?",
      "parentUuid": "822622c9_d8ffaafd",
      "range": {
        "startLine": 1302,
        "startChar": 2,
        "endLine": 1303,
        "endChar": 61
      },
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d0a3706_95db487d",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-08-29T11:40:27Z",
      "side": 1,
      "message": "Not sure why line 440 isn\u0027t enough?",
      "range": {
        "startLine": 443,
        "startChar": 0,
        "endLine": 450,
        "endChar": 3
      },
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ce2acff_53eecaa4",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2018-08-30T13:25:24Z",
      "side": 1,
      "message": "Please note that this function is used for SAD idiom as well; the following test requires type conversion accounting:\n\n  private static long sadByte2Long(byte[] b1, byte[] b2) {\n    int min_length \u003d Math.min(b1.length, b2.length);\n    long sad \u003d 0;\n    for (int i \u003d 0; i \u003c min_length; i++) {\n      long x \u003d b1[i];\n      long y \u003d b2[i];\n      sad +\u003d Math.abs(x - y);\n    }\n    return sad;\n  }\n\nFor dot product I used the same function (even if long is not yet supported for DotProduct) as it is semantically expected to do the same thing.",
      "parentUuid": "7d0a3706_95db487d",
      "range": {
        "startLine": 443,
        "startChar": 0,
        "endLine": 450,
        "endChar": 3
      },
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "623feaca_e1d5ebeb",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1030,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2018-08-29T10:57:44Z",
      "side": 1,
      "message": "to be consistent:\n\n// for either both signed or both unsigned operands x, y (reflected in packed_type).\n\nand don\u0027t use L1047 comment",
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bd7874b_34f1755a",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 1030,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2018-08-30T13:25:24Z",
      "side": 1,
      "message": "Actually this is a bit different from VecHalvingAdd and similar: the packed type is not the type of the operands but the type of reduction. I\u0027ve updated the comment a bit.",
      "parentUuid": "623feaca_e1d5ebeb",
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25bbffd4_f6a610f4",
        "filename": "test/665-checker-simd-dotprod-byte/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-30T09:26:41Z",
      "side": 1,
      "message": "Can we merge all the new tests into a single new one? Preferably with a new number, say 684-checker-simd-dotprod. And rename the `Main`s to ByteTest, ShortTest, CharTest.",
      "range": {
        "startLine": 20,
        "startChar": 13,
        "endLine": 20,
        "endChar": 17
      },
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26b2ddd7_314f9e07",
        "filename": "test/665-checker-simd-dotprod-byte/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2018-08-30T13:25:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25bbffd4_f6a610f4",
      "range": {
        "startLine": 20,
        "startChar": 13,
        "endLine": 20,
        "endChar": 17
      },
      "revId": "39aef4c582ab143b6b19115dc8f399674e9e60d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}