{
  "comments": [
    {
      "key": {
        "uuid": "bfba25ec_fbd54bfb",
        "filename": "runtime/quick_argument_visitor.h",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-12-02T17:30:53Z",
      "side": 1,
      "message": "This function is static and using constants, it doesn\u0027t motivate moving all this code into a header file. You need just make a public declaration of this function (or a function to call this function), the definition needn\u0027t be fast and can remain in the .cc file. If the issue is the function is declared in a class, don\u0027t declare it in a class or declare a global function to call it.",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 212,
        "endChar": 3
      },
      "revId": "c810ebded1f476ce32b097392f63118e04086976",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fa5f182_069a9cd0",
        "filename": "runtime/stack.cc",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-26T09:48:10Z",
      "side": 1,
      "message": "Don\u0027t you need the IsOptimized check before? Who compiles these proxy methods?",
      "range": {
        "startLine": 129,
        "startChar": 16,
        "endLine": 129,
        "endChar": 29
      },
      "revId": "c810ebded1f476ce32b097392f63118e04086976",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fa5f182_09286dac",
        "filename": "runtime/stack.cc",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-11-26T10:46:57Z",
      "side": 1,
      "message": "Proxy methods are only created at runtime (for a proxy class) so they are not compiled. They have special entrypoint artQuickProxyInvokeHandler to support the invoke. I think the optimizing compiler will handle them the same way.",
      "parentUuid": "1fa5f182_069a9cd0",
      "range": {
        "startLine": 129,
        "startChar": 16,
        "endLine": 129,
        "endChar": 29
      },
      "revId": "c810ebded1f476ce32b097392f63118e04086976",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_04ba6442",
        "filename": "runtime/stack.cc",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-26T11:10:01Z",
      "side": 1,
      "message": "Hmmm, so the cur_quick_frame_ check below is kind of misleading, right? It\u0027s not a frame generated by quick compiled code.",
      "parentUuid": "1fa5f182_09286dac",
      "range": {
        "startLine": 129,
        "startChar": 16,
        "endLine": 129,
        "endChar": 29
      },
      "revId": "c810ebded1f476ce32b097392f63118e04086976",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_18976451",
        "filename": "runtime/stack.cc",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-11-26T14:03:41Z",
      "side": 1,
      "message": "It follows the Quick convention for stack layout at least (with Method* at sp[0]). Currently we either have Quick frame (compiled code and native/proxy) or Shadow frame (interpreter).",
      "parentUuid": "9f448158_04ba6442",
      "range": {
        "startLine": 129,
        "startChar": 16,
        "endLine": 129,
        "endChar": 29
      },
      "revId": "c810ebded1f476ce32b097392f63118e04086976",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}