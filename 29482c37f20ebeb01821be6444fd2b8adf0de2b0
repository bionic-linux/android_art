{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "022eebae_f80fcad7",
        "filename": "runtime/gc/collector/mark_compact-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-12-20T23:06:14Z",
      "side": 1,
      "message": "This scheme seems to have the disadvantage that we call try_emplace for every object of a ClassWalkSuper class. It didn\u0027t sound like that was that uncommon? though usually this will just be a lookup in a modest-sized map? I think there are options for speeding this up if we need to. For example, we could keep a cache of ClassWalkSuper classes that are known to have superclasses inthe expected order. But it\u0027s probably best to leave it as is for now, and see if this is a real issue.",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 37,
        "endChar": 88
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5ff00cf_84a8e7d8",
        "filename": "runtime/gc/collector/mark_compact-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-21T01:04:43Z",
      "side": 1,
      "message": "As discussed offline, I\u0027ll gather numbers on how many big these maps are, and if required will implement some optimization in a separate CL.",
      "parentUuid": "022eebae_f80fcad7",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 37,
        "endChar": 88
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2111a0a2_37f310fa",
        "filename": "runtime/gc/collector/mark_compact-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-21T01:38:22Z",
      "side": 1,
      "message": "I think some optimization would be required. The map in some cases has ~500 elements in it. Doing an ordered lookup for every object is not cheap. The other map (klass -\u003e super-class where super class is higher address) is extremely small. It\u0027s mostly empty. The walk-super classes in expected (super classes lower than the class) are more frequent (~100 in the ~500 case above). This means that even if we optimized this case, we will still be dealing with 100s of elements in the map and lookup (via try_emplace) will be expensive.\n\nHow about I replace this map also with unordered, and then before during compaction temporarily create one an ordered one?\nI\u0027ll also club the single-reference cache to see how much that helps in the WalkSuper case.",
      "parentUuid": "d5ff00cf_84a8e7d8",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 37,
        "endChar": 88
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d78ab95f_98c905f3",
        "filename": "runtime/gc/collector/mark_compact-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-21T01:46:46Z",
      "side": 1,
      "message": "It seems matching \u0027~\u0027 strikes the text in between ðŸ˜Š. Please read the whole thing.",
      "parentUuid": "2111a0a2_37f310fa",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 37,
        "endChar": 88
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7685b5f5_90c57722",
        "filename": "runtime/gc/collector/mark_compact-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-21T02:12:55Z",
      "side": 1,
      "message": "Another data point: the number of WalkSuper objects are much higher than the \u0027before-class\u0027 objects. I\u0027m going to try single-reference cache and see if it helps.",
      "parentUuid": "d78ab95f_98c905f3",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 37,
        "endChar": 88
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c1fe6a9_19732c10",
        "filename": "runtime/gc/collector/mark_compact-inl.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-12-21T03:56:05Z",
      "side": 1,
      "message": "We\u0027re basically talking 500 classes without bitmaps? Any idea how many objects we have with those classes?\n\nThe temporary unordered map should help. But it would be good to understand why we have so many classes without bitmaps. That seems problematic anyway.\n\nAnother more intrusive approach might be to just compute a variable length bitmap when we encounter one of these, possibly just for the duration of the GC. That should only take a few K. It shouldn\u0027t add that much code, since we can presumably get rid of the class-traversal marking code in favor of the bitmap-generation code.",
      "parentUuid": "2111a0a2_37f310fa",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 37,
        "endChar": 88
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbe10cb1_de48c544",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 5
      },
      "lineNbr": 1891,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-12-20T23:06:14Z",
      "side": 1,
      "message": "Can we split this out into a separate function?",
      "range": {
        "startLine": 1873,
        "startChar": 2,
        "endLine": 1891,
        "endChar": 39
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "313983e7_34f0cb22",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 5
      },
      "lineNbr": 1891,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-21T01:04:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbe10cb1_de48c544",
      "range": {
        "startLine": 1873,
        "startChar": 2,
        "endLine": 1891,
        "endChar": 39
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "741ae455_710ba023",
        "filename": "runtime/gc/collector/mark_compact.h",
        "patchSetId": 5
      },
      "lineNbr": 584,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-12-20T23:06:14Z",
      "side": 1,
      "message": "This isn\u0027t accurate anymore. And it should be documented when it\u0027s semantics change. It satisfies different properties ebfore and after the beginning of CompactMovingSpace, so we should specify both here.",
      "range": {
        "startLine": 583,
        "startChar": 1,
        "endLine": 584,
        "endChar": 70
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43f0c868_25d0f4be",
        "filename": "runtime/gc/collector/mark_compact.h",
        "patchSetId": 5
      },
      "lineNbr": 584,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-21T01:04:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "741ae455_710ba023",
      "range": {
        "startLine": 583,
        "startChar": 1,
        "endLine": 584,
        "endChar": 70
      },
      "revId": "29482c37f20ebeb01821be6444fd2b8adf0de2b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}