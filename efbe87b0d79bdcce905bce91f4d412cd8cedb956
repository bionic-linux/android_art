{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "80b1fb3a_884efb77",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-07-14T20:10:34Z",
      "side": 1,
      "message": "Thanks Jiakai, a few easy to address comments, (sticky) +2 so you can address and submit without waiting for LON.",
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5eed6caf_b8a4d631",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-07-14T21:46:25Z",
      "side": 1,
      "message": "\u003e Patch Set 7: Code-Review+1\n\u003e \n\u003e (1 comment)\n\u003e \n\u003e By voting Code-Review+1 the following files are now code-owner approved by \u003cGERRIT_ACCOUNT_1038443\u003e:\n\u003e * libartbase/base/file_utils.cc\n\u003e * libartbase/base/file_utils.h\n\u003e * libartbase/base/file_utils_test.cc\n\u003e * odrefresh/CacheInfo.xsd\n\u003e * odrefresh/odr_config.h\n\u003e * odrefresh/odrefresh.cc\n\u003e * odrefresh/schema/current.txt\n\u003e * test/odsign/test-src/com/android/tests/odsign/OnDeviceSigningHostTest.java\n\u003e \n\nThank you for the review!",
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2beef9a3_803470a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-07-14T21:46:25Z",
      "side": 1,
      "message": "Thank you for the review!",
      "parentUuid": "80b1fb3a_884efb77",
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e19ce84_997787b8",
        "filename": "libartbase/base/file_utils_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 233,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-07-14T20:10:34Z",
      "side": 1,
      "message": "nit: keep uniform initialization.",
      "range": {
        "startLine": 233,
        "startChar": 34,
        "endLine": 233,
        "endChar": 35
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7330fdeb_1944ff18",
        "filename": "libartbase/base/file_utils_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 233,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-07-14T21:46:25Z",
      "side": 1,
      "message": "Done.\n\nIMO, whether to use braced initializer list is controversial. I just learned today that this is go/artstyle, which states the rationale behind using it. However, it also has some drawbacks. For example, if I write std::vector{...}, it\u0027s not super clear whether the contents insides the braces are iterators for std::vector(InputIt first, InputIt last) or elements of an initializer list for std::vector(std::initializer_list\u003cT\u003e init).",
      "parentUuid": "2e19ce84_997787b8",
      "range": {
        "startLine": 233,
        "startChar": 34,
        "endLine": 233,
        "endChar": 35
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "605bfbc1_aaac223c",
        "filename": "odrefresh/CacheInfo.xsd",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-07-14T20:10:34Z",
      "side": 1,
      "message": "Not for this CL, but perhaps there could be a single classpath complex type that is used for bootClasspath, dex2oatbootClasspath, and systemServerClasspath? [We don\u0027t want to break the file format, but might be able to avoid the redundancy. ]",
      "range": {
        "startLine": 47,
        "startChar": 24,
        "endLine": 47,
        "endChar": 37
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e862c50_cfae6fa2",
        "filename": "odrefresh/CacheInfo.xsd",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-07-14T20:13:20Z",
      "side": 1,
      "message": "Thumbs up, you\u0027ve done this already in the next CL. Thanks!",
      "parentUuid": "605bfbc1_aaac223c",
      "range": {
        "startLine": 47,
        "startChar": 24,
        "endLine": 47,
        "endChar": 37
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da089e8a_5211b6dd",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 7
      },
      "lineNbr": 276,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-07-14T20:10:34Z",
      "side": 1,
      "message": "systemserver_compilable_jars_ \u003d android::base::Split(config_.GetSystemServerClasspath(), \":\");\n\n[optional: we split classpaths in enough that it might be worth a trivial helper \"SplitClasspath\".]",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 276,
        "endChar": 5
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d10236ef_731f7275",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 7
      },
      "lineNbr": 276,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-07-14T22:00:09Z",
      "side": 1,
      "message": "Done. I need fresh eyes :)\n\n\n\u003e [optional: we split classpaths in enough that it might be worth a trivial helper \"SplitClasspath\".]\nA helper function may not be super useful because it\u0027s not flexible enough as we may want to do some additional operations on the classpaths like the filtering we do for boot_extension_compilable_jars_ above. I\u0027ll keep it as is for now.",
      "parentUuid": "da089e8a_5211b6dd",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 276,
        "endChar": 5
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b66a4210_d7f597ed",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 7
      },
      "lineNbr": 280,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-07-14T20:10:34Z",
      "side": 1,
      "message": "And here too.",
      "range": {
        "startLine": 278,
        "startChar": 0,
        "endLine": 280,
        "endChar": 5
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47208118_aa814ca7",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 7
      },
      "lineNbr": 280,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-07-14T22:00:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b66a4210_d7f597ed",
      "range": {
        "startLine": 278,
        "startChar": 0,
        "endLine": 280,
        "endChar": 5
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b83b4831_7ed1231c",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 7
      },
      "lineNbr": 650,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2021-07-14T20:10:34Z",
      "side": 1,
      "message": "optional: this could go before expected_bcp_compilable components to have the consistent ordering (boot classpath, boot extension compilable, system server).",
      "range": {
        "startLine": 649,
        "startChar": 5,
        "endLine": 650,
        "endChar": 42
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64bd2b3d_1f8c08b2",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 7
      },
      "lineNbr": 650,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-07-14T22:22:05Z",
      "side": 1,
      "message": "Thank you for the suggestion.\n\nexpected_bcp_components basically contains boot classpath components on /system plus those on /apex, while expected_bcp_compilable_components only contains those on /system.\n\nexpected_bcp_components here is used for checking whether to compile system server, while expected_bcp_compilable_components above is used for checking whether to compile the boot classpath extensions, so I can\u0027t change the order.\n\nNicolas suggests that we don\u0027t want to recompile boot classpath extensions when some APEXes are updated, which will take an extra 20s. That\u0027s the reason why we are doing it in this way. My assumption is that boot classpath extensions rarely depend on boot classpath components on /apex, so we should be fine.",
      "parentUuid": "b83b4831_7ed1231c",
      "range": {
        "startLine": 649,
        "startChar": 5,
        "endLine": 650,
        "endChar": 42
      },
      "revId": "efbe87b0d79bdcce905bce91f4d412cd8cedb956",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}