{
  "comments": [
    {
      "key": {
        "uuid": "28f8c637_1d8bd300",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 12
      },
      "lineNbr": 2988,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "Top here is confusing. Why is this not the reference type of HInstruction?",
      "range": {
        "startLine": 2988,
        "startChar": 30,
        "endLine": 2988,
        "endChar": 33
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_3e8689fa",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 12
      },
      "lineNbr": 2988,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "I can rename it GetBoundType or GetMaxType maybe.\n\nIt\u0027s not the same because we can still narrow type but never go beyond top_type_. Because we merge towards Top we need to keep track how high we can go for the BoundType().\n\nAs discussed, this is to cover cases like\n\nfor() {\n  if (a instance of Super) {\n    (Subclass)a...\n  }\n}",
      "parentUuid": "28f8c637_1d8bd300",
      "range": {
        "startLine": 2988,
        "startChar": 30,
        "endLine": 2988,
        "endChar": 33
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083302f6_ec52aba4",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 12
      },
      "lineNbr": 2988,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T14:06:57Z",
      "side": 1,
      "message": "GetBoundType SGTM.",
      "parentUuid": "48fb3a34_3e8689fa",
      "range": {
        "startLine": 2988,
        "startChar": 30,
        "endLine": 2988,
        "endChar": 33
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8858d242_68c8e3dd",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 12
      },
      "lineNbr": 2988,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T18:48:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "083302f6_ec52aba4",
      "range": {
        "startLine": 2988,
        "startChar": 30,
        "endLine": 2988,
        "endChar": 33
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_bed5f9f4",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 42,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "Since VisitBasicBlock is the only user of those two methods, I don\u0027t see the need of factoring them. They\u0027re small enough and concise enough that I find it more readable to have them here.",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 42,
        "endChar": 20
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8858d242_88dc376e",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 42,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "The split up is also in anticipation that  InitializeExactType will become bigger. IMO it reads better as all these are distinctive steps but if have a strong opinion i don\u0027t mid reverting.",
      "parentUuid": "48fb3a34_bed5f9f4",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 42,
        "endChar": 20
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8858d242_882437a9",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 42,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T14:06:57Z",
      "side": 1,
      "message": "Code should be small: VisitBasicBlock should loop over the phis, call Visit on them, then loop over the instructions, and call visit on them.",
      "parentUuid": "8858d242_88dc376e",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 42,
        "endChar": 20
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "084ce289_e4cbda54",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 42,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T18:48:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8858d242_882437a9",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 42,
        "endChar": 20
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083302f6_cc8daf4a",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "How about null?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8858d242_28cc2bbf",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 43,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "It doesn\u0027t really matter because that branch will never be taken if the input is null. I will add a check to avoid doing extra work.",
      "parentUuid": "083302f6_cc8daf4a",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083302f6_2cae732d",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T14:06:57Z",
      "side": 1,
      "message": "Not sure I understand. I mean what about bounding type for a \u003d\u003d/!\u003d null?",
      "parentUuid": "8858d242_28cc2bbf",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_610fd02e",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 43,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T18:48:56Z",
      "side": 1,
      "message": "ah, I thought you were referring to `null instanceof ClassA`\n\nI will add sensitivity to nullchecks in a follow up.",
      "parentUuid": "083302f6_2cae732d",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_fef4a18e",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 95,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "Please fix this first :-) Something\u0027s very wrong if what you\u0027re saying is true. It means we miscompile:\n\nbool a \u003d b instanceof Foo\nif (a) {\n} else {\n}",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 95,
        "endChar": 39
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_fef3816b",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 95,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "I phrased the comment wrong... sorry. I will update\n\nHInstanceOf returns 1 when True but HIf will compare with 0, so the branch where HInstanceOf is True is actually the FalseSuccessor.",
      "parentUuid": "48fb3a34_fef4a18e",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 95,
        "endChar": 39
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_be1739c3",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 95,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T14:06:57Z",
      "side": 1,
      "message": "Again, this looks bogus. At the DEX level, we\u0027ll get if-eq or if-eqz (most probably if-eqz). The branches will then match where Dex is jumping to.\n\nLooks like you\u0027re confused about the comparison to zero?",
      "parentUuid": "48fb3a34_fef3816b",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 95,
        "endChar": 39
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_418614fb",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 95,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T18:48:56Z",
      "side": 1,
      "message": "I think we are talking about the same thing.\n\ndex will generate an if-eqz and thus reversing what branch you should take.\n\nTo make things clearer I just choose the proper successor based on the value if compare against.",
      "parentUuid": "48fb3a34_be1739c3",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 95,
        "endChar": 39
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28f8c637_7d6537aa",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 103,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "Wouldn\u0027t it be simpler to do this on the block that has the HIf?",
      "range": {
        "startLine": 88,
        "startChar": 2,
        "endLine": 103,
        "endChar": 3
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48fb3a34_def0c561",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 103,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "yea :), it will save a few lines.",
      "parentUuid": "28f8c637_7d6537aa",
      "range": {
        "startLine": 88,
        "startChar": 2,
        "endLine": 103,
        "endChar": 3
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28f8c637_3dbc4f95",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 164,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "ReferenceTypeInfo* new_rti. Or should you just return a new ReferenceTypeInfo instead?",
      "range": {
        "startLine": 164,
        "startChar": 42,
        "endLine": 164,
        "endChar": 68
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8858d242_081f278f",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 164,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "done with pointer. I don\u0027t see it necessary to add the extra lines to return a new ReferenceTypeInfo.",
      "parentUuid": "28f8c637_3dbc4f95",
      "range": {
        "startLine": 164,
        "startChar": 42,
        "endLine": 164,
        "endChar": 68
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083302f6_0cb3b797",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 164,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T14:06:57Z",
      "side": 1,
      "message": "Some might say immutability is a lot nicer....",
      "parentUuid": "8858d242_081f278f",
      "range": {
        "startLine": 164,
        "startChar": 42,
        "endLine": 164,
        "endChar": 68
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "084ce289_044ef67f",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 164,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T18:48:56Z",
      "side": 1,
      "message": "can\u0027t argue with that :) but ReferenceTypeInfo was not immutable...\n\nI made it so and change this as well.",
      "parentUuid": "083302f6_0cb3b797",
      "range": {
        "startLine": 164,
        "startChar": 42,
        "endLine": 164,
        "endChar": 68
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083302f6_2c2d5388",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 202,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "As discussed, I think it would be clearer (and the more we\u0027ll handle instructions with this, the more it will be) to split UpdateReferenceTypeInfo into Visit functions. The Equality check in 221 can stay in UpdateReferenceTypeInfo.",
      "range": {
        "startLine": 195,
        "startChar": 2,
        "endLine": 202,
        "endChar": 27
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8858d242_0875e7b1",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 202,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "083302f6_2c2d5388",
      "range": {
        "startLine": 195,
        "startChar": 2,
        "endLine": 202,
        "endChar": 27
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28f8c637_dd556bbd",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 236,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-19T11:16:28Z",
      "side": 1,
      "message": "This kind of belongs where I put a comment on null checks. Also, no need for the code snippets, just say \"handle a !\u003d/\u003d\u003d null\".",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 236,
        "endChar": 6
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8858d242_483e3fe9",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 12
      },
      "lineNbr": 236,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-19T13:59:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28f8c637_dd556bbd",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 236,
        "endChar": 6
      },
      "revId": "2140812e81d5500558eadd7157cb234d921771e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}