{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fb3b1688_afe32dcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T00:16:24Z",
      "side": 1,
      "message": "Vladimir PTAL\n\nLokesh PTAL at the tests 2271- and 2272- to make sure my regression tests make sense from your end. I saw them crashing locally with the runtime checks (and without the fixes).\n\nMartin and Roland as CC: this CL enables 2247- but not for MTS (due to SLO requirements).\n\nNicolas and Hans as CC as this CL might interest you.",
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ecb5b12_28c9aba1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T10:25:21Z",
      "side": 1,
      "message": "Partial review.",
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae566829_cc3dc1a8",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 5936,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T00:16:24Z",
      "side": 1,
      "message": "Bug 1: codegen was recomputing whether a write barrier was needed, which led to inconsistencies. Regression test: 2271-\n\nThis (and 2272-) are regression tests which fail with the runtime checks (and without the fixes).\n\nNote that `needs_write_barrier` keeps the old implementation (i.e. using `CodeGenerator::StoreNeedsWriteBarrier`) for baseline compiles as it doesn\u0027t run write barrier elimination.",
      "range": {
        "startLine": 5936,
        "startChar": 7,
        "endLine": 5936,
        "endChar": 26
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4e4d7be_da26062e",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 5940,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T00:16:24Z",
      "side": 1,
      "message": "Whether we do the dirty bit runtime check or not. We do it only for write barriers we eliminated in the write barrier elimination pass.\n\nWilling to bikeshed name to something like `check_gc_card_is_valid` too.",
      "range": {
        "startLine": 5940,
        "startChar": 7,
        "endLine": 5940,
        "endChar": 25
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e94f910_be00cb88",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 5946,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T10:25:21Z",
      "side": 1,
      "message": "We should have helper functions to get these two booleans. (And share `kEnableRuntimeGCCardChecks` across codegens.)",
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2153d30_5f7dbbef",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 5946,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T13:22:48Z",
      "side": 1,
      "message": "Moved boolean and created method in code_generator.h.\n\nAlso renamed `checking_dirty_bit` to `check_gc_card` because it looks more precise. Shifted the booleans around so that `!needs_write_barrier \u0026\u0026 CodeGenerator::StoreNeedsWriteBarrier(field_type, instruction-\u003eInputAt(1))` are together (which means \"eliminated write barriers\")",
      "parentUuid": "3e94f910_be00cb88",
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9197771_20605090",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 6968,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T10:25:21Z",
      "side": 1,
      "message": "Can WBE ensure that this is false for null value?\n\n(This is essentially the same question as my WBE comment about \"hunt for original reference\" before checking for null.)",
      "range": {
        "startLine": 6968,
        "startChar": 12,
        "endLine": 6968,
        "endChar": 70
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8441b6f1_6b4cc640",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 6968,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T13:22:48Z",
      "side": 1,
      "message": "\u003eCan WBE ensure that this is false for null value?\n\nNot right now. This is the repro case of `2271-` where WBE doesn\u0027t see the null but codegen does.",
      "parentUuid": "d9197771_20605090",
      "range": {
        "startLine": 6968,
        "startChar": 12,
        "endLine": 6968,
        "endChar": 70
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3eabfd84_c2dda894",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 7046,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T00:16:24Z",
      "side": 1,
      "message": "Bug 2: Even when we were relying on a write barrier, we were writing null checks which would bypass the write barrier. Regression test 2272-",
      "range": {
        "startLine": 7043,
        "startChar": 0,
        "endLine": 7046,
        "endChar": 7
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0b326d3_4eb3b263",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 7055,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T10:25:21Z",
      "side": 1,
      "message": "Should we optimize this to emit the write barrier before binding `do_store` for `kEmitNotBeingReliedOn` and after binding for `kEmitBeingReliedOn`?",
      "range": {
        "startLine": 7055,
        "startChar": 18,
        "endLine": 7055,
        "endChar": 28
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa87898_13c26154",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 7055,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T13:22:48Z",
      "side": 1,
      "message": "We can do it (and that\u0027s what the TODO is about) but I wanted to have this CL be as small as possible with the least changes. Since skipping the write barrier when null is a runtime optimization (and not a correctness thing) I decided not to do it for this CL.\n\nI can change and update the CL if you prefer.",
      "parentUuid": "a0b326d3_4eb3b263",
      "range": {
        "startLine": 7055,
        "startChar": 18,
        "endLine": 7055,
        "endChar": 28
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4502af8_005d8282",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 7331,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T10:25:21Z",
      "side": 1,
      "message": "If we\u0027ve eliminated this write barrier, we are relying on a previous write barrier which needs to be unconditional, so we can emit check this even if the value is null.",
      "range": {
        "startLine": 7330,
        "startChar": 2,
        "endLine": 7331,
        "endChar": 68
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9aad36a_c6d4af6e",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 7331,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T13:22:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4502af8_005d8282",
      "range": {
        "startLine": 7330,
        "startChar": 2,
        "endLine": 7331,
        "endChar": 68
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0c50170_6f322d2f",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 7342,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T10:25:21Z",
      "side": 1,
      "message": "On ARM and ARM64 we have the marking register.",
      "range": {
        "startLine": 7342,
        "startChar": 2,
        "endLine": 7342,
        "endChar": 90
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1743a99c_480058dc",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 7342,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T13:22:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0c50170_6f322d2f",
      "range": {
        "startLine": 7342,
        "startChar": 2,
        "endLine": 7342,
        "endChar": 90
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9985f400_0d852efa",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 18
      },
      "lineNbr": 45,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-12-15T10:25:21Z",
      "side": 1,
      "message": "Should we \"hunt for original reference\" before checking for null? Wouldn\u0027t that fix fix the bug even without the codegen changes?",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "473532be_210d8c55",
        "filename": "compiler/optimizing/write_barrier_elimination.cc",
        "patchSetId": 18
      },
      "lineNbr": 45,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T13:22:48Z",
      "side": 1,
      "message": "It would fix *this* bug without the `needs_write_barrier` codegen changes but other bugs might pop-up in the future. Fixing codegen is future-proofing too.\n\nThis is a possibility of improvement but I didn\u0027t want to do it in this CL to make the changes as little as possible.\n\nSince it is an optimization and not a correctness change I opted not to do it in this CL. I can do this change if you prefer.",
      "parentUuid": "9985f400_0d852efa",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bd56629_8cd1a813",
        "filename": "test/2271-checker-codegen-honor-write-barrier-kind/src/Main.java",
        "patchSetId": 18
      },
      "lineNbr": 56,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-15T13:20:10Z",
      "side": 1,
      "message": "The tests look fine, but the code is almost identical. Isn\u0027t it possible to merge the two cases into a single art-test?",
      "range": {
        "startLine": 56,
        "startChar": 48,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bcd9bf5_d1883753",
        "filename": "test/2271-checker-codegen-honor-write-barrier-kind/src/Main.java",
        "patchSetId": 18
      },
      "lineNbr": 56,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T13:25:00Z",
      "side": 1,
      "message": "The tests may look the same but they hit different bugs.\n\nBug 1: codegen was recomputing whether a write barrier was needed, which led to inconsistencies. Regression test: 2271-\n\nBug 2: Even when we were relying on a write barrier, we were writing null checks which would bypass the write barrier. Regression test 2272-\n\nI opted to have them in different test cases to have them be independent of each other, and have minimal tests.",
      "parentUuid": "8bd56629_8cd1a813",
      "range": {
        "startLine": 56,
        "startChar": 48,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f02fd27f_a91658d7",
        "filename": "test/2271-checker-codegen-honor-write-barrier-kind/src/Main.java",
        "patchSetId": 18
      },
      "lineNbr": 56,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-15T13:44:32Z",
      "side": 1,
      "message": "you understand the codegen part. But as far as the test program is concerned, it seems pretty straight-forward on how to keep it independent within the same test. If from codegen pov it\u0027s not possible then sure keep it as is.",
      "parentUuid": "3bcd9bf5_d1883753",
      "range": {
        "startLine": 56,
        "startChar": 48,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a593fec5_29901065",
        "filename": "test/2271-checker-codegen-honor-write-barrier-kind/src/Main.java",
        "patchSetId": 18
      },
      "lineNbr": 56,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-12-15T14:51:33Z",
      "side": 1,
      "message": "It is possible: what\u0027s on the `main` can be moved into a separate method. Having said that, I think it is best to keep the regression tests separate. Not sure what we are gaining by combining them, only removing one folder from the art tests?",
      "parentUuid": "f02fd27f_a91658d7",
      "range": {
        "startLine": 56,
        "startChar": 48,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33c041d1_3961c1e3",
        "filename": "test/2271-checker-codegen-honor-write-barrier-kind/src/Main.java",
        "patchSetId": 18
      },
      "lineNbr": 56,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-15T15:16:51Z",
      "side": 1,
      "message": "There is a substantial code duplication between the two tests. That in itself is a pretty strong motivation for merging the two tests. Given that both regressions are related to write-barrier-elimination, is another motivation for merging the tests. Also, correct me if I\u0027m wrong, but it\u0027s not like by merging the tests we are loosing test coverage.",
      "parentUuid": "a593fec5_29901065",
      "range": {
        "startLine": 56,
        "startChar": 48,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "a40f3ea098f9aeb2c32ba4a1235b538af2a5d89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}