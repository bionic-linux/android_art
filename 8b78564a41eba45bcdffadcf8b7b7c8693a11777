{
  "comments": [
    {
      "key": {
        "uuid": "f49375d2_ea9892a4",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 15
      },
      "lineNbr": 4491,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-17T13:33:24Z",
      "side": 1,
      "message": "Same comment about explicitly listing valid cases.",
      "range": {
        "startLine": 4486,
        "startChar": 0,
        "endLine": 4491,
        "endChar": 82
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4e0084b_7b0f8ed8",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 15
      },
      "lineNbr": 4491,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-17T13:53:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f49375d2_ea9892a4",
      "range": {
        "startLine": 4486,
        "startChar": 0,
        "endLine": 4491,
        "endChar": 82
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01791ee5_babfde28",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 8930,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-17T13:33:24Z",
      "side": 1,
      "message": "I have trouble understanding what this code is doing. Why does it check reg and not next_reg? Why does the loop break at 4? Why is the check at line 8932 not performed for some \u0027D\u0027 args (because of the early break at line 8929)? From what I can see all previous implementations just returned desired_dispatch_info, so I have nothing to compare against.",
      "range": {
        "startLine": 8928,
        "startChar": 0,
        "endLine": 8930,
        "endChar": 9
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf098bb3_72fdd8ab",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 8930,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-17T13:53:21Z",
      "side": 1,
      "message": "Native ABI is soft-float with argument registers r0-r3. When we reach register 4, the rest of the arguments goes to the stack and there is no problem. Also, 64-bit arguments (double, long) are \"aligned\" to even-numbered registers and if we hit `reg \u003d\u003d 4` due to the RoundUp() in line 8926, we do not want to do the floating point check in line 8932.",
      "parentUuid": "01791ee5_babfde28",
      "range": {
        "startLine": 8928,
        "startChar": 0,
        "endLine": 8930,
        "endChar": 9
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "511752aa_eed0d35e",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 8930,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-17T14:36:14Z",
      "side": 1,
      "message": "Thanks for the explanation.\n\nSo, this function prevents a floating-point argument from being passed in a register, which is forbidden by soft-float ABI, right? Can you rewrite the comment to explicitly say that? Maybe it\u0027s worth adding a named constant for 4u.\n\nI would probably rewrite the code as:\n\n    for (uint32_t i \u003d 1; i !\u003d shorty_len; ++i) {\n      if (shorty[i] \u003d\u003d \u0027D\u0027 || shorty[i] \u003d\u003d \u0027J\u0027) {\n        // 64-Bit arguments (double, long) are \"aligned\" to even-numbered registers.\n        reg \u003d RoundUp(reg, 2u);\n        reg +\u003d 2u;\n      } else {\n        reg +\u003d 1u;\n      }\n      if (reg \u003e\u003d 4u) {\n        // This and the rest of args do not fit in argument registers r0-r3.\n        break;\n      }\n      if (shorty[i] \u003d\u003d \u0027D\u0027 || shorty[i] \u003d\u003d \u0027F\u0027) {\n        // Floating-point arg is passed in a register, which is forbidden by soft-float ABI.\n        // Fall back to managed ABI.\n        HInvokeStaticOrDirect::DispatchInfo dispatch_info \u003d desired_dispatch_info;\n        dispatch_info.code_ptr_location \u003d HInvokeStaticOrDirect::CodePtrLocation::kCallArtMethod;\n        return dispatch_info;\n      }\n    }\n\nIt\u0027s a bit shorter and has fewer exits from the loop.",
      "parentUuid": "cf098bb3_72fdd8ab",
      "range": {
        "startLine": 8928,
        "startChar": 0,
        "endLine": 8930,
        "endChar": 9
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dd47e6b_bae667c7",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 8930,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-17T14:55:10Z",
      "side": 1,
      "message": "The comment is in lines 8917-8918. The problem is not in the ABI but in our strict type consistency checks that do not permit this.\n\nYour code erroneously increments `reg` before checking `reg \u003e\u003d 4`.",
      "parentUuid": "511752aa_eed0d35e",
      "range": {
        "startLine": 8928,
        "startChar": 0,
        "endLine": 8930,
        "endChar": 9
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4f6e727_06a72703",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 8930,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-17T15:35:13Z",
      "side": 1,
      "message": "Right. Well than (last attempt at simplification):\n\n    for (uint32_t i \u003d 1; i !\u003d shorty_len; ++i) {\n      size_t next_reg \u003d reg + 1u;\n      if (shorty[i] \u003d\u003d \u0027D\u0027 || shorty[i] \u003d\u003d \u0027J\u0027) {\n        reg \u003d RoundUp(reg, 2u);\n        next_reg \u003d reg + 2u;\n      }\n      if (reg \u003d\u003d 4u) {\n        break;\n      }\n      reg \u003d next_reg;\n\n      if (shorty[i] \u003d\u003d \u0027D\u0027 || shorty[i] \u003d\u003d \u0027F\u0027) {\n        HInvokeStaticOrDirect::DispatchInfo dispatch_info \u003d desired_dispatch_info;\n        dispatch_info.code_ptr_location \u003d HInvokeStaticOrDirect::CodePtrLocation::kCallArtMethod;\n        return dispatch_info;\n      }\n    }",
      "parentUuid": "4dd47e6b_bae667c7",
      "range": {
        "startLine": 8928,
        "startChar": 0,
        "endLine": 8930,
        "endChar": 9
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77d8ba24_fff84589",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 9056,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-17T13:33:24Z",
      "side": 1,
      "message": "IMO this should explicitly list valid cases. If the list changes, DCHECK would have to be patched anyway (and most likely forgotten):\n\n  case DataType::Type::kBool:\n  ...\n  case DataType::Type::kFloat64:\n    break;\n  default:\n    DCHECK(false) \u003c\u003c invoke-\u003eGetType();\n    break;",
      "range": {
        "startLine": 9047,
        "startChar": 0,
        "endLine": 9056,
        "endChar": 82
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc2f06a7_59f3493c",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 9056,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-17T13:53:21Z",
      "side": 1,
      "message": "Done and removed the duplicate kFloat{32,64}.",
      "parentUuid": "77d8ba24_fff84589",
      "range": {
        "startLine": 9047,
        "startChar": 0,
        "endLine": 9056,
        "endChar": 82
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bdfb53f_9d218318",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 15
      },
      "lineNbr": 9056,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-17T14:36:14Z",
      "side": 1,
      "message": "Thanks, I didn\u0027t notice the duplication.",
      "parentUuid": "dc2f06a7_59f3493c",
      "range": {
        "startLine": 9047,
        "startChar": 0,
        "endLine": 9056,
        "endChar": 82
      },
      "revId": "8b78564a41eba45bcdffadcf8b7b7c8693a11777",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}