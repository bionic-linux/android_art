{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2454d7f1_c3314d00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-24T18:46:35Z",
      "side": 1,
      "message": "I\u0027ll leave it to the ART Perf team.",
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0c71563_0d142188",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-25T08:56:34Z",
      "side": 1,
      "message": "With Jiakai dropped, adding Mythri as a \u0027suggested owner\u0027 on the ART side. Thanks!",
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c0534c6_a9aa14ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-25T20:29:52Z",
      "side": 1,
      "message": "ArtGtestsTargetChroot is failing with\n\n\u003e   1 tests ran more than once. Full list: [CommonRuntimeTest#ElfAlignmentMismatch]\n\nMaybe the test is included into there twice or something?",
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca844450_b2a13a1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-05-01T12:37:54Z",
      "side": 1,
      "message": "This has been resolved by not including it in every test suite. Unfortunately the GTest.java trade-federation class does not expect duplicate tests and there is no nice workaround (see the other comment chain). In light of this I think just having it in runtime_tests is preferable. Thanks!\n\nLeaving comment unresolved to confirm that the test now passes in CI.",
      "parentUuid": "8c0534c6_a9aa14ad",
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b03e271c_cb91167b",
        "filename": "runtime/common_runtime_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-04-29T10:16:18Z",
      "side": 1,
      "message": "So far we ndon\u0027t have an actual test as a part of CommonRuntimeTest. This seems to work okay with test.py --gtest but it seems to be causing problems with ArtGtestsTargetChroot:\n\nhttps://android-build.corp.google.com/test_investigate/?blocking\u003dblocking\u0026invocationId\u003dI62500010270474833\u0026status\u003dnone\u0026testResultId\u003dTR24629275639580179\n\n+David, do you have any suggestions?",
      "range": {
        "startLine": 661,
        "startChar": 0,
        "endLine": 661,
        "endChar": 47
      },
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44bfecb6_b7f0308b",
        "filename": "runtime/common_runtime_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-29T11:11:29Z",
      "side": 1,
      "message": "In my testing I had been running multiple suites by doing (for example) `atest art_standalone_*_tests` or `test.py --gtest`. I think these evaluate to running each test suite independently, so there\u0027s no problem that the test gets run more than once.\n\nHowever it looks like the `ArtGtestsTargetChroot` target runs all the tests as a single \u0027suite\u0027, which then means we get caught by https://cs.android.com/android/platform/superproject/main/+/main:tools/tradefederation/core/test_framework/com/android/tradefed/testtype/GTestListener.java;l\u003d60 \n\nI\u0027m currently looking at ways of achieving the goal of having this test appear in any given runtime test-suite, without being inherited multiple times when they are called as `ArtGtestsTargetChroot`, but haven\u0027t yet come up with a solution for this.\n\nI would be very grateful for any ideas to avoid the fallback of just droping that aspect and instead add it to a single test suite.",
      "parentUuid": "b03e271c_cb91167b",
      "range": {
        "startLine": 661,
        "startChar": 0,
        "endLine": 661,
        "endChar": 47
      },
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80d8a032_1d330373",
        "filename": "runtime/common_runtime_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-04-29T22:46:50Z",
      "side": 1,
      "message": "Following up on this, it looks like there is no supported way in the `ArtGtestsTargetChroot` configuration to provide a specific test suite when running `ArtGTest`, as the tests are just picked up via https://cs.android.com/android/platform/superproject/main/+/main:tools/tradefederation/core/test_framework/com/android/tradefed/testtype/GTest.java;drc\u003d074bb2dc367bde42b837a8de4d4e88f26c074c32;l\u003d487 and then whatever `gtest_filter` we define get applied to each one in turn (and importantly, `gtest_filter` cannot filter the binary name, only the test fixture and name). \n\nThis is only a problem if we want to actually run the `ElfAlignmentMismatch` test as part of `ArtGtestsTargetChroot`. But of course as this is in chroot mode, there is no possibility of mismatch and we can just exclude it via the `exclude-filter` option. The test is intended for the standalone modes of the tests.\n\nThinking ahead, if other \u0027common\u0027 test-cases arise that would need to be included, either a specific module for those would need to be used (in which case excluding them from `ArtGtestsTargetChroot` is still required), or an adjustment would be needed in tradefed\u0027s `GTest.java` (e.g. to support specification of a particular binary path so that we could execute the test class twice - once for all suites with the common tests excluded, and once for a single suite with them included). Those are more significant changes that I think are likely unnecessary for this CL. \n\nI intend to update this CL once I\u0027ve ran through the tests locally.",
      "parentUuid": "44bfecb6_b7f0308b",
      "range": {
        "startLine": 661,
        "startChar": 0,
        "endLine": 661,
        "endChar": 47
      },
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12cbfef5_dc593b92",
        "filename": "runtime/common_runtime_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2024-04-30T10:12:00Z",
      "side": 1,
      "message": "Sorry David is OOO for a few weeks. \n\nThanks for digging into this! I am slightly concerned about special casing ``ArtGtestsTargetChroot`` and excluding this test in that configuration. I am not very familiar with the different configs we use to run the tests so I am concerned that we might hit a similar issue with some other config. \n\nI understand why we want to include the test as a part of each test suite but we generally run all the gtests together on the bots. So what if we only have this test in runtime_tests for example. We will still catch the issue if it happens in the test environment.\n\nIf we are running manually then we may just run one test suite but then we can also run just run one test skipping the ElfAlignment test. So I am not sure if it is worth the effort to include it in each test suite. I would suggest moving the test to runtime_test and I think we will have sufficient coverage on the bots to catch this issue if it happens.",
      "parentUuid": "80d8a032_1d330373",
      "range": {
        "startLine": 661,
        "startChar": 0,
        "endLine": 661,
        "endChar": 47
      },
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20b492a5_352b13aa",
        "filename": "runtime/common_runtime_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 661,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-05-01T12:37:54Z",
      "side": 1,
      "message": "Thanks for the feedback. I tend to agree that changing the current design of one-test-per-feature is a little unnecessary for this relatively simple test, and have moved it to runtime tests as suggested. PTAL, thanks!",
      "parentUuid": "12cbfef5_dc593b92",
      "range": {
        "startLine": 661,
        "startChar": 0,
        "endLine": 661,
        "endChar": 47
      },
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e802c5_286dfd4a",
        "filename": "runtime/oat/elf_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 1030,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-25T18:07:18Z",
      "side": 1,
      "message": "nit: not the least common divisor of all loadable segment alignments?",
      "range": {
        "startLine": 1030,
        "startChar": 33,
        "endLine": 1030,
        "endChar": 63
      },
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17b6449f_d5b3ecd3",
        "filename": "runtime/oat/elf_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 1030,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2024-05-01T12:37:54Z",
      "side": 1,
      "message": "While not technically required by the standard, to my understanding `PT_LOAD` segments always have the same `p_align` in practice. I don\u0027t know any examples where each segment would require different alignment.\n\nRegardless of whether or not its technically possible, the current use-case is boot.oat which is a file that we generate internally and which we know will always have constant `p_align` values over the loadable segments.\n\nTherefore I think that getting all unique values and doing a lowest-common calculation would be unnecessary. Perhaps if we start to use this function on other files not under our control we could revisit the need, what do you think?",
      "parentUuid": "18e802c5_286dfd4a",
      "range": {
        "startLine": 1030,
        "startChar": 33,
        "endLine": 1030,
        "endChar": 63
      },
      "revId": "92c8a89233ca65df8c4d4e859a6a9129422bee29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}