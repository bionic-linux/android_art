{
  "comments": [
    {
      "key": {
        "uuid": "6414219f_99718b25",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 1
      },
      "lineNbr": 2619,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-06-26T18:19:21Z",
      "side": 1,
      "message": "Can rb_state be anything other than Gray or White?",
      "range": {
        "startLine": 2618,
        "startChar": 8,
        "endLine": 2619,
        "endChar": 63
      },
      "revId": "351df52b2f534673f64b61d01063ee56e557a8d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2d4adc5_ffe433a0",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 1
      },
      "lineNbr": 2619,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-06-26T18:42:02Z",
      "side": 1,
      "message": "The read barrier state should indeed always be gray or white. Any other value is a sign of heap corruption (or a bug in the collector\u0027s logic).\n\nWhen the read barrier status in the lockword was a tri-state value (white, gray or black), the assertion was checking that the read barrier state was either gray or black, i.e. \"marked\" in the general sense. Now that we only have two states (where white means \"white or black\"; see https://android-review.googlesource.com/c/platform/art/+/219453/3/runtime/gc/collector/concurrent_copying.cc#1916), this assertion looks a bit odd. Maybe we could rewrite this code as a general sanity check on the lockword.\n\nThe motivation for this CL was to improve debugging info in the investigation of b/110812755.\n\nAlso, I plan to rename `WhiteState` as `NonGray`, as the current naming is misleading.",
      "parentUuid": "6414219f_99718b25",
      "range": {
        "startLine": 2618,
        "startChar": 8,
        "endLine": 2619,
        "endChar": 63
      },
      "revId": "351df52b2f534673f64b61d01063ee56e557a8d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6255e772_f11a4391",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 1
      },
      "lineNbr": 2619,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-06-26T19:13:25Z",
      "side": 1,
      "message": "Considering that it\u0027s a 1-bit field, the DCHECK will always succeed. Isn\u0027t it?\n\nI agree on renaming \"WhiteState\" as \"NonGrayState\".",
      "parentUuid": "e2d4adc5_ffe433a0",
      "range": {
        "startLine": 2618,
        "startChar": 8,
        "endLine": 2619,
        "endChar": 63
      },
      "revId": "351df52b2f534673f64b61d01063ee56e557a8d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96f1c536_691b4165",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 1
      },
      "lineNbr": 2619,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-06-28T14:29:20Z",
      "side": 1,
      "message": "\u003e Considering that it\u0027s a 1-bit field, the DCHECK will always succeed. Isn\u0027t it?\n\nYes, I agree this assertion should normally always succeed. Also note that `art::mirror::Object::GetReadBarrierState` includes a check on the validity of the read barrier state:\n\n  inline uint32_t Object::GetReadBarrierState() {\n    if (!kUseBakerReadBarrier) {\n      LOG(FATAL) \u003c\u003c \"Unreachable\";\n      UNREACHABLE();\n    }\n    DCHECK(kUseBakerReadBarrier);\n    LockWord lw(GetField\u003cuint32_t, /*kIsVolatile*/false\u003e(MonitorOffset()));\n    uint32_t rb_state \u003d lw.ReadBarrierState();\n    DCHECK(ReadBarrier::IsValidReadBarrierState(rb_state)) \u003c\u003c rb_state;\n    return rb_state;\n  }\n\nThis makes b/110812755 a bit puzzling.\n\nI wonder if race in the original code was possible, in the case where the read barrier state were to change from white to gray between\n\n  ref-\u003eGetReadBarrierState() \u003d\u003d ReadBarrier::GrayState()\n\nand\n\n  ref-\u003eGetReadBarrierState() \u003d\u003d ReadBarrier::WhiteState()\n\n?\n\nI\u0027ll remove the assertion in the next patch set, as I think it no longer makes sense.\n\n\u003e I agree on renaming \"WhiteState\" as \"NonGrayState\".\n\nDone in https://android-review.googlesource.com/c/platform/art/+/710874.",
      "parentUuid": "6255e772_f11a4391",
      "range": {
        "startLine": 2618,
        "startChar": 8,
        "endLine": 2619,
        "endChar": 63
      },
      "revId": "351df52b2f534673f64b61d01063ee56e557a8d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59322190_ec33769b",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 1
      },
      "lineNbr": 2619,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-06-28T14:42:15Z",
      "side": 1,
      "message": "\u003e I\u0027ll remove the assertion in the next patch set, as I think it no longer makes sense.\n\nDone in PS2.",
      "parentUuid": "96f1c536_691b4165",
      "range": {
        "startLine": 2618,
        "startChar": 8,
        "endLine": 2619,
        "endChar": 63
      },
      "revId": "351df52b2f534673f64b61d01063ee56e557a8d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}