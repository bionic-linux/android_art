{
  "comments": [
    {
      "key": {
        "uuid": "7a004283_c2845f18",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-09T17:34:10Z",
      "side": 1,
      "message": "Nicolas, can you comment regarding the sound-ness of this assertion? I don\u0027t quite understand the invariants here so I think I may have been overly conservative.",
      "revId": "79d8fa7c52c1810d4618c9bd1d43994be5abb53d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dc04c3e_6e1407cb",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-09T17:43:07Z",
      "side": 1,
      "message": "\"But not for finals\": Can you give an example where you would get a ConstructorFence for finals but not for new-instance?",
      "parentUuid": "7a004283_c2845f18",
      "revId": "79d8fa7c52c1810d4618c9bd1d43994be5abb53d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1acf0737_69d5a4a9",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-09T18:01:29Z",
      "side": 1,
      "message": "HInstructionBuilder::BuildReturn . If it does make an HConstructorFence there, it\u0027s always because there were finals in that [inlined] method.\n\n------------\n\nSo as I recall, previously code_sinking did not sink HMemoryBarrier::kStoreStore, but it did sink HNewInstance.\n\nIn my newer scheme HNewInstance+HConstructorFence \u003d\u003d old HNewInstance. My HConstructorFence-for-return is \u003d\u003d HMemoryBarrier::kStoreStore\n\nI believe I simply mimicked the logic of old (whatever was moved before would still move, but whatever wasn\u0027t moved before wouldn\u0027t move).\n\n------------\n\nI\u0027m not sure if that\u0027s still right, it seems overly strict. In particular IIUC if you sink\n\n  x \u003d HNewInstance\n\nThat means it also *must have* sunk all \"uses\" (especially the publishes) of x?\n\nso it should also be safe to sink\n\n  HConstructorFence(x)\n\nas the ordering w.r.t. to the publish(x) should not change.\n\n--------------------\n\nIn other words we want to maintain this invariant:\n\n\n * Given any publish(x) and hconstructorfence(x), the hconstructorfence(x) must dominate the publish after the sink if it dominated it before the sink.",
      "parentUuid": "4dc04c3e_6e1407cb",
      "revId": "79d8fa7c52c1810d4618c9bd1d43994be5abb53d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c172644b_b082c2d2",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-09T18:06:55Z",
      "side": 1,
      "message": "So I can just change this code to:\n\n   if (instruction-\u003eIsConstructorFence()) {\n      return true;\n   }\n\nand it would still be correct?",
      "parentUuid": "1acf0737_69d5a4a9",
      "revId": "79d8fa7c52c1810d4618c9bd1d43994be5abb53d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}