{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b92ef875_710e7e25",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-02-27T16:33:24Z",
      "side": 1,
      "message": "@kiyoungkim@google.com, @jooyung@google.com, PTAL at the test failure in b/326631342. The test app had this dex path list:\n\n```\n/system/framework/android.test.mock.jar:\n/system/framework/android.test.base.jar:\n/system_ext/framework/androidx.window.sidecar.jar:\n/system_ext/framework/androidx.window.extensions.jar:\n/system/framework/android.test.runner.jar:\n/data/app/~~hHMsZfcdMUoReJkQ68xEwA\u003d\u003d/com.android.imsserviceentitlement.tests-TXpv1KESuoVr6LWWRN7ipQ\u003d\u003d/base.apk:\n/product/priv-app/ImsServiceEntitlement/ImsServiceEntitlement.apk\n```\n\nThe [old code](https://cs.android.com/android/_/android/platform/art/+/6a181d347d4aef6d4cd149c262204e668c2895a2:libnativeloader/library_namespaces.cpp;l\u003d110-123;drc\u003d760e495e79c03ce9c748a93ff42e6e3dd00bfc05) would classify a package with that path as APK_ORIGIN_PRODUCT, but to me it looks like the test app is installed in /data and just lists some shared jars in other partitions. Shouldn\u0027t it always be loaded with APK_ORIGIN_DEFAULT (now API_DOMAIN_DEFAULT)?",
      "range": {
        "startLine": 13,
        "startChar": 46,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "e1b6547e8ee9241e5b032d84a73b24b3c2bdc0e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fd96620_e6a22b37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1413436
      },
      "writtenOn": "2024-02-28T10:08:40Z",
      "side": 1,
      "message": "First of all I don\u0027t understand how dex path list from the comment can cause `Path list crosses partition boundaries`, because in theory app domain should stay default until it hits `/product/priv-app`. API_DOMAIN_DEFAULT -\u003e API_DOMAIN_PRODUCT should not cause an error.\n\nThe example is probably originally bundled in product, and update of the app installed in /data, and I think this case fits with API_DOMAIN_PRODUCT, but I prefer @justinyun to answer this case.",
      "parentUuid": "b92ef875_710e7e25",
      "range": {
        "startLine": 13,
        "startChar": 46,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "e1b6547e8ee9241e5b032d84a73b24b3c2bdc0e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ebcfe3_142cae86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-02-28T21:57:12Z",
      "side": 1,
      "message": "It\u0027s together with https://r.android.com/2933611 that added system as a separate API domain.\n\n\u003e The example is probably originally bundled in product,\n\nNo, it\u0027s a test app installed in /data, but it instruments an app in /product/priv-app.\n\n\u003e and update of the app installed in /data\n\nThat\u0027s interesting. If a product app gets an update on /data (through Play(?)), it keeps full access to the product libraries? (That\u0027d put fairly specific demands on the targeting when it\u0027s updated, but for all I know it may be a solved problem.) If so, how do we detect that? Would the dex path for the updated app always contain a /product path in that case? The updated app would presumably not have the old app in its dex path (unlike the instrumentation case above).\n\nFrankly I wasn\u0027t aware that the dex path would include the paths to (at least) system shared jars like that. Makes me wonder if they get their own classloaders, and if system is treated differently from other partitions in that regard.",
      "parentUuid": "0fd96620_e6a22b37",
      "range": {
        "startLine": 13,
        "startChar": 46,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "e1b6547e8ee9241e5b032d84a73b24b3c2bdc0e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9f32935_7a274614",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-02-29T06:24:33Z",
      "side": 1,
      "message": "I think `API_DOMAIN_DEFAULT` is the SYSTEM domain and that provides framework APIs to non-system partitions. That\u0027s why `API_DOMAIN_DEFAULT` is allowed to the other domains.\nIf we have an independent domain for system, that does not allow non-system apps use the libs loaded from bootclasspath, does it?",
      "parentUuid": "58ebcfe3_142cae86",
      "range": {
        "startLine": 13,
        "startChar": 46,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "e1b6547e8ee9241e5b032d84a73b24b3c2bdc0e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc37b3e3_ebecca42",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-08T19:50:41Z",
      "side": 1,
      "message": "So the system domain should be in `API_DOMAIN_DEFAULT` because it provides APIs to other domains? Then does that mean that vendor and product domains don\u0027t? I thought they could.\n\nIn https://r.android.com/2933611 I wanted to use `GetApiDomainFromPath` (formerly `GetApkOriginFromDexPath`) to identify what access a jar or apk should have depending on its location. However the `dex_path` passed to `CreateClassLoaderNamespace` doesn\u0027t seem to work for that - judging from the example above it contains paths to both the app apk and any shared java libs the classloader needs, regardless of partition.\n\nThat means that for an app to be considered a vendor or product apk, it only needs to depend on a shared lib in either of those partitions, while the app itself can be anywhere (except in the other partition). Iow, any downloaded app in /data can purport to be a vendor or product app just by the shared libs it depends on. Is that WAI?\n\n(System apps seems to be handled completely differently - for them it\u0027s the `is_shared` flag (`isBundledApp` in [LoadedApk.java](https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/core/java/android/app/LoadedApk.java;l\u003d885;drc\u003dcc6a187eebd95e4c44e1571a3d2584d0160b01a5)) that gives them full access to system libs.)",
      "parentUuid": "e9f32935_7a274614",
      "range": {
        "startLine": 13,
        "startChar": 46,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "e1b6547e8ee9241e5b032d84a73b24b3c2bdc0e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4eea4f3_89f1383d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-11T21:33:50Z",
      "side": 1,
      "message": "Instead of landing this CL I\u0027m changing the behaviour to remain compatible in `CreateClassLoaderNamespace` in https://r.android.com/c/2977712/3, i.e. treat system paths like data and only error out if paths in both vendor and product partitions are present.\n\nI\u0027d still like to understand how this is intended to work though, so PTAL at the questions above.",
      "parentUuid": "dc37b3e3_ebecca42",
      "range": {
        "startLine": 13,
        "startChar": 46,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "e1b6547e8ee9241e5b032d84a73b24b3c2bdc0e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "166d0488_a82e113e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-03-12T04:46:02Z",
      "side": 1,
      "message": "Sorry for the late update.\n\n\u003e Iow, any downloaded app in /data can purport to be a vendor or product app just by the shared libs it depends on. Is that WAI?\n\nI don\u0027t know the location of the reference code, but AFAIK, the upgradable apps act as vendor or product apps only if the original app is installed in that partition on device launch.\n\n\u003e I\u0027d still like to understand how this is intended to work though, so PTAL at the questions above.\n\nI vaguely thought \u0027system\u0027 is default and accessible from any apps because the system partition provides common libraries (such as NDK) to all other partitions.\n\u0027unbundled\u0027 in this context means the apps are using only stable interfaces. That does not mean no dependencies on system partition.",
      "parentUuid": "c4eea4f3_89f1383d",
      "range": {
        "startLine": 13,
        "startChar": 46,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "e1b6547e8ee9241e5b032d84a73b24b3c2bdc0e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}