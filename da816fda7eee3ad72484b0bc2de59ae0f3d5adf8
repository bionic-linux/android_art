{
  "comments": [
    {
      "key": {
        "uuid": "23b8f2d3_59c42391",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "to",
      "range": {
        "startLine": 199,
        "startChar": 63,
        "endLine": 199,
        "endChar": 64
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43b5e6d8_7ac9d9a5",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "missing \u0027.\u0027.",
      "range": {
        "startLine": 199,
        "startChar": 81,
        "endLine": 199,
        "endChar": 82
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43b5e6d8_fad40940",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "I could foresee some problems with inlining here. I think it\u0027s probably best if you just check the next phi? After all, we only add those equivalent phis next to each other.",
      "range": {
        "startLine": 203,
        "startChar": 4,
        "endLine": 203,
        "endChar": 34
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03af6e90_181b8575",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-31T23:44:17Z",
      "side": 1,
      "message": "I don\u0027t immediately see problems with inlining. \nAnd I\u0027m not sure that checking just the next one captures all the cases. I think we  could potentially have a non-ref equivalent in between?\n\nI will think more about it and adapt the code accordingly.",
      "parentUuid": "43b5e6d8_fad40940",
      "range": {
        "startLine": 203,
        "startChar": 4,
        "endLine": 203,
        "endChar": 34
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3a41acd_9fe19316",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-04-01T21:17:01Z",
      "side": 1,
      "message": "Yeah, maybe I\u0027m being too cautious: I was thinking of the same dex register number for two different methods. If two phis of different methods but with the same dex register number, end up in the same block, we would get into trouble.\n\nBut it remains to be seen if it can happen.\n\nAnd yes, you need to check all of them. So when iterating over the phis, you check the next one. If it\u0027s the same reg number, you check that they have different type, and continue until you find one that is not the same reg number.",
      "parentUuid": "03af6e90_181b8575",
      "range": {
        "startLine": 203,
        "startChar": 4,
        "endLine": 203,
        "endChar": 34
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43b5e6d8_3ae841f8",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "nit: new line?",
      "range": {
        "startLine": 198,
        "startChar": 24,
        "endLine": 198,
        "endChar": 67
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b8f2d3_f9d41740",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 202,
        "startChar": 32,
        "endLine": 202,
        "endChar": 76
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43b5e6d8_5addf55c",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 207,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "How about non-phi inputs? We also want them to be properly typed with null on the left/right side instead of 0.",
      "range": {
        "startLine": 207,
        "startChar": 8,
        "endLine": 207,
        "endChar": 16
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b8f2d3_99f6bbdc",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 207,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-31T23:44:17Z",
      "side": 1,
      "message": "good point. I\u0027ll add logic for that as well.",
      "parentUuid": "43b5e6d8_5addf55c",
      "range": {
        "startLine": 207,
        "startChar": 8,
        "endLine": 207,
        "endChar": 16
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b8f2d3_19e38b20",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "This has to be.",
      "range": {
        "startLine": 217,
        "startChar": 10,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03af6e90_18470581",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "Add a comment that is going over equivalent phis that are not reference (and therefore floating point).",
      "range": {
        "startLine": 215,
        "startChar": 6,
        "endLine": 221,
        "endChar": 7
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b8f2d3_39e84ff8",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "This has to be.",
      "range": {
        "startLine": 223,
        "startChar": 10,
        "endLine": 223,
        "endChar": 26
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b8f2d3_99cddbb4",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 274,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "equivalent phis (that is, having the same dex registers) with the same type.",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 69
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b8f2d3_b9ca9f97",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "leaves",
      "range": {
        "startLine": 275,
        "startChar": 5,
        "endLine": 275,
        "endChar": 10
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b8f2d3_d9d75342",
        "filename": "compiler/optimizing/ssa_builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-31T22:10:05Z",
      "side": 1,
      "message": "don -\u003e done.",
      "range": {
        "startLine": 276,
        "startChar": 21,
        "endLine": 276,
        "endChar": 24
      },
      "revId": "da816fda7eee3ad72484b0bc2de59ae0f3d5adf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}