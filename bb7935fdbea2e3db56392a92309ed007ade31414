{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e3600ef1_2b74a38a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "The tests in libunwindstack and simpleperf are relevant too.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 27
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ffabd09_767b6fe7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-12T11:55:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3600ef1_2b74a38a",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 27
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d36aa47a_f4c29065",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-10T15:49:05Z",
      "side": 1,
      "message": "Thanks for the review.  Couple quick replies.",
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fba3a2c_dfefe883",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "This overhead can be avoided by instead providing alternative functions to the ones that pass this struct, if it needs to be extended.",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 80
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "732cebea_3c5645de",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-12T11:55:27Z",
      "side": 1,
      "message": "Yes, we can add v2 definitions of the methods, but this would allow us to be less intrusive.\n\nIn particular, I think it would be nice to add filename and linenumber fields at some point.",
      "parentUuid": "7fba3a2c_dfefe883",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 80
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa61eb7_77811f68",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "These were intentionally signed: http://go/totw/159, http://go/cstyle#on_unsigned_integers",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 3
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e633353_49938050",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-10T15:49:05Z",
      "side": 1,
      "message": "I still seem to use unsigned heavily in ART.\nI suppose the question is which convention we follow? ART or Google?",
      "parentUuid": "6aa61eb7_77811f68",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 3
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daed249e_7bee2ef0",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-03-11T11:19:14Z",
      "side": 1,
      "message": "I strongly disagree with the TotW article and I would replace it with \"you SHOULD understand the difference between signed and unsigned types and use them carefully, otherwise you SHOULD NOT use C/C++ for production code.\" The only decent suggestion there is to \"try not to mix signedness\".",
      "parentUuid": "2e633353_49938050",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 3
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "605a7349_0984062a",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-12T11:55:27Z",
      "side": 1,
      "message": "I will go with Vladimir\u0027s decisive option.\nSign does not break the API regardless.",
      "parentUuid": "daed249e_7bee2ef0",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 3
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "853b001c_a807434f",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-15T15:32:21Z",
      "side": 1,
      "message": "Personally I\u0027m convinced by arguments - signed arithmetic has better behaviour as soon as any subtraction is done, even if negative results never _should_ occur.\n\nAs this is an external API, conventions in the ART sources aren\u0027t very significant, and I think it\u0027s good to avoid these unsigneds in an API we won\u0027t realistically be able to change (for this reason). I can agree on \"do not mix\" though, and at least short term it would mean mixing at least in libunwindstack. It\u0027s a pity to further entrench antipatterns in new APIs, but the situation isn\u0027t clear enough that I oppose this strongly.",
      "parentUuid": "daed249e_7bee2ef0",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 3
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4804661_f5fa3655",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "Clean up this too?",
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5771fe57_720ed0c3",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-10T15:49:05Z",
      "side": 1,
      "message": "For now it ensures I don\u0027t have to clean up users (i.e. create a topic)",
      "parentUuid": "d4804661_f5fa3655",
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa6f638c_3c715025",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "The implementation below is rather large; I think it\u0027s better off in dex_file_supp.cc.",
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2071eaac_834a7576",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-12T11:55:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa6f638c_3c715025",
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "073d962b_5a97bc57",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "Since the flag is changed to a bit field it should be passed through here so we can leverage the ability to add more flags.",
      "range": {
        "startLine": 158,
        "startChar": 56,
        "endLine": 158,
        "endChar": 75
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7343ea49_c72fc148",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "Should consider moving this and the following function to the cc file as well - they contain more code now than just the wrapped call they used to.",
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5a9c6c8_7bfbedd6",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-10T15:49:05Z",
      "side": 1,
      "message": "Ditto.  I wanted to keep this API to keep this CL as stand-alone.",
      "parentUuid": "073d962b_5a97bc57",
      "range": {
        "startLine": 158,
        "startChar": 56,
        "endLine": 158,
        "endChar": 75
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "944286b0_8b58d23f",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-12T11:55:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d5a9c6c8_7bfbedd6",
      "range": {
        "startLine": 158,
        "startChar": 56,
        "endLine": 158,
        "endChar": 75
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2002f41a_e6c57925",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-12T11:55:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7343ea49_c72fc148",
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3ab1bcb_8c962cb1",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "The idea with DexString was to delay/avoid this string copy. This change means an extra string copy per method name in the call sites at https://cs.android.com/android/platform/superproject/+/master:system/unwinding/libunwindstack/DexFile.cpp;l\u003d85;drc\u003db218a544dc29696103c38876b19de230c64b9fdd and https://cs.android.com/android/platform/superproject/+/master:system/extras/simpleperf/read_dex_file.cpp;l\u003d42;drc\u003dmaster. Is the reduced code complexity worth the performance cost?",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8f220bd_53da464e",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-10T15:49:05Z",
      "side": 1,
      "message": "Yeah, I wondered about the right way to pass the strings.  I tried various approaches, and concluded that the callback from the GetAllMethods is the way. I think you stumbled on the right answer almost by accident then :-)\n\nThere are no extra copies to current status quo. It is creating std::string here, but it allows to change the users to std::move, so same number of copies.\n\nFurthermore, one copy seems unavoidable. The temporary string in ART is used as builder, so likely overly big.  At least one copy (this one) is needed to create minimally sized string.\n\nFurthermore, having the API this way, does not lock us to ART side managing the memory.  The user can choose how to store the string (potentially more compactly then std::string).",
      "parentUuid": "e3ab1bcb_8c962cb1",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71beda44_539aa2ad",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-15T15:32:21Z",
      "side": 1,
      "message": "\u003e There are no extra copies to current status quo.\n\nYes there are:\n\n- At the call site in libunwindstack there\u0027s currently another copy, however it can be subsumed by this one with an std::move.\n\n- In simpleperf the MethodInfos are collected and passed upwards a couple of function levels, then the names are handed off as string_views to be copied by their own string allocator (https://cs.android.com/android/platform/superproject/+/master:system/extras/simpleperf/dso.cpp;l\u003d212;drc\u003dmaster). The only way to avoid an extra copy there is to either scrap that allocator and instead std::move this string into its place, or bypass the C++ API altogether.\n\nDexString is conceptually pretty simple - with string_views etc the caller has the choice to delay the free as much or little as they want. In a way it\u0027s a textbook example of the good and bad of C++: Good because C++ allows this and makes it safe, bad because of the annoying amount of boilerplate necessary to pull it off. I\u0027d much prefer if all the crap in the DexString class was hidden away in some header I don\u0027t have to see, well tested and maintained by someone else, so I can just instantiate some template to get an std::string lookalike with my own free function.\n\nBut now that I\u0027ve gone through the pain of implementing and testing it here I don\u0027t see that the benefit of deleting it outweighs the extra runtime cost and the various other drawbacks this leads to, like the less expressive errors.",
      "parentUuid": "c8f220bd_53da464e",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a460e50_2c1f818a",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-15T16:40:47Z",
      "side": 1,
      "message": "Before this CL there were 2 copies: One at ART side to create the DexString, and one in simpleperf / libunwind stack, because they both need to store the string their own way.\n\nAfter this CL there are sill 2 copies: One in the support file, and one in simpleperf / libunwindstack.\n\nThe difference is that after the CL the 2 copies can be reduced to 1.  (but adding std::move in libunwindstack, and by using the custom allocator sooner in simplerperf)\n\n\nSo this definitely does not make things worse, but the main point is that (pointer+size) is just simpler API.",
      "parentUuid": "71beda44_539aa2ad",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26147dec_c2c1607e",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-15T17:15:32Z",
      "side": 1,
      "message": "\u003e One at ART side to create the DexString\n\nThat would be unintentional. Where would it be in e.g. the following code path? https://cs.android.com/android/platform/superproject/+/master:art/libdexfile/external/dex_file_ext.cc;l\u003d354;drc\u003de778fa6ead79e9cb26810d484c5a594e9612de9b The intention is that the returned string from PrettyMethod is copy elided there.",
      "parentUuid": "4a460e50_2c1f818a",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a879700a_94a17030",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-15T17:26:19Z",
      "side": 1,
      "message": "Oh, I see.  I think I looked wrong before.  But if it is elided, it means the API is keeping around a string that is bigger than it needs to be (because it was used to build it), and there is extra alloc/free to just hold the pointer/size pair (which is more expensive in scudo).\n\nIt still seems easier to just pass (pointer+size) as C method arguments to the consumer, and let them to the storage in whatever way they want.",
      "parentUuid": "26147dec_c2c1607e",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7018d0b9_7afdbe93",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-15T19:05:13Z",
      "side": 1,
      "message": "\u003e keeping around a string that is bigger than it needs to be\n\nMaybe, it depends on how the caller intends to use the string:\n- If it\u0027s short lived the extra space isn\u0027t an issue and we save a copy.\n- If it\u0027s long lived and they want to use their own allocator then DexString and its string_view operator helps bridging the gap from GetMethodInfo to the allocator(*).\n- If it\u0027s long lived and they don\u0027t use an allocator then they can just do std::string() on it (like in libunwindstack).\n\n*) The code in simpleperf is a good example of this - without DexString there\u0027d be no option but to refactor ReadSymbolsFromDexFile(InMemory) quite a bit to make use of the allocator directly in a callback from GetAllMethodInfos. It\u0027d of course also require a variant of that method that lets the caller pass a callback in the C++ API, and that in turn means dealing with a C++ callable across the C API boundary. I did consider it, but it means either a runtime cost with an extra call indirection or a quirky C++ API. Wrapping the string to allow a delayed free seems overall simpler than that.\n\n\u003e there is extra alloc/free to just hold the pointer/size pair (which is more expensive in scudo)\n\nThere\u0027s that. It\u0027s a small fixed-size block which I\u0027d expect a modern allocator to handle reasonably efficiently. It\u0027s clearly better than a full string copy, and I believe better than a callback wrapper too. A bare C callback would shave that off, but then the code maintainability on the caller side suffers a lot.",
      "parentUuid": "a879700a_94a17030",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4658f933_0ebcb0f5",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-15T19:49:09Z",
      "side": 1,
      "message": "Yes, it all depends, and you can always just create final std::string() copy, or whatever you need.\n\nBut I don\u0027t think there is need to reinvent std::string if just simple (pointer + size) will do.\n\nAlloc/frees are definitely not cheap, and most of my work recently was eliminating them in libunwind, because they are performance bottleneck.  (TLDL; secure is more important then fast in scudo)\n\nMost of all I would prefer simpler api.  The fact that is faster for the intended use case in libunwind is a bonus, but not goal.",
      "parentUuid": "7018d0b9_7afdbe93",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b964011e_af9e6641",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T00:01:40Z",
      "side": 1,
      "message": "Why \"close\"? Imo \"free\" is better since it\u0027s not an fd or similar system resource.",
      "range": {
        "startLine": 198,
        "startChar": 28,
        "endLine": 198,
        "endChar": 33
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "138044c9_7908ef2e",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-10T15:49:05Z",
      "side": 1,
      "message": "Just a nit.  I wanted the pair to match. open/close.  new/free.  create/destroy. \n Any pair will do.",
      "parentUuid": "b964011e_af9e6641",
      "range": {
        "startLine": 198,
        "startChar": 28,
        "endLine": 198,
        "endChar": 33
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "834180b1_fcabb273",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-15T15:32:21Z",
      "side": 1,
      "message": "Fair point. I\u0027d prefer to drop the \"Open\" word in the function above instead, but this is fine.",
      "parentUuid": "138044c9_7908ef2e",
      "range": {
        "startLine": 198,
        "startChar": 28,
        "endLine": 198,
        "endChar": 33
      },
      "revId": "bb7935fdbea2e3db56392a92309ed007ade31414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}