{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e529995_f6adc509",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "This change regresses cases like https://godbolt.org/z/5M34W3dGo for Arm64 where GVN would have been able to eliminate the double Neg. After your change, we would have two neg+ror",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2874341b_5a533253",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-23T12:38:09Z",
      "side": 1,
      "message": "@solanes@google.com No. GVN is able to eliminate the double `Rol` as well. `GVN` relies on `HInstruction::Equals` which is defined for all instructions. I checked your test after this change and I got:\n```\nneg w16, w2\nror w0, w1, w16\nror w0, w1, w16\n```",
      "parentUuid": "6e529995_f6adc509",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "016ca4b2_c23ce1e2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-23T12:49:06Z",
      "side": 1,
      "message": "```\nneg w16, w2\nror w0, w1, w16\nadd w0, w0, w0\n```",
      "parentUuid": "2874341b_5a533253",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5061732_a3d2c1c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-23T13:27:16Z",
      "side": 1,
      "message": "Sorry the example was bad. This will have two neg https://godbolt.org/z/7c4zncPEP. My point was that we will have double `neg` in some cases since the compiler won\u0027t be able to optimize it.\n\nIf instead we change NEG+ROR to ROL it in instruction_simplifier_ARCH then we wouldn\u0027t have regressions I think.\n\nAlternatively, not sure if it would be worth it to do the opposite in instruction_simplifier_ARCH and turn ROL into NEG+ROR for archs that do not have `rol`",
      "parentUuid": "016ca4b2_c23ce1e2",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5501a3c3_b18f2d59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5061732_a3d2c1c3",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81a519de_27051a4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-28T08:46:08Z",
      "side": 1,
      "message": "Can you add this as a test to make sure we don\u0027t create two HNeg?",
      "parentUuid": "5501a3c3_b18f2d59",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 23
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "791ec3df_6f5fa250",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-21T15:16:53Z",
      "side": 1,
      "message": "@solanes@google.com @vmarko@google.com please take a look",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e75e7d7a_2e2043d7",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2332,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "Style: Keep one per line. Same in `HandleShift` below",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a37b057_e5222db5",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2332,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-23T13:07:36Z",
      "side": 1,
      "message": "The formatting hook did it. Ok, I\u0027ll fix it.",
      "parentUuid": "e75e7d7a_2e2043d7",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1704054_f2afe036",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2332,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a37b057_e5222db5",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b755f19_dbe75196",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5130,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "else + DCHECK?",
      "range": {
        "startLine": 5128,
        "startChar": 0,
        "endLine": 5130,
        "endChar": 26
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea7602d0_71d04766",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5130,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b755f19_dbe75196",
      "range": {
        "startLine": 5128,
        "startChar": 0,
        "endLine": 5130,
        "endChar": 26
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b607b26d_8c44d4bd",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5134,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "why not require ECX like Ror does?",
      "range": {
        "startLine": 5131,
        "startChar": 0,
        "endLine": 5134,
        "endChar": 26
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20895d0d_030b2a4e",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 5134,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-23T13:34:31Z",
      "side": 1,
      "message": "We need to save second register for further uses:\n```\nint dist \u003d GetDistance();\nint res1 \u003d Integer.rotateLeft(a, dist);\nint res2 \u003d Integer.rotateLeft(b, dist);\n```",
      "parentUuid": "b607b26d_8c44d4bd",
      "range": {
        "startLine": 5131,
        "startChar": 0,
        "endLine": 5134,
        "endChar": 26
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcba05b5_69e04700",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 5060,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "style: move this to line 5112 to be closer to the other definitions",
      "range": {
        "startLine": 5058,
        "startChar": 0,
        "endLine": 5060,
        "endChar": 1
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37c3f501_b375cdb0",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 1
      },
      "lineNbr": 5060,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcba05b5_69e04700",
      "range": {
        "startLine": 5058,
        "startChar": 0,
        "endLine": 5060,
        "endChar": 1
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a2954a_62f48ce8",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "Let\u0027s just keep the `$noinline$` ones. I don\u0027t see a reason why we need both.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86a0935b_1eb9e581",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-22T16:35:29Z",
      "side": 1,
      "message": "The `$noinline` tests check the code generation of this intrinsic but the inlined tests check the compile-time `Evaluate`ations (constant folding computes the result).\n\nConstants (instead of parameters) come to `Rol` (which is a `BinaryOperation`) after `Inliner`.\n\nThat\u0027s why I have added such tests.",
      "parentUuid": "b1a2954a_62f48ce8",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea66a1f5_4c20d7d3",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-23T08:04:29Z",
      "side": 1,
      "message": "If that\u0027s the intention, please use `$inline$` in the other ones and add a comment explaining why we want both cases. Without the `$inline$`, we might not inline those and we wouldn\u0027t be testing what you want to test.",
      "parentUuid": "86a0935b_1eb9e581",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6798d429_837596cc",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea66a1f5_4c20d7d3",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c560d70_736ba721",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "Can you add the RISC-V one with `rol`?",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 85,
        "endChar": 71
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e599aaac_04478f77",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c560d70_736ba721",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 85,
        "endChar": 71
      },
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6bd4dbd_87f419e0",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "Line too long",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9918587b_fd6efa06",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-22T16:35:29Z",
      "side": 1,
      "message": "Ok, I\u0027ll fix. What is the limit for the tests written in Java?",
      "parentUuid": "c6bd4dbd_87f419e0",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6472d948_f6f304bd",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-23T08:04:29Z",
      "side": 1,
      "message": "100 chars. You can see the word wrapping in the gerrit UI",
      "parentUuid": "9918587b_fd6efa06",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd88c3c1_4097ec2d",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6472d948_f6f304bd",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50afd44b_2482b089",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 636,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-08-22T13:47:10Z",
      "side": 1,
      "message": "line too long",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf8fb379_ca62ab72",
        "filename": "test/567-checker-builder-intrinsics/src/TestRotate.java",
        "patchSetId": 1
      },
      "lineNbr": 636,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-08-27T21:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50afd44b_2482b089",
      "revId": "2a22689ebb47a2252dc8cd178fa9e99ec9afe720",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}