{
  "comments": [
    {
      "key": {
        "uuid": "bc842acd_423f120c",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-03-15T18:50:23Z",
      "side": 1,
      "message": "I would use a non-atomic field.  Unlike in C++, I think these are intended to work with ordinary accesses as the communication variable.\n\nThat\u0027s especially true since I believe we implement weakCompareAndSet as CompareAndSet, which we should probably stop doing.  Maybe after looking at all of our clients.  Atomic get() will also ensure ordering.\n\nThe probability of this failing with a broken implementation is still likely to be very small.  Another way to test is to have one thread increment x, then increment y, in a tight loop, with a fence in between, ensuring x \u003e\u003d y. Another thread reads y then x, again with a fence in between.  It should always see x \u003e\u003d y.  But even that seems to fail rarely in practice without fences.",
      "range": {
        "startLine": 253,
        "startChar": 10,
        "endLine": 253,
        "endChar": 23
      },
      "revId": "8ad142feb0ae5bb59cb1f4ceff181d32d4faaa66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc842acd_426ab2ee",
        "filename": "test/004-checker-UnsafeTest18/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-03-15T18:55:22Z",
      "side": 1,
      "message": "Should be relying on the implementation of AtomicBoolean for the Unsafe unit test? Why not test the Unsafe methods directly?\n\nLooking at the current implementation of AtomicBoolean it\u0027s not using any of the new 1.8 methods yet, am I looking in the wrong place?",
      "parentUuid": "bc842acd_423f120c",
      "range": {
        "startLine": 253,
        "startChar": 10,
        "endLine": 253,
        "endChar": 23
      },
      "revId": "8ad142feb0ae5bb59cb1f4ceff181d32d4faaa66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}