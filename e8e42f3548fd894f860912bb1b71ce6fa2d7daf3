{
  "comments": [
    {
      "key": {
        "uuid": "1ccfcd73_e1f1c6e4",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2015-03-10T15:12:23Z",
      "side": 0,
      "message": "why isn\u0027t this a functional change?",
      "range": {
        "startLine": 293,
        "startChar": 6,
        "endLine": 293,
        "endChar": 59
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcf161a4_91ff7eaa",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-10T15:19:20Z",
      "side": 0,
      "message": "Because the passed throw_location isn\u0027t used later in the call stack.",
      "parentUuid": "1ccfcd73_e1f1c6e4",
      "range": {
        "startLine": 293,
        "startChar": 6,
        "endLine": 293,
        "endChar": 59
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ce9a9ce_bc2601e6",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2015-03-10T16:02:54Z",
      "side": 0,
      "message": "That\u0027s irrelevant, this throw location is not the same as the current method. Having the code now use the current method elsewhere on the call stack is a functional change, no? I can believe that there are bugs in this code, but it looks now that unboxed exception throwing will not report that the unboxing failure happened in the called proxy method but in the caller as determined by the current method.\nFwiw, the throw location existed to match JDWP APIs that may not yet have been implemented. It seems this change may need reversing were those to be implemented. I\u0027m sure Seb has a fuller picture. The trick with the throw location was making sure it was robust for GC.",
      "parentUuid": "bcf161a4_91ff7eaa",
      "range": {
        "startLine": 293,
        "startChar": 6,
        "endLine": 293,
        "endChar": 59
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ce4e5f6_9b294bbb",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-10T16:05:41Z",
      "side": 0,
      "message": "Ian, the functional change is here: \nhttps://android-review.googlesource.com/#/c/139210/.\n\nThis change is just about removing the code leading to creating a ThrowLocation that is now unused.\n\nI filed a bug for this. I\u0027m sure if the test shows we\u0027re not behaving properly, we can workaround it without requiring a ThrowLocation for all the other places.",
      "parentUuid": "7ce9a9ce_bc2601e6",
      "range": {
        "startLine": 293,
        "startChar": 6,
        "endLine": 293,
        "endChar": 59
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcb1b5f2_d7dabc64",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2015-03-10T16:18:49Z",
      "side": 0,
      "message": "Agreed, it appears there is a lack of testing in the debugging and instrumentation with interaction with JDWP - is ART_TEST_TRACING being run (this covers the proxy tests) ? As I recall, the JDWP APIs allow you to do method and this object filtering. How can you retrieve a this object when the activation holding it has been removed? Stashing in the debugger is problematic due to differentiating re-throws from going up the call stack. That was the motivation for having the API, but the instrumentation link appears not to be present at least in this change. In this case we\u0027re severely faking the throw location in terms of the receiver object and the throwing method. As you say, if all the tests pass then everything must be good and I\u0027m sure Seb is on top of the filtering implementation.",
      "parentUuid": "5ce4e5f6_9b294bbb",
      "range": {
        "startLine": 293,
        "startChar": 6,
        "endLine": 293,
        "endChar": 59
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcc88176_56c79492",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-03-10T16:29:36Z",
      "side": 0,
      "message": "I added extra JDWP tests for the throw location (including throwing from native). As you said, The \u0027this\u0027 object is for Instance filtering. I can add extra tests there too to ensure we report the object properly.\n\nI believe the proxy invoke change can be tested with a run-test by checking the 1st element in the stack trace of the exception references the proxy method, not the caller.",
      "parentUuid": "dcb1b5f2_d7dabc64",
      "range": {
        "startLine": 293,
        "startChar": 6,
        "endLine": 293,
        "endChar": 59
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fca3d9b0_b05378f0",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2015-03-10T17:20:42Z",
      "side": 0,
      "message": "Thanks Seb. I guess we\u0027d not done things this way previously as the intent was to make the instrumentation the source of information for the debugger, profilers, etc. and to avoid reach-back into the runtime for things like the this object - which are difficult to maintain and need to be GC roots. Thinking about the tracing tests, they only test that tracing doesn\u0027t crash, the JDWP tests are the only ones that cover expectations of behavior and of those they are generally short, not covering interesting cases in the VM like proxying, and only enabled in the case that a test is expected to pass. Perhaps the run tests can be harnessed to say single step with JDWP and some how compared with a golden behavior. The issue there is how to avoid making something that\u0027s brittle. And with all this said, there is nothing in the implementation as is that leads me to believe the throw location needs to be reported as coded here, my point was more that the move away from throw locations implies functional changes (which Nicolas rightly points out were done in previous CLs) but the value intended to be reported here is significantly different than the current location.",
      "parentUuid": "bcc88176_56c79492",
      "range": {
        "startLine": 293,
        "startChar": 6,
        "endLine": 293,
        "endChar": 59
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ccfcd73_611936ac",
        "filename": "runtime/runtime.cc",
        "patchSetId": 3
      },
      "lineNbr": 1019,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2015-03-10T15:12:23Z",
      "side": 0,
      "message": "why isn\u0027t this a functional change?",
      "range": {
        "startLine": 1019,
        "startChar": 26,
        "endLine": 1019,
        "endChar": 42
      },
      "revId": "e8e42f3548fd894f860912bb1b71ce6fa2d7daf3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}