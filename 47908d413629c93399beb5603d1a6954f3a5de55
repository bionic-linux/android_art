{
  "comments": [
    {
      "key": {
        "uuid": "2ad60c0d_6f767d81",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 3
      },
      "lineNbr": 884,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-04T21:25:00Z",
      "side": 1,
      "message": "Where is it guaranteeing the alignment (does it need to?) is 8 bytes?",
      "revId": "47908d413629c93399beb5603d1a6954f3a5de55",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6acc847d_bc2c414b",
        "filename": "runtime/length_prefixed_array.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-04T21:25:00Z",
      "side": 1,
      "message": "Not sure if this is always guaranteed to align data to 8 bytes.  It is fairly common for larger data to be aligned to smaller boundaries when the native word size is smaller than the data size.\n\nTo ensure this, alignas(sizeof(uint64_t)) on the next line and add a static_assert to be extra sure \n\n  static_assert(alignof(LengthPrefixedArray\u003cspecific type\u003e) \u003e\u003d 8, \"msg\")\n\nNot sure how much this will matter \"in practice\" since this object can\u0027t be reasonably allocated directly anyway to due to flexible array.",
      "revId": "47908d413629c93399beb5603d1a6954f3a5de55",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca157084_ffc5df31",
        "filename": "runtime/length_prefixed_array.h",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-04T21:25:00Z",
      "side": 1,
      "message": "nit: this could just go into the LengthPrefixedArray as a static function",
      "revId": "47908d413629c93399beb5603d1a6954f3a5de55",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}