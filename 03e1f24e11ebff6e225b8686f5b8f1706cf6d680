{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bf328946_e6af913c",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 6682,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-10-11T15:53:41Z",
      "side": 1,
      "message": "There\u0027s no way to turn off this warning for static asserts? I\u0027m inclined to think these cases are false positives.",
      "range": {
        "startLine": 6682,
        "startChar": 9,
        "endLine": 6682,
        "endChar": 61
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70d176a1_faa336f3",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 6682,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2023-10-11T16:26:26Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s a way to switch off the warning for static asserts; I think the warning is pointing out that, after the macro substitution, the assertion is basically equivalent to `-8 \u003d\u003d -8` which is redundant - the other option would be to remove the static_assert entirely, but personally I\u0027d be more in favour of keeping it and silencing the warning.",
      "parentUuid": "bf328946_e6af913c",
      "range": {
        "startLine": 6682,
        "startChar": 9,
        "endLine": 6682,
        "endChar": 61
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66691482_85f0c23b",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 6682,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-10-11T17:20:53Z",
      "side": 1,
      "message": "One could say that any expression that is evaluable at compile time is \"redundant\", but it\u0027s a given that that\u0027s the case in a `static_assert`. I suppose it wouldn\u0027t warn if the macro was a constexpr identifier instead so it didn\u0027t look like a literal to the compiler, but cpp macro constants are after all very common, so I think it\u0027s a bit disappointing that it doesn\u0027t let it pass in this context.\n\nI\u0027m not sure this warning is a net win. There are less false positives from it than I thought it\u0027d be, but are the true positives valuable? At runtime they\u0027d be optimised away by any half decent compiler, so the question is if they bring out unintentional cases that could point at mistakes. The only two cases in this CL are the zero size comparisons in oatdump.cc and nterp.cc, and while they do seem a bit unnecessary they both look benign to me, possibly even intentional to make things extra clear.\n\nI suggest getting input from people in performance team if they see value in this or not.",
      "parentUuid": "70d176a1_faa336f3",
      "range": {
        "startLine": 6682,
        "startChar": 9,
        "endLine": 6682,
        "endChar": 61
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18c9ddc9_58197f65",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 6682,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2023-10-13T09:10:02Z",
      "side": 1,
      "message": "You make a good point: going through the changes again I\u0027ve realised there are way more instances in which I\u0027m silencing the warning compared to the ones where the warning has pointed out some potential misbehaviours - so I\u0027m starting to think it might be better to abandon this change entirely and just add \"misc-redundnant-expression\" to the `art_clang_tidy_disabled` list in `build/Android.bp`, what do you think?",
      "parentUuid": "66691482_85f0c23b",
      "range": {
        "startLine": 6682,
        "startChar": 9,
        "endLine": 6682,
        "endChar": 61
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdf03dc5_dd69447a",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 6682,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-10-13T10:45:59Z",
      "side": 1,
      "message": "That\u0027s my opinion, but I can\u0027t speak for everyone that\u0027s affected (in particular the performance team folks). Maybe ask that question in the ART Team chat, mention this CL, and see if anyone takes an interest?",
      "parentUuid": "18c9ddc9_58197f65",
      "range": {
        "startLine": 6682,
        "startChar": 9,
        "endLine": 6682,
        "endChar": 61
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25ebb0f0_517b1749",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 6682,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2023-10-25T10:13:56Z",
      "side": 1,
      "message": "\u003e the other option would be to remove the static_assert entirely\n\nPlease keep the static assertions â€“ they are here to make sure the generated code matches the hand-written assembly code.\n\nOne way to address these warnings would be to introduce new constants to replace these literals (see e.g. https://cs.android.com/android/platform/superproject/main/+/main:art/runtime/gc/collector_type.h;l\u003d69-79;drc\u003d4646fc66fc85b97a03eb76819bb367181a306ca2), and use them instead of macros in static assertions. (I\u0027d suggest doing this refactoring in a separate CL.)",
      "parentUuid": "bdf03dc5_dd69447a",
      "range": {
        "startLine": 6682,
        "startChar": 9,
        "endLine": 6682,
        "endChar": 61
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6594972_21ac5abc",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 6682,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-25T13:04:25Z",
      "side": 1,
      "message": "I personally don\u0027t see much value in this check and I agree with what Martin said above. But feel free to ask other members.",
      "parentUuid": "25ebb0f0_517b1749",
      "range": {
        "startLine": 6682,
        "startChar": 9,
        "endLine": 6682,
        "endChar": 61
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "851ad5f3_fdb5cdc3",
        "filename": "tools/jvmti-agents/jit-load/jitload.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-10-11T15:53:41Z",
      "side": 1,
      "message": "Doesn\u0027t this create repeated evaluation?",
      "range": {
        "startLine": 34,
        "startChar": 10,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dfee7c8_2c19345a",
        "filename": "tools/jvmti-agents/jit-load/jitload.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2023-10-11T16:26:26Z",
      "side": 1,
      "message": "Ah you\u0027re right, I hadn\u0027t considered that, and it\u0027s probably the reason why the original code introduced the redundant `auto vc \u003d (c);` line - would it be better to revert this change and silence the warning, what do you think?",
      "parentUuid": "851ad5f3_fdb5cdc3",
      "range": {
        "startLine": 34,
        "startChar": 10,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f0473f_96c7eea9",
        "filename": "tools/jvmti-agents/jit-load/jitload.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-10-11T17:20:53Z",
      "side": 1,
      "message": "Definitely. Making sure expressions passed to macros are evaluated only once is standard hygiene.\n\nHow come this change makes a difference? What\u0027s `c` in this case?\n\nAnd do NOLINT directives work inside macros?",
      "parentUuid": "0dfee7c8_2c19345a",
      "range": {
        "startLine": 34,
        "startChar": 10,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02c268b1_c3a6bb72",
        "filename": "tools/jvmti-agents/jit-load/jitload.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2023-10-13T09:10:02Z",
      "side": 1,
      "message": "I have found a way to make clang-tidy ignore the warning through `NOLINTBEGIN` and `NOLINTEND`, but it might have been a Phyrric victory for the reason stated in the comment above.",
      "parentUuid": "73f0473f_96c7eea9",
      "range": {
        "startLine": 34,
        "startChar": 10,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdf40512_738b8791",
        "filename": "tools/jvmti-agents/jit-load/jitload.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-10-13T10:45:59Z",
      "side": 1,
      "message": "Possibly, but I got curious. Does it work with those directives inside the macro definition here, or do you have to put them where the macro is used?\n\nBtw, regarding the macro hygiene, I think a lint warning for exactly this sort of double expansion would be very useful, but the linter needs to be aware of the preprocessor step then, which I suppose it isn\u0027t?",
      "parentUuid": "02c268b1_c3a6bb72",
      "range": {
        "startLine": 34,
        "startChar": 10,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e70fd6c_49e17675",
        "filename": "tools/jvmti-agents/jit-load/jitload.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2023-10-25T08:53:27Z",
      "side": 1,
      "message": "I managed to make it work within the macro itself, like this:\n\n```\n#define CHECK_CALL_SUCCESS(c) \\\n  /* NOLINTBEGIN */ \\\n  do { \\\n    auto vc \u003d (c); \\\n    CHECK(vc \u003d\u003d JNI_OK || vc \u003d\u003d JVMTI_ERROR_NONE) \u003c\u003c \"call \" \u003c\u003c #c \u003c\u003c \" did not succeed\\n\"; \\\n  } while (false) \\\n  /* NOLINTEND */\n\n```\n\nFor the second part of your question, I _think_ you have in mind something similar to the `bugprone-macro-repeated-side-effects` check: https://clang.llvm.org/extra/clang-tidy/checks/bugprone/macro-repeated-side-effects.html",
      "parentUuid": "cdf40512_738b8791",
      "range": {
        "startLine": 34,
        "startChar": 10,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5581995_b126a1ac",
        "filename": "tools/jvmti-agents/jit-load/jitload.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-10-25T12:05:43Z",
      "side": 1,
      "message": "\u003e I think you have in mind something similar to the bugprone-macro-repeated-side-effects check\n\nYes, sounds like it. Nice. I\u0027d be in favour of enabling that check.",
      "parentUuid": "8e70fd6c_49e17675",
      "range": {
        "startLine": 34,
        "startChar": 10,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "03e1f24e11ebff6e225b8686f5b8f1706cf6d680",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}