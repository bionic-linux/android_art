{
  "comments": [
    {
      "key": {
        "uuid": "4ec7bdd5_a5ae3e27",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 971,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-13T14:32:35Z",
      "side": 1,
      "message": "Load() should be similar and call MaybeRecordImplicitNullCheck(instruction, dex_pc) before returning.\n\nCurrently we use Load() for:\n\nVisitArrayGet()\nVisitInstanceFieldGet()\nVisitStaticFieldGet()\n\nI think all of them should have a MaybeRecordImplicitNullCheck() that can be neatly hidden in Load(), LoadAcquire().",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ec7bdd5_c5941ad1",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 972,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-13T14:45:50Z",
      "side": 1,
      "message": "so ArrayGet shouldn\u0027t need anything. The check happens in ArrayLength which will always precede the Get/Set. Or can you think about a case where that\u0027s not true?\n\nSo I preferred to record the implicit null check after we call Load().\n\nYou are right though that I forgot to add the record for the static fields! Thanks! I will also add tests for that.",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce800d7c_41b4b250",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 972,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-13T15:05:59Z",
      "side": 1,
      "message": "I was hasty and didn\u0027t think the last part of the comment through. For static access we don\u0027t need to record the implicit null check as we can\u0027t throw.\n\nI will add some extra checks to not record the pc if we are on a static path.",
      "parentUuid": "4ec7bdd5_c5941ad1",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ec145c3_c319b621",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 972,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-13T15:58:32Z",
      "side": 1,
      "message": "I see...\n\nCould there be a case where BoundCheckElimination removes the HBoundsCheck() associated with an array access and DeadCodeElimination removes the HArrayLength()  since it has no uses?\n\nI assume that by this point we would have already caught a NULL object.\n\nCurrently this could not happen since we run the passes in the reverse order:\n\n1 - DCE\n2 - BCE",
      "parentUuid": "4ec7bdd5_c5941ad1",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e99a9f9_a2a57abd",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 972,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-01-13T15:59:56Z",
      "side": 1,
      "message": "I don\u0027t know what exactly mingyao\u0027s BCE is doing, but I would assume that removing HBoundsCheck would as a follow-up allow removal of HArrayLength.",
      "parentUuid": "ce800d7c_41b4b250",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ec145c3_6309e2ce",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 972,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-13T16:01:55Z",
      "side": 1,
      "message": "Yeah, that\u0027s a good point. We should handle an implicit null check in an array operation.",
      "parentUuid": "2e99a9f9_a2a57abd",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ec145c3_837b3e5e",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1055,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-13T14:32:35Z",
      "side": 1,
      "message": "Why not after the switch:\n\nswitch {\n\n}\n\nMaybeRecordImplicitNullCheck(instruction, dex_pc);\n\nAnyway for kPrimVoid we will die in LOG(FATAL).",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce800d7c_01170ab4",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1055,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-01-13T14:45:50Z",
      "side": 1,
      "message": "We want to record the pc right after the instruction that throws so we can find the corresponding dex_pc in the maps.",
      "parentUuid": "0ec145c3_837b3e5e",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce800d7c_01762af3",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1055,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2015-01-13T15:58:32Z",
      "side": 1,
      "message": "Yes, you are right.",
      "parentUuid": "ce800d7c_01170ab4",
      "revId": "2e550bbf2c3b8909b0ecc3c78d1865537d840bff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}