/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.server.art;

import android.annotation.SystemApi;
import android.annotation.SystemApi.Client;
import android.os.IArtd;
import android.os.IBinder;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.util.Log;

/**
 * This class provides a system API for functionality provided by the ART
 * module.
 *
 * @hide
 */
@SystemApi(client = Client.SYSTEM_SERVER)
public final class ArtManagerLocal {
    public static final boolean ENABLED = false;

    private static final String TAG = "ArtService";

    private IArtd mArtd;

    public ArtManagerLocal() {
        IBinder rawBinderService = ServiceManager.getService("artd");
        if (rawBinderService == null) {
            throw new IllegalStateException("Unable to fetch artd service from binder.");
        }

        mArtd = IArtd.Stub.asInterface(rawBinderService);
    }

    /*
     * API Functions
     */

    /**
     * Deletes all the optimizations files generated by ART.
     * @param packageInfo the package information.
     */
    public long deleteOptimizedFiles(ArtPackageInfo packageInfo) {
        long freedBytes = 0;
        boolean hadErrors = false;
        for (String codePath : packageInfo.getCodePaths()) {
            for (String isa : packageInfo.getInstructionSets()) {
                try {
                    freedBytes += mArtd.deleteOdex(codePath, isa, packageInfo.getOatDir());
                } catch (RemoteException e) {
                    Log.e(TAG, "Failed deleting oat files for " + codePath, e);
                    hadErrors = true;
                }
            }
        }
        return hadErrors ? -1 : freedBytes;
    }
}
