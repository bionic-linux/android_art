{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "38b5ab4f_f2271801",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 758,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T04:23:39Z",
      "side": 1,
      "message": "This ensures that the daemons are removed from the thread list. But, on second thought, I\u0027m no longer convinced that suffices. We shouldn\u0027t really be forking until the actual OS-level threads have terminated. So maybe we want to do this AND leave the original, probably not 100% reliable libcore code?\n\nOr is there some guaranteed atomic way to read a directory? Getdents64 seems promising, but I don\u0027t think atomicity is guaranteed, even for small directories.",
      "range": {
        "startLine": 758,
        "startChar": 4,
        "endLine": 758,
        "endChar": 38
      },
      "revId": "b7b4f5855fbdd4ff1802c04e12a6034b89ba116f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "016461a6_7b867ebf",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 758,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-12T07:45:16Z",
      "side": 1,
      "message": "I cannot really review this as I do not understand how the thread joining works. I do not see any `pthread_detach` call in ART/libcore, nor can I find any relevant `pthread_join`, so I do not know how the number of tasks (see the old libcore code) can reach one.",
      "parentUuid": "38b5ab4f_f2271801",
      "range": {
        "startLine": 758,
        "startChar": 4,
        "endLine": 758,
        "endChar": 38
      },
      "revId": "b7b4f5855fbdd4ff1802c04e12a6034b89ba116f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d557200_cb0b96bf",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 758,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T21:13:57Z",
      "side": 1,
      "message": "We discussed this offline, Briefly, the problem is that any sort of join does not ensure that the thread has completed the code necessary to clean up thread data structures.",
      "parentUuid": "016461a6_7b867ebf",
      "range": {
        "startLine": 758,
        "startChar": 4,
        "endLine": 758,
        "endChar": 38
      },
      "revId": "b7b4f5855fbdd4ff1802c04e12a6034b89ba116f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7188085_c6d9d5d2",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-12T07:45:16Z",
      "side": 1,
      "message": "1u",
      "range": {
        "startLine": 769,
        "startChar": 25,
        "endLine": 769,
        "endChar": 47
      },
      "revId": "b7b4f5855fbdd4ff1802c04e12a6034b89ba116f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfa173d5_8a1804ec",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-10-12T21:13:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7188085_c6d9d5d2",
      "range": {
        "startLine": 769,
        "startChar": 25,
        "endLine": 769,
        "endChar": 47
      },
      "revId": "b7b4f5855fbdd4ff1802c04e12a6034b89ba116f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}