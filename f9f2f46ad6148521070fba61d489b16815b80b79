{
  "comments": [
    {
      "key": {
        "uuid": "633f9d98_4ef87353",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "The complexity of dealing with return codes is because you are packing command results into exit status codes that are not naturally suited for the command results. This complexity goes away if you use the standard approach for shell commands: return the error result in the exit code, and the command result in stdout.\n\nI don\u0027t think the costs of parsing the result from stdout justify this added complexity of packing results into the exit status.\n\nDo you have a CL posted for the code that will be executing dexoptanalyzer? Is it installd who is using dexoptanalyzer?\n\nWhat about defining the dexoptanalyzer as a shared library instead of an executable? That would also avoid the need to pack and unpack the dexopt status results. Wouldn\u0027t it be more efficient to avoid a fork/exec?\n\nI assume the reason not to use a shared library is because currently that library would depend on much of art, which is a dependency we don\u0027t want installd to have? If we remove the dependency on creating a runtime instance, would that still be a problem?",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 45,
        "endChar": 45
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_21733492",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "What part do you actually consider complex here? They are just return codes...\n\nIf I document that:\n\nreturn 100 -\u003e kNoDexOptNeeded\nreturn 101 -\u003e kDex2OatFromScratch\n\nreturn 102 -\u003e kDex2OatForBootImageOat\nreturn 103 -\u003e kDex2OatForFilterOat\nreturn 104 -\u003e kDex2OatForRelocationOat\n\nreturn 98 -\u003e kDex2OatForBootImageOdex\nreturn 97 -\u003e kDex2OatForFilterOdex\nreturn 96 -\u003e kDex2OatForRelocationOdex\n\nwould that be better for you? I can even map them to 0-9 codes, doesn\u0027t really matter.\n\nThis can\u0027t be a shared library, it needs to be executed from installd under different capabilities as a standalone binary.\n\nI disagree with regards to parsing. IMO it\u0027s just simpler and cleaner to deal with return codes in this particular case, rather than capturing the output and parsing.\n\ninstalld WIP is here: go/ag/1786897",
      "parentUuid": "633f9d98_4ef87353",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 45,
        "endChar": 45
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c88a26db_c112427e",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-19T11:33:53Z",
      "side": 1,
      "message": "For the record, I agree the exit code mapping is gross, but given it\u0027s a contract between two internal tools, I could be fine with it.\n\nIt does come as a surprise though to anyone starting looking at this. And it\u0027s adding another hacked contract: we already have the -/+ hack, now we have the exit code one. Maybe parsing the output (and the output being the -/+ hack, not the actual kDex2oat*) is not that bad.",
      "parentUuid": "a35c3506_21733492",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 45,
        "endChar": 45
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284ae270_ffe4718e",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-19T21:01:39Z",
      "side": 1,
      "message": "Well, was the +- really a hack in the end? We kinda need it for vdex to know where to find it and I thought the only reason to go with +- is because we were lazy enough to add extra dexopt codes. We can \"easily\" fix it by expanding our enum base. Do I like it? no, I don\u0027t think these is how these details should flow (leak) between art, pm and installd. But I don see a better way without bigger refactoring.\n\n\nRegarding the use of return codes instead of the std::out print. I am fully aware that the conventional way for unix cmds is to return 0 for success or other values for error codes. However, in this particular case, I don\u0027t see what it would buy us and that\u0027s the reason I didn\u0027t want to do it. What actual benefits do you see from it? (except \"that\u0027s how it\u0027s usually done\").\n\nI can only see the additional complexity and overhead of redirecting std::out and parse the output in installd (or pipe-ing which is more or less the same).",
      "parentUuid": "c88a26db_c112427e",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 45,
        "endChar": 45
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48963609_9da823c9",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-01-19T22:40:49Z",
      "side": 1,
      "message": "Yeah, +/- is a hack, we should return a pair really.\n\nThe main benefit I see from not using exit codes is the principle of least surprise.  But once again, as the tools involved are highly correlated, I don\u0027t mind using exit codes.",
      "parentUuid": "284ae270_ffe4718e",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 45,
        "endChar": 45
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284ae270_6b77993d",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-20T08:59:43Z",
      "side": 1,
      "message": "Clean things up a bit and use a different set of exit codes. Turns out to be cleaner.",
      "parentUuid": "48963609_9da823c9",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 45,
        "endChar": 45
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_8e37bb4f",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "What do you think about calling this \"--profile-changed\" instead? It\u0027s shorter that way.",
      "range": {
        "startLine": 89,
        "startChar": 16,
        "endLine": 89,
        "endChar": 40
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_013c7098",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "I like having \"assume\" in front. It better reveals that\u0027s an assumption when viewed in the context of dexoptanalyzer (e.g. there\u0027s no way you could dcheck that\u0027s indeed the case).",
      "parentUuid": "633f9d98_8e37bb4f",
      "range": {
        "startLine": 89,
        "startChar": 16,
        "endLine": 89,
        "endChar": 40
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_ce31c35b",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "extra \u0027.\u0027?",
      "range": {
        "startLine": 97,
        "startChar": 45,
        "endLine": 97,
        "endChar": 46
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_a1fae497",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "633f9d98_ce31c35b",
      "range": {
        "startLine": 97,
        "startChar": 45,
        "endLine": 97,
        "endChar": 46
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_8eaedb41",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 184,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "\"relocate\" \u003d\u003e \"relocate the boot image\"",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 184,
        "endChar": 42
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_410ca8f1",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 184,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "633f9d98_8eaedb41",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 184,
        "endChar": 42
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_aeb397aa",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 203,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "Please file a bug stating that dexoptanalyzer (via oat file assistant) should not need to create a runtime, and that we should refactor the (oat file assistant) code so that we don\u0027t ever pay the large performance cost of creating a runtime for dexoptanalyzer. You can assign the bug to me if you like. Put the bug number in the comment.",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 203,
        "endChar": 5
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_4c785f2c",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 203,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "633f9d98_aeb397aa",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 203,
        "endChar": 5
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_aedab7ca",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 212,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "Why should this check be in the OatFileAssistant and where in the OatFileAssistant would you put it? Does it matter what the result of dexoptanalyzer is for dex files on the boot class path?",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 212,
        "endChar": 5
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_2cd08bd7",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 212,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "Seems natural to me for GetDexOptNeeded to cover all cases so that we don\u0027t need to do extra checks before invoking it.",
      "parentUuid": "633f9d98_aedab7ca",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 212,
        "endChar": 5
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_0eeaeb5b",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 229,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "How do you distinguish between the EXIT_FAILURE code and potential valid dexopt status codes?",
      "range": {
        "startLine": 229,
        "startChar": 53,
        "endLine": 229,
        "endChar": 77
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_6ca8c3c9",
        "filename": "dexoptanalyzer/dexoptanalyzer.cc",
        "patchSetId": 7
      },
      "lineNbr": 229,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "EXIT_FAILURE is 1 while valid dexopt returns are map in 98+ range. I\u0027ll introduce a local constant to make things clearer.",
      "parentUuid": "633f9d98_0eeaeb5b",
      "range": {
        "startLine": 229,
        "startChar": 53,
        "endLine": 229,
        "endChar": 77
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_4ee4f38b",
        "filename": "dexoptanalyzer/dexoptanalyzer_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "I do not like having such a tight coupling between the DexoptAnalyzerTest and OatFileAssistantTest.\n\nCan you copy-paste just what you need for the DexoptAnalyzerTest instead? Or, would it be too weird to test dexoptanalyzer in the existing OatFileAssistantTest cases?\n\nIs the presubmit failure of the dexopt analyzer test relevant here? Do you know why the test is failing?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 54
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_27f4240f",
        "filename": "dexoptanalyzer/dexoptanalyzer_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "Could you provide a rationale?\n\nWhy would you prefer copy-paste code?\n\nDon\u0027t mind testing dexoptanalyzer in OatFileAssistantTest but I find the separation better.\n\nThe presubmit failure are not related to this CL.",
      "parentUuid": "633f9d98_4ee4f38b",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 54
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c88a26db_a194de63",
        "filename": "dexoptanalyzer/dexoptanalyzer_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-19T15:11:58Z",
      "side": 1,
      "message": "As you say, I find the separation better.\n\nMore specifically, if OatFileAssistantTest is being subclassed by other tests, it is difficult to reason about the OatFileAssistantTest in isolation. Instead the behavior of every test that subclasses it must be considered before any changes can be made. This increases the development effort and time required to change the OatFileAssistantTest (I make changes to the OatFileAssitantTest fairly often).\n\nSubclassing also makes it harder to identify the cause and owner of a test failure. If the dexopt analyzer test fails, is it because of a bug in dexopt analyzer, a bug in dexopt analyzer test, a bug in the oat file assistant, or a bug in the oat file assistant test? For example, it is not obvious to me whether the presubmit failure is a problem with the oat file assistant test infrastructure I should be looking into, or if it is a problem with the dexopt analyzer specifically.\n\nI would prefer copy-paste code in this case because I expect more tests and complexity will be added to the oat file assistant test that are not relevant to the dexopt analyzer tests, and more tests will be added to the dexopt analyzer test that are not relevant to the oat file assistant tests. Allowing the two tests to grow independently avoids the creation and need to maintain a cross product of testing functionality that is not (and should not be) fully exercised.",
      "parentUuid": "a35c3506_27f4240f",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 54
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284ae270_991d9d95",
        "filename": "dexoptanalyzer/dexoptanalyzer_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-19T21:01:39Z",
      "side": 1,
      "message": "I can\u0027t say that I fully follow.\n\nThe only thing that oat_file_assistant.h contains is runtime setup and the oat/odex file generation. Nothing I\u0027d say is too specific or tied to the actual tests. Or did I miss something?\n\nAnd since the goal is to have the same behavior between OatFileAssistant and dexoptanalyzer, shouldn\u0027t that be an extra reason to share the setup code?\n\nDuplicating means that any adjustments we make will need to be applied identically in two different places, cause the stuff that went into the header will need to be copy pasted.",
      "parentUuid": "c88a26db_a194de63",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 54
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633f9d98_8e7c1bd6",
        "filename": "runtime/utils.h",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "Return char* so you can return NULL in case of error, which is harder to accidentally ignore than the empty string?",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 11
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3820982_212c0efe",
        "filename": "runtime/utils.h",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-01-18T12:03:08Z",
      "side": 1,
      "message": "Is dexoptanalyzer the only user of this? Has there been a notion of a default boot image location before this?\n\nIf not, why introduce a default boot image location now?",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_876090e0",
        "filename": "runtime/utils.h",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "we have he same pattern in other cases (e.g. GetDalvikCache). I prefer std::string to const char*. Easier to reason about ownership.",
      "parentUuid": "633f9d98_8e7c1bd6",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 11
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35c3506_072640d7",
        "filename": "runtime/utils.h",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-01-18T20:00:48Z",
      "side": 1,
      "message": "We have 2 other cases which I\u0027ll move over in another CL.",
      "parentUuid": "c3820982_212c0efe",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "f9f2f46ad6148521070fba61d489b16815b80b79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}