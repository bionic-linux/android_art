{
  "comments": [
    {
      "key": {
        "uuid": "008ce6b9_6e30a2ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2019-04-11T15:48:55Z",
      "side": 1,
      "message": "Nice!",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "21132e0c682b902ceca73a5d5c03f493abca26e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "983f2ce4_35abbf7c",
        "filename": "libartpalette/system/palette_android.cc",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2019-04-11T15:47:39Z",
      "side": 1,
      "message": "If ftruncate() appears in this branch, can there be shared fsync() and close()/output_fd.reset() path?\n\nMaybe we should be logging when the latter ftruncate() / close() fail? It\u0027s not clear what the caller would be able to do anyway.",
      "range": {
        "startLine": 118,
        "startChar": 4,
        "endLine": 118,
        "endChar": 20
      },
      "revId": "21132e0c682b902ceca73a5d5c03f493abca26e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29e8f5fb_918b763c",
        "filename": "libartpalette/system/palette_android.cc",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-04-11T17:34:10Z",
      "side": 1,
      "message": "\u003e If ftruncate() appears in this branch, can there be shared fsync() and close()/output_fd.reset() path?\n\nIt can, but in one branch errno should reflect their outcome, in the other it should not, which makes for some fiddly conditional logic. I\u0027ve added fsync to the failure cleanup though.\n\n\u003e Maybe we should be logging when the latter ftruncate() / close() fail?\n\nNot sure what \"latter\" means there. In the failure cleanup path they\u0027d only show cascade errors, and I think it\u0027s fairly unlikely that they\u0027d add any valuable debugging info.\n\nIn the success path the caller gets the error info from them, so the only info not available is the exact call that failed. Could add more logging for that, if that\u0027s what you asked for?\n\n\u003e It\u0027s not clear what the caller would be able to do anyway.\n\nI don\u0027t think the caller can handle errors any better than it is (besides also printing the errno error, which I just added).",
      "parentUuid": "983f2ce4_35abbf7c",
      "range": {
        "startLine": 118,
        "startChar": 4,
        "endLine": 118,
        "endChar": 20
      },
      "revId": "21132e0c682b902ceca73a5d5c03f493abca26e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41cd1325_8e78df2a",
        "filename": "libartpalette/system/palette_android.cc",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2019-04-12T13:36:55Z",
      "side": 1,
      "message": "Thanks for the logging higher up.\n\nIt looked here that consing up the combined path might be cleaner, but does have to conditionally save errno.\n\nint first_errno \u003d 0;                                                                                                                                                                                                                           \nif (!android::base::WriteFully(output_fd, msg, msg_len)) {                                                                                                                                                                                     \n  first_errno \u003d errno;                                                                                                                                                                                                                         \n  TEMP_FAILURE_RETRY(ftruncate(output_fd, 0));                                                                                                                                                                                                 \n}                                                                                                                                                                                                                                              \n                                                                                                                                                                                                                                               \nif (TEMP_FAILURE_RETRY(fsync(output_fd)) \u003d\u003d -1) {                                                                                                                                                                                              \n  first_errno \u003d (first_errno \u003d\u003d 0) ? errno : first_errno;                                                                                                                                                                                      \n}                                                                                                                                                                                                                                              \n                                                                                                                                                                                                                                               \n...\nerrno \u003d first_errno;\n\nFine as-is.",
      "parentUuid": "29e8f5fb_918b763c",
      "range": {
        "startLine": 118,
        "startChar": 4,
        "endLine": 118,
        "endChar": 20
      },
      "revId": "21132e0c682b902ceca73a5d5c03f493abca26e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3488cff5_97780371",
        "filename": "libartpalette/system/palette_android.cc",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-04-12T17:55:47Z",
      "side": 1,
      "message": "Yes, that\u0027s what it would entail. Imo it gets harder to convince oneself that the right errno gets propagated, so I favour this in spite of the few lines of duplication.\n\n\u003e Fine as-is.\n\nThanks.",
      "parentUuid": "41cd1325_8e78df2a",
      "range": {
        "startLine": 118,
        "startChar": 4,
        "endLine": 118,
        "endChar": 20
      },
      "revId": "21132e0c682b902ceca73a5d5c03f493abca26e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07df49ed_a66be4d8",
        "filename": "libartpalette/system/palette_android.cc",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-04-11T15:26:25Z",
      "side": 1,
      "message": "Does this make sense for an `fsync` call? It seems `EINTR` is not part of the errors that may be set by `fsync` (http://man7.org/linux/man-pages/man2/fdatasync.2.html).",
      "range": {
        "startLine": 119,
        "startChar": 13,
        "endLine": 119,
        "endChar": 31
      },
      "revId": "21132e0c682b902ceca73a5d5c03f493abca26e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43fbd990_81ad51ae",
        "filename": "libartpalette/system/palette_android.cc",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-04-11T15:39:28Z",
      "side": 1,
      "message": "I just copied that from [1]. You\u0027re right the man page doesn\u0027t mention EINTR, but I reckon fsync is I/O blocking so ought to be susceptible to signal interrupts (although perhaps not in this particular case since Linux doesn\u0027t consider \"disk\" storage a \"slow\" device). Still, in the general case, I wonder if it might be an omission on the man page.\n\n[1] http://cs/aosp-master/art/libartbase/base/unix_file/fd_file.cc?l\u003d347-351\u0026rcl\u003dd03e8dd6c824352fb2281d333d4e134458776fa1",
      "parentUuid": "07df49ed_a66be4d8",
      "range": {
        "startLine": 119,
        "startChar": 13,
        "endLine": 119,
        "endChar": 31
      },
      "revId": "21132e0c682b902ceca73a5d5c03f493abca26e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}