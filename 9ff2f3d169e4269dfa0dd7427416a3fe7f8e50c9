{
  "comments": [
    {
      "key": {
        "uuid": "d4c4527f_3f5baf7f",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 30
      },
      "lineNbr": 5536,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-01-28T17:05:18Z",
      "side": 1,
      "message": "Note: this changes the value contained in `src_reg`; is that of any concern?",
      "range": {
        "startLine": 5536,
        "startChar": 6,
        "endLine": 5536,
        "endChar": 39
      },
      "revId": "9ff2f3d169e4269dfa0dd7427416a3fe7f8e50c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "941ada01_66ad00a8",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 30
      },
      "lineNbr": 5536,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-01-28T17:12:24Z",
      "side": 1,
      "message": "Yes, it is a problem.  You do need a temporary here.  You should be able to use the high double-word using movhpd to save the value and then restore it again.",
      "parentUuid": "d4c4527f_3f5baf7f",
      "range": {
        "startLine": 5536,
        "startChar": 6,
        "endLine": 5536,
        "endChar": 39
      },
      "revId": "9ff2f3d169e4269dfa0dd7427416a3fe7f8e50c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4b8d2d6_d1d39f2c",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 30
      },
      "lineNbr": 5536,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-01-28T17:14:38Z",
      "side": 1,
      "message": "No, movhdq is memory only.  Perhaps movddup?",
      "parentUuid": "941ada01_66ad00a8",
      "range": {
        "startLine": 5536,
        "startChar": 6,
        "endLine": 5536,
        "endChar": 39
      },
      "revId": "9ff2f3d169e4269dfa0dd7427416a3fe7f8e50c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54a782d1_23426e42",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 30
      },
      "lineNbr": 5536,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-01-28T17:18:05Z",
      "side": 1,
      "message": "Note that this is only used if invoked from MoveLocation where we do not expect the inputs to be preserved. An actual ParallelMove will never move between core and fpu regs. But I agree that it would be better not having to give up that assumption.",
      "parentUuid": "d4b8d2d6_d1d39f2c",
      "range": {
        "startLine": 5536,
        "startChar": 6,
        "endLine": 5536,
        "endChar": 39
      },
      "revId": "9ff2f3d169e4269dfa0dd7427416a3fe7f8e50c9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}