{
  "comments": [
    {
      "key": {
        "uuid": "95000ea9_445cad64",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "I think the big change here is to reverse the layout [in the bit string, and in the SubtypeCheckBitsAndStatus]. And it just so happens it also makes it 28 bits.",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5d7a92a_226118b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "Using the 28 bits for the bit string is the reason why the change exists in the first place. The reverse layout is performance/code size impact mitigation.",
      "parentUuid": "95000ea9_445cad64",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b62be31c_3fc41522",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "I have a hard time visualizing this. Can you please provide the code sequence for arm32/arm64 and the differing code sizes?\n\nBy using a right shift (rsb-to-lsb bitstring; current) the immediates involved are very small. With a lsb-to-rsb bitstring (proposed) either it needs to mask [should be good on arm64, but on arm32?] or right shift, and compare.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d35dcb10_7eb829d5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "ARM64 is irrelevant, all instructions are 32-bit, so there is no difference between LSR(immediate) and the UBFX that shall replace it. In fact, both are an alias of the UBFM.\n\nThere are plenty of different sequences that can be used for ARM. All cases where LSR+CMP(immediate,T2) would have been used before can be handled by SUB(immediate,T3)+LSRS. The cases where the immediate is 9-16 bits would have previously required LSR+MOVW+CMP(register) but now will be handled for 9-12 bits by SUB(immediate,T4)+LSRS (2 bytes shorter) and for 13-16 bits by MOVW+SUB+LSRS (2 bytes longer if the bit string is in low reg and the constant is loaded to a high reg, presumably IP). For 17+ bits, we need to load the constant using MOVW+MOVT and we can as well load a shifted constant, so LSR+MOVW+MOVT+CMP can be simply changed to LSL+MOVW+MOVT+CMP.",
      "parentUuid": "b62be31c_3fc41522",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308117e2_ee49fd3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:45:02Z",
      "side": 1,
      "message": "And to fix a minor omission: all cases where LSR+CMP(immediate,T1) would have been used before can be handled by SUB(immediate,T2)+LSRS.",
      "parentUuid": "d35dcb10_7eb829d5",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fea548e_eb1569c7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T17:39:21Z",
      "side": 1,
      "message": "We may want to use UBFX on ARM if we share it for multiple chained instanceof instructions but, if we ever implement that optimization, the additional 2 bytes of code size should be small, compared to the entire sequence (at least 2 instanceof).",
      "parentUuid": "308117e2_ee49fd3e",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19be6ad2_ad07bedb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-09T17:51:21Z",
      "side": 1,
      "message": "I\u0027m not sure how you will use LSRS here.\n\nThe class status is now in the top bits (so it needs either LSL+LSR or UBFX or similar. That\u0027s 4 bytes either way, there is no 2 byte masking instruction in ARM32 as far as I know.\n\nAs for CMP vs SUBS, using SUBS is already in Mingyao\u0027s CL.",
      "parentUuid": "2fea548e_eb1569c7",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "003c194c_e2722f28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-10T13:52:32Z",
      "side": 1,
      "message": "Sorry, should have been LSLS:\n\n    LSR+CMP(immediate,T1) -\u003e SUB(immediate,T2)+LSLS\n    LSR+CMP(immediate,T2) -\u003e SUB(immediate,T3)+LSLS\n\nIf not modified immediate:\n\n    9-12 bits: LSR+MOVW+CMP -\u003e SUB(immediate,T4)+LSLS (always -2 bytes)\n    13-16 bits: LSR+MOVW+CMP -\u003e MOVW+SUB+LSRS (sometimes +2 bytes)\n    17+ bits: LSR+MOVW+MOVT+CMP -\u003e LSL+MOVW+MOVT+CMP\n\n(If the mask is 0xffff and we use LDRH, the old and new code can be the same for 9-16 bits.)\n\n\nThe class status is explained by the previous paragraph:\n\n    LDRB tmp, [#(status_offset + /* high byte */ 3)]\n    CMP tmp, #(kInitialized \u003c\u003c 4)\n    BLO slow_path  // low 4 bits of tmp are irrelevant for BLO.\n\nSee also updated code generators.\n\n\nMingyao\u0027s CL may be using SUBS but with the new representation we can also use SUB(immediate,T4) which never sets flags and rely on the LSLS to set the flags. There is no equivalent CMP(immediate) that would compare with a zero-extended 12-bit constant.",
      "parentUuid": "19be6ad2_ad07bedb",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eab234d_f1cae3eb",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7177,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "nit: kBitsPerByte",
      "range": {
        "startLine": 7177,
        "startChar": 89,
        "endLine": 7177,
        "endChar": 91
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5490da6b_489bf36a",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7177,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9eab234d_f1cae3eb",
      "range": {
        "startLine": 7177,
        "startChar": 89,
        "endLine": 7177,
        "endChar": 91
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4fd47c3_ca9fd0b4",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7179,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "nit: kBitsPerByte",
      "range": {
        "startLine": 7179,
        "startChar": 95,
        "endLine": 7179,
        "endChar": 97
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e584e391_adb88898",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 5
      },
      "lineNbr": 7179,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4fd47c3_ca9fd0b4",
      "range": {
        "startLine": 7179,
        "startChar": 95,
        "endLine": 7179,
        "endChar": 97
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb49ff7_9ed65501",
        "filename": "runtime/base/bit_string.h",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "Documentation should be MSB on the left, can you please reverse below?\n\n  CharN ... Char2 Char1 Char0\n\netc",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24bf07c8_85687221",
        "filename": "runtime/base/bit_string.h",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "Done. (Note that the description here was previously wrong.)",
      "parentUuid": "beb49ff7_9ed65501",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47890145_a0f8640d",
        "filename": "runtime/subtype_check_bits.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "Same as before, please reverse this documentation so that MSB is still on the left side.",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37801edb_1057d2d0",
        "filename": "runtime/subtype_check_bits.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47890145_a0f8640d",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b83ecd86_790530d5",
        "filename": "runtime/subtype_check_bits_and_status.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca582589_c1a20342",
        "filename": "runtime/subtype_check_bits_and_status.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b83ecd86_790530d5",
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "483c99d8_ab9a0a33",
        "filename": "runtime/subtype_check_bits_and_status.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-01-08T19:10:08Z",
      "side": 1,
      "message": "Is this still correct?",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 64,
        "endChar": 100
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "608745bc_1f3a935f",
        "filename": "runtime/subtype_check_bits_and_status.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-09T11:41:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "483c99d8_ab9a0a33",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 64,
        "endChar": 100
      },
      "revId": "20144dae518ed6199c49d16240c5d03dc3b1acfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}