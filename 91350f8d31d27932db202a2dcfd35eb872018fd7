{
  "comments": [
    {
      "key": {
        "uuid": "d8bac000_3831a2a2",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-15T01:58:58Z",
      "side": 1,
      "message": "Any better ideas for the DexPc here?",
      "range": {
        "startLine": 415,
        "startChar": 38,
        "endLine": 415,
        "endChar": 59
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1d010ee_b9c66e65",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2018-04-17T23:49:38Z",
      "side": 1,
      "message": "Since these are synthetic phis without a virtual reg, I would omit this argument (so we get kNoDexPc). We do the same in e.g. BCE.",
      "parentUuid": "d8bac000_3831a2a2",
      "range": {
        "startLine": 415,
        "startChar": 38,
        "endLine": 415,
        "endChar": 59
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13c35802_e4cee7f2",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-18T04:30:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1d010ee_b9c66e65",
      "range": {
        "startLine": 415,
        "startChar": 38,
        "endLine": 415,
        "endChar": 59
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef3aacdf_d558ceac",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 432,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-15T01:56:44Z",
      "side": 1,
      "message": "I tried my best to decouple and organize the logic into functions. It gets a bit tricky since there are many flags to manage, but this seems like a good solution. I saw the same pattern in the escape analysis code. Does this look okay? Or is there a better way?",
      "range": {
        "startLine": 431,
        "startChar": 31,
        "endLine": 432,
        "endChar": 55
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57a7f765_4b158883",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "Isn\u0027t comparing ToPhiType() of these sufficient?",
      "range": {
        "startLine": 443,
        "startChar": 15,
        "endLine": 443,
        "endChar": 39
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5481b13e_13aee4ad",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Great point, indeed I could/should be using ToPhiType().",
      "parentUuid": "57a7f765_4b158883",
      "range": {
        "startLine": 443,
        "startChar": 15,
        "endLine": 443,
        "endChar": 39
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73e28990_4c7498aa",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "This function is much more than a getter. It should be renamed to CanBeMerged() and the *can_be_merged should be returned while the vector should be an output argument.",
      "range": {
        "startLine": 458,
        "startChar": 35,
        "endLine": 458,
        "endChar": 55
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a8c1882_59c7ddcb",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Good idea, done.",
      "parentUuid": "73e28990_4c7498aa",
      "range": {
        "startLine": 458,
        "startChar": 35,
        "endLine": 458,
        "endChar": 55
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d089dd9_da3fe8ca",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 471,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "You\u0027re potentially allocating a lot of memory. We should reuse a single ScopedArenaVector\u003c\u003e for all these calls. This function should still take a pointer to it as an /*out*/ parameter but we should always pass the same one.",
      "range": {
        "startLine": 471,
        "startChar": 4,
        "endLine": 471,
        "endChar": 85
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c4c2e4d_3ba63d3f",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 471,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d089dd9_da3fe8ca",
      "range": {
        "startLine": 471,
        "startChar": 4,
        "endLine": 471,
        "endChar": 85
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bcac08e_fb412975",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 491,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "Well, if this holds, you can simply drop this check and let it be handled by the `if` below. (And drop lines 590-597 as well.)",
      "range": {
        "startLine": 491,
        "startChar": 8,
        "endLine": 491,
        "endChar": 49
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4020316_f795a553",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 491,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bcac08e_fb412975",
      "range": {
        "startLine": 491,
        "startChar": 8,
        "endLine": 491,
        "endChar": 49
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99371341_67b9affc",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 501,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "This path can retain `*all_predecessors_store_same_value \u003d\u003d true`. That seems wrong.",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7577643_56f01cd5",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 501,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Agreed, done.",
      "parentUuid": "99371341_67b9affc",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b8b90a2_27e9b7db",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 576,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "This should probably also check `can_be_merged`. This is related to my comment on line 501.",
      "range": {
        "startLine": 576,
        "startChar": 8,
        "endLine": 576,
        "endChar": 40
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95a30089_e51ef5f8",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 576,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b8b90a2_27e9b7db",
      "range": {
        "startLine": 576,
        "startChar": 8,
        "endLine": 576,
        "endChar": 40
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c2c12f1_4bf49c6d",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 653,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "heap_values.assign(pred_heap_values.begin(), pred_heap_values_.end());",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 653,
        "endChar": 7
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9254e1fc_eb1026e1",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 653,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c2c12f1_4bf49c6d",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 653,
        "endChar": 7
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96cc75af_87f9748f",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 659,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "Eagerly allocating Phis can waste a lot of memory and do a lot of unnecessary work. Can we delay that?\n\nWe could allocate a marker HPhi using the ScopedArenaAllocator and initialize all the heap values with it. When we need a heap value and it\u0027s the marker Phi, we do the merging.",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e30455d_000c0769",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 659,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "I definitely like the sound of this idea, although I\u0027m unsure of the specifics of what you\u0027re suggesting. Is a \"marker HPhi\" still an HPhi object, just allocated locally and not added to the block? Then when we actually need it for the first time we allocate it with the graph allocator and add it to the block? If so, is the advantage just that we use a ScopedArenaAllocator instead of the graph ArenaAllocator?",
      "parentUuid": "96cc75af_87f9748f",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2448236f_bc11e22a",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 659,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-17T14:45:21Z",
      "side": 1,
      "message": "Yes, the marker Phi would be allocated locally and never added to a block, it would simply serve as a special value. (I prefer that over a weird value like reinterpret_cast\u003cHInstruction*\u003e(1).)\n\nThe advantage is that we would postpone the call to MergePredecessorValues(block, i /* remove: pred_values */) until we actually need the value and see the marker Phi there. This would avoid unnecessary work and memory allocations on the main arena (compared to this eager evaluation).",
      "parentUuid": "7e30455d_000c0769",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1241ec93_dd168c52",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 659,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-18T06:17:46Z",
      "side": 1,
      "message": "I\u0027ve played around with a couple version of this now, and believe I\u0027ve come to the conclusion that I won\u0027t be able to implement this. I\u0027ll try my best to explain my reasoning below.\n\nFirst, we can\u0027t delay all of MergePredecessorValues(block, i). This function may or may not create a Phi. For example, if a block has two predecessors, but the heap values are the same in both, we wouldn\u0027t want to mark that heap value with a marker Phi (there are some more complicated cases, like all predecessors having stores that store the same value).\n\nAs an alternative then, we can create a marker Phi only when we actually want to create a Phi. All logic would remain the same, but instead of creating a Phi, we create a marker one and resolve it when needed. There are two issues with this:\n\n1) It\u0027s tricky to think of a temporary instruction to place in the heap value (ex. a marker HPhi). Allocating an \"fake\" HPhi seems odd because the constructor requires an ArenaAllocator object (not ScopedArenaAllocator), and how would we check if the HPhi is a marker or an actual, resolved HPhi? Really, to resolve the temporary instruction later, we only need the block # where the HPhi should be added, so we could maybe create a custom class, or reinterpret_cast\u003cHInstruction*\u003e(BlockNumber), but this doesn\u0027t seem very clean.\n\n2) Resolving the temporary marker would happen in VisitGetLocation() (and recursively in the function that does the resolving). However, after resolving, do we then loop through all vectors in heap_values_for_[...] to replace any other instances of the marker?\n\u003e For example: Imagine the marker is created when merging block C w/ predecessors A and B, but the marker gets passed along to the heap values for blocks D and E. Then we have a GET in E, which sees the marker, creates a Phi in block C (Phi [val(A), val(B)]) and replaces the GET. What happens for the marker value in D?\n\nI understand that both can definitely be solved by some clever thinking and making some larger changes, but I don\u0027t think I\u0027ll be able to achieve this in my last 3 days.\n\nI definitely understand the value of getting this right, so I would understand if this CL needs to be dropped.",
      "parentUuid": "2448236f_bc11e22a",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1af53a0b_fcad1baa",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 659,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-18T12:10:50Z",
      "side": 1,
      "message": "OK, let\u0027s keep this as is for the time being. I\u0027ll have a look later.",
      "parentUuid": "1241ec93_dd168c52",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "564124b7_1fbbcd07",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 659,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2018-04-18T17:17:03Z",
      "side": 1,
      "message": "Mart, have a look at our stats mechanism (MaybeRecordStat(stats_ ....). Perhaps you can add some counters of #phis generated, #phis preserved/wasted, and maybe max over all methods. Then run this over a representative set (compiling boot image?) and get some better feel on its behavior.",
      "parentUuid": "1af53a0b_fcad1baa",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec6afb8f_ec522692",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 659,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-18T17:27:24Z",
      "side": 1,
      "message": "I\u0027m more worried about pathological cases. For example\n\n  X x \u003d new X();\n  switch (v) {\n    case 1: x.field1 \u003d 1; break;\n    case 2: x.field2 \u003d 1; break;\n    ...\n    case 100: x.field100 \u003d 1; break;\n  }\n  // 100 Phis with 100*100 inputs created without any subsequent loads of fieldN.",
      "parentUuid": "564124b7_1fbbcd07",
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9edca44_4f29a84d",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 672,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-04-16T17:52:20Z",
      "side": 1,
      "message": "be",
      "range": {
        "startLine": 672,
        "startChar": 40,
        "endLine": 672,
        "endChar": 41
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "098cd563_0e794972",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 672,
      "author": {
        "id": 1272179
      },
      "writtenOn": "2018-04-17T06:24:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9edca44_4f29a84d",
      "range": {
        "startLine": 672,
        "startChar": 40,
        "endLine": 672,
        "endChar": 41
      },
      "revId": "91350f8d31d27932db202a2dcfd35eb872018fd7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}