{
  "comments": [
    {
      "key": {
        "uuid": "76ecaf0a_f7755829",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-07T18:11:45Z",
      "side": 1,
      "message": "Why isn\u0027t it returning a CustomDisassemblerStream?\n\nNaively I would think that the overloaded operators won\u0027t be picked up if you chain multiple \u003c\u003c usages\n\n  CustomDisassemblerStream os;\n  os \u003c\u003c a \u003c\u003c b;\n\n  // os \u003c\u003c a will use this operator, but \u003c\u003c b will not.\n\n(The same question applies for all the operator \u003c\u003cs in this file)",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76890f3e_8cb2e7eb",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-07T18:43:24Z",
      "side": 1,
      "message": "They are declared virtual in the CustomDisassembler::DisassemblerStream (enforced by OVERIDE), so they will be picked up. (And do not use covariant returns without a good reason, please.)",
      "parentUuid": "76ecaf0a_f7755829",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d64e3b0b_dc44ed00",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-07T20:30:02Z",
      "side": 1,
      "message": "Ok, I took a look at disasm-aarch32.h where it seems all the virtual operators were coming from.\n\nEverything just calls os \u003c\u003c parameter where os is an ostream.\n\nTherefore perhaps wouldn\u0027t it be more generic (and less confusing) if it simply overloaded ostream?\n\n   std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const PrintLabel\u0026 label) {\n      ...\n      os \u003c\u003c \"pc, #\" \u003c\u003c ....;\n      return os;\n   }\n\nand so on? Perhaps there is a reason not to do this, if the output is different based on the subclass of DisassemblerStream (e.g. arm vs arm64), in which case I don\u0027t understand why is there a templated operator\u003c\u003c which is not virtual?",
      "parentUuid": "76890f3e_8cb2e7eb",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bfd0a27_9eed9d1c",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-08T15:15:11Z",
      "side": 1,
      "message": "Yes, the output is different because the base DisassemblerStream class (defined in VIXL) does not produce what ART expects. The templated operator\u003c\u003c() is there for convenience, I think. Also, function templates cannot be declared virtual.",
      "parentUuid": "d64e3b0b_dc44ed00",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5606cb9f_4887df0e",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-07T18:11:45Z",
      "side": 1,
      "message": "Can you include comments on what all the 0,0,0,0 are?",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bfd0a27_be2859a3",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-08T15:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5606cb9f_4887df0e",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "961043d0_2ac25f26",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-07T18:11:45Z",
      "side": 1,
      "message": "Why is it always os() instead of just os ?",
      "range": {
        "startLine": 163,
        "startChar": 2,
        "endLine": 163,
        "endChar": 7
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bfd0a27_3e2689c3",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-08T15:15:11Z",
      "side": 1,
      "message": "There is no os member, just a getter.",
      "parentUuid": "961043d0_2ac25f26",
      "range": {
        "startLine": 163,
        "startChar": 2,
        "endLine": 163,
        "endChar": 7
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36f237e7_6f575122",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-07T18:11:45Z",
      "side": 1,
      "message": "nit: make_unique",
      "range": {
        "startLine": 208,
        "startChar": 39,
        "endLine": 208,
        "endChar": 42
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bfd0a27_9e259dcb",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-08T15:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36f237e7_6f575122",
      "range": {
        "startLine": 208,
        "startChar": 39,
        "endLine": 208,
        "endChar": 42
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36f237e7_ef10e166",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2016-09-07T18:11:45Z",
      "side": 1,
      "message": "DCHECK begin \u003c\u003d end ?",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bfd0a27_7e12d16b",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-08T15:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36f237e7_ef10e166",
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a16ba9_30dea860",
        "filename": "disassembler/disassembler_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-07T18:43:24Z",
      "side": 1,
      "message": "Make this a nested class in DisassemblerArm. Or would all the nesting clutter the code too much?",
      "range": {
        "startLine": 27,
        "startChar": 6,
        "endLine": 27,
        "endChar": 24
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bfd0a27_5e17155a",
        "filename": "disassembler/disassembler_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-08T15:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56a16ba9_30dea860",
      "range": {
        "startLine": 27,
        "startChar": 6,
        "endLine": 27,
        "endChar": 24
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "962843c7_4a8a7370",
        "filename": "disassembler/disassembler_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-06T19:11:32Z",
      "side": 1,
      "message": "This requires macros.h",
      "range": {
        "startLine": 33,
        "startChar": 54,
        "endLine": 33,
        "endChar": 62
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96992396_82e13ac1",
        "filename": "disassembler/disassembler_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-07T11:03:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "962843c7_4a8a7370",
      "range": {
        "startLine": 33,
        "startChar": 54,
        "endLine": 33,
        "endChar": 62
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "962843c7_4ab1d350",
        "filename": "disassembler/disassembler_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-06T19:11:32Z",
      "side": 1,
      "message": "unique_ptr",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 22
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "367f97e8_c7503e29",
        "filename": "disassembler/disassembler_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2016-09-07T11:03:01Z",
      "side": 1,
      "message": "Ugh, I guess it was not my day...",
      "parentUuid": "962843c7_4ab1d350",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 22
      },
      "revId": "30dffbedc121623e97af2c44b77615b3e953e841",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}