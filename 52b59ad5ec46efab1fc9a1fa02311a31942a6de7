{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bea66f10_c4f9b7f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1371444
      },
      "writtenOn": "2021-11-03T14:25:28Z",
      "side": 1,
      "message": "Thanks for the review. Addressed review comments.",
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c38fab35_ff70391e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1373934
      },
      "writtenOn": "2021-11-10T18:44:52Z",
      "side": 1,
      "message": "Just a heads up: had some other things to do but this CL is not abandoned, will address all comments and upload new patch set as soon as x86 version of this intrinsic (https://r.android.com/1878090) is merged to avoid merge conflicts (they share some code).",
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6df7fd1c_3a369148",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 2270,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-10-21T09:39:32Z",
      "side": 1,
      "message": "the implementation of the intrinsics is a flat single instruction, no calls; I\u0027d suggest that LocationSummary::kNoCall should be used instead.",
      "range": {
        "startLine": 2270,
        "startChar": 63,
        "endLine": 2270,
        "endChar": 78
      },
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "829ea350_4629b6ae",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 2270,
      "author": {
        "id": 1373934
      },
      "writtenOn": "2021-11-11T18:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6df7fd1c_3a369148",
      "range": {
        "startLine": 2270,
        "startChar": 63,
        "endLine": 2270,
        "endChar": 78
      },
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c904e354_3b4cc4b3",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 2273,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-10-21T09:39:32Z",
      "side": 1,
      "message": "- RequiresFpuRegister() should be used instead of a fixed register from the calling convention: as there is no call we wouldn\u0027t want to restrict the register allocator from choosing an arbitrary free register.\n- Location::kNoOutputOverlap should be added for the output register as the live intervals for the input and output value don\u0027t overlap in the implementation; the same register could be in theory used for the output and one of the inputs.\n\nI\u0027d suggest to take a look at CreateFPToFPLocations as an example.",
      "range": {
        "startLine": 2273,
        "startChar": 23,
        "endLine": 2273,
        "endChar": 36
      },
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c738569d_52323f91",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 2273,
      "author": {
        "id": 1373934
      },
      "writtenOn": "2021-11-11T18:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c904e354_3b4cc4b3",
      "range": {
        "startLine": 2273,
        "startChar": 23,
        "endLine": 2273,
        "endChar": 36
      },
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d435a2de_d190feae",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 4206,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-10-21T09:39:32Z",
      "side": 1,
      "message": "I think InputFPRegisterAt and FPRegisterFrom (see common_arm64.h) might be helpful here.",
      "range": {
        "startLine": 4206,
        "startChar": 16,
        "endLine": 4206,
        "endChar": 25
      },
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dc2a457_aefc83e3",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 4206,
      "author": {
        "id": 1373934
      },
      "writtenOn": "2021-11-11T18:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d435a2de_d190feae",
      "range": {
        "startLine": 4206,
        "startChar": 16,
        "endLine": 4206,
        "endChar": 25
      },
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56d9e2f7_57553460",
        "filename": "test/082-inline-execute/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 991,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-10-21T09:39:32Z",
      "side": 1,
      "message": "I\u0027d suggest to add some corner tests to check the behavior complies with:\n - \u0027fused\u0027 type of the operation - that only one rounding is happening.\n - rounding to nearest mode.",
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24f92517_c61b62f2",
        "filename": "test/082-inline-execute/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 991,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2021-11-12T14:54:46Z",
      "side": 1,
      "message": "This is an optional comment.\n\nSorry that I haven\u0027t suggested it in the first place, but maybe it is worth to add those corner cases, described in https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#fma-double-double-double-:\n\n - If any argument is NaN, the result is NaN.\n - If one of the first two arguments is infinite and the other is zero, the result is NaN.\n - If the exact product of the first two arguments is infinite (in other words, at least one of the arguments is infinite and the other is neither zero nor NaN) and the third argument is an infinity of the opposite sign, the result is NaN.\n - mentioned cases with +0.0 and -0.0.",
      "parentUuid": "56d9e2f7_57553460",
      "revId": "52b59ad5ec46efab1fc9a1fa02311a31942a6de7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}