{
  "comments": [
    {
      "key": {
        "uuid": "ca2490af_766a010b",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-31T21:08:37Z",
      "side": 1,
      "message": "0?",
      "range": {
        "startLine": 156,
        "startChar": 27,
        "endLine": 156,
        "endChar": 35
      },
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a6260ef_35547bd1",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-31T21:25:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca2490af_766a010b",
      "range": {
        "startLine": 156,
        "startChar": 27,
        "endLine": 156,
        "endChar": 35
      },
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea295486_e2a74e05",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-31T21:08:37Z",
      "side": 1,
      "message": "Is phi guaranteed to be true for IsLoopHeaderPhi? If yes, a DCHECK here would be nice to tie the SSA-based cycle detection back to CFG-based one.",
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a2e188f_7a6665a1",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-31T21:25:56Z",
      "side": 1,
      "message": "defensive start of the classification",
      "parentUuid": "ea295486_e2a74e05",
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea295486_82976aa1",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-31T21:08:37Z",
      "side": 1,
      "message": "The loop phi\u0027s input0 is always loop invariant so it\u0027s not necessary to try the two orders, if it\u0027s guaranteed to be a loop header phi as said in my previous comment.",
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca4d7087_9a2d9995",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-31T21:25:56Z",
      "side": 1,
      "message": "yeah, I suspected that, but was not sure if I really could rely on such properties (I like to have defensive code in such case); but if first is always external and second internal, I can remove the second call indeed",
      "parentUuid": "ea295486_82976aa1",
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea523422_a0e5c615",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-31T21:08:37Z",
      "side": 1,
      "message": "So even though SCC (a graph) is detected, we only handle a single-cycle case now for iv, right?",
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5ce834_565b7a5b",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-31T21:25:56Z",
      "side": 1,
      "message": "there will be more classifications later, some of which are more general; I just did not want this code to grow above what can be reviewed first time :-)",
      "parentUuid": "ea523422_a0e5c615",
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca2490af_a23dc446",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2015-07-31T17:43:17Z",
      "side": 1,
      "message": "Why is this classified as linear for multiplications?",
      "range": {
        "startLine": 297,
        "startChar": 10,
        "endLine": 297,
        "endChar": 17
      },
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a2e188f_dfb8abc0",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-07-31T18:16:58Z",
      "side": 1,
      "message": "This is the transfer over * (so think derived, not basic).\nSo if we have x * y\n  where x is classified linear as a_ * i + b_\n  and y is classified as invariant, just itself,\nwe get a new linear expression\n   (a_ * y) * i + (b_ * y)\n\nPerhaps naming the parameters x and y instead of a and b would be a bit more clear to see the difference between top and sub expressions better (as I realized writing down the explanation :-)",
      "parentUuid": "ca2490af_a23dc446",
      "range": {
        "startLine": 297,
        "startChar": 10,
        "endLine": 297,
        "endChar": 17
      },
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5ce834_fbb137cd",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-31T21:08:37Z",
      "side": 1,
      "message": "I think we don\u0027t use xxx_ naming for public fields.",
      "revId": "502a4aee63c62042c46b546861813cd3668b5a5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}