{
  "comments": [
    {
      "key": {
        "uuid": "0a5b3b40_9cb10795",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 16
      },
      "lineNbr": 213,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-20T04:34:29Z",
      "side": 1,
      "message": "I\u0027ve done my best to guarantee forward progress during graph coloring, so we wouldn\u0027t need an NDEBUG limit here. Still, is there a compiler timeout, just in case?",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 213,
        "endChar": 64
      },
      "revId": "f2c54ff0c3629ccdd3017ded87d71fd329795101",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5b3b40_3c79fbd8",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 16
      },
      "lineNbr": 268,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-20T04:34:29Z",
      "side": 1,
      "message": "This is a fairly important TODO, since being too conservative here can mean spilling too many callee-save registers at the beginning of a function.",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 268,
        "endChar": 78
      },
      "revId": "f2c54ff0c3629ccdd3017ded87d71fd329795101",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a7abff6_6883e363",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 16
      },
      "lineNbr": 268,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-20T23:52:15Z",
      "side": 1,
      "message": "After some testing, this turned out to be too conservative, because all registers are blocked at the top of a catch block, yet shouldn\u0027t be considered allocated registers. I\u0027ve updated this behavior in PS17, and I now count: assigned registers, fixed input registers, fixed output registers, and fixed temporaries.",
      "parentUuid": "0a5b3b40_3c79fbd8",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 268,
        "endChar": 78
      },
      "revId": "f2c54ff0c3629ccdd3017ded87d71fd329795101",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5b3b40_1cef5784",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 16
      },
      "lineNbr": 327,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-20T04:34:29Z",
      "side": 1,
      "message": "As I mentioned, some of the code in this method (and the methods it calls) is adapted from the linear scan allocator. Ideally, the register allocator base class could become a driver class that does this setup before calling into a subclass, but some details are too implementation-specific right now, and I hesitate to further refactor linear scan for the sake of graph coloring. Let me know what you think.",
      "range": {
        "startLine": 327,
        "startChar": 0,
        "endLine": 327,
        "endChar": 81
      },
      "revId": "f2c54ff0c3629ccdd3017ded87d71fd329795101",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5b3b40_fc3da313",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 16
      },
      "lineNbr": 555,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-20T04:34:29Z",
      "side": 1,
      "message": "Is there a cleaner way to check that we are at the end of the block? Is (position + 1) the correct place to split when at the end of a block?",
      "range": {
        "startLine": 552,
        "startChar": 10,
        "endLine": 555,
        "endChar": 29
      },
      "revId": "f2c54ff0c3629ccdd3017ded87d71fd329795101",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5b3b40_5c626f14",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 16
      },
      "lineNbr": 635,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-20T04:34:29Z",
      "side": 1,
      "message": "Is it true that this needs to be special-cased, or are the live intervals such that this constraint will automatically be represented in the interference graph?",
      "range": {
        "startLine": 634,
        "startChar": 0,
        "endLine": 635,
        "endChar": 51
      },
      "revId": "f2c54ff0c3629ccdd3017ded87d71fd329795101",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5b3b40_5cab8f20",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 16
      },
      "lineNbr": 891,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-20T04:34:29Z",
      "side": 1,
      "message": "[Highlighting this TODO]",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 891,
        "endChar": 40
      },
      "revId": "f2c54ff0c3629ccdd3017ded87d71fd329795101",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}