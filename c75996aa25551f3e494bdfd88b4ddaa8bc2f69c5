{
  "comments": [
    {
      "key": {
        "uuid": "c398d328_75e62bc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-17T22:50:17Z",
      "side": 1,
      "message": "ptal",
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adbbffb0_e3164e7a",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2020-09-17T23:42:17Z",
      "side": 1,
      "message": "Doesn\u0027t the compiler have assumptions about the memory being cleared? Maybe we should always do the clearing on the allocator side instead.",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "add96c65_45c3245d",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-17T23:46:46Z",
      "side": 1,
      "message": "No. The allocators are allowed to leave whatever data in the returned buffer at every level AIUI.\n\nhttps://en.cppreference.com/w/cpp/memory/allocator/allocate\n\n\u003e Allocates n * sizeof(T) bytes of uninitialized storage by calling ::operator new(std::size_t) or ::operator new(std::size_t, std::align_val_t) (since C++17), but it is unspecified when and how this function is called. The pointer hint may be used to provide locality of reference: the allocator, if supported by the implementation, will attempt to allocate the new memory block as close as possible to hint.\n\nThis is just BitVector failing to take it into account in one place. Below in the Resize function we correctly clear it.",
      "parentUuid": "adbbffb0_e3164e7a",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65b2e851_763158eb",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2020-09-17T23:53:07Z",
      "side": 1,
      "message": "This is using art::Allocator though and not the std one.",
      "parentUuid": "add96c65_45c3245d",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2281e0a_1d4a52ce",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-18T00:01:02Z",
      "side": 1,
      "message": "The code elsewhere in BitVector seems to indicate that this is allowed behavior.\n\nThis isn\u0027t really used very much and almost all uses are the MallocAllocator which uses calloc(), that\u0027s why it didn\u0027t get found earlier.\n\nThis is only a problem with the ArenaAllocators which definitely don\u0027t do clearing.",
      "parentUuid": "65b2e851_763158eb",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5ffce6d_8835b8dc",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2020-09-18T00:50:51Z",
      "side": 1,
      "message": "Did you hit a bug here? or it\u0027s just an opportunistic clean up?\n\nThe change seems fine, but if this indeed a problem, how come we never hit it? We use BitVectors in several places.",
      "parentUuid": "a2281e0a_1d4a52ce",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b90906f1_2e8844df",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-18T02:35:23Z",
      "side": 1,
      "message": "I hit it while changing my LSE change to use bit-vectors more.\n\nMost uses use the MallocAllocator which allocates with calloc so that zeros everything for them.\n\nMy change uses the arena allocators which are just bump-pointers.",
      "parentUuid": "c5ffce6d_8835b8dc",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2cfae76_085b1b76",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2020-09-18T02:51:31Z",
      "side": 1,
      "message": "Does this have any negative impact on the runtime or the compiler?",
      "parentUuid": "b90906f1_2e8844df",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a1ac585_b9482385",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-09-18T08:41:03Z",
      "side": 1,
      "message": "There\u0027s lots of uses of BitVector in the compiler. Do you know why they\u0027re not affected by it?",
      "parentUuid": "a2cfae76_085b1b76",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa4986b_c9e8c2f9",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-18T15:44:37Z",
      "side": 1,
      "message": "Luck?\n\nHonestly I was surprised this didn\u0027t cause issues when I found this. That\u0027s why I added a test for this.",
      "parentUuid": "8a1ac585_b9482385",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a99b27d2_b438735e",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-09-18T16:00:09Z",
      "side": 1,
      "message": "The test isn\u0027t using arenas, and I believe arenas always return cleared data (see MallocArenaPool::AllocArena  and MemMapArenaPool::AllocArena, which ends up calling memset(0)).\n\nLooking at our uses in the compiler, there\u0027s lots of assumptions the data structures allocated with arenas are initialized with 0.",
      "parentUuid": "4aa4986b_c9e8c2f9",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c97ba829_c8bf7faa",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-18T16:06:52Z",
      "side": 1,
      "message": "ScopedArenaAllocator does not.\n\nhttps://cs.android.com/android/platform/superproject/+/master:art/libartbase/base/scoped_arena_allocator.h;l\u003d159?q\u003dScopedArenaAllocator\u0026ss\u003dandroid%2Fplatform%2Fsuperproject\n\nBumpPtr: https://cs.android.com/android/platform/superproject/+/master:art/libartbase/base/scoped_arena_allocator.h;drc\u003dmaster;l\u003d97?q\u003dScopedArenaAllocator\u0026ss\u003dandroid%2Fplatform%2Fsuperproject\n\nArena destruction:\nhttps://cs.android.com/android/platform/superproject/+/master:art/libartbase/base/scoped_arena_allocator.cc;l\u003d146;drc\u003dmaster;bpv\u003d1;bpt\u003d1\n\nNo memsets anywhere.\n\nI guess this worked since in other places the non-scoped ArenaAllocators were used.",
      "parentUuid": "a99b27d2_b438735e",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}