{
  "comments": [
    {
      "key": {
        "uuid": "c398d328_75e62bc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-17T22:50:17Z",
      "side": 1,
      "message": "ptal",
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adbbffb0_e3164e7a",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2020-09-17T23:42:17Z",
      "side": 1,
      "message": "Doesn\u0027t the compiler have assumptions about the memory being cleared? Maybe we should always do the clearing on the allocator side instead.",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "add96c65_45c3245d",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-17T23:46:46Z",
      "side": 1,
      "message": "No. The allocators are allowed to leave whatever data in the returned buffer at every level AIUI.\n\nhttps://en.cppreference.com/w/cpp/memory/allocator/allocate\n\n\u003e Allocates n * sizeof(T) bytes of uninitialized storage by calling ::operator new(std::size_t) or ::operator new(std::size_t, std::align_val_t) (since C++17), but it is unspecified when and how this function is called. The pointer hint may be used to provide locality of reference: the allocator, if supported by the implementation, will attempt to allocate the new memory block as close as possible to hint.\n\nThis is just BitVector failing to take it into account in one place. Below in the Resize function we correctly clear it.",
      "parentUuid": "adbbffb0_e3164e7a",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65b2e851_763158eb",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2020-09-17T23:53:07Z",
      "side": 1,
      "message": "This is using art::Allocator though and not the std one.",
      "parentUuid": "add96c65_45c3245d",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2281e0a_1d4a52ce",
        "filename": "libartbase/base/bit_vector.cc",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-09-18T00:01:02Z",
      "side": 1,
      "message": "The code elsewhere in BitVector seems to indicate that this is allowed behavior.\n\nThis isn\u0027t really used very much and almost all uses are the MallocAllocator which uses calloc(), that\u0027s why it didn\u0027t get found earlier.\n\nThis is only a problem with the ArenaAllocators which definitely don\u0027t do clearing.",
      "parentUuid": "65b2e851_763158eb",
      "range": {
        "startLine": 43,
        "startChar": 21,
        "endLine": 43,
        "endChar": 30
      },
      "revId": "c75996aa25551f3e494bdfd88b4ddaa8bc2f69c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}