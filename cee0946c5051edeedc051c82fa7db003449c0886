{
  "comments": [
    {
      "key": {
        "uuid": "d64c1fb5_775c6764",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 19,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-08-06T16:40:19Z",
      "side": 1,
      "message": "I am very skeptical that this is wise.\n\nWhy not just use the .debug_abbrev parsing code we already have to find all the addr\u0027s we need to fix.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56390f00_ea26d81a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 19,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-08-07T05:33:55Z",
      "side": 1,
      "message": "both .debug_info, .debug_line and eh_frame have they own syntaxes to parse. I suggest .rel.debug to not implement parsing.",
      "parentUuid": "d64c1fb5_775c6764",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d64c1fb5_97d3f341",
        "filename": "compiler/elf_fixup.cc",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-08-06T12:08:56Z",
      "side": 1,
      "message": "Shouldn\u0027t this and all the above be \u0027to\u0027, not \u0027fo\u0027?  Looks like copy/paste of the same message.",
      "range": {
        "startLine": 65,
        "startChar": 30,
        "endLine": 65,
        "endChar": 32
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56390f00_2f7c55c6",
        "filename": "compiler/elf_fixup.cc",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-08-07T05:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d64c1fb5_97d3f341",
      "range": {
        "startLine": 65,
        "startChar": 30,
        "endLine": 65,
        "endChar": 32
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6684304_94ac9d75",
        "filename": "compiler/elf_writer_quick.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-08-06T16:40:19Z",
      "side": 1,
      "message": "Any reason for this?",
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76029343_14009a24",
        "filename": "compiler/elf_writer_quick.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-08-07T05:33:55Z",
      "side": 1,
      "message": "just suggested to not make unnecessary copies by sending the parameter by value. Instead, send it by reference.",
      "parentUuid": "f6684304_94ac9d75",
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16431782_19571c3c",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 7
      },
      "lineNbr": 576,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-08-06T16:40:19Z",
      "side": 1,
      "message": "I\u0027d put a comment noting that the code is also used for GDB init.",
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d64c1fb5_f7387709",
        "filename": "runtime/elf_file.cc",
        "patchSetId": 7
      },
      "lineNbr": 1075,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-08-06T16:40:19Z",
      "side": 1,
      "message": "Document what they are with comments please.",
      "range": {
        "startLine": 1070,
        "startChar": 2,
        "endLine": 1075,
        "endChar": 4
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56390f00_eaab7808",
        "filename": "runtime/elf_file.cc",
        "patchSetId": 7
      },
      "lineNbr": 1075,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-08-07T05:33:55Z",
      "side": 1,
      "message": "Added the following comment to elf_file.h:\n  // Normally debug sections do not have relocation tables in Elf files.\n  // But we need to be able to fixup addresses in the debug sections\n  // when we patchoat the file or prepare the sections for gdb. For these\n  // purposes we maintain .rel.debug section, which contains a sequence \n  // of addresses to patch:\n  // struct {\n  //   byte section_index; // DEBUG_SECTION_INDEX\n  //   Elf32_Offs offset_to_patch; \n  // }\n  // offset_to_patch refers to a relocated address in the debug section\n  // pointed by the section_index (either .debug_info, .debug_line\n  // or eh_frame)",
      "parentUuid": "d64c1fb5_f7387709",
      "range": {
        "startLine": 1070,
        "startChar": 2,
        "endLine": 1075,
        "endChar": 4
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6684304_f4bcf1a2",
        "filename": "runtime/elf_file.cc",
        "patchSetId": 7
      },
      "lineNbr": 1078,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-08-06T16:40:19Z",
      "side": 1,
      "message": "uintptr_t* rel_table \u003d reinterpret_cast\u003cuintptr_t*\u003e(...)?",
      "range": {
        "startLine": 1078,
        "startChar": 0,
        "endLine": 1078,
        "endChar": 51
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76029343_94392aed",
        "filename": "runtime/elf_file.cc",
        "patchSetId": 7
      },
      "lineNbr": 1078,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-08-07T05:33:55Z",
      "side": 1,
      "message": "Bytes are read from .rel.debug using \"rel_table[entry]\".\n\"offset\" is in the patched section, pointed by \"sec_id\".\npatched_section[sec_id] is one of debug_info-\u003esh_offset, debug_line-\u003esh_offset or eh_frame-\u003esh_offset.",
      "parentUuid": "f6684304_f4bcf1a2",
      "range": {
        "startLine": 1078,
        "startChar": 0,
        "endLine": 1078,
        "endChar": 51
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d64c1fb5_178fe3d8",
        "filename": "runtime/elf_file.cc",
        "patchSetId": 7
      },
      "lineNbr": 1089,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-08-06T16:40:19Z",
      "side": 1,
      "message": "How the hell does this work?\n\nAlso, if this does what I think it does you should consider just reworking the methods already there.",
      "range": {
        "startLine": 1079,
        "startChar": 0,
        "endLine": 1089,
        "endChar": 5
      },
      "revId": "cee0946c5051edeedc051c82fa7db003449c0886",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}