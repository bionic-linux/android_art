{
  "comments": [
    {
      "key": {
        "uuid": "71c4c71e_e192985d",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "This is consistent with the rest of this file. But doesn\u0027t kWriteSideEffects suffice for all of these? That should prevent reprdering w.r.t. loads and stores, as well as native calls, etc.? These presumably shouldn\u0027t trigger a GC.",
      "range": {
        "startLine": 162,
        "startChar": 59,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3da30007_6c877ce4",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "Is this too strong? kAllWrites could be used here I think?",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa587ad7_df26fbcd",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "Is this too strong? kAllReads could be used here I think?",
      "range": {
        "startLine": 166,
        "startChar": 65,
        "endLine": 166,
        "endChar": 80
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e9c0f6_2052d97e",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2312,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "nit: as these are identical to the VarHandle implementations you could write\n\n   case kUnsafeFullFence:\n   case kVarHandleFullFence:\n\ninstead",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09784cb4_eddb38ac",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "is kAnyStore right here?\n\nIt seems like it wouldn\u0027t wait for LOADs to complete.",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da5edc09_e3bb8b6e",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "The intent was for kAnyStore to order a load or a store with respect to a later store. Which is what we want here. I think this is OK.",
      "parentUuid": "09784cb4_eddb38ac",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c27a9adc_a1fe4999",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T17:37:39Z",
      "side": 1,
      "message": "Sorry, should\u0027ve noticed we have a separate \u0027kAnyStore\u0027 and a \u0027kStoreStore\u0027. Agreed this is correct.\n\nIMHO the naming is extremely confusing and kAnyStore-\u003ekRelease, kLoadAny-\u003ekAcquire would\u0027ve been saner.",
      "parentUuid": "da5edc09_e3bb8b6e",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7677fac_9e22a7c0",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2328,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "I somewhat grudgingly agree this is correct. I think this should never have been exposed, and would almost be tempted to quietly turn it into kAnyStore. But not quite.",
      "range": {
        "startLine": 2328,
        "startChar": 54,
        "endLine": 2328,
        "endChar": 65
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bd2b9c6_f6bdcc36",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "QuasiAtomic::ThreadFenceForConstructor does a DMB ISH ST",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5cae78a_9b714e7a",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "If this is only for the interpreter, does it matter enough to bother? IMO, nobody should be using this anyway. The performance benefit is small, and the resulting code is brittle:\n\ntmp.a \u003d 17;\nStoreStoreFence();\nx \u003d tmp; // Publish tmp\n\nworks. But\ntmp.a \u003d 17;\nassert(tmp.a \u003d\u003d 17);\nStoreStoreFence();\nx \u003d tmp; // Publish tmp\n\nmay break if a is subsequently modified.",
      "parentUuid": "3bd2b9c6_f6bdcc36",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77ca90d2_32ed4627",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T17:37:39Z",
      "side": 1,
      "message": "It\u0027s using \"DMB ISHST\" for a StoreStoreFence() the way the intrinsic is lowered in the compiler.\n\nRight now it would get different behavior between interpreted and compiled code.\n------------\n\nI would\u0027ve made the same note about DMBISHLD but the C++ compiler is smart enough to use it there for Acquire.",
      "parentUuid": "a5cae78a_9b714e7a",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01e58dcf_248dd883",
        "filename": "test/988-method-trace/gen_srcs.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "Can you put a TODO/bug# here? VarHandle is not supposed to be hidden API.",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}