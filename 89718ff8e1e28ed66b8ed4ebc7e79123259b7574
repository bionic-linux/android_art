{
  "comments": [
    {
      "key": {
        "uuid": "71c4c71e_e192985d",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "This is consistent with the rest of this file. But doesn\u0027t kWriteSideEffects suffice for all of these? That should prevent reprdering w.r.t. loads and stores, as well as native calls, etc.? These presumably shouldn\u0027t trigger a GC.",
      "range": {
        "startLine": 162,
        "startChar": 59,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9e82c40_02a7cda8",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T17:51:17Z",
      "side": 1,
      "message": "Upon looking at this some more, I\u0027m not sure there\u0027s a discernible difference between kAllSideEffects and kWriteSideEffects?\n\nA \"Write\" side effect seems to be equally strong to a \"Write+Read\" side effect, it seems to be mostly a sanity state (a bunch of \u0027reads\u0027 and \u0027writes\u0027 collapsed into one side effect become \u0027read+write\u0027) for debugging/reasoning.\n\n-------\nIt\u0027s also a bit too restrictive for our memory model, there\u0027s no way to encode direction, so we can\u0027t say \"it\u0027s ok to reorder past this, but not prior to this\" (or vice versa). Probably not worth fixing at this time though.",
      "parentUuid": "71c4c71e_e192985d",
      "range": {
        "startLine": 162,
        "startChar": 59,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b05a8e11_b8e143a8",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T19:18:13Z",
      "side": 1,
      "message": "I thought the difference was that kAllSideEffects implied that a suspend point could be encountered as part of the intrinsic, and hence the state needs to be understandable to the GC? That shouldn\u0027t be true for any fences, at least on modern procesors.",
      "parentUuid": "b9e82c40_02a7cda8",
      "range": {
        "startLine": 162,
        "startChar": 59,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2e3a40e_3f37fd4a",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T20:07:24Z",
      "side": 1,
      "message": "I see, yes, there\u0027s a \"depends on GC\" bit and a \"can trigger GC\" bit which we do not need to set for the fences.\n\n   SideEffects::AllWritesAndReads() // could be appropriate here.\n\nThat\u0027s already what HMemoryBarrier uses, so perhaps there\u0027s a disconnect between the intrinsics side-effects and the HMemoryBarrier side-effects?",
      "parentUuid": "b05a8e11_b8e143a8",
      "range": {
        "startLine": 162,
        "startChar": 59,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80bd0f72_66d09f69",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-09-29T15:58:08Z",
      "side": 1,
      "message": "Changed to kWriteSideEffects.",
      "parentUuid": "b2e3a40e_3f37fd4a",
      "range": {
        "startLine": 162,
        "startChar": 59,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3da30007_6c877ce4",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "Is this too strong? kAllWrites could be used here I think?",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07508020_6d3de79f",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-09-29T15:58:08Z",
      "side": 1,
      "message": "Changed to kWriteSideEffects.",
      "parentUuid": "3da30007_6c877ce4",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa587ad7_df26fbcd",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "Is this too strong? kAllReads could be used here I think?",
      "range": {
        "startLine": 166,
        "startChar": 65,
        "endLine": 166,
        "endChar": 80
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e744923a_65f8ccc5",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T19:18:13Z",
      "side": 1,
      "message": "Agreed, though I remain torn between trying to make this as fast as possible and as slow as possible :-)",
      "parentUuid": "fa587ad7_df26fbcd",
      "range": {
        "startLine": 166,
        "startChar": 65,
        "endLine": 166,
        "endChar": 80
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e05be9d1_2c644e7e",
        "filename": "compiler/intrinsics_list.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-09-29T15:58:08Z",
      "side": 1,
      "message": "Changed to kReadSideEffects.",
      "parentUuid": "e744923a_65f8ccc5",
      "range": {
        "startLine": 166,
        "startChar": 65,
        "endLine": 166,
        "endChar": 80
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e9c0f6_2052d97e",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2312,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "nit: as these are identical to the VarHandle implementations you could write\n\n   case kUnsafeFullFence:\n   case kVarHandleFullFence:\n\ninstead",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15767786_0c9d62b9",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2312,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-09-29T15:58:08Z",
      "side": 1,
      "message": "Yes, though for scrutiny purposes it may be better keeping the overlap between the Unsafe fences and VarHandle fences separate.",
      "parentUuid": "b4e9c0f6_2052d97e",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbe4b24f_05cb7b6e",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2312,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-29T16:43:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "15767786_0c9d62b9",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09784cb4_eddb38ac",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "is kAnyStore right here?\n\nIt seems like it wouldn\u0027t wait for LOADs to complete.",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da5edc09_e3bb8b6e",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "The intent was for kAnyStore to order a load or a store with respect to a later store. Which is what we want here. I think this is OK.",
      "parentUuid": "09784cb4_eddb38ac",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c27a9adc_a1fe4999",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T17:37:39Z",
      "side": 1,
      "message": "Sorry, should\u0027ve noticed we have a separate \u0027kAnyStore\u0027 and a \u0027kStoreStore\u0027. Agreed this is correct.\n\nIMHO the naming is extremely confusing and kAnyStore-\u003ekRelease, kLoadAny-\u003ekAcquire would\u0027ve been saner.",
      "parentUuid": "da5edc09_e3bb8b6e",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4865647_54056151",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-09-29T15:58:08Z",
      "side": 1,
      "message": "It\u0027d also more closely align with the text comments in nodes.h for MemBarrierKind. It might make sense to fold this into the CL. WDYT?",
      "parentUuid": "c27a9adc_a1fe4999",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef443811_f68150e3",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-29T16:43:54Z",
      "side": 1,
      "message": "RE: WDYT?\n\nIf you mean, should we rename to kAcquire and kRelease in this CL? That sounds good to me.",
      "parentUuid": "c4865647_54056151",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b7daecd_4c26c873",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2322,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-29T17:08:13Z",
      "side": 1,
      "message": "I\u0027m fine with that. It doesn\u0027t seem 100% consistent with kStoreStore, but that inconsistency is now already enshrined by VarHandle.",
      "parentUuid": "ef443811_f68150e3",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7677fac_9e22a7c0",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 2
      },
      "lineNbr": 2328,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "I somewhat grudgingly agree this is correct. I think this should never have been exposed, and would almost be tempted to quietly turn it into kAnyStore. But not quite.",
      "range": {
        "startLine": 2328,
        "startChar": 54,
        "endLine": 2328,
        "endChar": 65
      },
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bd2b9c6_f6bdcc36",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "QuasiAtomic::ThreadFenceForConstructor does a DMB ISH ST",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5cae78a_9b714e7a",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T17:18:45Z",
      "side": 1,
      "message": "If this is only for the interpreter, does it matter enough to bother? IMO, nobody should be using this anyway. The performance benefit is small, and the resulting code is brittle:\n\ntmp.a \u003d 17;\nStoreStoreFence();\nx \u003d tmp; // Publish tmp\n\nworks. But\ntmp.a \u003d 17;\nassert(tmp.a \u003d\u003d 17);\nStoreStoreFence();\nx \u003d tmp; // Publish tmp\n\nmay break if a is subsequently modified.",
      "parentUuid": "3bd2b9c6_f6bdcc36",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77ca90d2_32ed4627",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T17:37:39Z",
      "side": 1,
      "message": "It\u0027s using \"DMB ISHST\" for a StoreStoreFence() the way the intrinsic is lowered in the compiler.\n\nRight now it would get different behavior between interpreted and compiled code.\n------------\n\nI would\u0027ve made the same note about DMBISHLD but the C++ compiler is smart enough to use it there for Acquire.",
      "parentUuid": "a5cae78a_9b714e7a",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ea42a01_7180200b",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-09-28T19:18:13Z",
      "side": 1,
      "message": "I think the difference between interpreted and compiled code is fine. We strengthen fences due to implementation preferences all over the place. If we didn\u0027t, the hardware often does anyway.\n\nJust to be clear, the difference here is that ISHLD is an acquire fence, and ISHST is not a release fence. I argued against both LoadLoad and StoreStore, but LoadLoad is benign, and probably completely useless, since it\u0027s basically implemented as acquire everywhere.",
      "parentUuid": "77ca90d2_32ed4627",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88c81c31_64d00899",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T20:07:24Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "8ea42a01_7180200b",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3b486b0_fe16fa70",
        "filename": "runtime/interpreter/interpreter_intrinsics.cc",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-10-01T13:08:06Z",
      "side": 1,
      "message": "Per Hans\u0027s first comment, these are dropped for the interpreter.",
      "parentUuid": "88c81c31_64d00899",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01e58dcf_248dd883",
        "filename": "test/988-method-trace/gen_srcs.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-09-28T16:55:05Z",
      "side": 1,
      "message": "Can you put a TODO/bug# here? VarHandle is not supposed to be hidden API.",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62412a37_719528c2",
        "filename": "test/988-method-trace/gen_srcs.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-09-29T15:58:08Z",
      "side": 1,
      "message": "Tests added, removed this.",
      "parentUuid": "01e58dcf_248dd883",
      "revId": "89718ff8e1e28ed66b8ed4ebc7e79123259b7574",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}