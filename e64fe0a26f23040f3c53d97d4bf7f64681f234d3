{
  "comments": [
    {
      "key": {
        "uuid": "6b0d30ca_72a39eaf",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 7616,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-02-24T19:40:08Z",
      "side": 1,
      "message": "Why not char?",
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c5e4c09_dbfd8c1e",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 7616,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-02-24T20:02:56Z",
      "side": 1,
      "message": "I will probably add those later, but they are less likely to have any arithmetic done on them.",
      "parentUuid": "6b0d30ca_72a39eaf",
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b228628_f4e86ee4",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 1
      },
      "lineNbr": 740,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-02-24T20:13:00Z",
      "side": 1,
      "message": "Note that this function forms the brains behind the retargetable vectorizer. For each ISA, just check the features, and set the VL, supported types and other restrictions accordingly. When there is a choice, e.g. AVX and SSE, just pick the best one (probably widest SIMD, or perhaps one with least restrictions).",
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2496a20_203265f1",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-02-24T19:40:08Z",
      "side": 1,
      "message": "very nitpicky here, reading this description it seems more like an AlignmentOffset rather than an Alignment?",
      "range": {
        "startLine": 28,
        "startChar": 62,
        "endLine": 28,
        "endChar": 71
      },
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae4cfa65_28df26c5",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-02-24T20:02:56Z",
      "side": 1,
      "message": "The base is the alignment, the offset is a novelty that allows later optimization such as cache line split sequences. Note that ALIGN(16,0) is what we typically call 16-byte alignment, but ALIGN(16,4) is 4 bytes above such. So this is more general!",
      "parentUuid": "c2496a20_203265f1",
      "range": {
        "startLine": 28,
        "startChar": 62,
        "endLine": 28,
        "endChar": 71
      },
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aab27d5c_84bce79b",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-02-24T19:40:08Z",
      "side": 1,
      "message": "art/runtime/base maybe? That seems to be where we put generally-useful classes.",
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5561f099_7b6de72e",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-02-24T20:02:56Z",
      "side": 1,
      "message": "Ok, but I tried to keep this change as contained as possible. Let\u0027s see if others would prefer base too.",
      "parentUuid": "aab27d5c_84bce79b",
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4dcfcdc_92db52dd",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-02-24T19:40:08Z",
      "side": 1,
      "message": "any reason why not size_t or templated?",
      "range": {
        "startLine": 32,
        "startChar": 12,
        "endLine": 32,
        "endChar": 20
      },
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "323fed7b_69a3da9c",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-02-24T20:02:56Z",
      "side": 1,
      "message": "I was probably prematurely optimizing space. But above 64K alignment seems unlikely to be ever needed :-)",
      "parentUuid": "d4dcfcdc_92db52dd",
      "range": {
        "startLine": 32,
        "startChar": 12,
        "endLine": 32,
        "endChar": 20
      },
      "revId": "e64fe0a26f23040f3c53d97d4bf7f64681f234d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}