{
  "comments": [
    {
      "key": {
        "uuid": "7125789f_967fcc3b",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1510,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-02-01T10:57:50Z",
      "side": 1,
      "message": "I couldn\u0027t find anything in two instructions. Here are a couple other possibilities.\n\nUsing only one \u0027conditional\u0027 instruction (same as suggested before, but here we don\u0027t have integer overflows annoying us):\n\n    __ Cmp(op1_reg, 0);\n    __ Asr(out_reg, out_reg, 31);\n    __ Cinc(out_reg, out_reg, gt);\n\nOr using only arithmetic operations (we would need to not specify kNoOutputOverlap for this one):\n\n    __ Neg(out_reg, op1_reg);\n    __ Lsr(out_reg, out_reg, 31);\n    __ Orr(out_reg, out_reg, Operand(op1_reg, ASR, 31));\n\nI benchmarked the three routines on A53 and A57 in a tight loop, and they time exactly the same. I would have a preference for the `Cinc`, but sticking to yours is good as it mirrors the `compare()` code.",
      "revId": "e52d1257e1e8e6589d0964c9928613f7e7dc7930",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51207491_385d85fc",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1510,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-02-01T10:57:50Z",
      "side": 1,
      "message": "__ Cmp(op1_reg, 0);\n\nand get rid of `op2_reg`.",
      "range": {
        "startLine": 1510,
        "startChar": 18,
        "endLine": 1510,
        "endChar": 25
      },
      "revId": "e52d1257e1e8e6589d0964c9928613f7e7dc7930",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b140d043_3015a8cd",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1510,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-02-01T13:38:22Z",
      "side": 1,
      "message": "Let\u0027s keep the CMP+CSET/GT+CINV/LT here.\n\nFor Thumb2 int, maybe\n\n    CMP in, #1             // 16-bit if op1 is low reg.\n    ASR out, in, #31       // 32-bit, don\u0027t want to set flags (kCcKeep).\n    ADC(S?) out, out, out  // 16-bit if out is low reg (kCcDontCare).\n\nwith kNoOutputOverlap or\n\n    ASR(S?) out, in, #31   // 16-bit if both are low regs.\n    CMP in, #1             // 16-bit if op1 is low reg.\n    ADC(S?) out, out, out  // 16-bit if out is low reg.\n\nwith kOutputOverlap. (Or we could specify kNoOutputOverlap and select from the above depending on the registers we actually get.)",
      "parentUuid": "7125789f_967fcc3b",
      "revId": "e52d1257e1e8e6589d0964c9928613f7e7dc7930",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749006cb_a5901d00",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1510,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-01T18:29:43Z",
      "side": 1,
      "message": "Ah, did not know that would work too. Changed.\nThanks.",
      "parentUuid": "51207491_385d85fc",
      "range": {
        "startLine": 1510,
        "startChar": 18,
        "endLine": 1510,
        "endChar": 25
      },
      "revId": "e52d1257e1e8e6589d0964c9928613f7e7dc7930",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}