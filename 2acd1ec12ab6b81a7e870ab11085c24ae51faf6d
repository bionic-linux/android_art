{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "35b4de8f_2f6808c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2023-06-10T00:05:51Z",
      "side": 1,
      "message": "Sorry for digging this out after such a long time.\n\nDoes this fix the test only, or was the behaviour broken before the call to HWASanUntag in `Contains`? Asking because if it is the latter, we need to fix this for\n\na) MTE, which will also have tagged addresses and\nb) change the HWASan detection to runtime (by using a weak symbol)",
      "revId": "2acd1ec12ab6b81a7e870ab11085c24ae51faf6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a9b234f_c13c7b16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-06-12T10:15:35Z",
      "side": 1,
      "message": "I think this matters to non-tests as well.\n\nCan we make the untag unconditional?\n\nAlthough I guess the runtime check shouldn\u0027t be too slow.\n\nSo I guess whichever is simpler code...",
      "parentUuid": "35b4de8f_2f6808c2",
      "revId": "2acd1ec12ab6b81a7e870ab11085c24ae51faf6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e9a4c38_eb1253ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2023-06-12T16:18:55Z",
      "side": 1,
      "message": "Do you know what this affects? I browsed through the code and it seemed _mostly_ related to stacktrace printing, but I\u0027m not sure.",
      "parentUuid": "5a9b234f_c13c7b16",
      "revId": "2acd1ec12ab6b81a7e870ab11085c24ae51faf6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f3104b_724e7736",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2023-06-12T18:35:14Z",
      "side": 1,
      "message": "Unconditional untagging should be fast and simple.On Arm64 the top byte is either meaningless (TBI), or contains an MTE tag and/or PAC signature; none of that should be present in PC and all of them are not part of the memory address, so resetting the top byte before comparison is always correct.",
      "parentUuid": "5e9a4c38_eb1253ce",
      "revId": "2acd1ec12ab6b81a7e870ab11085c24ae51faf6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b4dbc24_372cb36c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2023-06-13T20:08:16Z",
      "side": 1,
      "message": "Discussed this offline. It seems like the memory for this data gets allocated by `mspace_malloc` from dlalloc directly. This does not get tagged with HWASan or MTE, so the untag should be unnecessary. I added a check\n\n```\nCHECK(reinterpret_cast\u003cuintptr_t\u003e(p) \u003d\u003d (reinterpret_cast\u003cuintptr_t\u003e(p) \u0026 ((1ULL \u003c\u003c 56) - 1)));\n```\n\ninto `HWASanUntag` and was able to boot up a HWASan image without crashes.",
      "parentUuid": "b2f3104b_724e7736",
      "revId": "2acd1ec12ab6b81a7e870ab11085c24ae51faf6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50ff744c_f612b0f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2023-06-15T21:27:44Z",
      "side": 1,
      "message": "Sent https://r.android.com/2626113 to add a DCHECK for this and fix up the  test (that did use malloc for code).",
      "parentUuid": "4b4dbc24_372cb36c",
      "revId": "2acd1ec12ab6b81a7e870ab11085c24ae51faf6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}