{
  "comments": [
    {
      "key": {
        "uuid": "0ba13c5e_5c57fda0",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "Why not? Because we don\u0027t expect checkcast of Object?",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 59,
        "endChar": 29
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b7a1caa_b44e602b",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T16:33:55Z",
      "side": 1,
      "message": "I still need to document this.\n\nSo Top is not really java.lang.Object (it\u0027s handle will be a nullptr). That\u0027s because I don\u0027t have access to the mirror::Class of java.lang.Object... so when I merge incompatible types I cannot assign to the object the proper java.lang.Object class. \n\nWhat I can test is that obj_rti.IsTop() and class_rti.GetTypeHandle()-\u003eIsObjectClass(). If that\u0027s the case we can remove the cast.",
      "parentUuid": "0ba13c5e_5c57fda0",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 59,
        "endChar": 29
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ba13c5e_7c5c39c4",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "I would move this logic to ReferenceTypeInfo.",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 61,
        "endChar": 82
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b7d20a0_158714f6",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T16:33:55Z",
      "side": 1,
      "message": "I was trying to keep the nodes.h free of annotalysis constraints. This is why I pushed bits outside of it. I think it was just a matter of taste...",
      "parentUuid": "0ba13c5e_7c5c39c4",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 61,
        "endChar": 82
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4cdc89_a70e045c",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "indent is off.",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 63,
        "endChar": 8
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4cdc89_870b084c",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 881,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "SetTop",
      "range": {
        "startLine": 881,
        "startChar": 7,
        "endLine": 881,
        "endChar": 10
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b9440fe_5d64dbad",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 887,
        "startChar": 2,
        "endLine": 887,
        "endChar": 42
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4cdc89_67380cfd",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 897,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "Please document these. is_precise is we know the exact type? Would \u0027exact\u0027 be clearer?",
      "range": {
        "startLine": 895,
        "startChar": 1,
        "endLine": 897,
        "endChar": 15
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b7d20a0_358c9017",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 897,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T16:33:55Z",
      "side": 1,
      "message": "Yea, it\u0027s \u0027exact\u0027. Not useful right not but we can do additional sharpening based on it.\n\nI\u0027ll rename.",
      "parentUuid": "0b4cdc89_67380cfd",
      "range": {
        "startLine": 895,
        "startChar": 1,
        "endLine": 897,
        "endChar": 15
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b9440fe_1d5e53e4",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 1104,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "We need something like invalid reference type for primitive types.",
      "range": {
        "startLine": 1104,
        "startChar": 2,
        "endLine": 1104,
        "endChar": 41
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4cdc89_c728e0a7",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "I think that of you put the IsAssignableFrom on ReferenceTypeInfo, you dont need these.\n\nAlso, for reference, please don\u0027t create free-floating mirrors without handles.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 100,
        "endChar": 65
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b7d20a0_d5a99c6b",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T16:33:55Z",
      "side": 1,
      "message": "It makes things much easier to operate on mirror object directly but I understand your concern. I will try to use the handles in all places.",
      "parentUuid": "0b4cdc89_c728e0a7",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 100,
        "endChar": 65
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ba13c5e_dc51cda0",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "to do",
      "range": {
        "startLine": 104,
        "startChar": 17,
        "endLine": 104,
        "endChar": 21
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ba13c5e_5ca5bd48",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "Suggestion: !old_rti.Equals(new_rti)",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 121,
        "endChar": 82
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56267d9d_e67f7ec9",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T16:33:55Z",
      "side": 1,
      "message": "was like that in the beginning but then I change my mind when I realized that\u0027s an unconventional equal semantics on objects :) I\u0027ll try to find a better name and move it there",
      "parentUuid": "0ba13c5e_5ca5bd48",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 121,
        "endChar": 82
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4cdc89_8722e8c1",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "This isn\u0027t correct. The type of this guy is java.lang.Class. You need another field in the node to cover what class it actually refers to.",
      "range": {
        "startLine": 140,
        "startChar": 2,
        "endLine": 140,
        "endChar": 51
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56267d9d_c67a82dc",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T16:33:55Z",
      "side": 1,
      "message": "I was in doubt about this. I think we can treat this as a special node. Having another field complicates stuff unnecessarily because we don\u0027t generate LoadClass nodes when passing around/manipulating java.lang.Class objects.\n\nI also don\u0027t see an use for typing this with java.lang.Class.",
      "parentUuid": "0b4cdc89_8722e8c1",
      "range": {
        "startLine": 140,
        "startChar": 2,
        "endLine": 140,
        "endChar": 51
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6be0f8af_6fefb10b",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T17:34:40Z",
      "side": 1,
      "message": "Let me find one for you :-)\n\nObject a;\nif () {\n  a \u003d Foo.class;\n} else {\n  a \u003d new Foo();\n}\n\nWhat is the type of a after this? :-)",
      "parentUuid": "56267d9d_c67a82dc",
      "range": {
        "startLine": 140,
        "startChar": 2,
        "endLine": 140,
        "endChar": 51
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b7d20a0_95d004d3",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T17:42:56Z",
      "side": 1,
      "message": "oki, thanks!\n\nI wasn\u0027t aware that we use that node as an input :)",
      "parentUuid": "6be0f8af_6fefb10b",
      "range": {
        "startLine": 140,
        "startChar": 2,
        "endLine": 140,
        "endChar": 51
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb48687a_234e8ab2",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-13T16:05:54Z",
      "side": 1,
      "message": "This isn\u0027t the only interesting one for types. NewArray/Call/Field accesses/array accesses, .... also tell you which types they have.",
      "range": {
        "startLine": 145,
        "startChar": 4,
        "endLine": 146,
        "endChar": 54
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56267d9d_a6858675",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-02-13T16:33:55Z",
      "side": 1,
      "message": "I know, was planning to add them later... This servers as a skeleton for follow ups.",
      "parentUuid": "eb48687a_234e8ab2",
      "range": {
        "startLine": 145,
        "startChar": 4,
        "endLine": 146,
        "endChar": 54
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4baed466_e695fedb",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2015-02-14T00:01:39Z",
      "side": 1,
      "message": "Maybe add a TODO then?",
      "parentUuid": "56267d9d_a6858675",
      "range": {
        "startLine": 145,
        "startChar": 4,
        "endLine": 146,
        "endChar": 54
      },
      "revId": "db7382aa857236a21597e7597ba008bec049fffd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}