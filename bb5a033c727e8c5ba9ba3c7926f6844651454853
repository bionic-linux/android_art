{
  "comments": [
    {
      "key": {
        "uuid": "ef1bb842_ba726242",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T21:04:41Z",
      "side": 1,
      "message": "add your perf measurements here",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cf1cac9_69b6d16b",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T21:04:41Z",
      "side": 1,
      "message": "for only ... but reads a bit hard. It becomes more clear from the comments below so either rephrase, or just make this comment\n\n// Check it is safe to move ConstructorFence\n\nand leave the details to comments below",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca510af1_d625385a",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cf1cac9_69b6d16b",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31325c9c_14e2cc3f",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T21:04:41Z",
      "side": 1,
      "message": "you have two variables (ptr and boolean) that are used for almost the same thing\n\nif you would rename prev_inst into \"new_instance_inst\" then you could check for nullptr below\n\nless \"state\" to remember while reading",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d921499_69418d4f",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31325c9c_14e2cc3f",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3489fb88_0a03a690",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T21:04:41Z",
      "side": 1,
      "message": "TODO: ?",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5f1981b_5873f202",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "This isn\u0027t a TODO, I was hoping Nicolas would comment here regarding correctness.",
      "parentUuid": "3489fb88_0a03a690",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78d9d076_65ecb6e0",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1007,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-05-09T20:35:58Z",
      "side": 1,
      "message": "I wouldn\u0027t call this a hack but I don\u0027t want to argue about its actually semantics :)",
      "range": {
        "startLine": 1007,
        "startChar": 14,
        "endLine": 1007,
        "endChar": 18
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e117a580_1678aa14",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1007,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78d9d076_65ecb6e0",
      "range": {
        "startLine": 1007,
        "startChar": 14,
        "endLine": 1007,
        "endChar": 18
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9de8ff54_e5ee66ac",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-05-09T23:30:36Z",
      "side": 1,
      "message": "klass-\u003eIsStringClass()\nThe alignment also seems off here, but it should take one line with IsStringClass() anyway.",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a9bdd0a_cb1c78fa",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1024,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Done\n\n(Alignment should\u0027ve been fine, 4 spaces indent over the start of the subexpression at \"if (\" )",
      "parentUuid": "9de8ff54_e5ee66ac",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69c7c0ef_e9726a60",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "Please avoid.",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0813c293_121ec691",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-09T17:51:36Z",
      "side": 1,
      "message": "I seem to recall this was discussed in the past on go/art-style-guide ?\n\nI found an example for exactly this (Other C++ Features \u003e Auto) and it seemed to be agreed on at the time?\n\n  // Rewriting slightly with auto, the type is completely obvious from the RHS:\n \n   auto obj \u003d new Object(args); /// \u003c---- this. Same as L1047.\n   auto x \u003d std::make_shared\u003cObject\u003e(args);\n   auto y \u003d std::shared_ptr\u003cObject\u003e(obj);\n   auto address \u003d reinterpret_cast\u003cuintptr_t\u003e(obj) + offset;\n\nIf we don\u0027t want to use auto in optimizing at all, then fine, though I see 48 instances of auto in \u0027optimizing\u0027; nearly all of which are non-obvious and could be rewritten with an explicit type without loss of correctness or performance.",
      "parentUuid": "69c7c0ef_e9726a60",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "878e2337_c40bee2b",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T18:12:03Z",
      "side": 1,
      "message": "This auto seems ok, since the type is directly clear from the constructor. Just browsing through our code, we seem to have a mixed bag of auto uses. Can you give some rules on when and what to avoid?",
      "parentUuid": "0813c293_121ec691",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d39a43b7_9e145551",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-10T13:44:08Z",
      "side": 1,
      "message": "We avoid it in the compiler.",
      "parentUuid": "878e2337_c40bee2b",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "829bd41b_07fe7155",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-10T13:51:54Z",
      "side": 1,
      "message": "Why? Richard\u0027s argument about \"greppability\" does not apply as the line already contains \"HConstructorFence\".",
      "parentUuid": "d39a43b7_9e145551",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f574b9fa_f498babc",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-10T13:56:42Z",
      "side": 1,
      "message": "I\u0027ll use the \"consistency\" card.",
      "parentUuid": "829bd41b_07fe7155",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b1c5d4b_f452ea12",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-10T17:41:53Z",
      "side": 1,
      "message": "Not really? A simple grep gives 188 occurrences, so neither the \"we avoid it\" or \"consistency\" card holds. I was seriously asking for some guidelines on when to use them or not (since we seem to deviate from the standard style guide).",
      "parentUuid": "d39a43b7_9e145551",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2221dbc7_d6161c31",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "8b1c5d4b_f452ea12",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de2288cb_988cbac7",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 2617,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "Remove: things like this should be in a bug or design doc.",
      "range": {
        "startLine": 2617,
        "startChar": 6,
        "endLine": 2617,
        "endChar": 64
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f14752be_eddb053a",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 2617,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-09T21:24:12Z",
      "side": 1,
      "message": "Yes, I will remove, but can someone tell me if this is right? I think it\u0027s right, but I\u0027d like to make sure.",
      "parentUuid": "de2288cb_988cbac7",
      "range": {
        "startLine": 2617,
        "startChar": 6,
        "endLine": 2617,
        "endChar": 64
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4914af9_b2891865",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 2617,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-10T13:44:08Z",
      "side": 1,
      "message": "Depends what you want the users of the allocation to use: either the new instance, or the fence.\n\nDuring our last discussion, using the fence was something to investigate in the future.",
      "parentUuid": "f14752be_eddb053a",
      "range": {
        "startLine": 2617,
        "startChar": 6,
        "endLine": 2617,
        "endChar": 64
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19a67aaa_ec354114",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "follows",
      "range": {
        "startLine": 171,
        "startChar": 70,
        "endLine": 171,
        "endChar": 76
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0c58f13_5d7a2fe6",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19a67aaa_ec354114",
      "range": {
        "startLine": 171,
        "startChar": 70,
        "endLine": 171,
        "endChar": 76
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dadd3a7f_d5b4a953",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "A bit brittle as the optimizations could change this. Isn\u0027t the HNewInstance on input of the fence?",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 179,
        "endChar": 57
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdaf713c_4ac9e631",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-08T14:18:25Z",
      "side": 1,
      "message": "Yes, brittle, but hopefully this will at least mitigate the performance regressions by not duplicating DMBs executed at first.\n\n\u003e Isn\u0027t the HNewInstance on input of the fence?\n\nYes but it doesn\u0027t say much because to be fully robust it would need to say \u0027if there\u0027s no publishes of X between fence(x) and x \u003d new-instance\u0027 then it\u0027s safe to do this.\n\nIt has to happen at the same pass as the entrypoint gets set to Initialized, otherwise it\u0027s too early to do the fence removal [i.e. if it is initially Resolved and is later changed to Initialized, it is unsafe if the fence was already removed].\n\n---\nTo potentially make it less brittle: What I could do afterwards split out the publish analysis into a separate file (like escape analysis) and we could reuse it here to do this.\n\nThat being said, in terms of *performance* the CFRE pass I will add later will remove all the redundant fences. This trick in prepare_for_registers_allocation is purely to get the code size back by moving the DMB into the entrypoint if its allowed.",
      "parentUuid": "dadd3a7f_d5b4a953",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 179,
        "endChar": 57
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "120b2250_d2df3423",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-08T14:53:13Z",
      "side": 1,
      "message": "Measure the code size impact first to see if that\u0027s really desirable. I\u0027d expect the code size increase to be small enough and I\u0027d rather avoid adding new entrypoints and increasing sizeof(Thread).",
      "parentUuid": "fdaf713c_4ac9e631",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 179,
        "endChar": 57
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3840bae5_02b3422a",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Measurements added to commit message.\n\nAny other actions to take here?",
      "parentUuid": "120b2250_d2df3423",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 179,
        "endChar": 57
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8636903_b12f48d5",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-05-09T20:35:58Z",
      "side": 1,
      "message": "If go on with this after Vladimir suggestion for measurements you should do it in a proper optimization step. Maybe in the simplifier if a full pass gets to expensive.",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 189,
        "endChar": 5
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b100e88_066ffe66",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-09T20:52:44Z",
      "side": 1,
      "message": "It cannot happen *before* this pass for correctness reasons. I explain in the comments why.\n\nSo how can I do it in a \"proper optimization step\" then? Please let me know.",
      "parentUuid": "c8636903_b12f48d5",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 189,
        "endChar": 5
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3308f69_69e984df",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-09T21:22:21Z",
      "side": 1,
      "message": "Thought about this some more.\n\nIf we are more invasive on HNewInstance, we can flag it as having the barrier internal (or not). Then once we get to this pass, it can look at the flag and set the right entrypoint.\n\nAnd the way this could work is to have 4 logical entrypoint states\n\n   resolved-without-barrier\n   resolved-with-barrier\n   initialized-without-barrier\n   initialized-with-barrier\n\n(note: not sure about the soundness of resolved-without-barrier, possibly unsound).\n\nTo save Thread space if they end up being the same code (turns out the -with-barrier and -without-barrier cases have the same code) it can just not take up an extra field (but the GetXOffset function can return the same offset for 2 different states).\n\n----------------\n\nI was hesitant to do this because it\u0027s more invasive/complicated. Also it seems Vmarko is unsure if we even want to add more entrypoints.",
      "parentUuid": "8b100e88_066ffe66",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 189,
        "endChar": 5
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9935d2a8_75d3f9e0",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "What is the action to take here? \n\nI can also clean this up once I introduce a separate fence redundancy pass to group it with all the other fence logic.\n\n(TODO added)",
      "parentUuid": "d3308f69_69e984df",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 189,
        "endChar": 5
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "607da069_3110eb3b",
        "filename": "test/476-checker-ctor-memory-barrier/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T21:04:41Z",
      "side": 1,
      "message": "don\u0027t we want a CHECK-NOT if you want exactly three?",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b724f592_e1453e4d",
        "filename": "test/476-checker-ctor-memory-barrier/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-09T21:22:21Z",
      "side": 1,
      "message": "Does it need that? I thought the CHECK-NEXT already covers it.",
      "parentUuid": "607da069_3110eb3b",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85770903_97f3491f",
        "filename": "test/476-checker-ctor-memory-barrier/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Looking at CHECKER README this doesn\u0027t seem obviously wrong.\n\nI am assuming matching is greedy.\n\n   A A A D \n   1 2 3 4 \n\n\"CHECKS\" should be consumed in 1,2,3,4\n\nSo input like\n\n   A A A A D\n   1 2 3 4 5\n\nwould fail at (4).\n\nIf it was instead doing more complicated look-ahead/track-back parsing I suppose it could discard (1) and resume matching at 2-5.\n----\nPlease someone who knows CHECKER better than me chime in here.",
      "parentUuid": "b724f592_e1453e4d",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "847ee3cb_c98c9d5d",
        "filename": "test/529-checker-unresolved/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T21:04:41Z",
      "side": 1,
      "message": "is relying on this being B2 okay? I realize  this was in the original, but it now jumps out to me",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64c4c1ea_2208edb1",
        "filename": "test/529-checker-unresolved/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-09T21:22:21Z",
      "side": 1,
      "message": "I don\u0027t think I understand the question (I didn\u0027t write this test), can you elaborate?",
      "parentUuid": "847ee3cb_c98c9d5d",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3f5f524_c9e55fb9",
        "filename": "test/529-checker-unresolved/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-10T04:03:07Z",
      "side": 1,
      "message": "the loop:B2 tests exactly for the loop\u0027s header being basic block with label 2. That seems awfully brittle (just observing, I realize this was not yours)",
      "parentUuid": "64c4c1ea_2208edb1",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "991d7c27_ed3692a6",
        "filename": "test/529-checker-unresolved/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:43:24Z",
      "side": 1,
      "message": "Got it. Fixed.",
      "parentUuid": "b3f5f524_c9e55fb9",
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}