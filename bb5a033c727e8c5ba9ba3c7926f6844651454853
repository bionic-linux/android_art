{
  "comments": [
    {
      "key": {
        "uuid": "78d9d076_65ecb6e0",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1007,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-05-09T20:35:58Z",
      "side": 1,
      "message": "I wouldn\u0027t call this a hack but I don\u0027t want to argue about its actually semantics :)",
      "range": {
        "startLine": 1007,
        "startChar": 14,
        "endLine": 1007,
        "endChar": 18
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69c7c0ef_e9726a60",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "Please avoid.",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0813c293_121ec691",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-09T17:51:36Z",
      "side": 1,
      "message": "I seem to recall this was discussed in the past on go/art-style-guide ?\n\nI found an example for exactly this (Other C++ Features \u003e Auto) and it seemed to be agreed on at the time?\n\n  // Rewriting slightly with auto, the type is completely obvious from the RHS:\n \n   auto obj \u003d new Object(args); /// \u003c---- this. Same as L1047.\n   auto x \u003d std::make_shared\u003cObject\u003e(args);\n   auto y \u003d std::shared_ptr\u003cObject\u003e(obj);\n   auto address \u003d reinterpret_cast\u003cuintptr_t\u003e(obj) + offset;\n\nIf we don\u0027t want to use auto in optimizing at all, then fine, though I see 48 instances of auto in \u0027optimizing\u0027; nearly all of which are non-obvious and could be rewritten with an explicit type without loss of correctness or performance.",
      "parentUuid": "69c7c0ef_e9726a60",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "878e2337_c40bee2b",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-05-09T18:12:03Z",
      "side": 1,
      "message": "This auto seems ok, since the type is directly clear from the constructor. Just browsing through our code, we seem to have a mixed bag of auto uses. Can you give some rules on when and what to avoid?",
      "parentUuid": "0813c293_121ec691",
      "range": {
        "startLine": 1047,
        "startChar": 2,
        "endLine": 1047,
        "endChar": 6
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de2288cb_988cbac7",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 2617,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "Remove: things like this should be in a bug or design doc.",
      "range": {
        "startLine": 2617,
        "startChar": 6,
        "endLine": 2617,
        "endChar": 64
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19a67aaa_ec354114",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "follows",
      "range": {
        "startLine": 171,
        "startChar": 70,
        "endLine": 171,
        "endChar": 76
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dadd3a7f_d5b4a953",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-08T09:02:01Z",
      "side": 1,
      "message": "A bit brittle as the optimizations could change this. Isn\u0027t the HNewInstance on input of the fence?",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 179,
        "endChar": 57
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdaf713c_4ac9e631",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-08T14:18:25Z",
      "side": 1,
      "message": "Yes, brittle, but hopefully this will at least mitigate the performance regressions by not duplicating DMBs executed at first.\n\n\u003e Isn\u0027t the HNewInstance on input of the fence?\n\nYes but it doesn\u0027t say much because to be fully robust it would need to say \u0027if there\u0027s no publishes of X between fence(x) and x \u003d new-instance\u0027 then it\u0027s safe to do this.\n\nIt has to happen at the same pass as the entrypoint gets set to Initialized, otherwise it\u0027s too early to do the fence removal [i.e. if it is initially Resolved and is later changed to Initialized, it is unsafe if the fence was already removed].\n\n---\nTo potentially make it less brittle: What I could do afterwards split out the publish analysis into a separate file (like escape analysis) and we could reuse it here to do this.\n\nThat being said, in terms of *performance* the CFRE pass I will add later will remove all the redundant fences. This trick in prepare_for_registers_allocation is purely to get the code size back by moving the DMB into the entrypoint if its allowed.",
      "parentUuid": "dadd3a7f_d5b4a953",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 179,
        "endChar": 57
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "120b2250_d2df3423",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-08T14:53:13Z",
      "side": 1,
      "message": "Measure the code size impact first to see if that\u0027s really desirable. I\u0027d expect the code size increase to be small enough and I\u0027d rather avoid adding new entrypoints and increasing sizeof(Thread).",
      "parentUuid": "fdaf713c_4ac9e631",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 179,
        "endChar": 57
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8636903_b12f48d5",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-05-09T20:35:58Z",
      "side": 1,
      "message": "If go on with this after Vladimir suggestion for measurements you should do it in a proper optimization step. Maybe in the simplifier if a full pass gets to expensive.",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 189,
        "endChar": 5
      },
      "revId": "bb5a033c727e8c5ba9ba3c7926f6844651454853",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}