{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "aacf7b21_f376aef7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-01T00:33:32Z",
      "side": 1,
      "message": "Should eventually say something about why.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 58
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06c88378_fa323cb1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T06:33:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aacf7b21_f376aef7",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 58
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a4b5a67_72b805c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-01T00:33:32Z",
      "side": 1,
      "message": "Switching to a newer PS for the rest ...",
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06512514_eb7bcfe2",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-01T00:33:32Z",
      "side": 1,
      "message": "Nit: Indentation is conspicuously inconsistent with the above. Probably fix the preceding lines.",
      "range": {
        "startLine": 188,
        "startChar": 5,
        "endLine": 195,
        "endChar": 25
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcecd859_4afd5d45",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T06:33:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06512514_eb7bcfe2",
      "range": {
        "startLine": 188,
        "startChar": 5,
        "endLine": 195,
        "endChar": 25
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3828a56f_8de5934d",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-31T09:57:07Z",
      "side": 1,
      "message": "One line ?",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1488a381_f3fedab0",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T00:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3828a56f_8de5934d",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e76cd0d_d4d976f8",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-31T09:57:07Z",
      "side": 1,
      "message": "drop the field and use `Runtime::Current()-\u003eGetHeap()` ? Unless this is performance critical?",
      "range": {
        "startLine": 224,
        "startChar": 9,
        "endLine": 224,
        "endChar": 14
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4b0c3e1_a21a3dd7",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T00:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e76cd0d_d4d976f8",
      "range": {
        "startLine": 224,
        "startChar": 9,
        "endLine": 224,
        "endChar": 14
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "357fe468_86a33bf8",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-31T09:57:07Z",
      "side": 1,
      "message": "One line?",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12c774e3_416e53ba",
        "filename": "runtime/fault_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T00:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "357fe468_86a33bf8",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "923a64b8_78c1a840",
        "filename": "runtime/fault_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-01T00:33:32Z",
      "side": 1,
      "message": "I would try to avoid or justify this in a comment.",
      "range": {
        "startLine": 57,
        "startChar": 66,
        "endLine": 57,
        "endChar": 92
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b68cd70_eb02e005",
        "filename": "runtime/fault_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T06:33:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "923a64b8_78c1a840",
      "range": {
        "startLine": 57,
        "startChar": 66,
        "endLine": 57,
        "endChar": 92
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcad7230_db67bceb",
        "filename": "runtime/fault_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-31T09:57:07Z",
      "side": 1,
      "message": "Looks like you could avoid this caching?",
      "range": {
        "startLine": 104,
        "startChar": 3,
        "endLine": 104,
        "endChar": 18
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eeb7e26_c2422bc3",
        "filename": "runtime/fault_handler.h",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T00:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcad7230_db67bceb",
      "range": {
        "startLine": 104,
        "startChar": 3,
        "endLine": 104,
        "endChar": 18
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2e7d6fd_ae8b1774",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-31T09:57:07Z",
      "side": 1,
      "message": "If we make this required, why do we need to check in other places that SIGBUS feature is available?",
      "range": {
        "startLine": 105,
        "startChar": 33,
        "endLine": 105,
        "endChar": 55
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3acdd8f2_64d2ef01",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T00:00:24Z",
      "side": 1,
      "message": "I\u0027ve added SIGBUS to the required set because we want to use the GC only with it. But checking at other places for testing purposes. For instance, if we are running on an old kernel then we can run in threaded mode. Since all the code already exists and the checking is only during GC object construction, I thought it\u0027s fine.\n\nLater on if and when we implement features only for SIGBUS, then I\u0027ll change it such that we use the GC only if SIGBUS feature exists.",
      "parentUuid": "c2e7d6fd_ae8b1774",
      "range": {
        "startLine": 105,
        "startChar": 33,
        "endLine": 105,
        "endChar": 55
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05f06828_04d30e2f",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-01T00:33:32Z",
      "side": 1,
      "message": "+1. Maybe explain your answer to Nicolas in a comment, if you haven\u0027t already?\nWhere those features introduced at basically the same time, or is there really a difference?",
      "parentUuid": "c2e7d6fd_ae8b1774",
      "range": {
        "startLine": 105,
        "startChar": 33,
        "endLine": 105,
        "endChar": 55
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3eb2dd3_a9ef17ec",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T06:33:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05f06828_04d30e2f",
      "range": {
        "startLine": 105,
        "startChar": 33,
        "endLine": 105,
        "endChar": 55
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8150f8ca_38892a99",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-01T23:13:19Z",
      "side": 1,
      "message": "I think it would still be useful to add a comment saying something to the effect that SIGBUS support usually implies minor fault support. Otherwise it looks like we\u0027re now needlessly restricting kernel versions.",
      "parentUuid": "d3eb2dd3_a9ef17ec",
      "range": {
        "startLine": 105,
        "startChar": 33,
        "endLine": 105,
        "endChar": 55
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64782cd3_75957a00",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-02T08:19:53Z",
      "side": 1,
      "message": "It\u0027s the other way. minor-fault support implies SIGBUS as the latter was introduced earlier than the former. Add a comment to this effect.",
      "parentUuid": "8150f8ca_38892a99",
      "range": {
        "startLine": 105,
        "startChar": 33,
        "endLine": 105,
        "endChar": 55
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c93954a4_a9a0c869",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-02-02T12:39:23Z",
      "side": 1,
      "message": "Are we loosing that much coverage if we only support userfaultfd if SIGBUS feature is available?",
      "parentUuid": "64782cd3_75957a00",
      "range": {
        "startLine": 105,
        "startChar": 33,
        "endLine": 105,
        "endChar": 55
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1fc674e_611672ef",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 2839,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-31T09:57:07Z",
      "side": 1,
      "message": "Locking (and doing all the code here) in a signal handler sounds scary. Is it the same level of work in the SIGSEGV handler for userfaultfd?",
      "range": {
        "startLine": 2839,
        "startChar": 0,
        "endLine": 2839,
        "endChar": 40
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69952975_3731ea9d",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 2839,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T00:00:24Z",
      "side": 1,
      "message": "We don\u0027t have SIGSEGV handler for userfaultfd. I guess you are referring to the thread-based userfaultfd implementation. In that case we need one buffer per uffd-worker, so currently only two. In this case, we need one for every mutator thread that cause SIGBUS.\n\nBut as you can see, we do the buffer allocation only once for any thread when it triggers the first SIGBUS signal in that compaction cycle. Also only push_back is done in the critical section. So there are no recurring locking issues.",
      "parentUuid": "a1fc674e_611672ef",
      "range": {
        "startLine": 2839,
        "startChar": 0,
        "endLine": 2839,
        "endChar": 40
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "303ca367_ad587b99",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 2839,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-01T23:13:19Z",
      "side": 1,
      "message": "I don\u0027t think this is safe. The usual reason that mutexes are not safe is that you may have interrupted a critical section in the main code. That probably can\u0027t happen here. But Mutex internally logs, etc. I\u0027m not at all sure that that\u0027s async-signal-safe. (Actually, this pointed out a problem in the fairly recent \"dump stack on long contention CL, that definitely makes this unsafe. But that should probably be viewed as a best effort debugging tool anyway.)\n\nYou really only need the mutex to maintain a list of pages, right? We could easily do this in a lock-free manner, I think.\n\nBut I worry about MemMap::MapAnonymous, which also internally acquires a mutex. We probably need to grab a page from a large preallocated region, so that allocation is just an atomic increment.",
      "parentUuid": "69952975_3731ea9d",
      "range": {
        "startLine": 2839,
        "startChar": 0,
        "endLine": 2839,
        "endChar": 40
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1213e5b0_d69a1ad0",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 2839,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-02T08:19:53Z",
      "side": 1,
      "message": "Changed the whole logic by creating a range of pages out of which mutator thread atomically claim pages if they require.",
      "parentUuid": "303ca367_ad587b99",
      "range": {
        "startLine": 2839,
        "startChar": 0,
        "endLine": 2839,
        "endChar": 40
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50ade7c0_25464c24",
        "filename": "runtime/runtime.cc",
        "patchSetId": 2
      },
      "lineNbr": 1803,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-31T09:57:07Z",
      "side": 1,
      "message": "Can we move this logic in the FaultHandler::Init ?",
      "range": {
        "startLine": 1795,
        "startChar": 0,
        "endLine": 1803,
        "endChar": 5
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2596bdca_7de2ea0c",
        "filename": "runtime/runtime.cc",
        "patchSetId": 2
      },
      "lineNbr": 1803,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-02-01T00:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50ade7c0_25464c24",
      "range": {
        "startLine": 1795,
        "startChar": 0,
        "endLine": 1803,
        "endChar": 5
      },
      "revId": "4d015e22c2cf4202c0194209c44460e00c53f03e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}