{
  "comments": [
    {
      "key": {
        "uuid": "21065274_01a60bb6",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T21:27:22Z",
      "side": 1,
      "message": "Is there a reason we need to use a lambda instead of just doing constexpr\u0027s in #if defineds?",
      "range": {
        "startLine": 139,
        "startChar": 44,
        "endLine": 145,
        "endChar": 4
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de5c0fae_0d82126c",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T21:39:22Z",
      "side": 1,
      "message": "I don\u0027t like multiple definitions of the same symbol.",
      "parentUuid": "21065274_01a60bb6",
      "range": {
        "startLine": 139,
        "startChar": 44,
        "endLine": 145,
        "endChar": 4
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc010122_38e85cbb",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T22:03:11Z",
      "side": 1,
      "message": "In other places we define the symbol multiple places (see mem_map.h or globals.h). Please do so here as well.",
      "parentUuid": "de5c0fae_0d82126c",
      "range": {
        "startLine": 139,
        "startChar": 44,
        "endLine": 145,
        "endChar": 4
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0b1d2cc_e7d9f258",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T22:06:48Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "fc010122_38e85cbb",
      "range": {
        "startLine": 139,
        "startChar": 44,
        "endLine": 145,
        "endChar": 4
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c4535d4_fb0985e4",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-25T11:44:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0b1d2cc_e7d9f258",
      "range": {
        "startLine": 139,
        "startChar": 44,
        "endLine": 145,
        "endChar": 4
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59bca1a1_b9c48a58",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T21:27:22Z",
      "side": 1,
      "message": "This seems like it might be fundamentally broken. We don\u0027t seem to have a default value for DefaultStackSize (so the value is 0). This change means we do longer add 1mb to this default size of 0 and so could cause issues.\n\nI think you should just give it a default (1MB?) in runtime_options.def",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 694,
        "endChar": 66
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9756c53_5ca3ce60",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T21:39:22Z",
      "side": 1,
      "message": "\u003e We don\u0027t seem to have a default value for DefaultStackSize (so the value is 0). This change means we do longer add 1mb to this default size of 0 and so could cause issues.\n\nIf stack_size is zero upon return, we use the pthread default stack size, and on Android, we know that\u0027s big enough (at least 1MB). The whole point is to let bionic pick the default stack size. On other platforms, sure, we can specify something.",
      "parentUuid": "59bca1a1_b9c48a58",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 694,
        "endChar": 66
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc04520f_84d7162c",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T22:03:11Z",
      "side": 1,
      "message": "Ack. Please add a comment. The current comment doesn\u0027t make it clear that returning \u00270\u0027 is (1) a valid return value and (2) means to use the default pthread stack size.",
      "parentUuid": "c9756c53_5ca3ce60",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 694,
        "endChar": 66
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3fd2662_69063872",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-25T11:44:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc04520f_84d7162c",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 694,
        "endChar": 66
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1ee65c7_c1fcedf2",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 700,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T21:27:22Z",
      "side": 1,
      "message": "stack_size !\u003d 0 please",
      "range": {
        "startLine": 700,
        "startChar": 6,
        "endLine": 700,
        "endChar": 20
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9a625b4_bcec5e1f",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 700,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T21:39:22Z",
      "side": 1,
      "message": "ok.",
      "parentUuid": "f1ee65c7_c1fcedf2",
      "range": {
        "startLine": 700,
        "startChar": 6,
        "endLine": 700,
        "endChar": 20
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43df4a35_ea2ec6e4",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 700,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-25T11:44:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9a625b4_bcec5e1f",
      "range": {
        "startLine": 700,
        "startChar": 6,
        "endLine": 700,
        "endChar": 20
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aabc10cf_f7cf7e57",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 705,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T21:27:22Z",
      "side": 1,
      "message": "This seems unrelated. Also see above. I think this might cause issues.\n\nAlso I\u0027m not totally sure I understand what this comment is even saying. Mathieuc@?",
      "range": {
        "startLine": 702,
        "startChar": 3,
        "endLine": 705,
        "endChar": 0
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00b39264_8f2680c6",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 705,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T21:39:22Z",
      "side": 1,
      "message": "No. This preserves existing behavior in the case where a user has explicitly provided a stack size: if you\u0027ve given us some concrete value for the desired stack size, we add 1MB to it. If you *haven\u0027t* given us a default value for the stack, we just use the pthread default by returning a stack size of zero from this function. The whole idea is that the vast majority of threads are created with default-sized stacks, and these threads should be bionic default-sized threads.",
      "parentUuid": "aabc10cf_f7cf7e57",
      "range": {
        "startLine": 702,
        "startChar": 3,
        "endLine": 705,
        "endChar": 0
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78e52106_f49d2598",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 705,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T22:03:11Z",
      "side": 1,
      "message": "It\u0027s not entirely clear to me that this is correct. It is a little strange that we are giving extra stack space when given an explicit size.\n\nAlso the pthread default size is at least 1MB correct? I don\u0027t think we want to be making the stack smaller in general.\n\nmathieuc, lokesh any comment?",
      "parentUuid": "00b39264_8f2680c6",
      "range": {
        "startLine": 702,
        "startChar": 3,
        "endLine": 705,
        "endChar": 0
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86e12195_1fe474d5",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 705,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T22:06:48Z",
      "side": 1,
      "message": "\u003e It\u0027s not entirely clear to me that this is correct. It is a little strange that we are giving extra stack space when given an explicit size.\n\nWhen we\u0027re *not* given a size, it means the thread creator doesn\u0027t care how large the stack is. If we *do* have an explicit size, the thread creator *does* care how large the stack is, and since we historically had a stack of 1MB plus whatever the caller specified, let\u0027s keep that behavior. I want to change ART\u0027s behavior only in the case that the thread creator said he\u0027s happy with the default.",
      "parentUuid": "78e52106_f49d2598",
      "range": {
        "startLine": 702,
        "startChar": 3,
        "endLine": 705,
        "endChar": 0
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d728f4a3_e21cce10",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T21:27:22Z",
      "side": 1,
      "message": "Style is generally to avoid implicit boolean conversions in art.",
      "range": {
        "startLine": 714,
        "startChar": 6,
        "endLine": 714,
        "endChar": 16
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ce3c663_d1f1a95e",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T21:39:22Z",
      "side": 1,
      "message": "Isn\u0027t there a compiler warning you can enable to enforce this?",
      "parentUuid": "d728f4a3_e21cce10",
      "range": {
        "startLine": 714,
        "startChar": 6,
        "endLine": 714,
        "endChar": 16
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "443b1c20_720d16b3",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T22:03:11Z",
      "side": 1,
      "message": "I don\u0027t know of any.",
      "parentUuid": "2ce3c663_d1f1a95e",
      "range": {
        "startLine": 714,
        "startChar": 6,
        "endLine": 714,
        "endChar": 16
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c56f94a_e7bc7989",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 721,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-03-19T21:27:22Z",
      "side": 1,
      "message": "see above.",
      "range": {
        "startLine": 721,
        "startChar": 6,
        "endLine": 721,
        "endChar": 16
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6d0728e_6f781d1e",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 721,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-19T21:39:22Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "6c56f94a_e7bc7989",
      "range": {
        "startLine": 721,
        "startChar": 6,
        "endLine": 721,
        "endChar": 16
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12542ca8_a0de45eb",
        "filename": "runtime/thread.cc",
        "patchSetId": 1
      },
      "lineNbr": 721,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-25T11:44:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6d0728e_6f781d1e",
      "range": {
        "startLine": 721,
        "startChar": 6,
        "endLine": 721,
        "endChar": 16
      },
      "revId": "a69b2fd381a716300f517a86836a48eb5f42c52e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}