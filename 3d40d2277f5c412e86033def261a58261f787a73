{
  "comments": [
    {
      "key": {
        "uuid": "0a697be4_371ed867",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2016-07-19T14:26:16Z",
      "side": 1,
      "message": "Fwiw, removing suspend checks from leaf methods is dubiously correct wrt starving the garbage collector (introducing long times to safe point, a form of GC pause). A large leaf method may have no suspend checks. The worst case is a method calling nothing but large leaf methods, the first safe point will happen at return from that method. There are also no suspend checks at method entry, so combining recursion with large leaf methods is an easy way to starve the GC, cause pauses, jank...\n\nGiven the refocus on JIT with profile driven AOT, and functional method inlining, is there an abundance of leaf methods where this dubious optimization is beneficial as an overall means of reducing  total code size? Note, not removing the leaf method suspend checks would only be part of doing this right. The second part would be removing suspend checks from loop back edges dominated by method calls.",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 30
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a697be4_1a73b91b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-07-20T11:04:22Z",
      "side": 1,
      "message": "That\u0027s a good point Ian. Worth filing a bug to start the conversation. Last time we checked, removing suspend checks in leafs was worthwhile on most benchmarks.",
      "parentUuid": "0a697be4_371ed867",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 30
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea77c70c_668eae26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2016-07-21T07:03:06Z",
      "side": 1,
      "message": "Thanks. It is to be expected that removing suspend checks does improve benchmark scores, it doesn\u0027t make it correct :-) If it is winning on benchmarks then it is evidence of method dispatch cost, which is a symptom of broken inlining.",
      "parentUuid": "0a697be4_1a73b91b",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 30
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ad1308d_e42785a5",
        "filename": "compiler/optimizing/register_allocator_linear_scan.cc",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-18T21:16:11Z",
      "side": 1,
      "message": "I was going to keep a DCHECK here to make sure leaf method suspend checks were always removed before register allocation, but the DCHECK interfered with unit testing of the register allocator, since optimization passes are not run. It should be ok to leave out the DCHECK, though; removing the suspend checks is an optimization, and not necessary for correctness.",
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea2507a1_f62280a9",
        "filename": "compiler/optimizing/suspend_check_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-07-18T21:48:05Z",
      "side": 1,
      "message": "I don\u0027t think this is set at this point. You\u0027re probably either removing all suspend checks at entry or keeping them all :)",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 30
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ad1308d_d7e4b144",
        "filename": "compiler/optimizing/suspend_check_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-18T22:10:31Z",
      "side": 1,
      "message": "You\u0027re right, it looks like this is not set until liveness analysis runs. Thank you for catching this.\n\nThis means I can\u0027t move this to prepare_for_register_allocation, though, since we\u0027ll have the same issue. It would be nice if marking a method as a leaf were not tied up with liveness analysis, but creating a new pass just for that is not cheap. Thoughts?",
      "parentUuid": "ea2507a1_f62280a9",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 30
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a748bbe_f3b630d7",
        "filename": "compiler/optimizing/suspend_check_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-07-19T08:24:01Z",
      "side": 1,
      "message": "Fixing the TODO is not so trivial :) So we need liveness analysis to run before marking a method as leaf/not leaf, can we move the removal of the suspend check in liveness analysis instead of register allocator?",
      "parentUuid": "3ad1308d_d7e4b144",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 30
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea2507a1_d61f845f",
        "filename": "compiler/optimizing/suspend_check_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-07-18T21:48:05Z",
      "side": 1,
      "message": "That\u0027s heavyweight for just removing a suspend check: you\u0027re visiting the whole graph here. Ideally this should be done in prepare_for_register_allocation.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 48,
        "endChar": 34
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ad1308d_377b8da5",
        "filename": "compiler/optimizing/suspend_check_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1108540
      },
      "writtenOn": "2016-07-18T22:10:31Z",
      "side": 1,
      "message": "Agreed, I\u0027ll move this to prepare_for_register_allocation. I must have misunderstood your email about this. (Edit: see my other comment regarding prepare_for_register_allocation.)",
      "parentUuid": "ea2507a1_d61f845f",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 48,
        "endChar": 34
      },
      "revId": "3d40d2277f5c412e86033def261a58261f787a73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}