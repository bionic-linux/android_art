{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f85767b9_048d6ae0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 51
      },
      "lineNbr": 38,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-10-21T13:50:37Z",
      "side": 1,
      "message": "This isn\u0027t minor (up to 30% on docs, though the good news is no memory regression) - we should see if there\u0027s pathological cases that would trigger this increase and we could avoid, but also, are there methods we know we should skip the optimization (eg doesn\u0027t have branches, doesn\u0027t have allocations, etc).",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 38,
        "endChar": 11
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "391b645a_a119545e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 51
      },
      "lineNbr": 38,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-21T15:59:30Z",
      "side": 1,
      "message": "I\u0027ll take a look but I already made attempts to do that and things like branchless code won\u0027t be slow since nothing would really be triggered. The only thing I can really think of would be to avoid doing anything at all on especially large graphs but those are the ones we are most likely to have benefits from. Also I think the fact that these are all \u003c1 noise is more important TBH.\n\nAnyway I\u0027ll take a look and see if I can shake anything loose.\n\nAny suggestions on where to look or how to check impact without the 3-4 hour golem delay would be appreciated.",
      "parentUuid": "f85767b9_048d6ae0",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 38,
        "endChar": 11
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f4aeb1b_0d78919a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 51
      },
      "lineNbr": 38,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-10-21T16:23:03Z",
      "side": 1,
      "message": "You can download the apks from the go/lem page, and then run local dex2oat on it.\n\n(on the noise: to confirm, we need to wait for more results and look at the graphs - for docs, it goes from ~10s to ~13s)",
      "parentUuid": "391b645a_a119545e",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 38,
        "endChar": 11
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "945ec5f4_4105c8c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 51
      },
      "lineNbr": 38,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-21T16:43:20Z",
      "side": 1,
      "message": "Well I\u0027m repeating the run.\n\nDoing that still has the problem that we need multiple dex2oats.\n\nAnyway, as I said I\u0027ll look at this a bit but this adds entirely new analysis. There\u0027s no way to do this without making the analysis take additional time.\n\nI\u0027ll take another look at perf to see if there\u0027s any big hot-spots.",
      "parentUuid": "1f4aeb1b_0d78919a",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 38,
        "endChar": 11
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de97c31e_5400bfff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 51
      },
      "lineNbr": 38,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-10-21T17:13:58Z",
      "side": 1,
      "message": "\u003e Doing that still has the problem that we need multiple dex2oats.\n\nIsn\u0027t that easily addressable by having two checkouts? (I\u0027m personally having multiple master-art checkouts to do this kind of analysis)",
      "parentUuid": "945ec5f4_4105c8c3",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 38,
        "endChar": 11
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e6839fd_84a35c62",
        "filename": "/COMMIT_MSG",
        "patchSetId": 51
      },
      "lineNbr": 38,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-21T17:57:56Z",
      "side": 1,
      "message": "Hm perf points the finger at the HashMaps that I used in a few places to save memory. I guess with really large functions it turns out to be worse. (This doesn\u0027t show up on apks other than docs BTW)\n\nI\u0027ll try a run with using arrays instead. Memory use will probably be fine-ish.",
      "parentUuid": "de97c31e_5400bfff",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 38,
        "endChar": 11
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d71a1205_e968e9af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 51
      },
      "lineNbr": 38,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-21T19:12:44Z",
      "side": 1,
      "message": "Well running a version with vectors on golem.\n\nIt looks like optimizing BitVector might be next for squeezing perf.",
      "parentUuid": "1e6839fd_84a35c62",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 38,
        "endChar": 11
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da5f5cc4_37099c27",
        "filename": "compiler/optimizing/execution_subgraph.cc",
        "patchSetId": 51
      },
      "lineNbr": 181,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-10-21T13:50:37Z",
      "side": 1,
      "message": "nit: one condition per line.",
      "range": {
        "startLine": 180,
        "startChar": 8,
        "endLine": 181,
        "endChar": 38
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "820b8716_9a821e65",
        "filename": "compiler/optimizing/execution_subgraph.cc",
        "patchSetId": 51
      },
      "lineNbr": 181,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-10-21T16:10:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da5f5cc4_37099c27",
      "range": {
        "startLine": 180,
        "startChar": 8,
        "endLine": 181,
        "endChar": 38
      },
      "revId": "5750aba58bb73abbb96c18ca6aa591f7d88de9d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}