{
  "comments": [
    {
      "key": {
        "uuid": "569941f8_9f2c57d1",
        "filename": "compiler/utils/mips64/assembler_mips64.cc",
        "patchSetId": 15
      },
      "lineNbr": 859,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-30T16:52:36Z",
      "side": 1,
      "message": "Why not Jialc(indirect_reg, offset)?",
      "range": {
        "startLine": 858,
        "startChar": 0,
        "endLine": 859,
        "endChar": 27
      },
      "revId": "4dda3376b71209fae07f5c3c8ac3eb4b54207aa8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96401a44_244c4a53",
        "filename": "compiler/utils/mips64/assembler_mips64.cc",
        "patchSetId": 15
      },
      "lineNbr": 859,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2015-10-31T00:52:43Z",
      "side": 1,
      "message": "AFAIK, the T9 register must have the function address upon entry to the function.",
      "parentUuid": "569941f8_9f2c57d1",
      "range": {
        "startLine": 858,
        "startChar": 0,
        "endLine": 859,
        "endChar": 27
      },
      "revId": "4dda3376b71209fae07f5c3c8ac3eb4b54207aa8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "166509c4_9df8e733",
        "filename": "compiler/utils/mips64/assembler_mips64.cc",
        "patchSetId": 15
      },
      "lineNbr": 859,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-02T10:16:16Z",
      "side": 1,
      "message": "Is that a requirement of the mips64 C/C++ ABI?\n(The compiled Java ABI could deviate from that if it\u0027s beneficial.)",
      "parentUuid": "96401a44_244c4a53",
      "range": {
        "startLine": 858,
        "startChar": 0,
        "endLine": 859,
        "endChar": 27
      },
      "revId": "4dda3376b71209fae07f5c3c8ac3eb4b54207aa8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d63612de_687d7c96",
        "filename": "compiler/utils/mips64/assembler_mips64.cc",
        "patchSetId": 15
      },
      "lineNbr": 859,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2015-11-02T22:42:33Z",
      "side": 1,
      "message": "Right, calls to labeled code are calls to code we\u0027re generating (and not external C/C++/assembly/whatever code) and T9 manipulation is most likely unnecessary here and can be removed.\n\nAFAIK, the only place, where we can call into external native code not generated by dex2oat, is CodeGeneratorMIPS::InvokeRuntime(), where the distinction between the two kinds of called code is made (for the purpose of allocating stack slots shadowing a0-a3). Is that correct or is there something in e.g. CodeGeneratorMIPS::GenerateStaticOrDirectCall() as well?",
      "parentUuid": "166509c4_9df8e733",
      "range": {
        "startLine": 858,
        "startChar": 0,
        "endLine": 859,
        "endChar": 27
      },
      "revId": "4dda3376b71209fae07f5c3c8ac3eb4b54207aa8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d685318b_0310f062",
        "filename": "compiler/utils/mips64/assembler_mips64.cc",
        "patchSetId": 15
      },
      "lineNbr": 859,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-11-03T09:01:43Z",
      "side": 1,
      "message": "CodeGeneratorMIPS::GenerateStaticOrDirectCall will either go to a Java method including a Jni stub or a stub from runtime/arch/entrypoints. In those we can save things that the underlying runtime ABI will use.",
      "parentUuid": "d63612de_687d7c96",
      "range": {
        "startLine": 858,
        "startChar": 0,
        "endLine": 859,
        "endChar": 27
      },
      "revId": "4dda3376b71209fae07f5c3c8ac3eb4b54207aa8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}