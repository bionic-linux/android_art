{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2355d4a1_06cfdbe3",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-21T21:08:16Z",
      "side": 1,
      "message": "Hmm, this looks suspicious - it\u0027s not just a few mistyped letters exactly.\n\nI\u0027m wondering if calin@ in https://r.android.com/1344281 actually intended to pass for_boot_image\u003dtrue to the ProfileCompilationInfo constructors instead. I can\u0027t say I\u0027ve fully understood this test, but it doesn\u0027t look like it\u0027s intended to check that the input_data1 and input_data2 above are correctly cleared if invalid.\n\nDoes the test still work if you move the true flags up to the constructors instead?",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b0a91af_76356687",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-22T11:32:23Z",
      "side": 1,
      "message": "That\u0027s a good point - the constructor for ProfileCompilationInfo indeed accepts a boolean parameter called `for_boot_image` (false if not specified) - but I can see two overloads for the `Load` method, and none of them are compatible with removing this boolean parameter:\n\n```\n  bool Load(\n      int fd,\n      bool merge_classes \u003d true,\n      const ProfileLoadFilterFn\u0026 filter_fn \u003d ProfileFilterFnAcceptAll)\n...\n  bool Load(const std::string\u0026 filename, bool clear_if_invalid);\n```\n\nso moving the boolean attribute to the constructor will not compile.\n\nIn fact, I don\u0027t see any references to `boot_profile{N}` in the rest of test, and commenting out lines 1074-1077 makes the test still pass - is it possible they are not needed after all?",
      "parentUuid": "2355d4a1_06cfdbe3",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e31096b2_320ba062",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-24T15:24:45Z",
      "side": 1,
      "message": "That still doesn\u0027t mean the intention wasn\u0027t to have `for_boot_image\u003dtrue` on the constructor though, but we don\u0027t really know what clear_if_invalid was intended to be. (FWIW I see both being true on lines 979-980 above.)\n\nI think we need to fully understand the test to make the right call here. +jiakaiz, you said you may know these tests?",
      "parentUuid": "8b0a91af_76356687",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "899bdb95_4bb8c7ad",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-24T15:34:26Z",
      "side": 1,
      "message": "\u003e In fact, I don\u0027t see any references to  boot_profile{N}  in the rest of test, and commenting out lines 1074-1077 makes the test still pass - is it possible they are not needed after all?\n\nHuh, right. Since the test talks about testing boot profiles but instead uses (non-\"boot\") profile{N} below I wonder if there may be more typos here. Clearly one of the two init blocks in 1063-1076 is a forgotten leftover or cut\u0027n\u0027paste artifact.\n\nYou may be right, but it still would be good to make a call from fully understanding the test.",
      "parentUuid": "e31096b2_320ba062",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aff79e7_a8d8765f",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-24T17:24:40Z",
      "side": 1,
      "message": "Unfortunately, this is not one of the tests I know.",
      "parentUuid": "899bdb95_4bb8c7ad",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a84de0b3_00557dd9",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-27T11:00:23Z",
      "side": 1,
      "message": "IIUC, this test creates two input profiles (`profile1` and `profile2`), and then merges them into one profile (`out_profile`). This can be done without line 1074-1077. Maybe we should remove these lines and see if the test still passes? Martin, WDYT?",
      "parentUuid": "3aff79e7_a8d8765f",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c19f225_7a0025de",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-27T12:30:02Z",
      "side": 1,
      "message": "Removing those four lines would make the test still pass indeed (I have tried that in the first comment I left), but there\u0027s a sneaky side-effect in ProfileCompilationInfo::Load which might prevent us from removing those lines:\n\n```\nbool ProfileCompilationInfo::Load(const std::string\u0026 filename, bool clear_if_invalid) {\n...\n  ProfileLoadStatus status \u003d LoadInternal(fd, \u0026error);\n  if (status \u003d\u003d ProfileLoadStatus::kSuccess) {\n    return true;\n  }\n  \n  if (clear_if_invalid \u0026\u0026\n      ((status \u003d\u003d ProfileLoadStatus::kBadMagic) ||\n       (status \u003d\u003d ProfileLoadStatus::kVersionMismatch) ||\n       (status \u003d\u003d ProfileLoadStatus::kBadData))) {\n    LOG(WARNING) \u003c\u003c \"Clearing bad or obsolete profile data from file \"\n                 \u003c\u003c filename \u003c\u003c \": \" \u003c\u003c error;\n    if (profile_file-\u003eClearContent()) {\n      return true;\n    } else {\n      PLOG(WARNING) \u003c\u003c \"Could not clear profile file: \" \u003c\u003c filename;\n      return false;\n    }\n  }\n```\nwhich is indeed the case for that test (because of the no-argument constructor being used, which defaults `for_boot_image` to `false`) - I have tried this by adding some additional lines as part of the test:\n```\n\u003d code in ProfileCompilationInfo::Load \u003d\n  ProfileLoadStatus status \u003d LoadInternal(fd, \u0026error);\n  fprintf(stderr, \"ProfileLoadStatus status is %d\\n\", status);\n  fprintf(stderr, \"Error is %s\\n\", error.c_str());\n  if (status \u003d\u003d ProfileLoadStatus::kSuccess) {\n    return true;\n  }\n  \n\u003d test output \u003d\n[ RUN      ] ProfileAssistantTest.TestBootImageProfileWith2RawProfiles\nCalling boot_profile1.Load(/usr/local/google/home/scianciulli/Code/aosp-master-with-phones/out/soong/.temp/art-data-kaxsPG/TmpFile-tCSIEK, true)\nProfileLoadStatus status is 5\nError is Expected app profile, got boot profile.\nCalling boot_profile2.Load(/usr/local/google/home/scianciulli/Code/aosp-master-with-phones/out/soong/.temp/art-data-kaxsPG/TmpFile-cweA45, true)\nProfileLoadStatus status is 5\nError is Expected app profile, got boot profile.\nProfileLoadStatus status is 0\nError is \nProfileLoadStatus status is 0\nError is \n[       OK ] ProfileAssistantTest.TestBootImageProfileWith2RawProfiles (1094 ms)\n```\nwhere status 5 is `kMergeError`, and the two successful runs of `ProfileLoadStatus` (0 \u003d `kSuccess`) are from the actual Profman run.",
      "parentUuid": "a84de0b3_00557dd9",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2251d6fc_cd29b81f",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-27T12:34:43Z",
      "side": 1,
      "message": "I should have made it clearer that the side-effect I\u0027m talking about is clearing the contents of the input profile file whenever the LoadInternal method is not successful.",
      "parentUuid": "3c19f225_7a0025de",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6b424ce_2a92c909",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-27T13:07:08Z",
      "side": 1,
      "message": "Thanks for the explanation. Interesting finding! Then I\u0027m even more confused. If the side-effect is triggered, `profile1` and `profile2` will be cleared, right? Then how does the merge below works? Why does the test pass?",
      "parentUuid": "2251d6fc_cd29b81f",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3d1feae_937a655b",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-27T13:47:23Z",
      "side": 1,
      "message": "I actually made a mistake in my previous comment: `kMergeError` is not among the statuses that trigger the clearance of the file contents, so the profiles will retain their information.\n\nWhen Profman gets called as part of the test, one of the command line arguments passed is `--generate-boot-image-profile` which, after some layers of code, will end up here:\n\n```\nbool GenerateBootImageProfile(\n    const std::vector\u003cstd::unique_ptr\u003cconst DexFile\u003e\u003e\u0026 dex_files,\n    const std::vector\u003cstd::string\u003e\u0026 profile_files,\n    const BootImageOptions\u0026 options,\n    const std::string\u0026 boot_profile_out_path,\n    const std::string\u0026 preloaded_classes_out_path) {\n[...]\nfor (const std::string\u0026 profile_file : profile_files) {\n    ProfileCompilationInfo profile(/*for_boot_image\u003d*/ true);\n    if (!profile.Load(profile_file, /*clear_if_invalid\u003d*/ false)) {\n```\n\nSince `for_boot_image` here is `true` (unlike the first part of the test), `LoadInternal` will succeed and merging the two profiles should not be a problem, which indeed is the result of the test.",
      "parentUuid": "a6b424ce_2a92c909",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3166594f_a6980aaf",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-27T13:59:39Z",
      "side": 1,
      "message": "On the other hand, I noticed that within `TestBootImageProfileWith2RawProfiles` there are a lot of references to boot profile contents (both in comments and in the title of the test) and, comparing it with the test just above (`TestBootImageProfile`), it looks like we\u0027re trying to get a similar behaviour merging together the information stored in two different boot profiles; seeing that in `TestBootImageProfile` we have this code:\n\n```\n  ProfileCompilationInfo bootProfile(/*for_boot_image\u003d*/ true);\n  bootProfile.Load(profile.GetFilename(), /*clear_if_invalid\u003d*/ true);\n```\n(with no changes on this CL), I\u0027m starting to think that we should have the same in `TestBootImageProfileWith2RawProfiles`, basically making it like the following:\n```\n  ProfileCompilationInfo boot_profile1(/*for_boot_image\u003d*/ true);\n  ProfileCompilationInfo boot_profile2(/*for_boot_image\u003d*/ true);\n  boot_profile1.Load(profile1.GetFilename(), /*clear_if_invalid\u003d*/ true);\n  boot_profile2.Load(profile2.GetFilename(), /*clear_if_invalid\u003d*/ true);\n```\n\n(I\u0027m still unsure what would be the purpose of that - also `clear_if_invalid` would not have any effect as the boot profile would be loaded correctly).",
      "parentUuid": "a3d1feae_937a655b",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8022909d_d61a5fa7",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-27T14:14:02Z",
      "side": 1,
      "message": "\u003e `kMergeError` is not among the statuses that trigger the clearance of the file contents, so the profiles will retain their information.\n\nI see. So `boot_profile1.Load` and `boot_profile2.Load` are noops, right? Then we can safely remove them.\n\nI don\u0027t think\n\n```\n  ProfileCompilationInfo boot_profile1(/*for_boot_image\u003d*/ true);\n  ProfileCompilationInfo boot_profile2(/*for_boot_image\u003d*/ true);\n  boot_profile1.Load(profile1.GetFilename(), /*clear_if_invalid\u003d*/ true);\n  boot_profile2.Load(profile2.GetFilename(), /*clear_if_invalid\u003d*/ true);\n```\n\nmakes any difference in terms of the test result. If the profiles are valid, the test passes with or without these lines. On the other hand, if the profiles are invalid, the test fails with or without these lines, though in different ways.",
      "parentUuid": "3166594f_a6980aaf",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f0ffd2c_e8642957",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-27T14:21:07Z",
      "side": 1,
      "message": "Yes, AFAICT the two Load operations are essentially no-ops - indeed removing those lines completely from the test should not make any differences. Are you (both Jiakai and Martin) happy for me to remove them completely?",
      "parentUuid": "8022909d_d61a5fa7",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e291f794_b21dc3d3",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-27T14:22:50Z",
      "side": 1,
      "message": "I\u0027m happy with that.\n\nMartin, based on the discussion above, we think we can remove these lines from the test. WDYT?",
      "parentUuid": "7f0ffd2c_e8642957",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c85c2779_48d1ab9a",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-28T01:15:31Z",
      "side": 1,
      "message": "Well, as I said earlier I got more unsure by these seemingly unnecessary loads. I note that the preceding test also loads the profile into bootProfile which is then not used anywhere.\n\nAfter digging a bit more into the test, I think the intention is to test that the profile fixtures above load correctly, before passing them to profman. for_boot_image sets the version_ array appropriately for a boot image profile, which is then compared to what\u0027s loaded, and the return value from Load() is false on mismatch (even if clear_if_invalid is set).\n\nSo I suggest, both for this test and TestBootImageProfile earlier:\n\n- Pass for_boot_image\u003dtrue to the constructors.\n- Check that the Load calls return true.\n- If they still return true with clear_if_invalid set to false then that looks like a stronger test to me, so it\u0027d be even better.\n- If they never return true and the reason is legitimate then let\u0027s get rid of them.\n- In any case, do it in a separate CL before this one, so this one can stay a pure clang-tidy cleanup.",
      "parentUuid": "e291f794_b21dc3d3",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "770c6c97_701ce6b0",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-28T09:56:50Z",
      "side": 1,
      "message": "I agree that this can be a separate change. Feel free to submit this CL while keeping these lines as-is (`for_boot_image\u003d`).\n\n\u003e After digging a bit more into the test, I think the intention is to test that the profile fixtures above load correctly, before passing them to profman.\n\nI also thought about this possibility but I\u0027m not sure that\u0027s the intention because clearing the profiles doesn\u0027t change the test result. It only makes the test fail in a different way when the profiles are invalid.\n\n\u003e - Pass for_boot_image\u003dtrue to the constructors.\n\u003e - Check that the Load calls return true.\n\u003e - If they still return true with clear_if_invalid set to false then that looks like a stronger test to me, so it\u0027d be even better.\n\nThis approach won\u0027t change the test result either. If the profiles are invalid, the profman command below will fail because it does exactly steps above (https://cs.android.com/android/platform/superproject/+/master:art/profman/boot_image_profile.cc;l\u003d213-214;drc\u003dadd3d02a9be211efeafa6cff8b27bdf7e44e4081).\n\nTherefore, additionally doing these steps in this test seems redundant to me.\n\nI\u0027m marking this comment as resolved so that this CL can be submitted, but feel free to continue the discussion here. Stefano, if you would like to submit it, please revert the changes on these two lines before you do so. Thanks.",
      "parentUuid": "c85c2779_48d1ab9a",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1900865_cd62b25a",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-28T10:47:11Z",
      "side": 1,
      "message": "I would agree to make changes to the two tests in a separate CL (either deleting the four lines under examination or changing the test as Martin suggests), but if I revert the comments to be `for_boot_image\u003d` again that would make `tidy-art` fail, as this CL is also moving `bugprone-argument-comment` to the `art_clang_tidy_errors` list.\n\nShall I make a change to make it similar to the test above (`TestBootImageProfile`):\n```\n  ProfileCompilationInfo bootProfile(/*for_boot_image\u003d*/ true);\n  bootProfile.Load(profile.GetFilename(), /*clear_if_invalid\u003d*/ true);\n```\n?",
      "parentUuid": "770c6c97_701ce6b0",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "306d776d_99a2ca37",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-28T10:53:19Z",
      "side": 1,
      "message": "\u003e that would make  tidy-art  fail, as this CL is also moving  bugprone-argument-comment  to the  art_clang_tidy_errors  list.\n\nYes, that\u0027s why I suggested this to be fixed in a CL before this one.\n\n\u003e If the profiles are invalid, the profman command below will fail because it does exactly steps above\n\nThanks for pointing out that, but it\u0027s indirect testing, i.e. assumes that the code in profman remains like that. There\u0027s still value in testing them directly. Besides, there are few direct tests of Load() - only one in profile_compilation_info_test.cc (where they ought to be), so for that reason too it seems like a good thing to have some testing here.\n\nSo it wouldn\u0027t be entirely redundant. But sure, not a big deal if they get deleted either.",
      "parentUuid": "770c6c97_701ce6b0",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48322071_05d6d9ad",
        "filename": "runtime/metrics/statsd.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-21T21:08:16Z",
      "side": 1,
      "message": "I doubt this is still true. Could you please check if the proper constant works now?",
      "range": {
        "startLine": 229,
        "startChar": 55,
        "endLine": 230,
        "endChar": 56
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "227e0d15_1a130d35",
        "filename": "runtime/metrics/statsd.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-22T11:32:23Z",
      "side": 1,
      "message": "I imagine you are referring to\n\n```\nenum class ThreadType {\n  kMain,\n  kBackground,\n};\n```\n\nin `metrics.h` - I can see this definition but there seem to be no reference to this enum anywhere in the ART module; I think `static_cast\u003cint32_t\u003e(ThreadType::kMain)` should work fine (although the comment mentions that 0 should correspond to UNKNOWN but will correspond to the main thread instead).",
      "parentUuid": "48322071_05d6d9ad",
      "range": {
        "startLine": 229,
        "startChar": 55,
        "endLine": 230,
        "endChar": 56
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b312a512_30339327",
        "filename": "runtime/metrics/statsd.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-24T15:24:45Z",
      "side": 1,
      "message": "No, this is generated by stats-log-api-gen from atoms.proto. Specifically, this field is the enum ArtThreadType (https://cs.android.com/android/platform/superproject/+/master:frameworks/proto_logging/stats/atoms.proto;l\u003d16111-16114;drc\u003dbce0b96ceb57908e3c9f255f4c8eaad540d93595) which becomes consts in statslog_art.h (https://cs.android.com/android/platform/superproject/+/master:out/soong/.intermediates/art/runtime/statslog_art.h/gen/statslog_art.h;l\u003d98-100).\n\nArtThreadType doesn\u0027t have an entry for 0 though. I think the right thing to do here is to add such an entry and use the generated constant here. (There was some churn around this wrt prebuilts last year, but that has been sorted out. It still may be a good idea to test it on master-art, though.)\n\nThen I think that ThreadType enum in metrics.h is suspicious, in particular since its values are offset by 1 from the protobuf enum. That seems like a recipe for problems. If it isn\u0027t used I\u0027d be very keen to remove it altogether and use the autogenerated constants everywhere instead.\n\nBoth those cleanups seem worthwhile, but they\u0027re arguably not in scope here, so I\u0027ll resolve this.",
      "parentUuid": "227e0d15_1a130d35",
      "range": {
        "startLine": 229,
        "startChar": 55,
        "endLine": 230,
        "endChar": 56
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ad0eb0b_10512390",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 2255,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-24T17:24:40Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c6ff508_4783cc9d",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 2255,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-27T08:41:42Z",
      "side": 1,
      "message": "See the explanation on the other occurrence.",
      "parentUuid": "0ad0eb0b_10512390",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30baadc3_ac6bc649",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 2255,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-27T11:00:23Z",
      "side": 1,
      "message": "I guess  /* num_methods\u003d */ 0  is okay here because the intention here is to return an OatClass that doesn\u0027t contain any compiled code.",
      "parentUuid": "0c6ff508_4783cc9d",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e54393c_84d628f0",
        "filename": "runtime/oat_file.h",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-24T17:24:40Z",
      "side": 1,
      "message": "I\u0027m not sure before and after mean the same thing here.",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f040f406_8af17c3a",
        "filename": "runtime/oat_file.h",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-27T08:41:42Z",
      "side": 1,
      "message": "I agree with you that before and after look quite different, but there\u0027s only one constructor for the `OatClass` class, and it\u0027s clear that the fourth argument for that constructor is the number of methods for the class:\n\n```\nprivate:\n    OatClass(const OatFile* oat_file,\n             ClassStatus status,\n             OatClassType type,\n             uint32_t num_methods,\n             const uint32_t* bitmap_pointer,\n             const OatMethodOffsets* methods_pointer);\n            \n...\n\nOatFile::OatClass::OatClass(const OatFile* oat_file,\n                            ClassStatus status,\n                            OatClassType type,\n                            uint32_t num_methods,\n                            const uint32_t* bitmap_pointer,\n                            const OatMethodOffsets* methods_pointer)\n    : oat_file_(oat_file),\n      status_(status),\n      type_(type),\n      num_methods_(num_methods),\n      bitmap_(bitmap_pointer),\n      methods_pointer_(methods_pointer) {\n  DCHECK_EQ(num_methods !\u003d 0u, type !\u003d OatClassType::kNoneCompiled);\n  DCHECK_EQ(bitmap_pointer !\u003d nullptr, type \u003d\u003d OatClassType::kSomeCompiled);\n  DCHECK_EQ(methods_pointer !\u003d nullptr, type !\u003d OatClassType::kNoneCompiled);\n} \n```\n\nLooking at the Git history (https://android-review.googlesource.com/c/platform/art/+/1683151), I can see that argument used to be called `bitmap_size` and was renamed to `num_methods`, so possibly it hasn\u0027t been changed during the rename.",
      "parentUuid": "9e54393c_84d628f0",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4a54b65_2d53c7c5",
        "filename": "runtime/oat_file.h",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-27T11:00:23Z",
      "side": 1,
      "message": "Thanks for looking into the history. Looks like aosp/1683151 is not just renaming. The changes in runtime/oat_file.cc shows that `bitmap_size` and `num_methods` do mean different things. However, I guess `/* num_methods\u003d */ 0` is okay here because the intention here is to return an invalid OatClass.",
      "parentUuid": "f040f406_8af17c3a",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec9ad0c0_5a159f9e",
        "filename": "runtime/oat_file.h",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-28T01:15:31Z",
      "side": 1,
      "message": "I noticed this too, but since they\u0027re passed zero I figured it didn\u0027t matter in the end.",
      "parentUuid": "b4a54b65_2d53c7c5",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}