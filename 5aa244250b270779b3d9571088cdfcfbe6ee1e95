{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2355d4a1_06cfdbe3",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-21T21:08:16Z",
      "side": 1,
      "message": "Hmm, this looks suspicious - it\u0027s not just a few mistyped letters exactly.\n\nI\u0027m wondering if calin@ in https://r.android.com/1344281 actually intended to pass for_boot_image\u003dtrue to the ProfileCompilationInfo constructors instead. I can\u0027t say I\u0027ve fully understood this test, but it doesn\u0027t look like it\u0027s intended to check that the input_data1 and input_data2 above are correctly cleared if invalid.\n\nDoes the test still work if you move the true flags up to the constructors instead?",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b0a91af_76356687",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-22T11:32:23Z",
      "side": 1,
      "message": "That\u0027s a good point - the constructor for ProfileCompilationInfo indeed accepts a boolean parameter called `for_boot_image` (false if not specified) - but I can see two overloads for the `Load` method, and none of them are compatible with removing this boolean parameter:\n\n```\n  bool Load(\n      int fd,\n      bool merge_classes \u003d true,\n      const ProfileLoadFilterFn\u0026 filter_fn \u003d ProfileFilterFnAcceptAll)\n...\n  bool Load(const std::string\u0026 filename, bool clear_if_invalid);\n```\n\nso moving the boolean attribute to the constructor will not compile.\n\nIn fact, I don\u0027t see any references to `boot_profile{N}` in the rest of test, and commenting out lines 1074-1077 makes the test still pass - is it possible they are not needed after all?",
      "parentUuid": "2355d4a1_06cfdbe3",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e31096b2_320ba062",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-24T15:24:45Z",
      "side": 1,
      "message": "That still doesn\u0027t mean the intention wasn\u0027t to have `for_boot_image\u003dtrue` on the constructor though, but we don\u0027t really know what clear_if_invalid was intended to be. (FWIW I see both being true on lines 979-980 above.)\n\nI think we need to fully understand the test to make the right call here. +jiakaiz, you said you may know these tests?",
      "parentUuid": "8b0a91af_76356687",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "899bdb95_4bb8c7ad",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-24T15:34:26Z",
      "side": 1,
      "message": "\u003e In fact, I don\u0027t see any references to  boot_profile{N}  in the rest of test, and commenting out lines 1074-1077 makes the test still pass - is it possible they are not needed after all?\n\nHuh, right. Since the test talks about testing boot profiles but instead uses (non-\"boot\") profile{N} below I wonder if there may be more typos here. Clearly one of the two init blocks in 1063-1076 is a forgotten leftover or cut\u0027n\u0027paste artifact.\n\nYou may be right, but it still would be good to make a call from fully understanding the test.",
      "parentUuid": "e31096b2_320ba062",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aff79e7_a8d8765f",
        "filename": "profman/profile_assistant_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1076,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-24T17:24:40Z",
      "side": 1,
      "message": "Unfortunately, this is not one of the tests I know.",
      "parentUuid": "899bdb95_4bb8c7ad",
      "range": {
        "startLine": 1076,
        "startChar": 47,
        "endLine": 1076,
        "endChar": 63
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48322071_05d6d9ad",
        "filename": "runtime/metrics/statsd.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-21T21:08:16Z",
      "side": 1,
      "message": "I doubt this is still true. Could you please check if the proper constant works now?",
      "range": {
        "startLine": 229,
        "startChar": 55,
        "endLine": 230,
        "endChar": 56
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "227e0d15_1a130d35",
        "filename": "runtime/metrics/statsd.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-22T11:32:23Z",
      "side": 1,
      "message": "I imagine you are referring to\n\n```\nenum class ThreadType {\n  kMain,\n  kBackground,\n};\n```\n\nin `metrics.h` - I can see this definition but there seem to be no reference to this enum anywhere in the ART module; I think `static_cast\u003cint32_t\u003e(ThreadType::kMain)` should work fine (although the comment mentions that 0 should correspond to UNKNOWN but will correspond to the main thread instead).",
      "parentUuid": "48322071_05d6d9ad",
      "range": {
        "startLine": 229,
        "startChar": 55,
        "endLine": 230,
        "endChar": 56
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b312a512_30339327",
        "filename": "runtime/metrics/statsd.cc",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-24T15:24:45Z",
      "side": 1,
      "message": "No, this is generated by stats-log-api-gen from atoms.proto. Specifically, this field is the enum ArtThreadType (https://cs.android.com/android/platform/superproject/+/master:frameworks/proto_logging/stats/atoms.proto;l\u003d16111-16114;drc\u003dbce0b96ceb57908e3c9f255f4c8eaad540d93595) which becomes consts in statslog_art.h (https://cs.android.com/android/platform/superproject/+/master:out/soong/.intermediates/art/runtime/statslog_art.h/gen/statslog_art.h;l\u003d98-100).\n\nArtThreadType doesn\u0027t have an entry for 0 though. I think the right thing to do here is to add such an entry and use the generated constant here. (There was some churn around this wrt prebuilts last year, but that has been sorted out. It still may be a good idea to test it on master-art, though.)\n\nThen I think that ThreadType enum in metrics.h is suspicious, in particular since its values are offset by 1 from the protobuf enum. That seems like a recipe for problems. If it isn\u0027t used I\u0027d be very keen to remove it altogether and use the autogenerated constants everywhere instead.\n\nBoth those cleanups seem worthwhile, but they\u0027re arguably not in scope here, so I\u0027ll resolve this.",
      "parentUuid": "227e0d15_1a130d35",
      "range": {
        "startLine": 229,
        "startChar": 55,
        "endLine": 230,
        "endChar": 56
      },
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ad0eb0b_10512390",
        "filename": "runtime/oat_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 2255,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-24T17:24:40Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e54393c_84d628f0",
        "filename": "runtime/oat_file.h",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-24T17:24:40Z",
      "side": 1,
      "message": "I\u0027m not sure before and after mean the same thing here.",
      "revId": "5aa244250b270779b3d9571088cdfcfbe6ee1e95",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}