{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "74c290c3_1a1a32b9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-15T14:06:14Z",
      "side": 1,
      "message": "I think the convention is to break text at column 72 in commit messages (even though Gerrit also does it implicitly).",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "439624f9_63b706c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-15T14:06:14Z",
      "side": 1,
      "message": "Did you try `// NOLINTBEGIN(modernize-use-using)` and `// NOLINTEND` around the #include line?",
      "range": {
        "startLine": 9,
        "startChar": 203,
        "endLine": 9,
        "endChar": 222
      },
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3629512f_dd170acd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-15T14:26:20Z",
      "side": 1,
      "message": "Yes, I have tried all combinations of // NOLINT, // NOLINTENEXTLINE, and // NOLINTBEGIN + // NOLINTEND, but none of them solved the problem.",
      "parentUuid": "439624f9_63b706c6",
      "range": {
        "startLine": 9,
        "startChar": 203,
        "endLine": 9,
        "endChar": 222
      },
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17b428dc_eb4abd9b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-15T14:26:20Z",
      "side": 1,
      "message": "Stange, I have added this additional information directly in Gerrit (they are not present in my local commit message), so that should have been done automatically - I\u0027ll break it down manually.",
      "parentUuid": "74c290c3_1a1a32b9",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eee9d472_7ea95108",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-15T14:06:14Z",
      "side": 1,
      "message": "Although this is admittedly a problem, or at least a potential one, I don\u0027t think it has any connection.",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd62ca9_c7e0fc02",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-15T14:31:34Z",
      "side": 1,
      "message": "Not even if we disable clang-tidy completely for external/dlmalloc by creating an Android.bp file in there and setting `tidy: false` explicitly?",
      "parentUuid": "eee9d472_7ea95108",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a05bb45_25cbbddc",
        "filename": "build/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-15T13:11:50Z",
      "side": 1,
      "message": "If we leave this, we can\u0027t prevent people from violating this rule in the future. Could you upload a patchset to show how you would exclude external/dlmalloc with --header-filter? It may be interesting for us to play with the path spec.",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4de2424c_d4171d77",
        "filename": "build/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-15T13:55:31Z",
      "side": 1,
      "message": "From your comment I understand that you would use the -header-filter flag to _exclude_ some paths from being included in the clang-tidy analysis; I had this idea as well (at first), but it looks like that flag does actually the opposite: by default, clang-tidy should _ignore_ all header files, and you could use -header-files to _include_ the ones that you want to have checked (see https://stackoverflow.com/a/65391968 and https://cs.android.com/android-llvm/toolchain/llvm-project/+/master:clang-tools-extra/test/clang-tidy/readability-identifier-naming.cpp;l\u003d90-92?q\u003dheader-filter)",
      "parentUuid": "1a05bb45_25cbbddc",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e0e88e6_d674c768",
        "filename": "build/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-06-15T14:21:46Z",
      "side": 1,
      "message": "Try `-header-filter\u003dart/` to only include ART headers?",
      "parentUuid": "4de2424c_d4171d77",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44ea7623_7bde0126",
        "filename": "build/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-15T14:34:18Z",
      "side": 1,
      "message": "I\u0027ve tried this, too - in fact, this surfaces _more_ issues because there are some typedef statements in some ART header files (e.g., `art/libelffile/elf/elf_debug_reader.h`) which are not picked up with the default configuration.",
      "parentUuid": "4e0e88e6_d674c768",
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64087f21_799eccd9",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-15T14:06:14Z",
      "side": 1,
      "message": "According to https://clang.llvm.org/extra/clang-tidy/#suppressing-undesired-diagnostics the proper syntax is `NOLINT(modernize-use-using)`. I suggest using that here too. (I suspect this is actually the same as just `NOLINT`, i.e. it turns off all lint checks.)",
      "range": {
        "startLine": 31,
        "startChar": 37,
        "endLine": 31,
        "endChar": 63
      },
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee07994d_a644ff1a",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-06-15T14:26:20Z",
      "side": 1,
      "message": "I am aware that would be the proper syntax (and would be my preference, too) - the reason why I went for this approach is that //NOLINT(modernize-use-using) would be recognised by CppLint as one of its suppressions, throwing an error as this is not one of the checks CppLint does (but it\u0027s one of clang-tidy\u0027s).",
      "parentUuid": "64087f21_799eccd9",
      "range": {
        "startLine": 31,
        "startChar": 37,
        "endLine": 31,
        "endChar": 63
      },
      "revId": "41376430c413dfd637a31b0d48db8c698ae56cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}