{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "aac5954f_b8061f25",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 2340,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-05-23T12:14:38Z",
      "side": 1,
      "message": "Isn\u0027t the transactional interpreter single-threaded? Could we avoid adding one field in the thread structure for a single compiler-only use?",
      "range": {
        "startLine": 2338,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 49
      },
      "revId": "c23941ca565e3667ce7682af6470d62f4fb77865",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a37fa1d2_d3318ce6",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 2340,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-05-23T12:24:46Z",
      "side": 1,
      "message": "Currently, the only use is to assert that we do not check for transactions in the pre-fence visitor for array class allocation. That code is unrelated to transactions and needs to support per-thread assertions. (If a transaction is active, we know we\u0027re running single-threaded but this is trying to prevent the very check for active transactions.)\n\nI think we could use this assertion more in other parts of the code to help remove some unnecessary code. This is similar to some uses of the `ScopedDebugDisallowReadBarriers` which I used to find and remove read barriers from `ImageWriter` where read barriers would be harmless but unnecessarily bloat the code and slow it down.",
      "parentUuid": "aac5954f_b8061f25",
      "range": {
        "startLine": 2338,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 49
      },
      "revId": "c23941ca565e3667ce7682af6470d62f4fb77865",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a5b71fc_998cdb39",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 2340,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-05-23T12:26:27Z",
      "side": 1,
      "message": "Not sure I understand. Why not check a global in eg Runtime::Current?",
      "parentUuid": "a37fa1d2_d3318ce6",
      "range": {
        "startLine": 2338,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 49
      },
      "revId": "c23941ca565e3667ce7682af6470d62f4fb77865",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d82ebcac_2e729f6c",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 2340,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-05-23T12:31:09Z",
      "side": 1,
      "message": "Because these checks are executed also when running multi-threaded.\n\nAs I wrote above: \"If a transaction is active, we know we\u0027re running single-threaded but this is trying to prevent the very check for active transactions.\" And that check is often done concurrently from multiple threads.\n\n(I actually tried to put the flag to `Runtime` first before hitting failures in gtests and realizing that we need a `Thread`-specific check.)",
      "parentUuid": "3a5b71fc_998cdb39",
      "range": {
        "startLine": 2338,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 49
      },
      "revId": "c23941ca565e3667ce7682af6470d62f4fb77865",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5740974_a2e0e88f",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 2340,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2024-05-23T13:06:19Z",
      "side": 1,
      "message": "\u003e Because these checks are executed also when running multi-threaded.\n\nRight, but then there is no transaction and we expect the char to be empty, no?\n\n\u003e \n\u003e As I wrote above: \"If a transaction is active, we know we\u0027re running single-threaded but this is trying to prevent the very check for active transactions.\" And that check is often done concurrently from multiple threads.\n\u003e \n\u003e (I actually tried to put the flag to `Runtime` first before hitting failures in gtests and realizing that we need a `Thread`-specific check.)",
      "parentUuid": "d82ebcac_2e729f6c",
      "range": {
        "startLine": 2338,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 49
      },
      "revId": "c23941ca565e3667ce7682af6470d62f4fb77865",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73be7185_66feeccd",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 2340,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-05-23T13:15:05Z",
      "side": 1,
      "message": "No, the `last_no_transaction_checks_cause` can be non-null while running multi-threaded.\n\nWhen executing multi-threaded, the `Runtime::active_transaction_` should be false. But we may still want to assert that we don\u0027t even _look_ at that flag - in some contexts that would be an unnecessary check (unnecessary code bloat and performance hit).",
      "parentUuid": "c5740974_a2e0e88f",
      "range": {
        "startLine": 2338,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 49
      },
      "revId": "c23941ca565e3667ce7682af6470d62f4fb77865",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}