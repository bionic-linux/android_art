{
  "comments": [
    {
      "key": {
        "uuid": "e541c27a_fa9ea0fd",
        "filename": "runtime/native/dalvik_system_InMemoryDexClassLoader_DexData.cc",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2016-08-26T15:47:14Z",
      "side": 1,
      "message": "Can you provide a more useful name so people looking at /proc/\u003cpid\u003e/smaps have a sense of where this memory is coming from and it can be properly categorized in dumpsys meminfo?",
      "range": {
        "startLine": 42,
        "startChar": 47,
        "endLine": 42,
        "endChar": 49
      },
      "revId": "4ff7c618773b8381a50e2cdedd2fc638adf6dd78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_9a0ddc0f",
        "filename": "runtime/native/dalvik_system_InMemoryDexClassLoader_DexData.cc",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-26T16:26:32Z",
      "side": 1,
      "message": "Our style is to use a unique_ptr immediately, which lowers the dangers of creating a leak when extending the code.",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 42,
        "endChar": 9
      },
      "revId": "4ff7c618773b8381a50e2cdedd2fc638adf6dd78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "713cb9c0_b1076074",
        "filename": "runtime/native/dalvik_system_InMemoryDexClassLoader_DexData.cc",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2016-08-30T13:44:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e541c27a_fa9ea0fd",
      "range": {
        "startLine": 42,
        "startChar": 47,
        "endLine": 42,
        "endChar": 49
      },
      "revId": "4ff7c618773b8381a50e2cdedd2fc638adf6dd78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "713cb9c0_91045c70",
        "filename": "runtime/native/dalvik_system_InMemoryDexClassLoader_DexData.cc",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2016-08-30T13:44:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e541c27a_9a0ddc0f",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 42,
        "endChar": 9
      },
      "revId": "4ff7c618773b8381a50e2cdedd2fc638adf6dd78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e541c27a_bae1b828",
        "filename": "runtime/native/dalvik_system_InMemoryDexClassLoader_DexData.cc",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-08-26T16:26:32Z",
      "side": 1,
      "message": "This is the point I meant where you\u0027re leaking the map. Use the unique_ptr as an argument, and release it after line 74. \n\nOr change the DexFile::Open API to take an rvalue reference unique_ptr, maybe, to indicate passing of ownership. I think our DexFile API wrt/ MemMap is simply not good enough.",
      "range": {
        "startLine": 70,
        "startChar": 2,
        "endLine": 74,
        "endChar": 3
      },
      "revId": "4ff7c618773b8381a50e2cdedd2fc638adf6dd78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "713cb9c0_d10ae47d",
        "filename": "runtime/native/dalvik_system_InMemoryDexClassLoader_DexData.cc",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2016-08-30T13:44:06Z",
      "side": 1,
      "message": "Adapted DexFile factories to take unique_ptr\u003cMemMap\u003e\u0026\u0026 as an argument.\n\nThe former (obscure and indefensible) code path saw the map being owned by a DexFile before hitting any error handling paths so non-obviously not leaked.\n\nIt might be useful to adapt the factory methods in mem_map.{h,cc} to return std::unique_ptr\u003cMemMap\u003e, pushing the ownership all the way down. Lots of churn from doing this though. Happy to undertake in a different CL, WDYT?",
      "parentUuid": "e541c27a_bae1b828",
      "range": {
        "startLine": 70,
        "startChar": 2,
        "endLine": 74,
        "endChar": 3
      },
      "revId": "4ff7c618773b8381a50e2cdedd2fc638adf6dd78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}