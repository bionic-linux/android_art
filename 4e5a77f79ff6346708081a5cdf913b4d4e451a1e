{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2f526027_75088cef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-20T06:05:01Z",
      "side": 1,
      "message": "This leaves a possibility that someone might think that we are setting a bit in every nibble, which means higher physical RAM consumption. Instead, IIUC, what\u0027s happening is that the first 1/4th of the bitmap will be used if the page size is 16KB.\n\nPlease correct me if I\u0027m wrong, otherwise clarify this in the statement.",
      "range": {
        "startLine": 15,
        "startChar": 56,
        "endLine": 16,
        "endChar": 44
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a54f4e2_059a656e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-20T13:24:04Z",
      "side": 1,
      "message": "In this case yes, we are indeed setting a single bit in every nibble when the runtime page size is 16k, as the internal fixed alignment of the the space bitmap is fixed to 4k.\n\nThe reasoning was that when compared to 4k, we\u0027re not increasing memory consumption, but merely not reducing it as much as we could. And looking at the bottom line and assuming a capacity of 256M, the space bitmaps would have the following sizes if their internal alignments would match the runtime page size:\n\n  - 4k  -\u003e 8k\n  - 16k -\u003e 2k\n  \nSo in effect, with a 16k runtime page size, there wouldn\u0027t be any actual memory savings in that one will still need a full 16k page to allocate the 2k bitmaps. Although I guess we could merge the 2 bitmaps into a single mapping, I hadn\u0027t considered that.\n\nThat being said, there might be performance tradeoffs here, between keeping the bits as packed as possible, for maybe better cache locality, at the expense of adding overhead to compute where the bits are, when the alignment is no longer a constexpr.\n\nWe thought the current approach was the better way forward, favouring the simplicity of keeping kAlignment fixed in the bitmap, WDYT?",
      "parentUuid": "2f526027_75088cef",
      "range": {
        "startLine": 15,
        "startChar": 56,
        "endLine": 16,
        "endChar": 44
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1276b02_6fbf8909",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T04:07:57Z",
      "side": 1,
      "message": "While I agree that as things stand today we are not making things worse memory consumption wise, but it\u0027s not ideal.\n\nInstead of mmapping the bitmap, we could start using native allocator in cases where the bitmap size is smaller than a threshold (\u003e\u003d page-size). But that\u0027s not going to be a trivial change. I guess we\u0027ll have to do it anyway once page-size increases as then there will be a lot times that the bitmap will be smaller than a page and it wouldn\u0027t make any sense to separately mmap it.",
      "parentUuid": "5a54f4e2_059a656e",
      "range": {
        "startLine": 15,
        "startChar": 56,
        "endLine": 16,
        "endChar": 44
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fb6ec0e_7e1a696a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-20T06:05:01Z",
      "side": 1,
      "message": "I just checked that regardless of which type of large-object space we use, we always allocate bitmap for the entire 4GB of 32-bit address space. And that too for 2 bitmaps. In a different CL later I will fix it to not do so for free-list based large-object space.",
      "range": {
        "startLine": 18,
        "startChar": 28,
        "endLine": 18,
        "endChar": 32
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92fe48e2_de0d98e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-20T13:24:04Z",
      "side": 1,
      "message": "Oh yes I did notice that, and I think I even considered changing it as part of this patch, to only allocate a 4G-covering bitmap for the LargeObjectMapSpace, and make the FreeListSpace only cover the 256 range.\n\nLet me know if you would like me to do that, or if you\u0027d prefer this was a follow-up, as it\u0027s technically orthogonal and wasn\u0027t introduced by the 16k effort.\n\nTo make sure I understand, even though we allocate a bitmap to cover the whole 4G range - which translates to 128k of virtual space, for one bit per page, if my calculations are correct - we actually only touch 8k inside it when using the free-list space, by default. So in the end, we\u0027re using more virtual memory than strictly necessary. It\u0027s still good to reduce this of course.",
      "parentUuid": "4fb6ec0e_7e1a696a",
      "range": {
        "startLine": 18,
        "startChar": 28,
        "endLine": 18,
        "endChar": 32
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14857339_1205a1c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T04:07:57Z",
      "side": 1,
      "message": "As you said, it\u0027s orthogonal to this CL. So a separate fix would be preferable.",
      "parentUuid": "92fe48e2_de0d98e9",
      "range": {
        "startLine": 18,
        "startChar": 28,
        "endLine": 18,
        "endChar": 32
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1c38b9f_35cf77da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-08T10:21:39Z",
      "side": 1,
      "message": "Hi, looks like I have a test failure left, can anybody share any details?\n\nThanks",
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0825a090_85d424d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-08T12:14:29Z",
      "side": 1,
      "message": "@Nicolas, would you have time to share the failure report from the CI? I just realised everyone on CC is in a different timezone\n\nCheers",
      "parentUuid": "b1c38b9f_35cf77da",
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb25f4cb_456f2183",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-12-08T12:42:34Z",
      "side": 1,
      "message": "Looks like a flake. Re-trying.",
      "parentUuid": "0825a090_85d424d1",
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7dac8e2_e15fb71a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-08T13:46:09Z",
      "side": 1,
      "message": "Great, looks like it passed, thank you!",
      "parentUuid": "cb25f4cb_456f2183",
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d29ce8f_de1bb8e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-12-09T01:30:30Z",
      "side": 1,
      "message": "(needs +2 for parent CL to run presubmit)",
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36337ec9_62d529ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-12-19T02:44:26Z",
      "side": 1,
      "message": "Friendly ping for review.",
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "858bf05e_31b87367",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T04:07:57Z",
      "side": 1,
      "message": "For the changes in the gtests it would be nice if Nicolas/Hans can also take a quick look.",
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01323e02_5d9a137e",
        "filename": "runtime/gc/accounting/space_bitmap.h",
        "patchSetId": 5
      },
      "lineNbr": 279,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T04:07:57Z",
      "side": 1,
      "message": "This comment is good. But can you please elaborate a little more, like with an example of page-size being 16K while bitmap being still 4K.",
      "range": {
        "startLine": 277,
        "startChar": 3,
        "endLine": 279,
        "endChar": 61
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "000f8d93_5486b29a",
        "filename": "runtime/gc/accounting/space_bitmap.h",
        "patchSetId": 5
      },
      "lineNbr": 279,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-21T19:16:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01323e02_5d9a137e",
      "range": {
        "startLine": 277,
        "startChar": 3,
        "endLine": 279,
        "endChar": 61
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd1acc1b_5b3c36b0",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T04:07:57Z",
      "side": 1,
      "message": "Can you please introduce a public static const in the LargeObjectSpace class, say `gLargeObjectAlignment` and use it everywhere instead of gPageSize? This will have two benefits:\n\n1) Any overhead due to accessing gPageSize will be avoided\n2) It\u0027ll be easier to update the alignment for large-objects from one single location later when we try to fix the under-utilization of bitmap problem.\n\nAlso use this instead of gPageSize in all the collectors for checking if the alignment matches or not.",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4de44452_0ef5e335",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-21T10:37:00Z",
      "side": 1,
      "message": "I see, I was actually wondering about this other here: https://android-review.googlesource.com/c/platform/art/+/2844992/comment/6390c3e3_eb1561d8/ , sorry I should have brought that comment forward.\n\nMy main worry was that we would never test a case where `gLargeObjectAlignment` is different from `gPageSize`, and so over time I feared we would end up with inconsistent use of either, and it wouldn\u0027t necessarily make 2) easier. But that was assuming we would stick with the approach in this CL in the mid/long term. If this is to be changed soon-ish, then a `gLargeObjectAlignment` variable is probably better indeed, I\u0027ll look into that.\n\nRegarding the overhead, a dedicated global variable will not be faster than accessing `gPageSize`, as Ruben as made sure `gPageSize` is cached and can be accessed without first checking if it is initialized, see https://android-review.googlesource.com/c/platform/art/+/2852448",
      "parentUuid": "fd1acc1b_5b3c36b0",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e309708_8ae25c0a",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T10:47:43Z",
      "side": 1,
      "message": "I still think instead of percolating gPageSize as the large-object alignment everywhere, it makes sense to have a dedicated constant for large-objects.\n\nIn future, if and when we change the implementation to have, say 8KB alignment, even with 16K page-size, we would add the necessary tests for that. But having a dedicated variable, regardless, will help in capturing all the usages. With gPageSize, since it is used so much in other context as well, it would be easy to miss some of them and then get into a mess of nasty bugs.",
      "parentUuid": "4de44452_0ef5e335",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a68244c_6ab3383a",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-21T10:59:48Z",
      "side": 1,
      "message": "It sounds good to me.\n\nI wonder if there would be a way to make sure that in the future, if somebody adds new code that depends on `gLargeObjectAlignment`, that they do *not* use `gPageSize`. I guess the best we can probably do is add a comment",
      "parentUuid": "1e309708_8ae25c0a",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67b410a1_bc838794",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-21T12:43:49Z",
      "side": 1,
      "message": "Actually, after a bit of discussion with Ruben, I\u0027m thinking the better approach might be to have a static method rather than a static global in the class:\n\n    space::LargeObjectSpace::ObjectAlignment()\n  \nOne that would redirect to `gPageSize`\n\n    static ALWAYS_INLINE size_t ObjectAlignment() { return gPageSize; }\n\nIn general, the issues with adding a new global is that globals like `gPageSize` are subject to static initialization ordering issues. `gPageSize` implements guarantees against that, which we\u0027d have to copy over to `gLargeObjectAlignment`.\n\nAnother benefit of redirecting `LargeObjectSpace::ObjectAlignment()` to `gPageSize` is we then also inherit optimisations on `gPageSize` accesses that the follow-up patch implements.",
      "parentUuid": "1a68244c_6ab3383a",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e57779fe_2dc4361a",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T12:53:20Z",
      "side": 1,
      "message": "That works too. I just want a single place that can be updated to change the alignment for large-objects.",
      "parentUuid": "67b410a1_bc838794",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c40aecb1_bacd8412",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-21T13:03:31Z",
      "side": 1,
      "message": "Great. It\u0027s worth noting though that with this patch changing the alignment won\u0027t just work, as one will also need to ensure the `mmap()` result is properly aligned, by calling `MapAnonymousAligned()` rather than `MapAnonymous()` in `FreeListSpace::Create()`. But I can add a `DCHECK` with a note, so that it becomes obvious if/when that happens.",
      "parentUuid": "e57779fe_2dc4361a",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea0ef89_130acdea",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-12-21T13:05:39Z",
      "side": 1,
      "message": "DCHECK would be really helpful. Thanks. Please add it.",
      "parentUuid": "c40aecb1_bacd8412",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0ba9ec0_6cfe21f6",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1958325
      },
      "writtenOn": "2023-12-21T19:16:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dea0ef89_130acdea",
      "range": {
        "startLine": 274,
        "startChar": 25,
        "endLine": 274,
        "endChar": 34
      },
      "revId": "4e5a77f79ff6346708081a5cdf913b4d4e451a1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}