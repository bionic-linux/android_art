{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b39faa03_3c419e00",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "Spello: \"too\"",
      "range": {
        "startLine": 10,
        "startChar": 38,
        "endLine": 10,
        "endChar": 40
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92d61117_e8e83aff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-02T21:17:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b39faa03_3c419e00",
      "range": {
        "startLine": 10,
        "startChar": 38,
        "endLine": 10,
        "endChar": 40
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e15abea_2e605309",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-05-25T16:46:30Z",
      "side": 1,
      "message": "# Test performance\nhost-gtest:\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI76400010161261512\u0026testResultId\u003dTR17928668801053140\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI52900010161210135\u0026testResultId\u003dTR01728668659719924\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI65800010161196687\u0026testResultId\u003dTR97428668350844847\u0026tab\u003dperformance\nFrom looking at the \"Invocation performance summary\" graphs, static linked gtests(new) vs shared(current): 15-16m vs 12-14m\nNot sure how to read the graph, but some of the difference comes from the pause before fetching.\n\ntarget-gtest (cf_x86_64):\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI10900010161211160\u0026testResultId\u003dTR83728668779768336\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI11100010161236065\u0026testResultId\u003dTR07328668635641967\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI52700010161178788\u0026testResultId\u003dTR30228668365099373\u0026tab\u003dperformance\nStatic linking vs shared: 22-23m vs ~22m (no significant difference)\n\ntarget-gtest (oriole):\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI50500010161207022\u0026testResultId\u003dTR25428668795460453\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI31100010161205088\u0026testResultId\u003dTR05428668663518153\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI77900010161130189\u0026testResultId\u003dTR07228668338019584\u0026tab\u003dperformance\nStatic linking vs shared: 33-34m vs 33-40m\n\n# Build performance\nI couldn\u0027t figure out how to measure build times with ABTD, because it looks like there is no way to perform a clean build. So I used my cloudtop instead (RBE disabled).\nBuild command: https://paste.googleplex.com/5692380165439488?raw\nStatic link gtests: 9:54, 9:56, 9:49\nCurrent aosp/master: 9:06, 9:03, 9:06\n\nWith RBE enabled I have approximately the same results: 6:20-6:30.",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae2b3661_5fcdabe7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "Note that the tests aren\u0027t linked completely statically in these measurements - they still depend on libbase, libartbase, and many other libs with internal or unstable interfaces. So to address b/247108425 we need more static linking.",
      "parentUuid": "1e15abea_2e605309",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eec2d4e7_9b2b0383",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-06-06T18:07:42Z",
      "side": 1,
      "message": "I suspect these measurements are stale now with the switch to use `*_static_defaults`, but provided it\u0027s not _radically_ slower I don\u0027t think you need to redo them, because we don\u0027t have any good alternatives anyway.",
      "parentUuid": "ae2b3661_5fcdabe7",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edb1becc_480e6927",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-07T19:31:05Z",
      "side": 1,
      "message": "### Test performance\nhost-gtest:\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI89200010167534198\u0026testResultId\u003dTR18228713018287490\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI28700010167548531\u0026testResultId\u003dTR23128712993383683\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI00700010167766728\u0026testResultId\u003dTR79028714770820656\u0026tab\u003dperformance\nStatic linking vs shared: 18-21m vs 12-16m\n\n\ntarget-gtest (cf_x86_64):\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI23900010167735144\u0026testResultId\u003dTR56928714381223780\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI32000010167550167\u0026testResultId\u003dTR75728713007471917\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI30600010167540770\u0026testResultId\u003dTR21028713029865183tab\u003dperformance\nStatic linking vs shared: 22-23m vs 21-22m\n\n\ntarget-gtest (oriole):\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI00000010167533344\u0026testResultId\u003dTR47128712983981776\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI29200010167559938\u0026testResultId\u003dTR10928713002330543\u0026tab\u003dperformance\nhttps://android-build.corp.google.com/test_investigate/?invocationId\u003dI87800010167758349\u0026testResultId\u003dTR27128714514266231\u0026tab\u003dperformance\nStatic linking vs shared: 18-22m vs 17-20m\n\n### Build performance\n\nRBE disabled:\nStatic link: ~09:20\nDynamic link: ~08:53\n\nRBE enabled:\nStatic link: ~06:30\nDynamic link: ~06:04",
      "parentUuid": "eec2d4e7_9b2b0383",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8826eb9_b34447eb",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 33,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "I think these can be shortened to \"deps\" without any loss of clarity, and it\u0027d help shorten these already long identifiers. Optional though.",
      "range": {
        "startLine": 33,
        "startChar": 34,
        "endLine": 33,
        "endChar": 46
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce079896_b6c09644",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "Meta comment that may preempt most of the other comments:\n\nThere\u0027s a lot left that isn\u0027t getting linked statically in this CL, both ART internal libraries like libartbase, libartpalette, etc, and external libs without stable ABIs, like libbase.\n\nIf we are to solve b/247108425 through static linking (and I don\u0027t see any other way), we\u0027ll need to change that, and then we can no longer use these `*_dependencies` defaults to share dependencies with the real libs. That means we\u0027ll need to essentially revert this CL, if I\u0027m not mistaken.\n\nIs it possible to use the `*_static_defaults` modules for the gtests instead?\n\nMaybe it\u0027s best to set up a meeting next week to discuss the way forward here.",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 15
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14ab59b4_dd066153",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-02T21:17:38Z",
      "side": 1,
      "message": "Using `*_static_defaults` seems to work. \nChecking with `ldd $(realpath art_standalone_runtime_tests)` on x86_64 cf device:\n```\nlinux-gate.so.1 \u003d\u003e [vdso] (0xf781b000)\nlibunwindstack.so \u003d\u003e /system/lib/libunwindstack.so (0xf6000000)\nlibz.so \u003d\u003e /system/lib/libz.so (0xf60d4000)\nlibdl_android.so \u003d\u003e /apex/com.android.runtime/lib/bionic/libdl_android.so (0xf5fc3000)\nheapprofd_client_api.so \u003d\u003e /system/lib/heapprofd_client_api.so (0xf5f05000)\nlibc++.so \u003d\u003e /system/lib/libc++.so (0xf6184000)\nlibc.so \u003d\u003e /apex/com.android.runtime/lib/bionic/libc.so (0xf5956000)\nlibm.so \u003d\u003e /apex/com.android.runtime/lib/bionic/libm.so (0xf58d1000)\nlibdl.so \u003d\u003e /apex/com.android.runtime/lib/bionic/libdl.so (0xf6270000)\nlibbase.so \u003d\u003e /system/lib/libbase.so (0xf5f74000)\nliblog.so \u003d\u003e /system/lib/liblog.so (0xf5787000)\nliblzma.so \u003d\u003e /system/lib/liblzma.so (0xf5889000)\nlibprocinfo.so \u003d\u003e /system/lib/libprocinfo.so (0xf611b000)\nlibsigchain.so \u003d\u003e /apex/com.android.art/lib/libsigchain.so (0xf5ed0000)\nlibc++.so \u003d\u003e /apex/com.android.art/lib/libc++.so (0xf57c7000)\nlibnativehelper.so \u003d\u003e /apex/com.android.art/lib/libnativehelper.so (0xf6170000)\nlibstatssocket.so \u003d\u003e /apex/com.android.os.statsd/lib/libstatssocket.so (0xf5913000)\n```\n`libsigchain` has to be shared, otherwise `art_standalone_sigchain_tests` fail. I think it would be easier to just package it with the test.\n\n\nGetting rid of `libbase` is a bit difficult, but I guess it can be done in a follow-up CL.",
      "parentUuid": "ce079896_b6c09644",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 15
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fd6e10f_37513da9",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-06-06T18:07:42Z",
      "side": 1,
      "message": "There are several other libraries in that list which aren\u0027t stable and should be linked statically instead, but yes, let\u0027s tackle them separately.",
      "parentUuid": "14ab59b4_dd066153",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 15
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d09b8807_a4ab35ab",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "There\u0027s a whole lot of duplication with libvixl(d) dependencies below. Can\u0027t they go in here with `whole_static_libs`? Isn\u0027t the plan is to limit the exported symbols in libart(d)-compiler with version script anyway?",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef4b6df4_4dee8746",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-02T21:17:38Z",
      "side": 1,
      "message": "libvixl(d) is specified in `codegen` section, which is supported only in `art_cc_*` module types.\nThere is ongoing work to remove `art_cc_defaults` (http://b/247785938), but some of it was reverted recently, so I don\u0027t know what\u0027s the correct way to replace `codegen`",
      "parentUuid": "d09b8807_a4ab35ab",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2898713_b29c6f23",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-06-06T18:07:42Z",
      "side": 1,
      "message": "`art_cc_defaults` is still in use, so we don\u0027t need to replace `codegen` sections here, and moving them around makes no difference wrt that work.",
      "parentUuid": "ef4b6df4_4dee8746",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3602f0e_5aec915b",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-07T19:31:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2898713_b29c6f23",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a91cdc5_4884be4a",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 298,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "This is only used in libart-compiler-gtest. Another variant, in particular if you can move the libvixl(d) dependencies as mentioned earlier, is to use the set of defaults directly in libart-compiler-gtest.",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8e30838_0739f011",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 298,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-02T21:17:38Z",
      "side": 1,
      "message": "I wanted to keep libart-compiler-gtest and libart**d**-compiler-gtest the same and the latter uses already existing libartd-compiler (it doesn\u0027t have LTO, so no issues there).\nIf I move all of libart(d)-compiler defaults into libart(d)-compiler-gtest, wouldn\u0027t it result in libart-compiler source being compiled twice? (for libart**d**-compiler for libart**d**-compiler-gtest)",
      "parentUuid": "5a91cdc5_4884be4a",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86543782_ef01c918",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 298,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-06-06T18:07:42Z",
      "side": 1,
      "message": "It\u0027d get linked twice (or more), but the compiled .o files ought be reused. Is the linking that expensive when LTO is off?\n\nStill, this has the benefit that it keeps consistency between d and non-d modules better, so I think it\u0027s fine after all, especially since you had to split the libart modules as well.",
      "parentUuid": "c8e30838_0739f011",
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84b0bae5_a0a7cd19",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 320,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "I\u0027ve discussed remaining shared libs earlier, but this one looks a bit odd since you\u0027re working to statically link libart elsewhere. Should it be a libart_headers dependency instead?",
      "range": {
        "startLine": 320,
        "startChar": 8,
        "endLine": 320,
        "endChar": 16
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f71fe375_f18bb557",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 320,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-02T21:17:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84b0bae5_a0a7cd19",
      "range": {
        "startLine": 320,
        "startChar": 8,
        "endLine": 320,
        "endChar": 16
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02607921_3eb65224",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-05-26T14:26:07Z",
      "side": 1,
      "message": "Are all these necessary?",
      "range": {
        "startLine": 322,
        "startChar": 0,
        "endLine": 326,
        "endChar": 6
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edb64333_1ac6d332",
        "filename": "compiler/Android.bp",
        "patchSetId": 11
      },
      "lineNbr": 326,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-02T21:17:38Z",
      "side": 1,
      "message": "I\u0027ve had some obscure error from soong when I was trying the shared libart-compiler-for-test lib approach, but now it\u0027s redundant",
      "parentUuid": "02607921_3eb65224",
      "range": {
        "startLine": 322,
        "startChar": 0,
        "endLine": 326,
        "endChar": 6
      },
      "revId": "bb46eed3afd1a1ded927fd05de00407ad46cb8b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}