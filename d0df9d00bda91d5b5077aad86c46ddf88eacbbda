{
  "comments": [
    {
      "key": {
        "uuid": "ea4a4b41_72d8b8a2",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4884,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-01-11T14:13:29Z",
      "side": 1,
      "message": "MIPS32R6?",
      "range": {
        "startLine": 4884,
        "startChar": 36,
        "endLine": 4884,
        "endChar": 44
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "277bbeaf_14963434",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4884,
      "author": {
        "id": 1056098
      },
      "writtenOn": "2016-01-11T18:51:06Z",
      "side": 1,
      "message": "MIPS32R6 in our case is a subset of MIPS64R6 and doesn\u0027t exist as a separate architecture of its own, at least for now. So, you can write either in the comment, but the emulator needs to be fixed for MIPS64R6, which will cover MIPS32R6 as well.",
      "parentUuid": "ea4a4b41_72d8b8a2",
      "range": {
        "startLine": 4884,
        "startChar": 36,
        "endLine": 4884,
        "endChar": 44
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67f216a9_2e7587d5",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4884,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-01-12T12:13:13Z",
      "side": 1,
      "message": "All right, thanks for the explanation.",
      "parentUuid": "277bbeaf_14963434",
      "range": {
        "startLine": 4884,
        "startChar": 36,
        "endLine": 4884,
        "endChar": 44
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca4d875b_7140b837",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4915,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-01-11T14:13:29Z",
      "side": 1,
      "message": "The Dalvik bytecode documentation specifies that for values above std::numeric_limits\u003cint64_t\u003e::max() (resp. std::numeric_limits\u003cint32_t\u003e::max()), the {float,double}-to-long (resp. {float,double}-to-int) instructions should produce std::numeric_limits\u003cint64_t\u003e::max() (resp. std::numeric_limits\u003cint32_t\u003e::max()).\n\nHow does the TRUNC.L.fmt (resp. TRUNC.W.fmt) instruction deal with such values?  (Same question for MIPS64.)",
      "range": {
        "startLine": 4915,
        "startChar": 13,
        "endLine": 4915,
        "endChar": 20
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d01ee4_ec372b1f",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4915,
      "author": {
        "id": 1056098
      },
      "writtenOn": "2016-01-11T18:51:06Z",
      "side": 1,
      "message": "R2 (NAN2008\u003d0):\n\u003c min --\u003e max\n\u003e max --\u003e max\nNaN --\u003e max\n\nR6 (NAN2008\u003d1):\n\u003c min --\u003e min\n\u003e max --\u003e max\nNaN --\u003e 0\n\nIOW, the difference is only in handling NaNs and negative values less than the minimum.\n\nThere\u0027s no difference between MIPS32 and MIPS64 other than the truncate/round/ceil/floor instructions with L in the format requiring a 64-bit FPU, which is always true for MIPS64 and R6 (AKA FR\u003d1), while older MIPS32R2 could have either a 32-bit FPU (AKA FR\u003d0) or a 64-bit one.",
      "parentUuid": "ca4d875b_7140b837",
      "range": {
        "startLine": 4915,
        "startChar": 13,
        "endLine": 4915,
        "endChar": 20
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27fc9e7c_cc5faf50",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4915,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-01-12T12:13:13Z",
      "side": 1,
      "message": "So only the behavior of the R6 (NAN2008\u003d1) instructions match the Dex {float,double}-to-{int,long} specification (https://source.android.com/devices/tech/dalvik/dalvik-bytecode.html); the R2 (NAN2008\u003d0) ones do not produce the expected result for values above max and NaN.\n\nShould you adjust the code for the R2 cases, or maybe delegate to runtime entry points?",
      "parentUuid": "27d01ee4_ec372b1f",
      "range": {
        "startLine": 4915,
        "startChar": 13,
        "endLine": 4915,
        "endChar": 20
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7532e54_728598c3",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4915,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2016-01-12T20:56:00Z",
      "side": 1,
      "message": "It\u0027s NaN and values below the minimum that need special care on R2/NAN2008\u003d0 and with the currently incorrect implementation of R6 in the emulator (it must have NAN2008\u003d1, but doesn\u0027t).\n\nThis code takes care of them by comparing the float/double input with numeric_limits\u003cint64_t/int32_t\u003e::min() and then, if input \u003e\u003d min turns out true, it procedes to the trunc instruction, which takes care of values greater than the maximum the same way with any NAN2008 setting.\n\nOtherwise (input \u003e\u003d min is false), the input is compared with itself (to detect a NaN) and the output is set to either the minimum or 0.\n\nThe runtime, where still used, takes care of the special cases. See file art/runtime/entrypoints/math_entrypoints.cc, functions art_d2l(), art_f2l(), art_d2i(), art_f2i() and the magic behind them in art_float_to_integral\u003cint_type, float_type\u003e().\n\nI believe everything\u0027s correct (no failures in math tests either).",
      "parentUuid": "27fc9e7c_cc5faf50",
      "range": {
        "startLine": 4915,
        "startChar": 13,
        "endLine": 4915,
        "endChar": 20
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67f216a9_aee33732",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4915,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-01-13T11:05:17Z",
      "side": 1,
      "message": "Right; sorry, I read your initial reply too fast and thought the case of values above max (intead of the case of values below min) was not handled as expected for NAN2008\u003d0, because there was no test for them.\n\nThanks for the explanation.  This looks correct to me.  Maybe add the first three paragraphs of your reply as a comment above line 4885?",
      "parentUuid": "a7532e54_728598c3",
      "range": {
        "startLine": 4915,
        "startChar": 13,
        "endLine": 4915,
        "endChar": 20
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a570fe9_cfc1bd09",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4944,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-01-11T14:13:29Z",
      "side": 1,
      "message": "MIPS32R6?",
      "range": {
        "startLine": 4944,
        "startChar": 34,
        "endLine": 4944,
        "endChar": 42
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0776bac5_53a04462",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 4944,
      "author": {
        "id": 1056098
      },
      "writtenOn": "2016-01-11T18:51:06Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "8a570fe9_cfc1bd09",
      "range": {
        "startLine": 4944,
        "startChar": 34,
        "endLine": 4944,
        "endChar": 42
      },
      "revId": "d0df9d00bda91d5b5077aad86c46ddf88eacbbda",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}