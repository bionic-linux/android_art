{
  "comments": [
    {
      "key": {
        "uuid": "c019fb32_d254f59b",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2173,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T13:05:52Z",
      "side": 1,
      "message": "This is unsigned byte. As there is no LDARSB instruction, the conditional branch below should be changed to BNE.\n\n(We could rewrite the status to take the top 5 (or 4) bits instead of the bottom 8.)",
      "range": {
        "startLine": 2173,
        "startChar": 9,
        "endLine": 2173,
        "endChar": 10
      },
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbf04457_3ea08252",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2173,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-07T15:25:14Z",
      "side": 1,
      "message": "Is this going to increase code size? I thought all instructions on ARM64 were the same size?\n\nWe picked the layout with \"bottom 8 bits\" for a reason because that\u0027s the only way the subtype check uses a single right-shift instruction (see commit message).",
      "parentUuid": "c019fb32_d254f59b",
      "range": {
        "startLine": 2173,
        "startChar": 9,
        "endLine": 2173,
        "endChar": 10
      },
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9b0e6f7_08cbb0c3",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2173,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T15:34:11Z",
      "side": 1,
      "message": "UBFX is always available on ARM/ARM64.\n(Though the LSR can be a 16-bit instruction on ARM while UBFX is always 32-bit.)",
      "parentUuid": "bbf04457_3ea08252",
      "range": {
        "startLine": 2173,
        "startChar": 9,
        "endLine": 2173,
        "endChar": 10
      },
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75c48df0_4b0d4b67",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2173,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-07T15:38:45Z",
      "side": 1,
      "message": "I was asking about BNE vs B though in this ClinitCheck context?\n\nWe already optimized the subtype check code. I shared slides with you incase you missed mtv compiler team\u0027s meeting notes which sent this out. You can see what kind of negative impact it would have if we were to change bit representation.",
      "parentUuid": "a9b0e6f7_08cbb0c3",
      "range": {
        "startLine": 2173,
        "startChar": 9,
        "endLine": 2173,
        "endChar": 10
      },
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1baa6bdf_a18265c4",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2173,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T15:45:48Z",
      "side": 1,
      "message": "BLT and BNE have the same size.\n\nThe only way to reduce code size here would be to rewrite the status so that kStatusInitialized\u003d\u003d0 and use CBNZ. That would require the status to take 8 bits.\n\nOther than that, even if the status is in the top 4 or 5 bits, we can simply load the upper 8 bits and compare with a shifted kStatusInitialized and use BLT, ignoring the lower bits. The code would have exactly the same size as now.",
      "parentUuid": "75c48df0_4b0d4b67",
      "range": {
        "startLine": 2173,
        "startChar": 9,
        "endLine": 2173,
        "endChar": 10
      },
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4a30e93_b7122e9f",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 10
      },
      "lineNbr": 2173,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-07T15:52:49Z",
      "side": 1,
      "message": "If we could do something like\n\n    bitstring OF status\n    31      5 4  3    0\n\nwithout hurting the code size of the ClassInitialization checks, that would be great. I think status now is 15 values, we probably want 5 bits to be future safe. Anyway we could use 1 of the extra 3 bits to store the full state, that would make the runtime checks not need to call Depth() on the fast path.\n\nThat being said I\u0027m not convinced on ARM32 it would remain the same size given the big limitations of thumb encoding, unless you already looked into it?\n\nEither way this seems like a follow up. (I will do minimal fix to BNE in this CL as you recommend).",
      "parentUuid": "1baa6bdf_a18265c4",
      "range": {
        "startLine": 2173,
        "startChar": 9,
        "endLine": 2173,
        "endChar": 10
      },
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "492a237e_59667bdf",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 10
      },
      "lineNbr": 177,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T13:05:52Z",
      "side": 1,
      "message": "Are we losing the ability to roll back the transaction?",
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "107efb8b_719686c0",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 10
      },
      "lineNbr": 177,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-07T15:21:50Z",
      "side": 1,
      "message": "I don\u0027t know. Under the hood it still follows kTransactionActive when setting the 32-bit field. Is there some problem sharing the 24/8bit data?\n\n+Mathieu, what does it mean to \"roll back\" a transaction in this context?",
      "parentUuid": "492a237e_59667bdf",
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cae319b8_08d549cb",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 10
      },
      "lineNbr": 177,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T15:28:33Z",
      "side": 1,
      "message": "I see, we\u0027re eventually going to the SubtypeCheck\u003c\u003e::CasFieldWeakSequentiallyConsistent32() where we check for a transaction being active. So I guess everything should be OK.",
      "parentUuid": "107efb8b_719686c0",
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a219a83b_8f3b06ac",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 10
      },
      "lineNbr": 177,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-07T15:33:24Z",
      "side": 1,
      "message": "Is it single-threaded for transactions?",
      "parentUuid": "cae319b8_08d549cb",
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b36eac1_61aa27d2",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 10
      },
      "lineNbr": 177,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T15:37:28Z",
      "side": 1,
      "message": "Yes, it\u0027s single-threaded. I don\u0027t expect us to implement multi-threaded transactions anytime soon.",
      "parentUuid": "a219a83b_8f3b06ac",
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d18a555_b208b97d",
        "filename": "test/988-TooWideClassInstanceOf/src/Main.java",
        "patchSetId": 10
      },
      "lineNbr": 1227,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-11-07T13:05:52Z",
      "side": 1,
      "message": "Let me repeat myself. All the unused classes are useless if you do not initialize them.",
      "revId": "6dbed15f584eb7dbabbc6dea2e1a4cb37b058b47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}