{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5058eafb_1acbf5bd",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Copy-pasted from arm64 without the macro being defined there?\n\nWe should actually define and use this macro on arm/arm64/riscv as we do on x86/x86-64.",
      "range": {
        "startLine": 57,
        "startChar": 60,
        "endLine": 57,
        "endChar": 78
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a8e1ef8_0c0734a1",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Is there really the same relocation type on riscv as on arm64?\n\n(Or should there be an #error \"Unimplemented\" here instead?)",
      "range": {
        "startLine": 78,
        "startChar": 13,
        "endLine": 78,
        "endChar": 25
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0051609d_a8e65e8c",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 86,
        "startChar": 49,
        "endLine": 86,
        "endChar": 51
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7658aa34_402e149d",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 97,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Missing CFI directives in all these SETUP/RESTORE macros.",
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a7c7ee5_10c06768",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "The parameter type is unused. (Used only in a comment.)\n\nNo commas between macro arguments? (I see that on arm64 we\u0027re sometimes using commas and sometimes just spaces. We should probably just choose which style we want and try to be consistent.)",
      "range": {
        "startLine": 178,
        "startChar": 44,
        "endLine": 178,
        "endChar": 49
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc8e73ac_d03c2ca4",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 183,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "`\\tmpreg`",
      "range": {
        "startLine": 183,
        "startChar": 25,
        "endLine": 183,
        "endChar": 27
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d30573d5_9e614b6a",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 273,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Style: Do we really want to have a space here? (Same below.)",
      "range": {
        "startLine": 273,
        "startChar": 1,
        "endLine": 273,
        "endChar": 2
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "648e2ab8_e0b7b286",
        "filename": "runtime/arch/riscv64/asm_support_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 346,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Do we want to use an `#if` here to check that the `SAVE_EVERYTHING_FRAME_OFFSET_FA0` matches the current offset? (Same below for `SAVE_EVERYTHING_FRAME_OFFSET_A0`.)",
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dcca446_c9c9caef",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Missing CFI directives. We should define `SAVE_REG`/`RESTORE_REG` macros.\n\nDo we want to reorder these on the stack to keep the return address on top?",
      "range": {
        "startLine": 27,
        "startChar": 4,
        "endLine": 28,
        "endChar": 16
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a1c7492_98c250c4",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Missing CFI directives and odd order of saved registers.",
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38154ba3_1ba4e021",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Can we replace the unconditional jump to BEQZ with a BNEZ to the next instruction to have one less instruction in the loop? (I assume there is a BNEZ on riscv.)",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 11
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b77953b5_ad60b2d3",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 152,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Is unaligned load OK on riscv? (Same question for `LOADREG_F8`.)",
      "range": {
        "startLine": 152,
        "startChar": 4,
        "endLine": 152,
        "endChar": 26
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "344e274e_c16c713f",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 172,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "assembler?\n\nIf there are different encoding sizes, should it be possible to specify the encoding similar to the `.w` suffix for T32?",
      "range": {
        "startLine": 172,
        "startChar": 75,
        "endLine": 172,
        "endChar": 92
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d3bb428_201b2853",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 183,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Why is this here? Just to let us easily find out which check failed?",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 20
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4c7c047_b7593e3f",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 218,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "type",
      "range": {
        "startLine": 218,
        "startChar": 74,
        "endLine": 218,
        "endChar": 79
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1823bedb_5c6338dd",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 227,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "This is OK for initial implementation but I think we can optimize this code.\nWe should have no taken branches to reach the \"A4\" loading.\nWe should avoid the check for all registers used.\nI\u0027ll prepare an arm64 CL to do that and you can then prepare the riscv improvements.",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 227,
        "endChar": 11
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a8fdd4_4588f6fb",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 332,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "We could define the managed ABI to skip A1 for static methods. This would reduce argument shuffling for calls to static native methods. (It would reduce the number of argumentswe can pass in registers but methods with more than 6 arguments should be rare and probably not performance sensitive anyway.)",
      "range": {
        "startLine": 332,
        "startChar": 4,
        "endLine": 332,
        "endChar": 37
      },
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8dd3da5_e8865cb9",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 8
      },
      "lineNbr": 377,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-02-27T08:59:35Z",
      "side": 1,
      "message": "Missing CFI directives.",
      "revId": "512154f3044669e97223cbce657361b2ef021d4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}