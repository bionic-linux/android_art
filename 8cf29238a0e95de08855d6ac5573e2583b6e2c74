{
  "comments": [
    {
      "key": {
        "uuid": "f00235ba_183205dd",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-10-08T09:49:47Z",
      "side": 1,
      "message": "Is this needed?",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 19
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b06c3d16_b6172811",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-08T10:02:49Z",
      "side": 1,
      "message": "It seems to be commonly indirectly included. However, for flounder it isn\u0027t and that\u0027s how I found the invalid \u0026references_buffer[0] in the generic non-litte-endian branch which I previously assumed to be unused.",
      "parentUuid": "f00235ba_183205dd",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 19
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30fe8d70_72c49895",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-08T18:10:33Z",
      "side": 1,
      "message": "Mac doesn\u0027t provide endian.h, https://android-review.googlesource.com/175052 .",
      "parentUuid": "b06c3d16_b6172811",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 19
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "459c212a_7bfc3fa2",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 800,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-10-08T09:49:47Z",
      "side": 1,
      "message": "You can actually replace this with IfTrueSuccessor(). It\u0027s safer anyway...",
      "range": {
        "startLine": 800,
        "startChar": 41,
        "endLine": 800,
        "endChar": 59
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70fba586_6c283b24",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 800,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-08T10:02:49Z",
      "side": 1,
      "message": "You mean if_block-\u003eGetLastInstruction()-\u003eAsIf()-\u003eIfTrueSuccessor()?",
      "parentUuid": "459c212a_7bfc3fa2",
      "range": {
        "startLine": 800,
        "startChar": 41,
        "endLine": 800,
        "endChar": 59
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70fba586_0fab69b2",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 800,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-10-08T14:13:30Z",
      "side": 1,
      "message": "Ah, forgot it\u0027s on the HIf. Never mind then.",
      "parentUuid": "70fba586_6c283b24",
      "range": {
        "startLine": 800,
        "startChar": 41,
        "endLine": 800,
        "endChar": 59
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70700519_84856699",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 801,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-10-08T09:49:47Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 801,
        "startChar": 41,
        "endLine": 801,
        "endChar": 54
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0435d80_1edb8dd8",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-10-06T20:46:58Z",
      "side": 1,
      "message": "just curious for my own understanding of this change\n\nthe [] has slightly different semantics than at()\n\ncan\u0027t you just add a check to the at operator to make everything checked (and at also throws out_of_range)",
      "range": {
        "startLine": 50,
        "startChar": 34,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90ec99cf_6d17958c",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-07T10:00:15Z",
      "side": 1,
      "message": "We don\u0027t want to throw or catch C++ exceptions, ever. So at() was using an unsupported way of asserting that the index is correct. With this change we DCHECK() in the operator[].",
      "parentUuid": "b0435d80_1edb8dd8",
      "range": {
        "startLine": 50,
        "startChar": 34,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "704d65ae_30783086",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-10-07T18:29:30Z",
      "side": 1,
      "message": "I guess my question was why you don\u0027t also \"intercept\" the at() operator in checked vector and add the DCHECK before issuing the base implementation. That way future clients that inadvertently use at() will still get your desired behavior.\n\nAgain, just curious, the change here obviously looks good.",
      "parentUuid": "90ec99cf_6d17958c",
      "range": {
        "startLine": 50,
        "startChar": 34,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "506b0131_e37d3272",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-07T18:36:26Z",
      "side": 1,
      "message": "People familiar with at() would actually expect it to throw out_of_range. To avoid misinterpretation of the code, I decided to remove at() from the interface.",
      "parentUuid": "704d65ae_30783086",
      "range": {
        "startLine": 50,
        "startChar": 34,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d03c51f4_3377a062",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-10-07T19:30:39Z",
      "side": 1,
      "message": "Fair enough. Perhaps a good idea to add this rationale as a comment to the class. Other than than, +1 for induction change.",
      "parentUuid": "506b0131_e37d3272",
      "range": {
        "startLine": 50,
        "startChar": 34,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70700519_846e467d",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-08T10:07:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d03c51f4_3377a062",
      "range": {
        "startLine": 50,
        "startChar": 34,
        "endLine": 50,
        "endChar": 36
      },
      "revId": "8cf29238a0e95de08855d6ac5573e2583b6e2c74",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}