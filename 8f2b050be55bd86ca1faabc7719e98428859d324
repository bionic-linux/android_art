{
  "comments": [
    {
      "key": {
        "uuid": "75dcead6_7c165c40",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 569,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T08:12:33Z",
      "side": 1,
      "message": "Is this copy necessary? Or should we have an ArtMethod::Invoke() overload that thakes a `ShadowVreg*`?",
      "range": {
        "startLine": 569,
        "startChar": 2,
        "endLine": 569,
        "endChar": 56
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df881811_44020ac2",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 569,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "There is many places in the runtime which assume vregs are tightly packed uint32 array, so I need to put the translation boundary somewhere.  I have experimented with many different approaches but it always get quickly very complicated.\n\nDoing copy here is the simplest solution I found (the internals of ArtMethod::Invoke would have to do the copy anyway otherwise).\n\nMy main question is whether this is GC-safe?  It seems to me that callers of ArtMethod::Invoke already rely on GC no happening during the invoke setup since the args array is not protected against GC in any way.\n\nHaving said that, I realize there a lot of opportunities for follow up cleanup.",
      "parentUuid": "75dcead6_7c165c40",
      "range": {
        "startLine": 569,
        "startChar": 2,
        "endLine": 569,
        "endChar": 56
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d5c0d20_d3796211",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T08:12:33Z",
      "side": 1,
      "message": "These are presumably unnecessary now and we should store 32-bit values using movq instead of movl.",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 271,
        "endChar": 0
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b024680a_2458deef",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Done - I deleted the macros.",
      "parentUuid": "9d5c0d20_d3796211",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 271,
        "endChar": 0
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40c9a2d2_8772eccf",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 281,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-08-29T10:56:16Z",
      "side": 1,
      "message": "Is this dead code? If so, remove it rather than comment it out.",
      "range": {
        "startLine": 276,
        "startChar": 0,
        "endLine": 281,
        "endChar": 3
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc7eaaf0_18b2b992",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 281,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40c9a2d2_8772eccf",
      "range": {
        "startLine": 276,
        "startChar": 0,
        "endLine": 281,
        "endChar": 3
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da1a9cb5_67f86dd2",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 284,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T08:12:33Z",
      "side": 1,
      "message": "VREG_ADDRESS(\\_vreg)\n\nSince you\u0027re touching this, please use the macros defined above.",
      "range": {
        "startLine": 284,
        "startChar": 19,
        "endLine": 284,
        "endChar": 33
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeca7c34_96343f7b",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 284,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da1a9cb5_67f86dd2",
      "range": {
        "startLine": 284,
        "startChar": 19,
        "endLine": 284,
        "endChar": 33
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79a586f0_9ead62a2",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T08:12:33Z",
      "side": 1,
      "message": "Drop this and change the movl above to movq. Though this requires changing the 32-bit register names to 64-bit names in many places.",
      "range": {
        "startLine": 285,
        "startChar": 4,
        "endLine": 285,
        "endChar": 46
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5c31f93_701109a1",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Yeah, that is my plan... I am not sure if I want to deal with the register renaming in this CL though.",
      "parentUuid": "79a586f0_9ead62a2",
      "range": {
        "startLine": 285,
        "startChar": 4,
        "endLine": 285,
        "endChar": 46
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56be35c2_d6f5d5d5",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 295,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-08-29T10:56:16Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 295,
        "endChar": 3
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efa17ee8_7e9796cb",
        "filename": "runtime/interpreter/mterp/x86/header.S",
        "patchSetId": 1
      },
      "lineNbr": 295,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56be35c2_d6f5d5d5",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 295,
        "endChar": 3
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf2dde8e_8db7cfac",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T08:12:33Z",
      "side": 1,
      "message": "If you want to keep this as separate fields, the class should `alignas(uint64_t)`.",
      "range": {
        "startLine": 55,
        "startChar": 2,
        "endLine": 56,
        "endChar": 18
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72e17861_6c1bd888",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Done\n\nIt seems clang is little happier with separate fields - translating them to store-pair rather than doing the bit shuffling logic.",
      "parentUuid": "bf2dde8e_8db7cfac",
      "range": {
        "startLine": 55,
        "startChar": 2,
        "endLine": 56,
        "endChar": 18
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44aaa803_32268be5",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-08-28T21:34:21Z",
      "side": 1,
      "message": "Isn\u0027t that illegal? Use bit_cast or so.",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 205,
        "endChar": 22
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b327aa0_3a10aa1f",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-28T21:45:29Z",
      "side": 1,
      "message": "I believe this is the best we can do - i.e. still pushing the spec, but in practice all compilers support it specifically for this use case.  Definitely better than the old version of the code, no?\n\nIsn\u0027t std::bit_cast C+20 only?",
      "parentUuid": "44aaa803_32268be5",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 205,
        "endChar": 22
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a65c4b6_d4145517",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-08-28T21:49:39Z",
      "side": 1,
      "message": "We have our own bitcast based on memcpy (which compilers supposedly recognize).",
      "parentUuid": "0b327aa0_3a10aa1f",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 205,
        "endChar": 22
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "776462fb_a8007196",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T08:12:33Z",
      "side": 1,
      "message": "#include \"base/casts.h\"",
      "parentUuid": "0a65c4b6_d4145517",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 205,
        "endChar": 22
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a81a33f_a90dd752",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Thanks.  I didn\u0027t realize that we have our own (or that compilers recognize memcpy).",
      "parentUuid": "776462fb_a8007196",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 205,
        "endChar": 22
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2cf00dae_08df4c9e",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-08-28T21:34:21Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 214,
        "startChar": 4,
        "endLine": 218,
        "endChar": 26
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6ecb0b4_a44541d8",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2cf00dae_08df4c9e",
      "range": {
        "startLine": 214,
        "startChar": 4,
        "endLine": 218,
        "endChar": 26
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b9d585f_19e7d7e9",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-08-29T08:12:33Z",
      "side": 1,
      "message": "Maybe it\u0027s time to get rid of the \"[0]\" here and stick to basic C++.",
      "range": {
        "startLine": 353,
        "startChar": 19,
        "endLine": 353,
        "endChar": 22
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9c25183_2fd41882",
        "filename": "runtime/interpreter/shadow_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-30T15:28:38Z",
      "side": 1,
      "message": "Elaborate?  I am tempted to stick with this for now.",
      "parentUuid": "2b9d585f_19e7d7e9",
      "range": {
        "startLine": 353,
        "startChar": 19,
        "endLine": 353,
        "endChar": 22
      },
      "revId": "8f2b050be55bd86ca1faabc7719e98428859d324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}