{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "abceb671_07bbca8e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-24T09:11:15Z",
      "side": 1,
      "message": "Is that the motivation of this CL or is there something else? Do we have known performance issues around that lookup?",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 58
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6347b4f3_f5351755",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-02T15:01:07Z",
      "side": 1,
      "message": "The motivation was that I wanted a place to store native pointer of DexCache in the DexCacheData, which seems obvious.\n\nBut the JVMTI makes that tricky as it uses DexCache without registration and thus without DexCacheData.\n\nOn the other hand, this CL caught the issue where JVMTI was registering DexFile twice.\n\nI assume I will still want to get this CL in eventually for the DexCache work.\n\nThe question, should we commit it now or later?",
      "parentUuid": "abceb671_07bbca8e",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 58
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72b4307c_0a388fa4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-03-02T15:06:03Z",
      "side": 1,
      "message": "If it\u0027s a cleanup, then worth having it.",
      "parentUuid": "6347b4f3_f5351755",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 58
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbaba826_170a3b45",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-24T09:11:15Z",
      "side": 1,
      "message": "Can you be more explicit on how the sorting happens?",
      "range": {
        "startLine": 1273,
        "startChar": 0,
        "endLine": 1274,
        "endChar": 78
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0119011c_8394e0bc",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-02T15:01:07Z",
      "side": 1,
      "message": "std::map with string key isn\u0027t self-explanatory? :-)\n\nTwo questions here:\nIs ObjPtr in the map ok?\nThis only ensures deterministic order, as opposed to preserving the registration order.  Is that ok?",
      "parentUuid": "dbaba826_170a3b45",
      "range": {
        "startLine": 1273,
        "startChar": 0,
        "endLine": 1274,
        "endChar": 78
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fce2140_cf4e861f",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-03-02T15:06:03Z",
      "side": 1,
      "message": "\u003e std::map with string key isn\u0027t self-explanatory? :-)\n\nDo you want to say \"Store\" instead of \"Sort\"?\n\n\u003e Is ObjPtr in the map ok?\n\nIt is as long as there\u0027s no GC safepoint during the lifetime of this map.",
      "parentUuid": "0119011c_8394e0bc",
      "range": {
        "startLine": 1273,
        "startChar": 0,
        "endLine": 1274,
        "endChar": 78
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "543ef924_bc93cd5f",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-03-02T15:51:09Z",
      "side": 1,
      "message": "I\u0027m not sure if the location is necessarily unique. The app ClassLoader could have the same dex file referenced by different library class loaders:\n\n  - main app ClassLoader\n    - libA\n      - libshared[1]\n    - libB\n      - libshared[2]\n\nwhere `libshared[.]` are two different library class loaders for the same library (same dex files on disk, different DexFile instances in memory).\n\nFor boot images, I would prefer to order the dex caches based on the order of their dex files in `compiler_options_.GetDexFilesForOatFile()`. For app images, the best ordering would be constructed by traversing the app ClassLoader\u0027s hierarchy.",
      "parentUuid": "0fce2140_cf4e861f",
      "range": {
        "startLine": 1273,
        "startChar": 0,
        "endLine": 1274,
        "endChar": 78
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0eaadd5_7614ddd2",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-02T16:33:49Z",
      "side": 1,
      "message": "Thanks Vladimir.\n\nThis method is used to create the image roots, which are written to disk, so all I want to ensure that output is deterministic.  Although if there are duplicate locations, their order still would not be guaranteed.\n\nDo you know if the order could potentially mater for other reason other then output determinism?",
      "parentUuid": "543ef924_bc93cd5f",
      "range": {
        "startLine": 1273,
        "startChar": 0,
        "endLine": 1274,
        "endChar": 78
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ff012ac_9d47e962",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-09-29T12:23:19Z",
      "side": 1,
      "message": "For now, I have resolved this by just keeping track of the registration order, and sorting using that.\n\nThis means that the images should be bit-for-bit identical as before.",
      "parentUuid": "a0eaadd5_7614ddd2",
      "range": {
        "startLine": 1273,
        "startChar": 0,
        "endLine": 1274,
        "endChar": 78
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6b198a3_22e23d40",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1275,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-03-02T15:51:09Z",
      "side": 1,
      "message": "You\u0027re doing more than this in the loop below, so the comment now essentially applies only to the `CHECK_EQ()` and I would consider it unnecessary.",
      "range": {
        "startLine": 1275,
        "startChar": 4,
        "endLine": 1275,
        "endChar": 47
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b679af1_b9360c87",
        "filename": "dex2oat/linker/image_writer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1275,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-02T16:33:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6b198a3_22e23d40",
      "range": {
        "startLine": 1275,
        "startChar": 4,
        "endLine": 1275,
        "endChar": 47
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a83c0078_6b5d357a",
        "filename": "runtime/class_linker.h",
        "patchSetId": 1
      },
      "lineNbr": 1342,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-03-02T15:51:09Z",
      "side": 1,
      "message": "I\u0027m usually not too fond of the `std::unordered_{map,set}` as you can tell from my CLs that replace them with our `Hash{Map,Set}`. On the other hand, `DexCacheData` looks too heavy for a `HashMap` value (though `std::unique_ptr\u003cDexCacheData\u003e` would be OK), so maybe the `std::unordered_map` is a good choice in this particular case.",
      "range": {
        "startLine": 1342,
        "startChar": 2,
        "endLine": 1342,
        "endChar": 20
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c5d2527_fe09cfa3",
        "filename": "runtime/class_linker.h",
        "patchSetId": 1
      },
      "lineNbr": 1342,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-02T16:33:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a83c0078_6b5d357a",
      "range": {
        "startLine": 1342,
        "startChar": 2,
        "endLine": 1342,
        "endChar": 20
      },
      "revId": "3f56e79a400140661db46357628a31e078081289",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}