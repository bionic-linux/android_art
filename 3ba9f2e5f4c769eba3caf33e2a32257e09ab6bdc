{
  "comments": [
    {
      "key": {
        "uuid": "826a24a3_ec249028",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 476,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-08T23:09:49Z",
      "side": 1,
      "message": "What is this doing?",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ee1ef11_e43b0d6e",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 476,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-11T11:38:35Z",
      "side": 1,
      "message": "Moving to the last byte of the current element before the \"++i\" moves to the first byte of the next element.",
      "parentUuid": "826a24a3_ec249028",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02a8607b_88147b98",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 476,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-11T18:38:12Z",
      "side": 1,
      "message": "Aha, thanks, it makes sense now with the DCHECK_ALIGNED_PARAM and the updated comment.",
      "parentUuid": "0ee1ef11_e43b0d6e",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32782c1a_74beda39",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1212,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-08T23:09:49Z",
      "side": 1,
      "message": "How is it checking if it\u0027s \"really clean\" without doing an mmap of boot.art as the original comment suggested?\n\nDid we add some new invariant that everything in \u0027runtime-\u003eGetHeap()-\u003eGetBootImageSpaces()\u0027 are clean?",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06905b1f_7ff98a2d",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1212,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-11T11:38:35Z",
      "side": 1,
      "message": "Checking for the dirty flag in /proc/kpageflags.\n\nRight after creating the Runtime with a boot image and no relocation (imgdiag is compiler-like), the boot image is clean. Maybe we should call ImageSpace::LoadBootImage() directly without creating the Runtime but that would require additional refactoring to pass explicitly a few more things that ImageSpace currently gets from Runtime::Current().",
      "parentUuid": "32782c1a_74beda39",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba95e2bf_7c1efba9",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1212,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-11T18:38:12Z",
      "side": 1,
      "message": "I guess the logic doesn\u0027t seem too different from before. I was just trying to understand what warranted the change in the comment from \"not truly clean\" to \"is really clean\" ?",
      "parentUuid": "06905b1f_7ff98a2d",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae00e41e_6cfa72af",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1212,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-12T09:42:41Z",
      "side": 1,
      "message": "I don\u0027t know if or when the boot image was somewhat dirty in the past, maybe due to some initialization, but it\u0027s clean now. You wrote the \"Not truly clean\" comment and if you don\u0027t remember why, I don\u0027t think it\u0027s worth our time to investigate.",
      "parentUuid": "ba95e2bf_7c1efba9",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14c9f0d7_228f7c96",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1212,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-12T20:54:00Z",
      "side": 1,
      "message": "This comment came from sehr@ during a refactoring. It might be incorrect.\n\nThe original comment that I made referred to imgdiag doing a memcmp of imgdiag\u0027s boot.art vs the remote target process boot.art\n\nSince we first initialize a Runtime and do some other stuff, it\u0027s possible that the local copy of boot.art would already be non-clean.\n\n---------\n\nI agree the new comment makes more sense than before.",
      "parentUuid": "ae00e41e_6cfa72af",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93b86bdb_465d1c8c",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1212,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-14T17:56:17Z",
      "side": 1,
      "message": "Actually, the boot image is not really clean, every DexCache object has the dex_file_ written. However, pages mmapped from file as MAP_PRIVATE start with flags 0x100000 (NOPAGE) and move to\n\n  - read: 0x40000086c (REFERENCED|UPTODATE|LRU|ACTIVE|MMAP|MAPPEDTODISK)\n  - write: 0x5848 (UPTODATE|ACTIVE|MMAP|ANON|SWAPCACHE), sometimes 0x5868 (|LRU).\n\nStrangely, the DIRTY flag is not set (at least when read from the same process), so this check erroneously passes.\n\nAnyway, I\u0027m soon going to change imgdiag to load the boot image without creating the runtime.",
      "parentUuid": "14c9f0d7_228f7c96",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ef13fbf_cc4e679c",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1216,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-11T18:38:12Z",
      "side": 1,
      "message": "Why does it need to read the ImageSpaces now, but it wasn\u0027t doing it before?",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9952b680_12730879",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1216,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-12T09:42:41Z",
      "side": 1,
      "message": "This is the new check described in the commit message:\n\n  Check that the loaded boot image is really clean.\n\nWe didn\u0027t do that check before.",
      "parentUuid": "6ef13fbf_cc4e679c",
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0879954e_1ff0479e",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1240,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-08T23:09:49Z",
      "side": 1,
      "message": "nit: /*out*/",
      "range": {
        "startLine": 1240,
        "startChar": 42,
        "endLine": 1240,
        "endChar": 59
      },
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63aff77a_a58e770a",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1240,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-11T11:38:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0879954e_1ff0479e",
      "range": {
        "startLine": 1240,
        "startChar": 42,
        "endLine": 1240,
        "endChar": 59
      },
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ab0f369_b96c3807",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1250,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-08T23:09:49Z",
      "side": 1,
      "message": "nit: could use std::optional\u003csize_t\u003e here",
      "range": {
        "startLine": 1250,
        "startChar": 14,
        "endLine": 1250,
        "endChar": 30
      },
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55bc9614_ebb94cbf",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1250,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-11T11:38:35Z",
      "side": 1,
      "message": "Done. Note that std::optional\u003c\u003e::value() is specified to potentially throw and we\u0027re not using exceptions, so I\u0027m going to avoid that and use value_or() instead.",
      "parentUuid": "4ab0f369_b96c3807",
      "range": {
        "startLine": 1250,
        "startChar": 14,
        "endLine": 1250,
        "endChar": 30
      },
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24962214_3eaf59ac",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1446,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-03-08T23:09:49Z",
      "side": 1,
      "message": "nit: return std::optional\u003cbacktrace_map_t\u003e ?",
      "range": {
        "startLine": 1446,
        "startChar": 58,
        "endLine": 1446,
        "endChar": 91
      },
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e37a210_1043cc16",
        "filename": "imgdiag/imgdiag.cc",
        "patchSetId": 2
      },
      "lineNbr": 1446,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-03-11T11:38:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24962214_3eaf59ac",
      "range": {
        "startLine": 1446,
        "startChar": 58,
        "endLine": 1446,
        "endChar": 91
      },
      "revId": "3ba9f2e5f4c769eba3caf33e2a32257e09ab6bdc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}