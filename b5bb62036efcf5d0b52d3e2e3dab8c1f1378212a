{
  "comments": [
    {
      "key": {
        "uuid": "014fc757_43065feb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-07-30T16:35:02Z",
      "side": 1,
      "message": "All ART development is done on the \u0027master\u0027 branch. This should be rebased and tested there. Other branches, such as android10-dev are mostly for preserving the state as of a particular release (at least in ART).",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "165ef080_fab76385",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-07-31T18:02:53Z",
      "side": 1,
      "message": "It seems to me that, details temporarily aside, the main concern here is with adding changes that are currently ignored by upstream kernels, but have the potential to conflict with future extensions there. https://man7.org/linux/man-pages/man2/futex.2.html does promise that the other arguments are ignored. But I\u0027m not a kernel developer and don\u0027t know to what extent that\u0027s viewed as a future commitment. I also worry about others making conflicting choices about the interpretation of those arguments.\n\nWill - could you comment or add a reviewer who can comment on the kernel side of this?\n\nGetting back to details, some of this code changed appreciably since Q. This is unlikely to merge cleanly, and won\u0027t behave entirely the same. We now try to spin first before resorting to futexes. I would also expect this to be fairly ineffective in Q. In Q, Java monitors only hold mutexes briefly during entry and exit; they mostly wait on a condition variable. In R, this might be more effective.",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ac9673_77ba3ea1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1220972
      },
      "writtenOn": "2020-08-04T01:14:24Z",
      "side": 1,
      "message": "Is it possible to provide a serial of hooks(like what \u0027-Xplugin\u0027 do), then we can\nextend the art in the plugin library without change the art library.\n\nAnd for the priority inversion problem of user-space lock(Java Monitors), any plans to use PI futex operations (FUTEX_LOCK_PI/FUTEX_UNLOCK_PI/...) to fix the issue?",
      "parentUuid": "165ef080_fab76385",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a7fab93_03933c76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-08-04T02:32:58Z",
      "side": 1,
      "message": "It looks like I asked Will a question in the last comment, but forgot to add him. Sorry about that.\n\nI am not aware of plans to use PI futexes here. I don\u0027t have a good feeling for how much difference it would make. Yabin supported them at the pthreads level, and may have some observations.\n\nThis fundamentally still has the problem, even in R, that it only works for bottom level locks, i.e. direct mutex users or Java monitors, and not for higher-level synchronization implemented by the user, which is going to look like either Object.wait() or park() at the system level. And it\u0027s clearly a nontrivial change, since the data structure has to change to match the kernel. But it may still be worthwhile.",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5802d211_591ca444",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1220972
      },
      "writtenOn": "2020-08-04T07:00:22Z",
      "side": 1,
      "message": "Could you add Will for comment?\nBTW, Is it possible for us extending the art plugin like \"-xPlugin xx.so\"?",
      "parentUuid": "5a7fab93_03933c76",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d45e68f_f5fc50f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-04T13:23:21Z",
      "side": 1,
      "message": "That would make the futex call slower as directing to a plugin right? Any concern with that?",
      "parentUuid": "5802d211_591ca444",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9241a7d0_5894fb87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-08-04T18:35:16Z",
      "side": 1,
      "message": "That\u0027s weird. I distinctly remembered adding Will the last time. Tried again.",
      "parentUuid": "5d45e68f_f5fc50f0",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}