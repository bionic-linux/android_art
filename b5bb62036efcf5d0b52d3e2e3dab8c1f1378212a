{
  "comments": [
    {
      "key": {
        "uuid": "014fc757_43065feb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-07-30T16:35:02Z",
      "side": 1,
      "message": "All ART development is done on the \u0027master\u0027 branch. This should be rebased and tested there. Other branches, such as android10-dev are mostly for preserving the state as of a particular release (at least in ART).",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "165ef080_fab76385",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-07-31T18:02:53Z",
      "side": 1,
      "message": "It seems to me that, details temporarily aside, the main concern here is with adding changes that are currently ignored by upstream kernels, but have the potential to conflict with future extensions there. https://man7.org/linux/man-pages/man2/futex.2.html does promise that the other arguments are ignored. But I\u0027m not a kernel developer and don\u0027t know to what extent that\u0027s viewed as a future commitment. I also worry about others making conflicting choices about the interpretation of those arguments.\n\nWill - could you comment or add a reviewer who can comment on the kernel side of this?\n\nGetting back to details, some of this code changed appreciably since Q. This is unlikely to merge cleanly, and won\u0027t behave entirely the same. We now try to spin first before resorting to futexes. I would also expect this to be fairly ineffective in Q. In Q, Java monitors only hold mutexes briefly during entry and exit; they mostly wait on a condition variable. In R, this might be more effective.",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ac9673_77ba3ea1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1220972
      },
      "writtenOn": "2020-08-04T01:14:24Z",
      "side": 1,
      "message": "Is it possible to provide a serial of hooks(like what \u0027-Xplugin\u0027 do), then we can\nextend the art in the plugin library without change the art library.\n\nAnd for the priority inversion problem of user-space lock(Java Monitors), any plans to use PI futex operations (FUTEX_LOCK_PI/FUTEX_UNLOCK_PI/...) to fix the issue?",
      "parentUuid": "165ef080_fab76385",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a7fab93_03933c76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-08-04T02:32:58Z",
      "side": 1,
      "message": "It looks like I asked Will a question in the last comment, but forgot to add him. Sorry about that.\n\nI am not aware of plans to use PI futexes here. I don\u0027t have a good feeling for how much difference it would make. Yabin supported them at the pthreads level, and may have some observations.\n\nThis fundamentally still has the problem, even in R, that it only works for bottom level locks, i.e. direct mutex users or Java monitors, and not for higher-level synchronization implemented by the user, which is going to look like either Object.wait() or park() at the system level. And it\u0027s clearly a nontrivial change, since the data structure has to change to match the kernel. But it may still be worthwhile.",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5802d211_591ca444",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1220972
      },
      "writtenOn": "2020-08-04T07:00:22Z",
      "side": 1,
      "message": "Could you add Will for comment?\nBTW, Is it possible for us extending the art plugin like \"-xPlugin xx.so\"?",
      "parentUuid": "5a7fab93_03933c76",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d45e68f_f5fc50f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-04T13:23:21Z",
      "side": 1,
      "message": "That would make the futex call slower as directing to a plugin right? Any concern with that?",
      "parentUuid": "5802d211_591ca444",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9241a7d0_5894fb87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-08-04T18:35:16Z",
      "side": 1,
      "message": "That\u0027s weird. I distinctly remembered adding Will the last time. Tried again.",
      "parentUuid": "5d45e68f_f5fc50f0",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff64d1e6_ce25d222",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1572468
      },
      "writtenOn": "2020-08-05T08:59:51Z",
      "side": 1,
      "message": "It sounds like there are kernel changes planned to support this, but I don\u0027t see them here. Please could you point me to those?\n\nThe main worry I have is that \"ignored\" means that people could be passing any old junk in there at the moment, and so re-purposing the uaddr2 parameter would require an explicit opt-in from the task.",
      "parentUuid": "9241a7d0_5894fb87",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01381deb_c39b6e1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1220972
      },
      "writtenOn": "2020-08-10T06:27:40Z",
      "side": 1,
      "message": "Will, the change in the kernel part is as follows\n1. read the pid (futex owner) from the uaddr2 using get_futex_value_locked\n2. boost the futex owner if needed (eg, UI thread waiting on the futex)\n3. deboost when the owner release the futex or timeout occur\n\nYou worry that \"people could be passing any old junk in there at the moment\", but\nin bionic and art, this parameter is set to nullptr explicitly. And even an junk value is passed, then EFAULT or a invalid pid will read from uaddr2, both will not\ncause fatal error.",
      "parentUuid": "ff64d1e6_ce25d222",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e775218a_6db6fa28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1572468
      },
      "writtenOn": "2020-08-10T08:43:43Z",
      "side": 1,
      "message": "Is there a kernel patch with those changes available somewhere?\n\nAlthough bionic and art may well pass nullptr, the kernel can\u0027t assume that is the case for all callers, so I don\u0027t think this sort of change would be acceptable in android-mainline. Returning -EFAULT when we didn\u0027t before could certainly break some applications (this is why ignored parameters are generally useless -- it\u0027s much better to require them to be zero so that they can be extended later on).\n\nI think you\u0027d be better off proposing a new futex operation upstream, backed up with data to show that it is a worthwhile change (this is crucial, because upstream is reasonably hesitant about modifying futex()).",
      "parentUuid": "01381deb_c39b6e1d",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "886990e6_8011a96e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1220972
      },
      "writtenOn": "2020-08-10T11:41:57Z",
      "side": 1,
      "message": "Actually the PI futex has already implement the Priority Inheritance semantics, and the lock owner if known to kernel side when lock contention occur. So if the\nart switch to use PI futex, then it will compact with upstream futex code. And no need to add customized futex operation",
      "parentUuid": "e775218a_6db6fa28",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a988ac_6aa12584",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1572468
      },
      "writtenOn": "2020-08-10T12:03:00Z",
      "side": 1,
      "message": "Yes, if you can use PI futexes instead then that would be much better!",
      "parentUuid": "886990e6_8011a96e",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f67718a_78435b0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-08-10T20:52:24Z",
      "side": 1,
      "message": "Adding Yabin in case he better understands any performance trade-offs for PI futexes. I haven\u0027t yet investigated how feasible this is for the ART mutex code. I expect it\u0027s possible, but there might be some performance loss at user level in changing mutex representations. Or not.",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79e0e1e5_9b675efc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-08-10T22:23:58Z",
      "side": 1,
      "message": "The context of using PI futex in bionic is in http://b/29177606. I haven\u0027t touched the code since then.",
      "parentUuid": "5f67718a_78435b0d",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1922e4e6_d806db8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-08-11T00:03:50Z",
      "side": 1,
      "message": "Thanks! The discussion in b/29177606 suggests that PI futexes only work for real-time threads. Is that still true? To what extent does that defeat the purpose here?",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fb20c84_8186fa0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-08-11T20:13:45Z",
      "side": 1,
      "message": "The pthread_test shows PI futex can affect the priority of non-realtime threads (https://android.googlesource.com/platform/bionic/+/master/tests/pthread_test.cpp#2278). So I think it also works for non-realtime threads. But joelaf@ may have a different opinion.",
      "parentUuid": "1922e4e6_d806db8d",
      "revId": "b5bb62036efcf5d0b52d3e2e3dab8c1f1378212a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}