{
  "comments": [
    {
      "key": {
        "uuid": "9f448158_7841d5d7",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "I don\u0027t think you need the const here.",
      "range": {
        "startLine": 253,
        "startChar": 2,
        "endLine": 253,
        "endChar": 7
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f971556_923afce8",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "The super\u0027s AsMonotonicValueRange has a const so it\u0027s needed here. I mimic this signature to HInstruction\u0027s AsXXX().",
      "parentUuid": "9f448158_7841d5d7",
      "range": {
        "startLine": 253,
        "startChar": 2,
        "endLine": 253,
        "endChar": 7
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3a79c4_c51b3a8f",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 314,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "If you need these casts, why not making everything int64_t instead of int, then?",
      "range": {
        "startLine": 314,
        "startChar": 16,
        "endLine": 314,
        "endChar": 23
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa641d2_423b34bd",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 314,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "I thought about using int64_t as the constant part of a ValueBound (is that what you mean here?). It\u0027s more accurate to use an int since we need to do overflow/underflow checks anyway and using an int mirrors what\u0027s happening in java more closely. Plus right now ValueBound is passed by value so using an int saves a little space.\nWe need the cast here to avoid the overflow for this computation. Maybe it\u0027s not even needed (overflow would still give the same result as with casting) but I just to buy some peace of mind here.",
      "parentUuid": "df3a79c4_c51b3a8f",
      "range": {
        "startLine": 314,
        "startChar": 16,
        "endLine": 314,
        "endChar": 23
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8a0930_96967252",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 314,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-03T09:52:02Z",
      "side": 1,
      "message": "Please add this as a comment in the code, to explain the int64_t casts.",
      "parentUuid": "9fa641d2_423b34bd",
      "range": {
        "startLine": 314,
        "startChar": 16,
        "endLine": 314,
        "endChar": 23
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0865ac_513e66ae",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 314,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T22:55:32Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "5f8a0930_96967252",
      "range": {
        "startLine": 314,
        "startChar": 16,
        "endLine": 314,
        "endChar": 23
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_ba02992d",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 372,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "Please avoid too many stl magic. Can\u0027t you allocate the arena with the allocator and then put it in maps_?",
      "range": {
        "startLine": 372,
        "startChar": 32,
        "endLine": 372,
        "endChar": 36
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f971556_72c91084",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 372,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "As discussed in email with Vladimir, I couldn\u0027t get around some debug assertions due to destructors not called on ArenaSafeMap. So right now it seems to be the best I can do. Maybe we can enhance it later (with Vladimir\u0027s help)?",
      "parentUuid": "7f526d24_ba02992d",
      "range": {
        "startLine": 372,
        "startChar": 32,
        "endLine": 372,
        "endChar": 36
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff82dd17_33a5da98",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 372,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-03T09:52:02Z",
      "side": 1,
      "message": "At this point, I\u0027d rather either use the current ValueSet in gvn.h or build our own. If STL starts being in the way, let\u0027s not force us to use it.\n\nSo I\u0027d really appreciate a follow-up cleanup CL that removes this :-)",
      "parentUuid": "3f971556_72c91084",
      "range": {
        "startLine": 372,
        "startChar": 32,
        "endLine": 372,
        "endChar": 36
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fd68940_36819e8b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 372,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T22:55:32Z",
      "side": 1,
      "message": "I\u0027ll follow up on it with Vladimir.",
      "parentUuid": "ff82dd17_33a5da98",
      "range": {
        "startLine": 372,
        "startChar": 32,
        "endLine": 372,
        "endChar": 36
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_7a1e6188",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 454,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "Why don\u0027t you get the range of right instead?",
      "range": {
        "startLine": 454,
        "startChar": 23,
        "endLine": 454,
        "endChar": 45
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87d927_8f2ad91a",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 454,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "We first try to detect array_length_c format, or a constant. If not, we try to use the range of right, down at line 461 below.\nI\u0027ll rename it to DetectValueBoundFromValue. Maybe it makes it more clear.",
      "parentUuid": "7f526d24_7a1e6188",
      "range": {
        "startLine": 454,
        "startChar": 23,
        "endLine": 454,
        "endChar": 45
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f70f517_6daf6d76",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 454,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-12-03T09:52:02Z",
      "side": 1,
      "message": "But isn\u0027t the map already containing the bound? The input has already been visited, so it should be there, right?",
      "parentUuid": "df87d927_8f2ad91a",
      "range": {
        "startLine": 454,
        "startChar": 23,
        "endLine": 454,
        "endChar": 45
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fd68940_81ca4a57",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 454,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T22:55:32Z",
      "side": 1,
      "message": "The approach I used don\u0027t keep value range for all values. So those pure computations/comparisons not related to array indexing won\u0027t carry the (memory) overhead of calculating ranges.\n\nI added this comment to class ValueRange.\n * Currently a ValueRange may be generated as a result of the following:\n * comparisons related to array bounds, array bounds check, add/sub on top\n * of an existing value range, or a loop phi corresponding to an\n * incrementing/decrementing array index (MonotonicValueRange).",
      "parentUuid": "3f70f517_6daf6d76",
      "range": {
        "startLine": 454,
        "startChar": 23,
        "endLine": 454,
        "endChar": 45
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3a79c4_8551b228",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 549,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "Can\u0027t you just replace this with phi-\u003eIsLoopHeaderPhi? And then add a DCHECK that it has exactly two inputs?",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 49
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa641d2_42be94a5",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 549,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "df3a79c4_8551b228",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 49
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_d851e1a2",
        "filename": "compiler/optimizing/bounds_check_elimination.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "One line?",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 21
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa641d2_22bb90b5",
        "filename": "compiler/optimizing/bounds_check_elimination.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "9f448158_d851e1a2",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 21
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f526d24_fa113173",
        "filename": "compiler/optimizing/bounds_check_elimination.h",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "private DISALLOW...",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 2
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87d927_2f5d6dc1",
        "filename": "compiler/optimizing/bounds_check_elimination.h",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "7f526d24_fa113173",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 2
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3a79c4_2550c61e",
        "filename": "compiler/optimizing/bounds_check_elimination_test.cc",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "You could move this to optimizing_unit_test.h",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 21
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fa849a2_63a19607",
        "filename": "compiler/optimizing/bounds_check_elimination_test.cc",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "df3a79c4_2550c61e",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 21
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f448158_d89a01fd",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-24T16:59:04Z",
      "side": 1,
      "message": "You can call it bce :-)",
      "range": {
        "startLine": 201,
        "startChar": 25,
        "endLine": 201,
        "endChar": 29
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fb555f8_bf99f3dd",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2014-12-03T00:50:47Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "9f448158_d89a01fd",
      "range": {
        "startLine": 201,
        "startChar": 25,
        "endLine": 201,
        "endChar": 29
      },
      "revId": "7bf59395da97236ef92b2d0327a84ee86807c642",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}