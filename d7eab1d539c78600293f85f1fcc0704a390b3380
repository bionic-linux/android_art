{
  "comments": [
    {
      "key": {
        "uuid": "d91ff043_99e8e7cc",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 836,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "Any particular reason for moving this onto the heap?",
      "range": {
        "startLine": 834,
        "startChar": 2,
        "endLine": 836,
        "endChar": 87
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7937e4c3_526aca26",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 836,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-07-28T07:07:53Z",
      "side": 1,
      "message": "The reason is the local frame limitation in the art/build/Android.common_build.mk: -Wframe-larger-than\u003d1728",
      "parentUuid": "d91ff043_99e8e7cc",
      "range": {
        "startLine": 834,
        "startChar": 2,
        "endLine": 836,
        "endChar": 87
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91cfc52_32d1ce8f",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "Why the fore loop. Is only some of the dbg_info\u0027s having line information possible/meaningful?",
      "range": {
        "startLine": 849,
        "startChar": 0,
        "endLine": 854,
        "endChar": 3
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9431c33_d41152eb",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-07-28T07:07:53Z",
      "side": 1,
      "message": "this loop is check if there is any line info",
      "parentUuid": "b91cfc52_32d1ce8f",
      "range": {
        "startLine": 849,
        "startChar": 0,
        "endLine": 854,
        "endChar": 3
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d91ff043_79e40bef",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 856,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "This seems like it could be wrong.\n\nCan we have one without the other?\n\nDo we actually handle having only one intelligently?",
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9932d8d1_7e36b9d2",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 856,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-07-28T07:07:53Z",
      "side": 1,
      "message": "We generate .debug_abbrev, .debug_info and .debug_str if we got lineInfo or CFI.\nWe generate .debug_frame only if we got CFI.\nWe generate .debug_line only if we got lineInfo.",
      "parentUuid": "d91ff043_79e40bef",
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96e70794_b103ea9b",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1050,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "strcmp already does this IIRC.",
      "range": {
        "startLine": 1048,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 1
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9932d8d1_9e41ad24",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1050,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-07-28T07:07:53Z",
      "side": 1,
      "message": "which strcmp do you mean?\nI have just verified the standard strcmp from libc. It crashes with NULLs.",
      "parentUuid": "96e70794_b103ea9b",
      "range": {
        "startLine": 1048,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 1
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d91ff043_b9067981",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1050,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-28T16:16:57Z",
      "side": 1,
      "message": "NVM you\u0027re right. Still is null being passed in here an acceptable input?\n\nThis is just a nit-pick though. Feel free to disregard it.",
      "parentUuid": "9932d8d1_9e41ad24",
      "range": {
        "startLine": 1048,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 1
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96e70794_b1608a5c",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1102,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "A lambda or static function would probably be nicer.",
      "range": {
        "startLine": 1090,
        "startChar": 2,
        "endLine": 1102,
        "endChar": 4
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9431c33_f4164ee0",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1102,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-07-28T07:07:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96e70794_b1608a5c",
      "range": {
        "startLine": 1090,
        "startChar": 2,
        "endLine": 1102,
        "endChar": 4
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91cfc52_1d15c35b",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1231,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "I am fairly certain this is wrong, see below.",
      "range": {
        "startLine": 1230,
        "startChar": 0,
        "endLine": 1231,
        "endChar": 61
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91cfc52_f242d672",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1282,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "I am fairly certain this is wrong. See below.",
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96e70794_b181aa75",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1295,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "I am fairly certain this is wrong, see below.",
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91cfc52_f26bb6f2",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1313,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-25T16:44:23Z",
      "side": 1,
      "message": "I think this will break current gdb behavior since IIRC the low_pc_/high_pc_ are offsets from the start of the text section already. We save them as that since we don\u0027t know what the actual addresses of these things will be until later when we have already loaded the oat file.\n\nSee ElfFile::GdbJITSupport",
      "range": {
        "startLine": 1312,
        "startChar": 0,
        "endLine": 1313,
        "endChar": 63
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7937e4c3_12a3f223",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1313,
      "author": {
        "id": 1037563
      },
      "writtenOn": "2014-07-28T09:36:36Z",
      "side": 1,
      "message": "I used \u0027dwarfdump -ka\u0027 to check the generated OAT file and found it needs VMA address (i.e. base + offset) in the .debug_line at least. That is why, to get the base address for .debug_* generation I had to split ElfBuilder::Write into ElfBuilder::Init and ElfBuilder::Write. Could you please describe the patching workflow and why/when it is needed? Why can not we use the standard Elf relocation? Why we have to patch boot.oat once it is generated?\nI believe that in GdbJITSupport we have to *offset* the debugging info rather than *set* a new .text address.",
      "parentUuid": "b91cfc52_f26bb6f2",
      "range": {
        "startLine": 1312,
        "startChar": 0,
        "endLine": 1313,
        "endChar": 63
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36f65b4a_28576ae7",
        "filename": "compiler/elf_writer_quick.cc",
        "patchSetId": 2
      },
      "lineNbr": 1313,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2014-07-28T16:16:57Z",
      "side": 1,
      "message": "No the problem isn\u0027t that it\u0027s that at this point we still do not have any idea the actual address this code will be loaded at. If we are compiling boot.oat we need to first figure out the size of the image (which happens next) and if we are compiling an application we need to wait until runtime.\n\nTherefore we just keep the PC as relative to the start of the .text section and then when loading the oat file fix up these by adding the actual text section address to them. The code for this is in runtime/elf_file.cc:1285 (FixupDebugInfo). If you really want the final word though I\u0027d suggest you ask your colleague Mark Mendel (mark.p.mendell@intel.com) since he was the one who initially wrote in this gdb support.",
      "parentUuid": "7937e4c3_12a3f223",
      "range": {
        "startLine": 1312,
        "startChar": 0,
        "endLine": 1313,
        "endChar": 63
      },
      "revId": "d7eab1d539c78600293f85f1fcc0704a390b3380",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}