{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d233320_c42f7742",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "Not quite done, but getting there. Nothing major, so far.",
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a05ea48_4b45f83d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "Finished a pass. There were a couple of places I didn\u0027t understand the correctness argument, and a few more minor suggestions. Otherwise it looks fine to me.\n\nI guess we decided to postpone indirect reference tables, possibly indefinitely, since they\u0027re typically relatively small.",
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d69f15c_60753852",
        "filename": "runtime/art_field-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 83,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "This seems quite confusing to me, particularly calling a member function on an object you can\u0027t really access. But I think it is inherently messy. I might have added a static member function return the declaring class offset, defined in terms of offsetof() instead of using GetDeclaringClassAddressWithoutBarrier. But I\u0027m OK with either option.",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 83,
        "endChar": 3
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6800d2b6_d2bac550",
        "filename": "runtime/art_field.h",
        "patchSetId": 24
      },
      "lineNbr": 43,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "It seems to me it would be clearer if you deleted this, or replaced it with \"that reside\". As it stands, it could be read as \"Check if they\u0027re all in this range; if so, visit them\". Same for methods.",
      "range": {
        "startLine": 43,
        "startChar": 61,
        "endLine": 43,
        "endChar": 74
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f0b112a_2afaca6a",
        "filename": "runtime/art_method-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 441,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "Is there a reason this has to look different from the field case?",
      "range": {
        "startLine": 436,
        "startChar": 2,
        "endLine": 441,
        "endChar": 5
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b19c232_a6673101",
        "filename": "runtime/base/gc_visited_arena_pool.cc",
        "patchSetId": 24
      },
      "lineNbr": 184,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "Since this describes the condition in the next if, I would phrase it as a question. Otherwise I tend to read such statements as assertions that hold at that hold at that point in the code.\n\nAlso applies to the next comment, and possibly others.",
      "range": {
        "startLine": 184,
        "startChar": 7,
        "endLine": 184,
        "endChar": 47
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddefd4bb_8aaf5e59",
        "filename": "runtime/base/gc_visited_arena_pool.cc",
        "patchSetId": 24
      },
      "lineNbr": 189,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "I think this would be a bit clearer (and slightly cheaper), if we just kept a local \"already added to freelist\" flag.\n\nAlternatively, I suspect this code could be much simpler, though perhaps slightly slower, if we merged by unconditionally removing the mergeable blocks, while adjusting range_begin and range_end, and then unconditionally inserted at the end. Is this performance-critical enough to not just do that?",
      "range": {
        "startLine": 189,
        "startChar": 10,
        "endLine": 189,
        "endChar": 93
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e90c33ab_03341a08",
        "filename": "runtime/base/gc_visited_arena_pool.cc",
        "patchSetId": 24
      },
      "lineNbr": 241,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "Can you explain?",
      "range": {
        "startLine": 241,
        "startChar": 4,
        "endLine": 241,
        "endChar": 24
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b21f61fe_50001b24",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 24
      },
      "lineNbr": 48,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "Could use a summary comment that defines what addr and end are. Does it make sense to pass in more meaningful pointer types here and cast them later?",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 51
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db39e58a_5e694d5f",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 24
      },
      "lineNbr": 61,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "Is there a reason this \"GCVisited\", while the above is \"Tracked\"?",
      "range": {
        "startLine": 61,
        "startChar": 6,
        "endLine": 61,
        "endChar": 16
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c1d6934_92306ad6",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 24
      },
      "lineNbr": 90,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "I would have called this something like LessByChunkAddr, etc., making it more consistent with std::less vs std::sort.",
      "range": {
        "startLine": 90,
        "startChar": 8,
        "endLine": 90,
        "endChar": 12
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9450c56b_34b3c540",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 24
      },
      "lineNbr": 93,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "std::less seems more correct here. I don\u0027t think these are always addresses in the same array, which is required for pointer \u003c .",
      "range": {
        "startLine": 93,
        "startChar": 22,
        "endLine": 93,
        "endChar": 23
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85f37d49_baa9ac08",
        "filename": "runtime/base/gc_visited_arena_pool.h",
        "patchSetId": 24
      },
      "lineNbr": 108,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T02:41:30Z",
      "side": 1,
      "message": "Same here and for the address comparison above.",
      "range": {
        "startLine": 108,
        "startChar": 23,
        "endLine": 108,
        "endChar": 24
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32224c29_aca8d562",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 24
      },
      "lineNbr": 1562,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "std::max?",
      "range": {
        "startLine": 1562,
        "startChar": 29,
        "endLine": 1562,
        "endChar": 64
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a78da8c_b9ddf03a",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 24
      },
      "lineNbr": 1567,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "Please merge the 2 lines, since obj_size is dead.",
      "range": {
        "startLine": 1566,
        "startChar": 6,
        "endLine": 1567,
        "endChar": 23
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de08667d_9650449b",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 24
      },
      "lineNbr": 1613,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "So how do we do that here?",
      "range": {
        "startLine": 1613,
        "startChar": 55,
        "endLine": 1613,
        "endChar": 87
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98776cb4_a4561b98",
        "filename": "runtime/gc/collector/mark_compact.cc",
        "patchSetId": 24
      },
      "lineNbr": 1614,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "...Helper::Clobber...",
      "range": {
        "startLine": 1614,
        "startChar": 68,
        "endLine": 1614,
        "endChar": 81
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab0c1912_dcb4f608",
        "filename": "runtime/linear_alloc-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 99,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "Why not AllocAlign16?",
      "range": {
        "startLine": 99,
        "startChar": 43,
        "endLine": 99,
        "endChar": 48
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c8ac1fd_6ee66bfe",
        "filename": "runtime/linear_alloc.h",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-09-28T22:02:30Z",
      "side": 1,
      "message": "You might consider making this and the GetSize result a size_t, which seems more expected, and then doing an explicit overflow check in the constructor. I don\u0027t have a strong opinion about this.",
      "range": {
        "startLine": 41,
        "startChar": 17,
        "endLine": 41,
        "endChar": 25
      },
      "revId": "55b0238ae7905e87471e54152fa95fc594a01463",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}