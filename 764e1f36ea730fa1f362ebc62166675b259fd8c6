{
  "comments": [
    {
      "key": {
        "uuid": "ee1b4859_63470249",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 687,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-04-11T12:45:27Z",
      "side": 1,
      "message": "This fixes MergeTypes, but maybe we have other places where we check assignability. Could we instead prevent a ReferenceTypeInfo to get an erroneous class? If we try to create one, it will automatically use Object instead?",
      "range": {
        "startLine": 685,
        "startChar": 0,
        "endLine": 687,
        "endChar": 21
      },
      "revId": "764e1f36ea730fa1f362ebc62166675b259fd8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee1b4859_03f64e3d",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 687,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-04-11T13:12:18Z",
      "side": 1,
      "message": "We should be able to track that by looking at IsObjectClass(). I suggested that we should check that the class is not erronous as part of IsObjectClass().\n\nThat should protect us against the any mis-uses (and probably expose a few other places where we\u0027d crash)",
      "parentUuid": "ee1b4859_63470249",
      "range": {
        "startLine": 685,
        "startChar": 0,
        "endLine": 687,
        "endChar": 21
      },
      "revId": "764e1f36ea730fa1f362ebc62166675b259fd8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e22c08a_3d835a81",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 687,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-04-11T17:05:09Z",
      "side": 1,
      "message": "I have not found an easy way to get a checker test for this, so I constructed a unit test for this method (seems complex enough that such a test is useful anyways).\n\nThis also brought up some questions, since some of the test cases that I came up with fail (merging imprecise types), which may be a bug, or at the very least an implied feature of clients of this method (always dangerous).\n\nPlease have a look at next CL.\n\nAnd yes, I plan to do Calin\u0027s idea on putting more checks in place, but like to do that separate from this fix.",
      "parentUuid": "ee1b4859_03f64e3d",
      "range": {
        "startLine": 685,
        "startChar": 0,
        "endLine": 687,
        "endChar": 21
      },
      "revId": "764e1f36ea730fa1f362ebc62166675b259fd8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee1b4859_83cddeaf",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 687,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-04-11T17:07:55Z",
      "side": 1,
      "message": "It\u0027s not more checks, it\u0027s just a way to avoid seeing Erroneous classes in ReferenceTypeInfo completely. I\u0027d prefer avoid adding the IsErroenous helper in ReferenceTypeInfo.",
      "parentUuid": "2e22c08a_3d835a81",
      "range": {
        "startLine": 685,
        "startChar": 0,
        "endLine": 687,
        "endChar": 21
      },
      "revId": "764e1f36ea730fa1f362ebc62166675b259fd8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e22c08a_7d615278",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 1
      },
      "lineNbr": 687,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-04-11T17:18:22Z",
      "side": 1,
      "message": "So you want some logic in ReferenceTypeInfo::Create() ?\nOr somewhere else? \n\nYou need to be more specific, as I have become very familiar with this particular problem, but not so much with the full phase as of yet?\n\nIn any case, I will still send out my unit test, as it also exposes some issues",
      "parentUuid": "ee1b4859_83cddeaf",
      "range": {
        "startLine": 685,
        "startChar": 0,
        "endLine": 687,
        "endChar": 21
      },
      "revId": "764e1f36ea730fa1f362ebc62166675b259fd8c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}