{
  "comments": [
    {
      "key": {
        "uuid": "237f124e_0a739f97",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2015-04-08T21:13:31Z",
      "side": 1,
      "message": "Won\u0027t recomputing the PC be a performance regression if you have say a loop using a floating point literal? The literals being PC relative.",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 50
      },
      "revId": "5bfa2b8bd5819faf8537376f3d16be6fdd7fe9c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3c5c2ce_a530fe1d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-04-08T21:18:11Z",
      "side": 1,
      "message": "We have register promotion which takes loop depth into account and in X86Mir2Lir::CountRefs() we even double the weight of the anchor uses. I think we should be fine.",
      "parentUuid": "237f124e_0a739f97",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 50
      },
      "revId": "5bfa2b8bd5819faf8537376f3d16be6fdd7fe9c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3c5c2ce_8535020e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-04-08T21:21:33Z",
      "side": 1,
      "message": "And the whole sentence actually refers to the fact that previously the sequence was \"call +0; pop \u003creg\u003e; sub \u003creg\u003e, \u003coffset-of-pop\u003e\" and we completely avoid the \"sub\". Instead, we take the anchor offset into account when generating PC-relative offsets or the large switch table.",
      "parentUuid": "a3c5c2ce_a530fe1d",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 50
      },
      "revId": "5bfa2b8bd5819faf8537376f3d16be6fdd7fe9c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83c43ed3_8afd0fed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2015-04-08T21:37:13Z",
      "side": 1,
      "message": "SGTM. I think your statement of \"rewrite all PC-relative addressing on x86\" is some what over the top. You\u0027ve inlined the macro to compute the beginning of the method and removed the subtract, adjusting the instructions that use the beginning of the method to incorporate the offset. Its more of a tinker than a rewrite ;-)",
      "parentUuid": "a3c5c2ce_8535020e",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 50
      },
      "revId": "5bfa2b8bd5819faf8537376f3d16be6fdd7fe9c3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}