{
  "comments": [
    {
      "key": {
        "uuid": "b935d7d3_7910b81d",
        "filename": "compiler/jni/quick/calling_convention.h",
        "patchSetId": 3
      },
      "lineNbr": 303,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-28T17:44:46Z",
      "side": 1,
      "message": "I\u0027ll accept for now. But please change StackIndirectReferenceTable to have an Offset method similar to the ones before. If we change the layout of the SIRT class once again, this code will break and people won\u0027t notice immediately.",
      "range": {
        "startLine": 302,
        "startChar": 23,
        "endLine": 303,
        "endChar": 39
      },
      "revId": "fca82208f7128fcda09b6a4743199308332558a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99ec937b_b5f2b80a",
        "filename": "compiler/jni/quick/calling_convention.h",
        "patchSetId": 3
      },
      "lineNbr": 303,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-03-31T02:42:53Z",
      "side": 1,
      "message": "I\u0027ll upload this enhancement as a separate patch set this week.",
      "parentUuid": "b935d7d3_7910b81d",
      "revId": "fca82208f7128fcda09b6a4743199308332558a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99bf338c_e91ab580",
        "filename": "compiler/jni/quick/calling_convention.h",
        "patchSetId": 3
      },
      "lineNbr": 303,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-04-03T07:41:24Z",
      "side": 1,
      "message": "Done (https://android-review.googlesource.com/#/c/89550/) Already merged.",
      "parentUuid": "99ec937b_b5f2b80a",
      "revId": "fca82208f7128fcda09b6a4743199308332558a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7958bf41_ab27f5c6",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-28T17:44:46Z",
      "side": 1,
      "message": "I\u0027ll accept for now, but you should investigate: There is actually SizeOf in the SIRT class. But there are issues when cross-compiling (though those issues also exist for this code).",
      "range": {
        "startLine": 143,
        "startChar": 21,
        "endLine": 143,
        "endChar": 88
      },
      "revId": "fca82208f7128fcda09b6a4743199308332558a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19f8a337_b196487b",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-03-31T02:42:53Z",
      "side": 1,
      "message": "Do you think the following expression acceptable?\n\nsize_t sirt_size \u003d sizeof(StackIndirectReferenceTable) + (ReferenceCount() - 1) * kSirtPointerSize;",
      "parentUuid": "7958bf41_ab27f5c6",
      "revId": "fca82208f7128fcda09b6a4743199308332558a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f94bcf71_4e4d248d",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-31T15:08:55Z",
      "side": 1,
      "message": "That does not improve the current expression.\n\nThe issue is with cross-compiling, that is, compiling for 64b on 32b or the reverse. Then sizeof and OFFSETOF_MEMBER compute offsets for the \"host\" layout, while they should compute for the target.\n\nWe do not have a good story yet on how to solve this issue without too much code duplication or flags. Ideas are welcome.\n\nWhat I meant with the comment: Sirt::SizeOf(num_entries) is supposed to compute the Sirt size for the given number of entries, so you don\u0027t need this compound expression at all. However, that function has the same limitation as outlined above.",
      "parentUuid": "19f8a337_b196487b",
      "revId": "fca82208f7128fcda09b6a4743199308332558a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9628b23_53e7c452",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-04-03T07:41:24Z",
      "side": 1,
      "message": "Done (https://android-review.googlesource.com/#/c/89860/)",
      "parentUuid": "f94bcf71_4e4d248d",
      "revId": "fca82208f7128fcda09b6a4743199308332558a2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}