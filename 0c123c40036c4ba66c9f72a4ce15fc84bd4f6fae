{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e25de15_c636c36e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-07T13:56:05Z",
      "side": 1,
      "message": "CL is a continuation of aosp/1951944 (cannot modify that CL due to changing author)",
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f089b1f7_a5969203",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-21T11:24:25Z",
      "side": 1,
      "message": "As discussed, I\u0027ll reduce the attention set to the \u0027suggested owners\u0027 - thanks!",
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "215f6e0f_fea409b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-02-21T11:39:37Z",
      "side": 1,
      "message": "Hi Richard, thanks for reducing the attention set and sorry for confusion.\n\nI noticed that there were some unresolved comments on https://r.android.com/1951944 by Vladimir. Since this change is a continuation of that one, can you make sure all those questions are addressed here? After that you can mark them as resolved or obsolete on the old change and abandon it for clarity. Also I think Vladimir should be in review for this CL as he already was reviewing the old one, so adding him back.",
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b99c4127_1728e489",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-21T16:49:00Z",
      "side": 1,
      "message": "Hi Ulya, thanks for taking a look and re-adding Vladimir (I wasn\u0027t sure just how long he\u0027s on leave!) \n\nI know it\u0027s a bit of a pain to diff the two, so I\u0027ve tried to explicitly link each previously-unresolved comment from the old CL to the lines in which they are resolved in this CL, which will hopefully help a little.\n\nUnfortunately I don\u0027t have the option to abandon the previous CL, presumably because I\u0027m not its associated author. Perhaps you are able to abandon it from your side?",
      "parentUuid": "215f6e0f_fea409b8",
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66d2a605_275caf59",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-02-21T16:51:48Z",
      "side": 1,
      "message": "Sure, done! Thanks for addressing the comments.",
      "parentUuid": "b99c4127_1728e489",
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "200bd4f1_db24a646",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "FYI I haven\u0027t been involved in the other CL\u0027s review so I am taking a look at it with a fresh set of eyes.",
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfb6cd26_64ddfdbe",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2803,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "We only copy one-by-one in `emitTailLoop`. A proposed alternative:\n```\n[...]\n// A second loop handles the tail by copying the remaining characters.\n// If the copy length is not constant, we copy one-by-one.\n// If the copy length is constant [...]\n```",
      "range": {
        "startLine": 2803,
        "startChar": 5,
        "endLine": 2803,
        "endChar": 15
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "940b8b64_be1e82c1",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2803,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfb6cd26_64ddfdbe",
      "range": {
        "startLine": 2803,
        "startChar": 5,
        "endLine": 2803,
        "endChar": 15
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b6f35a0_c52c3f51",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2810,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "constexpr?\nWe can remove `constant_` from the name",
      "range": {
        "startLine": 2809,
        "startChar": 0,
        "endLine": 2810,
        "endChar": 65
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f317b4c_32e759d6",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2810,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b6f35a0_c52c3f51",
      "range": {
        "startLine": 2809,
        "startChar": 0,
        "endLine": 2810,
        "endChar": 65
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76f00c24_40354e7d",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2820,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "`Subs` is the one setting the flag for the branch right? If so, what do you think about reordering to:\n```\nLDR\nSTR\nSUB\nB\n``` ?\n\nTo me, load/store and sub/branch go together logically. Same for `emitTailLoop`",
      "range": {
        "startLine": 2818,
        "startChar": 0,
        "endLine": 2820,
        "endChar": 83
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40568143_95c85684",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2820,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "While I agree that aesthetically it would be nice for the load/store and sub/branch to go together, I believe that we observe improved performance with this ordering (though I don\u0027t have the exact numbers to hand), so perhaps it\u0027s reasonable to continue with our variant?",
      "parentUuid": "76f00c24_40354e7d",
      "range": {
        "startLine": 2818,
        "startChar": 0,
        "endLine": 2820,
        "endChar": 83
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f87cc6b_98d92a85",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2820,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-27T09:55:04Z",
      "side": 1,
      "message": "I\u0027d be okay with these variant as long as there\u0027s a reason.",
      "parentUuid": "40568143_95c85684",
      "range": {
        "startLine": 2818,
        "startChar": 0,
        "endLine": 2820,
        "endChar": 83
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55a97860_96d96695",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2821,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "It took me a while to understand why we are doing `ge` here, and not `gt` like `emitTailLoop`. Is there a reason we are doing a `do while` loop? Is it better for performance or code size?\n\nThis also makes it so that:\n* we have an extra add after `emitHeadLoop`.\n* we have to substract `chars_per_block` before calling `emitHeadLoop`\n* there\u0027s a difference between `emitHeadLoop` and `emitTailLoop` which might not be needed.",
      "range": {
        "startLine": 2821,
        "startChar": 17,
        "endLine": 2821,
        "endChar": 19
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c473e2b4_cad1cd85",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2821,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "The do-while structure is mainly for performance reasons: one of the goals was to eliminate some conditional jumps through loop inversion. I guess without loop inversion, implementing it as a conditional-while-do would look something like\n\n    __ Mov(length_tmp, length_reg);\n    __ Bind(\u0026loop1);\n    __ Cmp(length_tmp, chars_per_block); \n    __ B(\u0026loop2, lt); \n    __ Ldr(...)\n    __ Str(...)\n    __ Sub(length_tmp, length_tmp, chars_per_block); \n    __ B(\u0026loop1); \n\n    __ Bind(\u0026loop2);\n    __ Cmp(length_tmp, 1)\n    __ B(\u0026done, lt);\n    __ Ldrh(...)\n    __ Strh(...)\n    __ Sub(length_tmp, length_tmp, 1);\n    __ B(\u0026loop2);\n\nHere, both loops have unconditional jumps only to immediately check if we should jump again to past the loop. In this case, when `length \u003d\u003d chars_per_block`, we jump a total of 3 times despite only running one loop body.\n\nWith loop inversion, we move the initial conditional jump out of the loop, then have a tighter loop body which contains only a single conditional jump, which is only taken when we definitely need to run another iteration. For example, in the current proposed patchset, when `length \u003d\u003d chars_per_block`, we jump just 1 time in total.\n\nAs for the `SUBS` and `ADDS` structure of the current patchset: if we don\u0027t `SUBS` and `ADDS` a full block before and after the head loop respectively, we would still need to similarly perform extra conditionals as part of it.\n\nFor example, in this case at the end of the head loop\u0027s `SUBS`, a `B.gt` would succeed if there were one or more characters remaining. But we would still need the second comparison between the remaining length and `chars_per_block` to decide if we should run the head loop body again. With the current patchset, because we `SUBS` at the start, if a second `SUBS` within the head loop results in the `B.ge` being taken then we know for sure that we have enough to run another head iteration without additional conditions. Because the tail loop is guaranteed to have fewer than `chars_per_block` iterations, reducing the conditional branching required by the head loop will have an increasingly bigger impact due to its proportion of the overall work.\n\nFurther, the `SUBS` and the `ADDS` start to appear a little less laborious when the alternative is considered: without them we would have to replace them respectively with a `MOV+Cmp` and a `Cmp`, as in the code sample above.\n\nWhen I initially picked up this CL up I had very similar thoughts, but hopefully some of this reasoning makes sense (sorry for the length!). Do let me know if I can clarify anything further, or if you think I\u0027ve missed something and see a preferable alternative implementation. Thanks!",
      "parentUuid": "55a97860_96d96695",
      "range": {
        "startLine": 2821,
        "startChar": 17,
        "endLine": 2821,
        "endChar": 19
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d71806ef_a6c4b21d",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2821,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-27T09:55:04Z",
      "side": 1,
      "message": "Ack. Can you add these information to the codebase as comments? It doesn\u0027t have to be as detailed as this comment but it would be nice to get clarification. I can see other engineers having the same questions as we did, and being confused as to why it was done in this fashion.\n\nIn a way, we are having a tradeoff of performance for codebase clarity by having e.g. a `do-while` instead of a `while` loop. That\u0027s fine since we can offset that tradeoff with code comments.",
      "parentUuid": "c473e2b4_cad1cd85",
      "range": {
        "startLine": 2821,
        "startChar": 17,
        "endLine": 2821,
        "endChar": 19
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a07f320_3406b076",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2846,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "const? Also we can remove `constant_` from its name",
      "range": {
        "startLine": 2846,
        "startChar": 4,
        "endLine": 2846,
        "endChar": 11
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d939a944_efd84e10",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2846,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "Done. Similarly, took the opportunity to remove constant_ prefix from the argument to emitUnrolledTailLoop (#2832).",
      "parentUuid": "1a07f320_3406b076",
      "range": {
        "startLine": 2846,
        "startChar": 4,
        "endLine": 2846,
        "endChar": 11
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "113dc124_323747bf",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2854,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "One `(`",
      "range": {
        "startLine": 2854,
        "startChar": 26,
        "endLine": 2854,
        "endChar": 28
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "327c861f_2f71b4e6",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2854,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "Done.\n\nI also noticed on re-review that we have some extra unnecessary indentation, which I\u0027ve cleaned up.",
      "parentUuid": "113dc124_323747bf",
      "range": {
        "startLine": 2854,
        "startChar": 26,
        "endLine": 2854,
        "endChar": 28
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6661c234_4d1526e7",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2857,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "static assert?",
      "range": {
        "startLine": 2857,
        "startChar": 6,
        "endLine": 2857,
        "endChar": 51
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56a0dcbb_a86ec954",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2857,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6661c234_4d1526e7",
      "range": {
        "startLine": 2857,
        "startChar": 6,
        "endLine": 2857,
        "endChar": 51
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25b3a2d6_14764f95",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2863,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-02-22T15:36:45Z",
      "side": 1,
      "message": "One `(`",
      "range": {
        "startLine": 2863,
        "startChar": 26,
        "endLine": 2863,
        "endChar": 28
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dfa903c_6f899bd9",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2863,
      "author": {
        "id": 1975620
      },
      "writtenOn": "2023-02-24T15:50:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25b3a2d6_14764f95",
      "range": {
        "startLine": 2863,
        "startChar": 26,
        "endLine": 2863,
        "endChar": 28
      },
      "revId": "0c123c40036c4ba66c9f72a4ce15fc84bd4f6fae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}