{
  "comments": [
    {
      "key": {
        "uuid": "28dab964_d525ab4c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-04-29T17:22:25Z",
      "side": 1,
      "message": "please add\n\nBUG\u003d26327751\n\nto commit message.",
      "range": {
        "startLine": 7,
        "startChar": 34,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2848f9fc_07bf5ce1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-04-29T21:55:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28dab964_d525ab4c",
      "range": {
        "startLine": 7,
        "startChar": 34,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28dab964_4b811a9f",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2453,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-04-29T17:22:25Z",
      "side": 1,
      "message": "I would be helpful if you wrote the full pseudo code here in a top level comment, and then only use minor comments below to separate out the different parts. Now I have to scan over the full method to know how this is implemented.",
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2848f9fc_64f97ed8",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2453,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-04-29T21:55:38Z",
      "side": 1,
      "message": "How\u0027s this for top-level pseudocode?\n\n  // if (in.isNaN) {\n  //   return 0;\n  // }\n\n  // if (in \u003c\u003d (float)Integer.MIN_VALUE) {\n  //   /*\n  //    * Needed for MIPS32 because values \u003c\u003d Integer.MIN_VALUE\n  //    * get output as Integer.MAX_VALUE by \"floor.w.s\" \u0026 Java requires Integer.MIN_VALUE.\n  //    */\n  //   return Integer.MIN_VALUE;\n  // }\n\n  // out \u003d floor(in);\n  // TMP \u003d (((in - out) \u003e\u003d 0.5f) \u0026\u0026 (out !\u003d java.lang.Integer.MAX_VALUE)) ? 1 : 0;\n  // return out +\u003d TMP;\n  //\n  // Note: Except for the two exception cases (in.isNaN \u0026\n  // in \u003c\u003d (float)Integer.MIN_VALUE), branching is avoided\n  // to keep from breaking the pipeline.",
      "parentUuid": "28dab964_4b811a9f",
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28a2b911_c2a092b8",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2453,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-05-02T20:46:07Z",
      "side": 1,
      "message": "Much better. But as non-longer-a-MIPS-expert, it would greatly help me if the float-int conversions were more explicit. It looks like \"out\" is an int, necessitating the MAX_VALUE test? Presumably the ISA makes it hard to do the conversion later?\n\nSince Integer.MAX_VALUE can presumably only arise from overflow, isn\u0027t it cheaper just to do one test after evaluating the floor() function?",
      "parentUuid": "2848f9fc_64f97ed8",
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28a2b911_7d9fc36f",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2453,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-05-02T21:18:12Z",
      "side": 1,
      "message": "MIPS has a series of floor commands in the form of \"floor.x.y\" where x can be either l (64 bits) or w (32 bits), and y can be s (32 bits) or d (64 bits). Here we\u0027re dealing with floor.w.s. Both the input register, and the output register are FP registers but the output register holds a 32-bit integer value. So, yes, this is necessitating the MAX_VALUE test; it\u0027s also necessitating the explicit conversion back to \"float\" using the cvt.s.w command (via the Cvtsw() method).\n\n[Note: 32-bit MIPS (the case this code is dealing with) doesn\u0027t have support for floor.l.s, or floor.s.d so the intrinsic java.lang.Math.round(double) won\u0027t be implemented in this file.]\n\nI\u0027m not following the chain of logic for how only one test is required. If out \u003d\u003d Integer.MAX_VALUE then it\u0027s true that we don\u0027t need to test ((in - out) \u003e\u003d 0.5), so I can see how the first test could cause the code to skip the second test. But I wrote the code to avoid breaking the pipeline for either case by using conditional move instructions (selnez/movn/movf). Could you be more explicit about how you think the code could use a single test?\n\nThanks.",
      "parentUuid": "28a2b911_c2a092b8",
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28a2b911_08cabbb1",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2453,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-05-02T21:44:59Z",
      "side": 1,
      "message": "Could you unconditionally do the floor.w.s, and then test the output against Integer.MAX_VALUE? If you see MAX_VALUE, you then check the input against zero, and return MIN_VALUE or MAX_VALUE as appropriate.  Otherwise you just do the conditional increment by 1.\n\nOr am I misunderstanding the instruction semantics? It sounds like any overflow is indicated by MAX_VALUE.  Which is a good choice, since it can\u0027t otherwise be produced.",
      "parentUuid": "28a2b911_7d9fc36f",
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28dab964_ebc0c6f2",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2454,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-04-29T17:22:25Z",
      "side": 1,
      "message": "period at end",
      "range": {
        "startLine": 2454,
        "startChar": 14,
        "endLine": 2454,
        "endChar": 17
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2848f9fc_52d8c42d",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2454,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-04-29T21:55:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28dab964_ebc0c6f2",
      "range": {
        "startLine": 2454,
        "startChar": 14,
        "endLine": 2454,
        "endChar": 17
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28dab964_8b7702c4",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2518,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-04-29T17:22:25Z",
      "side": 1,
      "message": "This looks like a commented out comment, not an actual comment. I would rephrase this and all other comments in the google style (use sentences, not fragments).",
      "range": {
        "startLine": 2518,
        "startChar": 15,
        "endLine": 2518,
        "endChar": 16
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2848f9fc_324978c1",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2518,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-04-29T21:55:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28dab964_8b7702c4",
      "range": {
        "startLine": 2518,
        "startChar": 15,
        "endLine": 2518,
        "endChar": 16
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28dab964_6badf640",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2529,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-04-29T17:22:25Z",
      "side": 1,
      "message": "plans for double too?",
      "range": {
        "startLine": 2529,
        "startChar": 30,
        "endLine": 2529,
        "endChar": 45
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2848f9fc_b234a83a",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2529,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-04-29T21:55:38Z",
      "side": 1,
      "message": "No, 32-bit processors don\u0027t support \"floor.l.d\".",
      "parentUuid": "28dab964_6badf640",
      "range": {
        "startLine": 2529,
        "startChar": 30,
        "endLine": 2529,
        "endChar": 45
      },
      "revId": "3ddf99c7ce58cae8e2b3503076881ff430c1082f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}