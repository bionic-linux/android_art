{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6ba8cd93_bfb587f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-08-08T14:15:08Z",
      "side": 1,
      "message": "Do you mean for the register? I want to exclude dynamic targets.",
      "tag": "mailMessageId\u003d\u003cCAGPRgkV+iPLgjC6xXgOCTCVq\u003dOD6BK_ELaB+qLMgMFPgkxi4Tg@mail.gmail.com\u003e",
      "revId": "b18f8ad87426ad23208144382297e86624a1622d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00e64a2c_ced76dc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-08-08T14:26:54Z",
      "side": 1,
      "message": "The register in JAL is the destination register (`rd`) which shall hold the return address. The target is not dynamic.\n\nThere are two aliases\n\n    j offset    // jal x0, offset ; x0 is the zero register.\n    jal offset  // jal x1, offset ; x1 is the return address register RA.\n\nI\u0027m not sure if the current llvm disassembler prints these aliases, or the full JAL, so we may want to detect all of them. (In line with arm64 which also handles BL.)",
      "parentUuid": "6ba8cd93_bfb587f6",
      "revId": "b18f8ad87426ad23208144382297e86624a1622d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f52a1cac_72613b12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-08-08T15:40:21Z",
      "side": 1,
      "message": "Ah, I see. I checked that the version without any register found matches. So presumably the disassembler does create the alias",
      "tag": "mailMessageId\u003d\u003cCAGPRgkWON10n5DyCm0MfGbLOcAPcC518Qjw4W35M2ncPvWvERQ@mail.gmail.com\u003e",
      "revId": "b18f8ad87426ad23208144382297e86624a1622d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d8a179a_747358b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-08-08T16:25:37Z",
      "side": 1,
      "message": "Done.  The register is never mentioned in the disassembly, but I added the regex anyway just in case.  Thanks.",
      "parentUuid": "00e64a2c_ced76dc8",
      "revId": "b18f8ad87426ad23208144382297e86624a1622d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af6bb50b_c563eba2",
        "filename": "tools/check_cfi.py",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-08-08T14:03:06Z",
      "side": 1,
      "message": "JAL needs ` \\w+,`.",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 18
      },
      "revId": "b18f8ad87426ad23208144382297e86624a1622d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "937e9483_af68435c",
        "filename": "tools/check_cfi.py",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2023-08-08T16:26:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af6bb50b_c563eba2",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 18
      },
      "revId": "b18f8ad87426ad23208144382297e86624a1622d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}