{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "146f6f74_ba349bfc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2020-12-09T15:06:29Z",
      "side": 1,
      "message": "These should not be affected by the presence of prebuilts, preferred or otherwise. That is because the dependencies from sdk/module_exports to its source members are not replaced by the prebuilts when they are preferred. See:\nhttp://cs/aosp-master/build/soong/android/prebuilt.go?l\u003d276\n\nI know that we cannot do something similar with APEXes because at the time the dependencies on sources are replaced with dependencies on prebuilts we have no knowledge about APEX membership as those mutators run later. However, I did wonder yesterday whether we could fix the APEX issue by replacing those incorrect dependencies on prebuilts with dependencies on the sources. In effect reversing the effects of the source-\u003eprebuilt replacement for those APEX modules.",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 38
      },
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a324bb7_b40eba88",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-12-09T15:37:43Z",
      "side": 1,
      "message": "\u003e However, I did wonder yesterday whether we could fix the APEX issue by replacing those incorrect dependencies on prebuilts with dependencies on the sources.\n\nI\u0027ve spent some effort trying to do that. It may still be worth pursuing, but at this time I think we need to get it off the blocking path, so this will have to do until it\u0027s addressed properly.\n\n\u003e These should not be affected by the presence of prebuilts, preferred or otherwise.\n\nProblem is they are - prebuilts interact with the property collections so the generated bp files get invalid export_include_dirs inside static/shared clauses. I have some tentative work to address that, but there were at least one other issue once it was resolved, and possibly more still.\n\nHence I opted to extend the prebuilt/source toggle to them too, to not block the switch to prebuilts longer. I\u0027d be more than happy to clean it up again when the Soong issues are sorted.",
      "parentUuid": "146f6f74_ba349bfc",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 38
      },
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e53f0141_c114992a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2020-12-09T16:51:54Z",
      "side": 1,
      "message": "\u003e Problem is they are - prebuilts interact with the property collections so the generated bp files get invalid export_include_dirs inside static/shared clauses.\n\nYeuch. The conditional replacement only affects direct dependencies of the sdk (and some special support for system modules). I suspect that problem is a result of static dependencies of a direct dependency using a prebuilt version of the static library which results in using prebuilt versions of the include dirs. That in turn causes a different set of include dirs to be created for static/shared which pushes the export_include_dirs inside the static/shared structure which fails because that does not support export_include_dirs.\n\nI\u0027ve long thought that the flattening of export include dirs from all the transitive dependencies onto a single list in the sdk member was a problem. It leads to duplicate entries across libraries (which we need special support to detect and ignore).\n\nI think that you\u0027re right that we can\u0027t afford to wait to fix these issues \u0027properly\u0027.",
      "parentUuid": "0a324bb7_b40eba88",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 38
      },
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efa645f6_3ea2947c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2020-12-09T16:51:54Z",
      "side": 1,
      "message": "This solution is very specific to ART and cannot easily be generalized for use by other modules in a similar position. We need:\n* An ART specific script.\n* Define ART specific module types for use by source and prebuilt.\n* Use ART specific module types in the source and prebuilt.\n\nIs there no way to wire the setting of \u0027prefer\u0027 up to a specific environment variable in Soong itself that would avoid all this boilerplate?",
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb05e129_e228ee8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-12-09T17:23:50Z",
      "side": 1,
      "message": "go/module-sdk-prefer-prebuilts is that done properly. Doing some low-effort variant of it in Soong brings the problem of how to identify the modules we want act on. This way it\u0027s clunky but very obvious, and I much rather have it visible in the bp files than either hardcoded in Soong or in an environment variable. One benefit with the postprocessing approach in update-art-module-prebuilts.py is that it\u0027ll cover all the modules we add to the SDKs without duplicating that list.",
      "parentUuid": "efa645f6_3ea2947c",
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00e2fbfc_f31a6f99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2020-12-09T17:40:12Z",
      "side": 1,
      "message": "Adding new module types to the sdk will require adding new art specific module types for the prebuilts, I am thinking about if/when we support android_test modules.\n\nThe disadvantage of requiring a custom script to post process the snapshot before update is that we cannot use something like go/android-prebuilt that can help automate the process.\n\nI don\u0027t see why we cannot add some configuration to sdk/module_exports/apex that associates them with some common label (you mentioned something before about grouping them together) and then enabling/disabling via the label. The label could easily be propagated to the current prebuilt modules in the snapshot.\n\nThe label would be visible in the .bp file, and would be usable by any mainline module not just ART.",
      "parentUuid": "cb05e129_e228ee8c",
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a652ef8_30e3b386",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-12-09T18:11:38Z",
      "side": 1,
      "message": "\u003e Adding new module types to the sdk will require adding new art specific module types for the prebuilts, I am thinking about if/when we support android_test modules.\n\nThat\u0027s right. The update script will rewrite all the module types, and there will be an obvious error that SoongConfig.bp boilerplate is missing. So it won\u0027t slip by unnoticed, and it\u0027s straightforward to add the missing module types.\n\n\u003e The disadvantage of requiring a custom script to post process the snapshot before update is that we cannot use something like go/android-prebuilt that can help automate the process.\n\nI think this will be replaced with go/module-sdk-prefer-prebuilts well before we get that far with prebuilt automation. Something like that is clearly needed to make it scalable, and I expect to work on it when the ART Module is in a passable shape.\n\n\u003e /.../ some common label /.../\n\nIt\u0027s not entirely straightforward how that should work, and I fear that an attempt to implement it in Soong will lead to design discussions that will push this off with at least a week.\n\nThe point with this is to get something in relatively quickly to unblock the prebuilt work, then we can iterate on better solutions.",
      "parentUuid": "00e2fbfc_f31a6f99",
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eee13f1a_bb2d0301",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2020-12-09T19:10:57Z",
      "side": 1,
      "message": "Fair enough. I am happy to go ahead with this on the understanding that it is temporary, that we won\u0027t be encouraging other groups to do this and that we will be prioritizing a more general solution.",
      "parentUuid": "6a652ef8_30e3b386",
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8846c0a_08cc9c05",
        "filename": "build/sdk/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2020-12-09T15:06:29Z",
      "side": 1,
      "message": "As mentioned above I don\u0027t think this is necessary.",
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6410b7f_3c7fe9f2",
        "filename": "build/sdk/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-12-09T15:37:43Z",
      "side": 1,
      "message": "Let\u0027s discuss in the other thread.",
      "parentUuid": "a8846c0a_08cc9c05",
      "revId": "07740e953570bec8f41a91c1842ac98211a396a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}