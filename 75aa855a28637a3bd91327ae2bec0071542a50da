{
  "comments": [
    {
      "key": {
        "uuid": "b5fa5752_859237f2",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-08T14:43:47Z",
      "side": 1,
      "message": "Could we move this logic in the assembler instead?",
      "range": {
        "startLine": 223,
        "startChar": 1,
        "endLine": 227,
        "endChar": 11
      },
      "revId": "75aa855a28637a3bd91327ae2bec0071542a50da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2973bddd_7fd6bf26",
        "filename": "compiler/optimizing/code_generator_vector_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1272703
      },
      "writtenOn": "2019-03-12T04:54:10Z",
      "side": 1,
      "message": "The rationale behind having this validation in Code Generator Module because it contains all the information related to instruction set features. In the event that we have to move this validation logic to Assembler then this instruction set features information needs to be transferred to the Assembler module. \n\nI found similar case handling in Code Generator Module:\n\nif (GetGraph()-\u003eHasSIMD()) {\n    __ movups(Address(ESP, stack_index), XmmRegister(reg_id));\n} else {\n    __ movsd(Address(ESP, stack_index), XmmRegister(reg_id));\n}\n\nCan you pl. let us know any issue with this implementation / benefits by moving this validation code to Assembler?",
      "parentUuid": "b5fa5752_859237f2",
      "range": {
        "startLine": 223,
        "startChar": 1,
        "endLine": 227,
        "endChar": 11
      },
      "revId": "75aa855a28637a3bd91327ae2bec0071542a50da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}