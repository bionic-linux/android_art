{
  "comments": [
    {
      "key": {
        "uuid": "8a61b821_b9c1d798",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "I presume we need a com.android.tools... package for this..",
      "range": {
        "startLine": 17,
        "startChar": 8,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa667c34_5dda2f5e",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "yep, we should use com.android.* to be good citizens.",
      "parentUuid": "8a61b821_b9c1d798",
      "range": {
        "startLine": 17,
        "startChar": 8,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7aeef64_a6f2a659",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I switched to com.android.ahat.",
      "parentUuid": "aa667c34_5dda2f5e",
      "range": {
        "startLine": 17,
        "startChar": 8,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_1b8c4310",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "as gfrost suggested elsewhere, coding style is not to use *\n\n+ no spaces between import sections in art/libcore/dalvik code",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 32
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27b567ac_089867fb",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca673030_1b8c4310",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 32
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a5c2064_5ce7d158",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "What exception are we catching here?  java.lang.Exception seems too broad, probably should be IOException",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 24
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b0862_d52d6c94",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "multicatch is preferred to a general Exception catchall",
      "parentUuid": "4a5c2064_5ce7d158",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 24
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cac3b058_495b715b",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-05T23:19:42Z",
      "side": 1,
      "message": "For debugging purposes, I would like to see stack traces for exceptions in the handlers, which the HttpServer does not report. Sometimes these are IOExceptions, but more often they are NullPointerExceptions. Presumably there could be other kinds of exceptions I would like to see a stack trace for rather than just having the page hang or fail to load.\n\n1. Is general Exception catchall appropriate for this use case?\n2. Should I add IOException, NullPointerException, and others to a multicatch as I see them arise?\n3. Or should I not print the stack traces at all in the checked in code, and only modify the code locally or use a debugger (?) to see the stack traces?",
      "parentUuid": "0a0b0862_d52d6c94",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 24
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a6ba46a_8a384bfb",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-06T00:16:23Z",
      "side": 1,
      "message": "I\u0027d just catch RuntimeException then with a comment that otherwise they are swallowed and not reported.",
      "parentUuid": "cac3b058_495b715b",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 24
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67303f13_82ec5ab8",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I forgot about this in PS3. I\u0027ll fix it in PS4. I think the server may actually be reporting the stack trace already (because I see multiple copies of the stack traces), but there may be some buffering issue. I look into it.",
      "parentUuid": "6a6ba46a_8a384bfb",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 24
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7cf2b9d_551accfb",
        "filename": "tools/ahat/src/ahat/AhatHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-10T15:41:13Z",
      "side": 1,
      "message": "There\u0027s no buffering issue. The server does swallow the error messages. I switched to catching RuntimeException and added the comment noting they are swallowed and not reported otherwise.",
      "parentUuid": "67303f13_82ec5ab8",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 24
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa667c34_7ad5712e",
        "filename": "tools/ahat/src/ahat/AhatSnapshot.java",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "Can we separate out the imported classes. Rather than using the wildcard here",
      "range": {
        "startLine": 19,
        "startChar": 38,
        "endLine": 19,
        "endChar": 39
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7a9eb5f_85d8c299",
        "filename": "tools/ahat/src/ahat/AhatSnapshot.java",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa667c34_7ad5712e",
      "range": {
        "startLine": 19,
        "startChar": 38,
        "endLine": 19,
        "endChar": 39
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a5c2064_3fb2cf35",
        "filename": "tools/ahat/src/ahat/AhatSnapshot.java",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "null parent I assume.  I would comment this.",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7a9eb5f_6507c690",
        "filename": "tools/ahat/src/ahat/AhatSnapshot.java",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I made a separate constructor for Site to construct root objects where we don\u0027t pass null. Is that better?",
      "parentUuid": "4a5c2064_3fb2cf35",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea6cf416_f0e52015",
        "filename": "tools/ahat/src/ahat/AhatSnapshot.java",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "I am not sure what the google comment convention is for recursion, but I would comment the recursion here",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7a9eb5f_2501ce78",
        "filename": "tools/ahat/src/ahat/AhatSnapshot.java",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea6cf416_f0e52015",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa667c34_1a2efdc5",
        "filename": "tools/ahat/src/ahat/BitmapHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "replace wildcards with actual references.",
      "range": {
        "startLine": 26,
        "startChar": 38,
        "endLine": 26,
        "endChar": 39
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "273ac7f6_8036160b",
        "filename": "tools/ahat/src/ahat/BitmapHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa667c34_1a2efdc5",
      "range": {
        "startLine": 26,
        "startChar": 38,
        "endLine": 26,
        "endChar": 39
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a08cc62_d649f483",
        "filename": "tools/ahat/src/ahat/BitmapHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "We dealt with query being null.  Does the algorithm below have to deal with id being left as its default value of 0?",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7aeef64_a60dc6f3",
        "filename": "tools/ahat/src/ahat/BitmapHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a08cc62_d649f483",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_7b761781",
        "filename": "tools/ahat/src/ahat/BitmapHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "should this be in a helper function? unit tested?",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 57,
        "endChar": 31
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47bedb91_0934e992",
        "filename": "tools/ahat/src/ahat/BitmapHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I think the unit test is as likely to be buggy as the code. I would rather test this as part of an end-to-end test once I set end-to-end testing.\n\nI did move this to FieldReader, so eventually we can put it into perflib.",
      "parentUuid": "ca673030_7b761781",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 57,
        "endChar": 31
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_38d8259f",
        "filename": "tools/ahat/src/ahat/CompareInstance.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "You should probably implement @Override Object.equals(Object other) as part of the Comparator contract (see Comparator javadoc).",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87a3737f_83499e88",
        "filename": "tools/ahat/src/ahat/CompareInstance.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I want to define a partial order, not a total order. The Comaparator javadoc says this is okay, as long as you clearly note that the compare is not consistent with equals. I added comments that say that.",
      "parentUuid": "ca673030_38d8259f",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b0862_120f0abf",
        "filename": "tools/ahat/src/ahat/CompareInstance.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "I had to scan this a few times.  Maybe replaced with \n\nComparator\u003cInstance\u003ecompare \u003d new ByTotalRetainedSize(new ById());",
      "range": {
        "startLine": 63,
        "startChar": 3,
        "endLine": 64,
        "endChar": 47
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27b567ac_2818cb02",
        "filename": "tools/ahat/src/ahat/CompareInstance.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I refactored the sorting code so you pass a list of comparators, instead of chaining them. Hopefully that\u0027s more clear.",
      "parentUuid": "0a0b0862_120f0abf",
      "range": {
        "startLine": 63,
        "startChar": 3,
        "endLine": 64,
        "endChar": 47
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a61b821_dc9e416d",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "It looks like this AIC(anonymous inner class) is just used to build data for the table rendering. I would refactor this.  It does not seem to be capturing any state from the call site, so you could move this out as a static final field (and comment it and it\u0027s relationship to the other AIC below). Honestly I had to scan these two implementations a few times to work out what was going on. \n\nYou may also consider creating a separate class for the AIC below.  There is a little too much content (for me) for an AIC.",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 98,
        "endChar": 6
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caa650d5_a3ac3e73",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-05T23:19:42Z",
      "side": 1,
      "message": "My goal is to share code for producing tables that contain heap numbers. What changes between each table, currently, is the description of what the heap values mean, how to get the heap values, and how to render any additional columns in the table.\n\nI\u0027m not terribly happy with the approach I\u0027m using, where I provide an implementation of a configuration interface to configure the table. Is there a better way? Is there a more canonical way for doing this kind of thing in Java?\n\nFor example, would it be better to have HeapTable be an abstract base class that I subclass for each instance of the table I want to render? Does that violate \"inheritance vs. composition\" arguments?\n\nI really just want a nice way to pass functions (or rather, a list of functions) as arguments. Can I use lambdas for that?",
      "parentUuid": "8a61b821_dc9e416d",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 98,
        "endChar": 6
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47333b20_a1bb5eb9",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I move the AIC for the values inside the AIC for the table, and switched to using Collections.singletonList. Is it more clear now?",
      "parentUuid": "caa650d5_a3ac3e73",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 98,
        "endChar": 6
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a5c2064_3f8daf3e",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "I think this should be a separate class.  Maybe a static non-anonymous inner class of DominatedList which includes the static final value defined above.",
      "range": {
        "startLine": 100,
        "startChar": 43,
        "endLine": 119,
        "endChar": 6
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "273ac7f6_a07eba88",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "See above. Is it more clear now? Or do you still think I should go to a static class?\n\nWhat I like about the anonymous inner class is that it puts the table configuration next to the line that renders the table, instead of somewhere else in the class file. I don\u0027t care that much either way, though.",
      "parentUuid": "4a5c2064_3f8daf3e",
      "range": {
        "startLine": 100,
        "startChar": 43,
        "endLine": 119,
        "endChar": 6
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa667c34_fabb41a8",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "Consider a StringBuilder here?",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 10
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a5c2064_1f38ab59",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "yes, generally we shouldn\u0027t be concatenating Strings",
      "parentUuid": "aa667c34_fabb41a8",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 10
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "273ac7f6_e078c29d",
        "filename": "tools/ahat/src/ahat/DominatedList.java",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a5c2064_1f38ab59",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 10
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea6cf416_50105410",
        "filename": "tools/ahat/src/ahat/HtmlWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "why not public void print(String format, Object...args)?",
      "range": {
        "startLine": 52,
        "startChar": 34,
        "endLine": 52,
        "endChar": 62
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a536c56_7e2d6917",
        "filename": "tools/ahat/src/ahat/HtmlWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "if arg1 is special, give it a special name?",
      "parentUuid": "ea6cf416_50105410",
      "range": {
        "startLine": 52,
        "startChar": 34,
        "endLine": 52,
        "endChar": 62
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aa28cbf_80a8160f",
        "filename": "tools/ahat/src/ahat/HtmlWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-05T23:19:42Z",
      "side": 1,
      "message": "arg1 is not special. Is the comment not clear?\n\n\"\nThe format string itself will not be sanitized. To ensure an unsanitized string is not accidentally passed as the format string, this requires at least one format argument. To print an already sanitized string, use:\n  print(\"%R\", str);\nTo print a string that needs to be sanitized, use:\n  print(\"%s\", str);\n\"\n\nI separate arg1 so you\u0027ll get a compiler error if you do something like \u0027html.print(instance.toString())\u0027. This is dangerous, because instance.toString() may not have been sanitized. Requiring the user explicitly put \"%R\" as the first object makes it harder to make that mistake (I hope), and easier to grep for \"%R\" for potential problems later on.",
      "parentUuid": "2a536c56_7e2d6917",
      "range": {
        "startLine": 52,
        "startChar": 34,
        "endLine": 52,
        "endChar": 62
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_bb69cfeb",
        "filename": "tools/ahat/src/ahat/HtmlWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "System.arraycopy()?",
      "range": {
        "startLine": 56,
        "startChar": 4,
        "endLine": 58,
        "endChar": 5
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a24e8f1_674fb23d",
        "filename": "tools/ahat/src/ahat/HtmlWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "ca673030_bb69cfeb",
      "range": {
        "startLine": 56,
        "startChar": 4,
        "endLine": 58,
        "endChar": 5
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47333b20_844628f9",
        "filename": "tools/ahat/src/ahat/HtmlWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a24e8f1_674fb23d",
      "range": {
        "startLine": 56,
        "startChar": 4,
        "endLine": 58,
        "endChar": 5
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_3ba49fbe",
        "filename": "tools/ahat/src/ahat/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "is this used below?",
      "range": {
        "startLine": 23,
        "startChar": 28,
        "endLine": 23,
        "endChar": 37
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27b567ac_e84073bc",
        "filename": "tools/ahat/src/ahat/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "ca673030_3ba49fbe",
      "range": {
        "startLine": 23,
        "startChar": 28,
        "endLine": 23,
        "endChar": 37
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a61b821_3c55b5d1",
        "filename": "tools/ahat/src/ahat/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "Again I think we should use explicit class names not wildcards.",
      "range": {
        "startLine": 29,
        "startChar": 29,
        "endLine": 29,
        "endChar": 31
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47333b20_a4bd2c20",
        "filename": "tools/ahat/src/ahat/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a61b821_3c55b5d1",
      "range": {
        "startLine": 29,
        "startChar": 29,
        "endLine": 29,
        "endChar": 31
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a536c56_de6635c8",
        "filename": "tools/ahat/src/ahat/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "Why is this H (upper case) elp?",
      "range": {
        "startLine": 33,
        "startChar": 21,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a01803c_b7d550b7",
        "filename": "tools/ahat/src/ahat/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "style is lower case",
      "parentUuid": "2a536c56_de6635c8",
      "range": {
        "startLine": 33,
        "startChar": 21,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "273ac7f6_60083236",
        "filename": "tools/ahat/src/ahat/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a01803c_b7d550b7",
      "range": {
        "startLine": 33,
        "startChar": 21,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea6cf416_f059a0d5",
        "filename": "tools/ahat/src/ahat/ObjectHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "This note applies across this whole app.   There are a lot of embedded html tags in text strewn through here.  I have to believe that there is a Google preferred way of generating html.  I know there are external tools (rendersnake, jatl, ecj) that make this easier to write and to maintain.",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 73
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_7b4f373d",
        "filename": "tools/ahat/src/ahat/ObjectHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "google preferred !\u003d android preferred... we aren\u0027t going to use GWT :)\n\nI\u0027m fine with something quick and dirty to keep this easy to work on without needing to learn some third party toolkit that is just wrapping text generation.",
      "parentUuid": "ea6cf416_f059a0d5",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 73
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ac9b89e_33bc08a1",
        "filename": "tools/ahat/src/ahat/ObjectHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-05T23:19:42Z",
      "side": 1,
      "message": "The recommendations I\u0027ve seen are GWT, Closure Templates, jslayout, and GXP. The first three of those generate JavaScript code, but it is important to me that javascript not be required to view the heap dump.\n\nGXP may work, but I agree with Brian. I think it will add more complexity than it is worth.",
      "parentUuid": "ca673030_7b4f373d",
      "range": {
        "startLine": 76,
        "startChar": 24,
        "endLine": 76,
        "endChar": 73
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a01803c_57098435",
        "filename": "tools/ahat/src/ahat/RootsHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "I prefer using the interface/abstraction \u0027Set\u003cInstance\u003e rootset \u003d new HashSet\u003cInstance\u003e();\u0027 rather than the concrete type \u0027HashSet rootset \u003d ...\u0027",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 11
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a5c2064_3fd80f9f",
        "filename": "tools/ahat/src/ahat/RootsHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2015-08-03T19:50:50Z",
      "side": 1,
      "message": "that is the libcore style as well.",
      "parentUuid": "4a01803c_57098435",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 11
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b863a5_a724ea61",
        "filename": "tools/ahat/src/ahat/RootsHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a5c2064_3fd80f9f",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 11
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b0862_353f98e6",
        "filename": "tools/ahat/src/ahat/Site.java",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "Again I think you may need to implement equals(Object other) too (as part of the Comparator contract).",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27b567ac_68e00343",
        "filename": "tools/ahat/src/ahat/Site.java",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I used the same approach for this as for the other comparators, so hopefully it is okay now.",
      "parentUuid": "0a0b0862_353f98e6",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea6cf416_f087e096",
        "filename": "tools/ahat/src/ahat/SiteHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "is this \nComparator\u003cSite.ObjectsInfo\u003e compare \u003d \n   new  ObjectsInfoByHeapName(new ObjectsInfoBySize(new ObjectInfoByClassName(null))));?",
      "range": {
        "startLine": 94,
        "startChar": 3,
        "endLine": 97,
        "endChar": 49
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47bedb91_29744d42",
        "filename": "tools/ahat/src/ahat/SiteHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Hopefully this is more clear with the new sorting approach.",
      "parentUuid": "ea6cf416_f087e096",
      "range": {
        "startLine": 94,
        "startChar": 3,
        "endLine": 97,
        "endChar": 49
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_5b099b35",
        "filename": "tools/ahat/src/ahat/SiteHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "are we sure that classObj is not null?",
      "range": {
        "startLine": 143,
        "startChar": 18,
        "endLine": 143,
        "endChar": 26
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "273ac7f6_c033fef8",
        "filename": "tools/ahat/src/ahat/SiteHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "I put checks in so we can handle null classObj.",
      "parentUuid": "ca673030_5b099b35",
      "range": {
        "startLine": 143,
        "startChar": 18,
        "endLine": 143,
        "endChar": 26
      },
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_9b0a1328",
        "filename": "tools/ahat/src/ahat/SiteHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1047883
      },
      "writtenOn": "2015-08-03T19:26:16Z",
      "side": 1,
      "message": "Again I think we need to implement \u0027equals(Object other)\u0027",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87a3737f_e3973250",
        "filename": "tools/ahat/src/ahat/SiteHandler.java",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2015-08-07T22:59:20Z",
      "side": 1,
      "message": "Fixed in Sort refactor.",
      "parentUuid": "ca673030_9b0a1328",
      "revId": "768638029c48f876c73417ccf355e9652a02afbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}