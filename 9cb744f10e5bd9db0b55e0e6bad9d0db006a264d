{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4fe3a67c_793cf001",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-15T19:57:28Z",
      "side": 1,
      "message": "Pinner service is a known issue, see b/331970662.",
      "revId": "9cb744f10e5bd9db0b55e0e6bad9d0db006a264d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9560ee3_d61c78d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-15T20:05:45Z",
      "side": 1,
      "message": "I\u0027m not the best one to review this CL. I\u0027ll leave it to others.",
      "revId": "9cb744f10e5bd9db0b55e0e6bad9d0db006a264d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fbb1cec_4f8d30b6",
        "filename": "build/art.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-15T18:10:30Z",
      "side": 1,
      "message": "I haven\u0027t investigated exactly what controls the value of this, but ignoring build settings seems a bit of a hack. Shouldn\u0027t we ensure that the ART build config is the same at the product settings level instead, i.e. in some `PRODUCT_*` in the mk files?",
      "range": {
        "startLine": 116,
        "startChar": 43,
        "endLine": 116,
        "endChar": 64
      },
      "revId": "9cb744f10e5bd9db0b55e0e6bad9d0db006a264d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea35a81_39c9a9ae",
        "filename": "build/art.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-15T18:24:09Z",
      "side": 1,
      "message": "Btw - I\u0027m not 100% convinced this is the right thing, but I think maybe it is, so hear me out, let me know what you think.\n\nThe bionic flag is exactly set on some targets with PRODUCT_NO_BIONIC_PAGE_SIZE_MACRO, but I think the Art setting should be decoupled from that and set globally. The thing is PRODUCT_NO_BIONIC_PAGE_SIZE_MACRO is about BIONIC, but Art doesn\u0027t use that macro at all, and instead it has a 4096 mode and a 16384 mode. It\u0027s not backwards compatible, it\u0027s written so Art can move to the larger page size and run in both modes.\n\nAnyway, forget the test coupling issue (which made me realize this oversight).\n\nIf odex/etc.. files are built differently on different devices, wouldn\u0027t that mess up profiling, or no? Like we don\u0027t want to split the arm32 population from 32-bit-only apps on arm64 devices running that as a secondary ABI? arm32 should be the same everywhere.",
      "parentUuid": "8fbb1cec_4f8d30b6",
      "range": {
        "startLine": 116,
        "startChar": 43,
        "endLine": 116,
        "endChar": 64
      },
      "revId": "9cb744f10e5bd9db0b55e0e6bad9d0db006a264d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a2e0cfb_67238c29",
        "filename": "build/art.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-15T18:50:07Z",
      "side": 1,
      "message": "Aha, so the alternative would be to introduce something like `PRODUCT_ART_PAGE_SIZE_AGNOSTIC` instead, provided there\u0027s any value in controlling this from product .mk\u0027s. I\u0027ve no opinion if we need that or if we\u0027re happy hardcoding it. I see the flag morphed from a generic to Bionic-specific spelling in https://r.android.com/2860348, so I\u0027ll leave it to the people there to review this too.\n\n\u003e If odex/etc.. files are built differently on different devices, wouldn\u0027t that mess up profiling, or no?\n\nI\u0027m not sure I follow what profiling you\u0027re talking about. The ART profiles for odex files are based on method call counts, and hence are architecture agnostic in that regard.",
      "parentUuid": "dea35a81_39c9a9ae",
      "range": {
        "startLine": 116,
        "startChar": 43,
        "endLine": 116,
        "endChar": 64
      },
      "revId": "9cb744f10e5bd9db0b55e0e6bad9d0db006a264d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2504f7b7_9862bc45",
        "filename": "build/art.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-15T20:00:35Z",
      "side": 1,
      "message": "That is good to know, although I guess we still have the population difference just in terms of the incoming bugs.\n\nSo, we could set PRODUCT_ART_PAGE_SIZE_AGNOSTIC (maybe temporarily), but if we aren\u0027t going to set it on specific devices, it can also remain coupled.\n\nHowever, this bug also didn\u0027t fix the x86-abi art_oatdump_test failure - so there\u0027s no real rush splitting it up, and we can wait for others to weigh in.",
      "parentUuid": "4a2e0cfb_67238c29",
      "range": {
        "startLine": 116,
        "startChar": 43,
        "endLine": 116,
        "endChar": 64
      },
      "revId": "9cb744f10e5bd9db0b55e0e6bad9d0db006a264d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}