{
  "comments": [
    {
      "key": {
        "uuid": "e59a7e77_d2a56424",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 689,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-12-14T17:58:18Z",
      "side": 1,
      "message": "It doesn\u0027t look right to have a Phi related method here. Probably you could rename it.",
      "range": {
        "startLine": 689,
        "startChar": 15,
        "endLine": 689,
        "endChar": 24
      },
      "revId": "c4c6bbf1cd65a0729f6d20beb922d23a8d1fc08a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25673634_54c20cab",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 689,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-12-14T18:10:15Z",
      "side": 1,
      "message": "At first read this looks unsafe as you relax a condition that should be strict.\n\nWouldn\u0027t the proper fix be to not remove the store?",
      "parentUuid": "e59a7e77_d2a56424",
      "range": {
        "startLine": 689,
        "startChar": 15,
        "endLine": 689,
        "endChar": 24
      },
      "revId": "c4c6bbf1cd65a0729f6d20beb922d23a8d1fc08a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4568aa02_b560c085",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 689,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-12-14T18:15:01Z",
      "side": 1,
      "message": "As i mentioned in the top-level message, the right way of fixing this is not having any aliasing. I\u0027m working on that anyway... From LSE perspective, I\u0027d add DCHECKs making sure that removing a set is safe, but i\u0027ll leave that up to mingyao.",
      "parentUuid": "25673634_54c20cab",
      "range": {
        "startLine": 689,
        "startChar": 15,
        "endLine": 689,
        "endChar": 24
      },
      "revId": "c4c6bbf1cd65a0729f6d20beb922d23a8d1fc08a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45db4a39_11527ce4",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 689,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-12-14T18:37:01Z",
      "side": 1,
      "message": "I am okay with doing that in a follow up CL, but I agree with Nicolas that ToPhiType is a bit of a misnomer if we are using this generically.",
      "parentUuid": "4568aa02_b560c085",
      "range": {
        "startLine": 689,
        "startChar": 15,
        "endLine": 689,
        "endChar": 24
      },
      "revId": "c4c6bbf1cd65a0729f6d20beb922d23a8d1fc08a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0593126b_8e4bbbab",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 3
      },
      "lineNbr": 689,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-12-14T19:35:13Z",
      "side": 1,
      "message": "I used to have a similar check on the store side so if there is possible type aliasing, I didn\u0027t eliminate the store. That check was removed due to the fact that I/F, J/D aliasing only happen for arrays. However as this bug showed there can still be int type aliasing, like between boolean and int (I was actually aware of this but somehow still removed the check).\n\nThe question is are we sure it\u0027s always safe to load as one integer type which is stored as a different integer type? To be on the safe side, we can always keep the store by calling KeepIfIsStore() if types mismatch.",
      "parentUuid": "45db4a39_11527ce4",
      "range": {
        "startLine": 689,
        "startChar": 15,
        "endLine": 689,
        "endChar": 24
      },
      "revId": "c4c6bbf1cd65a0729f6d20beb922d23a8d1fc08a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}