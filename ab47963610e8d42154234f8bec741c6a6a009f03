{
  "comments": [
    {
      "key": {
        "uuid": "e7cf4774_e3903c83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-01T10:34:13Z",
      "side": 1,
      "message": "Add bug: 69667779.",
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97b08403_5171b2ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-12-01T10:52:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7cf4774_e3903c83",
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aed1c07_01f1e871",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-12-01T17:53:02Z",
      "side": 1,
      "message": "Rephrase this as\n\nExtends the scheduling barrier with those ...\n\nso that is is clear that you take the original barrier instructions, and add a few for the arm64 case\n\n(otherwise it reads that this method just deals with vector instr)",
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ddbf65d_7eaf86c5",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-01T10:34:13Z",
      "side": 1,
      "message": "Please make this a instr-\u003eIsVecOperation for being extra secure.",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "446c2b06_389f2353",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-12-01T10:52:33Z",
      "side": 1,
      "message": "If we do that, VecInstructions within simd loops won\u0027t be scheduled.\n\nNote, now it\u0027s secure in terms of scheduling as when a new vec instruction is introduced one will have to add it to  FOR_EACH_SCHEDULED_COMMON_INSTRUCTION (in this file) otherwise the whole instruction\u0027s block will not be scheduled.",
      "parentUuid": "6ddbf65d_7eaf86c5",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2affb2b7_0bea95e3",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-01T10:58:24Z",
      "side": 1,
      "message": "... and also add it to this list. I\u0027d feel much better if we just make all vec instructions a barrier.\n\nRight now, what kind of vec instructions are safe to schedule?",
      "parentUuid": "446c2b06_389f2353",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5595e08f_7d32918b",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-12-01T11:19:15Z",
      "side": 1,
      "message": "It is safe to schedule those VecInstructions which can\u0027t be live across an invoke or a slowpath other than SuspendCheckSlowPath. It is automatically true for those whose live range doesn\u0027t exceed the SIMD loop boundaries (as we don\u0027t have invokes/other slowpaths in a SIMD loop).\n\n(for SuspendCheck we do:\nlocations-\u003eSetCustomSlowPathCallerSaves(GetGraph()-\u003eHasSIMD() ? RegisterSet::AllFpu() : RegisterSet::Empty()); )\n\nAgain, \"if we just make all vec instructions a barrier\" that will mean that no two VecInstructions be reordered in respect to each other; thus effectively SIMD loops won\u0027t be scheduled.",
      "parentUuid": "2affb2b7_0bea95e3",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10c84046_834a882a",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-12-01T11:36:10Z",
      "side": 1,
      "message": "I\u0027d still feel much safer for now to just disable any vec operation to be scheduled. Diagnosing the problem wasn\u0027t trivial, and I\u0027d much prefer not opening a chance of hitting it again.\n\nAart, WDYT?",
      "parentUuid": "5595e08f_7d32918b",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8549d4b_0cda01df",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-12-01T17:53:02Z",
      "side": 1,
      "message": "Artem, what perf do we lose if we just don\u0027t schedule SIMD at all. I am on Nicolas\u0027 conservative side on this one but of course I am also sensitive to performance arguments.\n\nIf we keep a list of individual SIMD instructions, I would like this to be somehow defined in nodes_vector.h so that every time we change SIMD, we think about that again.",
      "parentUuid": "10c84046_834a882a",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3d9f8bc_a5c213d0",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2017-12-01T18:13:01Z",
      "side": 1,
      "message": "1. I remember SIMD scheduling brings 4% performance improvement on Linpack, according to CL I5e728b5218fc6640ac583594ba08f69330b01e21.\n2. I also observed performance improvement after scheduling VecLoad/Store instructions in an unrolled SIMD loop on ARM64 backend, assuming we\u0027ve solved the array data alignment issue for ARM64.\n\nAt least we will lose above two performance improvements if we don\u0027t schedule SIMD instructions at all.",
      "parentUuid": "c8549d4b_0cda01df",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9bfa4af_9ec98764",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-12-01T18:52:23Z",
      "side": 1,
      "message": "I will come back with some perf data.\n\nBut what do you think about inserting a CHECK/DCHECK into register allocator which will make sure there is no SIMD values (defined by a VecOperation) which are live across a call?",
      "parentUuid": "c8549d4b_0cda01df",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c40f117_9d96a35c",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-12-04T21:59:25Z",
      "side": 1,
      "message": "Are you waiting for my CL to do that or are you suggesting to include that in this CL? In the meanwhile, I would be okay to save perf and use this if needed, provided you make it more visible in the nodes_vector.h somehow",
      "parentUuid": "b9bfa4af_9ec98764",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 165,
        "endChar": 41
      },
      "revId": "ab47963610e8d42154234f8bec741c6a6a009f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}