{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "70e5e1f5_d7aafa38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-01-10T16:57:19Z",
      "side": 1,
      "message": "Unfortunately, this adds a significant amount of code to try to better understand what the target thread of SuspendThreadId is doing when it fails to suspend. But I couldn\u0027t think of another way to get more insight here. This shouldn\u0027t affect the fast/normal path significantly, so I think it\u0027s OK to have this always on. This code should eventually also be triggered for other suspension failures.",
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b2df052_e19b4e56",
        "filename": "libartbase/base/atomic.h",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-01-11T20:10:43Z",
      "side": 1,
      "message": "This is not the naming convention we use, right? Maybe something like `IncrementStatsCounter`.",
      "range": {
        "startLine": 131,
        "startChar": 5,
        "endLine": 131,
        "endChar": 23
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1675f3d0_c3352965",
        "filename": "libartbase/base/atomic.h",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-01-11T20:59:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b2df052_e19b4e56",
      "range": {
        "startLine": 131,
        "startChar": 5,
        "endLine": 131,
        "endChar": 23
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a01aaee_7ed3d144",
        "filename": "libartbase/base/atomic.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-01-11T20:10:43Z",
      "side": 1,
      "message": "Didn\u0027t understand from the comment why fetch_add() wasn\u0027t usable here.",
      "range": {
        "startLine": 132,
        "startChar": 5,
        "endLine": 132,
        "endChar": 10
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e99136e4_34091b19",
        "filename": "libartbase/base/atomic.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-01-11T20:59:35Z",
      "side": 1,
      "message": "This is usually significantly cheaper. Guaranteeing atomicity for the load and the store together seems to cost quite a few cycles.",
      "parentUuid": "5a01aaee_7ed3d144",
      "range": {
        "startLine": 132,
        "startChar": 5,
        "endLine": 132,
        "endChar": 10
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1c943b3_c2d6e7bd",
        "filename": "libartbase/base/atomic.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-01-11T21:01:20Z",
      "side": 1,
      "message": "Note that\u0027s specifically true for small counters, which often require a CAS on the whole word to implement atomically.",
      "parentUuid": "e99136e4_34091b19",
      "range": {
        "startLine": 132,
        "startChar": 5,
        "endLine": 132,
        "endChar": 10
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a15ca0e_6e733c3e",
        "filename": "libartbase/base/atomic.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-01-11T21:04:50Z",
      "side": 1,
      "message": "This is good to know. I always thought fetch_add would be cheaper.",
      "parentUuid": "e99136e4_34091b19",
      "range": {
        "startLine": 132,
        "startChar": 5,
        "endLine": 132,
        "endChar": 10
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d73a620_17d73fa8",
        "filename": "runtime/thread.h",
        "patchSetId": 1
      },
      "lineNbr": 2327,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-01-11T20:10:43Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 2327,
        "startChar": 24,
        "endLine": 2327,
        "endChar": 28
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7911bab_a36a42cd",
        "filename": "runtime/thread.h",
        "patchSetId": 1
      },
      "lineNbr": 2327,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-01-11T20:59:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d73a620_17d73fa8",
      "range": {
        "startLine": 2327,
        "startChar": 24,
        "endLine": 2327,
        "endChar": 28
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1200b38_dee3e6a5",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 1
      },
      "lineNbr": 685,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2024-01-11T20:10:43Z",
      "side": 1,
      "message": "Are you sure you want to iterate so many times for one invocation of this function?",
      "range": {
        "startLine": 685,
        "startChar": 22,
        "endLine": 685,
        "endChar": 31
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81eca09a_97bcc884",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 1
      },
      "lineNbr": 685,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-01-11T20:59:35Z",
      "side": 1,
      "message": "I went back and forth on that. This makes it more similar to the real implementation. And it avoids calling GetThreadState in the normal case. Note that we terminate early if possible, so it doesn\u0027t really matter.\n\nThis version passed a fair amount of testing with an egregious syntax error, so I\u0027m not sure it really gets used at all.",
      "parentUuid": "e1200b38_dee3e6a5",
      "range": {
        "startLine": 685,
        "startChar": 22,
        "endLine": 685,
        "endChar": 31
      },
      "revId": "b23578bbb7e35048317a59abf6dd2364ceb36e90",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}