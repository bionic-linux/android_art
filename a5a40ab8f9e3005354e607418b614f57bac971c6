{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ee94c5_f0002872",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-13T14:49:39Z",
      "side": 1,
      "message": "Actually, sorry for the back and forth, but would an enum help better the readability?\n\nenum class WriteBarrierCodegenKind {\n  kEmitNoNullCheck\n  kEmitWithNullCheck\n  kDontEmit,\n}",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83d4bb13_5adbd1d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-13T15:24:56Z",
      "side": 1,
      "message": "We could have that instead of `kFlagMaybeGenerateWriteBarrier` and `kFlagAlwaysGenerateWriteBarrier` but we would still need the `kFlagValueCanBeNull` as we use it in other scenarios e.g. to skip type check (https://cs.android.com/android/platform/superproject/+/master:art/compiler/optimizing/code_generator_arm_vixl.cc;l\u003d6860;drc\u003d5eff6b3307dde2feff372decd0bc7e7e80e340da).\n\nIf we go this route, I\u0027d introduce a 4th value `kAlwaysEmit` to disambiguate between \"emit but may be eliminated by the write barrier elimination pass\" and \"emit but shouldn\u0027t be eliminated ever\". This would be useful mostly for correctness checks in the write barrier elimination pass itself.\n\nThe transition graph would be:\n\n```\nkEmitWithNullCheck ------------\n      |         |              \\\n      |         V              |\n      | ClearValueCanBeNull()  |\n      |         |              |\n      |         |              |\n      |         V              |\n      | kEmitNoNullCheck---------\u003eAlwaysEmitWriteBarrier()---\u003e kAlwaysEmit\n      |         |\n      |         /\n      |---------\n      V\n AlwaysSkipWriteBarrier()\n      |\n      V\n   kDontEmit\n```\n\n`AlwaysSkipWriteBarrier` and `AlwaysEmitWriteBarrier` would only be called in the write barrier elimination pass, and `ClearValueCanBeNull` can be called anywhere in the optimizing compiler (e.g. instruction simplifier).\n\nI\u0027m okay with implementing this but I\u0027d rather only do this big change if we all agree on it. @vmarko@google.com WDYT?",
      "parentUuid": "b3ee94c5_f0002872",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35b287c_f62a6cdd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-13T15:28:19Z",
      "side": 1,
      "message": "Yes, I wasn\u0027t suggesting to remove the can_be_null bit.\n\nAs the enum is only for codegen, why do you want to disambiguate on whether the optimization pass has run? The generated code should be the same no?",
      "parentUuid": "83d4bb13_5adbd1d0",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f69da69b_bebd9789",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-13T15:41:56Z",
      "side": 1,
      "message": "It would be the same for codegen, but for the write barrier elimination pass itself it would be nice to have the 4th enum for correctness checks. If you don\u0027t have that 4th kind, `kEmitNoNullCheck` could mean either:\n* can be eliminated in the WBE pass, or \n* shouldn\u0027t be eliminated in the WBE pass\n\nLet\u0027s say you are relying on a particular store to have a write barrier but then you change that write barrier kind to `kDontEmit`. At compile time everything would be fine but you might run into spurious failures at runtime. Adding the 4th kind would be a guarantee since you can\u0027t skip a write barrier that must happen.",
      "parentUuid": "e35b287c_f62a6cdd",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "572da103_3ec1358d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-13T16:02:35Z",
      "side": 1,
      "message": "I suggest dissociating how the code generator will generate the write barrier, to how the WBE pass deals with its internal state. That makes it easier to reason outside of the WBE pass.",
      "parentUuid": "f69da69b_bebd9789",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cac7715_8d43acf9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-13T16:04:24Z",
      "side": 1,
      "message": "Sure, we can keep it as a WBE-pass check only and have just 3 kinds.",
      "parentUuid": "572da103_3ec1358d",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb09a57b_9d1b5b25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-12-16T14:14:08Z",
      "side": 1,
      "message": "@vmarko@google.com what\u0027s your take on this? In short, we could change the `kFlagMaybeGenerateWriteBarrier` and `kFlagAlwaysGenerateWriteBarrier` flags for \n\n```\nenum class WriteBarrierCodegenKind {\n  kEmitNoNullCheck,\n  kEmitWithNullCheck,\n  kDontEmit\n}\n```\nplus some extra data-structure for the write barrier elimination pass itself.",
      "parentUuid": "0cac7715_8d43acf9",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b530c04_921a2769",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-16T14:21:22Z",
      "side": 1,
      "message": "I\u0027m fine with this and I think 3 states would be enough. Each instruction would start with `kEmitWithNullCheck` and the WBE pass could change that to `kDontEmit` or `kEmitNoNullCheck`.\n\nThe WBE pass could also look at whether the input can be null (or is a null constant) for this, so that the codegen would not have to do that. The only downside would be that `baseline` compiler which does not run WBE would always emit a conditional write barrier, even for constant null input.",
      "parentUuid": "fb09a57b_9d1b5b25",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22e45dfa_a9ff11cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-01-03T18:43:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b530c04_921a2769",
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51192c9b_c0744bec",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 12
      },
      "lineNbr": 561,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-16T14:09:57Z",
      "side": 1,
      "message": "I\u0027d prefer to keep the attribute name aligned with the flag name, namely \"always_generate_write_barrier\".",
      "range": {
        "startLine": 561,
        "startChar": 26,
        "endLine": 561,
        "endChar": 55
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad2b8084_c6ecbbbd",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 12
      },
      "lineNbr": 561,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-01-03T18:43:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51192c9b_c0744bec",
      "range": {
        "startLine": 561,
        "startChar": 26,
        "endLine": 561,
        "endChar": 55
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5301acf7_c8b422d3",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 12
      },
      "lineNbr": 579,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-16T14:09:57Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 579,
        "startChar": 26,
        "endLine": 579,
        "endChar": 55
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bf29011_99a9d116",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 12
      },
      "lineNbr": 579,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-01-03T18:43:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5301acf7_c8b422d3",
      "range": {
        "startLine": 579,
        "startChar": 26,
        "endLine": 579,
        "endChar": 55
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac1c8109_5a739c6a",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 12
      },
      "lineNbr": 6699,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-16T14:09:57Z",
      "side": 1,
      "message": "Unused.",
      "range": {
        "startLine": 6699,
        "startChar": 26,
        "endLine": 6699,
        "endChar": 57
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38154022_c2ebce6e",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 12
      },
      "lineNbr": 6699,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-01-03T18:43:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac1c8109_5a739c6a",
      "range": {
        "startLine": 6699,
        "startChar": 26,
        "endLine": 6699,
        "endChar": 57
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78a5d12e_17cb9671",
        "filename": "compiler/optimizing/write_barrier_elimination.h",
        "patchSetId": 12
      },
      "lineNbr": 43,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-12-16T14:09:57Z",
      "side": 1,
      "message": "I don\u0027t understand what you mean.\n\nThe sentence \"[...] instructions [...] are actually null, [...]\" makes no sense to me. Instructions are never null. Do you mean inputs of instructions?",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 43,
        "endChar": 90
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c62375a4_1367542e",
        "filename": "compiler/optimizing/write_barrier_elimination.h",
        "patchSetId": 12
      },
      "lineNbr": 43,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-01-03T18:43:39Z",
      "side": 1,
      "message": "Removed this TODO since we decided to have unconditional write barriers instead of a merged null check.",
      "parentUuid": "78a5d12e_17cb9671",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 43,
        "endChar": 90
      },
      "revId": "a5a40ab8f9e3005354e607418b614f57bac971c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}