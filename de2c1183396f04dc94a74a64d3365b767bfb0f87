{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4894c421_1f438aa2",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-11-15T16:55:16Z",
      "side": 1,
      "message": "How about adding an abstraction for this, with helpers like `GetReturnType` and `GetParameterType(i)`?",
      "range": {
        "startLine": 453,
        "startChar": 10,
        "endLine": 453,
        "endChar": 89
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d690c3a1_4463c780",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T07:38:16Z",
      "side": 1,
      "message": "The abstraction is there with the static helpers `MethodType::GetPTypes()` and `MethodType::GetRType()`. These static methods were convenient when they were used separately but I have now refactored the code so that they are always used together.\n\nMaybe we could rename `MethodType::GetPTypes()` -\u003e `MethodType::GetAccessor()`,  `*PTypesAccessor` -\u003e `*MethodTypeAccessor` and their `Get(i)` -\u003e `GetPType(i)` and `GetLength()` -\u003e `GetPTypesLength()` and move the `GetRType()` to these accessors. What do you think?",
      "parentUuid": "4894c421_1f438aa2",
      "range": {
        "startLine": 453,
        "startChar": 10,
        "endLine": 453,
        "endChar": 89
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0044c63_236e99cc",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T07:47:44Z",
      "side": 1,
      "message": "(This would mean that `PerformConversions()` would take an unnecessary `Handle\u003c\u003e` when instantiated with `HandleMethodTypeAccessor` but that\u0027s should be optimized away when inlined.)",
      "parentUuid": "d690c3a1_4463c780",
      "range": {
        "startLine": 453,
        "startChar": 10,
        "endLine": 453,
        "endChar": 89
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22704515_0608ca47",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T07:50:06Z",
      "side": 1,
      "message": "I think this is a question of style. Do we prefer separate accessors for \"PTypes\" with `GetLength()` and `Get(i)`, or do we want an accessor for all data with the more verbose `GetPTypesLength()`, `GetPType(i)` and `GetRType()`.",
      "parentUuid": "d0044c63_236e99cc",
      "range": {
        "startLine": 453,
        "startChar": 10,
        "endLine": 453,
        "endChar": 89
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51f1f986_66e59029",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-11-16T09:16:02Z",
      "side": 1,
      "message": "I meant, having something like:\n\n```\nclass WhateverName {\n public:\n   GetPTypes();\n   GetRType();\n   \n private:\n  VariableSizedHandleScope* handles_;\n};\n```\n\nSo that we don\u0027t pass raw VariableSizedHandleScope, and the contract that the return type is the first entry can just be commented in that abstraction?",
      "parentUuid": "22704515_0608ca47",
      "range": {
        "startLine": 453,
        "startChar": 10,
        "endLine": 453,
        "endChar": 89
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80555a04_ac6b3769",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T13:19:31Z",
      "side": 1,
      "message": "Sorry, I missed this comment while working on PS6. I don\u0027t really like PS6, so I\u0027ll reset to PS5 and try to work on the wrapper.",
      "parentUuid": "51f1f986_66e59029",
      "range": {
        "startLine": 453,
        "startChar": 10,
        "endLine": 453,
        "endChar": 89
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3563cd5_4191f3a4",
        "filename": "runtime/class_linker.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T15:58:51Z",
      "side": 1,
      "message": "Please see PS8.",
      "parentUuid": "80555a04_ac6b3769",
      "range": {
        "startLine": 453,
        "startChar": 10,
        "endLine": 453,
        "endChar": 89
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edea6357_96493e61",
        "filename": "runtime/mirror/method_type.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-11-15T16:55:16Z",
      "side": 1,
      "message": "Can this be const\u0026 ?",
      "range": {
        "startLine": 46,
        "startChar": 49,
        "endLine": 46,
        "endChar": 74
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdd113f1_546f2f24",
        "filename": "runtime/mirror/method_type.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T07:38:16Z",
      "side": 1,
      "message": "We need to get handles from the handle scope and those technically allow mutation of the handle scope\u0027s content, so I\u0027d rather keep it non-const. (And keep the `VariableHandleScope::GetHandle()` non-const just like `HandleScope::GetHandle()`.)\n\nWe\u0027re passing pointers to the `MethodType` around (`ObjPtr\u003c\u003e` and `Handle\u003c\u003e` are smart pointers), so it\u0027s convenient to pass the raw method type around the same way.",
      "parentUuid": "edea6357_96493e61",
      "range": {
        "startLine": 46,
        "startChar": 49,
        "endLine": 46,
        "endChar": 74
      },
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "712b5eff_ea6ff7b1",
        "filename": "runtime/var_handles.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-11-15T16:55:16Z",
      "side": 1,
      "message": "nit: add a comment what is the difference with the version above.",
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e396f651_a0fef534",
        "filename": "runtime/var_handles.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T07:38:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "712b5eff_ea6ff7b1",
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6765d46_a68c9999",
        "filename": "runtime/var_handles.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-11-17T14:19:31Z",
      "side": 1,
      "message": "Lost in the last PS8?",
      "parentUuid": "e396f651_a0fef534",
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c916f341_a9349b6e",
        "filename": "runtime/var_handles.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-20T08:13:07Z",
      "side": 1,
      "message": "I find that comment really unnecessary when the overload specifies a `RawMethodType` instead of a `VariableSizedHandleScope`. Having overloads for two different \"method type\" classes is quite natural.",
      "parentUuid": "e6765d46_a68c9999",
      "revId": "de2c1183396f04dc94a74a64d3365b767bfb0f87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}