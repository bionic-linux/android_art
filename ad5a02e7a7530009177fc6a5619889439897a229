{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b63ed67d_f4800635",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2470,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-11-16T16:59:30Z",
      "side": 1,
      "message": "The default includes `kFenceOutput` and `kFenceInput`. I don\u0027t think this is necessary.\n\nHans, should we use `codegen_-\u003eGenerateMemoryBarrier(MemBarrierKind::kAnyAny)` here? Do we need an extra barrier before the store as we have on arm (32-bit)?",
      "range": {
        "startLine": 2470,
        "startChar": 2,
        "endLine": 2470,
        "endChar": 13
      },
      "revId": "ad5a02e7a7530009177fc6a5619889439897a229",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc6fcb45_7cc10c32",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2470,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-11-16T19:54:16Z",
      "side": 1,
      "message": "The other architectures basically use a sequentially consistent load followed by a conditional sequentially consistent store. I think that\u0027s correct.\n\nI do think that to fully meet spec, we can\u0027t avoid having a full fence before the fast-path load. I think we don\u0027t need another fence on the false branch, since the flag is never cleared by another thread, and hence the \"acquire\" behavior of the load is not visible, And I don\u0027t think a fence in the middle would do anything.\n\nSo just adding a Fence at the beginning is probably good enough for now. Once we have Zalasr, we should use load-acquire and store-release, as on ARM64.\n\nAnother alternative would be to uunconditionally do an AMOSWAPaqrl for now. But that probably slows down the potentially important fast path a bit. In tyhe absence of false sharing, probably not that much, since no other thread should be touching this bit in normal operation.\n\nI would just fix kFenceDefault to always exclude IO. I don\u0027t see why ART would ever want to generate a fence that includes those bits. Gcc was generating them, but I think they fixed that, too. Clang never did. The kernel probably needs them occasionally.",
      "parentUuid": "b63ed67d_f4800635",
      "range": {
        "startLine": 2470,
        "startChar": 2,
        "endLine": 2470,
        "endChar": 13
      },
      "revId": "ad5a02e7a7530009177fc6a5619889439897a229",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57eca90d_e83956b7",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2470,
      "author": {
        "id": 1971751
      },
      "writtenOn": "2023-11-20T02:53:49Z",
      "side": 1,
      "message": "Can I understand that currently we can use \"codegen_-\u003eGenerateMemoryBarrier(MemBarrierKind::kAnyAny)\" and then, after the release of Zalasr extension, use the new extension instruction to replace it?",
      "parentUuid": "bc6fcb45_7cc10c32",
      "range": {
        "startLine": 2470,
        "startChar": 2,
        "endLine": 2470,
        "endChar": 13
      },
      "revId": "ad5a02e7a7530009177fc6a5619889439897a229",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "718e0810_279794ec",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2470,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-11-20T04:31:52Z",
      "side": 1,
      "message": "The new instructions would replace Loadw, Storew, and the Fence()s. For now, please just add another Fence() before the Loadw.\n\nAnd somebody should ensure that Fence() generates a fence without the IO bits.\n\nIn general Java volatile loads and stores will often perform suboptimally before we get Zalasr. Including the IO bits here makes that even worse. This is another instance of that.",
      "parentUuid": "57eca90d_e83956b7",
      "range": {
        "startLine": 2470,
        "startChar": 2,
        "endLine": 2470,
        "endChar": 13
      },
      "revId": "ad5a02e7a7530009177fc6a5619889439897a229",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5b118da_90bfb3b3",
        "filename": "compiler/optimizing/intrinsics_riscv64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2470,
      "author": {
        "id": 1971751
      },
      "writtenOn": "2023-11-21T06:25:24Z",
      "side": 1,
      "message": "Updated",
      "parentUuid": "718e0810_279794ec",
      "range": {
        "startLine": 2470,
        "startChar": 2,
        "endLine": 2470,
        "endChar": 13
      },
      "revId": "ad5a02e7a7530009177fc6a5619889439897a229",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}