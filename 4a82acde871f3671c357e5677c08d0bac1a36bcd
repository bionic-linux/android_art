{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "123c4164_b20837ba",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-13T07:12:30Z",
      "side": 1,
      "message": "Add `CFI_REMEMBER_STATE` and `CFI_RESTORE_STATE_AND_DEF_CFA` around this.",
      "range": {
        "startLine": 1043,
        "startChar": 0,
        "endLine": 1048,
        "endChar": 7
      },
      "revId": "4a82acde871f3671c357e5677c08d0bac1a36bcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f32a371_e1ce55b0",
        "filename": "runtime/arch/riscv64/quick_entrypoints_riscv64.S",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1998570
      },
      "writtenOn": "2023-09-13T22:13:55Z",
      "side": 1,
      "message": "Some notes from the meeting. \n(1) We need CFI directives to adjust SP interpretation for the slow path.\n(2) The CFI directives are interpreted textually top-down, and critically, *do not* interact with the dynamic control flow of branches.\n(5) Placing CFI directives in close accordance with dynamic branches will yield a correct interpretation of SP.\n\nSome background too-\n(1) Each PC _requires_ correct SP and RA CFI for correct unwinding.\n(2) Debuggers want CFI for _every_ register, but anything other than SP and RA is best effort on our part.\n(3) The `m check_cfi` tool can look for discrepancies.",
      "parentUuid": "123c4164_b20837ba",
      "range": {
        "startLine": 1043,
        "startChar": 0,
        "endLine": 1048,
        "endChar": 7
      },
      "revId": "4a82acde871f3671c357e5677c08d0bac1a36bcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c78828b1_155ca75a",
        "filename": "runtime/interpreter/mterp/riscv64/main.S",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-13T07:12:30Z",
      "side": 1,
      "message": "This is not C++. Does this actually compile?",
      "range": {
        "startLine": 308,
        "startChar": 6,
        "endLine": 308,
        "endChar": 15
      },
      "revId": "4a82acde871f3671c357e5677c08d0bac1a36bcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aaf4a6e_215d5e02",
        "filename": "runtime/interpreter/mterp/riscv64/main.S",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 1998570
      },
      "writtenOn": "2023-09-13T08:49:14Z",
      "side": 1,
      "message": "Amazingly the toolchain accepts BOTH this and its negation. Perhaps a blind spot in the toolchain. Replaced it.",
      "parentUuid": "c78828b1_155ca75a",
      "range": {
        "startLine": 308,
        "startChar": 6,
        "endLine": 308,
        "endChar": 15
      },
      "revId": "4a82acde871f3671c357e5677c08d0bac1a36bcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}