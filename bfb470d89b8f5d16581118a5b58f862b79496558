{
  "comments": [
    {
      "key": {
        "uuid": "782e1e92_eb0f3137",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "Explain what the HContext is in the commit comments and how it is gonna be used.",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 12
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_f4f030dc",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "style:\n/*\n * docs...\n */\n\nhere, and everywhere else.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 2
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_4b2ac588",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "this imply that nit HContext will traverse the graph for me which is not and should not be the case. It might be just a limitation of my language skills, but I\u0027d rephrase this.",
      "range": {
        "startLine": 10,
        "startChar": 52,
        "endLine": 10,
        "endChar": 79
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_4b908551",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "We should not eagerly allocate stuff. What if we decide to skip blocks?\n\nWe need a lazy solution for this and only when needed.",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_26344267",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "I\u0027m thinking about instantiating this lazily. Maybe this optimization should come in an upcoming CL?",
      "parentUuid": "782e1e92_4b908551",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_b703ca42",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-09T08:54:02Z",
      "side": 1,
      "message": "Let\u0027s try to have it in this CL. Note that blocks may be delete along the way, which leaves you gaps in your storage (i.e. we might have graphs with non contiguos block ids) I can think of worst cases where we waste a lot.",
      "parentUuid": "18f28255_26344267",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_694e9d11",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-09T11:28:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d829ca86_b703ca42",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_cb92355e",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "who is `ni`? i think you want `property`",
      "range": {
        "startLine": 46,
        "startChar": 11,
        "endLine": 46,
        "endChar": 13
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_16f61c89",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "782e1e92_cb92355e",
      "range": {
        "startLine": 46,
        "startChar": 11,
        "endLine": 46,
        "endChar": 13
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_6296b8a0",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 54,
        "startChar": 11,
        "endLine": 54,
        "endChar": 13
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_a5ce0aa0",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8f4ce42_6296b8a0",
      "range": {
        "startLine": 54,
        "startChar": 11,
        "endLine": 54,
        "endChar": 13
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_e659bad1",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "what does res stand for? Maybe use old_value?",
      "range": {
        "startLine": 59,
        "startChar": 39,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_65e2421a",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18f28255_e659bad1",
      "range": {
        "startLine": 59,
        "startChar": 39,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_d60c1445",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "resize will not give you the exact requested size. check the implementation.",
      "range": {
        "startLine": 109,
        "startChar": 6,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_ebea919b",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "I know, it\u0027ll be bigger. Is that an issue?",
      "parentUuid": "1840c241_d60c1445",
      "range": {
        "startLine": 109,
        "startChar": 6,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_0b903d9e",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-09T08:54:02Z",
      "side": 1,
      "message": "it is, cause the logic doesn\u0027t work as you want. Below you only initialize up to `idx+1` so the rest of the position up to the real size are not initialized",
      "parentUuid": "782e1e92_ebea919b",
      "range": {
        "startLine": 109,
        "startChar": 6,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_b903c342",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-09T11:28:01Z",
      "side": 1,
      "message": "Oh right, GrowableArray has some unusual instantiation semantics.",
      "parentUuid": "782e1e92_0b903d9e",
      "range": {
        "startLine": 109,
        "startChar": 6,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_1415fc77",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "see my comment in the ctor of this function about wasting space for this.",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 113,
        "endChar": 7
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_8e6afbdf",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-09T11:28:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d829ca86_1415fc77",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 113,
        "endChar": 7
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_c2c584a0",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "What\u0027s the rationale for storing the current block?\n\nI don\u0027t think it\u0027s ok to hold the state here. I can see a lot of confusion from this and imo is better to pass it as an argument when you set/get properties.",
      "range": {
        "startLine": 118,
        "startChar": 6,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_25155a78",
        "filename": "compiler/optimizing/context.h",
        "patchSetId": 4
      },
      "lineNbr": 118,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "It was about making the interface lighter since I was seeing the HContext in the context of a traversal, working on the current block. That might not be relevant.",
      "parentUuid": "f8f4ce42_c2c584a0",
      "range": {
        "startLine": 118,
        "startChar": 6,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_d63534e3",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 4
      },
      "lineNbr": 347,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "IsStatic()",
      "range": {
        "startLine": 347,
        "startChar": 44,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_a5004a36",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 4
      },
      "lineNbr": 347,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1840c241_d63534e3",
      "range": {
        "startLine": 347,
        "startChar": 44,
        "endLine": 347,
        "endChar": 70
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_345a3851",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "Hmm, is this correct?\n\na.foo() -\u003e a can be null at this point\na.bar() -\u003e a cannot be null at this point\n\nyet after this call the context will think that a cannot be null during the entire block.",
      "range": {
        "startLine": 348,
        "startChar": 4,
        "endLine": 348,
        "endChar": 47
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_0b527de0",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "At the moment we\u0027re inspecting a.foo(), a is marked as can be null. After this call, a is marked as cannot be null, and a.bar() has the correct info.\n\nThe fact is that I have a deeply dynamic vision of it, used during a traversal, while you\u0027re seeing as a static storage for properties.",
      "parentUuid": "d829ca86_345a3851",
      "range": {
        "startLine": 348,
        "startChar": 4,
        "endLine": 348,
        "endChar": 47
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_97e7ae22",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-09T08:54:02Z",
      "side": 1,
      "message": "As we discuss, if you go with the current approach you need to document it much better as it was not clear from the context. \nOne thing to think about: how does this work with the fix point iteration?",
      "parentUuid": "782e1e92_0b527de0",
      "range": {
        "startLine": 348,
        "startChar": 4,
        "endLine": 348,
        "endChar": 47
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1867e20f_f8c4d185",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-09T11:28:01Z",
      "side": 1,
      "message": "During fix point iteration, since a loop is one of its own predecessor, so, by calling StartBlock() over and over again on the same block, it will work as expected.",
      "parentUuid": "d829ca86_97e7ae22",
      "range": {
        "startLine": 348,
        "startChar": 4,
        "endLine": 348,
        "endChar": 47
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_96168c4f",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "Shouldn\u0027t this be true? the default value should be the safe value.",
      "range": {
        "startLine": 30,
        "startChar": 43,
        "endLine": 30,
        "endChar": 48
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1840c241_566f04a8",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "No. The default value is the monoidal 0 wrt Merge. If you do not respect this, merging blocks is not a sound mathematical operation.",
      "parentUuid": "1840c241_96168c4f",
      "range": {
        "startLine": 30,
        "startChar": 43,
        "endLine": 30,
        "endChar": 48
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "782e1e92_ab9ec9ae",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-09T08:54:02Z",
      "side": 1,
      "message": "What I think I\u0027m missing from the big picture is:\n- i would have imagine that Zero is the default value for what we don\u0027t know so it must be conservative. Am I\u0027m wrong....?\n- where is Zero actually used? I don\u0027t see anything. No use \u003d\u003d No Need usually.\n- to complement this: I don\u0027t see a few methods from HContext being used. Why have them?",
      "parentUuid": "1840c241_566f04a8",
      "range": {
        "startLine": 30,
        "startChar": 43,
        "endLine": 30,
        "endChar": 48
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_49bcf957",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-09T11:28:01Z",
      "side": 1,
      "message": "\u003e i would have imagine that Zero is the default value for what we don\u0027t know so it must be conservative. Am I\u0027m wrong....?\n\nYes. Zero is not a convenient default value. It is, as its name indicates, a Zero. It\u0027s called few times in the Context and guarantees that the datastructure and its operations are sound.\n\nSome methods of the HContext are not used because they are not useful with a property beeing a boolean, but will be useful in other cases. MergeProperty() and SetProperty() are, in this case, strictly equivalent. I",
      "parentUuid": "782e1e92_ab9ec9ae",
      "range": {
        "startLine": 30,
        "startChar": 43,
        "endLine": 30,
        "endChar": 48
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_342918c2",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-07-08T14:58:57Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 35,
        "endChar": 6
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_455a9e51",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1068522
      },
      "writtenOn": "2015-07-08T17:07:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d829ca86_342918c2",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 35,
        "endChar": 6
      },
      "revId": "bfb470d89b8f5d16581118a5b58f862b79496558",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}