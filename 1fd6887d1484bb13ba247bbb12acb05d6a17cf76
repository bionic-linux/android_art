{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1c7b0b7a_0ca0c796",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-01-13T11:32:55Z",
      "side": 1,
      "message": "This looks like the main purpose of this CL and probably should be the first line of the commit message.\n\nThe rest is a follow-up cleanup of dead code and inlining of code that was previously used twice but we removed one of the callers. Plus an unrelated minor fix in `ClassLinker::ResolveMethodWithoutInvokeType()`.",
      "range": {
        "startLine": 10,
        "startChar": 2,
        "endLine": 10,
        "endChar": 51
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efff1c0f_83322493",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-13T13:26:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c7b0b7a_0ca0c796",
      "range": {
        "startLine": 10,
        "startChar": 2,
        "endLine": 10,
        "endChar": 51
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46437b4c_a97f4fb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-01-09T10:42:12Z",
      "side": 1,
      "message": "Thanks! I don\u0027t understand this code well enough. I will let vladimir actually +2 this one.",
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83c81409_dca0dd45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-11T15:44:46Z",
      "side": 1,
      "message": "Vladimir, friendly TH ping.",
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8ddd901_f92c3250",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-01-13T11:32:55Z",
      "side": 1,
      "message": "This was a bit out-of-date since the lazy initialization of dex cache arrays. The from-space dex cache can have null arrays while the to-space arrays can have initialized arrays but it\u0027s OK to have a false negative and continue with the slow-path below.\n\nAnd since the CL that introduced the full cache arrays for app startup, the full array can change to null. I don\u0027t think it\u0027s safe to read and use the full array pointer from the from-space dex cache anymore. Releasing these arrays in the GC critical section does not prevent us from later seeing a from-space dex cache without a read barrier.\n\nBut we may want to fix that in a separate CL.\n\n(Also line too long.)",
      "range": {
        "startLine": 316,
        "startChar": 4,
        "endLine": 317,
        "endChar": 101
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f6b050d_7ff8028b",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-13T13:26:44Z",
      "side": 1,
      "message": "Good catch. While I\u0027m at it refactoring and cleaning up, I\u0027m doing the fix in this CL.",
      "parentUuid": "d8ddd901_f92c3250",
      "range": {
        "startLine": 316,
        "startChar": 4,
        "endLine": 317,
        "endChar": 101
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25a82c2f_0436533a",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-01-13T14:10:50Z",
      "side": 1,
      "message": "It\u0027s OK to fix this one here but we need to fix this in other places as well (in a separate CL).",
      "parentUuid": "5f6b050d_7ff8028b",
      "range": {
        "startLine": 316,
        "startChar": 4,
        "endLine": 317,
        "endChar": 101
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aff49e31_ef581639",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 321,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-01-13T11:32:55Z",
      "side": 1,
      "message": "DCHECK(!resolved_method-\u003eIsRutimeMethod());",
      "range": {
        "startLine": 321,
        "startChar": 6,
        "endLine": 321,
        "endChar": 29
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43a6e223_bb8b38ba",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 321,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-13T13:26:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aff49e31_ef581639",
      "range": {
        "startLine": 321,
        "startChar": 6,
        "endLine": 321,
        "endChar": 29
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bfcd6be_0aa8c119",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 327,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-01-13T11:32:55Z",
      "side": 1,
      "message": "Move before the fast-path.",
      "range": {
        "startLine": 327,
        "startChar": 2,
        "endLine": 327,
        "endChar": 71
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64e3ebfc_eb1a0c4a",
        "filename": "runtime/class_linker-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 327,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-13T13:26:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bfcd6be_0aa8c119",
      "range": {
        "startLine": 327,
        "startChar": 2,
        "endLine": 327,
        "endChar": 71
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2cdd225_edf40573",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 9472,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-01-09T10:42:12Z",
      "side": 1,
      "message": "Would this be a change in behaviour? FindResolvedMethod tries to find an accessible interface method here. I don\u0027t understand class resolution well enough to see if finding interface method doesn\u0027t apply here.",
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75e41d9e_0d949b85",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 1
      },
      "lineNbr": 9472,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-09T12:09:48Z",
      "side": 1,
      "message": "Yes, and that was an oversight not to update this code path. Looks like we never hit the issue with callers of `ResolveMethodWithoutInvokeType`, but this changes makes us have consistent behavior now.",
      "parentUuid": "e2cdd225_edf40573",
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "048000e8_1e72a3dd",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-01-13T11:32:55Z",
      "side": 1,
      "message": "The parameter name is misleading, there are throwing paths below that can suspend even with `!can_suspend`. Use some other name such as `search_only_cache`.",
      "range": {
        "startLine": 522,
        "startChar": 33,
        "endLine": 522,
        "endChar": 44
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e353e3bd_5e9225d8",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-13T13:26:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "048000e8_1e72a3dd",
      "range": {
        "startLine": 522,
        "startChar": 33,
        "endLine": 522,
        "endChar": 44
      },
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f24f3d97_42b3605a",
        "filename": "runtime/entrypoints/quick/quick_trampoline_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 2207,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-01-09T10:42:12Z",
      "side": 1,
      "message": "I don\u0027t fully understand this code too, but looks like FindMethodToCall could throw where as FindMethodFast wasn\u0027t throwing and also doing a fewer checks. Does that change anything here?",
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72f4f1ca_2951b78b",
        "filename": "runtime/entrypoints/quick/quick_trampoline_entrypoints.cc",
        "patchSetId": 1
      },
      "lineNbr": 2207,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-01-09T12:09:48Z",
      "side": 1,
      "message": "Yes, `FindMethodToCall` can throw, but that\u0027s OK, as we won\u0027t need to call it again line 2223 (which should throw the same exception).",
      "parentUuid": "f24f3d97_42b3605a",
      "revId": "1fd6887d1484bb13ba247bbb12acb05d6a17cf76",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}