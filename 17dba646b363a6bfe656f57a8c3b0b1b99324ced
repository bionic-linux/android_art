{
  "comments": [
    {
      "key": {
        "uuid": "d818350f_8cad2b7e",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T19:31:04Z",
      "side": 1,
      "message": "ifdef __linux__?",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00d07e40_67d2812b",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:01:00Z",
      "side": 1,
      "message": "sure, I think we should do that",
      "parentUuid": "d818350f_8cad2b7e",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef775751_4825814b",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T19:31:04Z",
      "side": 1,
      "message": "#ifndef, just in case we do start defining the constant in the uapi headers. I use the ifndef approach in all my code whenever I duplicate Linux constant definitions.",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 18
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fff9bfd_5a821ead",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:01:00Z",
      "side": 1,
      "message": "Elliott just merged uapi changes so I\u0027ll just remove them",
      "parentUuid": "ef775751_4825814b",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 18
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ebeef82_3792effd",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 265,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T19:31:04Z",
      "side": 1,
      "message": "map supports heterogeneous lookup. You might want to construct the name locally, on the stack, and do heap allocation only in the case where you actually want to insert into the map.",
      "range": {
        "startLine": 265,
        "startChar": 26,
        "endLine": 265,
        "endChar": 30
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a4ae314_0c5c5d26",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 265,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:01:00Z",
      "side": 1,
      "message": "I didn\u0027t follow. The temporary name used to consult the map is on the stack. The heap allocation happens only when you insert something.\n\nwhy there be heap allocation happening for the \u0027find\u0027 ?",
      "parentUuid": "7ebeef82_3792effd",
      "range": {
        "startLine": 265,
        "startChar": 26,
        "endLine": 265,
        "endChar": 30
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7938164_368e9e10",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 265,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T20:16:27Z",
      "side": 1,
      "message": "std::string stores its payload on the heap.",
      "parentUuid": "0a4ae314_0c5c5d26",
      "range": {
        "startLine": 265,
        "startChar": 26,
        "endLine": 265,
        "endChar": 30
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e77d0958_ee11ff90",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 265,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:58:49Z",
      "side": 1,
      "message": "ah right, but then we run into issues like the name has to be a certain max size etc. I don\u0027t see the benefit or that its a worthwhile tradeoff of preventing the heap allocation",
      "parentUuid": "c7938164_368e9e10",
      "range": {
        "startLine": 265,
        "startChar": 26,
        "endLine": 265,
        "endChar": 30
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90b26164_d31151a1",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 265,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T21:15:02Z",
      "side": 1,
      "message": "The name already _already_ a maximum size: NAME_MAX, which is 255. The kernel won\u0027t report more than that number of characters of the name, so having a name longer than NAME_MAX is pointless. Realistically, are we going to have long names anyway?",
      "parentUuid": "e77d0958_ee11ff90",
      "range": {
        "startLine": 265,
        "startChar": 26,
        "endLine": 265,
        "endChar": 30
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73897966_be5e5848",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T19:31:04Z",
      "side": 1,
      "message": "std::move. There\u0027s no reason to copy the string. (But see above.)",
      "range": {
        "startLine": 268,
        "startChar": 46,
        "endLine": 268,
        "endChar": 65
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "384e286b_fb641e28",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:01:00Z",
      "side": 1,
      "message": "This sentence is not very clear. I couldn\u0027t parse it.",
      "parentUuid": "73897966_be5e5848",
      "range": {
        "startLine": 268,
        "startChar": 46,
        "endLine": 268,
        "endChar": 65
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "750bd937_2a4af9b7",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T20:16:27Z",
      "side": 1,
      "message": "std::string owns some bytes of memory. When you build it in the first place, on line 263, you heap-allocate that memory. Then you potentially allocate more memory on line 264. The code here, as written, makes *another* heap allocation, a copy of debug_friendly_name, for use in constructing the pair. If you std::move the string into std::make_pair, you can reuse the memory allocation you\u0027ve already made.\n\nBut we shouldn\u0027t even bother with the heap allocation in the already-present case. If you instead write char debug_friendly_name[256] and use snprintf (or use your favorite bit of code) to build up the proposed name on the stack, then you can search the map using this stack string (in C++14 and above) without having to construct a temporary std::string, with its heap payload, just to throw it away in the case that the desired string is already in the map.",
      "parentUuid": "384e286b_fb641e28",
      "range": {
        "startLine": 268,
        "startChar": 46,
        "endLine": 268,
        "endChar": 65
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8f3ea5f_fa8f545a",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:58:49Z",
      "side": 1,
      "message": "That\u0027s an awful lot of stack space though. Is it really worth preventing heap allocation by sacrificing stack like that?\n\nI could try the std::move, that\u0027s fine with me.",
      "parentUuid": "750bd937_2a4af9b7",
      "range": {
        "startLine": 268,
        "startChar": 46,
        "endLine": 268,
        "endChar": 65
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99d2314d_af785e99",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T21:15:02Z",
      "side": 1,
      "message": "256 bytes is 32 machine words. That\u0027s not a lot of stack space. Besides, talking to the heap needs global synchronization much of the time. The stack, not at all.",
      "parentUuid": "a8f3ea5f_fa8f545a",
      "range": {
        "startLine": 268,
        "startChar": 46,
        "endLine": 268,
        "endChar": 65
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec940ab2_2fa65fe2",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 272,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T19:31:04Z",
      "side": 1,
      "message": "Again, #ifdef __linux__ ?",
      "range": {
        "startLine": 272,
        "startChar": 4,
        "endLine": 272,
        "endChar": 9
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fb6546f_2bf4a9e9",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 272,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:01:00Z",
      "side": 1,
      "message": "This path will never be called for other OS\u0027s.",
      "parentUuid": "ec940ab2_2fa65fe2",
      "range": {
        "startLine": 272,
        "startChar": 4,
        "endLine": 272,
        "endChar": 9
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8ef0761_2d942984",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 272,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:07:38Z",
      "side": 1,
      "message": "May be we can change this to a DCHECK ? I\u0027ll update the patch",
      "parentUuid": "0fb6546f_2bf4a9e9",
      "range": {
        "startLine": 272,
        "startChar": 4,
        "endLine": 272,
        "endChar": 9
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d73afff_291077cd",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 272,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T20:16:27Z",
      "side": 1,
      "message": "But on other OSes, it won\u0027t even *compile*, since the prctl function won\u0027t even exist.",
      "parentUuid": "0fb6546f_2bf4a9e9",
      "range": {
        "startLine": 272,
        "startChar": 4,
        "endLine": 272,
        "endChar": 9
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34a08d2d_3d0b91bb",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 6
      },
      "lineNbr": 272,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:58:49Z",
      "side": 1,
      "message": "that\u0027s true. Ok I\u0027ll wrap it. Thanks Dan!",
      "parentUuid": "3d73afff_291077cd",
      "range": {
        "startLine": 272,
        "startChar": 4,
        "endLine": 272,
        "endChar": 9
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2b54a42_963b2fde",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-08-22T19:31:04Z",
      "side": 1,
      "message": "Nit: use a more descriptive name. Under a casual reading, it\u0027s not clear whether \"size\" is the size of the map or the size of the name string!",
      "range": {
        "startLine": 118,
        "startChar": 67,
        "endLine": 118,
        "endChar": 71
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e668fb2_fc65a0a1",
        "filename": "libartbase/base/mem_map.h",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2018-08-22T20:01:00Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "b2b54a42_963b2fde",
      "range": {
        "startLine": 118,
        "startChar": 67,
        "endLine": 118,
        "endChar": 71
      },
      "revId": "17dba646b363a6bfe656f57a8c3b0b1b99324ced",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}