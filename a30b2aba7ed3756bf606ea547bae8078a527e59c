{
  "comments": [
    {
      "key": {
        "uuid": "ed56c9ec_34243f66",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "Copyright missing.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 2,
        "endChar": 37
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_b4182f29",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "IMHO those names aren\u0027t very good. The original valgrind ones at least had valgrind in the name, so the intent was very clear. MAKE_MEM_NOACCESS could just as well be a certain mmap protection scheme...\n\nPlease add a prefix",
      "range": {
        "startLine": 12,
        "startChar": 8,
        "endLine": 14,
        "endChar": 66
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f6d849_5736d4a3",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "No, please don\u0027t use untyped macros, this is C++11.\n\nPlease make this a proper constexpr bool (there\u0027s no reason below to use the RUNNING_ON_VALGRIND macro, all usages of these flags should already be protected by RUNNING_ON_MEMORY_TOOL).",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d42d931_f422c922",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-05-29T19:35:37Z",
      "side": 1,
      "message": "Does this mean that these could have independently different values in the future?",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_a528f601",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T19:59:52Z",
      "side": 1,
      "message": "In case of Valgrind, this is a runtime condition. It\u0027s probably not a good idea for it to be a constexpr bool in one #if branch, and something else (like a macro or an inline function) on the other.",
      "parentUuid": "b9f6d849_5736d4a3",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_05d1c27c",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T19:59:52Z",
      "side": 1,
      "message": "Potentially, yes, if when add MemorySanitizer to the mix.",
      "parentUuid": "6d42d931_f422c922",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_370fd768",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T21:25:06Z",
      "side": 1,
      "message": "I don\u0027t see how it\u0027s a runtime option - the way you\u0027re doing it right now, it obviously is not: when you\u0027re running on valgrind, you add redzones.\n\nThis should be constexpr true, and any use of ADDS_REDZONES should be protected by RUNNING_ON_MEMORY_TOOL (or a cached flag) anyways.",
      "parentUuid": "ed56c9ec_a528f601",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_37f5179a",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "ASan is a compile-time choice. Valgrind is not: you can run the same binary with or without Valgrind, and RUNNING_ON_VALGRIND will evaluate either to 1 or 0.\n\nASan and Valgrind are incompatible, so we can make RUNNING_ON_VALGRIND a 0 constant in ASan builds.",
      "parentUuid": "ed56c9ec_370fd768",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_d7b20bc5",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T21:39:08Z",
      "side": 1,
      "message": "But any of the code paths doing the protection are protected by the RUNNING_ON_VALGRIND/MEMORY_TOOL path (if they\u0027re not, it\u0027s a bug). So the redzone flag is totally independent (you shouldn\u0027t even be looking at the flag if you\u0027re not running under valgrind/asan).",
      "parentUuid": "ed56c9ec_37f5179a",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_36f0ce5f",
        "filename": "runtime/base/memory_tool.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:40:51Z",
      "side": 1,
      "message": "This file isn\u0027t named sanitizer.h (even though I think this is a better name than memory_tool). The linter should actually break your build...",
      "range": {
        "startLine": 33,
        "startChar": 28,
        "endLine": 33,
        "endChar": 39
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_f442b700",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "We\u0027re averse to #ifdefs in the code. Please consider a constexpr bool hiding the ifdef away.\n\n(Also, is there a particular reason to only do this for ASAN?)",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 24
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_442058a3",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T20:17:45Z",
      "side": 1,
      "message": "It looks like RosAlloc can be re-created without releasing the memory mapping, and this is needed to clear the redzones. Not sure why Valgrind does not need it.\n\nI see comments in the code about RosAlloc not supporting Valgrind, referencing https://b.corp.google.com/u/0/issues/12944686. Do you know if it\u0027s still the case, and why does the code create ValgrindMallocSpace\u003cRosAllocSpace, ...\u003e anyway?",
      "parentUuid": "ed56c9ec_f442b700",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 24
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_bf53ae3c",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T20:55:41Z",
      "side": 1,
      "message": "Exactly. RosAllocSpace::Clear re-creates RosAlloc in the same mapping, and then the memset at \"Clear the first page since it is not madvised due to the magic number\" trips on the leftover redzones from the previous instance of RosAlloc.",
      "parentUuid": "b91fb853_442058a3",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 24
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_7e5520ca",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T21:25:06Z",
      "side": 1,
      "message": "The comment is out-dated, as you noticed. My bad.",
      "parentUuid": "b91fb853_442058a3",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 24
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_17b81309",
        "filename": "runtime/gc/allocator/rosalloc.cc",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T21:25:06Z",
      "side": 1,
      "message": "But is there a reason to not be consistent and make it undefined when running under any sanitizer?",
      "parentUuid": "0d54fde2_bf53ae3c",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 24
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d470d3e_13d12b00",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 3
      },
      "lineNbr": 2066,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "Guard with ADDRESS_SANITIZER (or the corresponding constexpr flag) ?",
      "range": {
        "startLine": 2066,
        "startChar": 4,
        "endLine": 2066,
        "endChar": 47
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_3f9ede38",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 3
      },
      "lineNbr": 2066,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "This should not be ASan-specific. These bins are simply free space in the heap, from the end of one allocation to the beginning of another. They are guaranteed to contain redzones. Again, not sure why Valgrind does not catch it.",
      "parentUuid": "8d470d3e_13d12b00",
      "range": {
        "startLine": 2066,
        "startChar": 4,
        "endLine": 2066,
        "endChar": 47
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_62e0cd12",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 3
      },
      "lineNbr": 2066,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T21:39:08Z",
      "side": 1,
      "message": "The point Seb is making:\n\nDon\u0027t put the macros in this way. Any such thing should be protected with the flag signaling whether sanitizing is active.\n\n if (running_on_mem_tool_) {\n   MAKE_MEM_UNDEFINED(...);\n }\n\nThat is what allows some of the flags to be clean constexpr, instead of the macro hell. We\u0027re happy to trade the one-branch overhead in a non-hot path for this.",
      "parentUuid": "0d54fde2_3f9ede38",
      "range": {
        "startLine": 2066,
        "startChar": 4,
        "endLine": 2066,
        "endChar": 47
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d470d3e_53b3b3da",
        "filename": "runtime/gc/space/dlmalloc_space.cc",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "Includes are sorted, this should go to line 23",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 41
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_9edebc50",
        "filename": "runtime/gc/space/dlmalloc_space.cc",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d470d3e_53b3b3da",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 41
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9fb8c32_e4464ed1",
        "filename": "runtime/gc/space/memory_tool_malloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "Remove empty line. We used to add such line when including header outisde of the project (\u003cinclude\u003e)",
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_54eb7976",
        "filename": "runtime/gc/space/memory_tool_malloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9fb8c32_e4464ed1",
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d470d3e_73c0af2b",
        "filename": "runtime/gc/space/memory_tool_malloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "Includes are sorted, please move that up.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 29
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_1f82fad8",
        "filename": "runtime/gc/space/memory_tool_malloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d470d3e_73c0af2b",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 29
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d42d931_007b943c",
        "filename": "runtime/gc/space/memory_tool_malloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "Remove empty line (see above)",
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_74f07d60",
        "filename": "runtime/gc/space/memory_tool_malloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d42d931_007b943c",
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d470d3e_b3ea17a3",
        "filename": "runtime/gc/space/rosalloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "That definitely needs to be a \u0027constexpr bool\u0027 flag.",
      "range": {
        "startLine": 37,
        "startChar": 19,
        "endLine": 37,
        "endChar": 44
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_9a8c2d8a",
        "filename": "runtime/gc/space/rosalloc_space-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-05-29T19:35:37Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "8d470d3e_b3ea17a3",
      "range": {
        "startLine": 37,
        "startChar": 19,
        "endLine": 37,
        "endChar": 44
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_76409614",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 460,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "Please don\u0027t add spurious non-related newlines.",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 460,
        "endChar": 0
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_df8872f3",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 460,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d54fde2_76409614",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 460,
        "endChar": 0
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f6d849_771af02d",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 467,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "?\n\nWe don\u0027t like to leave such comments in the code.",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 54
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_ff6536cd",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 467,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9f6d849_771af02d",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 54
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_b63afe91",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 492,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "Is there a problem with unconditionally doing this? I would think Valgrind would not care...",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 492,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_fe1c909d",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 492,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done. It could be a performance issue for Valgrind, but probably not.",
      "parentUuid": "0d54fde2_b63afe91",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 492,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_16d2ead5",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 495,
        "startChar": 0,
        "endLine": 497,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_df6152bb",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d54fde2_16d2ead5",
      "range": {
        "startLine": 495,
        "startChar": 0,
        "endLine": 497,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f6d849_b70f58e4",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 584,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 582,
        "startChar": 0,
        "endLine": 584,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_5f4e424a",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 584,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9f6d849_b70f58e4",
      "range": {
        "startLine": 582,
        "startChar": 0,
        "endLine": 584,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f6d849_973c5c86",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 772,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-29T03:37:41Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 768,
        "startChar": 0,
        "endLine": 772,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_9f40aa15",
        "filename": "runtime/mem_map.cc",
        "patchSetId": 3
      },
      "lineNbr": 772,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9f6d849_973c5c86",
      "range": {
        "startLine": 768,
        "startChar": 0,
        "endLine": 772,
        "endChar": 6
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d470d3e_f3e49fd8",
        "filename": "runtime/mem_map.h",
        "patchSetId": 3
      },
      "lineNbr": 172,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "const size_t",
      "range": {
        "startLine": 172,
        "startChar": 2,
        "endLine": 172,
        "endChar": 8
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_3e14487c",
        "filename": "runtime/mem_map.h",
        "patchSetId": 3
      },
      "lineNbr": 172,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2015-05-29T21:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d470d3e_f3e49fd8",
      "range": {
        "startLine": 172,
        "startChar": 2,
        "endLine": 172,
        "endChar": 8
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9fb8c32_04d13a73",
        "filename": "runtime/runtime.h",
        "patchSetId": 3
      },
      "lineNbr": 532,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "IMO, it should have been named IsRunningOnMemoryTool in the first place. Since you rename it, you can also add the \"Is\" prefix.",
      "range": {
        "startLine": 532,
        "startChar": 7,
        "endLine": 532,
        "endChar": 26
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9fb8c32_e4cd2ed7",
        "filename": "runtime/utils_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-05-29T14:27:41Z",
      "side": 1,
      "message": "Move to the top of includes",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 29
      },
      "revId": "a30b2aba7ed3756bf606ea547bae8078a527e59c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}