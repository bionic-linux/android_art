{
  "comments": [
    {
      "key": {
        "uuid": "e4c6c9d8_0e7aca94",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-03T10:03:10Z",
      "side": 1,
      "message": "Elimination.",
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c051c0_66dbb0f9",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 464,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "The SP is technically not a ref, but I wonder whether we need to disambiguate between \"normal\" pointer and ART reference.",
      "range": {
        "startLine": 464,
        "startChar": 20,
        "endLine": 464,
        "endChar": 37
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "445315fd_507f2cb8",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 464,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-03T10:03:10Z",
      "side": 1,
      "message": "Yes, I had the same thought. Disambiguating seems the right thing to do. Maybe, introduce a TargetPtrReg()? Don\u0027t mind whether this is done here or in a future CL.",
      "parentUuid": "a4c051c0_66dbb0f9",
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485d588_466a06bd",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 494,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 494,
        "startChar": 32,
        "endLine": 494,
        "endChar": 48
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_677f2cb9",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 621,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "r_base is a RefReg, so it seems weird to make this non-wide (\u003d32b).",
      "range": {
        "startLine": 621,
        "startChar": 27,
        "endLine": 621,
        "endChar": 51
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_477cb0c2",
        "filename": "compiler/dex/quick/gen_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 714,
        "startChar": 27,
        "endLine": 714,
        "endChar": 51
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485d588_86640eef",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Use arg0 instead of false, as it may be a ref.",
      "range": {
        "startLine": 156,
        "startChar": 67,
        "endLine": 156,
        "endChar": 72
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485d588_c6c61680",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "We could clean this and similar up by implementing TargetReg(x, true) in the 32b case to build the pair. Opinions?",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 200,
        "endChar": 5
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_875ea853",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Also remove this, please.",
      "range": {
        "startLine": 319,
        "startChar": 10,
        "endLine": 320,
        "endChar": 99
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485d588_e6cb1a85",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 336,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Doesn\u0027t apply anymore, simplify. But put a DCHECK at the top of the else (for the kArm64 || kX86_64), maybe.",
      "range": {
        "startLine": 336,
        "startChar": 10,
        "endLine": 336,
        "endChar": 30
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_e7631c22",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 347,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 347,
        "startChar": 8,
        "endLine": 347,
        "endChar": 28
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_c768a0ff",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 361,
        "startChar": 8,
        "endLine": 361,
        "endChar": 28
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485d588_06d1de33",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 369,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 369,
        "startChar": 10,
        "endLine": 369,
        "endChar": 30
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485d588_26b6e217",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 375,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 375,
        "startChar": 10,
        "endLine": 375,
        "endChar": 30
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c051c0_86fa2c54",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Not necessary, IsSameReg will take care of that. If you do it this way, we should remove the IsSameReg.\n\nBut Bill has concerns for 32b systems and overlap by pairs, that\u0027s why the complicated IsSameReg. I am not sure this applies here, though...",
      "range": {
        "startLine": 399,
        "startChar": 39,
        "endLine": 399,
        "endChar": 53
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a495b1be_7b379fd0",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2014-07-03T09:57:14Z",
      "side": 1,
      "message": "The idea is to eliminate usage of TargetReg with only one parameter.",
      "parentUuid": "a4c051c0_86fa2c54",
      "range": {
        "startLine": 399,
        "startChar": 39,
        "endLine": 399,
        "endChar": 53
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_274ed4a4",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Same.",
      "range": {
        "startLine": 400,
        "startChar": 41,
        "endLine": 400,
        "endChar": 55
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485d588_46b3e626",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 526,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 526,
        "startChar": 17,
        "endLine": 526,
        "endChar": 34
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_6758cc64",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "As above.",
      "range": {
        "startLine": 589,
        "startChar": 20,
        "endLine": 589,
        "endChar": 37
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c051c0_c60424b0",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "OK, gonna stop here. :-)",
      "range": {
        "startLine": 594,
        "startChar": 19,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_4755d02a",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 618,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Similar to SP - this is a pointer not into the heap.",
      "range": {
        "startLine": 618,
        "startChar": 27,
        "endLine": 618,
        "endChar": 43
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c051c0_26ea5885",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 805,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Self is also a full pointer.",
      "range": {
        "startLine": 805,
        "startChar": 23,
        "endLine": 805,
        "endChar": 46
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c051c0_06e75cbd",
        "filename": "compiler/dex/quick/x86/codegen_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 409,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T09:20:22Z",
      "side": 1,
      "message": "Just the private here? :-) Plus indentation is off.\n\nYou copied the code from ARM64, which is a good start. If you have ideas about how to streamline it or and make it share-able so it doesn\u0027t pollute both backends, I\u0027m very open for ideas.",
      "range": {
        "startLine": 407,
        "startChar": 1,
        "endLine": 409,
        "endChar": 10
      },
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c6c9d8_ce6f12d7",
        "filename": "compiler/dex/quick/x86/codegen_x86.h",
        "patchSetId": 1
      },
      "lineNbr": 409,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-03T10:03:10Z",
      "side": 1,
      "message": "I would be careful with making this general. The As32BitReg() and As64BitReg() functions where born in the commit below,\n\n  https://android-review.googlesource.com/#/c/96939/\n\nWhen I created them I wanted them to be shared among the backends, but Bill argued that - in order for them to be shared - there was a need to make them use FindMatchingView(), which I found somewhat heavyweight (see discussion in the CL). The final agreement was to make them local. I later verified that these functions are inlined and produce no more than a couple of A64 instrucions when compiled for Arm64 (in non-debug builds). I would prefer that things stay this way.",
      "parentUuid": "a4c051c0_06e75cbd",
      "revId": "08901f4924b4e14a5d88029d54e50c57b2f8787d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}