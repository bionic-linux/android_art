{
  "comments": [
    {
      "key": {
        "uuid": "6463b9f2_2949cd75",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "I think we should have a version of LoadLocal that just does not care about the type.",
      "range": {
        "startLine": 404,
        "startChar": 24,
        "endLine": 404,
        "endChar": 29
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_c93fd1d0",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "I think you want one input to be a register.",
      "range": {
        "startLine": 429,
        "startChar": 24,
        "endLine": 429,
        "endChar": 32
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_094e097e",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 447,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "Why is that not rhs?",
      "range": {
        "startLine": 447,
        "startChar": 49,
        "endLine": 447,
        "endChar": 58
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "245d4132_e719a292",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 411,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "What is this instruction for? The non SSA-from will just update the local and the SSA form will just get rid of the local, so I don\u0027t see the need for it.",
      "range": {
        "startLine": 411,
        "startChar": 4,
        "endLine": 411,
        "endChar": 14
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_e9197592",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "Why did you want an HExpression? To add a type to HTemplateInstruction\u003e",
      "range": {
        "startLine": 753,
        "startChar": 6,
        "endLine": 753,
        "endChar": 17
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c44b8572_a423a2c6",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 764,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "That\u0027s already in HTemplateInstruction.",
      "range": {
        "startLine": 764,
        "startChar": 15,
        "endLine": 764,
        "endChar": 28
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "245d4132_a723aac6",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "ditto.",
      "range": {
        "startLine": 769,
        "startChar": 34,
        "endLine": 769,
        "endChar": 41
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_694fc57d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 852,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "I gave the boolean value directly to the if instruction to make it a bit more flexible for optimization passes (things like predicate simplifications, or GVN will prefer reasoning on individual instructions). While this change makes the codegen simpler, I think I\u0027d prefer keeping the explicit condition, and optimize codegen to recognize that the condition does not need materialization. Initially something as simple as:\n\nNeedsMaterialization(HInstruction* instruction) {\n  if (instruction-\u003enumber_of_uses \u003d\u003d 1 \u0026\u0026 instruction-\u003euser isa HIf \u0026\u0026 instruction-\u003enext \u003d\u003d instruction-\u003euser) {\n    return false;\n  }\n  return true;\n}",
      "range": {
        "startLine": 852,
        "startChar": 11,
        "endLine": 852,
        "endChar": 14
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}