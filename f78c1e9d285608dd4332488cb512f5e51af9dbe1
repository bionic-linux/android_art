{
  "comments": [
    {
      "key": {
        "uuid": "6463b9f2_2949cd75",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "I think we should have a version of LoadLocal that just does not care about the type.",
      "range": {
        "startLine": 404,
        "startChar": 24,
        "endLine": 404,
        "endChar": 29
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e44ec981_4b219992",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 404,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "6463b9f2_2949cd75",
      "range": {
        "startLine": 404,
        "startChar": 24,
        "endLine": 404,
        "endChar": 29
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_c93fd1d0",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "I think you want one input to be a register.",
      "range": {
        "startLine": 429,
        "startChar": 24,
        "endLine": 429,
        "endChar": 32
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0452fd22_a97ed9ba",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "Yeah, you\u0027re right",
      "parentUuid": "6463b9f2_c93fd1d0",
      "range": {
        "startLine": 429,
        "startChar": 24,
        "endLine": 429,
        "endChar": 32
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_094e097e",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 447,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "Why is that not rhs?",
      "range": {
        "startLine": 447,
        "startChar": 49,
        "endLine": 447,
        "endChar": 58
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e44ec981_6b45752c",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 1
      },
      "lineNbr": 447,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "Indeed",
      "parentUuid": "6463b9f2_094e097e",
      "range": {
        "startLine": 447,
        "startChar": 49,
        "endLine": 447,
        "endChar": 58
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "245d4132_e719a292",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 411,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "What is this instruction for? The non SSA-from will just update the local and the SSA form will just get rid of the local, so I don\u0027t see the need for it.",
      "range": {
        "startLine": 411,
        "startChar": 4,
        "endLine": 411,
        "endChar": 14
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0452fd22_2cde7775",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 411,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "The MOVE_RESULT dex instruction has an implicit input - the result of the last call.  This needs to be put into a local so it needs to be read from somewhere.  On ARM, the result is in R0 so this instruction simply has R0 an input and a register as output.  This register is then used as input to store to a local.  The original code in the builder for MOVE_RESULT assumed the result  of the last call was the last instruction\u0027s output, which is was no necessarily true.\n\nIf we don\u0027t have this instruction we would have keep R0 alive from the point of the last call to the point where the value is used, across all intervening instructions.\n\nThis is all my understanding and is subject to correction as I get more familiar with this code.  In other words, I might be missing something.",
      "parentUuid": "245d4132_e719a292",
      "range": {
        "startLine": 411,
        "startChar": 4,
        "endLine": 411,
        "endChar": 14
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_e9197592",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "Why did you want an HExpression? To add a type to HTemplateInstruction\u003e",
      "range": {
        "startLine": 753,
        "startChar": 6,
        "endLine": 753,
        "endChar": 17
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44587541_cb98e9ee",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "It\u0027s an HInstruction with type.  I saw that there was a pattern of adding a type to various instructions and wanted to consolidate it into a node that is an instruction and provides a type.",
      "parentUuid": "6463b9f2_e9197592",
      "range": {
        "startLine": 753,
        "startChar": 6,
        "endLine": 753,
        "endChar": 17
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c44b8572_a423a2c6",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 764,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "That\u0027s already in HTemplateInstruction.",
      "range": {
        "startLine": 764,
        "startChar": 15,
        "endLine": 764,
        "endChar": 28
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44587541_6b71fdf1",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 764,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "Yeah, should remove it",
      "parentUuid": "c44b8572_a423a2c6",
      "range": {
        "startLine": 764,
        "startChar": 15,
        "endLine": 764,
        "endChar": 28
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "245d4132_a723aac6",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "ditto.",
      "range": {
        "startLine": 769,
        "startChar": 34,
        "endLine": 769,
        "endChar": 41
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e44ec981_abaecd84",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "245d4132_a723aac6",
      "range": {
        "startLine": 769,
        "startChar": 34,
        "endLine": 769,
        "endChar": 41
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6463b9f2_694fc57d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 852,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-06-17T08:11:50Z",
      "side": 1,
      "message": "I gave the boolean value directly to the if instruction to make it a bit more flexible for optimization passes (things like predicate simplifications, or GVN will prefer reasoning on individual instructions). While this change makes the codegen simpler, I think I\u0027d prefer keeping the explicit condition, and optimize codegen to recognize that the condition does not need materialization. Initially something as simple as:\n\nNeedsMaterialization(HInstruction* instruction) {\n  if (instruction-\u003enumber_of_uses \u003d\u003d 1 \u0026\u0026 instruction-\u003euser isa HIf \u0026\u0026 instruction-\u003enext \u003d\u003d instruction-\u003euser) {\n    return false;\n  }\n  return true;\n}",
      "range": {
        "startLine": 852,
        "startChar": 11,
        "endLine": 852,
        "endChar": 14
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e44ec981_6b1fb5f3",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 852,
      "author": {
        "id": 1036486
      },
      "writtenOn": "2014-06-17T16:56:00Z",
      "side": 1,
      "message": "I\u0027ll have to think some more about this.  The existence of the instruction that simply does a comparison and puts the 1 or 0 into a register is at odds with the DEX instruction sequence which has already coded it into the IF_XX.  Admittedly I am not yet familiar with the implementation details of all the optimizations we want to do and you are most likely right but I want to understand.",
      "parentUuid": "6463b9f2_694fc57d",
      "range": {
        "startLine": 852,
        "startChar": 11,
        "endLine": 852,
        "endChar": 14
      },
      "revId": "f78c1e9d285608dd4332488cb512f5e51af9dbe1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}