{
  "comments": [
    {
      "key": {
        "uuid": "7aa25842_088d3bf6",
        "filename": "runtime/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 1386,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-09T15:21:13Z",
      "side": 1,
      "message": "The struct (with sizeof\u003d4bytes) needs to be there as first member like in ThreadStateAndFlags, otherwise it\u0027s undefined behavior to alias the two nested unions.\n\n\nSee also the comments from bit_struct.h :\n    // See C++ 9.5.1 [class.union]:\n    // If a standard-layout union contains several standard-layout structs that share a common\n    // initial sequence ... it is permitted to inspect the common initial sequence of any of\n    // standard-layout struct members.",
      "revId": "93c9be4da6b6a7cb73b357ef1afb789974d8b550",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a4aa64d_e6b08b6a",
        "filename": "runtime/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 1386,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-09T15:51:24Z",
      "side": 1,
      "message": "Sorry, ignore this comment. I thought it was doing something else because of the new unified diff view.\n\n  union StateAndFlags {\n     union TlsStateAndFlags{...}\n     union CachedStateAndFlags{...}\n  }\n\nbut I can see that\u0027s not actually the case :).",
      "parentUuid": "7aa25842_088d3bf6",
      "revId": "93c9be4da6b6a7cb73b357ef1afb789974d8b550",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f091fb2_ad57b3f1",
        "filename": "runtime/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 1412,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-09T15:21:13Z",
      "side": 1,
      "message": "Actually, is the motivation here to simplify it conceptually (by removing volatile/atomic)? Since the code got bigger it\u0027s non-obvious why it\u0027s simpler.",
      "revId": "93c9be4da6b6a7cb73b357ef1afb789974d8b550",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc127f41_09c74c2c",
        "filename": "runtime/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 1412,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-12T17:18:46Z",
      "side": 1,
      "message": "The latest change just has StateAndFlags and makes tls32_.state_and_flags into an AtomicInteger.\n\n[ It\u0027s not quite ready, but it\u0027s uploaded as I find reading the diff in gerrit easier than with local tools. ]",
      "parentUuid": "7f091fb2_ad57b3f1",
      "revId": "93c9be4da6b6a7cb73b357ef1afb789974d8b550",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "805dbeb7_eac1e4d7",
        "filename": "runtime/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 1474,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-03-09T15:55:08Z",
      "side": 1,
      "message": "So this is probably bigger surgery than you\u0027d want to do, but the whole problem here seems like  it should\u0027ve been using std::atomic\u003cStateAndFlags\u003e to begin with ?\n\nThen the atomic/volatile can go away completely, and it only needs one struct.",
      "revId": "93c9be4da6b6a7cb73b357ef1afb789974d8b550",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31550fc1_dbc8cffd",
        "filename": "runtime/thread.h",
        "patchSetId": 3
      },
      "lineNbr": 1474,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-03-12T17:18:46Z",
      "side": 1,
      "message": "std::atomic\u003cStateAndFlags\u003e is also awkward as it\u0027s a compound type so atomic::fetch_{or,xor,and} aren\u0027t available. However, if we make StateAndFlags a helper class for generating 32-bit values and have state_and_flags as an AtomicInteger, the code might be a little easier to read (currently not correct though :-)).",
      "parentUuid": "805dbeb7_eac1e4d7",
      "revId": "93c9be4da6b6a7cb73b357ef1afb789974d8b550",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}