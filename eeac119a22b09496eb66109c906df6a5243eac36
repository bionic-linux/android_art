{
  "comments": [
    {
      "key": {
        "uuid": "18cecae0_c29b67a4",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2018-08-03T08:55:03Z",
      "side": 0,
      "message": "So IIRC, the intent of the API was to avoid the memcpy. I think your refactoring (not in this CL) now makes it that we create the memory, discard it, and then write again?",
      "range": {
        "startLine": 1360,
        "startChar": 11,
        "endLine": 1360,
        "endChar": 25
      },
      "revId": "eeac119a22b09496eb66109c906df6a5243eac36",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "373f44bb_3c9625fb",
        "filename": "compiler/optimizing/optimizing_compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-08-03T10:20:13Z",
      "side": 0,
      "message": "Yeah, the very old code went to great lengths to determine the size first.\nIt was complext and no caller, other than this one, actually used that flexibility.\nSo I refactored it so that it just writes the data internally to growable std::vector.\nThis CL finalizes it by just returning the buffer, instead of keeping it internally.",
      "parentUuid": "18cecae0_c29b67a4",
      "range": {
        "startLine": 1360,
        "startChar": 11,
        "endLine": 1360,
        "endChar": 25
      },
      "revId": "eeac119a22b09496eb66109c906df6a5243eac36",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}