{
  "comments": [
    {
      "key": {
        "uuid": "3de034e0_72b820ef",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 15
      },
      "lineNbr": 100,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-16T16:16:00Z",
      "side": 1,
      "message": "Could we refactor this using art::IntrinsicSlowPath from  compiler/optimizing/intrinsics_utils.h (maybe in a follow-up CL)?",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 27
      },
      "revId": "e9443615e1b1967cbc3e691c3facb4de601d215f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd255844_99ee7bd8",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 15
      },
      "lineNbr": 100,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-02-17T00:57:53Z",
      "side": 1,
      "message": "I\u0027m happy to do this. Are you talking about something like what is done for ARM:\n\nusing IntrinsicSlowPathARM \u003d IntrinsicSlowPath\u003cInvokeDexCallingConventionVisitorARM\u003e;\n\n?\n\nAnd, I would prefer to do it as a separate patch since this patch has been outstanding for so long.\n\nThanks.",
      "parentUuid": "3de034e0_72b820ef",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 27
      },
      "revId": "e9443615e1b1967cbc3e691c3facb4de601d215f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d20402f_9c8429cd",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 15
      },
      "lineNbr": 100,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-17T10:55:50Z",
      "side": 1,
      "message": "\u003e I\u0027m happy to do this. Are you talking about something like what is\n \u003e done for ARM:\n \u003e \n \u003e using IntrinsicSlowPathARM \u003d IntrinsicSlowPath\u003cInvokeDexCallingConventionVisitorARM\u003e;\n \u003e \n \u003e ?\n\nYes, precisely.\n\n \u003e And, I would prefer to do it as a separate patch since this patch\n \u003e has been outstanding for so long.\n\nSure, sounds good to me.",
      "parentUuid": "dd255844_99ee7bd8",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 27
      },
      "revId": "e9443615e1b1967cbc3e691c3facb4de601d215f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "570ce9bf_3573d375",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 15
      },
      "lineNbr": 100,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2016-03-10T07:51:02Z",
      "side": 1,
      "message": "Roland, we have a bit of a problem with class Mips[64]Label derived from class Label.\n\nWe want SlowPathCode::GetEntryLabel() and SlowPathCode::GetExitLabel() to return pointers to instances of MIPS-specific labels. Right now class SlowPathCode simply contains two instances of class Label and returns pointers to them. I\u0027m not sure if we could somehow easily tweak the label instance type at this level (SlowPathCode is a generic class and exposing arch-specific types in it appears problematic and is probably wrong, though the existing hard-coded type Label in it isn\u0027t great either).\n\nWe could make SlowPathCode::GetE*Label() virtual and have the derived class SlowPathCodeMIPS[64] override these and return pointers to its own labels of type Mips[64]Label, much like it\u0027s done now.\nBut this alone doesn\u0027t help with class IntrinsicSlowPath\u003c\u003e, currently deriving from SlowPathCode directly. It still needs to be derived from SlowPathCodeMIPS[64] or it has to replicate the same MIPS-specific label stuff.\n\nWe aren\u0027t planning to redo the MIPS labels and branches mechanism right now (we will revisit it when we get to making improvements in the areas of delay slots, static/direct method calls and method loading in e.g. CodeGeneratorMIPS*::GenerateStaticOrDirectCall()) and so right now we won\u0027t be able to just use the base class Label for MIPS. We still need our Mips[64]Label.\n\nA few solutions that I can think of:\n\n1. \"virtualize\" SlowPathCode::GetE*Label() and extend the template class IntrinsicSlowPath\u003c\u003e to take the type of a SlowPathCode class, so we can plug SlowPathCodeMIPS[64] in more seamlessly.\n\n2. Move prev_branch_id_plus_one_ from Mips[64]Label to the parent class Label and abandon Mips[64]Label.\n\n3. \"virtualize\" SlowPathCode::GetE*Label() and figure out how to create the two labels of the right type at run time.\n\nI\u0027m not sure no. 2 is great, it makes it less generic (although just an extra int32_t won\u0027t break it if unused) and we may need to touch/redo class Label again.\n\nNo. 3 may be a little(?) involving.\n\nI\u0027d probably go with no. 1.\n\nAlso, we have the same issue with ARM64 (rather custom label and slow path classes).\n\nIf we use a bit of pointer casting (between vixl::Label* and Label*), we could apply no. 1 to MIPS[64] and ARM64. With this we\u0027d trade code cleanliness in one place with uncleanliness in another.\n\nIf you have some other thoughts or recommendations w.r.t. how to do this better at this time, please let us know.",
      "parentUuid": "9d20402f_9c8429cd",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 27
      },
      "revId": "e9443615e1b1967cbc3e691c3facb4de601d215f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d20402f_7ca835a2",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 15
      },
      "lineNbr": 860,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-16T16:16:00Z",
      "side": 1,
      "message": "As far as I know, INS is available since MIPS32 R2; shouldn\u0027t you ensure that the instruction set is R2+ here?",
      "range": {
        "startLine": 860,
        "startChar": 7,
        "endLine": 860,
        "endChar": 10
      },
      "revId": "e9443615e1b1967cbc3e691c3facb4de601d215f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd82644f_f81e89a7",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 15
      },
      "lineNbr": 860,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-02-17T00:57:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d20402f_7ca835a2",
      "range": {
        "startLine": 860,
        "startChar": 7,
        "endLine": 860,
        "endChar": 10
      },
      "revId": "e9443615e1b1967cbc3e691c3facb4de601d215f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}