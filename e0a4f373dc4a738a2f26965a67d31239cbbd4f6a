{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0802ffa6_9bdb9e58",
        "filename": "runtime/jni/jni_internal_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 1516,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2021-07-12T08:05:41Z",
      "side": 1,
      "message": "This will almost certainly break apps -- I don\u0027t see any discussion of the app compat impact in the commit message.",
      "range": {
        "startLine": 1516,
        "startChar": 2,
        "endLine": 1516,
        "endChar": 50
      },
      "revId": "e0a4f373dc4a738a2f26965a67d31239cbbd4f6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b5cedb0_f9a082cc",
        "filename": "runtime/jni/jni_internal_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 1516,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-07-12T08:46:50Z",
      "side": 1,
      "message": "The commit e16dad1d6388b0305f13e2171308a77f42e7c682 has opened the Pandora\u0027s box and we now have to choose between broken and broken. Any ideas how to get out of the quagmire?",
      "parentUuid": "0802ffa6_9bdb9e58",
      "range": {
        "startLine": 1516,
        "startChar": 2,
        "endLine": 1516,
        "endChar": 50
      },
      "revId": "e0a4f373dc4a738a2f26965a67d31239cbbd4f6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4bb4891_40f093e0",
        "filename": "runtime/jni/jni_internal_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 1516,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2021-07-12T11:50:59Z",
      "side": 1,
      "message": "The change has been in place for the past 6 years (i.e, not recent). Is there a particular issue it\u0027s causing in the field that you\u0027re seeking to fix ?",
      "parentUuid": "5b5cedb0_f9a082cc",
      "range": {
        "startLine": 1516,
        "startChar": 2,
        "endLine": 1516,
        "endChar": 50
      },
      "revId": "e0a4f373dc4a738a2f26965a67d31239cbbd4f6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5be3ba15_6ff4fd2f",
        "filename": "runtime/jni/jni_internal_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 1516,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-07-12T12:52:13Z",
      "side": 1,
      "message": "Runtime inconsistency:\n\n  Class\u003c?\u003e klass \u003d ...;  // Class with a non-BMP character.\n  Class.forName(klass.getName());  // Fails.\n  jniFindClass(klass.getName());  // native\n     -\u003e env-\u003eFindClass(env-\u003eGetStringUTFChars(name, .));  // Fails.\n\nand then the Proxy test case that I spotted first, where Class::IsInSamePackage() returns false causing some check during Proxy construction to fail; it it did not fail, the virtual methods would be linked incorrectly.\n\nAnd it\u0027s also a clear violation of the JNI spec.",
      "parentUuid": "c4bb4891_40f093e0",
      "range": {
        "startLine": 1516,
        "startChar": 2,
        "endLine": 1516,
        "endChar": 50
      },
      "revId": "e0a4f373dc4a738a2f26965a67d31239cbbd4f6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b788f634_2b02d806",
        "filename": "runtime/jni/jni_internal_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 1516,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-07-22T10:55:27Z",
      "side": 1,
      "message": "I\u0027m going to keep the JNI behavior when I try to reland.",
      "parentUuid": "5be3ba15_6ff4fd2f",
      "range": {
        "startLine": 1516,
        "startChar": 2,
        "endLine": 1516,
        "endChar": 50
      },
      "revId": "e0a4f373dc4a738a2f26965a67d31239cbbd4f6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}