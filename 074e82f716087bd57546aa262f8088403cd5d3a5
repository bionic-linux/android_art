{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "86ed049d_7b260dc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-04T03:34:26Z",
      "side": 1,
      "message": "Ready to review again. Please look at PS1-\u003ePS6",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bbd2096_456423ab",
        "filename": "runtime/cha.cc",
        "patchSetId": 6
      },
      "lineNbr": 240,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "add a `REQUIRES_SHARED` here?",
      "range": {
        "startLine": 240,
        "startChar": 36,
        "endLine": 240,
        "endChar": 37
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2757d6e3_34d86dc0",
        "filename": "runtime/cha.cc",
        "patchSetId": 6
      },
      "lineNbr": 240,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done. AFAICT, that\u0027s only checked within a compilation unit, But that should be good enough here, so getting rid od the dynamic check.",
      "parentUuid": "8bbd2096_456423ab",
      "range": {
        "startLine": 240,
        "startChar": 36,
        "endLine": 240,
        "endChar": 37
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2be540ef_7a7358c1",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 2722,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "`clear \u003d nullptr`;\n\nAnd add a DCHECK that `clear` isn\u0027t null after the block?",
      "range": {
        "startLine": 2722,
        "startChar": 0,
        "endLine": 2722,
        "endChar": 26
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ec5cbab_3e645c0b",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 2722,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "I added a comment instead for now. Maybe we should discuss this as a coding style issue. I believe we use -ftrivial-auto-var-init\u003dzero anyway, so there is no safety difference. I tend to read an explicit initialization as \"I\u0027m using the initial value\", as opposed to \"This is a bogus initialization for security reasons\".\n\nI also tend not to check for non-nullness of pointers that are immediately dereferenced, given that the hardware will do that anyway.\n\nBut I suspect both of these are controversial.",
      "parentUuid": "2be540ef_7a7358c1",
      "range": {
        "startLine": 2722,
        "startChar": 0,
        "endLine": 2722,
        "endChar": 26
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "631e4a55_9eaaff90",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 2722,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-08T10:21:57Z",
      "side": 1,
      "message": "Thanks for bringing that up in the meeting. No strong preference here.",
      "parentUuid": "6ec5cbab_3e645c0b",
      "range": {
        "startLine": 2722,
        "startChar": 0,
        "endLine": 2722,
        "endChar": 26
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af3546f7_4dbdf619",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 2746,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Can this be moved line 2735?",
      "range": {
        "startLine": 2746,
        "startChar": 6,
        "endLine": 2746,
        "endChar": 50
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a226ff46_cb3e9947",
        "filename": "runtime/gc/heap.cc",
        "patchSetId": 6
      },
      "lineNbr": 2746,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "That\u0027s really a question about the synchronization convention for collector_type_ . TBH, I\u0027m not sure. I don\u0027t think this would be a trivial or risk-free change. In spite of gerrit\u0027s diff algorithm going a bit haywire here, I didn\u0027t actually change this code, so I\u0027ll leave it for now.",
      "parentUuid": "af3546f7_4dbdf619",
      "range": {
        "startLine": 2746,
        "startChar": 6,
        "endLine": 2746,
        "endChar": 50
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bfc0c6e_2abfe587",
        "filename": "runtime/native/dalvik_system_VMStack.cc",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "its",
      "range": {
        "startLine": 58,
        "startChar": 55,
        "endLine": 58,
        "endChar": 59
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5db5800c_776cdab5",
        "filename": "runtime/native/dalvik_system_VMStack.cc",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bfc0c6e_2abfe587",
      "range": {
        "startLine": 58,
        "startChar": 55,
        "endLine": 58,
        "endChar": 59
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "536aaba5_c979243e",
        "filename": "runtime/native/dalvik_system_VMStack.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Mention why it\u0027s also ok if it\u0027s missing?",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b7ef342_a637eb6d",
        "filename": "runtime/native/dalvik_system_VMStack.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "I think it actually isn\u0027t. Or are there situations in which we should expect it to remain missing? Currently we cowardly return a null stack, rather than risking deadlock.\n\nClarified that in the code and in the log.",
      "parentUuid": "536aaba5_c979243e",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da4cff19_42946f75",
        "filename": "runtime/native/dalvik_system_VMStack.cc",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-08T10:21:57Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2b7ef342_a637eb6d",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3827cb0a_e0c0787c",
        "filename": "runtime/thread-inl.h",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "for_user_code",
      "range": {
        "startLine": 464,
        "startChar": 61,
        "endLine": 464,
        "endChar": 72
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5773f4ee_b638aea2",
        "filename": "runtime/thread-inl.h",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3827cb0a_e0c0787c",
      "range": {
        "startLine": 464,
        "startChar": 61,
        "endLine": 464,
        "endChar": 72
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc032d47_64b461e7",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1496,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Add a comment why there can only be one suspendall request?",
      "range": {
        "startLine": 1493,
        "startChar": 0,
        "endLine": 1496,
        "endChar": 5
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62fb7dc2_a979fd08",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1496,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "There\u0027s already a comment for the active_suspend_all_barrier field to that effect. Do you think we need another one here?",
      "parentUuid": "bc032d47_64b461e7",
      "range": {
        "startLine": 1493,
        "startChar": 0,
        "endLine": 1496,
        "endChar": 5
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ca80f5_6da50bae",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1496,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-08T10:21:57Z",
      "side": 1,
      "message": "Maybe add a dummy comment like there can only be one suspendall request, see comment on `active_suspend_all_barrier` for more info ?",
      "parentUuid": "62fb7dc2_a979fd08",
      "range": {
        "startLine": 1493,
        "startChar": 0,
        "endLine": 1496,
        "endChar": 5
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f23893f_510712b7",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1647,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Looks like this is unused now?",
      "range": {
        "startLine": 1633,
        "startChar": 0,
        "endLine": 1647,
        "endChar": 0
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "515bb274_c4b199d7",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1647,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Good point. Ir could be reintroduxed, but I think we\u0027re better off without it. Deleted.",
      "parentUuid": "7f23893f_510712b7",
      "range": {
        "startLine": 1633,
        "startChar": 0,
        "endLine": 1647,
        "endChar": 0
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b5017ba_4d59f406",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1694,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": ",",
      "range": {
        "startLine": 1694,
        "startChar": 41,
        "endLine": 1694,
        "endChar": 42
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f314e632_7912e46b",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1694,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b5017ba_4d59f406",
      "range": {
        "startLine": 1694,
        "startChar": 41,
        "endLine": 1694,
        "endChar": 42
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b45ebce0_0d5459c2",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1744,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "I read CHECKs as replaceable with DCHECKs. Could you move this CHECK out and store the result in a local variable that you then CHECK?",
      "range": {
        "startLine": 1744,
        "startChar": 6,
        "endLine": 1744,
        "endChar": 11
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1fbb394_2d548265",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1744,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b45ebce0_0d5459c2",
      "range": {
        "startLine": 1744,
        "startChar": 6,
        "endLine": 1744,
        "endChar": 11
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77b7458b_8e50ec83",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1824,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Interesting that clang isn\u0027t complaining of no return here. Maybe add a LOG(UNREACHABLE) with a comment?",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc6bd73a_b2f97162",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1824,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Since it\u0027s preceded by while (true) without break statments, I just put in a comment.",
      "parentUuid": "77b7458b_8e50ec83",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f87d92e2_34819e99",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1836,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "So is that unexpected? Can you expand the comment?",
      "range": {
        "startLine": 1836,
        "startChar": 52,
        "endLine": 1836,
        "endChar": 97
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14c19b35_ac0c2886",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1836,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "That was clear as mud. Hopefully the new version is better. We set the state to kTerminated before deallocating the thread structure. So if the thread is deallocated, but not overwritten, and we didn\u0027t already detect the problem via HWASAN, this should also fail.",
      "parentUuid": "f87d92e2_34819e99",
      "range": {
        "startLine": 1836,
        "startChar": 52,
        "endLine": 1836,
        "endChar": 97
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7db0d00_ed0b07e8",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1877,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Maybe for better readability, we could have a helper such as `GetStateAndFlagsWhileRunning` or something, which would be implemented with the right memory order kind. You could then add a comment in that helper about that memory order.",
      "range": {
        "startLine": 1877,
        "startChar": 40,
        "endLine": 1877,
        "endChar": 84
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b577f649_79f0ad1c",
        "filename": "runtime/thread.cc",
        "patchSetId": 6
      },
      "lineNbr": 1877,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "The problem is that I don\u0027t think there is an easy rule for when ordering is needed. We either need to be conservative or pass in the memory_order, depending on how the result is used by the caller. Here we\u0027re relying on seeing memory updates from the flip function, when kRunningFlipFunction is clear, so we need acquire. Unfortunately the memory order used to read the flags is very visible to the caller, and often you need multiple variants.\n\nWhen reading a flag, \"acquire\" is probably kind of the canonical memory order, so this reads OK to me. We can almost get away with relaxed here, since thread_list_lock_ is often held, but I don\u0027t think that argument quite works. I added a comment about that to kPendingFlipFunction.",
      "parentUuid": "c7db0d00_ed0b07e8",
      "range": {
        "startLine": 1877,
        "startChar": 40,
        "endLine": 1877,
        "endChar": 84
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "508a779c_26e6bef6",
        "filename": "runtime/thread.h",
        "patchSetId": 6
      },
      "lineNbr": 341,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Given you\u0027re changing this, add a comment why it needs to be this memory order kind?",
      "range": {
        "startLine": 341,
        "startChar": 53,
        "endLine": 341,
        "endChar": 79
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2531c926_921eec33",
        "filename": "runtime/thread.h",
        "patchSetId": 6
      },
      "lineNbr": 341,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "508a779c_26e6bef6",
      "range": {
        "startLine": 341,
        "startChar": 53,
        "endLine": 341,
        "endChar": 79
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "512579c4_d4e39c07",
        "filename": "runtime/thread.h",
        "patchSetId": 6
      },
      "lineNbr": 2207,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "of an",
      "range": {
        "startLine": 2207,
        "startChar": 33,
        "endLine": 2207,
        "endChar": 35
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c873faaa_4b5bc605",
        "filename": "runtime/thread.h",
        "patchSetId": 6
      },
      "lineNbr": 2207,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "512579c4_d4e39c07",
      "range": {
        "startLine": 2207,
        "startChar": 33,
        "endLine": 2207,
        "endChar": 35
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78c10e3b_8a66fbcf",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 315,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "allow_lock_checking",
      "range": {
        "startLine": 315,
        "startChar": 38,
        "endLine": 315,
        "endChar": 55
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0444f050_24225b6f",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 315,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78c10e3b_8a66fbcf",
      "range": {
        "startLine": 315,
        "startChar": 38,
        "endLine": 315,
        "endChar": 55
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05974692_4df087bd",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 561,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "This reads odd, assuming flip logic is not bound to GC logic, can you expand? Also, comment why this is OK that new threads only see to-space references.",
      "range": {
        "startLine": 561,
        "startChar": 0,
        "endLine": 561,
        "endChar": 70
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57330452_2d83b1cc",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 561,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05974692_4df087bd",
      "range": {
        "startLine": 561,
        "startChar": 0,
        "endLine": 561,
        "endChar": 70
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c605cd45_ee9c0749",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 757,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Can you add a comment here or line 702 how `self` can be null?",
      "range": {
        "startLine": 757,
        "startChar": 15,
        "endLine": 757,
        "endChar": 30
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce54469b_a8700804",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 757,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "I added a comment that basically says it can be null. I vaguely recall encountering that, though it may just have been in a test that calls it without registering the thread. I\u0027m not sure there\u0027s a great reason for it. I haven\u0027t investigated.",
      "parentUuid": "c605cd45_ee9c0749",
      "range": {
        "startLine": 757,
        "startChar": 15,
        "endLine": 757,
        "endChar": 30
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb3260fb_94b1964f",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 761,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "extra space",
      "range": {
        "startLine": 761,
        "startChar": 55,
        "endLine": 761,
        "endChar": 57
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5918bda4_58fa0f4d",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 761,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb3260fb_94b1964f",
      "range": {
        "startLine": 761,
        "startChar": 55,
        "endLine": 761,
        "endChar": 57
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae9f4f2d_9231b485",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 766,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "As this can potentially hit, I find it easier to read when in non-CHECK statements, eg:\n\n```\nif (iter_count \u003e\u003d kMaxSuspendRetries)) {\n   LOG(FATAL) \u003c\u003c di;\n}\n```",
      "range": {
        "startLine": 766,
        "startChar": 0,
        "endLine": 766,
        "endChar": 51
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48aefd6f_e573b36a",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 766,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done, in threee places.",
      "parentUuid": "ae9f4f2d_9231b485",
      "range": {
        "startLine": 766,
        "startChar": 0,
        "endLine": 766,
        "endChar": 51
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6cd603c_d3c63551",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "otherwise",
      "range": {
        "startLine": 771,
        "startChar": 73,
        "endLine": 771,
        "endChar": 77
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3c166c3_4da34c38",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6cd603c_d3c63551",
      "range": {
        "startLine": 771,
        "startChar": 73,
        "endLine": 771,
        "endChar": 77
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7954ccb6_40806a9b",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 870,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Add a /* paraneter_name\u003d */.",
      "range": {
        "startLine": 870,
        "startChar": 39,
        "endLine": 870,
        "endChar": 40
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93b6d6fc_c87fc137",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 870,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done, and uncapitalized parameter name.",
      "parentUuid": "7954ccb6_40806a9b",
      "range": {
        "startLine": 870,
        "startChar": 39,
        "endLine": 870,
        "endChar": 40
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1831cd7_db313554",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 947,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "ditto about moving this to an `if`.",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8c48dd0_2ea43fff",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 947,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1831cd7_db313554",
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cb43cdd_71f19124",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 980,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "This is scarily very close to `SuspendThreadByPeer`. Have you looked into merging them?",
      "range": {
        "startLine": 980,
        "startChar": 20,
        "endLine": 980,
        "endChar": 43
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b487f69_c0f81610",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 980,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "I looked before, and it didn\u0027t look easily feasible, I suspect it is now, thanks to the new thread exit notification mechanism. We no longer have to redo the thread lookup in different ways each time through the loop. But the retsructuring is nontrivial, and this CL is getting a bit big, so I\u0027d like to do that separately once this is merged and stable.",
      "parentUuid": "4cb43cdd_71f19124",
      "range": {
        "startLine": 980,
        "startChar": 20,
        "endLine": 980,
        "endChar": 43
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16dc3483_64ffcc9d",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 1024,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "ditto about using an `if`.",
      "range": {
        "startLine": 1024,
        "startChar": 0,
        "endLine": 1024,
        "endChar": 45
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74b16a31_c2a92610",
        "filename": "runtime/thread_list.cc",
        "patchSetId": 6
      },
      "lineNbr": 1024,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16dc3483_64ffcc9d",
      "range": {
        "startLine": 1024,
        "startChar": 0,
        "endLine": 1024,
        "endChar": 45
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f46eaa3_08f79fba",
        "filename": "runtime/thread_list.h",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "This is now reversed (debug has a shorter timeout compared to release). Is that expected? Maybe add a comment?",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 58
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "daec0be2_668f61e7",
        "filename": "runtime/thread_list.h",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Added a comment. In both cases I\u0027m trying to ensure that any close calls with timeouts are more likely to show up during preliminary testing than in production, especially since we mostly test on faster devices. I guess there\u0027s a counter-argument that debug builds are slower. But these timeouts should be large enough that I think it shouldn\u0027t matter. Or at least I\u0027d like to know if that statement is false.\n\nFor this particular one, I suspect nothing matters, since we probably override it everywhere? I think I saw 500 msecs someplace. The old default seemed like a left-over from early testing?",
      "parentUuid": "7f46eaa3_08f79fba",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 58
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a27acdf5_4a814790",
        "filename": "runtime/thread_list.h",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "Ditto, why should debug have a shorter time?",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 71
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa925b17_5abe3bd2",
        "filename": "runtime/thread_list.h",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "a27acdf5_4a814790",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 71
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "096febf3_e8d7fde1",
        "filename": "runtime/thread_list.h",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-03-06T11:07:00Z",
      "side": 1,
      "message": "allow_lock_checking",
      "range": {
        "startLine": 121,
        "startChar": 28,
        "endLine": 121,
        "endChar": 45
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5a3c134_9a73e805",
        "filename": "runtime/thread_list.h",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-03-08T05:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "096febf3_e8d7fde1",
      "range": {
        "startLine": 121,
        "startChar": 28,
        "endLine": 121,
        "endChar": 45
      },
      "revId": "074e82f716087bd57546aa262f8088403cd5d3a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}