{
  "comments": [
    {
      "key": {
        "uuid": "ee652062_e6673677",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-05-30T15:56:38Z",
      "side": 1,
      "message": "I still have a bad feeling about this.\nI would feel a little better if this method was static (with needed data passed by argument).",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21155de6_cf78e5d5",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-05-30T16:41:37Z",
      "side": 1,
      "message": "Quick check of the hunch:\nI think this is regressing C++ interpreter performance by 5%.",
      "parentUuid": "ee652062_e6673677",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a4da87_47937733",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-05-30T16:57:43Z",
      "side": 1,
      "message": "Why would it, though? This code itself should never be executed. So this sounds like Clang \u003d bad?",
      "parentUuid": "21155de6_cf78e5d5",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f68ed3d8_ffad7160",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-05-30T17:03:40Z",
      "side": 1,
      "message": "Args \u003d variables live in registers and clang is happy.\nInstance \u003d variables are access via \u0027this\u0027 pointer so they must be push to stack.\nEven thought the call is never executed, forcing things to live on stack has wider consequences beyond this statement. \n\nI think it is C++\u0027s fault.  It is one of those \"someone might took pointer to your variable in the call and modified it later\".  So C++ semantics requires whole lot of extra re-loading from memory to be sure.\n\nAnyway, regression fixed in last PS, with the addition of the static.",
      "parentUuid": "b9a4da87_47937733",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47202203_c70bf0d2",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-05-30T17:07:12Z",
      "side": 1,
      "message": "I am hoping to gradually refactor the switch interpreter into a state where it is not stressing the compiler so much, and to make it less fragile in cases like this.  I do agree that the regression was non-obvious.",
      "parentUuid": "f68ed3d8_ffad7160",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aece9d75_e2997cc5",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-05-30T17:07:19Z",
      "side": 1,
      "message": "But all the pushing and popping can and should be local to the conditional. I would not blame C++, but Clang.",
      "parentUuid": "f68ed3d8_ffad7160",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8789ebb5_47e0e684",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2019-05-30T17:12:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21155de6_cf78e5d5",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76310e0d_486620aa",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-05-30T17:14:38Z",
      "side": 1,
      "message": "Let\u0027s take inst_data for example... important in all opcodes to have handy in a register.\n\nLet\u0027s say you call arbitrary non-inline C++ method on InstructionHandler (which will have \u0027this\u0027 arg).\n\nLet\u0027s say the C++ method will take pointer of inst_data and store it somewhere else.\n\nThen whenever other opaque C++ method is called, it might have accesses this pointer, and overwritten the inst_data.\n\nWhich means any code accessing after the opaque method must reload it.\n\nThere isn\u0027t all that much the compiler can do really - except try to minimize the reloads.\n\n\nWith the current implementation this is not an issue ... as long as everything is inlined, no reload is ever necessary.  However, as soon as you start introducing NO_INLINE method, it can go downhill very quick if you don\u0027t structure the code caregully.",
      "parentUuid": "aece9d75_e2997cc5",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85748123_787878de",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-05-30T17:20:27Z",
      "side": 1,
      "message": "But that\u0027s wrong, because the compilation unit contains the function and we set visibility\u003dprotected, and besides we do PGO and LTo, so a simple analysis would make it more than clear that it isn\u0027t necessary.\n\nSo to me this is still a Clang issue...",
      "parentUuid": "76310e0d_486620aa",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa3f2adc_b2503a19",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-05-30T17:25:20Z",
      "side": 1,
      "message": "Fair enough, I guess it is doable if you analyse beyond the current method.\nYou certainly have higher trust / expectations of clang than I do :-)",
      "parentUuid": "85748123_787878de",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdf03b5b_0a2f8348",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-05-30T18:07:49Z",
      "side": 1,
      "message": "\"State of the art compiler\" and all... :-D",
      "parentUuid": "aa3f2adc_b2503a19",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18558453_63547928",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-05-30T16:20:12Z",
      "side": 1,
      "message": "Out of curiosity: This call can not be inside the lambda (to avoid the std::vector, etc..)?",
      "range": {
        "startLine": 70,
        "startChar": 8,
        "endLine": 70,
        "endChar": 21
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8378f28a_65af5302",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2019-05-30T17:12:41Z",
      "side": 1,
      "message": "Looking closer at how the VisitMonitors is implemented it should be fine. I was hesitant since DoMonitorExit has suspend points in it.\n\nDone.",
      "parentUuid": "18558453_63547928",
      "range": {
        "startLine": 70,
        "startChar": 8,
        "endLine": 70,
        "endChar": 21
      },
      "revId": "e1f79b1534c6c7b697d653fe0a5435fe4260d03c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}