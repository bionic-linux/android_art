{
  "comments": [
    {
      "key": {
        "uuid": "ec8868e8_31d1e687",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-07-12T18:08:26Z",
      "side": 1,
      "message": "Does this CL address that bug? It\u0027s not clear to me how this change would affect CC but not CMS.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 13
      },
      "revId": "9ec2ce6bc941208e1b4dee57343e76291e2ac5cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c69ad03a_4a92e9eb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2019-07-12T20:08:25Z",
      "side": 1,
      "message": "CMS doesn\u0027t have the read barrier wherein we set the mark-bit, thereby dirtying the page. Something else could also be causing this. I\u0027ll measure the numbers to confirm.",
      "parentUuid": "ec8868e8_31d1e687",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 13
      },
      "revId": "9ec2ce6bc941208e1b4dee57343e76291e2ac5cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1554be5_d96c35be",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 593,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-07-12T18:08:26Z",
      "side": 1,
      "message": "I think this should be an `ObjPtr\u003cmirror::Object\u003e`.",
      "range": {
        "startLine": 593,
        "startChar": 6,
        "endLine": 593,
        "endChar": 21
      },
      "revId": "9ec2ce6bc941208e1b4dee57343e76291e2ac5cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c52f80f_b6db8369",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 593,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2019-07-12T20:08:25Z",
      "side": 1,
      "message": "I can change that in the next patch. But why is that needed?",
      "parentUuid": "e1554be5_d96c35be",
      "range": {
        "startLine": 593,
        "startChar": 6,
        "endLine": 593,
        "endChar": 21
      },
      "revId": "9ec2ce6bc941208e1b4dee57343e76291e2ac5cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e6fc8ee_293057cd",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 593,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-07-17T14:22:10Z",
      "side": 1,
      "message": "`ObjPtr\u003c\u003e` is a debugging feature implementing \"object poisoning\", which checks we are not manipulating stale mirror::Object* pointers. It was introduced by Mathieu, and its deployment was further extended in the ART code base by Vladimir.\n\nIn the past months we\u0027ve tried to minimize the use of raw mirror::Object* in the code base, and instead either use:\n\n- `ObjPtr\u003cmirror::Object\u003e`, when the object is not expected to move between the moment its reference is captured in an `ObjPtr\u003cmirror::Object\u003e` object and all of its uses (ObjPtr helps catch stale references); or\n- `Handle\u003cmirror::Object\u003e`, if the object may move (the handle ensures the object will be visited by the GC).",
      "parentUuid": "0c52f80f_b6db8369",
      "range": {
        "startLine": 593,
        "startChar": 6,
        "endLine": 593,
        "endChar": 21
      },
      "revId": "9ec2ce6bc941208e1b4dee57343e76291e2ac5cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "292d7e64_7c61bfcd",
        "filename": "runtime/gc/space/large_object_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 593,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-07-17T14:30:06Z",
      "side": 1,
      "message": "I have been reluctant to do that in GC itself. And, as you can see in the stalled https://android-review.googlesource.com/937263 , I am concerned about the heap verification. If we see heap corruption in debug build, the DCHECK_ALIGNED(ref, kObjectAlignment) in ObjPtr\u003cMirrorType\u003e::Encode() can hide other useful debugging output.",
      "parentUuid": "5e6fc8ee_293057cd",
      "range": {
        "startLine": 593,
        "startChar": 6,
        "endLine": 593,
        "endChar": 21
      },
      "revId": "9ec2ce6bc941208e1b4dee57343e76291e2ac5cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}