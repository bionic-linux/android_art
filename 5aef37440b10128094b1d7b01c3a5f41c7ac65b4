{
  "comments": [
    {
      "key": {
        "uuid": "5f17698b_6be015df",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-12-01T18:21:16Z",
      "side": 1,
      "message": "Since this can\u0027t be expressed with the existing flags, use DF_FORMAT_EXTENDED and implement in MIRGraph::HandleExtended() and MIRGraph::DataFlowSSAFormatExtended().",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfaea591_7bb9db6d",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-12-01T19:19:00Z",
      "side": 1,
      "message": "Agreed with Vmarko. Also, please add this to the extended disassembler.\n\nVmarko, what do you think about also adding type information to the operands instead of opcode? I am interested in that approach because I find it cleaner, and will also allow possibility of adding float and double if we ever decide to deviate from current specification on FP value safety. (though for now, Ian did mention that we need to retain strict safety so we match interpreter always).",
      "parentUuid": "5f17698b_6be015df",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8a0930_70e58eed",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-12-01T19:27:16Z",
      "side": 1,
      "message": "MIR is very close to the dalvik instruction and as such embedding the type in the opcode seems cleaner to me. Otherwise we\u0027re going to mix two different approaches which can lead to confusion.",
      "parentUuid": "bfaea591_7bb9db6d",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fb3a1f9_e6f2b078",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1055173
      },
      "writtenOn": "2014-12-04T03:01:45Z",
      "side": 1,
      "message": "Hi Vmarko, since this is SSA based optimization, it depends on preceding multiply op\u0027s SSA. I find that it is not easy to handle it in the methods you pointed out. Any ideas?",
      "parentUuid": "5f17698b_6be015df",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf16a5da_f831b1e2",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-12-04T06:42:27Z",
      "side": 1,
      "message": "Ningsheng, this comment is not about necessarily maintaining the ssa (because I think you already have logic to do that), but to allow regeneration in case we need it. One way to test it is to mark the pass as having \"dirtied\" the CFG and it will run the post-opts (just for testing because preferred approach is still to maintain in pass to prevent useless work). Therefore, you do not worry about the previous multiply\u0027s ssa. As long as you express the new semantics via the methods Vmarko recommended, you should be fine. Just make sure you remove the multiply and replace the add with the multiply-add. Then if ssa needs regenerated, as long as you express the semantics you already captured via the definition, then it will just work automatically. Vmarko will likely reply if he has anything else to add (or if he disagrees with me :)).",
      "parentUuid": "9fb3a1f9_e6f2b078",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f1ba106_d7035c00",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1055173
      },
      "writtenOn": "2014-12-04T07:49:44Z",
      "side": 1,
      "message": "Razvan, thanks for your clarification and the way to test. I was worrying that regenerating SSA based on original use/def v regs would be a problem. After rethinking it, I think it is OK, as I have excluded the cases which have potential issue. I will make another patchset.:-)",
      "parentUuid": "bf16a5da_f831b1e2",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f30ad7e_56d0b4d6",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1055173
      },
      "writtenOn": "2014-12-04T11:44:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f17698b_6be015df",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffcbbd63_629a16d2",
        "filename": "compiler/dex/mir_graph.h",
        "patchSetId": 1
      },
      "lineNbr": 1276,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-12-01T18:21:16Z",
      "side": 1,
      "message": "Bad indentation.",
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f2ab514_f46c58fc",
        "filename": "compiler/dex/mir_graph.h",
        "patchSetId": 1
      },
      "lineNbr": 1276,
      "author": {
        "id": 1055173
      },
      "writtenOn": "2014-12-04T11:44:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffcbbd63_629a16d2",
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}