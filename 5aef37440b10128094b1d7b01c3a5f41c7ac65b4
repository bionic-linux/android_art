{
  "comments": [
    {
      "key": {
        "uuid": "5f17698b_6be015df",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-12-01T18:21:16Z",
      "side": 1,
      "message": "Since this can\u0027t be expressed with the existing flags, use DF_FORMAT_EXTENDED and implement in MIRGraph::HandleExtended() and MIRGraph::DataFlowSSAFormatExtended().",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfaea591_7bb9db6d",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-12-01T19:19:00Z",
      "side": 1,
      "message": "Agreed with Vmarko. Also, please add this to the extended disassembler.\n\nVmarko, what do you think about also adding type information to the operands instead of opcode? I am interested in that approach because I find it cleaner, and will also allow possibility of adding float and double if we ever decide to deviate from current specification on FP value safety. (though for now, Ian did mention that we need to retain strict safety so we match interpreter always).",
      "parentUuid": "5f17698b_6be015df",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8a0930_70e58eed",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-12-01T19:27:16Z",
      "side": 1,
      "message": "MIR is very close to the dalvik instruction and as such embedding the type in the opcode seems cleaner to me. Otherwise we\u0027re going to mix two different approaches which can lead to confusion.",
      "parentUuid": "bfaea591_7bb9db6d",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fb3a1f9_e6f2b078",
        "filename": "compiler/dex/mir_dataflow.cc",
        "patchSetId": 1
      },
      "lineNbr": 902,
      "author": {
        "id": 1055173
      },
      "writtenOn": "2014-12-04T03:01:45Z",
      "side": 1,
      "message": "Hi Vmarko, since this is SSA based optimization, it depends on preceding multiply op\u0027s SSA. I find that it is not easy to handle it in the methods you pointed out. Any ideas?",
      "parentUuid": "5f17698b_6be015df",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 3
      },
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffcbbd63_629a16d2",
        "filename": "compiler/dex/mir_graph.h",
        "patchSetId": 1
      },
      "lineNbr": 1276,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-12-01T18:21:16Z",
      "side": 1,
      "message": "Bad indentation.",
      "revId": "5aef37440b10128094b1d7b01c3a5f41c7ac65b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}