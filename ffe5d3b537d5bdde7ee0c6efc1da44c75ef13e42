{
  "comments": [
    {
      "key": {
        "uuid": "1e3edc4d_0ba3c72b",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 1493,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "Why do we need this? Can we just make it default to this?\n\n(I imagine this looks very scary to most people and it seems unnecessarily complicated to specify these extra 2 parameters everywhere)",
      "range": {
        "startLine": 1493,
        "startChar": 23,
        "endLine": 1493,
        "endChar": 93
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75c7a622_9432145b",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 1493,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-10T18:06:45Z",
      "side": 1,
      "message": "I want the hook to be private and as such the \u0026HUseListNode\u003cT\u003e::hook is inaccessible outside the HUseListNode\u003cT\u003e. That seems to include the context of the default parameter.\n\nThe other unfortunate result is that the hook needs to be above rather than below with the other data members.",
      "parentUuid": "1e3edc4d_0ba3c72b",
      "range": {
        "startLine": 1493,
        "startChar": 23,
        "endLine": 1493,
        "endChar": 93
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a164f134_4a515435",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 1493,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:29:10Z",
      "side": 1,
      "message": "I don\u0027t really get it.\n\nWhy does it even need to be a field, what if it just used CRTP\n\n   class HUseListNode : public IntrusiveForwardListHook\u003cHUseListNode\u003e {...}\n\nThen we don\u0027t need any of these hooks,usings,etc in the HUseListNode?",
      "parentUuid": "75c7a622_9432145b",
      "range": {
        "startLine": 1493,
        "startChar": 23,
        "endLine": 1493,
        "endChar": 93
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db400697_49f29629",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 1493,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-11T09:42:20Z",
      "side": 1,
      "message": "Yes, I though about that option. It still says \"public\" (base class instead of member).",
      "parentUuid": "a164f134_4a515435",
      "range": {
        "startLine": 1493,
        "startChar": 23,
        "endLine": 1493,
        "endChar": 93
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15e2886a_f1a1b35b",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "(nit nit nit . Sorry!)\n\nI guess this auto is ok because it\u0027s clearly used on L330, 331 only.\n\nThe scope of it is a bit long for my liking (326-350) though. This whole function is way too long.\n\nIs there any reason not to refactor 332-350 to a separate helper function to shrink this down?",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c997175_f9152562",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-10T18:06:45Z",
      "side": 1,
      "message": "Would it help to move the assignment to \"use_it\" before the loop?",
      "parentUuid": "15e2886a_f1a1b35b",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96f5bf22_1c17d6c7",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T18:29:10Z",
      "side": 1,
      "message": "Probably not worth fixing, the original code is just confusing because the function is too long. auto doesn\u0027t really makes things worse.\n\n------------\n\nI don\u0027t know, if people aren\u0027t scared of lambdas I think this kind of approach is the optimal one in terms of minimizing lifetimes:\n\n   Container\u003cK,V\u003e::iterator use_it \u003d ([\u0026]() {\n      auto matching_use_range \u003d ...();\n      DCHECK(...)\n      for (const T\u0026 t : matching_use_range) {\n         process_beginning_range(t);\n      }\n\n      return matching_use_range.end();\n   })();\n\nor even the lambda-less:\n\n   T var;\n   {\n     .....\n     var \u003d some_result();\n   }\n\n(which unfortunately needs an extra move and is thus slower than the lambda variant)",
      "parentUuid": "1c997175_f9152562",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55e3aaeb_d3018b80",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 327,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "What is this, can\u0027t find it on cs/ ?",
      "range": {
        "startLine": 327,
        "startChar": 10,
        "endLine": 327,
        "endChar": 30
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6518b559_13dd30c7",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 327,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "nit: Please leave comment for why it\u0027s getEnd + 1",
      "range": {
        "startLine": 327,
        "startChar": 67,
        "endLine": 327,
        "endChar": 87
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41cbee81_29e48b67",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 327,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-11T09:42:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6518b559_13dd30c7",
      "range": {
        "startLine": 327,
        "startChar": 67,
        "endLine": 327,
        "endChar": 87
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00a0613b_d6a487d2",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 327,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-11T09:42:20Z",
      "side": 1,
      "message": "That\u0027s newly added in this CL in ssa_liveness_analysis.h . Feel free to suggest a better place for it. It\u0027s used here and in the register_allocator_graph_color.cc .",
      "parentUuid": "55e3aaeb_d3018b80",
      "range": {
        "startLine": 327,
        "startChar": 10,
        "endLine": 327,
        "endChar": 30
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2104c0f2_5afc3741",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 330,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "Nice.",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f90fffbc_989fccf0",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "nit: same as 326-327",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a5e1ec3_f9728838",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-11T09:42:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f90fffbc_989fccf0",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9db20cb_e5461d19",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "nit: Include a comment for why the +1 ?",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38867263_d927de87",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-11T09:42:20Z",
      "side": 1,
      "message": "Done (though I\u0027m just documenting what\u0027s going on here, unaware if I correctly captured the intent)",
      "parentUuid": "e9db20cb_e5461d19",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec53abe6_e2892d55",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 3
      },
      "lineNbr": 989,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "nit: comment for +1 ?",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8950e1d6_62cbb7ec",
        "filename": "compiler/optimizing/register_allocator_graph_color.cc",
        "patchSetId": 3
      },
      "lineNbr": 989,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-05-11T09:42:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec53abe6_e2892d55",
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84b84f0b_943ed479",
        "filename": "compiler/optimizing/ssa_liveness_analysis.h",
        "patchSetId": 3
      },
      "lineNbr": 228,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-10T17:32:02Z",
      "side": 1,
      "message": "(general thoughts. no action needed)\n\nI can see how IterationRange\u003cIterator\u003e makes it for a very very long type name at the use site\n\n  IterationRange\u003cSomeMap\u003cK,V\u003e::iterator\u003e\n\nIt would almost be preferrable if it just specified the container type\n\n  IterationRange\u003cSomeMap\u003cK,V\u003e\u003e and it just knew to look at ::iterator, ::const_iterator, etc automatically.\n\nYet another thought is just to erase away the original type, I think with devirtualizing it could be same performance right?\n\n  IterationRange\u003cstd::pair\u003cK,V\u003e\u003e\n\nOr maybe to have specific types of ranges if we don\u0027t trust devirtualization..\n\n  ArrayRange\u003cK\u003e (this is just ArrayRef today)\n  MapRange\u003cK,V\u003e\n  IntrusiveForwardListRange\u003cK\u003e\n......\n\nI really wish C++ let had partial autos\n\n  auto\u003cK,V\u003e range \u003d FindMatchingUseRange(...)\n\nwould be the easiest.",
      "range": {
        "startLine": 228,
        "startChar": 7,
        "endLine": 228,
        "endChar": 21
      },
      "revId": "ffe5d3b537d5bdde7ee0c6efc1da44c75ef13e42",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}