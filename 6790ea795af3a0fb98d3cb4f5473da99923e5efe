{
  "comments": [
    {
      "key": {
        "uuid": "c4bd65b4_29207ca0",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:42:35Z",
      "side": 1,
      "message": "Probably ok to always do this right? We don\u0027t really care about an additional variable when DEBUG is true.",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e07f13f6_608eb740",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-21T15:51:46Z",
      "side": 1,
      "message": "If it\u0027s not a constexpr, I can\u0027t do static_assert on it. It seemed the most reasonable to group it close together.",
      "parentUuid": "c4bd65b4_29207ca0",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f05c74cb_f9ea6c7e",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:54:56Z",
      "side": 1,
      "message": "I think you can just use sizeof(flag) \u003d\u003d sizeof(bool) for the static_assert as I suggested in another place. That will work regardless of if its constexpr.",
      "parentUuid": "e07f13f6_608eb740",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a45c2d6_88f990f2",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:42:35Z",
      "side": 1,
      "message": "Not sure you need this, if you make gSlowEnabled static then it will automatically strip the variable if its unused.",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3de8656_6f9463d7",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-21T15:51:46Z",
      "side": 1,
      "message": "vmarko preferred to not generate the code to then be stripped.",
      "parentUuid": "9a45c2d6_88f990f2",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a019aa77_6546225f",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:54:56Z",
      "side": 1,
      "message": "Vmarko, why? At first glance, it seems it would be cleaner than #Ifndef which we should probably keep to a minimum ?",
      "parentUuid": "e3de8656_6f9463d7",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f275542b_2bbff660",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:42:35Z",
      "side": 1,
      "message": "Can it be made static?",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d29d41d0_dff0e0ab",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-21T15:51:46Z",
      "side": 1,
      "message": "Yes, will do.",
      "parentUuid": "f275542b_2bbff660",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16de0ea9_39558534",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-21T08:59:31Z",
      "side": 1,
      "message": "Is the C++ standard still silent on whether the initialization of statics can be multi-threaded? The GetFlagPtrs().push_back(flag_ptr) would be racy.",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 10
      },
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c973782_171fe035",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:42:35Z",
      "side": 1,
      "message": "Static variable initialization [outside of templates] across multiple translation units is indeterminately sequenced.\n\nIn other words, one is definitely sequenced-before the other but it is unknown which apriori.\n\nhttp://en.cppreference.com/w/cpp/language/initialization \u003e See \"Ordered Dynamic Initialization\"\n\n----\nAs a sidenote the local static variable (in a function) initialization is guaranteed to be thread-safe but that\u0027s not what matters because the static variable on L54 will be triggered by the global initialization of the debug variables.",
      "parentUuid": "16de0ea9_39558534",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 10
      },
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddf30eb9_95893dff",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:42:35Z",
      "side": 1,
      "message": "I think you can just use\n\n  if (kIsDebugBuild) { ... } )",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab32d036_fb62a66b",
        "filename": "runtime/base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-21T15:51:46Z",
      "side": 1,
      "message": "Only if I \"emit\" the definitions above, which vmarko didn\u0027t like.",
      "parentUuid": "ddf30eb9_95893dff",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ece1c094_f8e4b27b",
        "filename": "runtime/base/logging.h",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:42:35Z",
      "side": 1,
      "message": "nit: missing semicolon",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e726812_26da4fa6",
        "filename": "runtime/base/logging.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T01:08:12Z",
      "side": 1,
      "message": "Should we have something here for NDEBUG case? Maybe like static_assert or something?\n\n  static_assert(sizeof(C::x) \u003d\u003d sizeof(bool), \"invalid debug flag\");\n\nJust to help catch build errors (when building NDEBUG) faster? \n\nI don\u0027t know, might not be worth it. Just throwing out an idea.",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38023f74_df3b674d",
        "filename": "runtime/base/logging.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-06-21T08:59:31Z",
      "side": 1,
      "message": "C::x will not be declared in that case.",
      "parentUuid": "8e726812_26da4fa6",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2544897_2c8809de",
        "filename": "runtime/base/logging.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T15:42:35Z",
      "side": 1,
      "message": "What do you mean? Isn\u0027t it declared on 87?\n\nI thought the only difference is in NDEBUG it\u0027s static constexpr(false) , in DEBUG it\u0027s a non-const static ?",
      "parentUuid": "38023f74_df3b674d",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31448c42_66e66d51",
        "filename": "runtime/base/logging.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-21T15:51:46Z",
      "side": 1,
      "message": "Do you mean add it to the macro so it\u0027s emitted at the flag definition site?",
      "parentUuid": "c2544897_2c8809de",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c8d98d6_beae7377",
        "filename": "runtime/base/logging.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-06-21T16:13:52Z",
      "side": 1,
      "message": "I\u0027m hesitant to put this into the DECLARE, because that would increase compile-time for every single compilation unit.\n\nCan I always put it into the DEFINE. If the flag is private, are you still allowed to do sizeof?",
      "parentUuid": "31448c42_66e66d51",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc321654_039c21f4",
        "filename": "runtime/base/logging.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-06-21T17:11:44Z",
      "side": 1,
      "message": "Yes, I was talking about DEFINE in particular. \n\nBasically make sure DEFINE(C,x) doesn\u0027t have a typo -- otherwise you might not catch the error until later when building DEBUG version.",
      "parentUuid": "9c8d98d6_beae7377",
      "revId": "6790ea795af3a0fb98d3cb4f5473da99923e5efe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}