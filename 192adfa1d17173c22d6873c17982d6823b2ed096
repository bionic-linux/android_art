{
  "comments": [
    {
      "key": {
        "uuid": "fa30acc2_7b704626",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-06-22T08:26:22Z",
      "side": 1,
      "message": "Note that nterp uses the tls cache for classes and strings as well - which probably affect the numbers below?\n\nI was also thinking whether having different cache kinds would be beneficial: one for the largest number of opcode (invokes?) and one for the rest. WDYT?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 5
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6a036e4_f6b74c15",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-06-22T08:26:22Z",
      "side": 1,
      "message": "In other words, 50% of field/method instructions are within the current class?",
      "range": {
        "startLine": 19,
        "startChar": 47,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1e3f656_fcce79f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-22T09:47:04Z",
      "side": 1,
      "message": "Not necessarily. These numbers are based on actual usage of those bytecodes.",
      "parentUuid": "d6a036e4_f6b74c15",
      "range": {
        "startLine": 19,
        "startChar": 47,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4c85e77_e79bac05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-06-22T08:26:22Z",
      "side": 1,
      "message": "Even though those look low, is the number of eviction already low too?",
      "range": {
        "startLine": 32,
        "startChar": 53,
        "endLine": 33,
        "endChar": 38
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c69405a_836212ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-22T15:47:34Z",
      "side": 1,
      "message": "The hits/misses ratio is around 7x and 2x for zygote and system server, respectively. The difference is not really surprising when you consider that the system server is doing a lot of initialization and likely going through a lot of code just once.",
      "parentUuid": "f4c85e77_e79bac05",
      "range": {
        "startLine": 32,
        "startChar": 53,
        "endLine": 33,
        "endChar": 38
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "191e677a_2b352657",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-06-23T08:57:14Z",
      "side": 1,
      "message": "What is the hit/miss ratio post your change (assuming the 7x and 2x are pre your change)?",
      "parentUuid": "4c69405a_836212ea",
      "range": {
        "startLine": 32,
        "startChar": 53,
        "endLine": 33,
        "endChar": 38
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5e8b9d3_909a3e41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2020-06-23T11:11:30Z",
      "side": 1,
      "message": "Note that reasonably high miss ratio is somewhat intended, since the shared dex-cache is just a couple instructions away.\n\nConflicts in the dex-cache are an issue though.  I have local WIP CL to make the dex-cache dynamically sized and thus avoids repeated resolving.",
      "parentUuid": "191e677a_2b352657",
      "range": {
        "startLine": 32,
        "startChar": 53,
        "endLine": 33,
        "endChar": 38
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af840d15_a5671f2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-23T11:19:11Z",
      "side": 1,
      "message": "This references \"hits\" and \"misses\" as reported by DescribeInterpreterCacheUse() in interpreter_cache.cc in this CL. When you look at the ratio we would get if we implemented all the new bytecodes, it\u0027s `new_hits/new_misses` where `new_hits\u003d(hits - unnecessary + avoidable)` and `new_misses\u003d(misses-avoidable_stores-avoidable)`. This yields ~10x for zygote but still only ~2x for system server.",
      "parentUuid": "191e677a_2b352657",
      "range": {
        "startLine": 32,
        "startChar": 53,
        "endLine": 33,
        "endChar": 38
      },
      "revId": "192adfa1d17173c22d6873c17982d6823b2ed096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}