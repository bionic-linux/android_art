{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9c842292_536b2a14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-10-13T13:56:14Z",
      "side": 1,
      "message": "Thanks Mythri, PTAL.",
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb1e198e_e0257b0a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2023-10-13T14:03:52Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94ccb011_bae7b1c9",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3039,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-16T09:38:11Z",
      "side": 1,
      "message": "Can this be a `static_assert`? Same for other archs",
      "range": {
        "startLine": 3039,
        "startChar": 8,
        "endLine": 3039,
        "endChar": 17
      },
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61be16e8_50a2ea27",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3048,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-16T09:38:11Z",
      "side": 1,
      "message": "`-1`? Our \"increment hotness\" methods actually subtract `-1`",
      "range": {
        "startLine": 3048,
        "startChar": 34,
        "endLine": 3048,
        "endChar": 35
      },
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15e318a9_5bab8130",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3050,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-16T09:38:11Z",
      "side": 1,
      "message": "If we move this comparison right after the `Ldrh` we will have one extra counter to use, as we would be able to use `0`.",
      "range": {
        "startLine": 3050,
        "startChar": 0,
        "endLine": 3050,
        "endChar": 50
      },
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd631e5_0600d846",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 7
      },
      "lineNbr": 682,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-16T09:38:11Z",
      "side": 1,
      "message": "Don\u0027t we want something like `graph_()-\u003eIsCompilingBaseline() \u0026\u0026 !Runtime::Current()-\u003eIsAotCompiler()` here?",
      "range": {
        "startLine": 682,
        "startChar": 25,
        "endLine": 682,
        "endChar": 55
      },
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "374475e9_d3d7ed53",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 7
      },
      "lineNbr": 691,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-16T09:38:11Z",
      "side": 1,
      "message": "nit: double space",
      "range": {
        "startLine": 691,
        "startChar": 16,
        "endLine": 691,
        "endChar": 18
      },
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63548dce_a821d244",
        "filename": "runtime/jit/profiling_info.h",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-16T09:38:11Z",
      "side": 1,
      "message": "This could potentially overflow right? We should be safe if we do the addition using `uint32_t`",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "1f318d998a581691d79838c2cd5b23c1d881f33c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}