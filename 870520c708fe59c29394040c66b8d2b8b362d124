{
  "comments": [
    {
      "key": {
        "uuid": "bd82644f_f23468dc",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 1956,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-16T17:22:56Z",
      "side": 1,
      "message": "Wouldn\u0027t a name like GenIsInfiniteOrNaN (so the prefix Gen) be a bit more in line with was is found in this and related files for such methods?",
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd82644f_357c1abd",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 1956,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-02-16T20:11:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd82644f_f23468dc",
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dbec8e3_d98cc6b6",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 2012,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2016-02-13T07:15:43Z",
      "side": 1,
      "message": "Could be shorter and without branches.\n\nNote that except for the sign, an infinity is a single value (with maximum exponent and zero mantissa). Only NaNs have millions and billions of encodings. So you can compare directly.\n\nfloats:\n\n  mfc1    TMP, in\n  li      AT, INF_FLOAT\n  xor     TMP, TMP, AT\n  sll     TMP, TMP, 1 # shift the sign out\n  sltiu   out, TMP, 1\n\ndoubles:\n\n  MoveFromFpuHi TMP, in\n  li      AT, HIGH(INF_DOUBLE)\n  xor     TMP, TMP, AT\n  sll     TMP, TMP, 1 # shift the sign out\n  mfc1    AT, in\n  or      TMP, TMP, AT\n  sltiu   out, TMP, 1",
      "range": {
        "startLine": 1983,
        "startChar": 0,
        "endLine": 2012,
        "endChar": 25
      },
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd7f7c1f_2cb29312",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 2012,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-16T17:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dbec8e3_d98cc6b6",
      "range": {
        "startLine": 1983,
        "startChar": 0,
        "endLine": 2012,
        "endChar": 25
      },
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd7ab832_713ab0ce",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 2012,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-02-16T20:11:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dbec8e3_d98cc6b6",
      "range": {
        "startLine": 1983,
        "startChar": 0,
        "endLine": 2012,
        "endChar": 25
      },
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd255844_5329a465",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 2071,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-16T17:22:56Z",
      "side": 1,
      "message": "I was actually thinking of lowering all isNaN(x) into x !\u003d x during simplification (so make it a handled as HIR case), since that would implement it for all architectures, and make it more subject to other compiler optimizations.\n\nare there disadvantages to that?",
      "range": {
        "startLine": 2071,
        "startChar": 33,
        "endLine": 2071,
        "endChar": 49
      },
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d71b053_f310e8a4",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 2071,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-02-16T20:48:55Z",
      "side": 1,
      "message": "I\u0027m okay with that but what does that mean exactly? Does that mean that the intrinsics which are called out in the compiler/optimizing/intrinsics_*.cc files because place holders, and no corresponding intrinsics functions should be implemented by the machine specific code? For example the compiler/optimizing/intrinsics_*.cc show IntegerCompare, LongCompare, IntegerSignum, and LongSignum as \"Handled as HIR instructions.\"",
      "parentUuid": "dd255844_5329a465",
      "range": {
        "startLine": 2071,
        "startChar": 33,
        "endLine": 2071,
        "endChar": 49
      },
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1d04f9_1a333dd8",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 2071,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-16T21:04:33Z",
      "side": 1,
      "message": "Yes, intrinsics that are marked as \"Handled as HIR instructions\" are already lowered into HIR during simplification. I am in fact going to make another macro that checks we never reach these (so we will have UNIMPLEMENTED_INTRINSIC and UNREACHED_INTRINSIC).\n\nMips implements a few intrinsics that are always lowered to HIR, so that code is esssentially dead now.",
      "parentUuid": "1d71b053_f310e8a4",
      "range": {
        "startLine": 2071,
        "startChar": 33,
        "endLine": 2071,
        "endChar": 49
      },
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d71b053_132814c8",
        "filename": "compiler/optimizing/intrinsics_mips.cc",
        "patchSetId": 1
      },
      "lineNbr": 2071,
      "author": {
        "id": 1071873
      },
      "writtenOn": "2016-02-16T21:10:29Z",
      "side": 1,
      "message": "Is that why you also replied \"Done\" to Alexey\u0027s comment about simplifying the \"isInfinite\" code to avoid the branch? Are you also, thinking of handling that at the HIR level?",
      "parentUuid": "bd1d04f9_1a333dd8",
      "range": {
        "startLine": 2071,
        "startChar": 33,
        "endLine": 2071,
        "endChar": 49
      },
      "revId": "870520c708fe59c29394040c66b8d2b8b362d124",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}