{
  "comments": [
    {
      "key": {
        "uuid": "c6d1c6ea_b4164e33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-11-08T17:37:07Z",
      "side": 1,
      "message": "That isn\u0027t really true. Can you reformulate?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 59
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e86438d4_729d04fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-08T17:47:40Z",
      "side": 1,
      "message": "It is... I mean, I also renamed the method after... hmmm....",
      "parentUuid": "c6d1c6ea_b4164e33",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 59
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfc60cba_b72958df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-11-08T17:37:07Z",
      "side": 1,
      "message": "Hahaha, citation needed. :-)",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 20
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0359dbe_8bff5f4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-08T17:47:40Z",
      "side": 1,
      "message": "Should be rare....",
      "parentUuid": "cfc60cba_b72958df",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 20
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1245a192_433f61ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-11-08T17:37:07Z",
      "side": 1,
      "message": "Statement about performance impact?",
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9775279_d57b1deb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-08T17:47:40Z",
      "side": 1,
      "message": "Still waiting...",
      "parentUuid": "1245a192_433f61ed",
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b34824c7_b910dc55",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-11-09T11:35:23Z",
      "side": 1,
      "message": "Always returns false, so change return type to void and \"return false\" in the caller.",
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55bd5a4c_9f220d99",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-09T11:38:15Z",
      "side": 1,
      "message": "I know... but I slightly prefer the explicit \"return false\".\nVoid might suggest it is implicitly \"return true\".\nIt is on slow path, so it should not make performance difference.",
      "parentUuid": "b34824c7_b910dc55",
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b059858_be715543",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-11-09T11:42:39Z",
      "side": 1,
      "message": "Can you check if it makes code size difference?\n\n(If you think \"void\" is implicitly \"return true\", you can add extra comment on the function, or in the caller, or both.)",
      "parentUuid": "55bd5a4c_9f220d99",
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11abf4dc_fb3d2bbe",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-09T11:54:06Z",
      "side": 1,
      "message": "No code size difference.",
      "parentUuid": "6b059858_be715543",
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b4a65a_6e56dcbf",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-11-08T17:37:07Z",
      "side": 1,
      "message": "That sounds terribly brittle. :-)",
      "range": {
        "startLine": 103,
        "startChar": 5,
        "endLine": 103,
        "endChar": 74
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3115580c_74841d44",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-08T17:47:40Z",
      "side": 1,
      "message": "Aren\u0027t all compiler optimizations though? :-)\n\nIt is odd. I wouldn\u0027t expect it to be brittle.",
      "parentUuid": "a1b4a65a_6e56dcbf",
      "range": {
        "startLine": 103,
        "startChar": 5,
        "endLine": 103,
        "endChar": 74
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988d4689_da4d5fc8",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2018-11-08T19:02:54Z",
      "side": 1,
      "message": "Maybe I\u0027m missing some detail here - what optimization does the compiler do with the copy/restore that it didn\u0027t do before?",
      "parentUuid": "3115580c_74841d44",
      "range": {
        "startLine": 103,
        "startChar": 5,
        "endLine": 103,
        "endChar": 74
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4a4908c_20b10394",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-11-08T21:21:21Z",
      "side": 1,
      "message": "Agreed. This doesn\u0027t make sense. Please file a compiler bug with what you expect vs. what you are getting. This looks extremely brittle, and there is no obvious way to know to undo this when the compiler potentially changes to do what you want it to.",
      "parentUuid": "988d4689_da4d5fc8",
      "range": {
        "startLine": 103,
        "startChar": 5,
        "endLine": 103,
        "endChar": 74
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8d41ab3_d0b5ac19",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-11-08T21:50:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4a4908c_20b10394",
      "range": {
        "startLine": 103,
        "startChar": 5,
        "endLine": 103,
        "endChar": 74
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c452463b_1b5fe69f",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 2627,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-08T21:26:04Z",
      "side": 1,
      "message": "Pirama/Stephen: I think this better line to look at actually....  It inside the (very hot) interpreter loop and it is generated (by macro) for each bytecode.\n\nThe list of variables is the interpreter state, which we want to keep in registers... and I believe that is mostly the case.\n\nI create the InstructionHandler object here... but since the following method is inlined, the object is \"inlined\" as kept in registers as well.  Yay, good compiler.\n\nNow, this CL introduces NO_LINE method on the InstructionHandler... which means we take a pointer to the handler, which means it must be materialized in memory.  Hence the handler_copy, so that it gets materialized in memory only at the slow path.\n\nSecondly, (as Valdimir pointer out to me) that is not enough.  Even with the copy, the \u0027exit_loop\u0027 and \u0027inst\u0027 are referenced by pointer in the copy, so they will be moved out of registers.  Hence their manual copy out and in.\n\nSo the helper method is icky but the compiler is behaving \"as expected\".  It took me (+Vladimir) less time to figure out how to make the compiler happy than it took to write this comment :-)\n\nArguably, the compiler could be able to do all of that on its own without the explicit copying, but then that would be brittle...",
      "range": {
        "startLine": 2626,
        "startChar": 8,
        "endLine": 2627,
        "endChar": 90
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba53f9ef_0c1ad756",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 2627,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-08T21:33:42Z",
      "side": 1,
      "message": "More specifically, the compiler bug would be as follows:\n\nint i;    // hot variable, which must be in register\nfoo(\u0026i);  // non-inlined function\n\nI think it unreasonable, and probably impossible, to make the compiler avoid allocating \u0027i\u0027 on the stack (what if foo stores the pointer, and something else uses the pointer to modify \u0027i\u0027 later).  But make a copy of \u0027i\u0027 just for the function, and copy it back, and it is all good.  I don\u0027t think it is compiler bug... just C++ semantics....",
      "parentUuid": "c452463b_1b5fe69f",
      "range": {
        "startLine": 2626,
        "startChar": 8,
        "endLine": 2627,
        "endChar": 90
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cf0b433_a370e537",
        "filename": "runtime/interpreter/interpreter_switch_impl-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 2627,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-11-08T21:50:03Z",
      "side": 1,
      "message": "Right, I understand now why you want/need to duplicate things.",
      "parentUuid": "ba53f9ef_0c1ad756",
      "range": {
        "startLine": 2626,
        "startChar": 8,
        "endLine": 2627,
        "endChar": 90
      },
      "revId": "f24bbe82a4ad414aa7c44831c19c60ef3b6ca72a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}