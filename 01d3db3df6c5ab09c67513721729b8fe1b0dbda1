{
  "comments": [
    {
      "key": {
        "uuid": "f7f0198a_0139c762",
        "filename": "compiler/optimizing/intrinsics_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-07-31T16:00:55Z",
      "side": 1,
      "message": "We need to update GenerateInvokePolymorphicCall() to take a slow path and pass `this`. Besides keeping the code clean, it\u0027s also necessary if we ever want to create a LocationSummary that does not indicate call on main path; otherwise, we\u0027ll hit a DCHECK() in CodeGenerator::ValidateInvokeRuntime().",
      "range": {
        "startLine": 72,
        "startChar": 75,
        "endLine": 72,
        "endChar": 76
      },
      "revId": "01d3db3df6c5ab09c67513721729b8fe1b0dbda1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b3f3718_c8531a97",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-07-31T08:48:07Z",
      "side": 1,
      "message": "There is very little value of implementing an intrinsic by adding a check and then doing the same call we used to do before on the main path (as well as slow path). I would prefer to start with an actual intrinsic implementation for VarHandleGet for static primitive fields.",
      "revId": "01d3db3df6c5ab09c67513721729b8fe1b0dbda1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d954f1c1_56216aac",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3137,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-31T09:00:32Z",
      "side": 1,
      "message": "I agree that there is no benefit in calling the runtime on both paths but the purpose of this commit is only to add the check for supported access modes. I can\u0027t implement a whole operation until I have all the checks done. I think that all the guard checks, the method type checking and an operation would be too much for a single commit. This is why I wanted to do the checks in some preparatory commits.",
      "parentUuid": "0b3f3718_c8531a97",
      "revId": "01d3db3df6c5ab09c67513721729b8fe1b0dbda1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b7fba56_17e854c9",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-07-31T15:46:06Z",
      "side": 1,
      "message": "I agree that we should do it in steps and this change adds value by updating the slow path and implementing one check.\n\nIt would have been enough to do that for a single intrinsic (say VarHandleGet which you will probably implement first) instead of applying this to all of them. We still go to the runtime for both main path and slow path, so we\u0027re not properly testing the implemented check. And implementations for the different VarHandle intrinsics are likely to diverge so the INTRINSIC_VARHANDLE_CODE_GENERATOR macro will probably have to be dropped. If you want to keep it this way for the time being, that\u0027s OK, I\u0027m just saying you will most likely have to rewite this part anyway.",
      "parentUuid": "d954f1c1_56216aac",
      "revId": "01d3db3df6c5ab09c67513721729b8fe1b0dbda1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab4347d8_851e5d0f",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 3137,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-08-03T06:41:26Z",
      "side": 1,
      "message": "Intrinsics implementation will diverge, it is true. But there will be a common part that generates the checks, so I was thinking to do all the checks in GenerateVarHandleCode and then use a switch instruction to call a method specific to that VarHandle access mode (using a similar macro).\n\nAs you suggested, I applied the macro only for VarHandleGet and left all the other access modes as unimplemented. I kept the macro so that when all the checks are done and I can start implementing actual operations, I will use it for all implemented access modes to generate the checks.",
      "parentUuid": "2b7fba56_17e854c9",
      "revId": "01d3db3df6c5ab09c67513721729b8fe1b0dbda1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29384b00_69b3d0ac",
        "filename": "compiler/optimizing/locations.h",
        "patchSetId": 2
      },
      "lineNbr": 491,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-07-31T08:48:07Z",
      "side": 1,
      "message": "Line too long.",
      "revId": "01d3db3df6c5ab09c67513721729b8fe1b0dbda1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "def5d3b4_1f2fc8be",
        "filename": "compiler/optimizing/locations.h",
        "patchSetId": 2
      },
      "lineNbr": 491,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-07-31T09:00:32Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "29384b00_69b3d0ac",
      "revId": "01d3db3df6c5ab09c67513721729b8fe1b0dbda1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}