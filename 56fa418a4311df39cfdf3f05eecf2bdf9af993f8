{
  "comments": [
    {
      "key": {
        "uuid": "590f7b24_af7ca496",
        "filename": "compiler/jni/quick/calling_convention.cc",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-27T21:30:33Z",
      "side": 1,
      "message": "This one should be sizeof(uint32_t), the size of number_of_references_, to decouple it from the size of StackReference. Maybe introduce another method SirtReferencesOffset() to abstract and have all the SIRT offset logic close together?",
      "range": {
        "startLine": 196,
        "startChar": 50,
        "endLine": 196,
        "endChar": 66
      },
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91d8f5d_ae502b48",
        "filename": "compiler/jni/quick/calling_convention.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-27T21:30:33Z",
      "side": 1,
      "message": "Size of StackReference as an expression, maybe?",
      "range": {
        "startLine": 70,
        "startChar": 43,
        "endLine": 70,
        "endChar": 44
      },
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91d8f5d_4e399702",
        "filename": "compiler/jni/quick/calling_convention.h",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-27T21:30:33Z",
      "side": 1,
      "message": "\"else if\" or a switch, maybe?",
      "range": {
        "startLine": 82,
        "startChar": 7,
        "endLine": 83,
        "endChar": 8
      },
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcdf857e_c856034a",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-03-21T12:24:47Z",
      "side": 1,
      "message": "Why the \u0027if\u0027, since they both take the same action?",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f904af03_9c96c57b",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-03-26T11:20:31Z",
      "side": 1,
      "message": "You are right, it is redundant code.",
      "parentUuid": "bcdf857e_c856034a",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c5e35d0_8f905d35",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-03-21T12:24:47Z",
      "side": 1,
      "message": "replace switch by calculation?  Can we assume XMM7 \u003d\u003d XMM0 + 7?",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99ec937b_01c24a75",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-03-26T11:20:31Z",
      "side": 1,
      "message": "Will change this switch to XMM0+itr_float_and_doubles_",
      "parentUuid": "3c5e35d0_8f905d35",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91d8f5d_6958cd4c",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-27T21:30:33Z",
      "side": 1,
      "message": "Cruft?",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 132,
        "endChar": 2
      },
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "590f7b24_0ffcb087",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-27T21:30:33Z",
      "side": 1,
      "message": "Use kSirtPointerSize (add to JniCallingConvention)? Will change the expression structure...",
      "range": {
        "startLine": 158,
        "startChar": 21,
        "endLine": 158,
        "endChar": 58
      },
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91d8f5d_a96f05cd",
        "filename": "compiler/jni/quick/x86_64/calling_convention_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-27T21:30:33Z",
      "side": 1,
      "message": "Cruft?",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 181,
        "endChar": 2
      },
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c5e35d0_6f78814e",
        "filename": "compiler/utils/x86_64/assembler_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1731,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-03-21T12:24:47Z",
      "side": 1,
      "message": "remove comment?",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19f8a337_dda7abcf",
        "filename": "compiler/utils/x86_64/assembler_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1731,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-03-26T11:20:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c5e35d0_6f78814e",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcdf857e_e865c729",
        "filename": "compiler/utils/x86_64/assembler_x86_64.h",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-03-21T12:24:47Z",
      "side": 1,
      "message": "Would it have made sense to derive from the X86 version?  Is there any code reuse?",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f904af03_3c3331d7",
        "filename": "compiler/utils/x86_64/assembler_x86_64.h",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-03-26T11:20:31Z",
      "side": 1,
      "message": "The X86_64 assembler is based on X86 assembler code + REX support and x86_64 calling convention fixes.\n\nX86 version belongs to x86 namespace, it operates on x86:ManagedRegister and does not have access to x86_64 register constants (e.g. R8..R15).\n\nThus deriving from X86 assembler looks not reasonable.",
      "parentUuid": "bcdf857e_e865c729",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c5e35d0_0f854df1",
        "filename": "compiler/utils/x86_64/assembler_x86_64.h",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-03-21T12:24:47Z",
      "side": 1,
      "message": "fix date?",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91d8f5d_09bcb998",
        "filename": "compiler/utils/x86_64/assembler_x86_64_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-03-27T21:30:33Z",
      "side": 1,
      "message": "The REX prefixes make the assembler quite a bit more complicated. I think we should have more/better tests here that actually compare against some hand-encoded sequences. But it would be OK with me to merge without the tests for now.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 30,
        "endChar": 1
      },
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcdf857e_484b13a2",
        "filename": "compiler/utils/x86_64/managed_register_x86_64.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-03-21T12:24:47Z",
      "side": 1,
      "message": "fix filename?",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19f8a337_7d39b7b4",
        "filename": "compiler/utils/x86_64/managed_register_x86_64.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-03-26T11:20:31Z",
      "side": 1,
      "message": "There is no x86.cc in art project now and it is not clear what should be synced. It seems the comment is obsolete in this file, as well as in managed_register_x86.h",
      "parentUuid": "bcdf857e_484b13a2",
      "revId": "56fa418a4311df39cfdf3f05eecf2bdf9af993f8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}