{
  "comments": [
    {
      "key": {
        "uuid": "e7750f3f_4e07d3d4",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1041,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-08-10T15:57:52Z",
      "side": 1,
      "message": "I think it is safe to assume that VIXL could do with just one temp register for this portion of code. (VIXL currently uses x16 and x17 for generating constants and general macroassembler stuff). \n\nThus you can remove one of the location-\u003eAddTemp(...) and use UseScratchRegisterScope scratch_scope(masm); in the CodeGenerator visitor (see the other examples in this file and code_generator_arm64.cc).",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7ceb7a1_9ad9ad22",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1041,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7750f3f_4e07d3d4",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c72bab15_55fc2c32",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1080,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-08-10T15:10:29Z",
      "side": 1,
      "message": "Drop. `Operand` provides an implicit constructor for readability.\n\nSame below.",
      "range": {
        "startLine": 1080,
        "startChar": 15,
        "endLine": 1080,
        "endChar": 22
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47e97bf9_545d42c0",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1080,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c72bab15_55fc2c32",
      "range": {
        "startLine": 1080,
        "startChar": 15,
        "endLine": 1080,
        "endChar": 22
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c72bab15_75f92841",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1094,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-08-10T15:10:29Z",
      "side": 1,
      "message": "With this, that is potentially 3 branches in 4 instructions, which can cause issue with the branch predictor.\n\nThere is work here to automatically insert NOPs in these situations, but for now you might want to add a NOP with a TODO indicating to remove it once VIXL handles that.",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "271727da_d8daad97",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1094,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-08-10T15:57:52Z",
      "side": 1,
      "message": "You can also move this to the top. There is no need to do the count_offset loads in this case?",
      "range": {
        "startLine": 1092,
        "startChar": 0,
        "endLine": 1094,
        "endChar": 25
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7ceb7a1_3a7cd98f",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1094,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done- I moved the move instruction from below between the two branch instructions, and also moved the reference equality check to the top as suggested below.",
      "parentUuid": "c72bab15_75f92841",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47c41b7d_3cbbbdab",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1094,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "271727da_d8daad97",
      "range": {
        "startLine": 1092,
        "startChar": 0,
        "endLine": 1094,
        "endChar": 25
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c72bab15_954f243f",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1100,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-08-10T14:15:13Z",
      "side": 1,
      "message": "Mov?",
      "range": {
        "startLine": 1100,
        "startChar": 5,
        "endLine": 1100,
        "endChar": 8
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07bea3e2_fa39c58f",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1100,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c72bab15_954f243f",
      "range": {
        "startLine": 1100,
        "startChar": 5,
        "endLine": 1100,
        "endChar": 8
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "271727da_d8086dbb",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1102,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-08-10T15:10:29Z",
      "side": 1,
      "message": "Did you try using LDP to compare 4 chars at a time?",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67e67f2a_55f9be40",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1102,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "This was an outdated comment- I am comparing 4 characters at a time. Using LDP would be comparing 8 characters at a time, which would complicate things because we don\u0027t have the appropriate object alignment for this.",
      "parentUuid": "271727da_d8086dbb",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47e33b4a_01bbaa0e",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1102,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-08-11T08:37:47Z",
      "side": 1,
      "message": "I see questions about performance and code size for this, but I don\u0027t see the alignment issue here. The base address of LDP does not need to be 8 byte aligned.",
      "parentUuid": "67e67f2a_55f9be40",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47e33b4a_21c22e7c",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1102,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-08-11T09:16:15Z",
      "side": 1,
      "message": "I think the 8-byte alignment issues is not ARM64-related, but pertain to String objects, which must also be properly zero-padded to avoid overruns.",
      "parentUuid": "47e33b4a_01bbaa0e",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47209b2d_b9c57fd6",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1107,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2015-08-10T15:57:52Z",
      "side": 1,
      "message": "out is a W reg here, same as temp2. Thus on each load you will be loading sizeof(uint32_t).\n\nLdr(out.X(), ...)\nLdr(temp2.X(), ...) \nWill be loading sizeof(uint64_t).\n\nFor ARM64, GP side we have X and W register views, as follows. \nx[63........w[31      0]]",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1107,
        "endChar": 49
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87c9b39e_19700bca",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1107,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47209b2d_b9c57fd6",
      "range": {
        "startLine": 1105,
        "startChar": 0,
        "endLine": 1107,
        "endChar": 49
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47209b2d_5979c339",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1111,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-08-10T15:10:29Z",
      "side": 1,
      "message": "Avoid the `Cmp` by moving the `Sub(temp, temp, 4)` here and using `SetFlags`?",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67e67f2a_f5e792a2",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1111,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47209b2d_5979c339",
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a72a3712_3441700d",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1117,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-08-10T14:15:13Z",
      "side": 1,
      "message": "Mov?",
      "range": {
        "startLine": 1117,
        "startChar": 5,
        "endLine": 1117,
        "endChar": 8
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87c9b39e_791edf98",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1117,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a72a3712_3441700d",
      "range": {
        "startLine": 1117,
        "startChar": 5,
        "endLine": 1117,
        "endChar": 8
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a72a3712_d4c03cfa",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1122,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-08-10T14:15:13Z",
      "side": 1,
      "message": "Mov?",
      "range": {
        "startLine": 1122,
        "startChar": 5,
        "endLine": 1122,
        "endChar": 8
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47c41b7d_1c2b5984",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1122,
      "author": {
        "id": 1074223
      },
      "writtenOn": "2015-08-10T19:41:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a72a3712_d4c03cfa",
      "range": {
        "startLine": 1122,
        "startChar": 5,
        "endLine": 1122,
        "endChar": 8
      },
      "revId": "9f7a4eb7b65bb6edaf3f9dd6fc485edfe60d609c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}