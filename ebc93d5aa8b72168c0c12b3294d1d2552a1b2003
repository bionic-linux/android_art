{
  "comments": [
    {
      "key": {
        "uuid": "d8754a3f_ce80a3d7",
        "filename": "runtime/lambda/box_table.cc",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-07-16T21:31:19Z",
      "side": 1,
      "message": "Depending on the nature of this data structure, in general, both adding a new weak ref and accessing an existing weak ref (loading the ref out of a GcRoot) need to be temporarily blocked (excluding GC\u0027s sweeping code SweepWeakBoxedLambdas). I am the impression that it\u0027s already the case here, but I\u0027d like to check if this matches your understanding.",
      "range": {
        "startLine": 140,
        "startChar": 15,
        "endLine": 140,
        "endChar": 37
      },
      "revId": "ebc93d5aa8b72168c0c12b3294d1d2552a1b2003",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8709650_6d0735d1",
        "filename": "runtime/lambda/box_table.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-07-16T21:31:19Z",
      "side": 1,
      "message": "This should disable the read barrier as this is called from GC with a comment like:\n\n// This does not need a read barrier because this is called by GC.\n... Read\u003ckWithoutReadBarrier\u003e();\n\neg. InternTable::Table::SweepWeaks()",
      "range": {
        "startLine": 162,
        "startChar": 50,
        "endLine": 162,
        "endChar": 54
      },
      "revId": "ebc93d5aa8b72168c0c12b3294d1d2552a1b2003",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}