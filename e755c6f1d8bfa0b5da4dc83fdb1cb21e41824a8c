{
  "comments": [
    {
      "key": {
        "uuid": "cbc0058b_09bfd493",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 19
      },
      "lineNbr": 1,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "Don\u0027t update the copyright notice.",
      "range": {
        "startLine": 1,
        "startChar": 16,
        "endLine": 1,
        "endChar": 20
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bce26a80_7204649d",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 19
      },
      "lineNbr": 1,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 1,
        "startChar": 16,
        "endLine": 1,
        "endChar": 20
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21ad7a2a_13a3333b",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 19
      },
      "lineNbr": 324,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "what is this for? to figure out the concurrency level? If so I think thats surfaced in some builtin var IIRC\n\nAlso you really need a comment saying what all of this is doing. MAKE is hard enough to read without a bunch of bash in the middle of it.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fa3dc07_05779b92",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 19
      },
      "lineNbr": 324,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "As I discussed with ccross@, it is not possible to find out concurrency level after kati or ninja starts.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d464f90_04486c7e",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 19
      },
      "lineNbr": 324,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-31T22:47:44Z",
      "side": 1,
      "message": "Ok. Please put a comment explaining what this is supposed to do at least.\n\nAlso this is extremely fragile. I don\u0027t think this will work for many possible make invocations.\n\nI don\u0027t think this will work with \u0027mma -j\u0027 which tries to use all processors, \u0027m --jobs\u003d\u003cwhatever\u003e\u0027 which means the same thing as -j or when using multiple single char arguments \u0027mma -kj40 ...\u0027 (-k causes make to keep going after the first error).\n\nFinally are you sure you cannot just pass in $(MAKEFLAGS) and have the python script parse them? That seems both much easier and less cryptic.\n\nhttps://www.gnu.org/software/make/manual/html_node/Options_002fRecursion.html#Options_002fRecursion",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d3a013_2a889561",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 19
      },
      "lineNbr": 374,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "See comment above",
      "range": {
        "startLine": 367,
        "startChar": 0,
        "endLine": 374,
        "endChar": 59
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b5c5311_590b34b1",
        "filename": "test/Android.run-test.mk",
        "patchSetId": 19
      },
      "lineNbr": 374,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 367,
        "startChar": 0,
        "endLine": 374,
        "endChar": 59
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf6ece6a_50160e8f",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "This seems to sometimes be a single string and sometimes a list of strings. Why?",
      "range": {
        "startLine": 15,
        "startChar": 9,
        "endLine": 15,
        "endChar": 20
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3c18f46_23046078",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "Sometimes, the description is way too long and writing it in a single line causes issues. As this is a json file, the string cannot be split in multiple lines. For the sake of this issue, I have put some description in arrays to avoid the situation of writing very long single line description.",
      "range": {
        "startLine": 15,
        "startChar": 9,
        "endLine": 15,
        "endChar": 20
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04b18bfa_2d060e91",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 38,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "ISTM that it would be better to always use tests with a single element list.",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 13
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68807b41_81540f40",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 38,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "Are you suggesting to always use tests instead of test, even for the single test?",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 13
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41b93bb7_92cbd4bb",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 38,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T21:56:23Z",
      "side": 1,
      "message": "yeah. It is just weird and seems like it could cause issues when somebody adds/removes a test if they need to change the key name and the value format also.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66bbf594_aaf6ce28",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 38,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "I misunderstood your comment last time. As of now, if you passing a list, then you should use tests, and if its a single test like 001-HelloWorld in a list but as a String, then you should use test.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2fd5bf3_c481bb6c",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 74,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "You\u0027ll need to update this file since all of these are no longer blocked IIRC.",
      "range": {
        "startLine": 49,
        "startChar": 18,
        "endLine": 74,
        "endChar": 30
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e75db7_5e871da2",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 74,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "There have been few changes since I uploaded the change. I will update the file just before submitting so that I could avoid situation of making changes in the file till the review process is on.",
      "range": {
        "startLine": 49,
        "startChar": 18,
        "endLine": 74,
        "endChar": 30
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8ffa1ba_397864b6",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 77,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "Are either of these printed or used in any way? Are they just for documentation?",
      "range": {
        "startLine": 76,
        "startChar": 8,
        "endLine": 77,
        "endChar": 34
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5207ce8b_6ab1db7d",
        "filename": "test/knownfailures.json",
        "patchSetId": 19
      },
      "lineNbr": 77,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "Not now. As we are planning to output the test result in XML, we could use these strings as the reasoning.",
      "range": {
        "startLine": 76,
        "startChar": 8,
        "endLine": 77,
        "endChar": 34
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5403512a_aea4b090",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "Why is this a dict? It seems more like it should be a set().",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57eef3ad_2f9a4909",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "The variable maps test name to the variants which are there in the known failure file. For eg. 001-HelloWorld could be mapped to \u0027optimizing\u0027. In this case, when I will check if 001-HelloWorld is disabled for optimizing, I will first check if 001-HelloWorld is in the list or not, and if it is, then which of its variants are disabled.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "587c4d88_bd53257c",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T21:56:23Z",
      "side": 1,
      "message": "Ok. This should 1) have a different name (it\u0027s not a list) and 2) have something like this description in a comment.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e358be2_c827a6ed",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f19f47_64bea90e",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 71,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "Comment about what this dict is and what it will hold.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c296c734_86910b8e",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 71,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67cf407f_fad07393",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 75,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "Please comment what these codes do.",
      "range": {
        "startLine": 71,
        "startChar": 17,
        "endLine": 75,
        "endChar": 24
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ce903e0_79bf5fd2",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 75,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 71,
        "startChar": 17,
        "endLine": 75,
        "endChar": 24
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66da8b9e_04122b85",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 76,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "What is this and what will it hold.",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 22
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "239211c2_ad92fd88",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 76,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "This is set of all the variants like - optimizing, jit, trace and others.",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 22
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bce4a75_1fc30090",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 76,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 22
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34d93021_a37d837f",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 293,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "There is no need for this to be indented 12 times.\n\nimport itertools\n\nconfigs \u003d (TARGET_TYPES, RUN_TYPES, PREBUILD_TYPES, ..., ADDRESS_SIZES_TARGET[target])\nfor (target, run, prebuild, compiler, relocate, trace, gc, jni, image, pictest, debuggable, address_size) in itertools.product(*configs):  \n    # stuff",
      "range": {
        "startLine": 281,
        "startChar": 30,
        "endLine": 293,
        "endChar": 75
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aaccf6d_15d1e962",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 424,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "Generally global variables are something to be avoided.\n\nhttps://google.github.io/styleguide/pyguide.html#Global_variables\n\nI don\u0027t think anything you\u0027re doing is dangerous and it\u0027s probably more work to remove them then it\u0027s worth but just FYI.",
      "range": {
        "startLine": 422,
        "startChar": 1,
        "endLine": 424,
        "endChar": 24
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49dc9284_4a92759a",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 424,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "Yes, I went through the guidelines before writing the project. However, as there isn\u0027t a class that can store all the variables, I used global variables to share information. Also, for eg. test_count is used by the threads to print the information. I can\u0027t think of any other approach except having a shared object(which should be a global variable).",
      "range": {
        "startLine": 422,
        "startChar": 1,
        "endLine": 424,
        "endChar": 24
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96b7f275_c513de14",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 465,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "called get_disabled_test_list but returns a set.",
      "range": {
        "startLine": 465,
        "startChar": 4,
        "endLine": 465,
        "endChar": 26
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c13b8db6_8fb8f044",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 553,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "Why not just use the \u0027print\u0027 function/statement?",
      "range": {
        "startLine": 551,
        "startChar": 0,
        "endLine": 553,
        "endChar": 22
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fc25152_ae798b74",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 553,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-30T21:40:15Z",
      "side": 1,
      "message": "print doesn\u0027t handle reverse feed correctly.",
      "range": {
        "startLine": 551,
        "startChar": 0,
        "endLine": 553,
        "endChar": 22
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25c1f1a9_6a90f3a0",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 553,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T21:56:23Z",
      "side": 1,
      "message": "Hm. You should be sure to be careful using those. I\u0027m not sure how soong will like them.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "324f90b7_a3a1e0cc",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 553,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "What problems do you think this can cause? I am not aware of any.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76c89a0e_cead49d3",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 553,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-31T22:47:44Z",
      "side": 1,
      "message": "soong (or ninja or whatever our build system is called now) already does stuff with carriage-return \u0027\\r\u0027 chars to print the in-progress jobs. It also buffers the output of a compile step, printing it all at once. Either one of these behaviors could interact with your use of it here in unexpected or unwanted ways.",
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45841180_6721a556",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 604,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "This function really needs a doc-comment and probably a different name.\n\nIt\u0027s name sounds like it is just figuring out what test we are asking to have run but it is also fiddling with global state.",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 604,
        "endChar": 28
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cd0a649_acb54006",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 604,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 604,
        "endChar": 28
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "793e0949_f80e083e",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 744,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-01-30T18:58:59Z",
      "side": 1,
      "message": "I believe the standard style is to have this simply call main() and put the startup stuff in that function.",
      "range": {
        "startLine": 744,
        "startChar": 1,
        "endLine": 744,
        "endChar": 26
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eea0251e_8dc1b5ff",
        "filename": "test/testrunner/testrunner.py",
        "patchSetId": 19
      },
      "lineNbr": 744,
      "author": {
        "id": 1084268
      },
      "writtenOn": "2017-01-31T22:28:12Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 744,
        "startChar": 1,
        "endLine": 744,
        "endChar": 26
      },
      "revId": "e755c6f1d8bfa0b5da4dc83fdb1cb21e41824a8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}