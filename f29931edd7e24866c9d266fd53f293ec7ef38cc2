{
  "comments": [
    {
      "key": {
        "uuid": "e0152784_c592da11",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 624,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-06-29T11:25:16Z",
      "side": 1,
      "message": "Fits on a single line.",
      "range": {
        "startLine": 624,
        "startChar": 0,
        "endLine": 624,
        "endChar": 41
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bde35a1e_2f5705ba",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 624,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-07-05T12:38:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0152784_c592da11",
      "range": {
        "startLine": 624,
        "startChar": 0,
        "endLine": 624,
        "endChar": 41
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0152784_e59556fc",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 625,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-06-29T11:25:16Z",
      "side": 1,
      "message": "Extra space.",
      "range": {
        "startLine": 625,
        "startChar": 39,
        "endLine": 625,
        "endChar": 40
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd519aaa_9c2e65ee",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 625,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-07-05T12:38:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0152784_e59556fc",
      "range": {
        "startLine": 625,
        "startChar": 39,
        "endLine": 625,
        "endChar": 40
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0152784_a506be4d",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 632,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-06-29T11:25:16Z",
      "side": 1,
      "message": "Extra space.",
      "range": {
        "startLine": 632,
        "startChar": 11,
        "endLine": 632,
        "endChar": 12
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d0f22b2_0d49f5a5",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 632,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-07-05T12:38:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0152784_a506be4d",
      "range": {
        "startLine": 632,
        "startChar": 11,
        "endLine": 632,
        "endChar": 12
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80bb8b9f_9f1c87bf",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 637,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2016-06-28T22:55:13Z",
      "side": 1,
      "message": "Hopefully generates zero for a NaN?",
      "range": {
        "startLine": 637,
        "startChar": 5,
        "endLine": 637,
        "endChar": 28
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0152784_0514f29a",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 637,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-06-29T09:34:02Z",
      "side": 1,
      "message": "Yes, FCVTAS generates zero for NaN inputs.\n\nThis FCVTAS is the one we found in ARM64 ISA which is closest to Java 8\u0027s Math.round() definition.\nThe only difference is that it has different rounding direction for negative \u0027half\u0027 values. That\u0027s why we need a few instructions below to check and handle these negative \u0027half\u0027 values.\n\nWe actually have art/test/082-inline-execute/Main.java test to test Math.round implementation. The test cases cover inputs like NaN, +/-0.0, 0.4999999701976776123046875, +/-infinity, floating-point values which are bigger or smaller than Integer.MAX_VALUE/Integer.MIN_VALUE, etc.",
      "parentUuid": "80bb8b9f_9f1c87bf",
      "range": {
        "startLine": 637,
        "startChar": 5,
        "endLine": 637,
        "endChar": 28
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9dde9659_cb64f5a0",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 646,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-07-05T12:38:45Z",
      "side": 1,
      "message": "Here is why the 580-checker-round test failed on this patch. Inside this Fcmp, VIXL also uses UseScratchRegisterScope register which trashes tmp_fp.\nFixed in the new patch.",
      "range": {
        "startLine": 646,
        "startChar": 5,
        "endLine": 646,
        "endChar": 9
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd519aaa_3c407190",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 646,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-07-05T12:48:36Z",
      "side": 1,
      "message": "This is strange; I thought UseScratchRegisterScope would prevent register reuse.",
      "parentUuid": "9dde9659_cb64f5a0",
      "range": {
        "startLine": 646,
        "startChar": 5,
        "endLine": 646,
        "endChar": 9
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d41c6d7_bfa9d747",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 646,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-07-05T13:09:20Z",
      "side": 1,
      "message": "Roland, I think only DEBUG version of VIXL would perform such check.\nHowever, in ART we always use the release build of libvixl no matter we build debug or release version of ART.\nI was thinking that I can propose in another patch, to use libvixld for debug build of ART. Then we can prevent such mistake.",
      "parentUuid": "bd519aaa_3c407190",
      "range": {
        "startLine": 646,
        "startChar": 5,
        "endLine": 646,
        "endChar": 9
      },
      "revId": "f29931edd7e24866c9d266fd53f293ec7ef38cc2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}