{
  "comments": [
    {
      "key": {
        "uuid": "f904af03_a5dba402",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-03-28T16:15:10Z",
      "side": 1,
      "message": "Just a detail: thinking about future optimizations, it may be easier to get the vreg first and the constant next. IIRC, this is done so in LLVM IR but I\u0027m not saying we should do the same. Anyway, the order must be consistent for all arithmetic operations.",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "3693af1eff27ca5b0b9ccad5749283a2653674b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19f8a337_265b1cc1",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-03-28T16:19:53Z",
      "side": 1,
      "message": "Yeah, to help GVN we should make it consistent for commutative operations. How about just ensuring first.id \u003c\u003d second.id ?",
      "parentUuid": "f904af03_a5dba402",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "3693af1eff27ca5b0b9ccad5749283a2653674b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19f8a337_a6660c81",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-03-28T16:25:50Z",
      "side": 1,
      "message": "Would it be always true? I mean, if you want to merge multiple operations into one (constant propagation for instance), you may end up with the reverse order. Unless we ensure this is always the case when doing such optimization.",
      "parentUuid": "19f8a337_265b1cc1",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "3693af1eff27ca5b0b9ccad5749283a2653674b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f904af03_85230839",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-03-28T16:35:14Z",
      "side": 1,
      "message": "We can ensure it. In any case, if we want consistency, we have to ensure a determined order when setting/updating inputs.",
      "parentUuid": "19f8a337_a6660c81",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "3693af1eff27ca5b0b9ccad5749283a2653674b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91d8f5d_e52cf9c3",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-03-28T17:24:27Z",
      "side": 1,
      "message": "Perhaps have an IsCanonical method on HInstruction and a verification pass that everything is in its canonical form.",
      "parentUuid": "f904af03_85230839",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "3693af1eff27ca5b0b9ccad5749283a2653674b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99ec937b_8a6d4f1e",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-03-28T18:51:22Z",
      "side": 1,
      "message": "Yeah, I\u0027ll add a verifier once the SSA transformation is implemented. Let\u0027s think about the canonical/preserving consistency once the need arises.",
      "parentUuid": "f91d8f5d_e52cf9c3",
      "range": {
        "startLine": 212,
        "startChar": 6,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "3693af1eff27ca5b0b9ccad5749283a2653674b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19f8a337_864c300d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 572,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-03-28T16:15:10Z",
      "side": 1,
      "message": "const Primitive::Type.",
      "range": {
        "startLine": 572,
        "startChar": 2,
        "endLine": 572,
        "endChar": 17
      },
      "revId": "3693af1eff27ca5b0b9ccad5749283a2653674b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}