{
  "comments": [
    {
      "key": {
        "uuid": "5af43b41_02212c13",
        "filename": "compiler/optimizing/register_allocation_resolver.cc",
        "patchSetId": 1
      },
      "lineNbr": 686,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-12-12T11:22:53Z",
      "side": 1,
      "message": "I thought about it yesterday and I realized this change is probably incorrect, or an undesirable hack at best.  I think the only reason I added it was to keep heap poisoning configurations work with this CL on x86 and x86-64, where the (Baker) read barrier status is \"implicitly\" stored in EFLAGS/RFLAGS, thus delaying the unpoisoning of loaded references after the gray-testing (see https://android-review.googlesource.com/#/c/261232/5/compiler/optimizing/code_generator_x86.cc).\n\nThe obvious solution is to materialize the read barrier state into a register in the `HLoadReadBarrierState` instruction on x86 and x86-64 (as we already do on ARM and ARM64), meaning we can also get rid of the `HMarkReferencesImplicitRBState` instruction (and rename `HMarkReferencesExplicitRBState` to something shorter such as `HMarkReferences`).  This also seems more robust regarding evolutions of this work, where we would permit more instructions between the `HLoadReadBarrierState` and `HMarkReferences` instructions, which would alter the flags register (e.g. arithmetic instructions).",
      "range": {
        "startLine": 682,
        "startChar": 0,
        "endLine": 686,
        "endChar": 17
      },
      "revId": "50202fa410f4e600020cfb487ea0449016498884",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}