{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "89a666ee_dea9b974",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-07-08T16:31:57Z",
      "side": 1,
      "message": "I think this explanation is a bit confusing. It sounds like we don\u0027t care about leaking the old elements, but what actually happens here, iiuc, is that `map`Â has non-owning pointers to all the elements in `collection_`, exactly one each, and this just reshuffles the owning pointers so that all elements are safely in unique_ptr\u0027s again at the end of the loop. Or that\u0027s how I hope it is, because otherwise I can\u0027t see how it works.\n\nCan you please improve the comments to explain it better? The function comment should specify the assumptions on the map argument.",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f33db7ea_9c58ca4f",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-07-08T17:27:26Z",
      "side": 1,
      "message": "On a second glance, what if we sidestep completely the problem explained in the comment by making use of `std::swap`? If I understand correctly, we might be running into trouble sometimes because we have duplicates of the unique pointers during the execution of `SortByMapOrder` - but if we reorder the vector by swapping items rather than releasing and resetting them, the problem should no longer be there (maybe at a small performance cost, but I imagine the length of the vector to be sorted is not going to be massive). What do you think?",
      "parentUuid": "89a666ee_dea9b974",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59f7b7b0_36ed7a02",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-07-08T17:54:26Z",
      "side": 1,
      "message": "I agree it would be quite nice to make it programmatically safe, if it can be done reasonably cheaply.\n\nHowever, swapping between owned and non-owned pointers isn\u0027t safe - you\u0027d have to do it between the unique_ptr\u0027s in `collection_` if it\u0027s to be of any use, and that means visiting them in a non-sequential order based on how they are moved around, which makes the loop rather complicated.\n\nOr am I missing something? If you see a way to do it easily then I\u0027m all for it.",
      "parentUuid": "f33db7ea_9c58ca4f",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c12040e_4ec8e1bc",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-25T19:46:50Z",
      "side": 1,
      "message": "+1 for making it programmatically safe rather than explaining it with a lot of comments. I would `std::move` the owning pointers out to a temporary place and then `std::move` them back in the right order, but I can\u0027t think of an elegant implementation out of my mind. Looking forward to your idea :)",
      "parentUuid": "59f7b7b0_36ed7a02",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57893048_491084b6",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-25T20:55:38Z",
      "side": 1,
      "message": "Stefano did something like that in PS 2, but I didn\u0027t fancy paying the extra runtime cost (see other comment). If there\u0027s a way to make it safe without runtime cost (or at least much less than that), I\u0027m for it.",
      "parentUuid": "5c12040e_4ec8e1bc",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "249017aa_57f6b98c",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-26T09:04:14Z",
      "side": 1,
      "message": "I would say I like Stefano\u0027s solution :) It\u0027s simple and easy to understand.\n\nAlternatively, you can do something like:\n\n```\nstd::unordered_map\u003cT*, std::unique_ptr\u003cT\u003e\u003e ptr_map;\nptr_map.reserve(Size());\nfor (std::unique_ptr\u003cT\u003e\u0026 element : collection_) {\n  ptr_map[element.get()] \u003d std::move(element);\n}\n\nauto it \u003d map.begin();\nfor (size_t i \u003d 0; i \u003c Size(); ++i) {\n  collection_[i] \u003d std::move(ptr_map[it-\u003esecond]);\n  ++it;\n}\n```\n\nwhich gives you the same time complexity as the current implementation (`O(n)`).\n\nI can\u0027t think of any alternative that completely avoids any extra allocation and extra runtime.\n\nI looked at the call hierarchy, and it looks like this function is only used in dex2oat, oatdump, and dexdiag, a few times for each dex file, so it\u0027s not as hot as something like 1000 calls per second or in the critical path of app startup, etc. Therefore, I think keeping the time complexity the same is good enough.",
      "parentUuid": "57893048_491084b6",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8807bb8b_1eb3db71",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-30T19:41:09Z",
      "side": 1,
      "message": "Thanks for investigating, then I agree that\u0027s efficient enough, although in theory it could become used in more hot code since `SortByMapOrder` looks like a generic helper.\n\nA DCHECK on the lookup of `it-\u003esecond` in `ptr_map` would also alleviate my concern if `collection_` and `map` don\u0027t contain the same pointers. I like that.\n\nStill, that approach would also warrant a bit of explanation why it\u0027s done that way.\n\nOne more thing, with that implementation it\u0027s starting to get a bit large for being a header defined function, so I think it should be moved to a .cc file.",
      "parentUuid": "249017aa_57f6b98c",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8a65550_946fead7",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-08-31T15:14:53Z",
      "side": 1,
      "message": "Shall we go with Jiakai\u0027s suggestion then, as it seems to be satisfactory to both of you? Martin, can you walk me through what DCHECK you have in mind for checking the pointers in the two maps?",
      "parentUuid": "8807bb8b_1eb3db71",
      "range": {
        "startLine": 270,
        "startChar": 44,
        "endLine": 270,
        "endChar": 97
      },
      "revId": "dde005699d09ebd3fbe367f4ad71d39832e89416",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}