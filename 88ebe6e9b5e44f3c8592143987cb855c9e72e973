{
  "comments": [
    {
      "key": {
        "uuid": "d447816d_db70db6b",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7236,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2018-01-18T13:08:28Z",
      "side": 1,
      "message": "At this point we know that path_to_root does not fit in 8 bits, so CMP/SUB is going to have a 32-bit encoding, and UBFX is always 32 bits. The instructions are more or less the same, including dependencies. So, what advantages does this case have compared to lines 7239 - 7246?",
      "range": {
        "startLine": 7229,
        "startChar": 0,
        "endLine": 7236,
        "endChar": 9
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95972035_d2f3056b",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7236,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T14:47:54Z",
      "side": 1,
      "message": "This yields\n\n  UBFX out, #0, #mask_bits\n  MOVW ip, #path_to_root  // Fits into 16 bits.\n  // No MOVT here!\n  CMP/SUB out, ip  // CMP is 16-bit (T2), SUB is 32-bit (T2)\n\nThe constant \"path_to_root \u003c\u003c (32u - mask_bits)\" would require MOVW+MOVT because it would not fit into 16 bits. (\"32u - mask_bits\" is certainly at least 4 because the high 4 bits hold the status.)",
      "parentUuid": "d447816d_db70db6b",
      "range": {
        "startLine": 7229,
        "startChar": 0,
        "endLine": 7236,
        "endChar": 9
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2e5cd9e_d6d50537",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7236,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2018-01-18T15:31:05Z",
      "side": 1,
      "message": "Right, and I suppose you decided to add a special case instead of reusing lines 7214 - 7217 because there was one dependency less (the MOVW can issue in parallel with UBFX)?",
      "parentUuid": "95972035_d2f3056b",
      "range": {
        "startLine": 7229,
        "startChar": 0,
        "endLine": 7236,
        "endChar": 9
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebdf4cde_4c53b8d8",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7236,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T16:01:24Z",
      "side": 1,
      "message": "Yes, when the code size is the same, I favor fewer dependencies.\n\n(Note that the motivation to optimize code size comes from the CL that shifts the bitstring to the low bits. I wanted to generate no more code than we would generate if it was in the high bits. That\u0027s also why arm64 is not very optimized, all arm64 instructions are 32-bit and LSR and UBFX are both just an alias of UBFM anyway.)",
      "parentUuid": "c2e5cd9e_d6d50537",
      "range": {
        "startLine": 7229,
        "startChar": 0,
        "endLine": 7236,
        "endChar": 9
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d1b234a_088dec32",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7236,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2018-01-18T16:22:09Z",
      "side": 1,
      "message": "I haven\u0027t thought much about it, ARM64 does not seem to have much room for improvement, other than playing with manual scheduling when the constants need to be materialized by the macroassembler.\n\nHowever, the ARM64 implementation has not undergone the branch reduction work (which might reduce code size a bit judging by the ARM code). That\u0027s, of course, a side issue.",
      "parentUuid": "ebdf4cde_4c53b8d8",
      "range": {
        "startLine": 7229,
        "startChar": 0,
        "endLine": 7236,
        "endChar": 9
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2816978c_1e065e22",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7246,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2018-01-18T13:08:28Z",
      "side": 1,
      "message": "Similarly here - what is better compared to lines 7214 - 7217?",
      "range": {
        "startLine": 7239,
        "startChar": 0,
        "endLine": 7246,
        "endChar": 7
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f7b5f09_8d0cbaf4",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7246,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T14:47:54Z",
      "side": 1,
      "message": "This yields\n\n  LSL(S) out, out, #(path_to_root \u003c\u003c (32u - mask_bits));  // 16-bit if out.IsLow()\n  MOVW ip, #Low16Bits(path_to_root \u003c\u003c (32u - mask_bits))\n  MOVT ip, #High16Hits(path_to_root \u003c\u003c (32u - mask_bits))\n  CMP/SUB out, ip  // CMP is 16-bit (T2), SUB is 32-bit (T2)\n\nWe can have 16-bit LSLS as opposed to 32-bit UBFX.",
      "parentUuid": "2816978c_1e065e22",
      "range": {
        "startLine": 7239,
        "startChar": 0,
        "endLine": 7246,
        "endChar": 7
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fff2794c_aaf9ac49",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7246,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2018-01-18T15:31:05Z",
      "side": 1,
      "message": "I don\u0027t know the macroassembler by heart, but does it generate UBFX for lines 7214 - 7217?",
      "parentUuid": "8f7b5f09_8d0cbaf4",
      "range": {
        "startLine": 7239,
        "startChar": 0,
        "endLine": 7246,
        "endChar": 7
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9450edd_44e0445e",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7246,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-01-18T16:01:24Z",
      "side": 1,
      "message": "Why would it generate UBFX there?",
      "parentUuid": "fff2794c_aaf9ac49",
      "range": {
        "startLine": 7239,
        "startChar": 0,
        "endLine": 7246,
        "endChar": 7
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "953bfd88_2706a5d4",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 8
      },
      "lineNbr": 7246,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2018-01-18T16:22:09Z",
      "side": 1,
      "message": "Oh, I misunderstood you - you were comparing the block to 7229 - 7236, but I was asking about 7214 - 7217.",
      "parentUuid": "d9450edd_44e0445e",
      "range": {
        "startLine": 7239,
        "startChar": 0,
        "endLine": 7246,
        "endChar": 7
      },
      "revId": "88ebe6e9b5e44f3c8592143987cb855c9e72e973",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}