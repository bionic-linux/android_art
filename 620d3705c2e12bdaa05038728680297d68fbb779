{
  "comments": [
    {
      "key": {
        "uuid": "ae5750cd_0df4b1e5",
        "filename": "runtime/gc/collector/garbage_collector.cc",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-10T08:38:49Z",
      "side": 1,
      "message": "Should we instead have the aborting thread do ScopedGcCriticalSection?",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 169,
        "endChar": 22
      },
      "revId": "620d3705c2e12bdaa05038728680297d68fbb779",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "859d7b61_cc467023",
        "filename": "runtime/gc/collector/garbage_collector.cc",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 1096239
      },
      "writtenOn": "2017-07-10T09:05:26Z",
      "side": 1,
      "message": "Do you mean do \u0027jvm-\u003eVisitRoots\u0027 in the aborting thread ?\n\nI think there is no need to do that. In my point of view, if the Runtime is Aborting, the GC happened in the time slot is no longer necessary. So in the situation, we can just let GC thread wait for the aborting thread do abort operation, and then the Runtime will shutdown.",
      "parentUuid": "ae5750cd_0df4b1e5",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 169,
        "endChar": 22
      },
      "revId": "620d3705c2e12bdaa05038728680297d68fbb779",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29f18de7_5cab256c",
        "filename": "runtime/gc/collector/garbage_collector.cc",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-07-10T09:30:36Z",
      "side": 1,
      "message": "No, just have the aborting thread prevent any GC or wait for last GC. This will avoid having the main path (ScopedPause) care about an exceptional case.",
      "parentUuid": "859d7b61_cc467023",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 169,
        "endChar": 22
      },
      "revId": "620d3705c2e12bdaa05038728680297d68fbb779",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3612228_b1ad4e22",
        "filename": "runtime/gc/collector/garbage_collector.cc",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 1096239
      },
      "writtenOn": "2017-07-10T10:42:05Z",
      "side": 1,
      "message": "Oh, I see what you mean.\nYou want every aborting thread prevent GC or wait GC complete. \n\nBut there are many kinds of reason could cause abort, and not every reason could make deadlock.\n\nAt present, just \u0027gloabl reference table overflow\u0027 could make deadlock. Beacuse aborting thread holding jni_globals_lock_ and GC thread need to acqire it too. \n\nOther kind of abort could not make deadlock, and the aborting thread could do abort successfully, so why do we care about the other threads(like GC thread) ?",
      "parentUuid": "29f18de7_5cab256c",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 169,
        "endChar": 22
      },
      "revId": "620d3705c2e12bdaa05038728680297d68fbb779",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87106f12_c1ace91f",
        "filename": "runtime/gc/collector/garbage_collector.cc",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-07-10T15:03:47Z",
      "side": 1,
      "message": "Because your patch changes a part of the GC, which is happening more often and is more critical than the Abort code path.",
      "parentUuid": "b3612228_b1ad4e22",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 169,
        "endChar": 22
      },
      "revId": "620d3705c2e12bdaa05038728680297d68fbb779",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}