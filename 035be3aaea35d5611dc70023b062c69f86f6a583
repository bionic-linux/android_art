{
  "comments": [
    {
      "key": {
        "uuid": "900c7079_2ff7493a",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-03T05:32:49Z",
      "side": 1,
      "message": "we used to do include the value to do CHECK or DCHECK validation on the consuming it. I guess that is now gone?",
      "range": {
        "startLine": 456,
        "startChar": 0,
        "endLine": 458,
        "endChar": 16
      },
      "revId": "035be3aaea35d5611dc70023b062c69f86f6a583",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50c2f81e_13adf47c",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-10-03T09:42:00Z",
      "side": 1,
      "message": "I understand you are referring to the kIsDebugBuild checks in elf_writer.cc:ElfPatcher::SetPatchLocation(). I believe the answer is \"Yes, they are gone together with elf_writer.cc\". This is what I conclude by inspecting oat_writer.cc. Vladimir is - probably - the right person to confirm this.",
      "parentUuid": "900c7079_2ff7493a",
      "revId": "035be3aaea35d5611dc70023b062c69f86f6a583",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50c2f81e_f3486827",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-10-03T09:53:37Z",
      "side": 1,
      "message": "Yes, that\u0027s gone. We could reintroduce these checks in OatWriter::WriteCodeMethodVisitor::VisitMethod() for absolute patches if we feel they are useful. For relative patches we\u0027d need to check in OatWriter::\u003cARCH\u003eRelativeCallPatcher::Patch(). Note that the values will not necessarily be unique.",
      "parentUuid": "50c2f81e_13adf47c",
      "revId": "035be3aaea35d5611dc70023b062c69f86f6a583",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30666437_6eb8136e",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-03T09:56:18Z",
      "side": 1,
      "message": "okay, just wanted to validate.",
      "parentUuid": "50c2f81e_f3486827",
      "revId": "035be3aaea35d5611dc70023b062c69f86f6a583",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0fdac73_7b42b389",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 770,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-03T05:32:49Z",
      "side": 1,
      "message": "is there a better sizeof constant?\n\nsizeof(mirror::HeapReference\u003cmirror::Object\u003e)?",
      "range": {
        "startLine": 770,
        "startChar": 2,
        "endLine": 770,
        "endChar": 43
      },
      "revId": "035be3aaea35d5611dc70023b062c69f86f6a583",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90b9d0ac_4d58adfc",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 770,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-10-03T09:42:00Z",
      "side": 1,
      "message": "I don\u0027t think there is a better sizeof constant, yet.\n\nI agree that sizeof(uint32_t) feels wrong. On the other hand, uint32_t is really what the patchoat tool and oat_writer.cc write. I also considered using mirror::HeapReference\u003c...\u003e, but I concluded this is formally wrong. By \"formally wrong\" I mean that it fails as soon as sizeof(mirror:HeapReference\u003c...\u003e) !\u003d sizeof(uint32_t), even if - in practice - this may never happen.\n\nThe right thing to do would be to introduce a new constant somewhere. And make sure it appears every time a piece of code makes an explicit (e.g. line above) or implicit (e.g. PushUnpatchedReference) reference to the size of oat patches. For example,\n\n  constexpr size_t kOatPatchSize \u003d 4;\n\nand,\n\n  // Write an oat patch.\n  DCHECK_EQ(kOatPatchSize, sizeof(uint32_t));\n  Push32(buf, UINT32_C(0));\n\nNot sure where the constant definition should go, though. Possibly inside a header file which can be included by patchoat.cc, oat_writer.cc and codegen_util.cc.",
      "parentUuid": "f0fdac73_7b42b389",
      "revId": "035be3aaea35d5611dc70023b062c69f86f6a583",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "900c7079_f2b6c6fd",
        "filename": "compiler/dex/quick/codegen_util.cc",
        "patchSetId": 2
      },
      "lineNbr": 770,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-03T09:50:34Z",
      "side": 1,
      "message": "Can we just put a\n\nCOMPILE_ASSERT(ptr_size \u003e\u003d sizeof(mirror::HeapReference\u003cmirror::Object\u003e, ptr_size_cannot_hold_a_heap_reference)\n\nto make sure we do hit this if/when we try to have a non-compressed pointer implementation someday?",
      "parentUuid": "90b9d0ac_4d58adfc",
      "revId": "035be3aaea35d5611dc70023b062c69f86f6a583",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}