{
  "comments": [
    {
      "key": {
        "uuid": "d7fad1ef_4f91ef8a",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2052,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "`can_use_imm \u003d isR6 || IsInt\u003c16\u003e(imm);` would do the same.\n\nBut more importantly, on R6 we want to:\n\n- use `Aui` when the high 16 bits of `imm` aren\u0027t 0 while the low 16 bits of `imm` are 0 (this is essentially the same logic for `Addiu` when `imm` fits into int16_t, IOW, use a single instruction if you can)\n\n- use `Aui`+`Addiu` when there\u0027s just one use of `imm` (see e.g. LocationsBuilderMIPS::FpuRegisterOrConstantForStore() for how to check for a single use of a constant).",
      "range": {
        "startLine": 2052,
        "startChar": 0,
        "endLine": 2052,
        "endChar": 63
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3c51f41_4b16de6c",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2055,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 2055,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 65
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "817ae739_973b0968",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2127,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-20T18:35:27Z",
      "side": 1,
      "message": "rhs_imm?",
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16c5c04e_8209d0d8",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2127,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "`rhs_imm` is declared as int32_t and obtained through CodeGenerator::GetInt32ValueOf(), so this DCHECK(IsInt\u003c32\u003e(imm_rhs)) doesn\u0027t seem to be very meaningful.\n\nAart, do you really think we should keep all instances of it in MIPS32 code?",
      "range": {
        "startLine": 2127,
        "startChar": 0,
        "endLine": 2127,
        "endChar": 35
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca13aca6_03b0f108",
        "filename": "compiler/optimizing/code_generator_mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 2148,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-11-20T18:35:27Z",
      "side": 1,
      "message": "-rhs_imm?",
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c23ecda1_33d010d2",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1890,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "This is as good as `can_use_imm \u003d true\u0027`.\n\nBut, similarly to the MIPS32R6 case, we should generate the shortest code when we can. That is, if we can use a single `Addiu`/`Daddiu\u0027 or `Aui`/`Daui`, we should do it. If we can\u0027t, we should look at whether the constant has multiple uses or not. And if it has a single use, we can use the proper combination of `Addiu`+`Aui` or `Daddiu`+`Daui`+`Dahi`+`Dati`. If there are multiple uses, we should request a register input instead of a constant input.",
      "range": {
        "startLine": 1890,
        "startChar": 0,
        "endLine": 1890,
        "endChar": 39
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5901412_e702a2a5",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1893,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 1893,
        "startChar": 0,
        "endLine": 1893,
        "endChar": 93
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9d0bd10_d323fc3b",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1986,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "Completely unnecessary DCHECK().",
      "range": {
        "startLine": 1986,
        "startChar": 0,
        "endLine": 1986,
        "endChar": 41
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d7c3512_40de7141",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "For consistency with our other code, use `[U]INT64_C(1)` instead of `1[U]LL`.",
      "range": {
        "startLine": 1989,
        "startChar": 28,
        "endLine": 1989,
        "endChar": 31
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2d8f277_e3a85a7a",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1991,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "Rename to rhs_imm_upper.",
      "range": {
        "startLine": 1991,
        "startChar": 22,
        "endLine": 1991,
        "endChar": 33
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "308b4300_f28238ae",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1993,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 1993,
        "startChar": 28,
        "endLine": 1993,
        "endChar": 31
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e28268c6_4a0bd0c7",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1997,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 1997,
        "startChar": 28,
        "endLine": 1997,
        "endChar": 31
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0394cfd_78bbbd69",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2004,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "the dst",
      "range": {
        "startLine": 2004,
        "startChar": 17,
        "endLine": 2004,
        "endChar": 20
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a928a8b_056d48fa",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2004,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "the intermediate",
      "range": {
        "startLine": 2004,
        "startChar": 62,
        "endLine": 2004,
        "endChar": 74
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "626ea243_a7df3a50",
        "filename": "compiler/optimizing/code_generator_mips64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2022,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-11-20T23:33:41Z",
      "side": 1,
      "message": "The below part for subtraction is almost identical to the above part for addition. Which makes the code unnecessarily long. I\u0027d handle both with the same code, only negating the constant in the beginning if it\u0027s subtraction.",
      "range": {
        "startLine": 2022,
        "startChar": 0,
        "endLine": 2022,
        "endChar": 14
      },
      "revId": "bd137179bdc1a52af3e8734ec986932d4bb2dbe7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}