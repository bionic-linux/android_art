{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2ef7fd09_789b2e61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "Looks good overall, but still a few things to fix.",
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b573187_b3e4cf53",
        "filename": "compiler/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "Couldn\u0027t this go away?",
      "range": {
        "startLine": 279,
        "startChar": 4,
        "endLine": 279,
        "endChar": 31
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8b7c26d_f9fdd3f6",
        "filename": "compiler/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Sorry, forgot to mention. `libart-compiler` headers are required for gtests and `dex2oat`/`oatdump`",
      "parentUuid": "8b573187_b3e4cf53",
      "range": {
        "startLine": 279,
        "startChar": 4,
        "endLine": 279,
        "endChar": 31
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4af4d3fd_16c80661",
        "filename": "compiler/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-04T13:26:09Z",
      "side": 1,
      "message": "Ok. Header access is still limited for libart-runtime, so there\u0027s that.",
      "parentUuid": "d8b7c26d_f9fdd3f6",
      "range": {
        "startLine": 279,
        "startChar": 4,
        "endLine": 279,
        "endChar": 31
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2caca6a5_24a3e924",
        "filename": "compiler/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 286,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "This doesn\u0027t make sense for a static lib. Please add a TODO about it moving.",
      "range": {
        "startLine": 286,
        "startChar": 4,
        "endLine": 286,
        "endChar": 42
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f62670a_ae88361c",
        "filename": "compiler/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 286,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2caca6a5_24a3e924",
      "range": {
        "startLine": 286,
        "startChar": 4,
        "endLine": 286,
        "endChar": 42
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7eadff3_85aa7d84",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "art/compiler/jit/jit_compiler.cc should include this to check its function signature.",
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f161c589_09e4e22b",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7eadff3_85aa7d84",
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efddd3a2_200c444d",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 20,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-03T09:33:20Z",
      "side": 1,
      "message": "Forward declaration of `JitCompilerInterface` should be enough. (This requires opening and closing namespaces; you can avoid the `art::jit::` below if you close the namespaces after `jit_load()`.)",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 20
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e4ad2fa_7404cc8c",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 20,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "efddd3a2_200c444d",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 20
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "719a1936_9881467e",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-03T09:33:20Z",
      "side": 1,
      "message": "How does this work now? Does the `libart-runtime` linked to `libart.so` create a PLT entry and resolve the symbol dynamically on first call?",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f86e44d5_40f31913",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Yes. I\u0027ll add `HIDDEN/EXPORT` attributes for `libart-compiler` in the next CL",
      "parentUuid": "719a1936_9881467e",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b99afc6_9a26cb88",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-04T13:26:09Z",
      "side": 1,
      "message": "No linking is taking place when the static `libart-runtime` and `libart-compiler` are built, so I thought all symbol references within and between them are resolved when libart.so is linked together. Is this symbol different from any other?",
      "parentUuid": "f86e44d5_40f31913",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b78d091_59080121",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-04T14:37:52Z",
      "side": 1,
      "message": "Vladimir is referring to a discussion we had about version script vs symbol visibility attributes in the code.\nAt the moment all `libart-compiler` symbols don\u0027t have explicitly specified visibility in the source, so the compiler has to assume `default` visibility when emitting calls to `libart-compiler` functions. Symbols with `default` visibility can be preempted (overridden by a definition with the same name in a different component), so such calls have to use PLT indirection, something like this:\n`call  jit_load@PLT`\n\nBy the way, since linker version script is applied only after compile - it doesn\u0027t change the situation.\nThat\u0027s why the further plan here is to use `HIDDEN/EXPORT` in the source. This way it\u0027s possible to both hide the symbols and avoid PLT.",
      "parentUuid": "8b99afc6_9a26cb88",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48ebcfa0_075ff46e",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-04T17:14:18Z",
      "side": 1,
      "message": "Interesting, I wasn\u0027t aware that functions by default have that indirection. I take it that applies to all symbols, not just this one, so the cost of those indirections is likely to be significant.\n\nWouldn\u0027t `-Bsymbolic(-functions)` help with this too? I don\u0027t think we\u0027re interested in this kind of overriding anywhere in ART (except in libsigchain, but there it\u0027s libc symbols we\u0027re overriding, not anything in ART itself).",
      "parentUuid": "2b78d091_59080121",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98160fdd_4ad00ae7",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-04T17:26:50Z",
      "side": 1,
      "message": "We\u0027re using the very unusual `-fvisibility\u003dprotected` and maybe that\u0027s enough to eliminate these indirections within a single .so file at link time.",
      "parentUuid": "48ebcfa0_075ff46e",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a29fe72_ea51db83",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-04T20:26:36Z",
      "side": 1,
      "message": "I\u0027ve tried `-Bsymbolic(-functions)` on a small example and it seems to remove PLT indirection on calls to functions with any visibility types (provided they are in the same library). Pretty useful.\n\n\n\u003eWe\u0027re using the very unusual -fvisibility\u003dprotected and maybe that\u0027s enough to eliminate these indirections within a single .so file at link time.\n\nLooking at `libart.so` disassembly, `Jit::Create` code that calls `jit_load`:\n`jit_load` with `EXPORT`: `call   c917f0 \u003cjit_load@plt\u003e`\n`jit_load` without attributes: `call   8fa830 \u003cjit_load@@Base\u003e`  (no plt probably because of `-fvisibility\u003dprotected`)\n`jit_load` with `HIDDEN`: no `jit_load` in disassembly at all",
      "parentUuid": "98160fdd_4ad00ae7",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4745a33e_67747c6a",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-04T21:35:44Z",
      "side": 1,
      "message": "Thanks for digging into it, Dmitrii! In that case I think it\u0027s well worth a try with `-Bsymbolic` (assuming it implies `-Bsymbolic-functions`) in `art_defaults` and see if it works. Is that something you plan to look into? Otherwise I will. I\u0027m curious to see what it does to both library sizes and speed.",
      "parentUuid": "2a29fe72_ea51db83",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79def305_b9cfa560",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-07T07:32:20Z",
      "side": 1,
      "message": "Reading the description of `-Bsymbolic`, I think it would make the `-fvisibility\u003dprotected` unnecessary.",
      "parentUuid": "4745a33e_67747c6a",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa98291_b440330b",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-07T10:17:59Z",
      "side": 1,
      "message": "Testing on top of this CL with x86_64 `libart.so`.\nUsing `-Bsymbolic` by adding the following in `art_defaults`:\n```\nldflags: [      \n    \"-Wl,-Bsymbolic\",\n    \"-Wl,-Bsymbolic-functions\",\n],\n```\nDisassembling .so with `objdump -d libart.so`, searching for PLT calls with `\u003c.*@plt\u003e` regex\n\n1) Only `-fvisibility\u003dprotected`\n`libart.so` size: 13514536\nUnique PLT calls: 656\n\n2) `-fvisibility\u003dprotected` and `-Bsymbolic`\n`libart.so` size: 13514408 (-128)\nUnique PLT calls: 651 (-5)\n\nThe 5 removed PLT calls:\nCpuFeatures_StringView_GetAttributeKeyValue\nGetX86Info\nStackLineReader_NextLine\nCpuFeatures_StringView_HasWord\nart_sigsegv_fault\nFirst 4 are from `libcpu_features`, which is linked as a whole-static lib\n`art_sigsegv_fault` is defined in `libart-runtime` and has `default` visibility\n\n\u003eReading the description of -Bsymbolic, I think it would make the -fvisibility\u003dprotected unnecessary.\n\nSo yes, it looks like it can. The only caveat I see is that it also removes PLT from calls to functions with explicitly set `default` visibility.\nBut if there are no cases where we need symbol preemption, it should be fine.\n\nOn the other hand, if we decide to stick with `-fvisibility\u003dhidden` only, we should also consider changing `libartbase` `EXPORT` macro to have `protected` visibility instead of `default`",
      "parentUuid": "79def305_b9cfa560",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6767ffa1_be309e71",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-07T17:12:31Z",
      "side": 1,
      "message": "\u003e Disassembling .so with objdump -d libart.so, searching for PLT calls with \u003c.*@plt\u003e regex\n\nHad a look myself. In the libart.so I had in my build tree I found 633 unique functions, but almost 61k calls, and they go to libc, libbase, libartbase, etc. Nothing strange there, but I expected `-Bsymbolic` to get rid of PLT indirections for practically all of those. Why doesn\u0027t it?\n\nBtw, I don\u0027t think this discussion, although interesting, needs to hold up this CL. Feel free to submit.",
      "parentUuid": "dfa98291_b440330b",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c5e50fe_cb86dfdb",
        "filename": "compiler/export/jit_load.h",
        "patchSetId": 18
      },
      "lineNbr": 23,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-07T19:18:54Z",
      "side": 1,
      "message": "As far as I understand, it removes PLT indirections for calls to functions in the same dynamic library. For calls to other dynamic libraries symbol lookup is still required.",
      "parentUuid": "6767ffa1_be309e71",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 51
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1012a15d_4f41125f",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "This gives the impression it\u0027s defaults for libart only, which isn\u0027t the case. Please rename it to (the recently vacated name) libart_common_defaults and add a comment saying it\u0027s common defaults for libart-runtime and libart.",
      "range": {
        "startLine": 132,
        "startChar": 10,
        "endLine": 132,
        "endChar": 27
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "553254b3_5405020e",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1012a15d_4f41125f",
      "range": {
        "startLine": 132,
        "startChar": 10,
        "endLine": 132,
        "endChar": 27
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7efd8e51_1dbae49e",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 161,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "libart-runtime doesn\u0027t call ld, so these shouldn\u0027t be necessary there. Following the suggestion with libart_defaults below, please move this too into it.",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 161,
        "endChar": 10
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c14adc3a_5a6792ed",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 161,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7efd8e51_1dbae49e",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 161,
        "endChar": 10
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e540400_cc7f5fbb",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 198,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "This is gone now.",
      "range": {
        "startLine": 198,
        "startChar": 13,
        "endLine": 198,
        "endChar": 34
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39a3f1ad_71024a5d",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 198,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e540400_cc7f5fbb",
      "range": {
        "startLine": 198,
        "startChar": 13,
        "endLine": 198,
        "endChar": 34
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4895f12_aa8be07a",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 207,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "Is this necessary for libart-runtime? If not, please break it out to a separate defaults to share between libart, libart-broken and libartd. Following the name change above it can appropriately be called libart_defaults.\n\nI\u0027d prefer if that defaults is put just above libart below.",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 207,
        "endChar": 6
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "603049d0_5eb092a6",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 207,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4895f12_aa8be07a",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 207,
        "endChar": 6
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50c8f41e_c50f1f71",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 537,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "Dup.",
      "range": {
        "startLine": 526,
        "startChar": 0,
        "endLine": 537,
        "endChar": 10
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed0ff6aa_690ebf49",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 537,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50c8f41e_c50f1f71",
      "range": {
        "startLine": 526,
        "startChar": 0,
        "endLine": 537,
        "endChar": 10
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c34438c_aad2000b",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 691,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "Please add a comment to describe what separates this from libart.",
      "range": {
        "startLine": 691,
        "startChar": 10,
        "endLine": 691,
        "endChar": 26
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c680489_688289f0",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 691,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c34438c_aad2000b",
      "range": {
        "startLine": 691,
        "startChar": 10,
        "endLine": 691,
        "endChar": 26
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a46b72b1_b90a47c3",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 784,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "Nit: Uppercase",
      "range": {
        "startLine": 784,
        "startChar": 11,
        "endLine": 784,
        "endChar": 15
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53aaf5df_682b786c",
        "filename": "runtime/Android.bp",
        "patchSetId": 18
      },
      "lineNbr": 784,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a46b72b1_b90a47c3",
      "range": {
        "startLine": 784,
        "startChar": 11,
        "endLine": 784,
        "endChar": 15
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8d39792_f4a37eda",
        "filename": "runtime/jit/jit.cc",
        "patchSetId": 18
      },
      "lineNbr": 191,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-02T23:20:43Z",
      "side": 1,
      "message": "Looking at `jit_load` in jit_compiler.cc I don\u0027t think this can happen. Please clean it up, and also check if nullptr error handling can be cleaned up at call sites too.\n\nActually, I wonder if `Jit::Create` can return a unique_ptr instead of a bare pointer, but that\u0027s perhaps a separate cleanup.",
      "range": {
        "startLine": 191,
        "startChar": 6,
        "endLine": 191,
        "endChar": 30
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2cdb5a0e_6209dfcf",
        "filename": "runtime/jit/jit.cc",
        "patchSetId": 18
      },
      "lineNbr": 191,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2022-11-03T19:15:42Z",
      "side": 1,
      "message": "Done\n\nGood point, I\u0027ll address the unique_ptr improvement outside of this CL",
      "parentUuid": "e8d39792_f4a37eda",
      "range": {
        "startLine": 191,
        "startChar": 6,
        "endLine": 191,
        "endChar": 30
      },
      "revId": "2664f52a5ab890123cb2ac2cd664359af02bc996",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}