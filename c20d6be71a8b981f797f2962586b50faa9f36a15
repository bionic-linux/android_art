{
  "comments": [
    {
      "key": {
        "uuid": "208ed2b5_18443f9a",
        "filename": "runtime/debugger.cc",
        "patchSetId": 1
      },
      "lineNbr": 965,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-27T09:42:06Z",
      "side": 1,
      "message": "/* use_is_assignable_from */",
      "range": {
        "startLine": 965,
        "startChar": 66,
        "endLine": 965,
        "endChar": 67
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73ecead2_d29748ab",
        "filename": "runtime/debugger.cc",
        "patchSetId": 1
      },
      "lineNbr": 965,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-11-28T10:36:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "208ed2b5_18443f9a",
      "range": {
        "startLine": 965,
        "startChar": 66,
        "endLine": 965,
        "endChar": 67
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc7aaa37_65a81849",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 350,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-11-27T16:21:35Z",
      "side": 1,
      "message": "Consider templatizing instead to avoid the branch on every object?",
      "range": {
        "startLine": 350,
        "startChar": 7,
        "endLine": 350,
        "endChar": 19
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4e68cb6_213e4359",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 350,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-11-28T10:36:46Z",
      "side": 1,
      "message": "I would rather not in this CL.\n\nDo you expect this to have a significant impact on performance? Wouldn\u0027t branch prediction save us from the cost of a branch on every object? Given that this is an API for use in debugging, I don\u0027t think performance is that critical.\n\nFor the actionable memory metric use case, I think a better performance optimization would be to have GetInstances take an array of classes and collect all the instances in a single pass instead of using a separate pass for each class. I think I may want to make that change eventually, but for this CL my main goal is to get the VMDebug API in place.",
      "parentUuid": "dc7aaa37_65a81849",
      "range": {
        "startLine": 350,
        "startChar": 7,
        "endLine": 350,
        "endChar": 19
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "255ef2ec_f8d75522",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 350,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-11-28T16:39:30Z",
      "side": 1,
      "message": "A53s (and even older CPUs) aren\u0027t know for particularly great branch prediction (and are in-order, so any branches are iffy), and if you have a large-heap app, there might be millions of objects. I don\u0027t think it\u0027s an issue for debugging, but for profiling purposes it might be (though the various locks that need to be acquired may already mean enough overhead to make this negligible). Maybe you could do some very simple timing and report the numbers in the commit message?",
      "parentUuid": "d4e68cb6_213e4359",
      "range": {
        "startLine": 350,
        "startChar": 7,
        "endLine": 350,
        "endChar": 19
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c2ab84b_5239d667",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 350,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-28T17:24:35Z",
      "side": 1,
      "message": "Given we\u0027re iterating over the heap, I doubt this will show up.",
      "parentUuid": "255ef2ec_f8d75522",
      "range": {
        "startLine": 350,
        "startChar": 7,
        "endLine": 350,
        "endChar": 19
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92dc7e52_2292caf5",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 350,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-11-29T15:48:48Z",
      "side": 1,
      "message": "I added a benchmark to the libcore CL (https://android-review.googlesource.com/#/c/platform/libcore/+/546801/) and put the numbers in the commit message.\n\nWhen I tried hard coding use_is_assignable_from to true in the code, it saved around 4-5ms out of the 87ms to get instances of 4 classes with around half a million objects allocated on the heap.\n\nI also tried using a single heap iteration to get instances of all classes rather than a separate iteration for each class. I was surprised to find that it only saved 2-3ms out of 87ms.\n\nI would rather leave the change as is than complicate it with templates at this time.",
      "parentUuid": "2c2ab84b_5239d667",
      "range": {
        "startLine": 350,
        "startChar": 7,
        "endLine": 350,
        "endChar": 19
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e0253f9_b52fd82e",
        "filename": "runtime/native/dalvik_system_VMDebug.cc",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-11-27T09:42:06Z",
      "side": 1,
      "message": "Looks to me you don\u0027t need this vector. You can work directly on the decoded_classes array.",
      "range": {
        "startLine": 334,
        "startChar": 2,
        "endLine": 334,
        "endChar": 45
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3af5193c_680eb943",
        "filename": "runtime/native/dalvik_system_VMDebug.cc",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1057373
      },
      "writtenOn": "2017-11-28T10:36:46Z",
      "side": 1,
      "message": "I copied this from the above countInstancesOfClasses implementation, because I\u0027m not entirely confident in my ability to correctly use Handles.\n\nCan you double check that my use of handles looks okay now that I removed the superfluous vector?",
      "parentUuid": "5e0253f9_b52fd82e",
      "range": {
        "startLine": 334,
        "startChar": 2,
        "endLine": 334,
        "endChar": 45
      },
      "revId": "c20d6be71a8b981f797f2962586b50faa9f36a15",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}