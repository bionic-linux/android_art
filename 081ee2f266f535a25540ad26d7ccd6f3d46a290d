{
  "comments": [
    {
      "key": {
        "uuid": "c4ae4a93_780d613f",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 490,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-09-07T14:01:14Z",
      "side": 1,
      "message": "Please use a more revealing name and add documentation. *New* will not be so *new* anymore after a few weeks.",
      "range": {
        "startLine": 490,
        "startChar": 61,
        "endLine": 490,
        "endChar": 83
      },
      "revId": "081ee2f266f535a25540ad26d7ccd6f3d46a290d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6492fe15_ee687d02",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 490,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-07T17:01:55Z",
      "side": 1,
      "message": "? :-)\n\nNew is not because I wrote this code yesterday, but it denotes I am creating a new node, possibly simplified.\n\nSee L103-113 in the header, NewInvariantOp, NewInvariantFetch, NewInduction.",
      "parentUuid": "c4ae4a93_780d613f",
      "range": {
        "startLine": 490,
        "startChar": 61,
        "endLine": 490,
        "endChar": 83
      },
      "revId": "081ee2f266f535a25540ad26d7ccd6f3d46a290d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4deb6f4_f5413029",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 493,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-07T09:14:50Z",
      "side": 1,
      "message": "Perform some light-weight....",
      "range": {
        "startLine": 493,
        "startChar": 5,
        "endLine": 493,
        "endChar": 52
      },
      "revId": "081ee2f266f535a25540ad26d7ccd6f3d46a290d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44141a88_a4ccf74a",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 493,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-07T17:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4deb6f4_f5413029",
      "range": {
        "startLine": 493,
        "startChar": 5,
        "endLine": 493,
        "endChar": 52
      },
      "revId": "081ee2f266f535a25540ad26d7ccd6f3d46a290d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4deb6f4_b54ba847",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 529,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-07T09:14:50Z",
      "side": 1,
      "message": "Do you actually see this in practice? I\u0027d assume other optimization phases would take care of it already.",
      "range": {
        "startLine": 496,
        "startChar": 0,
        "endLine": 529,
        "endChar": 3
      },
      "revId": "081ee2f266f535a25540ad26d7ccd6f3d46a290d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "240f267a_2c375219",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 529,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-07T17:01:55Z",
      "side": 1,
      "message": "Yes, the 1, 0, and probably -1 are very common in induction. Note that these nodes are not in the HIR yet. If they would be, indeed instruction simplification would kick in, which is why I only do some light weight here, I will rely on HIR simplification later. But avoiding some of the very obvious cases saves a ton of new nodes in memory during analysis (viz. x + 0 and 1 * x occur a lot, see the tests alone already).",
      "parentUuid": "a4deb6f4_b54ba847",
      "range": {
        "startLine": 496,
        "startChar": 0,
        "endLine": 529,
        "endChar": 3
      },
      "revId": "081ee2f266f535a25540ad26d7ccd6f3d46a290d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}