{
  "comments": [
    {
      "key": {
        "uuid": "8ad258ef_d6124747",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 653,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-27T09:51:19Z",
      "side": 1,
      "message": "Why isn\u0027t a handle good enough?",
      "range": {
        "startLine": 653,
        "startChar": 0,
        "endLine": 653,
        "endChar": 98
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc296793_edfe00b4",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-03-26T15:39:39Z",
      "side": 1,
      "message": "Is this a good idea? We have no control over scheduling, a user might race this by loading a class.",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f132c835_40f2fdce",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-03-26T15:41:16Z",
      "side": 1,
      "message": "(To reformulate: is FATAL really a good idea?)",
      "parentUuid": "cc296793_edfe00b4",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f161fea_ddd9ea31",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2019-03-26T15:59:01Z",
      "side": 1,
      "message": "Pardon my naïveté but how can this race? From looking at the code of RegisterDexFile it looks like it acquires locks appropriately. If user loads a class, this should just get the registered DexCache. DexFile_defineClassNative does this too (minus the LOG(FATAL)) so what you\u0027re saying is that you could race two class loads?",
      "parentUuid": "f132c835_40f2fdce",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d174ef80_c6d32feb",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-03-26T17:06:55Z",
      "side": 1,
      "message": "This isn\u0027t on the main thread. So the typical hacks of accessing the elements on the main thread could extract the dex file, and put it into another classloader, if the kernel schedules this late.",
      "parentUuid": "0f161fea_ddd9ea31",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e60280_98934e74",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2019-03-26T17:39:13Z",
      "side": 1,
      "message": "Ah, that\u0027s what you mean. If they move the elements to a different class loader, this will indeed crash. That was intended on my part because the use cases we have seen do not instantiate InMemDexCL but call DexPathList.makeInMemoryDexElements via reflection and I\u0027m preserving that (makeInMemoryDexElements will not invoke the bg thread).\n\nDo you think it\u0027s too harsh to crash here? There will be a race and if the bg thread wins it, the app won\u0027t be able to define any classes from that class loader anyway. LOG(FATAL) makes it clear that something is not right.",
      "parentUuid": "d174ef80_c6d32feb",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd8dd4f_dc59186a",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-03-26T17:41:28Z",
      "side": 1,
      "message": "Well, Vladimir decided not to crash and throw that exception for the \"regular\" case. I think it makes sense to be consistent, but at least we discussed it, that\u0027s the important part.",
      "parentUuid": "43e60280_98934e74",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f31f9ecb_46500017",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2019-03-26T17:45:55Z",
      "side": 1,
      "message": "I thought I was being consistent with this:\nhttps://cs.corp.google.com/aosp-master/art/runtime/entrypoints/entrypoint_utils-inl.h?rcl\u003d338403c9000a4ff8fbb73fd107fce25801345626\u0026l\u003d99\n\ni.e. make sure legacy apps don\u0027t crash (makeInMemoryDexElements) and crash for new users.",
      "parentUuid": "cbd8dd4f_dc59186a",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb85a59a_6172d995",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-03-27T09:51:19Z",
      "side": 1,
      "message": "I\u0027d argue a failing RegisterDexFile shouldn\u0027t crash, or we should be consistent and have the crash happen inside RegisterDexfile.",
      "parentUuid": "f31f9ecb_46500017",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a28341da_d11e9c43",
        "filename": "runtime/oat_file_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 679,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2019-03-28T15:07:55Z",
      "side": 1,
      "message": "Okay, two against one. I\u0027ll make this print an error and skip the dex file instead. If this thread wins, then defineClass() will throw InternalError.",
      "parentUuid": "cb85a59a_6172d995",
      "range": {
        "startLine": 675,
        "startChar": 7,
        "endLine": 679,
        "endChar": 22
      },
      "revId": "e383964f8688594c32a4b623497ee6c2a72424f9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}