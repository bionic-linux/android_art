{
  "comments": [
    {
      "key": {
        "uuid": "d9fb8c32_a8a134b3",
        "filename": "runtime/memory_region.h",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-06-01T13:14:09Z",
      "side": 1,
      "message": "Maybe we should (D)CHECK that `vector` fits in the MemoryRegion?",
      "range": {
        "startLine": 152,
        "startChar": 49,
        "endLine": 153,
        "endChar": 35
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7919c071_0267f41b",
        "filename": "runtime/memory_region.h",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-06-01T13:16:06Z",
      "side": 1,
      "message": "I can check that the highest set bit is within the bounds. BitVector does not remember its true size.",
      "parentUuid": "d9fb8c32_a8a134b3",
      "range": {
        "startLine": 152,
        "startChar": 49,
        "endLine": 153,
        "endChar": 35
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d42d931_43b20179",
        "filename": "runtime/memory_region.h",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-06-01T13:20:44Z",
      "side": 1,
      "message": "Yes, this is what I meant; sorry if it wasn\u0027t clear. :)",
      "parentUuid": "7919c071_0267f41b",
      "range": {
        "startLine": 152,
        "startChar": 49,
        "endLine": 153,
        "endChar": 35
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9fb8c32_e8705cd3",
        "filename": "runtime/stack_map.h",
        "patchSetId": 5
      },
      "lineNbr": 673,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-06-01T12:59:10Z",
      "side": 1,
      "message": "dcheck sizes please. FillWith is to generic and here we actually expect equal sizes.",
      "range": {
        "startLine": 673,
        "startChar": 23,
        "endLine": 673,
        "endChar": 31
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7919c071_a2160078",
        "filename": "runtime/stack_map.h",
        "patchSetId": 5
      },
      "lineNbr": 673,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-06-01T13:06:14Z",
      "side": 1,
      "message": "Um, that\u0027s tricky because BitVector does not know it\u0027s true size. It allocates an array of uint32 big enough to fit the highest set bit and all the higher bits are implicitly zero. The size that it returns is the length of the array.\n\nThat means:\n- the reported size might be smaller if not all bits are used\n- the reported size might be bigger because the array is allocated in 32-bit chunks",
      "parentUuid": "d9fb8c32_e8705cd3",
      "range": {
        "startLine": 673,
        "startChar": 23,
        "endLine": 673,
        "endChar": 31
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d42d931_4369216b",
        "filename": "runtime/stack_map.h",
        "patchSetId": 5
      },
      "lineNbr": 673,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-06-01T13:16:44Z",
      "side": 1,
      "message": "huh, that means we are relying on internal details of the BitVector in FillWith which is not ideal... it adds an extra cloud on something whose correctness was trivial to see. \n\nCould you at least add some docs to the GetRawStorage()? It will minimize the amount of future reasoning when we look at this code again.",
      "parentUuid": "7919c071_a2160078",
      "range": {
        "startLine": 673,
        "startChar": 23,
        "endLine": 673,
        "endChar": 31
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7919c071_2239d001",
        "filename": "runtime/stack_map.h",
        "patchSetId": 5
      },
      "lineNbr": 673,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-06-01T13:21:39Z",
      "side": 1,
      "message": "If that\u0027s the issue, we could move this back to BitVector, so that the implementation details are hidden in the class.",
      "parentUuid": "6d42d931_4369216b",
      "range": {
        "startLine": 673,
        "startChar": 23,
        "endLine": 673,
        "endChar": 31
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9fb8c32_c87da02b",
        "filename": "runtime/stack_map.h",
        "patchSetId": 5
      },
      "lineNbr": 673,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-06-01T14:40:10Z",
      "side": 1,
      "message": "Yea, I\u0027ll do that. Thanks.",
      "parentUuid": "7919c071_2239d001",
      "range": {
        "startLine": 673,
        "startChar": 23,
        "endLine": 673,
        "endChar": 31
      },
      "revId": "572d278e195b12562d7d5c32f27b73655a4d2e09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}