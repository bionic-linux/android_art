{
  "comments": [
    {
      "key": {
        "uuid": "f97c9576_1028d948",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-06-05T14:49:21Z",
      "side": 1,
      "message": "Which part does is not working with a single unified module definition?",
      "revId": "3d44584c9d42be7fc44fe31f32b23330cc7da9bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11af56c9_d01279a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2019-06-05T14:58:34Z",
      "side": 1,
      "message": "AFAIU, you cannot conditionally use multilib suffixes (nor symlink_preferred_arch). Ideally, we wanted to have something like that:\n\n  target: {\n      android: {\n        // Compile dex2oatd as a single binary (with no suffix).\n        compile_multilib: \"prefer32\",\n      },\n      host: {\n          // Compile dex2oatd as multilib binaries + symlink.\n          compile_multilib: \"both\",\n          multilib: {\n              lib32: {\n                  suffix: \"32\",\n              },\n              lib64: {\n                  suffix: \"64\",\n              },\n          },\n          symlink_preferred_arch: true,\n      },\n  }",
      "parentUuid": "f97c9576_1028d948",
      "revId": "3d44584c9d42be7fc44fe31f32b23330cc7da9bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b50373ab_5ea30744",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-06-05T17:06:05Z",
      "side": 1,
      "message": "For symlink_preferred_arch we can just add `android:\"arch_variant\"` to the property definition.  multilib can\u0027t be embedded in host because they are both created at runtime alongside eachother.  We already support target.android32 and target.android64, I can easily add the same for target.host32 and target.host64.",
      "parentUuid": "11af56c9_d01279a3",
      "revId": "3d44584c9d42be7fc44fe31f32b23330cc7da9bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "331daeca_e43a7c63",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-06-05T17:15:26Z",
      "side": 1,
      "message": "Actually target.android64 semantics are a little strange (https://android.googlesource.com/platform/build/soong/+/933d2a8e636d6f126619be3a70e292c74777f248/android/arch.go?pli\u003d1#1347), and target.host64 shouldn\u0027t have different semantics.  Since you don\u0027t support darwin you could write this as:\n\ntarget: {\n    android: {\n        // Compile dex2oatd as a single binary (with no suffix).\n        compile_multilib: \"prefer32\",\n    },\n    host: {\n        // Compile dex2oatd as multilib binaries + symlink.\n        compile_multilib: \"both\",\n        symlink_preferred_arch: true,\n    },\n    linux_glibc_x86: {\n        suffix: \"32\",\n    },\n    linux_glibc_x86_64: {\n        suffix: \"64\",\n    },\n}",
      "parentUuid": "b50373ab_5ea30744",
      "revId": "3d44584c9d42be7fc44fe31f32b23330cc7da9bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acfc2205_78369423",
        "filename": "build/apex/art_apex_test.py",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-06-05T14:56:08Z",
      "side": 1,
      "message": "This is unused now. Suggest getting rid of it.",
      "range": {
        "startLine": 278,
        "startChar": 0,
        "endLine": 280,
        "endChar": 29
      },
      "revId": "3d44584c9d42be7fc44fe31f32b23330cc7da9bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b3b9a11_4f958dde",
        "filename": "dex2oat/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 302,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-06-05T14:56:08Z",
      "side": 1,
      "message": "dex2oatd-target, to make the distinction more clear?",
      "range": {
        "startLine": 302,
        "startChar": 11,
        "endLine": 302,
        "endChar": 19
      },
      "revId": "3d44584c9d42be7fc44fe31f32b23330cc7da9bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45293fab_88514367",
        "filename": "dex2oat/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 327,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-06-05T14:56:08Z",
      "side": 1,
      "message": "Isn\u0027t it possible to reuse art_cc_binary here? The name still makes it clear it\u0027s for host only.",
      "range": {
        "startLine": 327,
        "startChar": 0,
        "endLine": 327,
        "endChar": 18
      },
      "revId": "3d44584c9d42be7fc44fe31f32b23330cc7da9bf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}