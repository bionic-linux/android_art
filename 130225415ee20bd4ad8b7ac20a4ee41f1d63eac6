{
  "comments": [
    {
      "key": {
        "uuid": "00622024_5971a3e5",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 4
      },
      "lineNbr": 3215,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-08T15:36:16Z",
      "side": 1,
      "message": "CodeGenerator::GetInt32ValueOf(rhs.GetConstant())",
      "range": {
        "startLine": 3215,
        "startChar": 19,
        "endLine": 3215,
        "endChar": 65
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "856aa2d7_b78ae8cb",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 4
      },
      "lineNbr": 3215,
      "author": {
        "id": 1076052
      },
      "writtenOn": "2015-12-10T10:13:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00622024_5971a3e5",
      "range": {
        "startLine": 3215,
        "startChar": 19,
        "endLine": 3215,
        "endChar": 65
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5596647_11a86eb3",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-12-10T02:59:40Z",
      "side": 1,
      "message": "Shouldn\u0027t we let DCE remove these? The code in this file seems to alternate between deleting and letting DCE delete.",
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c539fad1_71d458df",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-12-10T10:14:37Z",
      "side": 1,
      "message": "When I reviewed it I didn\u0027t see places where this patch didn\u0027t delete what it could. For now transformations in the simplifier would remove what they could. That\u0027s an interesting question though. I don\u0027t have a strong opinion on this. It would be nice to have a general rule to follow. Any opinions?",
      "parentUuid": "a5596647_11a86eb3",
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "457c2aa4_b55d0055",
        "filename": "compiler/optimizing/instruction_simplifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-12-10T10:22:48Z",
      "side": 1,
      "message": "Some thoughts on this\n- By leaving the work to DCE, transformations may be lazy and wrongly assume that an IR will be removed, potentially leaving extra IRs in the graph or applying transformations when they should not.\n- If we leave the work to DCE, then it may be harder to check an IR has been removed with checker, as it must be checked after other passes have run. (It would be a little annoying to have an additional checker section, but it should be fine.)\n- So maybe a good rule would be: if an IR should be removed as part of the transformation, do it manually (forcing manual checks). If it is optional, as it is here, leave it to DCE.",
      "parentUuid": "c539fad1_71d458df",
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00622024_f9886f08",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 4170,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-08T15:36:16Z",
      "side": 1,
      "message": "Line too long.",
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "856aa2d7_57590c3c",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 4170,
      "author": {
        "id": 1076052
      },
      "writtenOn": "2015-12-10T10:13:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00622024_f9886f08",
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0d6b40a_63f93ca8",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 4185,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-08T15:36:16Z",
      "side": 1,
      "message": "You may have missed my comment in PS1/nodes_arm64.h. Updated version:\n\nIf you don\u0027t reject this here, you should allow it everywhere. That includes InstructionCodeGeneratorARM::HandleLongRotate() where you\u0027re now using GetInt32ValueOf() which cannot handle long constants, so you would actually need GetInt64ValueOf().",
      "range": {
        "startLine": 4182,
        "startChar": 0,
        "endLine": 4185,
        "endChar": 3
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "457c2aa4_f563781e",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 4
      },
      "lineNbr": 4185,
      "author": {
        "id": 1076052
      },
      "writtenOn": "2015-12-10T10:13:53Z",
      "side": 1,
      "message": "Fixed in HandleLongRotate. If you\u0027d prefer we reject this I can return nullptr here.",
      "parentUuid": "a0d6b40a_63f93ca8",
      "range": {
        "startLine": 4182,
        "startChar": 0,
        "endLine": 4185,
        "endChar": 3
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c001e83e_d41e1238",
        "filename": "test/541-checker-instruction-simplifier-rotate/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-08T15:36:16Z",
      "side": 1,
      "message": "For the CHECK-NOTs, I would go without the intrinsic specification. We don\u0027t expect any invoke here.",
      "range": {
        "startLine": 45,
        "startChar": 43,
        "endLine": 45,
        "endChar": 71
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a054f4e4_d3516615",
        "filename": "test/541-checker-instruction-simplifier-rotate/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1076052
      },
      "writtenOn": "2015-12-10T10:13:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c001e83e_d41e1238",
      "range": {
        "startLine": 45,
        "startChar": 43,
        "endLine": 45,
        "endChar": 71
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00622024_d985b3ee",
        "filename": "test/541-checker-instruction-simplifier-rotate/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-08T15:36:16Z",
      "side": 1,
      "message": "Indentation.",
      "range": {
        "startLine": 190,
        "startChar": 41,
        "endLine": 190,
        "endChar": 44
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00430035_8b716dec",
        "filename": "test/541-checker-instruction-simplifier-rotate/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1076052
      },
      "writtenOn": "2015-12-10T10:13:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00622024_d985b3ee",
      "range": {
        "startLine": 190,
        "startChar": 41,
        "endLine": 190,
        "endChar": 44
      },
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "253496db_c0bc4e86",
        "filename": "test/542-bitfield-rotates/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-12-10T04:13:08Z",
      "side": 1,
      "message": "I\u0027m implementing the x86 version of these, and I notice that they all get folded at compile time, and don\u0027t test the runtime cases at all.  The resulting code just calls assertXXXEquals(x, x), which is nice, but doesn\u0027t test the code generation.",
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "856aa2d7_775e9027",
        "filename": "test/542-bitfield-rotates/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1076052
      },
      "writtenOn": "2015-12-10T10:13:53Z",
      "side": 1,
      "message": "True. These are more boundary cases for the folding. 541 tests the codegen.\n\nWhat are you doing for an \"x86 version\" of these?",
      "parentUuid": "253496db_c0bc4e86",
      "revId": "130225415ee20bd4ad8b7ac20a4ee41f1d63eac6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}