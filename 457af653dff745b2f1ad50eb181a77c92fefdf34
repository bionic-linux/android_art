{
  "comments": [
    {
      "key": {
        "uuid": "10807fc3_b6ec289a",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 3
      },
      "lineNbr": 467,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-09-03T23:54:01Z",
      "side": 1,
      "message": "Should this also capture operand commutativity?",
      "range": {
        "startLine": 467,
        "startChar": 19,
        "endLine": 467,
        "endChar": 25
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1cfe4_52413423",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 3
      },
      "lineNbr": 467,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-09-04T09:45:02Z",
      "side": 1,
      "message": "I think I\u0027d rather have instructions order their inputs consistently (eg ordered by id), than complicate the equality.\n\nBut that\u0027s a good point for a future optimization.",
      "parentUuid": "10807fc3_b6ec289a",
      "range": {
        "startLine": 467,
        "startChar": 19,
        "endLine": 467,
        "endChar": 25
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1cfe4_61e3406a",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-09-08T14:05:40Z",
      "side": 1,
      "message": "I fail to see the difference between a \"kind\" and a \"type\".   Perhaps you should state it more clearly in the definition of `KindEquals()\u0027 in `compiler/optimizing/nodes.cc\u0027.  In particular, what\u0027s the difference between `!KindEquals(other)\u0027 and `GetType() !\u003d other-\u003eGetType()\u0027?",
      "range": {
        "startLine": 470,
        "startChar": 6,
        "endLine": 470,
        "endChar": 35
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90fd4f75_95848651",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-09-08T14:15:02Z",
      "side": 1,
      "message": "Yeah I agree it\u0027s confusing. I could rename KindEquals into InstructionKind, what do you think?\n\nThe GetType is the Java type of the instruction.",
      "parentUuid": "90d1cfe4_61e3406a",
      "range": {
        "startLine": 470,
        "startChar": 6,
        "endLine": 470,
        "endChar": 35
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0aa0b52_aeecbb99",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-09-08T15:12:35Z",
      "side": 1,
      "message": "Alright, it is much clearer for me now, thanks.  Renaming `KindEquals\u0027 to `InstructionKindEquals\u0027 (or even to `InstructionTypeEquals\u0027) looks good to me.",
      "parentUuid": "90fd4f75_95848651",
      "range": {
        "startLine": 470,
        "startChar": 6,
        "endLine": 470,
        "endChar": 35
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10807fc3_39f80bde",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-09-03T23:54:01Z",
      "side": 1,
      "message": "Should exceptions be captured as side-effects? How are side-effects of the following instructions captured: move-exception and sget?",
      "range": {
        "startLine": 484,
        "startChar": 6,
        "endLine": 484,
        "endChar": 17
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0a0a75c_7cf7596b",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-09-04T09:45:02Z",
      "side": 1,
      "message": "As you can see, the flags I\u0027ve put in here are pretty basic: all or nothing. In a former project, exceptions were dealt separately, which was a bit annoying, so we might consider putting exceptions in this class.\n\nNote that move-exception do not exist at this level (there is no dex register). About sget, it will be decomposed in a series of instructions (clinit, static-get), where the clinit might throw.",
      "parentUuid": "10807fc3_39f80bde",
      "range": {
        "startLine": 484,
        "startChar": 6,
        "endLine": 484,
        "endChar": 17
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f04e8b81_9111ffbc",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 504,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-09-03T23:54:01Z",
      "side": 1,
      "message": "Seems that a future enhancement here should be being more explicit with the semantics and differentiate between all \"somethings\".\n\nFrom the uses below seems that this is being used for heap stores and depends on something is a heap load.",
      "range": {
        "startLine": 504,
        "startChar": 23,
        "endLine": 504,
        "endChar": 44
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1cfe4_3240301d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 504,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-09-04T09:45:02Z",
      "side": 1,
      "message": "Yes, this will be refined the further we go. The current class is just to have an abstraction over side effects.",
      "parentUuid": "f04e8b81_9111ffbc",
      "range": {
        "startLine": 504,
        "startChar": 23,
        "endLine": 504,
        "endChar": 44
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90fd4f75_b5154a5d",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 616,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-09-08T14:05:40Z",
      "side": 1,
      "message": "Maybe add that \"data\" here refers only to information stored in the instruction itself, and does not take its inputs into account?",
      "range": {
        "startLine": 616,
        "startChar": 5,
        "endLine": 616,
        "endChar": 71
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90fd4f75_55833e4a",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 616,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-09-08T14:15:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90fd4f75_b5154a5d",
      "range": {
        "startLine": 616,
        "startChar": 5,
        "endLine": 616,
        "endChar": 71
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1cfe4_0186f490",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 617,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-09-08T14:05:40Z",
      "side": 1,
      "message": "This check is not enforced in the implementation, so I guess this means \"otherwise this method will fail/its behavior is not defined\".",
      "range": {
        "startLine": 616,
        "startChar": 72,
        "endLine": 617,
        "endChar": 43
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90fd4f75_757e4286",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 3
      },
      "lineNbr": 617,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-09-08T14:15:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90d1cfe4_0186f490",
      "range": {
        "startLine": 616,
        "startChar": 72,
        "endLine": 617,
        "endChar": 43
      },
      "revId": "457af653dff745b2f1ad50eb181a77c92fefdf34",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}