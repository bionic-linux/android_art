{
  "comments": [
    {
      "key": {
        "uuid": "aa33dcf3_e15cec00",
        "filename": "compiler/optimizing/induction_var_analysis_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-01T00:14:23Z",
      "side": 1,
      "message": "PTAL\n\nthis beautiful syntax ensures that the test\nis less sensitive on how the SSA graph is built",
      "range": {
        "startLine": 403,
        "startChar": 5,
        "endLine": 403,
        "endChar": 7
      },
      "revId": "d89d710bd5f41d91b6eb7ea88a37eb4b6888caf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaf154a3_eededffd",
        "filename": "compiler/optimizing/induction_var_analysis_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-01T00:18:11Z",
      "side": 1,
      "message": "that seems like it could be better off replacing every character that actually needs escaping after the fact with its escaped version. \n\n(it doesn\u0027t seem like there\u0027s any non-escaped usage of these special characters is there?)",
      "parentUuid": "aa33dcf3_e15cec00",
      "range": {
        "startLine": 403,
        "startChar": 5,
        "endLine": 403,
        "endChar": 7
      },
      "revId": "d89d710bd5f41d91b6eb7ea88a37eb4b6888caf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a6260ef_2b22d8a8",
        "filename": "compiler/optimizing/induction_var_analysis_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-01T00:24:20Z",
      "side": 1,
      "message": "I am not sure I follow.\n( ) + * \nneed special treatment with \\\nSince this is C++ we need to escape \\ as \\\\\n(alternatively we could use raw strings, but same thing)",
      "parentUuid": "eaf154a3_eededffd",
      "range": {
        "startLine": 403,
        "startChar": 5,
        "endLine": 403,
        "endChar": 7
      },
      "revId": "d89d710bd5f41d91b6eb7ea88a37eb4b6888caf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a6260ef_0b9b9449",
        "filename": "compiler/optimizing/induction_var_analysis_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-01T00:31:41Z",
      "side": 1,
      "message": "Ah, I think I know what you meant\n(build the regexp string using replacements).\n\nUnfortunately we use + as literal, and also as reg exp in d+\n\n(there are ways around that, but seems this is easiest way)",
      "parentUuid": "eaf154a3_eededffd",
      "range": {
        "startLine": 403,
        "startChar": 5,
        "endLine": 403,
        "endChar": 7
      },
      "revId": "d89d710bd5f41d91b6eb7ea88a37eb4b6888caf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5ce834_6128fa88",
        "filename": "compiler/optimizing/induction_var_analysis_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-01T00:35:36Z",
      "side": 1,
      "message": "It looks like it\u0027s trying to express these literal characters:\n\n  (:)*+\n\nhowever since in regex grammar they are special (denoting a capture group, a wildcard, and so on..) they need to be escaped with a \\, but then C++ makes us escape with \\\\\n\nSo usages instead end up looking like:\n\n  \\\\(\n  \\\\:\n  \\\\)\n  \\\\*\n  \\\\+\n\nThe only situation here which wants to use a non-literal is \u0027\\d+\u0027 as that is truly trying to match any digit\n\nI don\u0027t see any capture groups or wild cards used here, so I was just musing the following characters could get \\\\ substituted after-the-fact (with a string replace):\n\n  (:)*  \n\n(but not + since there\u0027s another + which is used without \\\\)\n\ne.g.\n\n  \"((2:Constant) * i + ...\".replace(r\"\\\\(|\\\\:\\\\)\\\\*\", \"\\\\$1\") ,\n   // replace with actual regex method there\n\n(or alternatively just use [:], [(], [+], [*], thats slightly more readable than \\\\: , \\\\(, etc IMHO).",
      "parentUuid": "4a6260ef_2b22d8a8",
      "range": {
        "startLine": 403,
        "startChar": 5,
        "endLine": 403,
        "endChar": 7
      },
      "revId": "d89d710bd5f41d91b6eb7ea88a37eb4b6888caf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa33dcf3_2138b487",
        "filename": "compiler/optimizing/induction_var_analysis_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-08-01T00:38:58Z",
      "side": 1,
      "message": "Our comments crossed :-)\nIf you really insist, I will change\nbut imho nothing that uses regexpr is readable :-)",
      "parentUuid": "0a5ce834_6128fa88",
      "range": {
        "startLine": 403,
        "startChar": 5,
        "endLine": 403,
        "endChar": 7
      },
      "revId": "d89d710bd5f41d91b6eb7ea88a37eb4b6888caf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a5f2428_999ec76c",
        "filename": "compiler/optimizing/induction_var_analysis_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-08-01T00:44:17Z",
      "side": 1,
      "message": "I believe only having to escape \\\\d+ would be ideal but that seems like a lot of work so it\u0027s probably not worth it. If we were doing this in every single optimizing test then it probably is worth it.\n\nIt\u0027s common in a few places (such as vim) to flip around their regex escapes so that things like () etc are regular literals.\n\n--- \nAs a less interesting alternative (and this is more of thinking out loud than asking for any changes),\n\nUsing [x] instead of \\\\x should be slightly more readable because I think we as programmers are trained a little bit better to handle open/close pairs\n\n  [)][)][)] is slightly more readable than\n  \\\\)\\\\)\\\\)\n\nand also because we can ignore every other character instead of every 2/3 characters",
      "parentUuid": "aa33dcf3_2138b487",
      "range": {
        "startLine": 403,
        "startChar": 5,
        "endLine": 403,
        "endChar": 7
      },
      "revId": "d89d710bd5f41d91b6eb7ea88a37eb4b6888caf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}