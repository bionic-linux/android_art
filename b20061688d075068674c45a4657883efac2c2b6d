{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3b7cf5aa_ebfa87eb",
        "filename": "runtime/entrypoints/quick/quick_alloc_entrypoints.cc",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-09T09:11:15Z",
      "side": 1,
      "message": "The issue here is that we may be suspended and get a deoptimization request (which walks the stack) at this point?\n\nWhat\u0027s wrong with handling the deoptimization request at a later stage?",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e8a58fb_6c187f5c",
        "filename": "runtime/entrypoints/quick/quick_alloc_entrypoints.cc",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-09T10:23:03Z",
      "side": 1,
      "message": "Right. For jvmti redefinitions, we shouldn\u0027t use the optimized code after the redefinition. I was thinking of cases where alloc is called from the jited code and then we suspend during an alloc because of a GC or something else. Then if jvmti tries to redefine the class, it suspends all the threads instruments the stack so we would deoptimize any existing jited code. This used to work because runtime methods also checked to see if we need a deoptimization of the caller when returning. This Cl removes that support so when we eventually finish this allocation we will simply continue executing the jited code.\n\nI don\u0027t know how we can deopt later. I guess we would deopt if the optimized code invokes another function or if we can suspend the thread again. I am not sure it\u0027s safe to continue using jited code till then.",
      "parentUuid": "3b7cf5aa_ebfa87eb",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1034f43_e0efa1b3",
        "filename": "runtime/entrypoints/quick/quick_alloc_entrypoints.cc",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-09T10:31:31Z",
      "side": 1,
      "message": "\u003e  This used to work because runtime methods also checked to see if we need a deoptimization of the caller when returning. This Cl removes that support so when we eventually finish this allocation we will simply continue executing the jited code.\n\nNot sure what you are saying here: your CL does deoptimize, right?\n\nNote that for class redefinition, we have to resume executing the method as it was before.",
      "parentUuid": "4e8a58fb_6c187f5c",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebb9be47_c66db9a6",
        "filename": "runtime/entrypoints/quick/quick_alloc_entrypoints.cc",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-09T10:47:11Z",
      "side": 1,
      "message": "\u003e Not sure what you are saying here: your CL does deoptimize, right?\nYes, this CL does deoptimize because we have call DeoptimizeIfNeeded here. If we don\u0027t call DeoptimizeIfNeeded here, then we don\u0027t deoptimize the Jited code right? The next point we would check would be when this function calls invoke or TestSuspend again.\n\n\n\u003e Note that for class redefinition, we have to resume executing the method as it was before.\nSo, you think it\u0027s OK to continue running old jited code here potentially until the end of the current invocation?",
      "parentUuid": "a1034f43_e0efa1b3",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "284ab81f_a6dfcc22",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 4
      },
      "lineNbr": 262,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-09T09:11:15Z",
      "side": 1,
      "message": "How can we hit this? InstallStubsForMethod should only be called on methods defined by classes.",
      "range": {
        "startLine": 262,
        "startChar": 56,
        "endLine": 262,
        "endChar": 84
      },
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b499ac7_ec2170be",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 4
      },
      "lineNbr": 262,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-09T10:23:03Z",
      "side": 1,
      "message": "My mistake. I removed this. I added this while debugging and forgot to remove this.",
      "parentUuid": "284ab81f_a6dfcc22",
      "range": {
        "startLine": 262,
        "startChar": 56,
        "endLine": 262,
        "endChar": 84
      },
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a5e0a2f_939430b9",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 4
      },
      "lineNbr": 1437,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-09T09:11:15Z",
      "side": 1,
      "message": "This should only happen in the switch interpreter right? Does the switch interpreter need this check here? If it does, is that because we prefer delivering the async exception and not the deoptimization exception?",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f70f935e_2d13d5e1",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 4
      },
      "lineNbr": 1437,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-09T10:23:03Z",
      "side": 1,
      "message": "It\u0027s just later, I thought we can as well deliver exception rather than deoptimizing here. If it\u0027s better to let switch interpreter handle it I can update the code to just deoptimize here.",
      "parentUuid": "9a5e0a2f_939430b9",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75291889_c197567d",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 4
      },
      "lineNbr": 1437,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-12-09T10:31:31Z",
      "side": 1,
      "message": "I think if we can avoid doing this check now and have this method only focus on deoptimization that\u0027s better.\n\nHowever, if for correctness we need to observe the async exception before doing the deoptimization this needs to be commented here.\n\nIs DeoptimizeIfNeeded only called by compiled code, or can it also be called by the switch interpreter?",
      "parentUuid": "f70f935e_2d13d5e1",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b90671c_e80f1a6b",
        "filename": "runtime/instrumentation.cc",
        "patchSetId": 4
      },
      "lineNbr": 1437,
      "author": {
        "id": 1894735
      },
      "writtenOn": "2021-12-09T10:49:00Z",
      "side": 1,
      "message": "Thanks! I will update this code.\n\n\u003e Is DeoptimizeIfNeeded only called by compiled code, or can it also be called by the switch interpreter?\nonly by compiled code.",
      "parentUuid": "75291889_c197567d",
      "revId": "b20061688d075068674c45a4657883efac2c2b6d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}