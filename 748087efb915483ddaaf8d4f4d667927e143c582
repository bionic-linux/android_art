{
  "comments": [
    {
      "key": {
        "uuid": "3b4c3494_37ff9ee5",
        "filename": "runtime/check_jni.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-02-16T22:00:40Z",
      "side": 1,
      "message": "This seems like it\u0027s breaking aliasing rules which is undefined behavior. reflection.cc sounds broken and should be fixed.\n\nAm I missing something ?",
      "revId": "748087efb915483ddaaf8d4f4d667927e143c582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75366f9b_934cec01",
        "filename": "runtime/check_jni.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2018-02-16T22:10:03Z",
      "side": 1,
      "message": "Not sure I follow an aliasing issue with a union. Fwiw, the code already relies on float/int aliasing. The code in reflection.cc could truncate/sign-extend based on the shorty but the var arg convention will pass values smaller than 32-bit as 32-bit, so the caller should already do this extension (ie a 2nd round of truncation/extension is redundant). This CL is adding checks to verify that.",
      "parentUuid": "3b4c3494_37ff9ee5",
      "revId": "748087efb915483ddaaf8d4f4d667927e143c582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db4e19c6_daee28eb",
        "filename": "runtime/check_jni.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-02-16T23:06:27Z",
      "side": 1,
      "message": "I\u0027m hoping you can tell me \"No, it\u0027s not UB and here\u0027s why...\"\n\n----------\n\nMaybe this code never reads B/C/S with your new change, but then they should be removed from JniValueType.\n\nExample of UB code:\n\n union any {\n   int i;\n   float f;\n };\n\n  any x;\n  x.i \u003d 5;\n  float f \u003d x.f;\n\nThe read type must match the last write type, but it does not.\n\nThere\u0027s a trick with structs to allow safe aliasing but this code isn\u0027t using it, nor is it worth it since it\u0027s so obscure.\n\n\n\u003e Fwiw, the code already relies on float/int aliasing.\n\nShould probably be using memcpy instead?",
      "parentUuid": "75366f9b_934cec01",
      "revId": "748087efb915483ddaaf8d4f4d667927e143c582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cefcabf_1232d1fb",
        "filename": "runtime/check_jni.cc",
        "patchSetId": 3
      },
      "lineNbr": 1211,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-02-16T22:00:40Z",
      "side": 1,
      "message": "nit: seems a bit repetitive",
      "revId": "748087efb915483ddaaf8d4f4d667927e143c582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "428169c9_4869c218",
        "filename": "runtime/check_jni.cc",
        "patchSetId": 3
      },
      "lineNbr": 1211,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2018-02-16T22:10:03Z",
      "side": 1,
      "message": "Ack. For 3 cases I\u0027m not sure its worth template/macro magic.",
      "parentUuid": "3cefcabf_1232d1fb",
      "revId": "748087efb915483ddaaf8d4f4d667927e143c582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}