{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "394c32e0_398b14b1",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 4
      },
      "lineNbr": 5297,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-18T14:56:06Z",
      "side": 1,
      "message": "This should happen before the `\u0026 0x1f`.",
      "range": {
        "startLine": 5295,
        "startChar": 4,
        "endLine": 5297,
        "endChar": 5
      },
      "revId": "d0bc68e1f40259230329e6709c72af187f72144c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57506014_76ed66e4",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 5128,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-18T14:56:06Z",
      "side": 1,
      "message": "This clobbers the ECX and the register allocator does not know that, so it could reuse ECX for another instruction. We need to explicitly mark ECX as a temporary for this case.",
      "range": {
        "startLine": 5128,
        "startChar": 6,
        "endLine": 5128,
        "endChar": 26
      },
      "revId": "d0bc68e1f40259230329e6709c72af187f72144c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8e7b418_fdfe749a",
        "filename": "compiler/optimizing/code_generator_x86_64.cc",
        "patchSetId": 4
      },
      "lineNbr": 5121,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-18T14:56:06Z",
      "side": 1,
      "message": "Style: Odd function order. Do not interleave `HRor` and `HRol` visitors. For each, start with location builder and then codegen.",
      "range": {
        "startLine": 5107,
        "startChar": 0,
        "endLine": 5121,
        "endChar": 1
      },
      "revId": "d0bc68e1f40259230329e6709c72af187f72144c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3a244f_6fab76d7",
        "filename": "compiler/optimizing/instruction_simplifier_shared.cc",
        "patchSetId": 4
      },
      "lineNbr": 332,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-18T14:56:06Z",
      "side": 1,
      "message": "If we declare the `neg`/`negated` outside the `if`, this allocation code can be shared.",
      "range": {
        "startLine": 332,
        "startChar": 4,
        "endLine": 332,
        "endChar": 68
      },
      "revId": "d0bc68e1f40259230329e6709c72af187f72144c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ded14ff4_8b52bbd9",
        "filename": "compiler/optimizing/instruction_simplifier_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-10-18T14:56:06Z",
      "side": 1,
      "message": "Why are we doing this replacement if the codegen handles the 64-bit `HRol`? (Except for the ECX clobbering issue.)",
      "revId": "d0bc68e1f40259230329e6709c72af187f72144c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "854e6141_db2a8210",
        "filename": "compiler/optimizing/instruction_simplifier_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 3270422
      },
      "writtenOn": "2024-10-22T11:52:30Z",
      "side": 1,
      "message": "@vmarko@google.com I didn\u0027t know how to solve the cloberring issue. And honestly still can\u0027t get why we should invent the complicated codegen if it\u0027s easier to just eliminate a `Rol` node especially for a target which is not being used.",
      "parentUuid": "ded14ff4_8b52bbd9",
      "revId": "d0bc68e1f40259230329e6709c72af187f72144c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}