{
  "comments": [
    {
      "key": {
        "uuid": "00989ffb_ac63d802",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1384552
      },
      "writtenOn": "2018-12-04T13:56:31Z",
      "side": 1,
      "message": "When `kEnableGenerationalConcurrentCopyingCollection` is `false`, 2-phase is not run. Is this because liveness info from previous (major) GC is believed to fairly updated?",
      "revId": "215ca0d69effe7d207e7b91eb28de810ec6fdc7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c16f139b_eb5fd754",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-12-05T18:01:42Z",
      "side": 1,
      "message": "Right! Basically, the problem that 2-phase is trying to address is not too serious without generational CC. Also, 2-phase reuses almost all the code there for generational CC.",
      "parentUuid": "00989ffb_ac63d802",
      "revId": "215ca0d69effe7d207e7b91eb28de810ec6fdc7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3ae7c55_dba89c3c",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1384552
      },
      "writtenOn": "2018-12-06T15:57:23Z",
      "side": 1,
      "message": "Understood. Thanks for the clarification.",
      "parentUuid": "c16f139b_eb5fd754",
      "revId": "215ca0d69effe7d207e7b91eb28de810ec6fdc7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38f7255a_23509c2a",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1384552
      },
      "writtenOn": "2018-12-04T13:56:31Z",
      "side": 1,
      "message": "Looking at the definition of `RootVisitor`, it seems that root that is null is filtered out already. I added `DCHECK(ref !\u003d nullptr);` right before this line, and `art/test/testrunner/testrunner.py --host --64` doesn\u0027t report any failing test cases.",
      "revId": "215ca0d69effe7d207e7b91eb28de810ec6fdc7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e5c5235_5730cf18",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-12-05T18:01:42Z",
      "side": 1,
      "message": "In RootVisitor (defined at runtime/gc_root.h:326) filters null roots only in VisitRootIfNonNull(), and not in VisitRoot(). So I believe checking here is necessary.",
      "parentUuid": "38f7255a_23509c2a",
      "revId": "215ca0d69effe7d207e7b91eb28de810ec6fdc7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4947815_4f6a069d",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1384552
      },
      "writtenOn": "2018-12-06T15:57:23Z",
      "side": 1,
      "message": "However, VisitRootIfNonNull calls VisitRoot after the null-check, so it feels that the precondition of VisitRoot is that root must be non-null. IOW, VisitRoot operates on roots that are not null (due to previous checks before call it), while VisitRootIfNonNull operates on roots that are potential null.\n\nAny failing tests/examples if `ref !\u003d nullptr` is removed?",
      "parentUuid": "8e5c5235_5730cf18",
      "revId": "215ca0d69effe7d207e7b91eb28de810ec6fdc7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08291ae1_50128c8c",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2018-12-06T18:53:08Z",
      "side": 1,
      "message": "VisitRootIfNonNull() calls VisitRoot() because the implementation is same. That doesn\u0027t mean that somebody can\u0027t call VisitRoot() directly (note that VisitRoot() is a public function).\n\nI have not seen any test failing if the check is removed. However, this is not a guarantee that it may not happen in production.\n\nAll I\u0027m saying is that there exists a code path, which if exercised will cause a problem without the check. It is not part of any spec (nor mentioned in any comment) that VisitRoots() will not get non-null roots.",
      "parentUuid": "b4947815_4f6a069d",
      "revId": "215ca0d69effe7d207e7b91eb28de810ec6fdc7c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}