{
  "comments": [
    {
      "key": {
        "uuid": "ef03598f_c6550255",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 4816,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-07-28T11:27:53Z",
      "side": 1,
      "message": "Do we need the read barrier if we\u0027re just comparing against null?",
      "range": {
        "startLine": 4810,
        "startChar": 0,
        "endLine": 4816,
        "endChar": 92
      },
      "revId": "1b6c43c6691c40b61b127c41eb59e9b46469204b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef03598f_269bb60c",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 4816,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-07-28T15:08:27Z",
      "side": 1,
      "message": "I think we do, as we shall preserve the invariant that the mutator never sees a reference from the from-space after the flip; but I\u0027ll let Hiroshi give a more authoritative answer. :)",
      "parentUuid": "ef03598f_c6550255",
      "range": {
        "startLine": 4810,
        "startChar": 0,
        "endLine": 4816,
        "endChar": 92
      },
      "revId": "1b6c43c6691c40b61b127c41eb59e9b46469204b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f3aa556_e1dee6d7",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 4816,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-07-28T16:00:21Z",
      "side": 1,
      "message": "Well, the mutator only wants to know whether this is the Object.class, it does not want to \"see\" the superclass for any other purpose. If that information was encoded in some flags, for example, we would not need to load the superclass at all.",
      "parentUuid": "ef03598f_269bb60c",
      "range": {
        "startLine": 4810,
        "startChar": 0,
        "endLine": 4816,
        "endChar": 92
      },
      "revId": "1b6c43c6691c40b61b127c41eb59e9b46469204b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f62d18f_48a7bf03",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 4816,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-07-28T19:12:53Z",
      "side": 1,
      "message": "Right, checking nullness doesn\u0027t need a read barrier as long as we don\u0027t keep the loaded ref. Because if it\u0027s not null, it could be either a from-space (stale) ref or a to-space (updated) ref. Either way, it\u0027s not null. So we can omit this read barrier.\n\nThere\u0027s the to-space invariant, which is an important property for correctness. There are some edge cases where we can loosen it a bit for performance.",
      "parentUuid": "4f3aa556_e1dee6d7",
      "range": {
        "startLine": 4810,
        "startChar": 0,
        "endLine": 4816,
        "endChar": 92
      },
      "revId": "1b6c43c6691c40b61b127c41eb59e9b46469204b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "145b6640_a7e3aacd",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 4816,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-07-29T15:35:46Z",
      "side": 1,
      "message": "Right, makes sense.  Done in PS3.",
      "parentUuid": "2f62d18f_48a7bf03",
      "range": {
        "startLine": 4810,
        "startChar": 0,
        "endLine": 4816,
        "endChar": 92
      },
      "revId": "1b6c43c6691c40b61b127c41eb59e9b46469204b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f62d18f_e818f32c",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2178,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2016-07-28T19:12:53Z",
      "side": 1,
      "message": "Does this mean we use more temp registers for this? If so, perhaps, a potential slowdown, if any, might be due to the extra temp register pressure?",
      "range": {
        "startLine": 2178,
        "startChar": 7,
        "endLine": 2178,
        "endChar": 17
      },
      "revId": "1b6c43c6691c40b61b127c41eb59e9b46469204b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b430dae9_ec64eb21",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2178,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-07-29T15:35:46Z",
      "side": 1,
      "message": "Yes, (Baker) read barriers require more registers for ArraySet; this might indeed have an impact on performance.",
      "parentUuid": "2f62d18f_e818f32c",
      "range": {
        "startLine": 2178,
        "startChar": 7,
        "endLine": 2178,
        "endChar": 17
      },
      "revId": "1b6c43c6691c40b61b127c41eb59e9b46469204b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}