{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6ef76fa_d2e4bea9",
        "filename": "test/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 260,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-06-20T13:44:17Z",
      "side": 1,
      "message": "I understand that hiding the symbols would break the test, but I don\u0027t understand how using whole_static_libs would make that worse. If anything, it\u0027d be the opposite, wouldn\u0027t it?",
      "range": {
        "startLine": 260,
        "startChar": 25,
        "endLine": 260,
        "endChar": 51
      },
      "revId": "454a6940e79c925e3697e150afe15fe857c420b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c09d2471_6abe972e",
        "filename": "test/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 260,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-20T15:15:57Z",
      "side": 1,
      "message": "1) With `whole_static_libs`:\n`libsigchain` object files (with all symbols) are copied into `libart(d)-gtest`. `libart(d)-gtest` is static linked into the test executable, `exclude-libs` hides all `libart(d)-gtest` symbols, including `libsigchain` symbols. \n\n2) With `static_libs`:\n`libsigchain` object files are not copied into `libart(d)-gtest`, so it doesn\u0027t contain `libsigchain` symbols. Static linking `libart(d)-gtest` \ninto gtest executable will not fulfil `libsigchain` symbols and `libsigchain` will have to be specified in static_libs of the gtest again (so it doesn\u0027t make sense to add `libsigchain` in `static_libs` of `libart(d)-gtest`)\n\n\nThe comment here says `whole-static-link`, because that\u0027s how `libart-compiler/runtime-gtest` libs are bundled into `libart(d)-gtest`",
      "parentUuid": "d6ef76fa_d2e4bea9",
      "range": {
        "startLine": 260,
        "startChar": 25,
        "endLine": 260,
        "endChar": 51
      },
      "revId": "454a6940e79c925e3697e150afe15fe857c420b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05c16b3d_8ebd0b0d",
        "filename": "test/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 281,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2023-06-20T13:44:17Z",
      "side": 1,
      "message": "In which libs are those __asan* symbols?",
      "range": {
        "startLine": 281,
        "startChar": 72,
        "endLine": 281,
        "endChar": 97
      },
      "revId": "454a6940e79c925e3697e150afe15fe857c420b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ea73987_5a851e17",
        "filename": "test/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 281,
      "author": {
        "id": 1963262
      },
      "writtenOn": "2023-06-20T15:15:57Z",
      "side": 1,
      "message": "ASAN symbols are static linked into the executable. All shared libraries built with ASAN support require those symbols but don\u0027t contain them, they get the symbols from the executable.",
      "parentUuid": "05c16b3d_8ebd0b0d",
      "range": {
        "startLine": 281,
        "startChar": 72,
        "endLine": 281,
        "endChar": 97
      },
      "revId": "454a6940e79c925e3697e150afe15fe857c420b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}