{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1bb2c8cb_a5933367",
        "filename": "compiler/optimizing/graph_checker.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-29T14:19:38Z",
      "side": 1,
      "message": "`ScopedSafeArenaMap\u003cint, ScopedArenaSet\u003c...\u003e\u003e`\n\nWith the non-Scoped version, you\u0027re leaking a lot of memory.",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 14
      },
      "revId": "be4ba7bc29a078dc05b7f675ce4bb04c486a5008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94b94fc5_b5f67ad0",
        "filename": "compiler/optimizing/graph_checker.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-09-29T14:58:21Z",
      "side": 1,
      "message": "How is this leaking memory? Wouldn\u0027t the arena take care of deleting the elements?\n\nIn the case of the APK in the bug, we are allocating hundreds of MB. Isn\u0027t the scoped version in the stack? This would be too big for that. I tried that first and I was getting crashes",
      "parentUuid": "1bb2c8cb_a5933367",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 14
      },
      "revId": "be4ba7bc29a078dc05b7f675ce4bb04c486a5008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3763f53_2c3f5adb",
        "filename": "compiler/optimizing/graph_checker.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-29T16:40:22Z",
      "side": 1,
      "message": "We\u0027re talking about using a lot of memory for each `GraphChecker` run. 200K uses means 200K nodes, each taking 40B on 64-bit system, or 8MB in total.\n\nWe\u0027re allocating that before and after each compilation phase (currently 28 phases plus architecture-specific phases, plus `builder (after)` and the final regalloc phases) and we return the memory to the arena pool only after finishing the compilation by which time this shall easily accumulate 8MB * 70 \u003d 560MB.\n\nI call this a leak because it can cause OOM well before the memory is returned to the system.\n\nWith ScopedArena* containers, we would release the 8MB when we destroy the `GraphChecker`.",
      "parentUuid": "94b94fc5_b5f67ad0",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 14
      },
      "revId": "be4ba7bc29a078dc05b7f675ce4bb04c486a5008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1559c80_d729ef64",
        "filename": "compiler/optimizing/graph_checker.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-10-03T16:39:52Z",
      "side": 1,
      "message": "I tried using the Scoped versions but I am getting crashes. Uploaded a patchset with the changes. Will try to look into it.\n\nJust for the sake of completeness, we only run the graph checker `after` a pass, but not `before`.",
      "parentUuid": "e3763f53_2c3f5adb",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 14
      },
      "revId": "be4ba7bc29a078dc05b7f675ce4bb04c486a5008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6af798a_f55e131d",
        "filename": "compiler/optimizing/graph_checker.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-10-03T17:33:28Z",
      "side": 1,
      "message": "There is a local `ScopedArenaAllocator allocator` in `GraphChecker::VisitBasicBlock()` which is intended to reduce the peak allocation. While that `allocator` is on the top of the stack, we cannot do allocations on the lower `GraphChecker::allocator_`. We could remove the local `allocator` and move the local variables `sorted_predecessors` and `sorted_successors` to member variables for memory reuse. (And it seems they are not needed at the same time, so maybe we could just reuse a single member variable.)\n\nThere is another local `ScopedArenaAllocator allocator` in `GraphChecker::VisitPhi()` but I guess that one does not interfere.\n\nWe need to respect the `ScopedArenaAllocator` nesting. We really do not want a \"use-after-free\" bug.\n\n(Oh, I was confusing the graph checker with the visualizer which we do run before a pass as well if enabled.)",
      "parentUuid": "f1559c80_d729ef64",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 14
      },
      "revId": "be4ba7bc29a078dc05b7f675ce4bb04c486a5008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}