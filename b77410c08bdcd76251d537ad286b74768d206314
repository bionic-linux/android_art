{
  "comments": [
    {
      "key": {
        "uuid": "20a9e45f_e71adc55",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T18:57:11Z",
      "side": 1,
      "message": "Why? It\u0027s not using forwarding references here, so I thought decay was unnecessary?\n\nI tried a few test cases with and without decay and it doesn\u0027t seem any different. Can you please share why this was causing a problem?",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e030ac14_42fc1263",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-04T19:17:57Z",
      "side": 1,
      "message": "As noted above, this is really about avoiding type deduction from this argument.\n\nThe use case is when TValue is a Base* and you want to pass a Derived* and you\u0027d have to explicitly cast it to Base* (or create a named variable to force the implicit conversion in a different context).\n\nBut it seems I\u0027m not actually going to use this after all. Should I revert this bit?",
      "parentUuid": "20a9e45f_e71adc55",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "009dc025_0fb37556",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T19:36:48Z",
      "side": 1,
      "message": "How would std::decay help?\n\nAs far as I know, std::decay doesn\u0027t make it decay into the base type, it just turns arrays/fp into pointers, removes the references and cv.\n\nI suppose we could support that requested use-case, it would just mean more template parameters, probably something like:\n\n  template \u003ctemplate \u003ctypename TValue\u003e TKeyActual\u003e, typename TValue\u003e\n  void Set(const TKeyActual\u003cTValue\u003e\u0026 key,\n           const TValue\u0026 value,\n           std::enable_if\u003cstd::is_same\u003cTKeyActual\u003cTValue\u003e, TKey\u003cTValue\u003e\u003e::type* \u003d nullptr) {\n     // unchanged implementation\n  }\n\nOr something like that (probably missing a few typenames), it would to enforce at compile-time that the key type belongs to this map and not some other key.\n\nThe reason I just didn\u0027t do that in the first place is because it makes the signature way more scary looking than it needs to be for most of the use-cases.\n\nHappy to support it like that, we\u0027d just want extra comments here not to scare people away.\n\n-----\nSo we should probably either properly support Base/Derived (no decay) or just remove this decay only.",
      "parentUuid": "e030ac14_42fc1263",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00a4e085_c3e8f6a6",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-04T19:55:42Z",
      "side": 1,
      "message": "That completely misses the point. I want the TValue to be deduced from the \"key\" argument, never from the \"value\" argument. Deducing from each can lead to different TValue and thus to deduction failure. The std::decay\u003c\u003e serves purely to create a non-deduced context. That\u0027s why the\n\n    // NOTE: In the absence of std::omit_from_type_deduction\u003cT\u003e use std::decay\u003cT\u003e.\n\nAfter TValue is deduced from the \"key\" argument, the type of the \"value\" parameter is known and the \"value\" argument can be implicitly converted to that type if needed.",
      "parentUuid": "009dc025_0fb37556",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80561044_b733a835",
        "filename": "runtime/base/variant_map.h",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T21:24:26Z",
      "side": 1,
      "message": "Oh, I think I understand what this intended now, you likely wanted to use std::identity here (which they removed in the final C++11 draft).\n\nBy getting the type to the right of :: it will inhibit type deduction, so just std::remove_reference\u003cTValue\u003e::type is less invasive than decay and be enough.\n\n   template \u003ctypename TValue\u003e\n   void Set(const TKey\u003cTValue\u003e\u0026 key,\n            const std::remove_reference\u003cTValue\u003e::type\u0026 value)\n   {\n     ...\n   }\n\n\nThe template-template approach I suggested would allow implicit conversions using the explicit constructor, so perhaps it\u0027s undesirable.\n\nThat being said we\u0027re most better off just putting an identity type trait into the detail namespace because remove_reference is still confusing since it does extra work. This way we can also document the intent better.\n\n  namespace detail {\n    // Use to suppress type deduction in a function argument\n    // See std::identity for more background: \n    // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1856.html#20.2.2 - move/forward helpers\n    //\n    // e.g. \"template \u003ctypename X\u003e void bar(identity\u003cX\u003e::type foo);\n    // -\u003e bar(5); // compilation error\n    // -\u003e  bar\u003cint\u003e(5); // ok\n    template \u003ctypename T\u003e\n    struct identity {\n      using type \u003d T;\n    };\n  }\n\n   template \u003ctypename TValue\u003e\n   void Set(const TKey\u003cTValue\u003e\u0026 key,\n            const detail::identity\u003cTValue\u003e::type\u0026 value)  // never deduce TValue from typeof(value), deduce from typeof(key) instead\n   {\n     ...\n   }",
      "parentUuid": "00a4e085_c3e8f6a6",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0842cce_f63628de",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T18:57:11Z",
      "side": 1,
      "message": "nit: document parameter name",
      "range": {
        "startLine": 440,
        "startChar": 14,
        "endLine": 440,
        "endChar": 21
      },
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0598c74_3a72e1ee",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 440,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-04T19:17:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0842cce_f63628de",
      "range": {
        "startLine": 440,
        "startChar": 14,
        "endLine": 440,
        "endChar": 21
      },
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "204d6487_786669d6",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 449,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T18:57:11Z",
      "side": 1,
      "message": "Why not const?",
      "range": {
        "startLine": 449,
        "startChar": 21,
        "endLine": 449,
        "endChar": 39
      },
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "204e44ac_fc5fc94b",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 449,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-04T19:17:57Z",
      "side": 1,
      "message": "Runtime::Init() is calling ReleaseOrDefault() which is not const (and that\u0027s intended).",
      "parentUuid": "204d6487_786669d6",
      "range": {
        "startLine": 449,
        "startChar": 21,
        "endLine": 449,
        "endChar": 39
      },
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20a9e45f_a762a4e7",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 849,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T18:57:11Z",
      "side": 1,
      "message": "Seeing as how it clobbers a ton of stuff with releases, this could be a regular lvalue reference. For speed we can use std::move to pass it to each downcall.\n\n(It\u0027ll also make the diff smaller by not needing to change the -\u003e to a .)",
      "range": {
        "startLine": 849,
        "startChar": 19,
        "endLine": 849,
        "endChar": 37
      },
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "004940a4_db85b3ee",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 849,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-04T19:17:57Z",
      "side": 1,
      "message": "Or maybe rvalue-reference? That would make it clear that the caller should not use the old options anymore.",
      "parentUuid": "20a9e45f_a762a4e7",
      "range": {
        "startLine": 849,
        "startChar": 19,
        "endLine": 849,
        "endChar": 37
      },
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "009dc025_ef5f29be",
        "filename": "runtime/runtime.cc",
        "patchSetId": 1
      },
      "lineNbr": 849,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T19:36:48Z",
      "side": 1,
      "message": "Well I don\u0027t think it matters too much if they use the old options anymore, with std::move it would be exactly the same performance.\n\nIf you want to force them to move then using only rvalue references is acceptable too.\n\nEither way it would be more descriptive than a pointer.",
      "parentUuid": "004940a4_db85b3ee",
      "range": {
        "startLine": 849,
        "startChar": 19,
        "endLine": 849,
        "endChar": 37
      },
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00486077_379da089",
        "filename": "runtime/runtime.h",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T18:57:11Z",
      "side": 1,
      "message": "Is anything calling this, e.g. in a test or in a real program?",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "004940a4_1b90bb2f",
        "filename": "runtime/runtime.h",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-12-04T19:17:57Z",
      "side": 1,
      "message": "Will be, see TODO comment at https://android-review.googlesource.com/#/c/184410/3/dex2oat/dex2oat.cc@1037 .",
      "parentUuid": "00486077_379da089",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0842cce_7693f87e",
        "filename": "runtime/runtime.h",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2015-12-04T19:36:48Z",
      "side": 1,
      "message": "Sounds good, anything we need to touch in parsed_options_test?",
      "parentUuid": "004940a4_1b90bb2f",
      "revId": "b77410c08bdcd76251d537ad286b74768d206314",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}