{
  "comments": [
    {
      "key": {
        "uuid": "043dc1ed_08ca2bb2",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1771,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-08-14T03:15:35Z",
      "side": 1,
      "message": "Isn\u0027t this incorrect wrt/ int vs long?\n\nI checked the test (082), and I think an issue is that we don\u0027t test any non-zero constant. Please add test coverage and show whether this is right (I don\u0027t think so, you\u0027d count too many zeros for is_long \u003d\u003d false).",
      "range": {
        "startLine": 1771,
        "startChar": 6,
        "endLine": 1771,
        "endChar": 36
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4aeed64_4cb67379",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1771,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-08-14T03:16:51Z",
      "side": 1,
      "message": "Also: use bit_utils.h:CLZ...",
      "parentUuid": "043dc1ed_08ca2bb2",
      "range": {
        "startLine": 1771,
        "startChar": 6,
        "endLine": 1771,
        "endChar": 36
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "043dc1ed_68949798",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1784,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-08-14T03:29:46Z",
      "side": 1,
      "message": "Hm, spec says the result is undefined if the source operand has value 0. Doesn\u0027t that mean you\u0027ll have to have a check for that (in case it\u0027s not a constant but still zero), i.e., check zf after?\n\n(Guess this also requires some test coverage.)\n\nAlso, ever want to add optional support for lzcnt which would take care of this (including the correction below)?",
      "range": {
        "startLine": 1779,
        "startChar": 4,
        "endLine": 1784,
        "endChar": 5
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c43e49ec_236c6e26",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1784,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-08-14T13:14:27Z",
      "side": 1,
      "message": "I didn\u0027t want to implement lzcnt, as I don\u0027t believe our target machines support it, so it wasn\u0027t worth adding as a feature at this time.  It could be added later.\n\nI got the sequences from GCC compiled code for int and long in 32 and 64 bit.  It surprised me as well, but I guess the undefined behaviour actually gives a reasonable result that can be used with the xor.",
      "parentUuid": "043dc1ed_68949798",
      "range": {
        "startLine": 1779,
        "startChar": 4,
        "endLine": 1784,
        "endChar": 5
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a466b534_f415184a",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1809,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T10:37:46Z",
      "side": 1,
      "message": "out is undefined if ZF is set.",
      "range": {
        "startLine": 1809,
        "startChar": 2,
        "endLine": 1809,
        "endChar": 23
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4672930_b50ba02f",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 2
      },
      "lineNbr": 1811,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T10:37:46Z",
      "side": 1,
      "message": "__ xorl(out, Immediate(63));",
      "range": {
        "startLine": 1810,
        "startChar": 0,
        "endLine": 1811,
        "endChar": 30
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4f18da3_0e5c0bf8",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1612,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T10:37:46Z",
      "side": 1,
      "message": "Evaluate",
      "range": {
        "startLine": 1612,
        "startChar": 7,
        "endLine": 1612,
        "endChar": 13
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a466b534_94082434",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1617,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T10:37:46Z",
      "side": 1,
      "message": "is_long ? CLZ(static_cast\u003cuint64_t\u003e(value)) : CLZ(static_cast\u003cuint32_t\u003e(value))",
      "range": {
        "startLine": 1617,
        "startChar": 14,
        "endLine": 1617,
        "endChar": 35
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4672930_7502a818",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1639,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T10:37:46Z",
      "side": 1,
      "message": "You need to do much more than this. The manual says\n\n  IF SRC \u003d 0\n     THEN\n         ZF \u003c- 1\n         DEST is undefined;\n     ELSE\n         ...",
      "range": {
        "startLine": 1638,
        "startChar": 0,
        "endLine": 1639,
        "endChar": 47
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4401793c_31f85089",
        "filename": "compiler/utils/x86_64/assembler_x86_64_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 1152,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-08-14T10:37:46Z",
      "side": 1,
      "message": "bsrq",
      "range": {
        "startLine": 1152,
        "startChar": 80,
        "endLine": 1152,
        "endChar": 84
      },
      "revId": "c127cd776b6a12742962d2ecd75e35a49a1eb0d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}