{
  "comments": [
    {
      "key": {
        "uuid": "1c26d1b5_9370e41b",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 3
      },
      "lineNbr": 1228,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T02:12:34Z",
      "side": 1,
      "message": "Why change from size_t to uint32_t?",
      "range": {
        "startLine": 1228,
        "startChar": 53,
        "endLine": 1228,
        "endChar": 61
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c26d1b5_7c34255e",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 3
      },
      "lineNbr": 1228,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-27T08:37:09Z",
      "side": 1,
      "message": "Before 64bit, size_t and uint32_t were effectively the same. In 64bit not and we have 32bit of storage in Class. I wanted the type here to reflect that.",
      "parentUuid": "1c26d1b5_9370e41b",
      "range": {
        "startLine": 1228,
        "startChar": 53,
        "endLine": 1228,
        "endChar": 61
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c26d1b5_b39c000e",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T02:12:34Z",
      "side": 1,
      "message": "When can klass be null?",
      "range": {
        "startLine": 77,
        "startChar": 23,
        "endLine": 77,
        "endChar": 39
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cf89137_8db8b6a8",
        "filename": "runtime/gc/heap-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-27T08:37:09Z",
      "side": 1,
      "message": "It was a unit test thing but IsStarted subsumes it so removed.",
      "parentUuid": "1c26d1b5_b39c000e",
      "range": {
        "startLine": 77,
        "startChar": 23,
        "endLine": 77,
        "endChar": 39
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cf89137_77bd3d96",
        "filename": "runtime/gc/space/rosalloc_space.cc",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T02:12:34Z",
      "side": 1,
      "message": "Is the indentation off in lines 76 and 77?",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 34
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c26d1b5_fc47f5da",
        "filename": "runtime/gc/space/rosalloc_space.cc",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-27T08:37:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1cf89137_77bd3d96",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 34
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c26d1b5_61aebe6a",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T04:20:50Z",
      "side": 1,
      "message": "I think rosalloc only zeroes out memory for the requested portion only, not the whole usable size. So, as is, one may get non-zero, garbage initial values near the end of the array. This code assumes the whole usable size is zero, right?",
      "range": {
        "startLine": 104,
        "startChar": 11,
        "endLine": 104,
        "endChar": 20
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cf89137_8a077c75",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T04:49:44Z",
      "side": 1,
      "message": "dlmalloc/dlmalloc_space does the same.",
      "parentUuid": "1c26d1b5_61aebe6a",
      "range": {
        "startLine": 104,
        "startChar": 11,
        "endLine": 104,
        "endChar": 20
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c29d585_4302a467",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-27T08:37:09Z",
      "side": 1,
      "message": "thanks, we switched from calloc to memset to reduce the period we held the lock. Done.",
      "parentUuid": "1cf89137_8a077c75",
      "range": {
        "startLine": 104,
        "startChar": 11,
        "endLine": 104,
        "endChar": 20
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cf89137_374215cb",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T02:12:34Z",
      "side": 1,
      "message": "How about adding DCHECK_EQ(array_class-\u003eGetComponentSize(), component_size) since component_size is given as opposed to computed here? Alternatively, get rid of the component_size parameter?",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 118,
        "endChar": 8
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c29d585_23079877",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-27T08:37:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1cf89137_374215cb",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 118,
        "endChar": 8
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c29d585_7d4d4308",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T02:12:34Z",
      "side": 1,
      "message": "1. Could fill_usable be a template parameter? If so, this if statement could be compiled away.\n2. Surround with an UNLIKELY?",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 18
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c26d1b5_3ca9fd2e",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-02-27T08:37:09Z",
      "side": 1,
      "message": "All the relevant code should be inlined so I\u0027d rather not use template parameters.",
      "parentUuid": "3c29d585_7d4d4308",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 18
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c26d1b5_c2dd70fa",
        "filename": "runtime/mirror/array-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-02-27T18:39:24Z",
      "side": 1,
      "message": "Probably true. In this sort of situation, I\u0027d personally prefer a template parameter as it enforces the compile-time const-ness. My understanding is that the compiler may not fully inline per-call site basis, based on some internal heuristics unless ALWAYS_INLINE is used.",
      "parentUuid": "1c26d1b5_3ca9fd2e",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 18
      },
      "revId": "6fac447555dc94a935b78198479cce645c837b89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}