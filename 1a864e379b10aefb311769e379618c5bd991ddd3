{
  "comments": [
    {
      "key": {
        "uuid": "620689d1_ba6aed7c",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2016-03-03T10:17:08Z",
      "side": 1,
      "message": "by commenting this out I\u0027ve got \n+Thread: 78119 \"main\"\n+Registers:\n+    rax: 0xa6dbba5eb94f6100    rbx: 0x00007f5ab77cd228    rcx: 0x00007f5ab77ce250    rdx: 0x00007fff9b299930\n+    rdi: 0x0000000000000078    rsi: 0x00007fff9b299938    rbp: 0x00007fff9b299920    rsp: 0x00007fff9b2998f0\n+    r8 : 0x00007f5ab77cee28    r9 : 0x00007f5ab77cee20    r10: 0x00007f5ab77ce548    r11: 0x00007f5b8ce51c00\n+    r12: 0x00007f5ab77cd228    r13: 0x00007f5ab77cd150    r14: 0x00007f5ab77ced48    r15: 0x00007fff9b299930\n+    rip: 0x00007f5b8e36056d    eflags: 0x00010206 [ PF IF ]\n+     cs: 0x00000033     gs: 0x00000000     fs: 0x00000000\n+\n+Backtrace:\n+\t#00 pc 000000000033256d  out/host/linux-x86/lib64/libartd-compiler.so (void art::ReplaceElement\u003cart::dchecked_vector\u003cart::HBasicBlock*, art::ArenaAllocatorAdapter\u003cart::HBasicBlock*\u003e \u003e, art::HBasicBlock*\u003e(art::dchecked_vector\u003cart::HBasicBlock*, art::ArenaAllocatorAdapter\u003cart::HBasicBlock*\u003e \u003e\u0026, art::HBasicBlock* const\u0026, art::HBasicBlock* const\u0026)+29)\n+\t  std::__1::vector\u003cart::HBasicBlock*, art::ArenaAllocatorAdapter\u003cart::HBasicBlock*\u003e \u003e::begin()\n+\t   external/libcxx/include/vector:1464\n+\t  void art::ReplaceElement\u003cart::dchecked_vector\u003cart::HBasicBlock*, art::ArenaAllocatorAdapter\u003cart::HBasicBlock*\u003e \u003e, art::HBasicBlock*\u003e(art::dchecked_vector\u003cart::HBasicBlock*, art::ArenaAllocatorAdapter\u003cart::HBasicBlock*\u003e \u003e\u0026, art::HBasicBlock* const\u0026, art::HBasicBlock* const\u0026)\n+\t   art/runtime/base/stl_util.h:137",
      "range": {
        "startLine": 130,
        "startChar": 6,
        "endLine": 132,
        "endChar": 7
      },
      "revId": "1a864e379b10aefb311769e379618c5bd991ddd3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2d7357d_aa31ef46",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 1
      },
      "lineNbr": 1877,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2016-03-03T10:13:08Z",
      "side": 1,
      "message": "BTW, mentioned only now - so in this method we do not need code below.",
      "range": {
        "startLine": 1875,
        "startChar": 2,
        "endLine": 1877,
        "endChar": 3
      },
      "revId": "1a864e379b10aefb311769e379618c5bd991ddd3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b16159_74fb668f",
        "filename": "test/579-inline-infinite/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-03-03T09:46:17Z",
      "side": 1,
      "message": "I don\u0027t understand this change. There\u0027s code in the inliner to not inline infinite loops.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 5
      },
      "revId": "1a864e379b10aefb311769e379618c5bd991ddd3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b881d5_537f9c87",
        "filename": "test/579-inline-infinite/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1040038
      },
      "writtenOn": "2016-03-03T10:00:49Z",
      "side": 1,
      "message": "Optimizing compiler has a bug. Indeed inliner checks whether the method contains infinite loop or not. It checks whether the graph corresponding to inlining method contains or not exit_block_ set. This field is set by builder in the beginning. After that exit block can be removed but no one clear exit_block_ field in graph. As result graph contains a link to block which is removed. So inliner does not really detect that inlining method contains the infinite loop.\n\nI hope this helps.",
      "parentUuid": "a2b16159_74fb668f",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 5
      },
      "revId": "1a864e379b10aefb311769e379618c5bd991ddd3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42f42502_04e8da9a",
        "filename": "test/579-inline-infinite/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-03-03T10:06:16Z",
      "side": 1,
      "message": "No, why was I able to pass your test then?\n/art/test/run-test --host --optimizing 579",
      "parentUuid": "a2b881d5_537f9c87",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 5
      },
      "revId": "1a864e379b10aefb311769e379618c5bd991ddd3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}