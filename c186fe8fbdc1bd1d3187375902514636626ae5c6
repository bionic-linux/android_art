{
  "comments": [
    {
      "key": {
        "uuid": "42c98578_9c9f8d28",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-24T09:57:39Z",
      "side": 1,
      "message": "other",
      "range": {
        "startLine": 263,
        "startChar": 6,
        "endLine": 263,
        "endChar": 13
      },
      "revId": "c186fe8fbdc1bd1d3187375902514636626ae5c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62a5a9c6_b1435e8a",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T10:33:43Z",
      "side": 1,
      "message": "Does that mean I should rename hother to other in the code? I did this to be consistent with hnot (which in turn could not be named \u0027not\u0027 since it\u0027s a keyword in C++).",
      "parentUuid": "42c98578_9c9f8d28",
      "range": {
        "startLine": 263,
        "startChar": 6,
        "endLine": 263,
        "endChar": 13
      },
      "revId": "c186fe8fbdc1bd1d3187375902514636626ae5c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22dbb13a_e3954668",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-24T10:36:02Z",
      "side": 1,
      "message": "Oh i see :) Usually, we\u0027ve put variables names in `` to differentiate with language. So here you\u0027d write `hother`.",
      "parentUuid": "62a5a9c6_b1435e8a",
      "range": {
        "startLine": 263,
        "startChar": 6,
        "endLine": 263,
        "endChar": 13
      },
      "revId": "c186fe8fbdc1bd1d3187375902514636626ae5c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2b0b90b_e405aba9",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1087715
      },
      "writtenOn": "2016-02-24T10:43:04Z",
      "side": 1,
      "message": "Oh yes indeed, forgot about this! Fixed.",
      "parentUuid": "22dbb13a_e3954668",
      "range": {
        "startLine": 263,
        "startChar": 6,
        "endLine": 263,
        "endChar": 13
      },
      "revId": "c186fe8fbdc1bd1d3187375902514636626ae5c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62b209f8_ba1fed3e",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-02-24T09:57:39Z",
      "side": 1,
      "message": "How can this happen? (inputs of different types)",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 190,
        "endChar": 59
      },
      "revId": "c186fe8fbdc1bd1d3187375902514636626ae5c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82bb7df1_b1159d60",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-02-24T10:31:01Z",
      "side": 1,
      "message": "Interesting.\n\nKevin copied that from implementations for other instructions. I had a look but I cannot understand how this could happen here or for other nodes.\n- Type conversions implicitly removed. Cannot be the reason since neither int-\u003elong nor long-\u003eint are implicitly removed.\n- The constant folding pass correctly updates the type of constants through HTypeConversion.\n\nRoland, you implemented the commit introducing that. Can you help us here?",
      "parentUuid": "62b209f8_ba1fed3e",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 190,
        "endChar": 59
      },
      "revId": "c186fe8fbdc1bd1d3187375902514636626ae5c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42c98578_bc21a997",
        "filename": "compiler/optimizing/nodes_arm64.h",
        "patchSetId": 4
      },
      "lineNbr": 190,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2016-02-24T11:39:27Z",
      "side": 1,
      "message": "I think I had to introduce this because of shift operators on long values, which may/do use an int value as second operand.  The other case (binop(int, long)) is probably not necessary.\n\nWe can keep this is as-is in this CL.  I\u0027ll check and clean that up in a follow-up CL.",
      "parentUuid": "82bb7df1_b1159d60",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 190,
        "endChar": 59
      },
      "revId": "c186fe8fbdc1bd1d3187375902514636626ae5c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}