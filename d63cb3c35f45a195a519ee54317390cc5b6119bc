{
  "comments": [
    {
      "key": {
        "uuid": "8a7ad3a5_f535a5a6",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 1
      },
      "lineNbr": 3075,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "Instead of doing this, just remove the input in prepare_for_register_allocation.",
      "range": {
        "startLine": 3071,
        "startChar": 0,
        "endLine": 3075,
        "endChar": 44
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08a01160_a0eb399e",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 1
      },
      "lineNbr": 1459,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "How is that related? The constructors only apply to instance here.",
      "range": {
        "startLine": 1459,
        "startChar": 8,
        "endLine": 1459,
        "endChar": 42
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2813b4ef_00859fed",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 1
      },
      "lineNbr": 1459,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "Right, I don\u0027t know the high level well enough to understand if it would ever inline \u003cclinit\u003e (perhaps with compiler-filter kEverything?)",
      "parentUuid": "08a01160_a0eb399e",
      "range": {
        "startLine": 1459,
        "startChar": 8,
        "endLine": 1459,
        "endChar": 42
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0e0a939_9870ca50",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 637,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "ShouldGenerateConstructorBarrier only applies to instances AFAIR. Also in the code below, you are you for \u0027this\u0027 anyway.",
      "range": {
        "startLine": 637,
        "startChar": 4,
        "endLine": 637,
        "endChar": 96
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac37b4e7_5f96cca7",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 637,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "Do we care about the correctness of compiling \u003cclinit\u003e ?\n\nI was thinking in the compiler filter kEverything which I think might even build static constructors?\n\nTo handle the case we should probably use the HLoadClass (similar to how sput/sget works) as the input.",
      "parentUuid": "d0e0a939_9870ca50",
      "range": {
        "startLine": 637,
        "startChar": 4,
        "endLine": 637,
        "endChar": 96
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9dcb84c_0e2b8463",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 637,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-06T18:08:04Z",
      "side": 1,
      "message": "we care about the correctness of the compiler. So if you don\u0027t expect clinit here, please (d)check it.",
      "parentUuid": "ac37b4e7_5f96cca7",
      "range": {
        "startLine": 637,
        "startChar": 4,
        "endLine": 637,
        "endChar": 96
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e040b5f_770b1f49",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 662,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "Just like we have GetNullConstant on graph, please add a GetThisParameter. Also avoid scanning, just cache it in the graph.",
      "range": {
        "startLine": 646,
        "startChar": 0,
        "endLine": 662,
        "endChar": 7
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c81e20da_f06ffe9d",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 662,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "It seems like it\u0027s almost always the 2nd entry, cache it anyway?",
      "parentUuid": "7e040b5f_770b1f49",
      "range": {
        "startLine": 646,
        "startChar": 0,
        "endLine": 662,
        "endChar": 7
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "665920d8_e764cc81",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 662,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-06T18:08:04Z",
      "side": 1,
      "message": "yes please. Makes things cleaner and if I remember right there are other places where we need it (and could be cleaned up).",
      "parentUuid": "c81e20da_f06ffe9d",
      "range": {
        "startLine": 646,
        "startChar": 0,
        "endLine": 662,
        "endChar": 7
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae903d1a_32ad7d08",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "this_object-\u003eAsParameterValue()",
      "range": {
        "startLine": 670,
        "startChar": 14,
        "endLine": 670,
        "endChar": 55
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6d3ff7e_ea3b916f",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "Beautiful, didn\u0027t know about this since it\u0027s hidden by macros :).",
      "parentUuid": "ae903d1a_32ad7d08",
      "range": {
        "startLine": 670,
        "startChar": 14,
        "endLine": 670,
        "endChar": 55
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e758d7ca_bb91e36e",
        "filename": "compiler/optimizing/instruction_builder.cc",
        "patchSetId": 1
      },
      "lineNbr": 675,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 675,
        "startChar": 13,
        "endLine": 675,
        "endChar": 55
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8b7ef53_01e24f12",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 586,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "Instead of doing this, you actually know if you\u0027re talking about a singleton, so there you can just remove the barrier.",
      "range": {
        "startLine": 569,
        "startChar": 4,
        "endLine": 586,
        "endChar": 3
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f19754df_0e108fa0",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 586,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "I think I agree in principle after reading how CalculateEscape works.\n\nWhat I don\u0027t understand is why in the original code it still has this guard in L571 and L577 if the singleton invariant is enough?\n\n(btw it was Mingyao who suggested I add the \"instruction has real uses\" check at this point in LSE)",
      "parentUuid": "b8b7ef53_01e24f12",
      "range": {
        "startLine": 569,
        "startChar": 4,
        "endLine": 586,
        "endChar": 3
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6ed18eb_44e235e9",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 618,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "Nicolas, how do you want to handle this?\n\n(Or perhaps it\u0027s ok to just leave it like this, but Mingyao suggested that we \"just get it working\" and that you would have an idea how/if to generalize this cleanly).\n\nI guess right now LSE is the only one to run into this but in theory any other optimization should also treat constructorfence inputs as \"weak\" inputs that don\u0027t (by themselves) hold the input live.\n\n(The analogy to a strong reference/weak reference is perhaps apt here.)",
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7cefe33_4f8b560f",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 1
      },
      "lineNbr": 618,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-06T18:08:04Z",
      "side": 1,
      "message": "So the handling here and above is not ideal imo. It creates inconsistencies in the graph. Once the input of the ContructorFence is removed from the graph what should be the expected result of getThisObject()? (as the fence survives this analysis).\n\nI don\u0027t have an immediate alternative proposal but I\u0027m thinking about.",
      "parentUuid": "e6ed18eb_44e235e9",
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "609c2abf_e815e5e8",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 6507,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "drop",
      "range": {
        "startLine": 6507,
        "startChar": 49,
        "endLine": 6507,
        "endChar": 53
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f2b607d_fe4c58e2",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 6507,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-06T18:08:04Z",
      "side": 1,
      "message": "remove the \"usually\" and mention all cases if there are others.",
      "range": {
        "startLine": 6507,
        "startChar": 20,
        "endLine": 6507,
        "endChar": 27
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bdee581_6333d213",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 6508,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "Not in the current code base, which only works for references, so I\u0027d rather you don\u0027t mention it.",
      "range": {
        "startLine": 6507,
        "startChar": 78,
        "endLine": 6508,
        "endChar": 68
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a2c52fa_7c5e392c",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 1
      },
      "lineNbr": 6508,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "Sure, I can remove this line for now.\n\nCan you elaborate by \"which only works for references?\"",
      "parentUuid": "9bdee581_6333d213",
      "range": {
        "startLine": 6507,
        "startChar": 78,
        "endLine": 6508,
        "endChar": 68
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eedf8092_62c91cd2",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-04-06T16:47:19Z",
      "side": 1,
      "message": "I\u0027d prefer if you would do this in a separate test, that would just focus on lse with memory barriers.",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 146,
        "endChar": 45
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfbc276b_47ea114a",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-04-06T17:32:33Z",
      "side": 1,
      "message": "Sure, 530-checker-lse-barrier or what?",
      "parentUuid": "eedf8092_62c91cd2",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 146,
        "endChar": 45
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90c76307_8546cf99",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-04-06T18:08:04Z",
      "side": 1,
      "message": "pretty hard to read. consider adding new lines or wrap around /* */",
      "range": {
        "startLine": 152,
        "startChar": 3,
        "endLine": 153,
        "endChar": 28
      },
      "revId": "d63cb3c35f45a195a519ee54317390cc5b6119bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}