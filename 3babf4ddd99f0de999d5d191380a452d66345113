{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b58ba6e1_b6482a55",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-25T17:52:26Z",
      "side": 1,
      "message": "Nit: I think the word is \"loop\". I\u0027d be unsure what you mean with \"cycle\" here (and below).",
      "range": {
        "startLine": 269,
        "startChar": 91,
        "endLine": 269,
        "endChar": 96
      },
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7416c1cf_b2daad00",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-09-01T12:48:35Z",
      "side": 1,
      "message": "Removed the comment in favour of a different implementation of the method, so this comment is now stale (for the curious: it was a literal translation from Italian).",
      "parentUuid": "b58ba6e1_b6482a55",
      "range": {
        "startLine": 269,
        "startChar": 91,
        "endLine": 269,
        "endChar": 96
      },
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a84fd1b4_6236dfef",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-08-23T16:42:33Z",
      "side": 1,
      "message": "I wasn\u0027t able to understand why this call to `dex_file.release()` is necessary - but doing a few attempts, namely:\n\n* remove the for loop altogether\n* saving the pointer returned by `release()` and manually deleting it\n* calling `clear()` on the `dex_files` vector\n\nall returned in some test error (specifically for the `936-search-onload` test). Martin, do you happen to know a bit more about this? Do you think it would be acceptable to add the `//NOLINTNEXTLINE` directive with no explanation?",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c966043_8e10ba9d",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-25T17:52:26Z",
      "side": 1,
      "message": "This is new code from https://r.android.com/2183547. +jiakaiz, AppendToBootClassPath takes over ownership of the DexFile\u0027s in the vector, doesn\u0027t it? Shouldn\u0027t it take dex_files through move semantics instead? I guess that means putting the vector itself in a unique_ptr so that it can be moved safely without double free.",
      "parentUuid": "a84fd1b4_6236dfef",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bedd4afb_e2de72c1",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-25T19:46:50Z",
      "side": 1,
      "message": "This is not new code. `dex_file.release()` exists before aosp/2183547. `AppendToBootClassPath` doesn\u0027t take ownership. I don\u0027t understand `dex_file.release()` either, so I kept it as is in my CL.",
      "parentUuid": "9c966043_8e10ba9d",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5989d363_0a148088",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-25T20:15:15Z",
      "side": 1,
      "message": "My understanding of this code is:\n1. The objects in `dex_files` have to outlive `art::Runtime::Current()`, so any attempt that results in those objects being deleted will lead to use-after-free. This includes all attempts that Stefano did.\n2. `art::Runtime::Current()` is not responsible for deleting those objects. `dex_file.release()` will definitely lead to memory leak, but `art::Runtime::Current()` usually lives as long as the process, so the author don\u0027t care about the case where `art::Runtime::Current()` exits early.\n3. I think it\u0027s good to keep the unique_ptrs somewhere, but I don\u0027t have knowledge of this code to tell where is most appropriate. I only know that the objects have to outlive `art::Runtime::Current()`.",
      "parentUuid": "bedd4afb_e2de72c1",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6032cbe_433d0d5e",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-25T20:55:38Z",
      "side": 1,
      "message": "`ClassLinker::boot_class_path_` doesn\u0027t own the objects, but `ClassLinker:: boot_dex_files_` does: https://cs.android.com/android/platform/superproject/+/master:art/runtime/class_linker.h;l\u003d1300-1301;drc\u003d4bff111e3b7aa6517559a806b8de5cc8e71462ad\n\nLooking at other code I think the intention is to always add the files to `boot_dex_files_` when they go onto `boot_class_path_`, e.g. here: https://cs.android.com/android/platform/superproject/+/master:art/runtime/class_linker.cc;l\u003d1332-1338;drc\u003d3449fd0fe8904e0690d47cceb0b77c64d4718ea3\n\nI agree this code must leak. It originates from https://r.android.com/323526, but I don\u0027t see any comments about it there. You may be right the author didn\u0027t care enough to fix it properly - if it is as you say that these files must outlive the Runtime instance then it isn\u0027t good enough to add them to `boot_dex_files_`, so another storage has to be invented. But why is that the case? How long do they have to live?",
      "parentUuid": "bedd4afb_e2de72c1",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8015aefe_76646300",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-26T09:04:14Z",
      "side": 1,
      "message": "Good finding on `boot_dex_files_`. I think it\u0027s good enough in terms of lifetime. I said the dex files must outlive `Runtime::Current()`, but it\u0027s not accurate. More accurately, they must outlive `Runtime::Current()-\u003eclass_linker_`. Since `Runtime` only deletes `class_linker_` on destruction, the lifetime of these two can be regarded as the same.\n\nHowever, I don\u0027t see `boot_dex_files_` is ever used for holding dex files that are added dynamically. Looks like it\u0027s only used by `ClassLinker` internally to hold dex files opened during runtime initialization. If you search for `AppendToBootClassPath`, you\u0027ll find many cases where a caller adds dex files to the class linker after runtime initialization and keeps the ownership somewhere else. For example, this code (https://cs.android.com/android/platform/superproject/+/master:art/openjdkjvmti/ti_redefine.cc;l\u003d2483;drc\u003d0e520aadebc54aa8ee6cb91e1ab47b94f8ff3024) adds a dex file and keeps the ownership here (https://cs.android.com/android/platform/superproject/+/master:art/openjdkjvmti/ti_redefine.h;l\u003d284;drc\u003d3449fd0fe8904e0690d47cceb0b77c64d4718ea3). If keeping the ownership somewhere else is an established convention, then I\u0027m not sure if it\u0027s a good idea to break it. Stefano, I\u0027ll leave this to you to judge.\n\nAlternatives are:\n1. Add a static member to `SearchUtil` to hold those dex files.\n2. Keep it as is and add a comment that the release is okay because the dex files must outlive `Runtime::Current()-\u003eclass_linker_`, which usually lives as long as the process.",
      "parentUuid": "a6032cbe_433d0d5e",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4c50ccb_db8d9afc",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-30T19:41:09Z",
      "side": 1,
      "message": "\u003e However, I don\u0027t see  boot_dex_files_  is ever used for holding dex files that are added dynamically /.../\n\nI\u0027m not worried about that. `boot_dex_file_` is only read in two cases (https://cs.android.com/android/platform/superproject/+/master:art/runtime/class_linker.cc;l\u003d1316,1334;drc\u003d01a8f0414c3c28071d24f0f086a05e6f14d24bab) and neither looks sensitive to this function adding a few more files to it. So I get the impression `boot_dex_file_` is intended to be nothing more than an owner for the files in `boot_class_path_` that aren\u0027t owned by anything else, and if so it fits perfectly.\n\nThe 2nd location is in `ClassLinker::AddExtraBootDexFiles`, and I think using that function here is exactly what we want. It has a debug check that dex files aren\u0027t added repeatedly to the BCP, and that seems like a good thing here too (but I haven\u0027t investigated if and how this code path ensures uniqueness).",
      "parentUuid": "8015aefe_76646300",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbce54d9_f94252d1",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-31T17:55:39Z",
      "side": 1,
      "message": "Btw, while I think `AddExtraBootDexFiles` is the way to go here, there\u0027s enough risk with switching to it that I suggest doing it in a separate CL.",
      "parentUuid": "b4c50ccb_db8d9afc",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bac5a5a_e1f64a14",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-31T18:29:13Z",
      "side": 1,
      "message": "I don\u0027t want anyone other than `Runtime` to use `AddExtraBootDexFiles` because it causes inconsistency between `Runtime` and `ClassLinker`. Consider adding a method similar to `Runtime::AppendToBootClassPath` but transfers ownership?",
      "parentUuid": "fbce54d9_f94252d1",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a917f12_244f2a1b",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-31T18:37:44Z",
      "side": 1,
      "message": "For context, the inconsistency between `Runtime` and `ClassLinker` is the root cause of b/243128839, and I\u0027m adding comments in https://android-review.googlesource.com/c/platform/art/+/2196996/1/runtime/class_linker.h to discourage people to directly call some `ClassLinker` methods to add things to bootclasspath. Maybe I should add the a comment to `ClassLinker::AddExtraBootDexFiles` too. I think such method call should go through `Runtime` to make sure that `Runtime` is updated at the same time.\n\nStefano, you can consider adding a method in `Runtime` that is similar to `Runtime::AppendToBootClassPath` and internally calls `ClassLinker::AddExtraBootDexFiles`.",
      "parentUuid": "7bac5a5a_e1f64a14",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff790cd5_dfa9942b",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-09-01T10:17:13Z",
      "side": 1,
      "message": "I agree with Martin that it would be better to have these changes in a separate CL - I will keep this one for the changes in `SortByMapOrder` and create a follow-up one for the JVMTI ones.",
      "parentUuid": "7a917f12_244f2a1b",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}