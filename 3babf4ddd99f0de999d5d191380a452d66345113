{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b58ba6e1_b6482a55",
        "filename": "dexlayout/dex_ir.h",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-25T17:52:26Z",
      "side": 1,
      "message": "Nit: I think the word is \"loop\". I\u0027d be unsure what you mean with \"cycle\" here (and below).",
      "range": {
        "startLine": 269,
        "startChar": 91,
        "endLine": 269,
        "endChar": 96
      },
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a84fd1b4_6236dfef",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1948615
      },
      "writtenOn": "2022-08-23T16:42:33Z",
      "side": 1,
      "message": "I wasn\u0027t able to understand why this call to `dex_file.release()` is necessary - but doing a few attempts, namely:\n\n* remove the for loop altogether\n* saving the pointer returned by `release()` and manually deleting it\n* calling `clear()` on the `dex_files` vector\n\nall returned in some test error (specifically for the `936-search-onload` test). Martin, do you happen to know a bit more about this? Do you think it would be acceptable to add the `//NOLINTNEXTLINE` directive with no explanation?",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c966043_8e10ba9d",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-25T17:52:26Z",
      "side": 1,
      "message": "This is new code from https://r.android.com/2183547. +jiakaiz, AppendToBootClassPath takes over ownership of the DexFile\u0027s in the vector, doesn\u0027t it? Shouldn\u0027t it take dex_files through move semantics instead? I guess that means putting the vector itself in a unique_ptr so that it can be moved safely without double free.",
      "parentUuid": "a84fd1b4_6236dfef",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bedd4afb_e2de72c1",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-25T19:46:50Z",
      "side": 1,
      "message": "This is not new code. `dex_file.release()` exists before aosp/2183547. `AppendToBootClassPath` doesn\u0027t take ownership. I don\u0027t understand `dex_file.release()` either, so I kept it as is in my CL.",
      "parentUuid": "9c966043_8e10ba9d",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5989d363_0a148088",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-08-25T20:15:15Z",
      "side": 1,
      "message": "My understanding of this code is:\n1. The objects in `dex_files` have to outlive `art::Runtime::Current()`, so any attempt that results in those objects being deleted will lead to use-after-free. This includes all attempts that Stefano did.\n2. `art::Runtime::Current()` is not responsible for deleting those objects. `dex_file.release()` will definitely lead to memory leak, but `art::Runtime::Current()` usually lives as long as the process, so the author don\u0027t care about the case where `art::Runtime::Current()` exits early.\n3. I think it\u0027s good to keep the unique_ptrs somewhere, but I don\u0027t have knowledge of this code to tell where is most appropriate. I only know that the objects have to outlive `art::Runtime::Current()`.",
      "parentUuid": "bedd4afb_e2de72c1",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6032cbe_433d0d5e",
        "filename": "openjdkjvmti/ti_search.cc",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-08-25T20:55:38Z",
      "side": 1,
      "message": "`ClassLinker::boot_class_path_` doesn\u0027t own the objects, but `ClassLinker:: boot_dex_files_` does: https://cs.android.com/android/platform/superproject/+/master:art/runtime/class_linker.h;l\u003d1300-1301;drc\u003d4bff111e3b7aa6517559a806b8de5cc8e71462ad\n\nLooking at other code I think the intention is to always add the files to `boot_dex_files_` when they go onto `boot_class_path_`, e.g. here: https://cs.android.com/android/platform/superproject/+/master:art/runtime/class_linker.cc;l\u003d1332-1338;drc\u003d3449fd0fe8904e0690d47cceb0b77c64d4718ea3\n\nI agree this code must leak. It originates from https://r.android.com/323526, but I don\u0027t see any comments about it there. You may be right the author didn\u0027t care enough to fix it properly - if it is as you say that these files must outlive the Runtime instance then it isn\u0027t good enough to add them to `boot_dex_files_`, so another storage has to be invented. But why is that the case? How long do they have to live?",
      "parentUuid": "bedd4afb_e2de72c1",
      "revId": "3babf4ddd99f0de999d5d191380a452d66345113",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}