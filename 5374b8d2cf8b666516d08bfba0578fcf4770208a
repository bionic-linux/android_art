{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ecc7ad89_a4e3012f",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-21T23:46:38Z",
      "side": 1,
      "message": "maybe \u0027misaligned (w.r.t. region size) large objects\u0027.",
      "range": {
        "startLine": 753,
        "startChar": 33,
        "endLine": 753,
        "endChar": 65
      },
      "revId": "5374b8d2cf8b666516d08bfba0578fcf4770208a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2040cb40_d20959de",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-12-22T01:10:14Z",
      "side": 1,
      "message": "My conclusion was that it\u0027s probably too complicated to try to summarize here. If they\u0027re really large primitive arrays, they\u0027ll end up in LOS instead. Alignment matters. I\u0027m also not sure about TLAB interaction, though. Can we also waste the tail end of a TLAB reservation? Or do we redirect objects larger than the TLAB expansion interval?",
      "parentUuid": "ecc7ad89_a4e3012f",
      "range": {
        "startLine": 753,
        "startChar": 33,
        "endLine": 753,
        "endChar": 65
      },
      "revId": "5374b8d2cf8b666516d08bfba0578fcf4770208a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4bbd99a_e7b73024",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2022-12-22T01:38:51Z",
      "side": 1,
      "message": "I\u0027m confused as to how can this situation arise in the first place. We log this when we have exhausted all options to reclaim when an allocation blocks due to GC.\n\nWe have 10MB free space, yet no regions are free. Also, note that our \"less than 1% freed...\" is not the case here either. The only explanation is that there are many threads who allocated all the available regions *before* the thread which did the GC and hence that thread couldn\u0027t allocate and threw exception.\n\nWe could certainly have a situation where a lot of threads have regions, which are mostly empty reserved to themselves. Large objects causing internal fragmentation is also possible, but is less likely as you rightly pointed out that primitive arrays can\u0027t be causing it.\n\nWasting tail end of TLAB was a possibility earlier but I remember fixing it long time back by maintaining a list of revoked TLABs and reusing them.\n\nI think either we can omit large object mention entirely or at least briefly say that it\u0027s only if they are in decent quantity and are misaligned as far as region size is concerned.",
      "parentUuid": "2040cb40_d20959de",
      "range": {
        "startLine": 753,
        "startChar": 33,
        "endLine": 753,
        "endChar": 65
      },
      "revId": "5374b8d2cf8b666516d08bfba0578fcf4770208a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bc9e45c_aa673a4d",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-12-22T10:20:54Z",
      "side": 1,
      "message": "Drop the parens?",
      "range": {
        "startLine": 753,
        "startChar": 11,
        "endLine": 753,
        "endChar": 66
      },
      "revId": "5374b8d2cf8b666516d08bfba0578fcf4770208a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}