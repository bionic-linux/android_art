{
  "comments": [
    {
      "key": {
        "uuid": "63002af0_41129690",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "Maybe introduce a helper similar to art::HBasicBlock::ReplaceAndRemoveInstructionWith (and also use it within the implementation of art::HBasicBlock::ReplaceAndRemoveInstructionWith)?\nDitto for similar changes below.",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_a025dea5",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "My thoughts exactly. I was gonna create an \"inst-\u003eReplaceWithAndRemove\" but this is a fairly common pattern throughout the compiler so I didn\u0027t want to mix it with this change. Let me do that in a separate one.",
      "parentUuid": "63002af0_41129690",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63002af0_41417667",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "Out of curiosity, what motivated this change?",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 214,
        "endChar": 44
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63002af0_a1ba7aab",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "The fact that constants are now cached. So folding 1+2 doesn\u0027t create a new constant but reuses the one from offset 3. I didn\u0027t want to change the logic of the tests, so I adjusted the values instead.",
      "parentUuid": "63002af0_41417667",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 214,
        "endChar": 44
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_3f8faf2e",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 507,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "Likewise?",
      "range": {
        "startLine": 499,
        "startChar": 0,
        "endLine": 507,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_4015e23d",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 507,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "Yep, same here.",
      "parentUuid": "23147232_3f8faf2e",
      "range": {
        "startLine": 499,
        "startChar": 0,
        "endLine": 507,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_604c66a1",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "I guess the Arena allocator prevents any memory leak when we overwrite and existing (non-null) `constant`?",
      "range": {
        "startLine": 326,
        "startChar": 29,
        "endLine": 326,
        "endChar": 60
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_5f6943a3",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "Yep, I actually had an implementation that reused the old instance (you need to clear the ID and insert it again) but this situation is so rare that I figured it\u0027s not worth making the code more complicated.\nIf it does happen, there will just be multiple instances of the same constant which will get freed with the arena. No leaks.",
      "parentUuid": "43116641_604c66a1",
      "range": {
        "startLine": 326,
        "startChar": 29,
        "endLine": 326,
        "endChar": 60
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}