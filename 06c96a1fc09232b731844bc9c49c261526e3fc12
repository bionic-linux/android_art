{
  "comments": [
    {
      "key": {
        "uuid": "63002af0_41129690",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "Maybe introduce a helper similar to art::HBasicBlock::ReplaceAndRemoveInstructionWith (and also use it within the implementation of art::HBasicBlock::ReplaceAndRemoveInstructionWith)?\nDitto for similar changes below.",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_a025dea5",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "My thoughts exactly. I was gonna create an \"inst-\u003eReplaceWithAndRemove\" but this is a fairly common pattern throughout the compiler so I didn\u0027t want to mix it with this change. Let me do that in a separate one.",
      "parentUuid": "63002af0_41129690",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63002af0_01936e2a",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T18:04:54Z",
      "side": 1,
      "message": "Great. :)",
      "parentUuid": "43116641_a025dea5",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 61,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63002af0_41417667",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "Out of curiosity, what motivated this change?",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 214,
        "endChar": 44
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63002af0_a1ba7aab",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "The fact that constants are now cached. So folding 1+2 doesn\u0027t create a new constant but reuses the one from offset 3. I didn\u0027t want to change the logic of the tests, so I adjusted the values instead.",
      "parentUuid": "63002af0_41417667",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 214,
        "endChar": 44
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_00aa4a4e",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T18:04:54Z",
      "side": 1,
      "message": "OK, thanks for the explanation.",
      "parentUuid": "63002af0_a1ba7aab",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 214,
        "endChar": 44
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_20278e6a",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 219,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-25T19:07:20Z",
      "side": 1,
      "message": "any volunteers to rewrite these tests with Checker? :D:P",
      "range": {
        "startLine": 219,
        "startChar": 14,
        "endLine": 219,
        "endChar": 29
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_3f8faf2e",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 507,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "Likewise?",
      "range": {
        "startLine": 499,
        "startChar": 0,
        "endLine": 507,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_4015e23d",
        "filename": "compiler/optimizing/constant_folding_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 507,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "Yep, same here.",
      "parentUuid": "23147232_3f8faf2e",
      "range": {
        "startLine": 499,
        "startChar": 0,
        "endLine": 507,
        "endChar": 52
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_02ced0ae",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 8
      },
      "lineNbr": 483,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-26T09:12:35Z",
      "side": 1,
      "message": "is not in -\u003e should be in ?",
      "range": {
        "startLine": 483,
        "startChar": 9,
        "endLine": 483,
        "endChar": 57
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_a27844bd",
        "filename": "compiler/optimizing/graph_checker.cc",
        "patchSetId": 8
      },
      "lineNbr": 483,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-26T10:08:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23147232_02ced0ae",
      "range": {
        "startLine": 483,
        "startChar": 9,
        "endLine": 483,
        "endChar": 57
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_7f41a7f9",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 292,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-25T19:07:20Z",
      "side": 1,
      "message": "explain why. Goto should be pretty obvious, but SuspendCheck is not. Also even for Goto, given the way we actually use the constants it shouldn\u0027t really matter.",
      "range": {
        "startLine": 291,
        "startChar": 31,
        "endLine": 292,
        "endChar": 51
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_e36e40f9",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 292,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-26T10:08:06Z",
      "side": 1,
      "message": "The SuspendCheck is really more about \"esthetics\". I guess you\u0027re right we shouldn\u0027t worry about that. Alright, removed and constant folding tests fixed (again).",
      "parentUuid": "23147232_7f41a7f9",
      "range": {
        "startLine": 291,
        "startChar": 31,
        "endLine": 292,
        "endChar": 51
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_604c66a1",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2015-03-25T16:54:53Z",
      "side": 1,
      "message": "I guess the Arena allocator prevents any memory leak when we overwrite and existing (non-null) `constant`?",
      "range": {
        "startLine": 326,
        "startChar": 29,
        "endLine": 326,
        "endChar": 60
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_5f6943a3",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-25T17:40:24Z",
      "side": 1,
      "message": "Yep, I actually had an implementation that reused the old instance (you need to clear the ID and insert it again) but this situation is so rare that I figured it\u0027s not worth making the code more complicated.\nIf it does happen, there will just be multiple instances of the same constant which will get freed with the arena. No leaks.",
      "parentUuid": "43116641_604c66a1",
      "range": {
        "startLine": 326,
        "startChar": 29,
        "endLine": 326,
        "endChar": 60
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_3f3b2f80",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-25T19:07:20Z",
      "side": 1,
      "message": "does it worth trying to also remove the constant from this when we remove it from the graph?",
      "parentUuid": "23147232_5f6943a3",
      "range": {
        "startLine": 326,
        "startChar": 29,
        "endLine": 326,
        "endChar": 60
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_037254e1",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-26T10:08:06Z",
      "side": 1,
      "message": "Could do that but it involves testing if every removed instruction is an IntConst, LongConst, etc, and that seems counterproductive. Plus this way the caching code is in one place.",
      "parentUuid": "23147232_3f3b2f80",
      "range": {
        "startLine": 326,
        "startChar": 29,
        "endLine": 326,
        "endChar": 60
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_df31d39c",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-25T19:07:20Z",
      "side": 1,
      "message": "hmm... I see why you do that but this is not nice. My preference is to avoid such dependencies. What if we end up needing to create Float/Double constants in some other build/optimizations phase?\n\nHow about having a Get(Float/Double)Constants on the graph object, similar to the integral case, but which doesn\u0027t cache the results?",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 16
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_e39c0071",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-26T10:08:06Z",
      "side": 1,
      "message": "I agree but my reasoning was that we should add this stuff once we actually need it. Right now we don\u0027t and by moving it we would lose canonicalisation with that clever trick of placing the int/float instructions next to each other which doesn\u0027t work once you allow instruction removal. If we ever need it, that somebody will see from the Float/DoubleConst\u0027s friends that the SsaBuilder is currently in charge, and will be in a better position to asses if caching is worth it or not based on the actual requirements.",
      "parentUuid": "23147232_df31d39c",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 16
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_60f8e64a",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 8
      },
      "lineNbr": 229,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-25T19:07:20Z",
      "side": 1,
      "message": "Document that it does not support double/float constants. Or  add support for them (see my other comment).",
      "range": {
        "startLine": 229,
        "startChar": 13,
        "endLine": 229,
        "endChar": 24
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_a3a608b7",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 8
      },
      "lineNbr": 229,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-26T10:08:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43116641_60f8e64a",
      "range": {
        "startLine": 229,
        "startChar": 13,
        "endLine": 229,
        "endChar": 24
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "438406cc_42307219",
        "filename": "runtime/primitive.h",
        "patchSetId": 8
      },
      "lineNbr": 124,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-03-26T09:12:35Z",
      "side": 1,
      "message": "ComponentsizeInBits?",
      "range": {
        "startLine": 124,
        "startChar": 16,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43116641_a3516837",
        "filename": "runtime/primitive.h",
        "patchSetId": 8
      },
      "lineNbr": 124,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-26T10:08:06Z",
      "side": 1,
      "message": "I had that but it\u0027s feels off. It\u0027s not just ComponentSize*8, it\u0027s the range of values that can be represented by the type (in bits). That\u0027s 2^16 for short but only 2^1 for boolean.",
      "parentUuid": "438406cc_42307219",
      "range": {
        "startLine": 124,
        "startChar": 16,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_1f7d0b31",
        "filename": "runtime/primitive.h",
        "patchSetId": 8
      },
      "lineNbr": 139,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-03-25T19:07:20Z",
      "side": 1,
      "message": "return ComponentSize(type) * kBitsPerByte;",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 139,
        "endChar": 5
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23147232_df679395",
        "filename": "runtime/primitive.h",
        "patchSetId": 8
      },
      "lineNbr": 139,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2015-03-26T10:08:06Z",
      "side": 1,
      "message": "Doesn\u0027t work for boolean",
      "parentUuid": "23147232_1f7d0b31",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 139,
        "endChar": 5
      },
      "revId": "06c96a1fc09232b731844bc9c49c261526e3fc12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}