{
  "comments": [
    {
      "key": {
        "uuid": "e4932916_ece173e9",
        "filename": "compiler/dex/quick/arm64/call_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T10:08:39Z",
      "side": 1,
      "message": "I guess the 5th argument could become EncodeExtend(kA64Sxtw, 0).",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_9739cec5",
        "filename": "compiler/dex/quick/arm64/call_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T15:13:09Z",
      "side": 1,
      "message": "See my reply in utility_arm64.cc I\u0027d prefer (..., kA64Sxtw, 0).",
      "parentUuid": "e4932916_ece173e9",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04ae7d65_06005a99",
        "filename": "compiler/dex/quick/arm64/call_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T15:59:34Z",
      "side": 1,
      "message": "For consistency, we should then also change OpRegRegRegShift and all the other friends :-)",
      "parentUuid": "44b4f5af_9739cec5",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ce254b_466976ff",
        "filename": "compiler/dex/quick/arm64/call_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T16:09:55Z",
      "side": 1,
      "message": "Another CL. :-)",
      "parentUuid": "04ae7d65_06005a99",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4932916_0cdfff1e",
        "filename": "compiler/dex/quick/arm64/call_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T10:08:39Z",
      "side": 1,
      "message": "As above.",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a49db127_0417dc5f",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 648,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T10:08:39Z",
      "side": 1,
      "message": "The 5th argument could be changed to allow using EncodeExtend. This function is currently returning a mere int. I have no strong opinions about whether this should be typed differently.",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_b795f25d",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 648,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T15:13:09Z",
      "side": 1,
      "message": "Personally I prefer to have these things explicit when we have types for them. So I would add an int for the amount,\nand make the body use EncodeExtend. But I\u0027d like to hear Bill\u0027s opinion on that.",
      "parentUuid": "a49db127_0417dc5f",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04ae7d65_262b1673",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 665,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T10:08:39Z",
      "side": 1,
      "message": "This seems a bit too strong, considering that you are using r_dest.Is64Bit() above to set widened_opcode. Also consider that the assembler will be able to detect such register misusages, once its checks are enabled to the full extent.",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_7721ba92",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 665,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T15:13:09Z",
      "side": 1,
      "message": "Yes, but we kind of have a problem. The widened_opcode choice is wrong, isn\u0027t it. Dest is always 64b. Here is one of the issues where I don\u0027t know what the clean approach is.\n\nI think the check should be against r_src2?",
      "parentUuid": "04ae7d65_262b1673",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_d758a60f",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 665,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T15:23:51Z",
      "side": 1,
      "message": "Disregard my comment...",
      "parentUuid": "44b4f5af_7721ba92",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ce254b_e6ff4211",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 665,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T15:59:34Z",
      "side": 1,
      "message": "Personally, I believe that the two checks can be removed. Instructions like:\n\n  add w1, w2, w3, sxtb #0\n  add x1, x2, x3, sxtx #0\n  add x1, x2, w3, sxtb #0\n\nare all valid and could be handled by this function.",
      "parentUuid": "44b4f5af_7721ba92",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ce254b_665a7264",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 665,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T16:09:55Z",
      "side": 1,
      "message": "As long as the assembler swallows it, I\u0027d be OK to drop them. Though I have just simplified them a bit in my next PS (under testing now).",
      "parentUuid": "c4ce254b_e6ff4211",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_1c6bc503",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T10:41:33Z",
      "side": 1,
      "message": "The name of the instruction should be kA64Sub4RRre, meaning that one expects that the third argument is a w register for kA64Sub4RRre and an x register for WIDE(kA64Sub4RRre). This is not strictly conforming to how the instruction is documented. For example, one should write \"add x1, x2, w3, uxtb #2\" rather than \"add x1, x2, x3, uxtb #2\". The reason, however, is just aesthetical: \"w3, uxtb #2\" and \"x3, uxtb #2\" are two ways to write the same thing (and the the GNU assembler seems to tolerate the latter). It is therefore morally fine to name the instruction kA64Sub4RRre. What we may want to do is to up-convert r_src2, when necessary (w -\u003e x). Down-converting (x -\u003e w) will not work (it will make the assembler register check in assemble_arm64.cc fail for the 3rd argument of the add example given above).",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_17263eac",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T15:13:09Z",
      "side": 1,
      "message": "Why would we up-convert? For uxtx?",
      "parentUuid": "44b4f5af_1c6bc503",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ce254b_e63c2250",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T15:29:20Z",
      "side": 1,
      "message": "Oh, now I understand. This is not at all conforming to the specification in the documentation about the instruction set, as there the src_2 is always w.",
      "parentUuid": "44b4f5af_17263eac",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24b9c1aa_b05adea9",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T15:59:34Z",
      "side": 1,
      "message": "uxtx is a no-op, consider sxtb. Imagine the following instruction,\n\n  OpRegRegRegExtend(WIDE(kA64Sub4RRre), rx1, rx2, rw3, EncodeExtend(kA64Stxb, 0));\n\nA user may think this is perfectly legitimate. But if we do not up-convert, then the assembler will see an attempt to use rw3 in an instruction which wants an x register as its third argument. It doesn\u0027t sound right to force the user to provide an x, when an stxb operation is done on it. On the other hand, up-conversion is only legitimate if sxtx and uxtx are not being used, so if we do this we should exclude these two cases.",
      "parentUuid": "44b4f5af_17263eac",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_37726265",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T16:09:55Z",
      "side": 1,
      "message": "Thanks for the updates. I had seen my mistake. :-)\n\nBut I don\u0027t understand why sxtx and uxtx are not legitimate. According to the encoding guide (I\u0027m looking at \"ARM®\n Architecture Reference Manual\nARMv8, for ARMv8-A architecture profile\nErrata markup\nBeta\", p395), those values are perfectly fine in both 32 and 64 mode.",
      "parentUuid": "24b9c1aa_b05adea9",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6471f9c6_aeda8bf2",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T16:43:50Z",
      "side": 1,
      "message": "You are right, the doc allows sxtx for both the 32-bit and the 64-bit variants of add and sub, which means it is legitimate. But to me \"add x1, x2, w3, sxtx #0\" seems more a truncation than an extension :-)",
      "parentUuid": "44b4f5af_37726265",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a49db127_a42388c6",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 674,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-06-19T10:08:39Z",
      "side": 1,
      "message": "This is not necessary if you use EncodeExtend. You could add,\n\n DCHECK(IsExtendedEncoding(ext));",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b4f5af_d72f467b",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 674,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-06-19T15:13:09Z",
      "side": 1,
      "message": "I\u0027ll replace this with EncodeExtend.",
      "parentUuid": "a49db127_a42388c6",
      "revId": "6c7c9997f7017a79328299ab738ccfbc85825914",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}