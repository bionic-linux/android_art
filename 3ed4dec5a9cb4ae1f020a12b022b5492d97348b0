{
  "comments": [
    {
      "key": {
        "uuid": "685c3b7a_10c2d5f8",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 2
      },
      "lineNbr": 7435,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-07-22T06:35:05Z",
      "side": 1,
      "message": "The exact same change for MIPS and MIPS64 please?",
      "range": {
        "startLine": 7435,
        "startChar": 33,
        "endLine": 7435,
        "endChar": 50
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5b0f12f_203f89ef",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 2
      },
      "lineNbr": 7435,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "Sorry, I\u0027m not familiar with how to change this in MIPS. You can simply change the method GenerateClassInitializationCheck in the code_generator_mips",
      "parentUuid": "685c3b7a_10c2d5f8",
      "range": {
        "startLine": 7435,
        "startChar": 33,
        "endLine": 7435,
        "endChar": 50
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3da09b7_08bd85ba",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 2
      },
      "lineNbr": 7435,
      "author": {
        "id": 1057043
      },
      "writtenOn": "2017-07-26T02:34:46Z",
      "side": 1,
      "message": "It is literally the same change that is needed. There\u0027s the same LoadFromOffset() method and there are the same enumeration names with the same meaning. Just change kLoadWord to kLoadUnsignedByte in two more places, that\u0027s all.",
      "parentUuid": "e5b0f12f_203f89ef",
      "range": {
        "startLine": 7435,
        "startChar": 33,
        "endLine": 7435,
        "endChar": 50
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1efa8e5_aa5bfbc7",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "Explain why this is setting it to 0 but the other one is InitializeBitString.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d27de60_524849b3",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 454,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "As Nicola commented, it\u0027s not necessary to lock it here since it\u0027s during startup and single-threaded. Just add a comment why lock is not necessary.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7ed3075_39b4bdd2",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1768,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "The abstraction here seems wrong. Can you implement a visitor pattern here ?\n\n    template \u003ctypename T\u003e\n    VisitSuperClasses(ObjPtr\u003cmirror::Class\u003e klass,\n                      gc::space::ImageSpace* space,\n                      T\u0026\u0026 visitor) {\n       .....\n       // L1781 becomes visitor(klass);\n    }\n\n    VisitSuperClasses(klass, space,\n                      [this](ObjPtr\u003cmirror::Class\u003e kls) { \n                          InitializeAndAssignSuperBitstring(klass, true); }\n    );",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62ae60e7_77f9921d",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1768,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-24T17:24:06Z",
      "side": 1,
      "message": "This is not a very descriptive name given the purpose of this fuction, i.e. to \"re-assign the bitstrings for these classes\".",
      "range": {
        "startLine": 1768,
        "startChar": 18,
        "endLine": 1768,
        "endChar": 36
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78d6f446_85ae1a31",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1768,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "Also after looking at how it\u0027s used for app images it should probably take a class_set as the input (not a klass).",
      "parentUuid": "c7ed3075_39b4bdd2",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a12cb259_813d7357",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1768,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "The InitializeAndAssignSuperBitstring requires mutator_lock, which makes the lambda expression cannot pass compile.",
      "parentUuid": "c7ed3075_39b4bdd2",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3daa077_f1e8ec43",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1768,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-28T18:42:10Z",
      "side": 1,
      "message": "You can add SHARED_REQUIRES(mutator_lock)_ to the lambda expression\n\n   [caps](args) SHARED_REQUIRES(mutator_lock_) { ... }",
      "parentUuid": "a12cb259_813d7357",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "132797fa_73a8c478",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1771,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "Our code still uses the bracket for this case.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb08953e_488d1c73",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1771,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "132797fa_73a8c478",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cab27d9f_53f5fe41",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1774,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-24T17:24:06Z",
      "side": 1,
      "message": "Break line after the operator, not before.",
      "range": {
        "startLine": 1774,
        "startChar": 6,
        "endLine": 1774,
        "endChar": 8
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91e0fc5_caf9b5c9",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1774,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "cab27d9f_53f5fe41",
      "range": {
        "startLine": 1774,
        "startChar": 6,
        "endLine": 1774,
        "endChar": 8
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3240fb7_af817741",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1994,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "nit: Remove",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11a06876_c13b1e23",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 1994,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "f3240fb7_af817741",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a37f8ea_2d62531c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2015,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "nit: app image / boot image (add a space)",
      "range": {
        "startLine": 2015,
        "startChar": 43,
        "endLine": 2015,
        "endChar": 51
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e65f3171_2b6e624c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2015,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "4a37f8ea_2d62531c",
      "range": {
        "startLine": 2015,
        "startChar": 43,
        "endLine": 2015,
        "endChar": 51
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4eb2aa7_683ce5a0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2016,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "boot image since we do not update the boot image accordingly.",
      "range": {
        "startLine": 2016,
        "startChar": 70,
        "endLine": 2016,
        "endChar": 79
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c170b62_301c6ab5",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2016,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "c4eb2aa7_683ce5a0",
      "range": {
        "startLine": 2016,
        "startChar": 70,
        "endLine": 2016,
        "endChar": 79
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e10d6e01_fb0ea8c4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2018,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "nit: ClassTable::ClassSet visited_set;",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f9bd4a1_a093041c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2018,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "e10d6e01_fb0ea8c4",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85636a41_1b97e339",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2019,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "for (const ClassTable::TableSlot\u0026 root : temp_set)",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66c547ca_6ba687e6",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2019,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "85636a41_1b97e339",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26834207_bce00ae0",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2854,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "nit: Not sure what this should be called yet, but it sounds like \u0027bool reinitialize\u0027 would be more appropriate since it effectively resets and then does an initialization again.",
      "range": {
        "startLine": 2854,
        "startChar": 57,
        "endLine": 2854,
        "endChar": 64
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e85371de_9b49d291",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2854,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "26834207_bce00ae0",
      "range": {
        "startLine": 2854,
        "startChar": 57,
        "endLine": 2854,
        "endChar": 64
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32afa10b_9bf5bca4",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2858,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "Why can\u0027t this be done in L2863? If there is ordering requirement then please describe why.\n\n\n  if ((super_class !\u003d nullptr \u0026\u0026 setZero) || klass-\u003eGetBitString() \u003d\u003d 0) {\n    klass-\u003eInitializeBitString();\n  }",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7a7bf95_8b0ccedc",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 2858,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "32afa10b_9bf5bca4",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9118e704_2efa8a23",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3937,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "nit: remove",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72728cea_bf5c4dc6",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 2
      },
      "lineNbr": 3937,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "9118e704_2efa8a23",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d25f955_4d782a8c",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Is it modified? It should be commented /*out*/ then.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b09c1b75_b8fd4bd9",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "4d25f955_4d782a8c",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "378c6de3_c8d60bc6",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Why? Because it takes it?",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db2993c0_4b74740d",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "I copied from ClassLinker::DefineClass",
      "parentUuid": "378c6de3_c8d60bc6",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "230d3e59_bc96c950",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "and assign bitstring for superclass.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612d2c29_c0ec9913",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "230d3e59_bc96c950",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec0cdc26_6a7a7868",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "What does this \u0027setZero\u0027 mean? Please document this.",
      "range": {
        "startLine": 209,
        "startChar": 70,
        "endLine": 209,
        "endChar": 82
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "250d6140_f2b2f43d",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "ec0cdc26_6a7a7868",
      "range": {
        "startLine": 209,
        "startChar": 70,
        "endLine": 209,
        "endChar": 82
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3457764b_4ab04a91",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Why? Because it takes it?",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1676d793_473e0048",
        "filename": "runtime/class_linker.h",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "I copied from ClassLinker::DefineClass",
      "parentUuid": "3457764b_4ab04a91",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ea73d8f_0764b262",
        "filename": "runtime/class_linker_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "status?",
      "range": {
        "startLine": 609,
        "startChar": 56,
        "endLine": 609,
        "endChar": 66
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c141f18d_daf6cd16",
        "filename": "runtime/class_linker_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-24T17:24:06Z",
      "side": 1,
      "message": "Remove this. Status is already checked below.",
      "parentUuid": "2ea73d8f_0764b262",
      "range": {
        "startLine": 609,
        "startChar": 56,
        "endLine": 609,
        "endChar": 66
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c72cb230_1c66012e",
        "filename": "runtime/class_linker_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "c141f18d_daf6cd16",
      "range": {
        "startLine": 609,
        "startChar": 56,
        "endLine": 609,
        "endChar": 66
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e655370_347ff803",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "delete.",
      "range": {
        "startLine": 68,
        "startChar": 55,
        "endLine": 68,
        "endChar": 56
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2733f3c0_8bd1e296",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "3e655370_347ff803",
      "range": {
        "startLine": 68,
        "startChar": 55,
        "endLine": 68,
        "endChar": 56
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33121cd0_844b62d4",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 540,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Move this contents to InstanceOfAndStatus::IsSubClass\n\nChange contents to:\n\n    std::atomic\u003cInstanceOfAndStatus\u003e* pair_ptr \u003d this + StatusOffset();\n    InstanceOfAndStatus pair \u003d pair_ptr-\u003eload(std::memory_order_relaxed);\n    \n    if (pair.CheckAssignedBitstring()) {\n        return pair.IsSubclass(klass);\n    } else {\n        return SlowIsSubclass(klass);\n    }",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76a15353_95f72e71",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Move to SetStatusBits helper and add the following atomic code instead of using locks:\n\nThe basic understanding here is that we replace the entire \"status_\" field at once [atomically] with a CAS instead of trying to individually mutate bits.\n\nUse release order because it should not give extra ordering guarantees, we only need to prevent word tearing.\n\n    void SetStatusBits(Status status) {\n      std::atomic\u003cInstanceOfAndStatus\u003e* pair_ptr \u003d this + StatusOffset(); // add casts\n\n      InstanceOfAndStatus old_pair, new_pair;\n       do {\n          old_pair \u003d pair_ptr-\u003eload(std::memory_order::relaxed);\n\n          new_pair \u003d old_pair;\n          new_pair.SetStatus(status);\n       } while (!pair_ptr-\u003ecompare_exchange_weak(old_pair, new_pair, std::memory_order::relaxed, std::memory_order::relaxed));\n    }",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6238eebe_be03472c",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-25T20:48:48Z",
      "side": 1,
      "message": "(See L332 first)\n\n    InstanceOfAndStatus super_instance_of \u003d GetSuperClass()-\u003eGetInstanceOfAndStatus();\n    InstanceOfAndStatus initialized_instance_of \u003d InstanceOfAndStatus::Initialize(super_instance_of, Depth());\n\n\n    TrySet...(initialized_instance_of);",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7562d7c8_a65fab83",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "nit: Poor encapsulation, pass dep-1 and dep here and have GetUpdatedRangeBits do the array lookup.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fccb93e_aa07f892",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "What is this case for ? Object? Add a DCHECK that it\u0027s object then.\n\nBut also I don\u0027t see why Object would need anything since it\u0027s special.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50ac248f_000669c5",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Like the above SetStatusBits helper, this should use another helper\n\n\n    void SetBitstringHelper(Bitstring new_bistring) {\n      std::atomic\u003cInstanceOfAndStatus\u003e* pair_ptr \u003d this + StatusOffset(); // add casts\n      InstanceOfAndStatus old_pair, new_pair;\n       do {\n          old_pair \u003d pair_ptr-\u003eload(std::memory_order::relaxed);\n          new_pair \u003d old_pair;\n          new_pair.SetBitstring(new_bitstring);\n       } while (!pair_ptr-\u003ecompare_exchange_weak(old_pair, new_pair, std::memory_order::relaxed, std::memory_order::relaxed));\n    }\n\nL213, L215 should call this.\n\nMove existing class::SetBitstring into InstanceOfAndStatus::SetBitstring",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c4c3c32_f0ca7fdb",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "This shouldn\u0027t be in class.h because it\u0027s only used by other bitstring functions.\n\nAlso make it const.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "296be4a3_b11a3d94",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 226,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "What is this \u003e\u003e8 and why does it need a \u0026 1 ?",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac2c91c0_0c791bc2",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 226,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "The 56-th bit is the overflow bit, and we need an \u0026 1 to get that bit.",
      "parentUuid": "296be4a3_b11a3d94",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45914674_91618804",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 230,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "const",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c1a9bec_a0bb9491",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-25T20:48:48Z",
      "side": 1,
      "message": "return GetInstanceOfAndStatus().CheckAssignedBitString(Depth())",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d1d7475_36d87afe",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "java.lang.Object",
      "range": {
        "startLine": 268,
        "startChar": 44,
        "endLine": 268,
        "endChar": 62
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d5dc8ff_020e9461",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "move this after line 289.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9dcc5f9_406cf6bf",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 332,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-25T20:48:48Z",
      "side": 1,
      "message": "As discussed offline, if we extract code class.cc into a separate struct, it becomes really easy to use it with atomics:\n\n   // assume these use std::atomic::load relaxed\n   InstanceOfAndStatus GetInstanceOfAndStatus() { ... }\n   // assume this uses std::atomic::weak_compare_and_exchange relaxed\n   bool TrySetInstanceOfAndStatus(InstanceOfAndStatus instanceof) { ... }\n\n   ///\n\n\n   do {\n\n     int depth \u003d Depth();\n     InstanceOfAndStatus instanceOf \u003d GetInstanceOfAndStatus();\n     InstanceOfAndStatus parentInstanceOf \u003d GetSuperClass()-\u003eGetInstanceOfAndStatus();\n \n     uint64_t current \u003d instanceOf.AssignBitstringForSelf(parentInstanceOf, depth);\n     parentInstanceOf.AssignBitStringForSuper(current, depth);\n\n\n   ////\n     CAS fails \u003d TrySetInstanceOfAndStatus(instanceOf);\n     CAS fails \u003d GetSuperClass()-\u003eTrySetInstanceOfAndStatus(parentInstanceOf);\n\n     // not quite sound because this actually requires a DCAS but that\u0027s a separate problem we can address later.\n   } while (CAS fails)\n\n\nThe important point here is that the mutation is isolated to 2 lines of code, making it very easy to see where the concurrent memory accesses are happening.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c7cd0fa_2eff4e6e",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Don\u0027t hardcode numbers like this, they should come from another function, from a constexpr, offsetof, etc.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e47bd191_c57ab279",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-24T17:24:06Z",
      "side": 1,
      "message": "static_cast\u003cint8_t\u003e(GetField64Volatile\u003ckVerifyFlags\u003e(StatusOffset()))",
      "range": {
        "startLine": 156,
        "startChar": 8,
        "endLine": 156,
        "endChar": 88
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f3f4268_53f6457f",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "e47bd191_c57ab279",
      "range": {
        "startLine": 156,
        "startChar": 8,
        "endLine": 156,
        "endChar": 88
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8719edf_699e1954",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 669,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-07-24T17:24:06Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 669,
        "startChar": 35,
        "endLine": 669,
        "endChar": 43
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "462a388a_441d9de6",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 669,
      "author": {
        "id": 1209485
      },
      "writtenOn": "2017-07-26T02:24:10Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "e8719edf_699e1954",
      "range": {
        "startLine": 669,
        "startChar": 35,
        "endLine": 669,
        "endChar": 43
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e52d05a9_83aacc18",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 1542,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "status of the class",
      "range": {
        "startLine": 1542,
        "startChar": 35,
        "endLine": 1542,
        "endChar": 64
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d632dbf0_04385d3c",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 1544,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-07-21T23:17:27Z",
      "side": 1,
      "message": "not needed.\n\nAlso add some comments about the rule that non-leaf classes must have its bitstring set/overflowed.",
      "range": {
        "startLine": 1544,
        "startChar": 42,
        "endLine": 1544,
        "endChar": 47
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29305622_dc30e833",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 2
      },
      "lineNbr": 1545,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Move to separate struct, InstanceOfAndStatus or similar. We will need this to make it use std::atomic sanely.\n\n  std::atomic\u003cInstanceOfAndStatus\u003e status_;\n\nMove all the helpers you added above into InstanceOfAndStatus.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b610a21_e98c5095",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "Seems it\u0027s going about it the wrong way. This should be set from sizeof(BitstringLength).",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac65f233_505a9712",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "Not really accurate according to comments, I would\u0027ve expected 0,12,10,10,9 etc here.\n\nIt is storing the index into the LONG right now, not the length. Either rename to e.g. BitstringIndices or change the value being stored.",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b03c983_ea4a1b64",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "Why is there 64? It should be 63.",
      "range": {
        "startLine": 27,
        "startChar": 89,
        "endLine": 27,
        "endChar": 91
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8de43dab_4c127e29",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "What is kFirstLevelOffset? Document please?",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d11ce0a_1bbbfa72",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T17:17:20Z",
      "side": 1,
      "message": "Add assert that that the levels align to 32-bits (i.e. there exists some sum_of_bits(level0..levelI) \u003d\u003d 32)",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4c16927_71f10056",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "I don\u0027t know what this is doing, but maybe you meant to do this instead?\n\n   static_assert(lastLevelLength(BitstringLength) + BitSizeOf\u003cStatus\u003e() \u003d\u003d BitSizeOf\u003cuint64_t\u003e())",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b678180_9604af3b",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "This current abstraction is weird because GetFirst56Bits can just mask off the last 8 bits into 0.\n\n   // don\u0027t do this.\n   inline uint64_t ClearLast8Bits(uint64_t mask) {\n      return (mask \u0026 ~0xff);\n   }\n\nIn fact expressed like that the operation is so trivial it hardly needs a helper to do it.\n\n   static constexpr uint64_t kStatusMask \u003d 0xff;\n\n   int get_first_56_bits \u003d value \u0026 ~kStatusMask;\n   int last_8_bits \u003d value \u0026 kStatusMask;\n\n//////\n\nBut we shouldn\u0027t hardcode 0xff either.\n   \n   static constepxr uint64_t kStatusMask \u003d (1u \u003c\u003c sizeof(Status)) - 1u;",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a150cdd_26207e3f",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "nit: BitSizeOf(cur) in bit_utils.h",
      "range": {
        "startLine": 52,
        "startChar": 18,
        "endLine": 52,
        "endChar": 20
      },
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16439b6d_7ce77347",
        "filename": "runtime/mirror/class_bitstring_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-07-24T18:02:10Z",
      "side": 1,
      "message": "We do have runtime/base/bit_utils.h so I recommend moving general functions there (and using helpers there if you can) and keep bitstring-specific functions here.\n\nThis one and L51 are good candidates to be more generalized in bit_utils.h",
      "revId": "3ed4dec5a9cb4ae1f020a12b022b5492d97348b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}