{
  "comments": [
    {
      "key": {
        "uuid": "1840c241_30ac88a9",
        "filename": "runtime/entrypoints_order_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-07T09:39:36Z",
      "side": 1,
      "message": "line too long",
      "range": {
        "startLine": 112,
        "startChar": 76,
        "endLine": 112,
        "endChar": 101
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_3f068728",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-07T09:39:36Z",
      "side": 1,
      "message": "So are we guaranteeing that every managed frame that is deoptimized *will* end up here and pick up its shadow frame (if created by SetValues) ?",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 214,
        "endChar": 74
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98a11261_d03d2c98",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "debugger side will be responsible for that by patching the return pc\u0027s and reach here.",
      "parentUuid": "f8f4ce42_3f068728",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 214,
        "endChar": 74
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_9f7593aa",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-07T09:39:36Z",
      "side": 1,
      "message": "Shouldn\u0027t it be the one with the highest (or lowest, not sure which way they are going) frame id? Could you DCHECK that?",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 215,
        "endChar": 97
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98a11261_f0d708b6",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Not sure if there is highest. The range can be from 0 to max allowed stack depth.",
      "parentUuid": "f8f4ce42_9f7593aa",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 215,
        "endChar": 97
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_9f1913a9",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-07T13:10:36Z",
      "side": 1,
      "message": "DCHECK_EQ",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 12
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8970a01_4d8ae522",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "For nullptr DCHECK_EQ doesn\u0027t work.",
      "parentUuid": "f8f4ce42_9f1913a9",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 12
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8fb8a32_c140e408",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-08T09:29:53Z",
      "side": 1,
      "message": "This is wrong (and all others SetVRegXXX below) when the ShadowFrame has been created for the debugger with a value for the current vreg. Otherwise, we overwrite all values set by the debugger.\n\nThis means we need to know which registers have been set by the debugger so we do not override them, thus only set the vregs that have not been \"touched\" by the debugger. I think you need to keep a kind of set of all vregs modified by the debugger in the FrameIdToShadowFrame.\n\nAn alternative solution is to init your ShadowFrame (like we do it here) when creating it in Thread::GetDebuggerShadowFrameForFrameId. Therefore, when we deoptimize the current frame and we find there is already a ShadowFrame for it (in Thread::tlsPtr_.frame_id_to_shadow_frame list), it is already initialized (and even updated by the debugger) so there is nothing more to do (except linking it to previous ShadowFrame). It prevents from tracking which vregs are touched by the debugger.",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 240,
        "endChar": 61
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "534a1d43_ef311619",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-08T18:21:49Z",
      "side": 1,
      "message": "Very good point! I\u0027ll try this approach:\nHave a CreateDebuggerShadowFrame() that returns a ShadowFrame that has another uint32_t array at the end that keeps track of which values are set. Debugger shadow frame will have a special dex_pc of 0xffffffff. A ShadowFrame::SetVRegForDebugger() will do regular SetVReg() plus setting a flag in the new array at the end. So later when we initialize deoptimized shadow frame here we check if the value has been set first.\n\nAnother thing is GetVRegFromOptimizedCode() also needs to check the debugger shadow frame first if one is available before it visits the real optimized stack frame to get values.",
      "parentUuid": "d8fb8a32_c140e408",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 240,
        "endChar": 61
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_6586c2f2",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-08T20:55:49Z",
      "side": 1,
      "message": "I actually liked Sebastien\u0027s other suggestion of creating the deopt frame and eagerly fetch the values of vregs :-) Any reason you preferred to do it the other way?",
      "parentUuid": "534a1d43_ef311619",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 240,
        "endChar": 61
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "731ba15b_57563ca1",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T17:55:46Z",
      "side": 1,
      "message": "1) creating the deopt frame requires verifier, class loading and may set thread local. I\u0027m not sure if jdwp thread is a java thread and can do all of those. Class loading is done at a different time from the real deoptimization time from a different thread. And I\u0027m a little uncomfortable about the possibility of accidentally setting jdwp thread\u0027s thread local which should be done on the visited thread.\n\n2) since class loading can fail (especially if it\u0027s done from a different thread at a different time) so initializing the deopt frame can fail. Then it\u0027s not able to signal it\u0027s uninitialized values. I plan some change on GetVRegFromOptimizedCode() side also to get the set values first before visiting the compiled frame so it\u0027s good to be able to make the distinction.",
      "parentUuid": "f8f4ce42_6586c2f2",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 240,
        "endChar": 61
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_d4e41cd1",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-09T17:57:46Z",
      "side": 1,
      "message": "If creating the deopt frame did not need verifier, would 1) and 2) still be a problem?",
      "parentUuid": "731ba15b_57563ca1",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 240,
        "endChar": 61
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "387026c3_3c90fd9e",
        "filename": "runtime/quick_exception_handler.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T18:20:15Z",
      "side": 1,
      "message": "Probably not. Cutting the dependency on verifier would be great. Actually what\u0027s the reason we need to run verifier for deoptimization? Quick?",
      "parentUuid": "18f28255_d4e41cd1",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 240,
        "endChar": 61
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_ae6db7fb",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-07T09:39:36Z",
      "side": 1,
      "message": "Looks like GetDebuggerShadowFrameForFrameId never returns null if search_only is false. Should you DCHECK instead?",
      "range": {
        "startLine": 481,
        "startChar": 0,
        "endLine": 481,
        "endChar": 32
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_40bcce57",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-07T13:10:36Z",
      "side": 1,
      "message": "Yeah, the ShadowFrame must exist here so it\u0027s more a CHECK(shadow_frame !\u003d nullptr) (and you can remove the if statement)",
      "range": {
        "startLine": 481,
        "startChar": 2,
        "endLine": 481,
        "endChar": 32
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "789c5e2a_c4d81495",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18f28255_40bcce57",
      "range": {
        "startLine": 481,
        "startChar": 2,
        "endLine": 481,
        "endChar": 32
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8fb8a32_7e06515b",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-07T13:10:36Z",
      "side": 1,
      "message": "Also add DISALLOW_COPY_AND_ASSIGN(FrameIdToShadowFrame)",
      "range": {
        "startLine": 242,
        "startChar": 1,
        "endLine": 242,
        "endChar": 8
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "789c5e2a_44064490",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8fb8a32_7e06515b",
      "range": {
        "startLine": 242,
        "startChar": 1,
        "endLine": 242,
        "endChar": 8
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_a31964a8",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-07T13:10:36Z",
      "side": 1,
      "message": "const size_t",
      "range": {
        "startLine": 243,
        "startChar": 2,
        "endLine": 243,
        "endChar": 8
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8970a01_2dd8b916",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18f28255_a31964a8",
      "range": {
        "startLine": 243,
        "startChar": 2,
        "endLine": 243,
        "endChar": 8
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8f4ce42_9fdeb3ce",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-07T13:10:36Z",
      "side": 1,
      "message": "ShadowFrame* const",
      "range": {
        "startLine": 244,
        "startChar": 2,
        "endLine": 244,
        "endChar": 14
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f28255_a026fa44",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 250,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-07T09:39:36Z",
      "side": 1,
      "message": "Nit: one per line?",
      "range": {
        "startLine": 248,
        "startChar": 54,
        "endLine": 250,
        "endChar": 72
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8970a01_2df19990",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 250,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Done. Now there is one arg anyway after refactoring to Findxxx and FindOrCreatexxx.",
      "parentUuid": "18f28255_a026fa44",
      "range": {
        "startLine": 248,
        "startChar": 54,
        "endLine": 250,
        "endChar": 72
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8fb8a32_5e3ef5ea",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-07T09:39:36Z",
      "side": 1,
      "message": "no delete of the entry?",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 283,
        "endChar": 13
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "586ddaeb_e3d740b6",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Nice catch. Added the delete.",
      "parentUuid": "d8fb8a32_5e3ef5ea",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 283,
        "endChar": 13
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d829ca86_cefda332",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-07T13:10:36Z",
      "side": 1,
      "message": "It\u0027s more \"GetOrCreateDebuggerShadowFrameForFrameId\" since you may create the frame if requested.\n\nWhy not having two distinct methods and remove the bool search_only flag? You would have:\n\n  * FindDebuggerShadowFrameForFrameId: for finding the frame\n  * GetOrCreateDebuggerShadowFrameForFrameId: for finding or creating the frame, using FindDebuggerShadowFrameForFrameId",
      "range": {
        "startLine": 822,
        "startChar": 15,
        "endLine": 822,
        "endChar": 47
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98a11261_b0fae036",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d829ca86_cefda332",
      "range": {
        "startLine": 822,
        "startChar": 15,
        "endLine": 822,
        "endChar": 47
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8fb8a32_7e39b100",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 1238,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-07-07T09:39:36Z",
      "side": 1,
      "message": "more of a linked list?",
      "range": {
        "startLine": 1238,
        "startChar": 21,
        "endLine": 1238,
        "endChar": 26
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "789c5e2a_2401b876",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 1238,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Changed to \"a linked list that keeps the mapping\"",
      "parentUuid": "d8fb8a32_7e39b100",
      "range": {
        "startLine": 1238,
        "startChar": 21,
        "endLine": 1238,
        "endChar": 26
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8fb8a32_9e9c7d70",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 1241,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2015-07-07T13:10:36Z",
      "side": 1,
      "message": "We must CHECK this is null when the thread exits, to be sure we do not leave any shadow frame there.",
      "range": {
        "startLine": 1241,
        "startChar": 26,
        "endLine": 1241,
        "endChar": 50
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "387026c3_42a70897",
        "filename": "runtime/thread.h",
        "patchSetId": 2
      },
      "lineNbr": 1241,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-07-09T21:43:58Z",
      "side": 1,
      "message": "Added a check in Thread::~Thread().",
      "parentUuid": "d8fb8a32_9e9c7d70",
      "range": {
        "startLine": 1241,
        "startChar": 26,
        "endLine": 1241,
        "endChar": 50
      },
      "revId": "03ff28454d28c368ed6eb34ed41881720ed4af8b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}