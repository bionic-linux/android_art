{
  "comments": [
    {
      "key": {
        "uuid": "bad0f70c_d91653fc",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 51
      },
      "lineNbr": 558,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2019-07-22T18:20:19Z",
      "side": 1,
      "message": "I have just realized this might be incorrect for debuggable graphs. In IsDebuggable() JIT mode (Runtime::IsAsyncDeoptimizeable) we can deoptimize when returning from suspend; https://android-review.googlesource.com/c/platform/art/+/472840 implemented this including breaking from a busy loop for the sake of debugging. Thus the environment values must be strictly preserved. In this case the SuspendCheck of both vector and fixup scalar loops will be wrongly initialized with a stale value of VReg#0 from the preheader (i3) instead of the loop Phi (i45, i84).\n\nThis could be fixed by more precise Environment cloning but there is another situation with debuggable graphs and SIMD: for vectorized reduction loops \"for (int i \u003d 0; i \u003c 131; i++) s +\u003d a[i];\" value of \u0027s\u0027 can\u0027t be easily accessed by environment of Suspend check at all (it someway resides in a vector register).\n\nWhat do you think? Should we temporary disable loop optimizations for debuggable graphs until the fixes are done?\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nCopyEnvironmentFromWithLoopPhiAdjustment example:\n\n  static void addCleanUpLoop(int x) {\n    for (int i \u003d 0; i \u003c 131; i++)\n      a[i] +\u003d x;\n  }\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nbefore LoopOptimization:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nB2 \u003c- B1,B3 -\u003e B4,B3 dom B1 [-1, -1]\n  Locals size 0 [None]\n    5    i5   [v3,v26]\n_p__bci__use__tid__instruction__________________________________________________ (HIR)\n    0    4    i5   Phi [i3,i26] dex_pc:n/a reg:0 is_catch_phi:false loop:B2 outer_loop:none irreducible:false\n    0    0    v7   SuspendCheck dex_pc:1 env:[[i5,_,_,i0]] loop:B2 outer_loop:none irreducible:false\n    0    1    z9   GreaterThanOrEqual [i5,i8] dex_pc:3 loop:B2 outer_loop:none irreducible:false\n    0    0    v10  If [z9] dex_pc:3 loop:B2 outer_loop:none irreducible:false\n  \nB3 \u003c- B2 -\u003e B2 dom B2 [-1, -1]\n  Locals size 0 [None]\n_p__bci__use__tid__instruction__________________________________________________ (HIR)\n    0    1    i19  ArrayGet [l15,i5] dex_pc:7 is_string_char_at:false loop:B2 outer_loop:none irreducible:false\n    0    1    i20  Add [i0,i19] dex_pc:9 loop:B2 outer_loop:none irreducible:false\n    0    0    v24  ArraySet [l15,i5,i20] dex_pc:10 value_can_be_null:true needs_type_check:false loop:B2 outer_loop:none irreducible:false\n    0    1    i26  Add [i5,i25] dex_pc:12 loop:B2 outer_loop:none irreducible:false\n    0    0    v27  Goto dex_pc:14 loop:B2 outer_loop:none irreducible:false\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nAfter loop optimization.\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n(Vector loop):\n\nB7 \u003c- B6,B8 -\u003e B9,B8 dom B6 [-1, -1]\n  Locals size 0 [None]\n    45   i45  [v3,v80]\n_p__bci__use__tid__instruction__________________________________________________ (HIR)\n    0    5    i45  Phi [i3,i80] dex_pc:n/a reg:4294967295 is_catch_phi:false loop:B7 outer_loop:none irreducible:false\n    0    0    v42  SuspendCheck dex_pc:1 env:[[i3,_,_,i0]] loop:B7 outer_loop:none irreducible:false\n    0    1    z46  AboveOrEqual [i45,i40] dex_pc:n/a loop:B7 outer_loop:none irreducible:false\n    0    0    v47  If [z46] dex_pc:n/a loop:B7 outer_loop:none irreducible:false\n \u003c ........ \u003e\n\n\n(fixup scalar loop)\nB10 \u003c- B9,B11 -\u003e B4,B11 dom B9 [-1, -1]\n  Locals size 0 [None]\n    84   i84  [v45,v90]\n_p__bci__use__tid__instruction__________________________________________________ (HIR)\n    0    4    i84  Phi [i45,i90] dex_pc:n/a reg:4294967295 is_catch_phi:false loop:B10 outer_loop:none irreducible:false\n    0    0    v82  SuspendCheck dex_pc:1 env:[[i3,_,_,i0]] loop:B10 outer_loop:none irreducible:false\n    0    1    z85  AboveOrEqual [i84,i8] dex_pc:n/a loop:B10 outer_loop:none irreducible:false\n    0    0    v86  If [z85] dex_pc:n/a loop:B10 outer_loop:none irreducible:false\n  \nB11 \u003c- B10 -\u003e B10 dom B10 [-1, -1]\n  Locals size 0 [None]\n_p__bci__use__tid__instruction__________________________________________________ (HIR)\n    0    1    i87  ArrayGet [l15,i84] dex_pc:7 is_string_char_at:false loop:B10 outer_loop:none irreducible:false\n    0    1    i88  Add [i0,i87] dex_pc:9 loop:B10 outer_loop:none irreducible:false\n    0    0    v89  ArraySet [l15,i84,i88] dex_pc:10 value_can_be_null:true needs_type_check:false loop:B10 outer_loop:none irreducible:false\n    0    1    i90  Add [i84,i25] dex_pc:n/a loop:B10 outer_loop:none irreducible:false\n    0    0    v83  Goto dex_pc:n/a loop:B10 outer_loop:none irreducible:false",
      "range": {
        "startLine": 557,
        "startChar": 0,
        "endLine": 558,
        "endChar": 55
      },
      "revId": "f8f5a16ed7bad1e18179e38453e59c96a944de10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "151a55a9_5ff2a479",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 51
      },
      "lineNbr": 558,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2019-07-23T07:39:20Z",
      "side": 1,
      "message": "\u003e What do you think? Should we temporary disable loop optimizations for debuggable graphs until \u003e the fixes are done?\n\nYes that will be my preference, and bonus points if you can write a test case that exhibits the issue :)\n\nAre we safe with regards to synchronous deopt?",
      "parentUuid": "bad0f70c_d91653fc",
      "range": {
        "startLine": 557,
        "startChar": 0,
        "endLine": 558,
        "endChar": 55
      },
      "revId": "f8f5a16ed7bad1e18179e38453e59c96a944de10",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}