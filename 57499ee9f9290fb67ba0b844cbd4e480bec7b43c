{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3f577be1_32ecc47d",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-19T12:00:31Z",
      "side": 1,
      "message": "I looked through go/android-ndk-api-guidelines, which we ought to follow here.\n\nBesides the doc requirements, I note two things:\n\n- We may use sized enums for better typing - that C++ feature is explicitly allowed in APEX APIs: http://go/android-ndk-api-guidelines#headers\n- There should be a stringify function for the error messages: http://go/android-ndk-api-guidelines#error-return-types",
      "revId": "57499ee9f9290fb67ba0b844cbd4e480bec7b43c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cee875c_c0b47f4b",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-19T12:43:32Z",
      "side": 1,
      "message": "Since this was coming in late in the review I\u0027ll +2 if you prefer to follow up on it later.",
      "parentUuid": "3f577be1_32ecc47d",
      "revId": "57499ee9f9290fb67ba0b844cbd4e480bec7b43c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcf6eff8_8a2ecdf4",
        "filename": "libdexfile/external/include/art_api/dex_file_external.h",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-20T20:29:47Z",
      "side": 1,
      "message": "Thanks, I will do it in follow up if that is ok.",
      "parentUuid": "6cee875c_c0b47f4b",
      "revId": "57499ee9f9290fb67ba0b844cbd4e480bec7b43c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86bbee02_1cb04df5",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-18T17:39:06Z",
      "side": 1,
      "message": "If the intention is to drop the support for clients that doesn\u0027t know the size beforehand, then we don\u0027t need to set the new size into *size, and it doesn\u0027t even need to be a pointer. And these sentences can be deleted.",
      "range": {
        "startLine": 78,
        "startChar": 49,
        "endLine": 80,
        "endChar": 46
      },
      "revId": "57499ee9f9290fb67ba0b844cbd4e480bec7b43c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17de8bf8_8031dff4",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-03-18T17:59:29Z",
      "side": 1,
      "message": "It is not the intention.  We should definitely fail to open dex files which are too small.  And as long as we fail, it seems reasonable to return distinct code so that client might retry.\n\nHowever, truncated dex file is an error nonetheless.  The dex file was not opened.  It is ok for the client to retry with bigger size.\n\nI just wanted to fix the inconsistency, where one open method treats truncated dex files as error and other other method threads it as suspenseful failure.",
      "parentUuid": "86bbee02_1cb04df5",
      "range": {
        "startLine": 78,
        "startChar": 49,
        "endLine": 80,
        "endChar": 46
      },
      "revId": "57499ee9f9290fb67ba0b844cbd4e480bec7b43c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "327a0f6b_b9de656a",
        "filename": "libdexfile/external/include/art_api/dex_file_support.h",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-19T12:00:31Z",
      "side": 1,
      "message": "\u003e It is not the intention\n\nOk, I mentioned it because you said earlier that both libunwindstack and simpleperf know the file pointer and size.\n\n\u003e where one open method treats truncated dex files as error and other other method threads it as suspenseful failure\n\nYes, that\u0027s because the two methods are inherently different in how they handle size. This one was designed to support a too small size so it shouldn\u0027t be an error here - only the caller knows if it\u0027s an error. That\u0027s not the case in OpenFromFd.\n\nIt also ties in with letting the caller detect the condition easily through the empty string error message - having to look for a change in *size to ignore the error is more cumbersome.\n\nSo that\u0027s the reason. But it\u0027s up to you if you prefer another way.",
      "parentUuid": "17de8bf8_8031dff4",
      "range": {
        "startLine": 78,
        "startChar": 49,
        "endLine": 80,
        "endChar": 46
      },
      "revId": "57499ee9f9290fb67ba0b844cbd4e480bec7b43c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}