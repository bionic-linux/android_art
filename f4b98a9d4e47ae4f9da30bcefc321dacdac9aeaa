{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ad088498_94b1995a",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-25T14:30:33Z",
      "side": 1,
      "message": "Can you expand the comment, and explain what the loop below is for?",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 223,
        "endChar": 99
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3674a3cc_cae2a95c",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-25T14:30:33Z",
      "side": 1,
      "message": "add \"which is in the same try as the instruction we want to move\"?",
      "range": {
        "startLine": 243,
        "startChar": 63,
        "endLine": 243,
        "endChar": 68
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b3b9291_b1e79be4",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-03-25T14:57:07Z",
      "side": 1,
      "message": "It will not necessarily be in the same try as the instruction we want to move. It might not even be in a try at all. What we do know is that `target_block` is not a valid choice now so we go to the dominator to see if we can use that one.",
      "parentUuid": "3674a3cc_cae2a95c",
      "range": {
        "startLine": 243,
        "startChar": 63,
        "endLine": 243,
        "endChar": 68
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "634db336_a38edf6a",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-25T15:21:01Z",
      "side": 1,
      "message": "Right, so what we\u0027re looking for is either:\n- Same try/catch\n- No try/catch\n\nBut that\u0027s it, right?",
      "parentUuid": "8b3b9291_b1e79be4",
      "range": {
        "startLine": 243,
        "startChar": 63,
        "endLine": 243,
        "endChar": 68
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab6f6ae5_3a3064bb",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-03-25T16:03:27Z",
      "side": 1,
      "message": "I\u0027d say:\n * Same Try\n * No Try\n * A catch, as long as it is not inside an outer try. (This is the same as No Try but due to how the `TryCatchInformation` is implemented we have to take an extra step)\n\nRelated to this and your other comment, I have a code comment to explain this (will be uploaded in the next patchset):\n```\nFor throwing instructions we can move them into:\n  * Blocks that are not part of a try\n    * Catch blocks are suitable as well, as long as they are not part of an outer try.\n  * Blocks that are part of the same try that the instrucion was already in.\n  \nWe cannot move an instruction that can throw into a try that said instruction is not a part of already, as that would mean it will throw into a different catch block. If we detect that `target_block` is not a valid block to move `instruction` to, we traverse up the dominator tree to find if we have a suitable block.\n```",
      "parentUuid": "634db336_a38edf6a",
      "range": {
        "startLine": 243,
        "startChar": 63,
        "endLine": 243,
        "endChar": 68
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0265d0b9_0fad1be2",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-25T14:30:33Z",
      "side": 1,
      "message": "I\u0027m still having a hard time understanding this. For example on what block are we calling GetSuccessors? What is wrong with checking if the catch block is post dominated?",
      "range": {
        "startLine": 331,
        "startChar": 11,
        "endLine": 333,
        "endChar": 74
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aba9f3c_03d8c3a4",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-03-25T14:57:07Z",
      "side": 1,
      "message": "In order to move an instruction to a block, we check if that block is in the post_dominated ArenaBitVector. To do that, we start from the end and propagate that information. Since we only want to sink to uncommon branches, we do not start from the very end of the graph but from the exit_predecessors (here called `end_block`).\n\nDue to this, we will not set catch blocks as post_dominated (since they flow to the Exit and not through the `end_block`). If we use `GetSuccessors` we will check if the catch blocks are post_dominated and will not move instructions right before the TryBoundary. However, we don\u0027t really care if those catch blocks are post dominated or not since we would be moving instructions outside of that try/catch. Then, we can skip checking the catch blocks by using `GetNormalSuccessors` for blocks that start Tries.\n\nThis is done so we can move instructions right before try blocks.\n\n(I will edit the code comment and upload a patchset when we reach an agreement)",
      "parentUuid": "0265d0b9_0fad1be2",
      "range": {
        "startLine": 331,
        "startChar": 11,
        "endLine": 333,
        "endChar": 74
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c76e0f5_911fb485",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2022-03-25T15:21:01Z",
      "side": 1,
      "message": "Hmm, ok, so here\u0027s my understanding, is that correct?\n\n\"We do not look at catch blocks because they are never post dominating (a catch block always has the exit block as one of its successor), and therefore would prevent considering this try block as being post dominated by the end_block.\"\n\nWould it make sense to always call GetNormalSuccessors?",
      "parentUuid": "5aba9f3c_03d8c3a4",
      "range": {
        "startLine": 331,
        "startChar": 11,
        "endLine": 333,
        "endChar": 74
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "053944ac_7f8dad49",
        "filename": "compiler/optimizing/code_sinking.cc",
        "patchSetId": 5
      },
      "lineNbr": 333,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-03-25T16:03:27Z",
      "side": 1,
      "message": "\u003e catch blocks because they are never post dominating\n\nThey are sometimes not post dominating, and sometimes they are. For example in \n```\n  private static int testSinkRightBeforeTryBlock() {\n    Object o \u003d new Object();\n    if (doEarlyReturn) {\n      try {\n        throw new Error(o.toString());\n      } catch (Error e) {\n        return 123;\n      }\n    }\n    return 456;\n  }\n```\nthe catch block is not post dominating since it has a return that will flow to the exit, but in\n```\n  private static int testSinkToCatchBlock() {\n    Object o \u003d new Object();\n    try {\n      if (doEarlyReturn) {\n        return 123;\n      }\n    } catch (Error e) {\n      throw new Error(o.toString());\n    }\n    return 456;\n  }\n```\nthe catch block *will* be post_dominating, since it will end with a Throw and therefore it will be considered an \"uncommon branch\" and will post dominate.\n\n\u003e Would it make sense to always call GetNormalSuccessors\nI don\u0027t think so because of the other side of the coin: `TryBoundary kind:exit`. Those blocks are inside of the try e.g.\n```\n        // BasicBlock N:\n        //     LoadClass\n        //     ClinitCheck\n        //     NewInstance\n        //     ConstructorFence\n        //     TryBoundary kind:exit ---Try ends here---\n```\nso we want to check the xhandlers too.",
      "parentUuid": "8c76e0f5_911fb485",
      "range": {
        "startLine": 331,
        "startChar": 11,
        "endLine": 333,
        "endChar": 74
      },
      "revId": "f4b98a9d4e47ae4f9da30bcefc321dacdac9aeaa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}