{
  "comments": [
    {
      "key": {
        "uuid": "8a41cfd9_f30f987d",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-01-06T13:46:43Z",
      "side": 1,
      "message": "How about an enum for this.  I don\u0027t like the hardcoded value. HSelect::kSelectConditionIndex?",
      "range": {
        "startLine": 137,
        "startChar": 81,
        "endLine": 137,
        "endChar": 83
      },
      "revId": "a016f2c49d28e2e88ddaee5b0e200e830300cb83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cae3c748_44530069",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-01-06T15:18:34Z",
      "side": 1,
      "message": "Me neither but this is certainly not the only place where we hardcode input indices. What I could do in this particular case is:\n\n  !(user-\u003eIsSelect() \u0026\u0026 user-\u003eAsSelect()-\u003eGetCondition() \u003d\u003d condition)\n\nBut that\u0027s only possible because `condition` has just one use in this branch.",
      "parentUuid": "8a41cfd9_f30f987d",
      "range": {
        "startLine": 137,
        "startChar": 81,
        "endLine": 137,
        "endChar": 83
      },
      "revId": "a016f2c49d28e2e88ddaee5b0e200e830300cb83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa1773d7_4c06dffc",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-01-06T15:23:32Z",
      "side": 1,
      "message": "The alternative is another virtual fcn on HInstruction:\nbool NeedsMaterialization(HCondition*) that returns true except for HIf, HDeoptimize and HSelect\n\nCould be ForceMaterialization, or something similar.\n\nI guess I can live with any of these.",
      "parentUuid": "cae3c748_44530069",
      "range": {
        "startLine": 137,
        "startChar": 81,
        "endLine": 137,
        "endChar": 83
      },
      "revId": "a016f2c49d28e2e88ddaee5b0e200e830300cb83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a2b8319_9475e413",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-01-06T15:35:04Z",
      "side": 1,
      "message": "That would be a cleaner OOP solution but let\u0027s not move more stuff to nodes.h. Went with the other solution.",
      "parentUuid": "aa1773d7_4c06dffc",
      "range": {
        "startLine": 137,
        "startChar": 81,
        "endLine": 137,
        "endChar": 83
      },
      "revId": "a016f2c49d28e2e88ddaee5b0e200e830300cb83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}