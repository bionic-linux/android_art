{
  "comments": [
    {
      "key": {
        "uuid": "4b408f75_7d661799",
        "filename": "compiler/jni/quick/x86/calling_convention_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-19T13:58:52Z",
      "side": 1,
      "message": "Please add a named variable for this.",
      "range": {
        "startLine": 87,
        "startChar": 13,
        "endLine": 87,
        "endChar": 69
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb586371_a00a3e41",
        "filename": "compiler/jni/quick/x86/calling_convention_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-19T19:31:18Z",
      "side": 1,
      "message": "Added a gpr_arg_count_ field and worked with that.",
      "parentUuid": "4b408f75_7d661799",
      "range": {
        "startLine": 87,
        "startChar": 13,
        "endLine": 87,
        "endChar": 69
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc24f1f_7348f88e",
        "filename": "compiler/jni/quick/x86/calling_convention_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-19T13:58:52Z",
      "side": 1,
      "message": "Indentation is off.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 66
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab52eb4e_bb043342",
        "filename": "compiler/jni/quick/x86/calling_convention_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-19T19:31:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bc24f1f_7348f88e",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 66
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_9d6cc374",
        "filename": "compiler/jni/quick/x86/calling_convention_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-19T13:58:52Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 105,
        "endChar": 64
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b57e740_9a332912",
        "filename": "compiler/jni/quick/x86/calling_convention_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-19T19:31:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b408f75_9d6cc374",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 105,
        "endChar": 64
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_17d2bc65",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 3381,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-19T13:58:52Z",
      "side": 1,
      "message": "Do you think you could do the register allocator related changes in another CL?",
      "range": {
        "startLine": 3381,
        "startChar": 30,
        "endLine": 3381,
        "endChar": 50
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab52eb4e_9b0a0f42",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 3381,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-19T19:31:18Z",
      "side": 1,
      "message": "I am pretty sure that needed this change to get core.oat to build and the tests to pass using the optimizing compiler.  Or do you want me to not enable the optimizing compiler in this CL?",
      "parentUuid": "cbd63fdb_17d2bc65",
      "range": {
        "startLine": 3381,
        "startChar": 30,
        "endLine": 3381,
        "endChar": 50
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_c0a0207b",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 3381,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-20T09:16:21Z",
      "side": 1,
      "message": "Yeah, I\u0027d prefer if it was two disinct CLs: one for the ABI change, on for the compiler say yes to longs/doubles/floats.",
      "parentUuid": "ab52eb4e_9b0a0f42",
      "range": {
        "startLine": 3381,
        "startChar": 30,
        "endLine": 3381,
        "endChar": 50
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab074b51_d0ebbc7f",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 3381,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-20T16:15:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b408f75_c0a0207b",
      "range": {
        "startLine": 3381,
        "startChar": 30,
        "endLine": 3381,
        "endChar": 50
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_37d7c056",
        "filename": "runtime/arch/x86/context_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-19T13:58:52Z",
      "side": 1,
      "message": "Isn\u0027t that what the DCHECK was for?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 56
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b57e740_370af8c8",
        "filename": "runtime/arch/x86/context_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-19T19:31:18Z",
      "side": 1,
      "message": "The problem was that the FP argument register bits were on, so the DCHECK failed.  Will have a another look at it.",
      "parentUuid": "cbd63fdb_37d7c056",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 56
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb586371_a07cfea1",
        "filename": "runtime/arch/x86/context_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-19T20:19:59Z",
      "side": 1,
      "message": "I recreated the problem.\n\nThis code in runtime/arch/x86/quick_method_frame_info_x86.h:\nstatic constexpr uint32_t kX86CalleeSaveFpArgSpills \u003d\n    (1 \u003c\u003c art::x86::XMM0) | (1 \u003c\u003c art::x86::XMM1) |\n    (1 \u003c\u003c art::x86::XMM2) | (1 \u003c\u003c art::x86::XMM3);\n...\nconstexpr uint32_t X86CalleeSaveFpSpills(Runtime::CalleeSaveType type) {\n    return type \u003d\u003d Runtime::kRefsAndArgs ? kX86CalleeSaveFpArgSpills : 0;\n}\n\nwhich I copied from the x86_64 version of the file causes the DCHECK to fail, as if the type is kRefsAndArgs, some bits will be on.  This causes much of the host testing to fail.\n\nComments?",
      "parentUuid": "8b57e740_370af8c8",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 56
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b408f75_608cac19",
        "filename": "runtime/arch/x86/context_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-01-20T09:16:21Z",
      "side": 1,
      "message": "So we do have callee saves, the comment should be updated.\n\nAnd you have to handle them.",
      "parentUuid": "eb586371_a07cfea1",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 56
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab074b51_100f04d9",
        "filename": "runtime/arch/x86/context_x86.cc",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2015-01-20T16:15:54Z",
      "side": 1,
      "message": "Done.  Bit of a pain because XMMs are 64 bits, and there is an assumption that all regs are intptr_t size.",
      "parentUuid": "4b408f75_608cac19",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 56
      },
      "revId": "9e09ca7696322d869464be16b231731e8c190582",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}