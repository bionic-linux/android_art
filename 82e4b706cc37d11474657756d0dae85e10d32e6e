{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6b635e7d_80cf1ef3",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 4
      },
      "lineNbr": 1295,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-22T10:01:24Z",
      "side": 1,
      "message": "We don\u0027t need to call madvise multiple times. Also, `MADV_DONTNEED` is not needed for non-resident pages. We just need to zero all the resident pages first and then call madvise once with `MADV_FREE` on entire `page_end - page_begin` range. This is because MADV_FREE immediately reclaims non-resident pages.\n\nThis way we won\u0027t incur the cost of multiple syscall invocation and still achieve the same goal.",
      "range": {
        "startLine": 1295,
        "startChar": 10,
        "endLine": 1295,
        "endChar": 61
      },
      "revId": "82e4b706cc37d11474657756d0dae85e10d32e6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e82b5eb_aaa3ecd0",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 4
      },
      "lineNbr": 1295,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-22T10:10:51Z",
      "side": 1,
      "message": "\u003e  This is because MADV_FREE immediately reclaims non-resident pages.\n\nWhere did you see that specified? (eg pages in zram, are they going to be immediately reclaimed?)",
      "parentUuid": "6b635e7d_80cf1ef3",
      "range": {
        "startLine": 1295,
        "startChar": 10,
        "endLine": 1295,
        "endChar": 61
      },
      "revId": "82e4b706cc37d11474657756d0dae85e10d32e6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7d9ab26_ad592add",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 4
      },
      "lineNbr": 1295,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-22T10:14:06Z",
      "side": 1,
      "message": "https://elixir.bootlin.com/linux/v5.19/source/mm/madvise.c#L622\n\nI confirmed this is unchanged in the latest kernel (6.4-rc) as well. And it is implemented this way since the beginning of `MADV_FREE`.",
      "parentUuid": "3e82b5eb_aaa3ecd0",
      "range": {
        "startLine": 1295,
        "startChar": 10,
        "endLine": 1295,
        "endChar": 61
      },
      "revId": "82e4b706cc37d11474657756d0dae85e10d32e6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b09f32_cb409d0f",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 4
      },
      "lineNbr": 1295,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2023-06-22T12:12:03Z",
      "side": 1,
      "message": "I wonder if this approach can cause correctness issues? Imagine the following scenario, assuming the range is of 2 pages:\n\n1) first page is resident and the second one is not. `mincore` returns this correctly\n2) We zero-fill the first page but in the process, due to some kind of prefetching, the second page gets swapped-in.\n3) We then call `madvise(MADV_FREE)` on entire range and end up not releasing second page immediately (as it is no longer swapped out).\n4) An access from mutator on the second page happens before kswapd takes it away, causing access to clobbered data.\n\nI guess we should keep this implemented as is. Although it\u0027s not optimal, but is required for correctness.",
      "parentUuid": "a7d9ab26_ad592add",
      "range": {
        "startLine": 1295,
        "startChar": 10,
        "endLine": 1295,
        "endChar": 61
      },
      "revId": "82e4b706cc37d11474657756d0dae85e10d32e6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6534a181_04f613e4",
        "filename": "libartbase/base/mem_map.cc",
        "patchSetId": 4
      },
      "lineNbr": 1295,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2023-06-22T13:32:10Z",
      "side": 1,
      "message": "Good point, thanks.",
      "parentUuid": "b7b09f32_cb409d0f",
      "range": {
        "startLine": 1295,
        "startChar": 10,
        "endLine": 1295,
        "endChar": 61
      },
      "revId": "82e4b706cc37d11474657756d0dae85e10d32e6e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}