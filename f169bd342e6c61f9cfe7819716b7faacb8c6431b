{
  "comments": [
    {
      "key": {
        "uuid": "2745aa52_89b4d9b6",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 4
      },
      "lineNbr": 2710,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-03-05T09:43:02Z",
      "side": 1,
      "message": "!\u003d nullptr",
      "range": {
        "startLine": 2710,
        "startChar": 30,
        "endLine": 2710,
        "endChar": 31
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "770f1f7a_49ac9180",
        "filename": "runtime/gc/collector/concurrent_copying.cc",
        "patchSetId": 4
      },
      "lineNbr": 2710,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-05T22:47:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2745aa52_89b4d9b6",
      "range": {
        "startLine": 2710,
        "startChar": 30,
        "endLine": 2710,
        "endChar": 31
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f22694e2_71104247",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "Is that an actual change, or did we always override this anyway? If this is commonly defaulted, it doesn\u0027t seem free. If I read the code correctly, it\u0027s 7 more threads on a modern phone, which seems like too many anyway.",
      "range": {
        "startLine": 151,
        "startChar": 2,
        "endLine": 151,
        "endChar": 56
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b30c545f_49eb4524",
        "filename": "runtime/gc/heap.h",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f22694e2_71104247",
      "range": {
        "startLine": 151,
        "startChar": 2,
        "endLine": 151,
        "endChar": 56
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6d68306_e85899a5",
        "filename": "runtime/gc/space/region_space-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 296,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "Can you check what this compiles into? I\u0027m a bit worried because naive compilation seems to involve many calls to GetClass(). (See Object::SizeOf()) Those may bottom out in memory_order_relaxed atomic loads, which may not get CSE\u0027d. But I\u0027m not sure.\n\nIf that\u0027s a problem here, it may be a problem elsewhere, too.",
      "range": {
        "startLine": 296,
        "startChar": 6,
        "endLine": 296,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06afb882_242aa67d",
        "filename": "runtime/gc/space/region_space-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 296,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "I didn\u0027t completely understand your concern. There are indeed many calls to GetClass() (one per SizeOf() and one above in the if condition), but it seems pretty trivial given as being called without read-barrier.\n\nAlso, I\u0027m not sure if there\u0027s another approach that we can take to linearly scan objects in an address range.",
      "parentUuid": "a6d68306_e85899a5",
      "range": {
        "startLine": 296,
        "startChar": 6,
        "endLine": 296,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95ecd02a_d4ff92c7",
        "filename": "runtime/gc/space/region_space-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 296,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-24T23:53:51Z",
      "side": 1,
      "message": "I was mainly wondering if we need to / can refactor the code to only make one GetClass() call per object here. I agree that we need one call per object, and that each call is not terribly expensive. But this is the inner loop in a heap traversal, and my intuition is that things like extra function calls and redundant loads count, especially if they could possibly end up confusing a prefetecher. If we\u0027re not eliminating all but one of the GetClass() calls for each object, I would try to refactor the code to do that manually, probably by passing down the class explicitly.",
      "parentUuid": "06afb882_242aa67d",
      "range": {
        "startLine": 296,
        "startChar": 6,
        "endLine": 296,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "077ff697_367422a8",
        "filename": "runtime/gc/space/region_space-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 296,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-25T22:01:25Z",
      "side": 1,
      "message": "If we have to make sure that GetClass() is called only once, then I\u0027ll have to add SizeOf() functions for all instance types (String, Array, Class, and standard object) which takes class* as parameter.\nBut given that in my case the lambda passed to this function is a trivial one and the fact that GetClass(), SizeOf() and other related functions are all inlined, I guess the compiler will be able to eliminate redundant loads.",
      "parentUuid": "95ecd02a_d4ff92c7",
      "range": {
        "startLine": 296,
        "startChar": 6,
        "endLine": 296,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64a2e5b9_15c66831",
        "filename": "runtime/gc/space/region_space-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 296,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-25T23:03:14Z",
      "side": 1,
      "message": "My concern is that because GetClass() probably bottoms out in a relaxed atomic access, the redundant loads may not be getting eliminated. If that\u0027s a problem, it would be good to know, since we probably have this issue elsewhere. I would just disassemble libart.so, and see if you can figure out what\u0027s happening. If you need the incantation for disassembly, I can dig it up.",
      "parentUuid": "077ff697_367422a8",
      "range": {
        "startLine": 296,
        "startChar": 6,
        "endLine": 296,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af949e8e_e1bc97eb",
        "filename": "runtime/gc/space/region_space-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 296,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-26T00:18:25Z",
      "side": 1,
      "message": "I had a look at the disassembled libart.so. The class\u0027 load is duplicated. But interestingly, it is duplicated for other cases also. Here\u0027s the disassembled code:\n\n  2e003c:       b94001cf        ldr     w15, [x14]       \u003c\u003d\u003d\u003d\u003d\u003d\u003dThe first load from if cond\n  2e0040:       34fffc8f        cbz     w15, 2dffd0 \u003c_ZN3art2gc5space11RegionSpace25CountAllocatedObjectsTask3RunEPNS_6ThreadE+0x28\u003e\n  2e0044:       b94001cf        ldr     w15, [x14]       \u003c\u003d\u003d\u003d\u003d\u003d\u003dInside SizeOf()\n  2e0048:       9100058c        add     x12, x12, #0x1\n  2e004c:       b9400df0        ldr     w16, [x15,#12]\n  2e0050:       b94001cf        ldr     w15, [x14]       \u003c\u003d\u003d\u003d\u003d\u003d\u003dAgain! Not sure why\n  2e0054:       35fffd70        cbnz    w16, 2e0000 \u003c_ZN3art2gc5space11RegionSpace25CountAllocatedObjectsTask3RunEPNS_6ThreadE+0x58\u003e\n  2e0058:       b94001f0        ldr     w16, [x15]\n  2e005c:       eb1001ff        cmp     x15, x16\n  2e0060:       540000e0        b.eq    2e007c \u003c_ZN3art2gc5space11RegionSpace25CountAllocatedObjectsTask3RunEPNS_6ThreadE+0xd4\u003e\n  2e0064:       b94001cf        ldr     w15, [x14]        \u003c\u003d\u003d\u003d\u003d\u003d\u003d\u003dAgain!\n  2e0068:       b94045ef        ldr     w15, [x15,#68]\n  2e006c:       371000cf        tbnz    w15, #2, 2e0084 \u003c_ZN3art2gc5space11RegionSpace25CountAllocatedObjectsTask3RunEPNS_6ThreadE+0xdc\u003e\n  2e0070:       b94001cf        ldr     w15, [x14]\n  2e0074:       b94061ef        ldr     w15, [x15,#96]\n  2e0078:       17ffffec        b       2e0028 \u003c_ZN3art2gc5space11RegionSpace25CountAllocatedObjectsTask3RunEPNS_6ThreadE+0x80\u003e\n  2e007c:       b94049cf        ldr     w15, [x14,#72]\n  2e0080:       17ffffea        b       2e0028 \u003c_ZN3art2gc5space11RegionSpace25CountAllocatedObjectsTask3RunEPNS_6ThreadE+0x80\u003e\n  2e0084:       b94009cf        ldr     w15, [x14,#8]\n  2e0088:       b94009d0        ldr     w16, [x14,#8]\n  2e008c:       924001ef        and     x15, x15, #0x1\n  2e0090:       d341fe10        lsr     x16, x16, #1\n  2e0094:       9acf220f        lsl     x15, x16, x15\n  2e0098:       91005def        add     x15, x15, #0x17\n  2e009c:       927d75ef        and     x15, x15, #0x1fffffff8\n  2e00a0:       17ffffe2        b       2e0028 \u003c_ZN3art2gc5space11RegionSpace25CountAllocatedObjectsTask3RunEPNS_6ThreadE+0x80\u003e",
      "parentUuid": "64a2e5b9_15c66831",
      "range": {
        "startLine": 296,
        "startChar": 6,
        "endLine": 296,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e380c24_4aa7bdaf",
        "filename": "runtime/gc/space/region_space-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 296,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-26T01:20:26Z",
      "side": 1,
      "message": "Interesting. Thanks!\n\nI suspect the problem is that it\u0027s treated as a field access, which needs to obey the Java memory model, even in the presence of a data race. Those need to get mapped to relaxed atomic accesses. It\u0027s dubious to combine those. But I don\u0027t think the class can change while we\u0027re accessing it, so we should be able to use an ordinary access here. Please file a bug and assign it to either of us, as you prefer. This may also get us some GC performance back. These are presumably all L1 hits, but still.",
      "parentUuid": "af949e8e_e1bc97eb",
      "range": {
        "startLine": 296,
        "startChar": 6,
        "endLine": 296,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6790c335_0941fff3",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 335,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "Rename? This sounds to me like it\u0027s an iterator, which it isn\u0027t.",
      "range": {
        "startLine": 335,
        "startChar": 14,
        "endLine": 335,
        "endChar": 18
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b4624ca_6ed2aa2e",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 335,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6790c335_0941fff3",
      "range": {
        "startLine": 335,
        "startChar": 14,
        "endLine": 335,
        "endChar": 18
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e8b5e1f_f4794e75",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 450,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "How/why doesn\u0027t this happen if stats are disabled? Can we add a DCHECK for that?",
      "range": {
        "startLine": 450,
        "startChar": 4,
        "endLine": 450,
        "endChar": 79
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6845824f_b702e9f3",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 450,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "Sorry I didn\u0027t understand your question.",
      "parentUuid": "3e8b5e1f_f4794e75",
      "range": {
        "startLine": 450,
        "startChar": 4,
        "endLine": 450,
        "endChar": 79
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "602dce76_7840f1ea",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 450,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-24T23:53:51Z",
      "side": 1,
      "message": "Rephrasing: Do we need to do this if stats are disabled? If not, do we? I\u0027m concerned that even if this is done in parallel, it involves significant new overhead / battery drain. This looks to me like it\u0027s thus adding significant overhead to the stats disabled case, but I may well be missing something.",
      "parentUuid": "6845824f_b702e9f3",
      "range": {
        "startLine": 450,
        "startChar": 4,
        "endLine": 450,
        "endChar": 79
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5750fe8e_69288fcc",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 450,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-25T22:01:25Z",
      "side": 1,
      "message": "Thanks for rephrasing.\n\nAs of now, we need to do this even when stats are disabled. The reason is that we have exposed some metrics like \u0027FreedObjectEver\u0027 and \u0027AllocatedObjectsEver\u0027 to android.os.Debug, which doesn\u0027t require explicitly enabling the stats. Metrics like these require us to know precisely how many objects were allocated. Also, as you know there are many ART internal assertions that also depend on it.\n\nIdeally I would also like to incur this overhead only for \u0027stats-enabled\u0027 case, but that requires taking away those metrics. And given the Mathieu\u0027s CL on inlining TLAB allocation, which gets rid of object count increment in the fast path, counting it here seems to be the only solution.",
      "parentUuid": "602dce76_7840f1ea",
      "range": {
        "startLine": 450,
        "startChar": 4,
        "endLine": 450,
        "endChar": 79
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d8035b3_86a55b75",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 450,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-25T23:03:14Z",
      "side": 1,
      "message": "Is that really a consistent improvement? If we only have one mutator task, it seems cheaper (as measured by total cpu cycles or maybe battery) to count it in the allocator rather than here? I agree that this wins in terms of latency.\n\nI couldn\u0027t find AllocatedObjectsEver. Can you point me at the spec? I\u0027m still concerned that this is a feature that doesn\u0027t pull its own weight.",
      "parentUuid": "5750fe8e_69288fcc",
      "range": {
        "startLine": 450,
        "startChar": 4,
        "endLine": 450,
        "endChar": 79
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "803398f1_e452ba4c",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 450,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-26T00:18:25Z",
      "side": 1,
      "message": "Mathieu\u0027s CL takes it out of allocation fastpath to reduce allocation cost and code size. I contemplated counting when partial tlab is expanded, but that had similar cost as this implementation. Also, this one allows us to do it in a separate thread, avoiding any latency concerns.\n\nI got a bit confused about AllocatedObjectsEver etc. Those metrics, luckily, are only in terms of bytes. But the GC performance dump, which is part of the ANR report, has it.\n\nHow about we go ahead with this CL now. We can discuss in the next GC meeting to see if it\u0027s ok to get rid of object-count based metrics from everywhere (other then when stats are enabled). If we agree, then I\u0027ll come up with another CL to take care of this.",
      "parentUuid": "8d8035b3_86a55b75",
      "range": {
        "startLine": 450,
        "startChar": 4,
        "endLine": 450,
        "endChar": 79
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16f833bd_c3414261",
        "filename": "runtime/gc/space/region_space.cc",
        "patchSetId": 4
      },
      "lineNbr": 450,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-26T01:20:26Z",
      "side": 1,
      "message": "I\u0027m OK with that for AOSP. Can we open two bugs corresponding to the two ongoing discussions? I\u0027m concerned about cherrypicking this as is. Do we have a way to measure battery impact, or some reasonable approximation?\n\nIs that data in the ANR report important? Are there robots that look at it? We could approximate it in various ways, but I\u0027m not sure what a good approximation is, since I\u0027m not sure what a good use is.",
      "parentUuid": "803398f1_e452ba4c",
      "range": {
        "startLine": 450,
        "startChar": 4,
        "endLine": 450,
        "endChar": 79
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "715c9a54_4ebf069e",
        "filename": "runtime/gc/space/region_space.h",
        "patchSetId": 4
      },
      "lineNbr": 650,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "Why?",
      "range": {
        "startLine": 650,
        "startChar": 6,
        "endLine": 650,
        "endChar": 31
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf8228a4_379030c5",
        "filename": "runtime/gc/space/region_space.h",
        "patchSetId": 4
      },
      "lineNbr": 650,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "715c9a54_4ebf069e",
      "range": {
        "startLine": 650,
        "startChar": 6,
        "endLine": 650,
        "endChar": 31
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77820ce7_12a338f1",
        "filename": "runtime/runtime_stats.h",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "Can we make this a bit more explicit? Perhaps \"Signed so it can be biased to reflect pre-existing TLAB contents\"?",
      "range": {
        "startLine": 67,
        "startChar": 34,
        "endLine": 68,
        "endChar": 15
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4992c79e_48576d31",
        "filename": "runtime/runtime_stats.h",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77820ce7_12a338f1",
      "range": {
        "startLine": 67,
        "startChar": 34,
        "endLine": 68,
        "endChar": 15
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13a3a199_dd62b555",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 4169,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-03-05T09:43:02Z",
      "side": 1,
      "message": "Nit: 2 more spaces",
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30a446f9_7bf8949e",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 4169,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-05T22:47:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "13a3a199_dd62b555",
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72a78d4f_eae31c90",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 4175,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "I\u0027d add a DCHECK that stats are enabled.",
      "range": {
        "startLine": 4175,
        "startChar": 2,
        "endLine": 4175,
        "endChar": 19
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a65e8150_9e6f6f10",
        "filename": "runtime/thread.cc",
        "patchSetId": 4
      },
      "lineNbr": 4175,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72a78d4f_eae31c90",
      "range": {
        "startLine": 4175,
        "startChar": 2,
        "endLine": 4175,
        "endChar": 19
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c8b0f68_3f581d8f",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 1168,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-03-06T00:06:05Z",
      "side": 1,
      "message": "Deserves an explanation.",
      "range": {
        "startLine": 1168,
        "startChar": 34,
        "endLine": 1168,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9345e4b_35fadd8b",
        "filename": "runtime/thread.h",
        "patchSetId": 4
      },
      "lineNbr": 1168,
      "author": {
        "id": 1258954
      },
      "writtenOn": "2020-03-21T00:14:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c8b0f68_3f581d8f",
      "range": {
        "startLine": 1168,
        "startChar": 34,
        "endLine": 1168,
        "endChar": 59
      },
      "revId": "f169bd342e6c61f9cfe7819716b7faacb8c6431b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}