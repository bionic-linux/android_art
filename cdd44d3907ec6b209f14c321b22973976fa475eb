{
  "comments": [
    {
      "key": {
        "uuid": "2a27faf5_6af65793",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 896,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "hand-written?",
      "range": {
        "startLine": 896,
        "startChar": 5,
        "endLine": 896,
        "endChar": 19
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fa9b65d_2586aea8",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 896,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a27faf5_6af65793",
      "range": {
        "startLine": 896,
        "startChar": 5,
        "endLine": 896,
        "endChar": 19
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "054dc959_94beeaa1",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 901,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-09T02:07:32Z",
      "side": 1,
      "message": "We try to stay in 100 characters when possible.",
      "range": {
        "startLine": 901,
        "startChar": 99,
        "endLine": 901,
        "endChar": 104
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df39c202_a00a3af0",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 901,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "054dc959_94beeaa1",
      "range": {
        "startLine": 901,
        "startChar": 99,
        "endLine": 901,
        "endChar": 104
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6afbb286_cc2def7a",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 906,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T16:44:45Z",
      "side": 1,
      "message": "I think we need a fence after reading the status, otherwise we may see wrong values of other fields. That fence can be delayed until after the BNE.",
      "range": {
        "startLine": 906,
        "startChar": 4,
        "endLine": 906,
        "endChar": 48
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaf16251_496bd9b2",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 906,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-10-09T20:58:16Z",
      "side": 1,
      "message": "(I discussed this with Hiroshi as well.)\n\nI presume this function is intended to guarantee that when it finishes the class is initialized?  In that case, I agree, this (painfully) needs something like a fence or acquire load.\n\nWe may want to generally revisit these initialization checks, since they seem quite expensive.  We should be using an even faster path when the check is unnecessary and the object size is known.  We can clearly avoid the initialization check in many cases:\n\n- Boot image classes.\n- If the code is dominated by another initialization check for the same class.\n- If we\u0027re running in a jit.\n- By using a thread-local cache to remember classes that we already checked were initialized.\n\nIn the short term, we may want to just trengthen the barrier at the bottom to dmb ish.  If we need the finalizability check to be ordered, we can separately enforce that ordering with a \"bogus\" address dependence.  Xor r3 with itself producing zero, and add that to the address for the second load.  ARM enforces memory ordering for this kind of bogus address dependence.",
      "parentUuid": "6afbb286_cc2def7a",
      "range": {
        "startLine": 906,
        "startChar": 4,
        "endLine": 906,
        "endChar": 48
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45426131_45692e77",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 906,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-09T22:34:34Z",
      "side": 1,
      "message": "There\u0027s obviously room for optimizations to remove these checks as this is the most conservative version. Since this is what the optimizing compiler is currently calling, in the short term, I hope we can make this work before doing work to remove the checks.\n\nWe need to worry about the two fields loaded from the class here, the access flag and the object size. Like Hans suggested, if we insert \"xor r3, r3, r3, add r2, r2, r3\" between the status load and the access flag load, which makes a fake dependence from the second load to the first load, which also creates a dependence from the third (object size) load to the first load, it seems good as long as we change the fence at the end to \"dmb ish\" so that the code after this allocation site will see the right values in the fields of the class.",
      "parentUuid": "eaf16251_496bd9b2",
      "range": {
        "startLine": 906,
        "startChar": 4,
        "endLine": 906,
        "endChar": 48
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa3be81_c32eb62b",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 906,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done.\n\nThe performance with PS2 was almost unchanged from PS1. I also tried the two-fence approach and it was clearly worse, ~5-20% slower. So, this seems like a better approach.",
      "parentUuid": "45426131_45692e77",
      "range": {
        "startLine": 906,
        "startChar": 4,
        "endLine": 906,
        "endChar": 48
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8538d9b1_d03b22b8",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 911,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-09T02:07:32Z",
      "side": 1,
      "message": "We have avoided this pseudo instruction in the past.\n\nIs it actually buying something? Are we lucky and our assembly code is small enough that this is in range of the end of the assembly code (we do not declare any areas where the assembler could put a literal pool)? I think this is simply representable as a single mov instruction, and as such that would maybe be more expressive?\n\n(But I\u0027ll defer to Vladimir)",
      "range": {
        "startLine": 911,
        "startChar": 4,
        "endLine": 911,
        "endChar": 50
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a0fce78_639cc264",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 911,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "A single bit can always be encoded as modified immediate. Just embed the constant in a TST immediate, instead of using TST register.",
      "parentUuid": "8538d9b1_d03b22b8",
      "range": {
        "startLine": 911,
        "startChar": 4,
        "endLine": 911,
        "endChar": 50
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff32061b_41a6d2ff",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 911,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a0fce78_639cc264",
      "range": {
        "startLine": 911,
        "startChar": 4,
        "endLine": 911,
        "endChar": 50
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca557e3a_776470db",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 916,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "Nit: LDRD is viable (with a test that they are consecutive and within range).",
      "range": {
        "startLine": 915,
        "startChar": 0,
        "endLine": 916,
        "endChar": 58
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f30ba11_82a0dae0",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 916,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Noted as a TODO.",
      "parentUuid": "ca557e3a_776470db",
      "range": {
        "startLine": 915,
        "startChar": 0,
        "endLine": 916,
        "endChar": 58
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45426131_116ccc87",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 924,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-09T01:44:39Z",
      "side": 1,
      "message": "Is this necessary if the shift will round down?",
      "range": {
        "startLine": 924,
        "startChar": 20,
        "endLine": 924,
        "endChar": 64
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "451b415b_86a96c07",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 924,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-09T02:07:32Z",
      "side": 1,
      "message": "Then there needs to be a \"preprocessor check\" here that the numbers are OK (see the SAVE_... macros).",
      "parentUuid": "45426131_116ccc87",
      "range": {
        "startLine": 924,
        "startChar": 20,
        "endLine": 924,
        "endChar": 64
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaf16251_43f61893",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 926,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-09T01:44:39Z",
      "side": 1,
      "message": "Instead of subtracting by one here, can you do\nsub    r3, r3, #1\ninstead of\nadd    r3, r3, #ROSALLOC_BRACKET_QUANTUM_SIZE_MASK",
      "range": {
        "startLine": 926,
        "startChar": 4,
        "endLine": 926,
        "endChar": 21
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaf16251_03b250d3",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 926,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-09T02:07:32Z",
      "side": 1,
      "message": "Sounds reasonable, though this code is obviously more intention-revealing, so it should stay in a comment, at least.",
      "parentUuid": "eaf16251_43f61893",
      "range": {
        "startLine": 926,
        "startChar": 4,
        "endLine": 926,
        "endChar": 21
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a27faf5_8a258bc6",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 926,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "Yes, let\u0027s move the \"intention revealing\" part to the comments and simply\n\n    sub    r3, r3, #1\n    lsr    r3, r3, #ROSALLOC_BRACKET_QUANTUM_SIZE_SHIFT\n\ninstead of the 4 instructions.",
      "parentUuid": "eaf16251_03b250d3",
      "range": {
        "startLine": 926,
        "startChar": 4,
        "endLine": 926,
        "endChar": 21
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45426131_5aed8929",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 926,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-10-09T20:58:16Z",
      "side": 1,
      "message": "Can\u0027t we just compensate for the off-by-1 in the ldr offset below?",
      "parentUuid": "2a27faf5_8a258bc6",
      "range": {
        "startLine": 926,
        "startChar": 4,
        "endLine": 926,
        "endChar": 21
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf3c0ef3_1f7b8381",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 926,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "45426131_5aed8929",
      "range": {
        "startLine": 926,
        "startChar": 4,
        "endLine": 926,
        "endChar": 21
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cad81e3d_5ff6cb92",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 931,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "This can be replaced with\n\n    add r12, r9, r3, lsl #POINTER_SIZE_SHIFT\n    ldr r12, [r12, #THREAD_ROSALLOC_RUNS_OFFSET]\n    ldr r3, [r12, #(ROSALLOC_RUN_FREE_LIST_OFFSET + ROSALLOC_RUN_FREE_LIST_HEAD_OFFSET)]\n\nswapping the r3 and r12 results. The code size should be the same here (2+2+4+4 -\u003e 4+4+4) but it can help below.\n\nThere is some tension though between using CBZ right below, or having 16-bit LDR/STR instructions with low-register base further down. But it\u0027s worth it if you also take the STRD suggestion below.",
      "range": {
        "startLine": 927,
        "startChar": 0,
        "endLine": 931,
        "endChar": 91
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff32061b_01396a72",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 931,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cad81e3d_5ff6cb92",
      "range": {
        "startLine": 927,
        "startChar": 0,
        "endLine": 931,
        "endChar": 91
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8521b987_289b23e4",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 933,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-09T02:07:32Z",
      "side": 1,
      "message": "cbz?",
      "range": {
        "startLine": 932,
        "startChar": 4,
        "endLine": 933,
        "endChar": 54
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa1a0ab2_866bcade",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 933,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "Not with a high register (r12). But it could be with r3, see above.",
      "parentUuid": "8521b987_289b23e4",
      "range": {
        "startLine": 932,
        "startChar": 4,
        "endLine": 933,
        "endChar": 54
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f30ba11_c5ddcc46",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 933,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done. Now cbz with r3 and r12 swapped.",
      "parentUuid": "aa1a0ab2_866bcade",
      "range": {
        "startLine": 932,
        "startChar": 4,
        "endLine": 933,
        "endChar": 54
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "451b415b_c6f5243d",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 938,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2015-10-09T01:44:39Z",
      "side": 1,
      "message": "Is this necessary if we are going to overwrite with the class anyways? Maybe you could check the offsets at compile time and avoid the store if they match.",
      "range": {
        "startLine": 938,
        "startChar": 65,
        "endLine": 938,
        "endChar": 91
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45426131_119e8cd3",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 938,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-10-09T02:07:32Z",
      "side": 1,
      "message": "r0 to make this independent? And if you use it below, you could try to schedule the loads earlier.",
      "range": {
        "startLine": 938,
        "startChar": 10,
        "endLine": 938,
        "endChar": 13
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a27faf5_0ac35b21",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 938,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "+1 for replacing with compile-time check.",
      "parentUuid": "45426131_119e8cd3",
      "range": {
        "startLine": 938,
        "startChar": 10,
        "endLine": 938,
        "endChar": 13
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fae6a64_e62bbe18",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 938,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a27faf5_0ac35b21",
      "range": {
        "startLine": 938,
        "startChar": 10,
        "endLine": 938,
        "endChar": 13
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6afbb286_eca54b7c",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 944,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "str r12, [r1], #COMPRESSED_REFERENCE_SIZE",
      "range": {
        "startLine": 943,
        "startChar": 0,
        "endLine": 944,
        "endChar": 45
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f30ba11_8551044c",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 944,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6afbb286_eca54b7c",
      "range": {
        "startLine": 943,
        "startChar": 0,
        "endLine": 944,
        "endChar": 45
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a154685_c5065a32",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 949,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-10-09T15:43:03Z",
      "side": 1,
      "message": "With better register allocation, this could be merged with the head store to STRD. (Store the Class* early to free up r2.)",
      "range": {
        "startLine": 949,
        "startChar": 4,
        "endLine": 949,
        "endChar": 90
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f30ba11_45eb7ca7",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 1
      },
      "lineNbr": 949,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2015-10-13T17:33:43Z",
      "side": 1,
      "message": "Noted as a TODO.",
      "parentUuid": "8a154685_c5065a32",
      "range": {
        "startLine": 949,
        "startChar": 4,
        "endLine": 949,
        "endChar": 90
      },
      "revId": "cdd44d3907ec6b209f14c321b22973976fa475eb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}