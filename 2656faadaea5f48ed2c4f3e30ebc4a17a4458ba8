{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fba60d11_b2999f80",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-15T10:32:17Z",
      "side": 1,
      "message": "Should we redefine `MaxValueOfIntegralType(DataType::Type::kBool)` to 255? Otherwise conversion from `kBool` to `kInt8` (Java `byte`) shall be considered implicit.",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e55fdc7_2b0f42af",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-15T16:49:27Z",
      "side": 1,
      "message": "Hm, nice question.\n\nI think it is fine to leave booleans in [0,1]. They should be [0,1] in the normal case and in that case it is fine to be implicit.\n\nWhat I am thinking we might need to do is change sget-boolean to have type Uint8. That would solve the problem you are mentioning, and it will reflect what\u0027s actually going on. Not sure if it adds more trouble though...",
      "parentUuid": "fba60d11_b2999f80",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28a25b09_d54738f7",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-16T08:54:15Z",
      "side": 1,
      "message": "I\u0027m starting to think that the only implicit conversions from `boolean` are conversions to `boolean` and `int`. You can pass any `int` value as `boolean` to an invoke.\n\nBut that opens a new question: Is there any checking of small integral invoke argument types? Can you pass 1000 as a `byte` argument?\n\n    void test(byte b) {\n      byteField \u003d b;\n      short b2 \u003d byteField;\n      assertEqual(b2, b);  // Fails in interpreter if `b` is outside [-128, 128[ ?\n    }",
      "parentUuid": "4e55fdc7_2b0f42af",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eea0337_dc30be91",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-16T09:59:13Z",
      "side": 1,
      "message": "\u003e I\u0027m starting to think that the only implicit conversions from `boolean` are conversions to `boolean` and `int`. You can pass any `int` value as `boolean` to an invoke.\n\nJust to clarify, conversions from booleans were allowed even without this CL. This CL enables conversions *to* booleans.\n\n\u003e But that opens a new question: Is there any checking of small integral invoke argument types?\n\nIn Java, yes. In smali/jasmin no: it is the same as boolean.\n\n\u003e Can you pass 1000 as a `byte` argument?\n\nYes. You could write in jasmin:\n\n```\n.method public static $noinline$returnItselfByte(B)B\n    .limit stack 1\n    iload_0\n    ireturn\n.end method\n\n; Proxy method that redirects the int parameter as byte in jasmin.\n.method public static $noinline$returnItselfByteProxy(I)B\n    .limit stack 1\n    iload_0\n    invokestatic BooleanTest/$noinline$returnItselfByte(B)B\n    ireturn\n.end method\n```\n\nthen from java you can call like:\n```\nfor (int i \u003d 1; i \u003c\u003d 513; i++) {\n    if (i !\u003d BooleanTest.$noinline$returnItselfByteProxy(i)) {\n        throw new Error();\n    }\n}\n```\n\nand this will **not** throw in optimizing or interpreter mode.\n\n---\n\n\u003e     void test(byte b) {\n\u003e       byteField \u003d b;\n\u003e       short b2 \u003d byteField;\n\u003e       assertEqual(b2, b);  // Fails in interpreter if `b` is outside [-128, 128[ ?\n\u003e     }\n\nIf `test` was written and called from Java, the input will be in `[-128, 128[`, so it would be fine.\n\nThis would also be fine if `test` was written in java but called from jasmin/smali with 1000 as a parameter.\n\n\u003e       byteField \u003d b;\n\u003e       short b2 \u003d byteField;\n\nThis will be `StaticFieldSet field_name:Main.byteField field_type:Int8`. All other conversions will be implicit.\n\n\u003e       assertEqual(b2, b);\n\nNow this would compare the same SSA variable so it would be `assertEqual(b, b)` which is always true.",
      "parentUuid": "28a25b09_d54738f7",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "738f2ff8_d312f594",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-16T15:34:02Z",
      "side": 1,
      "message": "With LSE, it would indeed become `assertEqual(b, b)`. But in interpreter if we try to store 1000 to the `byte byteField` and then load it as `Int8` we shall get `-24`.",
      "parentUuid": "5eea0337_dc30be91",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "105a46c2_62cc216c",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-16T16:06:13Z",
      "side": 1,
      "message": "In your example, `b` and `b2` will be `1000`. `byteField` will be `-24`. This is tip of tree for both interpreter and optimized compiler. Uploaded repro case: aosp/2493699",
      "parentUuid": "738f2ff8_d312f594",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f19989a_fd8f6692",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-16T16:29:59Z",
      "side": 1,
      "message": "That\u0027s LSE in D8!\n\nWhen running with the RI and keeping artifacts, the disassembly with `javap -c` is\n\n    public static void $noinline$test(byte);\n      Code:\n         0: iload_0\n         1: putstatic     #12                 // Field byteField:B\n         4: getstatic     #12                 // Field byteField:B\n         7: i2s\n         [...]\n\nWhen running with ART, the disassembly with `dexdump -d` is\n\n    0001fc:                                        |[0001fc] Main.$noinline$test:(B)V\n    00020c: 6b03 0000                              |0000: sput-byte v3, LMain;.byteField:B // field@0000\n    000210: 8f30                                   |0002: int-to-short v0, v3\n    [...]\n\nI don\u0027t like D8 doing these optimizations. When it does, you\u0027re really forced to use smali and you lose the ability to compare with the RI (which really throws the exception in this case).",
      "parentUuid": "105a46c2_62cc216c",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d5952dc_8da6e563",
        "filename": "compiler/optimizing/data_type.h",
        "patchSetId": 10
      },
      "lineNbr": 274,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-17T09:53:26Z",
      "side": 1,
      "message": "To answer the original question (Should we redefine MaxValueOfIntegralType(DataType::Type::kBool) to 255? Otherwise conversion from kBool to kInt8 (Java byte) shall be considered implicit.) I think keeping them as [0,1] for this CL makes sense for consistency. Booleans will be 0 or 1 in the normal cases anyway.\n\nWe might get other weirdness like byte-\u003eshort considered implicit but the actual value being 1000, and booleans are just another case of that.",
      "parentUuid": "1f19989a_fd8f6692",
      "range": {
        "startLine": 274,
        "startChar": 10,
        "endLine": 274,
        "endChar": 32
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fed00194_d49b2c59",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 10
      },
      "lineNbr": 475,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-15T10:32:17Z",
      "side": 1,
      "message": "Unnecessary, the type is implicit in the input and result names (such as `z21 TypeConversion [i13]`).",
      "range": {
        "startLine": 474,
        "startChar": 4,
        "endLine": 475,
        "endChar": 78
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42c76f17_7706fc98",
        "filename": "compiler/optimizing/graph_visualizer.cc",
        "patchSetId": 10
      },
      "lineNbr": 475,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-15T16:49:27Z",
      "side": 1,
      "message": "Ack, removed.",
      "parentUuid": "fed00194_d49b2c59",
      "range": {
        "startLine": 474,
        "startChar": 4,
        "endLine": 475,
        "endChar": 78
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fc26811_bfa02b3a",
        "filename": "test/2260-checker-smali-boolean-cast/smali/BooleanTest.smali",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-15T10:32:17Z",
      "side": 1,
      "message": "I\u0027d be interested to know what RI does with this. Can you try jasmin instead of smali?\n\n(Please consider using jasmin by default. With jasmin you can also call test methods directly without reflection.)",
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0736dbce_74757e38",
        "filename": "test/2260-checker-smali-boolean-cast/smali/BooleanTest.smali",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-15T16:49:27Z",
      "side": 1,
      "message": "Done.\n\nI think that the java part gets simpler, but the jasmin itself is more complicated than smali. For small cases it might be fine, but having to have a mental model of the stack is annoying.",
      "parentUuid": "9fc26811_bfa02b3a",
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b59527f8_62dfeb04",
        "filename": "test/2260-checker-smali-boolean-cast/smali/BooleanTest.smali",
        "patchSetId": 10
      },
      "lineNbr": 122,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-15T10:32:17Z",
      "side": 1,
      "message": "We could also\n\n    ## CHECK: \u003c\u003cConst0:i\\d\u003e\u003e IntConstant 0\n    ## CHECK:                Return [\u003c\u003cConst0\u003e\u003e]\n\nin `constant_folding$before_codegen (after)`.",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 13
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b53a084_20a159b3",
        "filename": "test/2260-checker-smali-boolean-cast/smali/BooleanTest.smali",
        "patchSetId": 10
      },
      "lineNbr": 122,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-15T16:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b59527f8_62dfeb04",
      "range": {
        "startLine": 122,
        "startChar": 4,
        "endLine": 122,
        "endChar": 13
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb6a19d4_09c993d4",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 10
      },
      "lineNbr": 678,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-15T10:32:17Z",
      "side": 1,
      "message": "I\u0027d call this \"Conv\".",
      "range": {
        "startLine": 678,
        "startChar": 23,
        "endLine": 678,
        "endChar": 27
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ab718a6_87049e06",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 10
      },
      "lineNbr": 678,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-15T16:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb6a19d4_09c993d4",
      "range": {
        "startLine": 678,
        "startChar": 23,
        "endLine": 678,
        "endChar": 27
      },
      "revId": "2656faadaea5f48ed2c4f3e30ebc4a17a4458ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}