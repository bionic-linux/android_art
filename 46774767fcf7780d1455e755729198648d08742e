{
  "comments": [
    {
      "key": {
        "uuid": "f5359ed2_bc8bae26",
        "filename": "compiler/image_writer.h",
        "patchSetId": 3
      },
      "lineNbr": 222,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "For consistency, add a comment for this field?",
      "range": {
        "startLine": 222,
        "startChar": 13,
        "endLine": 222,
        "endChar": 25
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5bfba8a_9d8ed337",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-28T03:40:23Z",
      "side": 1,
      "message": "These were supposed to match the local var names\n\nlocation \u003d \nsystem_filename \u003d \n\n(and below)\n\nbut they clearly already bit rotted.",
      "range": {
        "startLine": 76,
        "startChar": 5,
        "endLine": 76,
        "endChar": 19
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5594aafe_5ad85481",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-28T03:40:23Z",
      "side": 1,
      "message": "I find it odd to do have all this and run code that seems to do nothing?",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 151,
        "endChar": 97
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5359ed2_9c06aa0e",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Agree.",
      "parentUuid": "5594aafe_5ad85481",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 151,
        "endChar": 97
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_c584ae9d",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "I discussed this with Brian offline, basically it just prints whether the image header is PIC or not in a debug build.\n\nI can rip out this code but then nothing will exercise the image header\u0027s PIC field at all, and I was advised by Andreas to leave the field in the image header. Should I then remove the field in ImageHeader as well?",
      "parentUuid": "f5359ed2_9c06aa0e",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 151,
        "endChar": 97
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5d5e601_83e640bf",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-30T07:32:32Z",
      "side": 1,
      "message": "if nothing really needs it in the end, we can remove it.",
      "parentUuid": "953e22e9_c584ae9d",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 151,
        "endChar": 97
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5bfba8a_bd8b9726",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-28T03:40:23Z",
      "side": 1,
      "message": "even more confused, why twice?",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 248,
        "endChar": 1
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75436e81_e4bc4eaf",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "This is in a separate function (overloaded). Only one of the Patch functions gets called per run (depending on command line arguments).\n\nI apologize if I have misunderstood this remark.",
      "parentUuid": "d5bfba8a_bd8b9726",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 248,
        "endChar": 1
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_8998dd4e",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "The symlink is in /data and will point to the one in /system Is that temporary? Should you add a TODO?",
      "range": {
        "startLine": 290,
        "startChar": 53,
        "endLine": 290,
        "endChar": 60
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5396603_09787130",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "Can you elaborate please? \n\nIt is just as persistent as anything else in the dex cache (and if we are worried about a symlink pointing to a /system oat file that no longer exists, that won\u0027t happen since every time there is an OTA the dex cache gets wiped IIUC). Except to avoid changing the code to load boot.art/boot.oat from separate paths, we made a symlink here instead.",
      "parentUuid": "75ae0e67_8998dd4e",
      "range": {
        "startLine": 290,
        "startChar": 53,
        "endLine": 290,
        "endChar": 60
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_cfab3595",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T17:46:33Z",
      "side": 1,
      "message": "Yeah, so the symlink is from /data to /system, correct?\n\nMy understanding is that we want to be compile PIC only in the future, so this symlink will not be needed: we will use just one boot image, the one in /system.",
      "parentUuid": "b5396603_09787130",
      "range": {
        "startLine": 290,
        "startChar": 53,
        "endLine": 290,
        "endChar": 60
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_a585be65",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 365,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "pic -\u003e PIC",
      "range": {
        "startLine": 365,
        "startChar": 78,
        "endLine": 365,
        "endChar": 81
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75436e81_c49e723c",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 365,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "I originally intentionally left this lowercase to emphasize the *not*, I apologize if there\u0027s some style this is violating.\n\nCan you elaborate why this should or should not be lower case for future reference?",
      "parentUuid": "55abca56_a585be65",
      "range": {
        "startLine": 365,
        "startChar": 78,
        "endLine": 365,
        "endChar": 81
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_0b8b81ad",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 365,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T17:46:33Z",
      "side": 1,
      "message": "because you\u0027re using PIC in other places. So it\u0027s just for consistency.",
      "parentUuid": "75436e81_c49e723c",
      "range": {
        "startLine": 365,
        "startChar": 78,
        "endLine": 365,
        "endChar": 81
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_6975616f",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 377,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Nit: use const with references, not pointers.\n\n(I know we\u0027re not following this in all places, but that\u0027s what the style guide suggests for keeping things consistent).",
      "range": {
        "startLine": 377,
        "startChar": 38,
        "endLine": 377,
        "endChar": 43
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5396603_a95345ab",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 377,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "I don\u0027t understand. It\u0027s logically const here, i.e. this function does not mutate the ElfFile in any way.\n\nFrom what I understand Ian thinks the code base should be const as much as possible.",
      "parentUuid": "75ae0e67_6975616f",
      "range": {
        "startLine": 377,
        "startChar": 38,
        "endLine": 377,
        "endChar": 43
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_cb84899d",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 377,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T17:46:33Z",
      "side": 1,
      "message": "From the C++ style guide:\n\n\"So if you choose const T* rather than const T\u0026, do so for a concrete reason; otherwise it will likely confuse readers by making them look for an explanation that doesn\u0027t exist.\"\n\nhttp://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Reference_Arguments\n\nI personally agree wih the \"confusion\" comment.",
      "parentUuid": "b5396603_a95345ab",
      "range": {
        "startLine": 377,
        "startChar": 38,
        "endLine": 377,
        "endChar": 43
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_45608a2e",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 379,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "fie -\u003e file",
      "range": {
        "startLine": 379,
        "startChar": 36,
        "endLine": 379,
        "endChar": 39
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75436e81_04997a51",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 379,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "Good catch :)",
      "parentUuid": "55abca56_45608a2e",
      "range": {
        "startLine": 379,
        "startChar": 36,
        "endLine": 379,
        "endChar": 39
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_097aad5e",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 398,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "pic -\u003e PIC",
      "range": {
        "startLine": 398,
        "startChar": 81,
        "endLine": 398,
        "endChar": 84
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75436e81_e4956e17",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 398,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "See 365",
      "parentUuid": "75ae0e67_097aad5e",
      "range": {
        "startLine": 398,
        "startChar": 81,
        "endLine": 398,
        "endChar": 84
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5359ed2_3c2e9e80",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 408,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "FD -\u003e file descriptor (here and other places below). I don\u0027t think it\u0027s obvious FD means file descriptor, at least in the error messages.",
      "range": {
        "startLine": 408,
        "startChar": 85,
        "endLine": 408,
        "endChar": 87
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75436e81_847aaa5c",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 408,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "The only way it can go down this path is if someone uses --output-oat-fd (fd is in the command line).\n\nThat being said, this is a good point and while I can\u0027t think of anything else that FD could stand for, it\u0027s better to avoid 2 letter acronyms.",
      "parentUuid": "f5359ed2_3c2e9e80",
      "range": {
        "startLine": 408,
        "startChar": 85,
        "endLine": 408,
        "endChar": 87
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_256f8e1d",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 908,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Not your code, but you\u0027re using both kIsDebugBuild and debug. Looks like this variable is just adding confusion.",
      "range": {
        "startLine": 908,
        "startChar": 2,
        "endLine": 908,
        "endChar": 7
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_65d32297",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 908,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "I can only guess that this was originally here so that the person could write \u0027const bool debug \u003d true\u0027 (instead of doing #define kIsDebugBuild true or using patchoatd)",
      "parentUuid": "55abca56_256f8e1d",
      "range": {
        "startLine": 908,
        "startChar": 2,
        "endLine": 908,
        "endChar": 7
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5d09a11_87900adb",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 908,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-30T07:32:32Z",
      "side": 1,
      "message": "yes we have done this const bool debug thing elsewhere, as well as in frameworks code, to make it easier to reenable.",
      "parentUuid": "953e22e9_65d32297",
      "range": {
        "startLine": 908,
        "startChar": 2,
        "endLine": 908,
        "endChar": 7
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_896d3da2",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Explain why?",
      "range": {
        "startLine": 1225,
        "startChar": 19,
        "endLine": 1225,
        "endChar": 21
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_c5b78e5c",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1225,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "Ian asked to get rid of this in an earlier PS",
      "parentUuid": "75ae0e67_896d3da2",
      "range": {
        "startLine": 1225,
        "startChar": 19,
        "endLine": 1225,
        "endChar": 21
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_8b7e9105",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T17:46:33Z",
      "side": 1,
      "message": "But there must be some reason. If it ends up taking longer than expected, a co-worker might look at this code and not understand why we should get rid of it. Having the context helps.",
      "parentUuid": "953e22e9_c5b78e5c",
      "range": {
        "startLine": 1225,
        "startChar": 19,
        "endLine": 1225,
        "endChar": 21
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75436e81_521ce48f",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1225,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-10-28T18:46:43Z",
      "side": 1,
      "message": "the cleanup lambda is next to unintelligible, I don\u0027t think this needs explanation.",
      "parentUuid": "55abca56_8b7e9105",
      "range": {
        "startLine": 1225,
        "startChar": 19,
        "endLine": 1225,
        "endChar": 21
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_2fa1a907",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1225,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-29T09:47:53Z",
      "side": 1,
      "message": "Don\u0027t underestime the c++ readability of your co-workers (that I don\u0027t have). But thanks, you just provided the only thing I\u0027m asking which is that the lambda below is unintelligible.",
      "parentUuid": "75436e81_521ce48f",
      "range": {
        "startLine": 1225,
        "startChar": 19,
        "endLine": 1225,
        "endChar": 21
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5359ed2_fc3ff6a9",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1244,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Should that be LOG(DEBUG) instead? (here and other places).",
      "range": {
        "startLine": 1244,
        "startChar": 10,
        "endLine": 1244,
        "endChar": 14
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_85e7466d",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1244,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "I apologize, in my rush to get this CL out the door, I didn\u0027t take the time to learn the differences between LOG and ALOG so I wasn\u0027t sure if the log functions do any extra filtering. \n\nBriefly looking at LogMessageData it seems like it can set any minimum logging level programatically, so it\u0027s not obvious what the minimum logging level is at runtime.\n\nI\u0027ll have to take a look at that more closely. With that in mind, is it even right to wrap it in a \u0027if (kIsDebugBuild)\u0027 if the other parts of the runtime is already filtering out logs above a certain severity?",
      "parentUuid": "f5359ed2_fc3ff6a9",
      "range": {
        "startLine": 1244,
        "startChar": 10,
        "endLine": 1244,
        "endChar": 14
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_6fa6c1cc",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1244,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T17:46:33Z",
      "side": 1,
      "message": "The logging framework is prior my time, so I\u0027m also unfamiliar with it. I just find it akward to have a kIsDebugBuild and DEBUG logging option, but they may just be unrelated.",
      "parentUuid": "953e22e9_85e7466d",
      "range": {
        "startLine": 1244,
        "startChar": 10,
        "endLine": 1244,
        "endChar": 14
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5d5e601_e3f46c69",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1244,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-30T07:32:32Z",
      "side": 1,
      "message": "LOG(DEBUG) (and ALOGD) are never meant to be checked in. We grepped and removed them all once. that is more of an Android style thing.\n\nIf anything, shouldn\u0027t this be (debug), not (kIsDebugBuild) to match the rest?",
      "parentUuid": "75ae0e67_6fa6c1cc",
      "range": {
        "startLine": 1244,
        "startChar": 10,
        "endLine": 1244,
        "endChar": 14
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35e9f6cf_5c741dc3",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1244,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-30T09:42:56Z",
      "side": 1,
      "message": "So should we get rid of the DEBUG level in logging.h?",
      "parentUuid": "b5d5e601_e3f46c69",
      "range": {
        "startLine": 1244,
        "startChar": 10,
        "endLine": 1244,
        "endChar": 14
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9558e21b_5233b217",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1244,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-11-07T08:39:05Z",
      "side": 1,
      "message": "No, its meant to be used when debugging to make it clear to reviewers it was intended to be removed. \n\nALOGD is the frameworks underlying one, we are just mirroring their behavior.\n\ni personally use LG \u003c\u003c since i\u0027m lazy for debug logging.",
      "parentUuid": "35e9f6cf_5c741dc3",
      "range": {
        "startLine": 1244,
        "startChar": 10,
        "endLine": 1244,
        "endChar": 14
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_c5531a64",
        "filename": "patchoat/patchoat.cc",
        "patchSetId": 3
      },
      "lineNbr": 1264,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "promatic -\u003e problematic",
      "range": {
        "startLine": 1264,
        "startChar": 29,
        "endLine": 1264,
        "endChar": 37
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_a55a9e73",
        "filename": "patchoat/patchoat.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Add \u0027.\u0027 at end of comments. Here and other places.",
      "range": {
        "startLine": 44,
        "startChar": 24,
        "endLine": 44,
        "endChar": 28
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_45925ebe",
        "filename": "patchoat/patchoat.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "Good catch, I think we will need to add this rule to the linter",
      "parentUuid": "55abca56_a55a9e73",
      "range": {
        "startLine": 44,
        "startChar": 24,
        "endLine": 44,
        "endChar": 28
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_695ec1e9",
        "filename": "patchoat/patchoat.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Too much indentation.",
      "range": {
        "startLine": 79,
        "startChar": 6,
        "endLine": 79,
        "endChar": 13
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5396603_6905bd7f",
        "filename": "patchoat/patchoat.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "Surprised linter didn\u0027t catch this.",
      "parentUuid": "75ae0e67_695ec1e9",
      "range": {
        "startLine": 79,
        "startChar": 6,
        "endLine": 79,
        "endChar": 13
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5bfba8a_7d0bdf15",
        "filename": "runtime/elf_file.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-28T03:40:23Z",
      "side": 1,
      "message": "in general, optional arguments aren\u0027t probably worth the confusion when there are so few callers.",
      "range": {
        "startLine": 46,
        "startChar": 60,
        "endLine": 46,
        "endChar": 97
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5bfba8a_3d156732",
        "filename": "runtime/image.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-10-28T03:40:23Z",
      "side": 1,
      "message": "why this one in this case? This is only used when reinterpretting existing mmap\u0027d pages.",
      "range": {
        "startLine": 31,
        "startChar": 18,
        "endLine": 31,
        "endChar": 34
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ae0e67_e9495129",
        "filename": "runtime/image.h",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Please add a comment why this field can\u0027t be typed \u0027bool\u0027.",
      "range": {
        "startLine": 170,
        "startChar": 15,
        "endLine": 170,
        "endChar": 16
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_c5a5ce14",
        "filename": "runtime/image.h",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "This probably needs a larger comment block in general (around line 133?) about what the structure is supposed to look like.\n\nIf I had to guess, the offset between every field must be 32bits (i.e. the fields could be smaller but with padding in between).\n\nDoes that seem right?",
      "parentUuid": "75ae0e67_e9495129",
      "range": {
        "startLine": 170,
        "startChar": 15,
        "endLine": 170,
        "endChar": 16
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "354d76af_5c487da6",
        "filename": "runtime/image.h",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T17:46:33Z",
      "side": 1,
      "message": "Sure, but the idea is that this is a a class representing data in a file, where we need to be careful about the layout (contrary to regular C++ objects where we usually don\u0027t care about the layout of the object).",
      "parentUuid": "953e22e9_c5a5ce14",
      "range": {
        "startLine": 170,
        "startChar": 15,
        "endLine": 170,
        "endChar": 16
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5359ed2_bc396ec6",
        "filename": "runtime/oat.cc",
        "patchSetId": 3
      },
      "lineNbr": 476,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T10:30:54Z",
      "side": 1,
      "message": "Wouldn\u0027t it be simpler to be 0 or 1? instead of true or false.",
      "range": {
        "startLine": 476,
        "startChar": 35,
        "endLine": 476,
        "endChar": 42
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "953e22e9_e5ac52fd",
        "filename": "runtime/oat.cc",
        "patchSetId": 3
      },
      "lineNbr": 476,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2014-10-28T16:59:01Z",
      "side": 1,
      "message": "Sorry, this code is basically from Andreas\u0027 earlier patchset, except that I moved it from OatFile into OatHeader.\n\nI imagine it would still need a string matching of some sort since something could be storing \"01..\" or \"10..\" etc instead of just \"0\" and \"1\"",
      "parentUuid": "f5359ed2_bc396ec6",
      "range": {
        "startLine": 476,
        "startChar": 35,
        "endLine": 476,
        "endChar": 42
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55abca56_0b1941e5",
        "filename": "runtime/oat.cc",
        "patchSetId": 3
      },
      "lineNbr": 476,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-10-28T17:46:33Z",
      "side": 1,
      "message": "Probably. Andreas may give us some context here.",
      "parentUuid": "953e22e9_e5ac52fd",
      "range": {
        "startLine": 476,
        "startChar": 35,
        "endLine": 476,
        "endChar": 42
      },
      "revId": "46774767fcf7780d1455e755729198648d08742e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}