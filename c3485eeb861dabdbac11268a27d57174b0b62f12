{
  "comments": [
    {
      "key": {
        "uuid": "31002db7_dd0940fc",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 315,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-09-28T22:07:04Z",
      "side": 0,
      "message": "why was this removed? We can have the same (short)(char-data) situation, making this a perfectly fine signed abs!\n\nAbs and SAD are the ones I called \"implicitly\" signed.\n\n(I was pondering on given them IsUnsigned -\u003e false method to make that more clear, but with the direction that we are going now that would be a waste).\n\n\nalternatively, you could do the normalize packed data type trick for abs in the loop opt if you prefer",
      "revId": "c3485eeb861dabdbac11268a27d57174b0b62f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a92965fa_3632d446",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 315,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-09-29T14:27:25Z",
      "side": 0,
      "message": "ABS on an unsigned type is rather meaningless. We should always set the packed type of the VecAbs to signed (though the packed type of the input may be unsigned).",
      "parentUuid": "31002db7_dd0940fc",
      "revId": "c3485eeb861dabdbac11268a27d57174b0b62f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84fcd395_fa71c8cf",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 4
      },
      "lineNbr": 315,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-09-29T17:06:24Z",
      "side": 0,
      "message": "Something like \n\n  static void vmarko(char[] y) {\n    for (int i \u003d 0; i \u003c 10; i++) {\n      y[i] \u003d (char) Math.abs((short)y[i]);\n    }\n  }\n\nvectorizes, but leaves unsigned packed data types on the ABS (just because vectorizer only cares about data width, the operations themselves reflect signed/unsignedness). The current code will LOG FATAL on that! (incidentally, the CL that I send out for review fixes this by being cleaner in the type, anticipating the direction we are taking now).\n\nI will send out a unit test to make sure we watch these cases better.\n\nSo I am okay with removing the unsigned type here, but for the moment, you should call NormalizePackedType() with the (always false) is_unsigned variable in loop_optimization.cc at L1747 right before creating HVecAbs() to ensure the packed data types always reflect the is-signed-ness. Very much like you did for Min/Max/SAD",
      "parentUuid": "a92965fa_3632d446",
      "revId": "c3485eeb861dabdbac11268a27d57174b0b62f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6de5bc30_99c29a3a",
        "filename": "compiler/optimizing/code_generator_vector_arm_vixl.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-09-28T22:07:04Z",
      "side": 0,
      "message": "same concern",
      "revId": "c3485eeb861dabdbac11268a27d57174b0b62f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26037103_984367ba",
        "filename": "compiler/optimizing/code_generator_vector_mips.cc",
        "patchSetId": 4
      },
      "lineNbr": 214,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-09-28T22:07:04Z",
      "side": 0,
      "message": "same concern",
      "revId": "c3485eeb861dabdbac11268a27d57174b0b62f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28f173a1_d88d5ad6",
        "filename": "compiler/optimizing/code_generator_vector_mips64.cc",
        "patchSetId": 4
      },
      "lineNbr": 218,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2017-09-28T22:07:04Z",
      "side": 0,
      "message": "same concern",
      "revId": "c3485eeb861dabdbac11268a27d57174b0b62f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}