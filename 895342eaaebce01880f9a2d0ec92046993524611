{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "34bdfc91_52367fd6",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 71,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "It\u0027d be slightly more stringent to have different values for unset and Mainline update, so that we could e.g. detect if the caller has forgotten the `updateOtaSlot` call. I don\u0027t feel strongly about it though.",
      "range": {
        "startLine": 71,
        "startChar": 59,
        "endLine": 71,
        "endChar": 63
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "659a8b91_a56b93c7",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "Not sure I understand this warning, but my best guess is that it wants a call to `exceptionally` or something similar on the returned future to report any thrown exception. Maybe the error handling on line 164 is better off in something like that? Then I suppose it\u0027d apply to the stage below as well.\n\n---\n\nPlease fix this WARNING reported by Error Prone: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.\n\nAnalyzer Description: Warnings generated by errorprone.\nOwner: farivar@google.com\n\n    [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.\n            start().thenRunAsync(() -\u003e {\n                                ^\n        (see https://errorprone.info/bugpattern/FutureReturnValueIgnored)\n      Did you mean \u0027var unused \u003d start().thenRunAsync(() -\u003e {\u0027 or to remove this line?\n\nUse `m RUN_ERROR_PRONE\u003dtrue MyModule` to reproduce locally.\n\nThis finding was found on https://android-build.googleplex.com/builds/build-details/P74016640/targets/errorprone-trunk_staging, but may also be present on other builds.\n\nThis is a different branch than your cl originated on (it was automerged), and thus might better reflect the state of the code in the git_main branch.",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "831e80e7_5711d576",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "Thanks for the suggestion. I think the error handling is better in the future itself so that different consumers of the future don\u0027t have to handle errors separately. I added `var unused` to suppress the warning.",
      "parentUuid": "659a8b91_a56b93c7",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03a2975c_ac3984d8",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T18:51:47Z",
      "side": 1,
      "message": "\u003e so that different consumers of the future don\u0027t have to handle errors separately\n\nSorry I don\u0027t follow. If you add an `exceptionally` to the future here it\u0027ll be in play regardless who ends up waiting on it with a `get`, won\u0027t it?\n\nHowever, from the docs it looks like each stage would need its own `exceptionally`, so it has no real benefit to putting a `try`-`catch` inside the stage instead.\n\nSpeaking of that though, the stage below doesn\u0027t catch anything, so if I understand the warning correctly any exception thrown by `jobService.jobFinished` will just disappear without a trace. So please add a `try`-`catch` around it.",
      "parentUuid": "831e80e7_5711d576",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eafcf1de_5f0c309d",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-03T11:36:12Z",
      "side": 1,
      "message": "\u003e If you add an exceptionally to the future here it\u0027ll be in play regardless who ends up waiting on it with a get, won\u0027t it?\n\nAccording to the doc, `exceptionally` returns a new CompletableFuture, which I think means it doesn\u0027t mutate the existing one. The one stored at `mRunningJob` and returned by `start()` when called by someone else later won\u0027t get this `exceptionally`.\n\n\u003e so if I understand the warning correctly any exception thrown by jobService.jobFinished will just disappear without a trace. So please add a try-catch around it.\n\nDone.",
      "parentUuid": "03a2975c_ac3984d8",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f17d71d2_f0bab19e",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-03T12:24:59Z",
      "side": 1,
      "message": "\u003e The one stored at mRunningJob and returned by start() when called by someone else later won\u0027t get this exceptionally.\n\nI didn\u0027t think of that, but then I reckon it\u0027s a matter of just making sure it\u0027s the final `CompletableFuture` that\u0027s stored in `mRunningJob`.\n\nHowever is `exceptionally` any different from `thenRunAsync` in that regard? I don\u0027t see it - they both go \"Returns a new CompletionStage that, when this stage completes /.../\". Iow, do we need to store this return value in `mRunningJob`?\n\n(Only unresolving this for that reason - the error handling is fine now.)",
      "parentUuid": "eafcf1de_5f0c309d",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "765639f5_a792d9c9",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-03T12:33:29Z",
      "side": 1,
      "message": "All right, the difference is that async runnables get scheduled in an executor, so they\u0027ll run from there. So my suggestion ought to have been to use `exceptionallyAsync`, not `exceptionally`.",
      "parentUuid": "f17d71d2_f0bab19e",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a61c4e42_11133550",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-03T12:43:03Z",
      "side": 1,
      "message": "(And reading the docs about exception handling [here](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/CompletionStage.html), I now think a single `exceptionallyAsync` at the end of the `CompletionStage` chain would be enough to handle exceptions in all the stages, which makes it a little bit cleaner than these repeated try/catch blocks, but this is ok too.)",
      "parentUuid": "765639f5_a792d9c9",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc43ad75_ff6abc19",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 87,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "Typo: \"likely\"\n```suggestion\n            // it will likely fail again. If it\u0027s cancelled, the job will be rescheduled because the\n```",
      "range": {
        "startLine": 87,
        "startChar": 23,
        "endLine": 87,
        "endChar": 27
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f800072_4b21cba3",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 87,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc43ad75_ff6abc19",
      "range": {
        "startLine": 87,
        "startChar": 23,
        "endLine": 87,
        "endChar": 27
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68836f79_13097fb4",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 97,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "Is it wise to block here? I\u0027m thinking it may be better to split `cancel` into one method that cancels and another that waits.",
      "range": {
        "startLine": 97,
        "startChar": 8,
        "endLine": 97,
        "endChar": 17
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4030007d_a1357e3c",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 97,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "Looks like the job scheduler doesn\u0027t block on `onStopJob`, so whether `onStopJob` doesn\u0027t matter, but let\u0027s not rely on this. Made it non-blocking.",
      "parentUuid": "68836f79_13097fb4",
      "range": {
        "startLine": 97,
        "startChar": 8,
        "endLine": 97,
        "endChar": 17
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cb82f5d_edd7f530",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 99,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "How do retries work? `dexoptPackages` will start over with a new snapshot, but is the intention that it\u0027ll quickly skip over already dexopted and staged packages? If so, that bears testing.",
      "range": {
        "startLine": 99,
        "startChar": 15,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72d50477_e1f679a7",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 99,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "A retry always starts over. That\u0027s because we don\u0027t have a way to use OatFileAssistant to check the staged artifacts. Let\u0027s live with this for the MVP.",
      "parentUuid": "5cb82f5d_edd7f530",
      "range": {
        "startLine": 99,
        "startChar": 15,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "481483b3_1a014ef9",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 99,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T18:51:47Z",
      "side": 1,
      "message": "Ok, but then the risk with retrying is that devices may get stuck dexopting over and over without progressing. It stops retrying after 5 hours, but we may want to adjust the backoff criteria; I\u0027m thinking that given the size of the job we ought to have a significantly longer minimum backoff time (the default is just 30s). Something like 30 mins but linear may be more appropriate.",
      "parentUuid": "72d50477_e1f679a7",
      "range": {
        "startLine": 99,
        "startChar": 15,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f36346e_1160036c",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 99,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-03T11:36:12Z",
      "side": 1,
      "message": "Done. Thank you for the suggestion!",
      "parentUuid": "481483b3_1a014ef9",
      "range": {
        "startLine": 99,
        "startChar": 15,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa10594e_4c267709",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 99,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-03T12:24:06Z",
      "side": 1,
      "message": "Wait, this is a idle job, so backoff criteria can\u0027t be set. See https://developer.android.com/reference/android/app/job/JobInfo.Builder#setBackoffCriteria(long,%20int).\n\nWe can discuss a solution later. Can we submit this CL to unblock the test for now?",
      "parentUuid": "5f36346e_1160036c",
      "range": {
        "startLine": 99,
        "startChar": 15,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e294b889_69cb452e",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 175,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "Typo: \"waits\"\n```suggestion\n    /** Cancels the job and waits for the job to exit. */\n```",
      "range": {
        "startLine": 175,
        "startChar": 28,
        "endLine": 175,
        "endChar": 32
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83d2a7e4_5e06bcba",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 175,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e294b889_69cb452e",
      "range": {
        "startLine": 175,
        "startChar": 28,
        "endLine": 175,
        "endChar": 32
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d96b10_eda99fd4",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 176,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "If you\u0027d like to keep the wait in this method, I suggest calling it something like `cancelAndWait` to make the difference from `BackgroundDexoptJob.cancel` more clear.",
      "range": {
        "startLine": 176,
        "startChar": 16,
        "endLine": 176,
        "endChar": 22
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a8fa827_e8db5fef",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 176,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "Added a parameter.",
      "parentUuid": "e2d96b10_eda99fd4",
      "range": {
        "startLine": 176,
        "startChar": 16,
        "endLine": 176,
        "endChar": 22
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53bb0347_792f66df",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 180,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "Given that many call sites call this both via `unschedule` and directly, this will happen more often than not, won\u0027t it? Then I suspect this log will be of little value.\n\nAnother approach is to let `cancel` only cancel, as it does in `BackgroundDexoptJob`, and have a separate method to wait.",
      "range": {
        "startLine": 180,
        "startChar": 16,
        "endLine": 180,
        "endChar": 49
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a1e629f_c8fe11b9",
        "filename": "libartservice/service/java/com/android/server/art/PreRebootDexoptJob.java",
        "patchSetId": 21
      },
      "lineNbr": 180,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "You are right. Removed this log.",
      "parentUuid": "53bb0347_792f66df",
      "range": {
        "startLine": 180,
        "startChar": 16,
        "endLine": 180,
        "endChar": 49
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53a08e35_f3c3b7b3",
        "filename": "libartservice/service/javatests/com/android/server/art/PreRebootDexoptJobTest.java",
        "patchSetId": 21
      },
      "lineNbr": 195,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-02T13:12:07Z",
      "side": 1,
      "message": "Suggest the `var unused \u003d ...` thing to silence this.\n\n---\n\nPlease fix this WARNING reported by Error Prone: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.\n\nAnalyzer Description: Warnings generated by errorprone.\nOwner: farivar@google.com\n\n    [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.\n            mPreRebootDexoptJob.start();\n                                     ^\n        (see https://errorprone.info/bugpattern/FutureReturnValueIgnored)\n      Did you mean \u0027var unused \u003d mPreRebootDexoptJob.start();\u0027 or to remove this line?\n\nUse `m RUN_ERROR_PRONE\u003dtrue MyModule` to reproduce locally.\n\nThis finding was found on https://android-build.googleplex.com/builds/build-details/P74016640/targets/errorprone-trunk_staging, but may also be present on other builds.\n\nThis is a different branch than your cl originated on (it was automerged), and thus might better reflect the state of the code in the git_main branch.",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 195,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8cf3cf3_847d7dc4",
        "filename": "libartservice/service/javatests/com/android/server/art/PreRebootDexoptJobTest.java",
        "patchSetId": 21
      },
      "lineNbr": 195,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-02T17:44:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53a08e35_f3c3b7b3",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 195,
        "endChar": 36
      },
      "revId": "895342eaaebce01880f9a2d0ec92046993524611",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}