{
  "comments": [
    {
      "key": {
        "uuid": "5d91680c_1fb883ed",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:06:15Z",
      "side": 1,
      "message": "you are doing part of this TODO",
      "range": {
        "startLine": 207,
        "startChar": 30,
        "endLine": 207,
        "endChar": 40
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d53d428_e6463e9a",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:06:15Z",
      "side": 1,
      "message": "by doing this you are violating the invariant that induction nodes always have the same type as their context",
      "range": {
        "startLine": 213,
        "startChar": 13,
        "endLine": 213,
        "endChar": 23
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d91680c_3f19c7bd",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-02-08T19:29:35Z",
      "side": 1,
      "message": "I didn\u0027t know about that assumption.  What is a better way to handle this?",
      "parentUuid": "3d53d428_e6463e9a",
      "range": {
        "startLine": 213,
        "startChar": 13,
        "endLine": 213,
        "endChar": 23
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d8e2cf1_4042ae88",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 268,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:06:15Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 268,
        "startChar": 24,
        "endLine": 268,
        "endChar": 28
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d4e1083_c5c45a0b",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 278,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:15:36Z",
      "side": 1,
      "message": "you are using this field as a \"global variable\u0027 so that you don\u0027t have to pass this information around, something i tried to avoid in the original implementation, as it gets to cloud rather quickly.",
      "range": {
        "startLine": 278,
        "startChar": 12,
        "endLine": 278,
        "endChar": 22
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd471866_e319929d",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 640,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:15:36Z",
      "side": 1,
      "message": "you added an enormous amount of code to this method that only serves a few corner cases on type conversions, which make it now very hard to read; at least put this in self-contained methods",
      "range": {
        "startLine": 640,
        "startChar": 25,
        "endLine": 640,
        "endChar": 35
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d8760d1_a1aa9e47",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 640,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2016-02-08T19:29:35Z",
      "side": 1,
      "message": "While the checks are needed, I don\u0027t like using the type_conv_ data member, as it affects the whole method, which is bogus.  This code is just here to demonstrate the checking, but I am looking for guidance on how to do a better job.  Where could this code code that would be IV dependent, and not method dependent?",
      "parentUuid": "dd471866_e319929d",
      "range": {
        "startLine": 640,
        "startChar": 25,
        "endLine": 640,
        "endChar": 35
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d983433_3e19c9bd",
        "filename": "compiler/optimizing/induction_var_analysis.cc",
        "patchSetId": 1
      },
      "lineNbr": 655,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:15:36Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 655,
        "startChar": 31,
        "endLine": 655,
        "endChar": 35
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d8760d1_61e576f5",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:06:15Z",
      "side": 1,
      "message": "why is this not part of the constructor, like all the others?",
      "range": {
        "startLine": 132,
        "startChar": 22,
        "endLine": 132,
        "endChar": 33
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d8e2cf1_600c928f",
        "filename": "compiler/optimizing/induction_var_analysis.h",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-02-08T19:06:15Z",
      "side": 1,
      "message": "I would really prefer a solution that is more general and would include int/long as well",
      "range": {
        "startLine": 222,
        "startChar": 44,
        "endLine": 222,
        "endChar": 47
      },
      "revId": "074e30d65e469fc5bf568b4a42f73d6d666447d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}