{
  "comments": [
    {
      "key": {
        "uuid": "18630d56_a3575a3a",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 43
      },
      "lineNbr": 435,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-03-28T16:13:58Z",
      "side": 1,
      "message": "What about other types?\nI could implement other cases in the follow up patch.",
      "range": {
        "startLine": 435,
        "startChar": 4,
        "endLine": 435,
        "endChar": 12
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80aba9b4_5128b769",
        "filename": "compiler/optimizing/code_generator_vector_arm64.cc",
        "patchSetId": 43
      },
      "lineNbr": 528,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-03-28T16:13:58Z",
      "side": 1,
      "message": "You probably don\u0027t need that.",
      "range": {
        "startLine": 528,
        "startChar": 59,
        "endLine": 528,
        "endChar": 63
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08b4beb0_17b8bf2e",
        "filename": "compiler/optimizing/code_generator_vector_x86_64.cc",
        "patchSetId": 43
      },
      "lineNbr": 231,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-03-28T16:13:58Z",
      "side": 1,
      "message": "HNot is not defined for floating point in java, isn\u0027t it? Scalar codegens don\u0027t implement this.",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 231,
        "endChar": 25
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17930d26_87f84fdd",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 119,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Unnecessary edit.",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 119,
        "endChar": 49
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00be6dad_39f51573",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 398,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-03-28T16:13:58Z",
      "side": 1,
      "message": "I understand that this is kind of simplistic heuristic and later an improved vectorization cost heuristic can be developed, but what about the performance just with the patch: are there any degradation on benchmarks which have short loops? I am currently checking it for ARM64 with our benchmarks sets.",
      "range": {
        "startLine": 394,
        "startChar": 0,
        "endLine": 398,
        "endChar": 3
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3658abe_85a00e4e",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 423,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "\u003e100 chars",
      "range": {
        "startLine": 423,
        "startChar": 91,
        "endLine": 423,
        "endChar": 103
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90ee5299_ecd8f98d",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 598,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "generate_code",
      "range": {
        "startLine": 598,
        "startChar": 42,
        "endLine": 598,
        "endChar": 45
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13c8b27a_10b28415",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 636,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Each of these blocks is like a self-contained function. It\u0027d reduce the nesting and eliminate the elses\u0027s if each ended in return. The there could be whitespace between each outer condition.",
      "range": {
        "startLine": 616,
        "startChar": 4,
        "endLine": 636,
        "endChar": 3
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daad2d9b_8e5391ef",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 740,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Other parts of ART prefer early return, it\u0027d give one less indentation level here and make it easier on the reader.",
      "range": {
        "startLine": 739,
        "startChar": 0,
        "endLine": 740,
        "endChar": 60
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91daa441_462ce8b6",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 745,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "std::numeric_limits::max_value\u003cint32_t\u003e()\nstd::numeric_limits::max_value\u003cint64_t\u003e()",
      "range": {
        "startLine": 743,
        "startChar": 43,
        "endLine": 745,
        "endChar": 65
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21e70665_2e6f4a04",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 769,
      "author": {
        "id": 1089808
      },
      "writtenOn": "2017-03-28T16:13:58Z",
      "side": 1,
      "message": "It is a strong assumption, ARMv8 AArch64 guarantees it for Android.",
      "range": {
        "startLine": 769,
        "startChar": 9,
        "endLine": 769,
        "endChar": 42
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6f6497d_46f7e15d",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 826,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "IsPowerOfTwo(length) \u0026\u0026 length \u003e\u003d 2u",
      "range": {
        "startLine": 826,
        "startChar": 0,
        "endLine": 826,
        "endChar": 24
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c21a8128_6b893597",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 834,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Method name reads test, but has a side-effect. Non-const is a clue, but a different name might be better.",
      "range": {
        "startLine": 834,
        "startChar": 9,
        "endLine": 834,
        "endChar": 34
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1409e048_97403b44",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 913,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Consider moving GENVEC definition here (from memory it seems the more common pattern), moving new (global_allocator_) into it, and de-abbreviating.",
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb7b8765_f2cf89be",
        "filename": "compiler/optimizing/loop_optimization.cc",
        "patchSetId": 43
      },
      "lineNbr": 968,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "undef GENVEC",
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f178392_30618e5b",
        "filename": "compiler/optimizing/loop_optimization.h",
        "patchSetId": 43
      },
      "lineNbr": 93,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Most method names here are avoiding abbreviation.",
      "range": {
        "startLine": 93,
        "startChar": 7,
        "endLine": 93,
        "endChar": 10
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f5ee0_8e3ec700",
        "filename": "compiler/optimizing/loop_optimization.h",
        "patchSetId": 43
      },
      "lineNbr": 178,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Not an obvious abbreviation.",
      "range": {
        "startLine": 178,
        "startChar": 15,
        "endLine": 178,
        "endChar": 20
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdae8386_a14d44ca",
        "filename": "compiler/optimizing/loop_optimization.h",
        "patchSetId": 43
      },
      "lineNbr": 179,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "As a reader, I might prefer an enum here. Had to scan back from the implementation file.",
      "range": {
        "startLine": 179,
        "startChar": 2,
        "endLine": 179,
        "endChar": 12
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7321700b_52b59035",
        "filename": "compiler/optimizing/nodes_vector.h",
        "patchSetId": 43
      },
      "lineNbr": 40,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "making base_ a mask might permit \u0026.",
      "range": {
        "startLine": 40,
        "startChar": 43,
        "endLine": 40,
        "endChar": 44
      },
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "975081ef_6edd3d35",
        "filename": "test/640-checker-byte-simd/src/Main.java",
        "patchSetId": 43
      },
      "lineNbr": 158,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-03-28T15:28:29Z",
      "side": 1,
      "message": "Should these have a TODO for checker annotations?",
      "revId": "5cced9962a67aca7a391d4660dfde112bb8bc8ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}