{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d75c61a4_f39e5fed",
        "filename": "test/standalone_test_lib_check.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-11T15:55:15Z",
      "side": 1,
      "message": "I\u0027m not sure about this one. For example, `libbase` is in the ART APEX, but we need to statically link against it, right?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 32
      },
      "revId": "86bdfd9628dfb552c504cd006336027212f96f9e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c73ce2f0_729fd099",
        "filename": "test/standalone_test_lib_check.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-11T17:03:53Z",
      "side": 1,
      "message": "We can if we make sure to actually load it from there. That\u0027s another matter entirely though. Clarified.",
      "parentUuid": "d75c61a4_f39e5fed",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 32
      },
      "revId": "86bdfd9628dfb552c504cd006336027212f96f9e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23922e68_2818d1cb",
        "filename": "test/standalone_test_lib_check.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-12T10:16:19Z",
      "side": 1,
      "message": "What does this include in practice?\n\nThe problem is, I\u0027m not sure how often the assumption on line 43 holds. It\u0027s too easy to break the assumption with a new test config. It will be great to remove this type of libraries so that we can eliminate that assumption.",
      "parentUuid": "c73ce2f0_729fd099",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 32
      },
      "revId": "86bdfd9628dfb552c504cd006336027212f96f9e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45b8ade6_d623d4af",
        "filename": "test/standalone_test_lib_check.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-11T15:55:15Z",
      "side": 1,
      "message": "For my education, what does this include?",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 56
      },
      "revId": "86bdfd9628dfb552c504cd006336027212f96f9e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67afa422_0f65b00c",
        "filename": "test/standalone_test_lib_check.cc",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-11T17:03:53Z",
      "side": 1,
      "message": "It could include libarttest.so (although there are other problems with that). Or perhaps a support library for the test itself which for some reason isn\u0027t linked statically. I mention it just for the sake of completeness.",
      "parentUuid": "45b8ade6_d623d4af",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 56
      },
      "revId": "86bdfd9628dfb552c504cd006336027212f96f9e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fbf7c0a_46923fcd",
        "filename": "test/standalone_test_lib_check.cc",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-11T15:55:15Z",
      "side": 1,
      "message": "`Errorf` expects `{}` rather than those C-style format specifiers. It\u0027s a pity that there isn\u0027t a compile-time check for missing `{}`s. (There is a compile-time check for the other way around though.)\n```suggestion\n    return Errorf(\"libelf initialization failed: {}\", elf_errmsg(-1));\n```",
      "range": {
        "startLine": 90,
        "startChar": 49,
        "endLine": 90,
        "endChar": 51
      },
      "revId": "86bdfd9628dfb552c504cd006336027212f96f9e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4512d44c_1c2e7ac3",
        "filename": "test/standalone_test_lib_check.cc",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-11T17:03:53Z",
      "side": 1,
      "message": "Oh, tricky. The downside with not sticking to the venerable old % syntax. :P",
      "parentUuid": "4fbf7c0a_46923fcd",
      "range": {
        "startLine": 90,
        "startChar": 49,
        "endLine": 90,
        "endChar": 51
      },
      "revId": "86bdfd9628dfb552c504cd006336027212f96f9e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}