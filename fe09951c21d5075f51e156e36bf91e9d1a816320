{
  "comments": [
    {
      "key": {
        "uuid": "87e2a462_cb4e8c4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Could you also add this line referencing our internal bug addressed by this CL:\n\n  Bug: 34850123\n\n?  Thanks.",
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55467f3e_6a9bbdfd",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Maybe drop the `vixl::` prefix (here and in other places in this file)?",
      "range": {
        "startLine": 596,
        "startChar": 2,
        "endLine": 596,
        "endChar": 28
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38b0411e_21fdc448",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 1646,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Could you comment on this value (especially why you allow _twice_ the `kMaxMacroInstructionSizeInBytes` constant)?  Is this because some cases (`kPrimByte`, `kPrimShort`, `kPrimFloat`, and `kPrimDouble`) use two macro-instructions?\n\nIf so, I think it would be nice to have scope guards \"tailored\" to the case, for the sake of precision and understandability.",
      "range": {
        "startLine": 1646,
        "startChar": 49,
        "endLine": 1646,
        "endChar": 84
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8307dd0_7e993c98",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 2043,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Likewise, why \"three times\"?  It seems only the `kPrimFloat` and `kPrimDouble` cases use 3 macro-instructions in `CodeGeneratorARM64::StoreRelease` (other cases use 2).\n\nAlso, what about adding a Boolean flag `needs_null_check` to `CodeGeneratorARM64::StoreRelease` (similarly to CodeGeneratorARM64::LoadAcquire) and move the scope guard + null check there?  (Likewise for `CodeGeneratorARM64::Store` on line 2049.)",
      "range": {
        "startLine": 2043,
        "startChar": 51,
        "endLine": 2043,
        "endChar": 55
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed3bff3e_503cdc2d",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 3991,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 3991,
        "startChar": 49,
        "endLine": 3991,
        "endChar": 52
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "795c8480_c6df7831",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 4410,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Could you explain how the value of 2048 bytes was chosen?  It seems pretty large to cover a static/direct call generated by Generate*Call methods.",
      "range": {
        "startLine": 4410,
        "startChar": 47,
        "endLine": 4410,
        "endChar": 75
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61091d11_c6a01d6c",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Nit: maybe use a number divisible by 4 (like 128 or 96)? Or even better, express this as a multiple of `kMaxInstructionSizeInBytes` (or something similar, as `vixl::aarch64::kMaxInstructionSizeInBytes` does not seem to exist)?",
      "range": {
        "startLine": 48,
        "startChar": 55,
        "endLine": 48,
        "endChar": 58
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51e24ec8_f4902853",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Nit: `static constexpr`, to be consistent with the style used in this file for constants.",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 16
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec64dde4_3123f703",
        "filename": "compiler/optimizing/code_generator_arm64.h",
        "patchSetId": 1
      },
      "lineNbr": 510,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2017-02-08T18:34:19Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 510,
        "startChar": 0,
        "endLine": 510,
        "endChar": 57
      },
      "revId": "fe09951c21d5075f51e156e36bf91e9d1a816320",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}