{
  "comments": [
    {
      "key": {
        "uuid": "c4b72a4b_902894c7",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1188,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "const uint16_t\n\n(browsing around this file, we don\u0027t seem to generally do that, but it is a good style to make write-once locals const)",
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64175efc_9536e419",
        "filename": "compiler/optimizing/builder.cc",
        "patchSetId": 2
      },
      "lineNbr": 1325,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "const uint16_t",
      "range": {
        "startLine": 1325,
        "startChar": 2,
        "endLine": 1325,
        "endChar": 10
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a64628_4b3de5f0",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "why explicit?",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 10
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b72a4b_500f4c64",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "something like \"may become\" is not very clear at first reading, please add more detailed doc",
      "range": {
        "startLine": 42,
        "startChar": 7,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a405d6c4_77fb50b0",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "C++ style guide requires every class to get a top comment\nplease follow that rule so that your readers can grasp the meaning of classes faster",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 53,
        "endChar": 19
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_0cf81783",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "explicit?",
      "range": {
        "startLine": 55,
        "startChar": 2,
        "endLine": 55,
        "endChar": 10
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b72a4b_904ff4a9",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "use (1) instead of 1) so that some old style tools for matching brackets don\u0027t get confused",
      "range": {
        "startLine": 59,
        "startChar": 10,
        "endLine": 59,
        "endChar": 14
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84a1b20e_8e287bc7",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "const size_t",
      "range": {
        "startLine": 186,
        "startChar": 10,
        "endLine": 186,
        "endChar": 11
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09bb1ba1_6a4f97aa",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1074104
      },
      "writtenOn": "2015-09-17T07:47:53Z",
      "side": 1,
      "message": "What happens if ref1 inherits from ref2 ?",
      "range": {
        "startLine": 234,
        "startChar": 8,
        "endLine": 234,
        "endChar": 88
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29753fb9_13072c93",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-09-17T15:59:51Z",
      "side": 1,
      "message": "I wondered about that before, too. The point is that this is the index of the class declaring the field. So even if you access the field in a sub-class, this should point to the same (super-)class...",
      "parentUuid": "09bb1ba1_6a4f97aa",
      "range": {
        "startLine": 234,
        "startChar": 8,
        "endLine": 234,
        "endChar": 88
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b72a4b_f054803f",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 247,
        "startChar": 50,
        "endLine": 247,
        "endChar": 53
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "841c5220_b64a089a",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "const 2x",
      "range": {
        "startLine": 325,
        "startChar": 67,
        "endLine": 325,
        "endChar": 70
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a64628_0b947d01",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 527,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "this makes me a bit uncomfortable, the volatile stuff is fine but just being a sync block is not what is preventing optimizations (since the method itself can be inside a sync block) \n\nsynchronized, besides mutual exclusion, is used for memory visibility between threads (through the happens-before relation). What is needed is that, conceptually, when a lock is acquired, the \"cache\" is invalided and all loads need to occur again. Likewise, when the lock is released the \"cache\" is flushed, i.e. all writes need to be done.\n\nit does not matter for now, since you are just being overly conservative; but having this \"inside monitor\" concept may scare future developers; I would much rather see a proper solution around monitor-enter/exit calls",
      "range": {
        "startLine": 527,
        "startChar": 60,
        "endLine": 527,
        "endChar": 61
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6473de94_756b28e5",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 527,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-09-11T21:10:22Z",
      "side": 1,
      "message": "Agreed.\n\nI\u0027m not sufficiently familiar with this code base to tell whether this actually satisfies the necessary restrictions.\n\nSome examples of the memory model rules for checking purposes.  Here v is volatile, x is not:\n\nr1 \u003d x;\nr2 \u003d v;\nr3 \u003d x;\n\nHere the second load of x can NOT be replaced by r1.  (If there are no intervening uses, the other way around works.)\nThe same of the middle statement is replaced by another \"acquire\" operation, e.g. MonitorEnter. \n\nr1 \u003d v;\nr2 \u003d v;  \n\nIt\u0027s fine to combine these if there are no intervening shared memory accesses.  This is not important, but I wanted to emphasize that these are not C volatiles.\n\nIn general the effect on the algorithm of a volatile load should be essentially the same as MonitorEnter, and volatile store should be treated similarly to MonitorExit.  But the dramatic asymmetry between those cases.",
      "parentUuid": "24a64628_0b947d01",
      "range": {
        "startLine": 527,
        "startChar": 60,
        "endLine": 527,
        "endChar": 61
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44725a92_34a6108e",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 538,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-09-11T21:10:22Z",
      "side": 1,
      "message": "The real monitor level is presumably dynamic, since it depends on callers as well.  I don\u0027t think this test makes any sense here.  Note that if you have\n\nr1 \u003d x;\nsynchronized (p1) {...};\nsynchronized (p2) {...};\nr2 \u003d x;\n\nit is not safe to eliminate the second load, no matter what\u0027s in the ellipses.  A safe, though probably too strong, rule is to have the first monitor entry call kill all prior information.  (This particular case may actually be safe with a single critical section.  I\u0027d need to think about it.  It is for C++.)",
      "range": {
        "startLine": 538,
        "startChar": 28,
        "endLine": 538,
        "endChar": 55
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9d407d5_b1198082",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 538,
      "author": {
        "id": 1074104
      },
      "writtenOn": "2015-09-17T07:47:53Z",
      "side": 1,
      "message": "Maybe just regard monitor as volatile load/store?",
      "parentUuid": "44725a92_34a6108e",
      "range": {
        "startLine": 538,
        "startChar": 28,
        "endLine": 538,
        "endChar": 55
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9666312_3ed6b12f",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 538,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-09-17T17:16:49Z",
      "side": 1,
      "message": "Yes.  I think those should correspond pretty much exactly here.",
      "parentUuid": "e9d407d5_b1198082",
      "range": {
        "startLine": 538,
        "startChar": 28,
        "endLine": 538,
        "endChar": 55
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a64628_6b126190",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 778,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "this is conservative, and imho not needed at all\n(synchronized method is no different from calling a method on an object with the object\u0027s lock held)\n\nso at least add comments to document why you do that now so that future developers are not afraid to go in and improve this later :-)",
      "range": {
        "startLine": 778,
        "startChar": 24,
        "endLine": 778,
        "endChar": 25
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a64628_4b0fa564",
        "filename": "compiler/optimizing/load_store_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 786,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "\"would act\" \nseems a bit more clear than \"acts\", so that we understand why you return",
      "range": {
        "startLine": 786,
        "startChar": 33,
        "endLine": 786,
        "endChar": 37
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4b0ae55_b12320ea",
        "filename": "compiler/optimizing/load_store_elimination.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "no need for explicit keyword since you have multiple args here",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 10
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64175efc_f52bd8af",
        "filename": "compiler/optimizing/load_store_elimination.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "empty line before the DISALLOW macro invocation",
      "range": {
        "startLine": 42,
        "startChar": 47,
        "endLine": 42,
        "endChar": 49
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_6c6efbf6",
        "filename": "compiler/optimizing/nodes.h",
        "patchSetId": 2
      },
      "lineNbr": 4087,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "the \"Declaring\" seems a bit overkill in the name, since none of the other getters do that",
      "range": {
        "startLine": 4087,
        "startChar": 11,
        "endLine": 4087,
        "endChar": 36
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e913274a_1cf5198e",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1074104
      },
      "writtenOn": "2015-09-17T07:47:53Z",
      "side": 1,
      "message": "Seems the reference alias analysis does something similar with escape analysis :)",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 58,
        "endChar": 33
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a64628_2b5fb95a",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "this is nice!",
      "range": {
        "startLine": 61,
        "startChar": 39,
        "endLine": 61,
        "endChar": 40
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2919bf72_937a3cf8",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1074104
      },
      "writtenOn": "2015-09-17T07:47:53Z",
      "side": 1,
      "message": "Maybe replace with a phi node as VMarko suggested.",
      "range": {
        "startLine": 164,
        "startChar": 13,
        "endLine": 164,
        "endChar": 29
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89246ba5_96a58cea",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 189,
      "author": {
        "id": 1074104
      },
      "writtenOn": "2015-09-17T07:47:53Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 189,
        "startChar": 13,
        "endLine": 189,
        "endChar": 29
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6992d715_1d841394",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1074104
      },
      "writtenOn": "2015-09-17T07:47:53Z",
      "side": 1,
      "message": "I\u0027m not familiar with the debugger. Is it possible that debugger updates the heap value and we still run the compiled code not interpreter?",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 232,
        "endChar": 74
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c402caba_5802bd14",
        "filename": "test/530-checker-lse/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 427,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T16:20:09Z",
      "side": 1,
      "message": "uh, don\u0027t you want to verify the output of the methods?\n\noptimization without verification is, well, very dangerous!",
      "range": {
        "startLine": 427,
        "startChar": 2,
        "endLine": 427,
        "endChar": 3
      },
      "revId": "ab1efba41e1d8fe32157cb4adffb9ce8d6defcfd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}