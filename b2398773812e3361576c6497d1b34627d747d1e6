{
  "comments": [
    {
      "key": {
        "uuid": "c242cb36_23bb5c95",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 5
      },
      "lineNbr": 1183,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-23T08:24:10Z",
      "side": 1,
      "message": "I don\u0027t understand the relation between an object\u0027s state and \"No object\".",
      "range": {
        "startLine": 1183,
        "startChar": 10,
        "endLine": 1183,
        "endChar": 19
      },
      "revId": "b2398773812e3361576c6497d1b34627d747d1e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "706d6578_d08096c8",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 5
      },
      "lineNbr": 1183,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-23T14:05:44Z",
      "side": 1,
      "message": "I\u0027ll have to look at the rosalloc implementation closer, I was under impression it was a stack of pointers (not a stack of objects) but probably it\u0027s the latter after looking at the typedef AtomicStack\u003cmirror::Object\u003e\n\n(and the reason I was under this impression is because all the visitors seem to check that \"object !\u003d null\" first which would have 0 usefulness unless it was a stack of pointers)",
      "parentUuid": "c242cb36_23bb5c95",
      "range": {
        "startLine": 1183,
        "startChar": 10,
        "endLine": 1183,
        "endChar": 19
      },
      "revId": "b2398773812e3361576c6497d1b34627d747d1e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c934703_59704554",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 5
      },
      "lineNbr": 1185,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-05-23T08:24:10Z",
      "side": 1,
      "message": "I don\u0027t understand this either: r0 is a class object. I guess the ambiguity is around the word \u0027valid\u0027?",
      "range": {
        "startLine": 1185,
        "startChar": 7,
        "endLine": 1185,
        "endChar": 97
      },
      "revId": "b2398773812e3361576c6497d1b34627d747d1e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10a015e6_f044d41e",
        "filename": "runtime/arch/arm/quick_entrypoints_arm.S",
        "patchSetId": 5
      },
      "lineNbr": 1185,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-23T14:05:44Z",
      "side": 1,
      "message": "Yes r0 is an object, but the other thread  could observe the write of the thread_local_alloc_stack_top_offset first and THEN the write of MIRROR_CLASS_OBJECT_OFFSET second.",
      "parentUuid": "3c934703_59704554",
      "range": {
        "startLine": 1185,
        "startChar": 7,
        "endLine": 1185,
        "endChar": 97
      },
      "revId": "b2398773812e3361576c6497d1b34627d747d1e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d390c3a_23ef1d25",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 5
      },
      "lineNbr": 1708,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2017-05-22T22:04:53Z",
      "side": 1,
      "message": "maybe \"a runtime internal (eg. Heap::VisitObjects)\" noting that VisitObject may not be the only thing that may access the allocation stack?",
      "range": {
        "startLine": 1708,
        "startChar": 38,
        "endLine": 1708,
        "endChar": 86
      },
      "revId": "b2398773812e3361576c6497d1b34627d747d1e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57295279_fbf078b4",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 5
      },
      "lineNbr": 1708,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-05-22T22:06:54Z",
      "side": 1,
      "message": "Sure, I will reword it to exactly this.\n\nQuestion: It\u0027s very tricky to access these objects from the runtime side, so I\u0027m not sure anything else (except Heap::VisitObjects) can do it safely? How do we discourage observing the objects from other functions?",
      "parentUuid": "4d390c3a_23ef1d25",
      "range": {
        "startLine": 1708,
        "startChar": 38,
        "endLine": 1708,
        "endChar": 86
      },
      "revId": "b2398773812e3361576c6497d1b34627d747d1e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a986ceae_e93832e0",
        "filename": "runtime/arch/arm64/quick_entrypoints_arm64.S",
        "patchSetId": 5
      },
      "lineNbr": 1708,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2017-05-22T22:26:16Z",
      "side": 1,
      "message": "Sure, there may never be any other that needs to access the allocation stack.\n\nIf you think so, it\u0027s also fine to make this comment specific to Heap::VisitObjects.",
      "parentUuid": "57295279_fbf078b4",
      "range": {
        "startLine": 1708,
        "startChar": 38,
        "endLine": 1708,
        "endChar": 86
      },
      "revId": "b2398773812e3361576c6497d1b34627d747d1e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}