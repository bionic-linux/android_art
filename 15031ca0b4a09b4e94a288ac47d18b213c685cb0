{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "23e7a982_ae80f24f",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 597,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T09:20:46Z",
      "side": 1,
      "message": "Tried using `ScopedArenaUnorderedSet` and the run time was similar so I kept the ordered set.\n\nTried using `ScopedArenaHashSet` and the run time was 2x worse, mainly due to `HashSet::Resize`.",
      "range": {
        "startLine": 597,
        "startChar": 2,
        "endLine": 597,
        "endChar": 16
      },
      "revId": "15031ca0b4a09b4e94a288ac47d18b213c685cb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f95d841_6a32507d",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 597,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T09:35:19Z",
      "side": 1,
      "message": "We could try a `BitVector` indexed by the block id and iterate with\n\n    ArrayRef\u003cHBasicBlock* const\u003e blocks(graph-\u003eGetBlocks());\n    for (uint32_t block_id : blocks_in_try.Indexes()) {\n      HBasicBlock* block \u003d blocks[block_id];\n      ...\n    }",
      "parentUuid": "23e7a982_ae80f24f",
      "range": {
        "startLine": 597,
        "startChar": 2,
        "endLine": 597,
        "endChar": 16
      },
      "revId": "15031ca0b4a09b4e94a288ac47d18b213c685cb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "053ce349_01006444",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 597,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T12:25:13Z",
      "side": 1,
      "message": "Sounds good, it improves run time",
      "parentUuid": "0f95d841_6a32507d",
      "range": {
        "startLine": 597,
        "startChar": 2,
        "endLine": 597,
        "endChar": 16
      },
      "revId": "15031ca0b4a09b4e94a288ac47d18b213c685cb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6218d37_91c48771",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T09:20:46Z",
      "side": 1,
      "message": "Tried using ScopedArenaVector but I was seeing slight regressions in run time.",
      "range": {
        "startLine": 697,
        "startChar": 2,
        "endLine": 697,
        "endChar": 25
      },
      "revId": "15031ca0b4a09b4e94a288ac47d18b213c685cb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff142a8d_d324e252",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T09:35:19Z",
      "side": 1,
      "message": "Did you try `ScopedArenaVector\u003cTryBelongingInformation\u003e` or `ScopedArenaVector\u003cTryBelongingInformation*\u003e`?",
      "parentUuid": "a6218d37_91c48771",
      "range": {
        "startLine": 697,
        "startChar": 2,
        "endLine": 697,
        "endChar": 25
      },
      "revId": "15031ca0b4a09b4e94a288ac47d18b213c685cb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fdc43cb_53c035c1",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-06T12:25:13Z",
      "side": 1,
      "message": "`ScopedArenaVector\u003cstd::optional\u003cTryBelongingInformation\u003e\u003e`, and skipping the `std::nullopt` when iterating. Do you think we could get some benefit by having a pointer to a `TryBelongingInformation`?\n\nAn alternative could be `ScopedArenaVector` combined with `BitVector` for faster iteration. Not sure if it will add too much complexity to the code, could be okay.",
      "parentUuid": "ff142a8d_d324e252",
      "range": {
        "startLine": 697,
        "startChar": 2,
        "endLine": 697,
        "endChar": 25
      },
      "revId": "15031ca0b4a09b4e94a288ac47d18b213c685cb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60a3f8af_0bc4e804",
        "filename": "compiler/optimizing/dead_code_elimination.cc",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-06T12:42:52Z",
      "side": 1,
      "message": "I\u0027d rather keep a single container.\n\nThe `ScopedArenaVector\u003cTryBelongingInformation*\u003e` would use the least memory and may have a better optimized initialization (`memset`?). The `ScopedArenaVector\u003cstd::optional\u003cTryBelongingInformation\u003e\u003e` has a `TryBelongingInformation` allocated for each entry (not just try entry blocks) and the extra boolean for `std::optional` shall most likely be padded to the same size as `TryBelongingInformation*`. The difference in memory usage is likely to affect performance as well.",
      "parentUuid": "6fdc43cb_53c035c1",
      "range": {
        "startLine": 697,
        "startChar": 2,
        "endLine": 697,
        "endChar": 25
      },
      "revId": "15031ca0b4a09b4e94a288ac47d18b213c685cb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}