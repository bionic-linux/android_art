{
  "comments": [
    {
      "key": {
        "uuid": "6869de73_c765de03",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-23T14:30:26Z",
      "side": 1,
      "message": "I think you can remove this check.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 49,
        "endChar": 5
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08722291_f4c01806",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-02-25T16:39:17Z",
      "side": 1,
      "message": "Is it due to we\u0027ll eliminate +0 pattern? I want to keep it just in case.",
      "parentUuid": "6869de73_c765de03",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 49,
        "endChar": 5
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6869de73_e76a62d1",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 489,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-23T14:30:26Z",
      "side": 1,
      "message": "Why does it have to be specific to a loop phi, and on which other block would you call this method? FWIW, I could see this method also useful for:\n\nif (a \u003c 42) {\n  ...\n}",
      "range": {
        "startLine": 484,
        "startChar": 5,
        "endLine": 489,
        "endChar": 7
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a86916a4_3ca51dc6",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 489,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-02-25T16:39:17Z",
      "side": 1,
      "message": "This method is called for such tests to do narrowing. However we require another condition for MonotonicValueRange before we can narrow, the necessity is shown in a new testcase I added.",
      "parentUuid": "6869de73_e76a62d1",
      "range": {
        "startLine": 484,
        "startChar": 5,
        "endLine": 489,
        "endChar": 7
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8df2a7e_22018e2e",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 734,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-23T14:30:26Z",
      "side": 1,
      "message": "Can you add an example of what this is actually fetching?",
      "range": {
        "startLine": 734,
        "startChar": 6,
        "endLine": 734,
        "endChar": 26
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a86916a4_9cd70901",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 734,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-02-25T16:39:17Z",
      "side": 1,
      "message": "I added more comment.\n    // Try to handle (array.length - i) or (array.length + c - i) format.\n    HInstruction* left_of_left;  // left input of left.\n    int32_t right_const \u003d 0;\n    if (ValueBound::IsAddOrSubAConstant(left, \u0026left_of_left, \u0026right_const)) {\n      left \u003d left_of_left;\n    }\n    // The value of left input of the sub equals (left + right_const).",
      "parentUuid": "c8df2a7e_22018e2e",
      "range": {
        "startLine": 734,
        "startChar": 6,
        "endLine": 734,
        "endChar": 26
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8df2a7e_820e9a5a",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 789,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-23T14:30:26Z",
      "side": 1,
      "message": "Ditto. This is for (array.length - 1 ) / 2, right?",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 789,
        "endChar": 26
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a880367a_078b9a00",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 789,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-02-25T16:39:17Z",
      "side": 1,
      "message": "Yes. Added more comments.\n    // Try to handle array.length/2 or (array.length-1)/2 format.\n    HInstruction* left \u003d instruction-\u003eGetLeft();\n    HInstruction* left_of_left;  // left input of left.\n    int32_t c \u003d 0;\n    if (ValueBound::IsAddOrSubAConstant(left, \u0026left_of_left, \u0026c)) {\n      left \u003d left_of_left;\n    }\n    // The value of left input of instruction equals (left + c).",
      "parentUuid": "c8df2a7e_820e9a5a",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 789,
        "endChar": 26
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08c4e2d0_a4964233",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-23T14:30:26Z",
      "side": 1,
      "message": "Should this check be related to an overflow check?",
      "range": {
        "startLine": 793,
        "startChar": 3,
        "endLine": 793,
        "endChar": 42
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a84e7654_f1d02858",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-02-25T16:39:17Z",
      "side": 1,
      "message": "(array_length + 1_or_smaller) / 2_or_bigger) fits value range [INT_MIN, array_length], even if array_length+1 overflows. This is commented at line 798. I moved that comment before 793 to make it more clear.",
      "parentUuid": "08c4e2d0_a4964233",
      "range": {
        "startLine": 793,
        "startChar": 3,
        "endLine": 793,
        "endChar": 42
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6869de73_4a6333f4",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 795,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-23T14:30:26Z",
      "side": 1,
      "message": "Please add an example for this comment.",
      "range": {
        "startLine": 795,
        "startChar": 8,
        "endLine": 795,
        "endChar": 59
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8dbd6ab_a9da9dee",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 6
      },
      "lineNbr": 795,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-02-25T16:39:17Z",
      "side": 1,
      "message": "Changed the comment to:\n        // Make sure for unsigned shift, left side is not negative.\n        // e.g. if array_length is 2, ((array_length - 3) \u003e\u003e\u003e 2) is way bigger\n        // than array_length.",
      "parentUuid": "6869de73_4a6333f4",
      "range": {
        "startLine": 795,
        "startChar": 8,
        "endLine": 795,
        "endChar": 59
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8c06ec1_c36376a3",
        "filename": "test/449-checker-bce/src/Main.java",
        "patchSetId": 6
      },
      "lineNbr": 270,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-02-23T14:30:26Z",
      "side": 1,
      "message": "Why? If the condition as \u0027||\u0027 I would agree, but here it\u0027s \u0027\u0026\u0026\u0027 which ensures i it below the length.",
      "range": {
        "startLine": 269,
        "startChar": 1,
        "endLine": 270,
        "endChar": 44
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a880367a_446da093",
        "filename": "test/449-checker-bce/src/Main.java",
        "patchSetId": 6
      },
      "lineNbr": 270,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2015-02-25T16:39:17Z",
      "side": 1,
      "message": "Let\u0027s say random.nextInt() keeps returning 1 so this if test fails and i goes to INT_MIN due to overflow. Then random.nextInt() returns 0, array[i] will be attempted which will cause AIOOB exception.\n\nThis is an infinite loop so it\u0027s a little contrived. But it shows the point for the necessity of the bounds check.",
      "parentUuid": "e8c06ec1_c36376a3",
      "range": {
        "startLine": 269,
        "startChar": 1,
        "endLine": 270,
        "endChar": 44
      },
      "revId": "97f23da195ed1f54dbe64130dfcdf750db715008",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}