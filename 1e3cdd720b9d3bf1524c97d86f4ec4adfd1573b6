{
  "comments": [
    {
      "key": {
        "uuid": "5520774a_feed70e9",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 8
      },
      "lineNbr": 653,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-08-15T22:54:22Z",
      "side": 1,
      "message": "Is it safe to add \"and updates by other threads are no longer possible\"? If so, please do. Otherwise, we have an issue ...",
      "range": {
        "startLine": 653,
        "startChar": 58,
        "endLine": 653,
        "endChar": 91
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3d68ae5_568c33a7",
        "filename": "runtime/base/mutex.h",
        "patchSetId": 8
      },
      "lineNbr": 653,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-08-16T22:01:38Z",
      "side": 1,
      "message": "I guess we don\u0027t guarantee that it\u0027s not updated by other threads anymore. But since we guarantee the field get is atomic (volatile field get), that should be fine? Need to add more comments on that.",
      "parentUuid": "5520774a_feed70e9",
      "range": {
        "startLine": 653,
        "startChar": 58,
        "endLine": 653,
        "endChar": 91
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0676a836_2a892050",
        "filename": "runtime/class_bitstring_helper.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "Please add the link to the bug explaining those values in the comments.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 27,
        "endChar": 93
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a01e4ebb_cd470737",
        "filename": "runtime/class_bitstring_helper.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-08-16T22:01:38Z",
      "side": 1,
      "message": "Still do we use the value of 64? It\u0027s kind of strange to define bitstring length of 64.",
      "range": {
        "startLine": 27,
        "startChar": 89,
        "endLine": 27,
        "endChar": 91
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78db3196_6bf7e431",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 8
      },
      "lineNbr": 2016,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "Explain why you need to do this.",
      "range": {
        "startLine": 2016,
        "startChar": 4,
        "endLine": 2016,
        "endChar": 79
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "348a027f_67c23fb1",
        "filename": "runtime/instance_of_and_status.h",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "See my previous comment: please add DCHECKS when we are doing these transitions.",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 36,
        "endChar": 20
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47e6bfb0_1c2af3ae",
        "filename": "runtime/instance_of_and_status.h",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "depth\n\nAlso add a comment what \u0027depth\u0027 is.",
      "range": {
        "startLine": 73,
        "startChar": 25,
        "endLine": 73,
        "endChar": 28
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ad9330a_599a7a60",
        "filename": "runtime/mirror/class-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 524,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "Line too long",
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1992d160_c321b67e",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 8
      },
      "lineNbr": 113,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-08-15T22:54:22Z",
      "side": 1,
      "message": "Just rename this to CasInstanceOfAndStatus. I think that\u0027s exactly what it does.",
      "range": {
        "startLine": 113,
        "startChar": 12,
        "endLine": 113,
        "endChar": 37
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8c5d4b0_a4aeccdc",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 8
      },
      "lineNbr": 126,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2017-08-15T22:54:22Z",
      "side": 1,
      "message": "It would be slightly more efficient and much less confusing to just use SetField64Volatile here. The memory ordering could probably be optimized to at most release ordering, but I doubt it matters.",
      "range": {
        "startLine": 125,
        "startChar": 2,
        "endLine": 126,
        "endChar": 3
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "845f3c37_adb68207",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 8
      },
      "lineNbr": 126,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-08-16T22:01:38Z",
      "side": 1,
      "message": "The current code may race between setting status (not holding bitstring lock) and setting bitstring (which holds bitstring lock). So the while loop is necessary. However this form of while loop doesn\u0027t look right since new_value should be recalculated based on the latest GetInstanceOfAndStatus(). There should be a SetStatus() and SetBitstring(), both should do a cas loop.\n\nAnother way that\u0027s simpler is SetInstanceOfAndStatus() always grabs bitstring_lock. Then we can get rid of all the TrySet thing. Just declare SetInstanceOfAndStatus() REQUIRES(bitstring_lock_) and we should be fine. field get should still be volatile since we have a read in IsSubClass() that doesn\u0027t grab lock.",
      "parentUuid": "b8c5d4b0_a4aeccdc",
      "range": {
        "startLine": 125,
        "startChar": 2,
        "endLine": 126,
        "endChar": 3
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3d38ef0_d8d315d5",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 8
      },
      "lineNbr": 338,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-08-16T22:01:38Z",
      "side": 1,
      "message": "I thought it\u0027s assigned/overflowed of internal classes?",
      "range": {
        "startLine": 338,
        "startChar": 12,
        "endLine": 338,
        "endChar": 33
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80d5a09e_f854a985",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 8
      },
      "lineNbr": 631,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "This looks off. Can you avoid it?",
      "range": {
        "startLine": 631,
        "startChar": 44,
        "endLine": 631,
        "endChar": 72
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5f047f3_a33f0c14",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 8
      },
      "lineNbr": 639,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 639,
        "startChar": 37,
        "endLine": 639,
        "endChar": 46
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ae340d6_a6505398",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 8
      },
      "lineNbr": 709,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "Line too long.",
      "range": {
        "startLine": 709,
        "startChar": 0,
        "endLine": 709,
        "endChar": 107
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d0723d7_e05b6546",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 8
      },
      "lineNbr": 709,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-08-16T22:01:38Z",
      "side": 1,
      "message": "Just REQUIERS instead of REQUIRES_SHARED.",
      "range": {
        "startLine": 709,
        "startChar": 67,
        "endLine": 709,
        "endChar": 82
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a945b676_06e83935",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 8
      },
      "lineNbr": 711,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2017-08-15T08:18:35Z",
      "side": 1,
      "message": "drop?",
      "range": {
        "startLine": 711,
        "startChar": 73,
        "endLine": 711,
        "endChar": 83
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64e8c7e2_2bfd1f43",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 8
      },
      "lineNbr": 1540,
      "author": {
        "id": 1043514
      },
      "writtenOn": "2017-08-16T22:01:38Z",
      "side": 1,
      "message": "incremental, which is the term used in method name like GetIncrementalValue().",
      "range": {
        "startLine": 1540,
        "startChar": 64,
        "endLine": 1540,
        "endChar": 73
      },
      "revId": "1e3cdd720b9d3bf1524c97d86f4ec4adfd1573b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}