{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ae9ff877_47fd763e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-04T09:40:34Z",
      "side": 1,
      "message": "I am surprised you could upload this given that there\u0027s no Test description. Does art not require one?\n\nWould you mind adding one?\n\nIf you didn\u0027t run them could you run CtsHiddenApiBlocklist... tests from a build that does not include the changes to the hiddenapi build tool. That way you will ensure that your runtime has the same behavior as the build tool.\n\ne.g. You could build and flash a device with a build including this. Then revert this change and run atest on each of these:\n\nCtsHiddenApiBlocklistCurrentApiTestCases\nCtsHiddenApiBlocklistApi27TestCases\nCtsHiddenApiBlocklistApi28TestCases\nCtsHiddenApiBlocklistDebugClassTestCases\n\nOr you could download CTS from a continuous build and run them from there.",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cab79111_404211fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-02-03T14:44:47Z",
      "side": 1,
      "message": "Well I can\u0027t say I understand all of this, but what I do understand looks good :)\n\nCan we give compat-team@ a heads up, to let them know this is happening?",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a27f27a2_55e9e25f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-03T15:41:03Z",
      "side": 1,
      "message": "tl;dr; Don\u0027t change the behavior of the hiddenapi build tool as part of this change.\n\nThere are a couple of reasons for this:\n\nFirstly, the logic is useful and will save time at runtime. It only causes problems when information is propagated across an APEX boundary, e.g. when private framework implementation code affects the accessibility of otherwise private ART implementation code. Within an APEX it is fine and in fact the bug that originally caused that code to be added to hiddenapi build tool was an issue within what is now the ART APEX.\n\nSecondly, we need it for testing.\n\nI don\u0027t understand the runtime well enough to know whether the changes there will replicate the behavior of the existing build/runtime mechanism. In fact I think it would be really hard to say for certain one way or another simply by inspecting the code. So, I think we need to test this change very well as the last thing we want is a spate of avoidable app compat issues.\n\nAt the moment the hiddenapi runtime behavior is comprehensively tested by various tests in cts/tests/signature/api-check/hidden-api-blocklist*. AIUI they check that every entry in the hiddenapi-flags.csv is accessible or not.\n\nWe need to maintain that level of testing, definitely while changing the runtime behavior and ideally for the future too. Exactly how we go about that in the long term is a discussion for a later date.\n\nIn the short term I think we could split the hiddenapi-flags.csv into two files:\n1) The flags that have to be encoded into the dex file and which should exclude the ones added by the hiddenapi build tool logic that is being reverted here.\n2) The flags that are used at runtime and which should include the ones added by the hiddenapi build tool logic that is being reverted here.\n\nThat way we can use the CTS tests to ensure that this change which switches from build time to runtime checks do not break anything.\n\nRestructuring the build to create the two files is complicated because the changes to the hiddenapi build tool here affect the generation of the hiddenapi-stub-flags.csv file which in turn affects the generation of the per module hiddenapi/flags.csv files and they in turn affect the generation of the hiddenapi-flags.csv. We would either need a parallel and almost duplicate set of build rules (YUCK) or we would need to change the way we generated the per module files to remove dependency on the hiddenapi-stub-flags.csv file (the right way to go but complicated). A lot of work either way.\n\nWhichever approach we take we will still need the logic in the build tool.",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a785998_8d2d37a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-03T15:46:12Z",
      "side": 1,
      "message": "Are you asking for two separate CLs: one for the runtime, and one for the hiddenapi tool?\n\nNote that the runtime change will essentially be a no-op without the hiddenapi change, and the hiddenapi change is needed to test the runtime behavior. So I\u0027m not sure we\u0027re gaining anything from splitting into different Cls.",
      "parentUuid": "a27f27a2_55e9e25f",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24d5d89e_f677b397",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-03T16:09:41Z",
      "side": 1,
      "message": "I don\u0027t think that we should be removing the code from the build tool at all. If we can modularize the generation of the files (so we only use ART build files when building ART) then the code in the build tool is fine as is.\n\nUnderstood about the noop. I think it makes sense for you to remove the code from the hiddenapi build tool when testing locally at least until it is modularized. Just not to upload it.\n\nHave you used any of the CtsHiddenApiBlocklistApi... tests (built on a full platform build without your modifications) to test your changes?",
      "parentUuid": "1a785998_8d2d37a0",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94d19685_dae22852",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-03T16:28:14Z",
      "side": 1,
      "message": "No, the hiddenapi tools needs to be changed - we can\u0027t have different behavior whether the files are prebuilts or not. So we need to remove the behavior of propagating hiddenapi bits up the class hierarchy.",
      "parentUuid": "24d5d89e_f677b397",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d328c3e_9ef4dc58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-03T18:28:07Z",
      "side": 1,
      "message": "The difference in behavior isn\u0027t between prebuilt and source but between whether we build with just ART files or ART plus framework files. So, prebuilts from a restricted ART only build will differ from prebuilts from a full platform build.\n\nThe difference in behavior you are concerned about already exists. Leaving the hiddenapi build tool as it is does not make that worse. I just think that the correct solution is to complete the modularization work.\n\nThat difference in behavior will disappear once we modularize the hiddenapi generation so it is done on a per apex basis. As then the ART boot jars will only be encoded using information collated from ART files. The framework boot jars will only be encoded using publicly visible information from ART plus information collated from framework files. That will be true even in a full platform build.\n\nThe current hiddenapi build tool will be perfectly safe to use in that situation as it will not be propagating information from private framework implementation classes to otherwise private ART implementation classes or vice versa.\n\nPropagating that information within the boundaries of an APEX at build time will save work. Which reminds me have you done any performance testing to see what the impact of your runtime changes are.",
      "parentUuid": "94d19685_dae22852",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3d1dd54_0403dc4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-04T08:58:12Z",
      "side": 1,
      "message": "That code is cold, so performance is not an issue.\n\nLet\u0027s discuss offline - I have real concerns on having and \"blessing\" a tool that behaves differently whether you pass all files or just a subset.",
      "parentUuid": "9d328c3e_9ef4dc58",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c92f009e_240bf4b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-02-04T09:22:47Z",
      "side": 1,
      "message": "FWIW, I\u0027m happy with Pauls proposed approach of leaving the hiddenapi tool as is. Once the hiddenapi  modularization is complete, there will no difference between bundled and unbundled builds anyway.",
      "parentUuid": "b3d1dd54_0403dc4f",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49272fe0_7d7d61ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-05T10:15:58Z",
      "side": 1,
      "message": "I still think for consistency we\u0027ll want that new behavior from the tool - I would even say that the behavior we currently have is broken, in the sense that at method that was denylisted in eg R, can suddenly be in the allowlist just because a subclass ends up inheriting an interface which is part of the SDK.",
      "parentUuid": "c92f009e_240bf4b3",
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c20fcd_2685c9b7",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8955,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-02-03T14:44:47Z",
      "side": 1,
      "message": "IIUC it\u0027s possible for a method to implement more than one interface method. Is that a corner case we should worry about?",
      "range": {
        "startLine": 8955,
        "startChar": 35,
        "endLine": 8955,
        "endChar": 54
      },
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fe3c95b_a4fbd337",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8955,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-02-03T15:41:03Z",
      "side": 1,
      "message": "Your understanding is correct and we probably should worry about it. The build code appears as though it may have but I don\u0027t understand it well enough to know.",
      "parentUuid": "56c20fcd_2685c9b7",
      "range": {
        "startLine": 8955,
        "startChar": 35,
        "endLine": 8955,
        "endChar": 54
      },
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "413fadc0_ba61b2c1",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 4
      },
      "lineNbr": 8955,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-02-05T10:15:58Z",
      "side": 1,
      "message": "Yes indeed, we need to look over all interfaces. Done.",
      "parentUuid": "8fe3c95b_a4fbd337",
      "range": {
        "startLine": 8955,
        "startChar": 35,
        "endLine": 8955,
        "endChar": 54
      },
      "revId": "95c2a46f9e3f28e81542483d9cbe472109cfb4f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}