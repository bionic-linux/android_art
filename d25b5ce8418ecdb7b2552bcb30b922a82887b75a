{
  "comments": [
    {
      "key": {
        "uuid": "7c0657a0_ce9ab74c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 21,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-21T17:46:54Z",
      "side": 1,
      "message": "schedule",
      "range": {
        "startLine": 21,
        "startChar": 61,
        "endLine": 21,
        "endChar": 70
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_9faeb3c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 21,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_ce9ab74c",
      "range": {
        "startLine": 21,
        "startChar": 61,
        "endLine": 21,
        "endChar": 70
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_8e94bf1d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 23,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-21T17:46:54Z",
      "side": 1,
      "message": "schedule",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 52
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_7f0f6f1a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 23,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_8e94bf1d",
      "range": {
        "startLine": 23,
        "startChar": 43,
        "endLine": 23,
        "endChar": 52
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_2ea4b38a",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 12
      },
      "lineNbr": 4798,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-21T17:46:54Z",
      "side": 1,
      "message": "Always false here. (And you\u0027re not actually using the constant division logic in VisitDiv().)",
      "range": {
        "startLine": 4798,
        "startChar": 10,
        "endLine": 4798,
        "endChar": 30
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa024ff6_1c2635de",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 12
      },
      "lineNbr": 4798,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_2ea4b38a",
      "range": {
        "startLine": 4798,
        "startChar": 10,
        "endLine": 4798,
        "endChar": 30
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_8ecb9f3c",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 12
      },
      "lineNbr": 1383,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-21T17:46:54Z",
      "side": 1,
      "message": "MoveBefore(cursor-\u003enext_);",
      "range": {
        "startLine": 1368,
        "startChar": 0,
        "endLine": 1383,
        "endChar": 26
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba129745_9abb6d70",
        "filename": "compiler/optimizing/nodes.cc",
        "patchSetId": 12
      },
      "lineNbr": 1383,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "We cannot simply use MoveBefore for instruction scheduling.\n\nMoveBefore() can support moving an instruction to any position within the whole graph, for example it is used by LICM to hoist instruction out of loop into loop header.\n\nMoveBefore() does CanBeMoved() DCHECK before moving, but this concept is not appropriate for instruction scheduling.\nFor example, HNewArray cannot be moved freely inside the whole graph (like host out of the loop) thus CanBeMoved() returns false for it; but instruction scheduling can move HNewArray inside one basic block.\n\nIâ€™ve introduced LocalMoveAfter() function to allow moving instruction inside basic block without checking CanBeMoved(). \nI think the CanBeMoved() and MoveBefore/After() interfaces need improve to support different optimization requirements.\n\nPlease let me know your opinion on this.",
      "parentUuid": "7c0657a0_8ecb9f3c",
      "range": {
        "startLine": 1368,
        "startChar": 0,
        "endLine": 1383,
        "endChar": 26
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_8ef03f76",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-21T17:46:54Z",
      "side": 1,
      "message": "This has been flagged as a bad merge in PS5 but it\u0027s still here.",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 177,
        "endChar": 12
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daff4b21_3b9457cf",
        "filename": "compiler/optimizing/prepare_for_register_allocation.cc",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "Done.\nI\u0027ve fixed this bad merge in PS15.",
      "parentUuid": "7c0657a0_8ef03f76",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 177,
        "endChar": 12
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1bcbc99_aa882f03",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "remove space",
      "range": {
        "startLine": 47,
        "startChar": 42,
        "endLine": 47,
        "endChar": 43
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da182b71_b37098f4",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1bcbc99_aa882f03",
      "range": {
        "startLine": 47,
        "startChar": 42,
        "endLine": 47,
        "endChar": 43
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "613cf0f2_3f6e4773",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 143,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "return ContainsElement(node-\u003eGetDataPredecessors(), other);",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 143,
        "endChar": 15
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_624a38a2",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 143,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done.\nThe function looks cleaner, thanks.",
      "parentUuid": "613cf0f2_3f6e4773",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 143,
        "endChar": 15
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41b0ccbe_06785a34",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 161,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "return ContainsElement(node-\u003eGetOtherPredecessors(), other);",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 161,
        "endChar": 15
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_424f34b0",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 161,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done.\nThe function looks cleaner, thanks.",
      "parentUuid": "41b0ccbe_06785a34",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 161,
        "endChar": 15
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_aba1097d",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 199,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "Is a trailing separator OK?\n\nI usually do\n\n  const char* separator \u003d \"\";\n  for (...) {\n    stream \u003c\u003c separator \u003c\u003c ...;\n    separator \u003d \",\";\n  }",
      "range": {
        "startLine": 199,
        "startChar": 42,
        "endLine": 199,
        "endChar": 45
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_2254303e",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 199,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done.\nNice suggestion.",
      "parentUuid": "e1c9c045_aba1097d",
      "range": {
        "startLine": 199,
        "startChar": 42,
        "endLine": 199,
        "endChar": 45
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_4bbc25a4",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 225,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "Command line option?",
      "range": {
        "startLine": 225,
        "startChar": 23,
        "endLine": 225,
        "endChar": 46
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_c262241e",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 225,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "I\u0027ve put a TODO in the new patch set.\nI would like visualizer to take care of the cfg and dot graph dumps, and the command line option controls the visualizer dump.\n\nIn the future, I want to move scheduling info into HInstruction, and visualizer knows how to dump scheduling dotty graph based on scheduling info in HInstruction.",
      "parentUuid": "e1c9c045_4bbc25a4",
      "range": {
        "startLine": 225,
        "startChar": 23,
        "endLine": 225,
        "endChar": 46
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_0bc61d36",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 229,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "I don\u0027t like static variables. Can this be supplied externally?",
      "range": {
        "startLine": 229,
        "startChar": 2,
        "endLine": 229,
        "endChar": 38
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_a25f2058",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 229,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done. This static variable is removed in the new patch.",
      "parentUuid": "e1c9c045_0bc61d36",
      "range": {
        "startLine": 229,
        "startChar": 2,
        "endLine": 229,
        "endChar": 38
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_2bcbd93c",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 282,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "Drop the pointer. Just\n\n  initial_candidates.assign(candidates_.begin(), candidates_.end());\n\ninstead of the `new` below.",
      "range": {
        "startLine": 282,
        "startChar": 2,
        "endLine": 282,
        "endChar": 31
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_822c1cca",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 282,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done.\nThere is no more new \u0026 delete in this file now.",
      "parentUuid": "e1c9c045_2bcbd93c",
      "range": {
        "startLine": 282,
        "startChar": 2,
        "endLine": 282,
        "endChar": 31
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1bcbc99_4a973326",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 357,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "This looks like it should be handled by the PopHighestPriorityNode(). (Otherwise the \"random\" scheduler isn\u0027t actually that random.)",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 357,
        "endChar": 3
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_422614e8",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 357,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done.\nYes, I agree that this is a tuning/optimization for materialized condition instructions. I\u0027ve moved it into CriticalPath selector as a heuristic/improvement on selecting the optimal node.\n\nThe scheduler code is kept clean:\nSchedule(graph)\n--\u003e Schedule(block)\n    --\u003e Schedule(SchdulingNode)\n        --\u003e Schedule(HInstruction)",
      "parentUuid": "c1bcbc99_4a973326",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 357,
        "endChar": 3
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "613cf0f2_1f73835d",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 360,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "Maybe `switch (instruction-\u003eGetKind())`?",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_ebacf16e",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 474,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "unsupported instruction set?",
      "range": {
        "startLine": 474,
        "startChar": 48,
        "endLine": 474,
        "endChar": 54
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_222b10b0",
        "filename": "compiler/optimizing/scheduler.cc",
        "patchSetId": 12
      },
      "lineNbr": 474,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1c9c045_ebacf16e",
      "range": {
        "startLine": 474,
        "startChar": 48,
        "endLine": 474,
        "endChar": 54
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_cec5174a",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 120,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "The figure below shows `n1` being selected.",
      "range": {
        "startLine": 120,
        "startChar": 31,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_3f3a07da",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 120,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done. Thanks.",
      "parentUuid": "7c0657a0_cec5174a",
      "range": {
        "startLine": 120,
        "startChar": 31,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_eea7bba4",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 161,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "kArenaAllocScheduling",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 161,
        "endChar": 61
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_c201046f",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 161,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_eea7bba4",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 161,
        "endChar": 61
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf663e5_c69864c6",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 189,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 189,
        "startChar": 2,
        "endLine": 189,
        "endChar": 14
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "011c1460_77978a26",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 196,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "I\u0027d prefer\n\n  ArrayRef\u003cSchedulingNode*\u003e GetDataPredecessors() { ... }\n  ArrayRef\u003cconst SchedulingNode*\u003e GetDataPredecessors() const { ... }",
      "range": {
        "startLine": 196,
        "startChar": 2,
        "endLine": 196,
        "endChar": 53
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2123d89f_359d90a2",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 197,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 197,
        "startChar": 2,
        "endLine": 197,
        "endChar": 54
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c7a1f69_d91437b8",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 203,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "I assume this should not be negative. So, size_t or uint32_t, the latter is preferable to keep compiler memory usage as low as possible. Same for other fields below and setters/getters above.",
      "range": {
        "startLine": 203,
        "startChar": 2,
        "endLine": 203,
        "endChar": 5
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_5f14ab28",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 203,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done.\nWe used to have -1 latency in some very early patch set. Now the algorithm has changed a lot since then, the latency should not be negative. I\u0027ve changed all of them into uint32_t.",
      "parentUuid": "3c7a1f69_d91437b8",
      "range": {
        "startLine": 203,
        "startChar": 2,
        "endLine": 203,
        "endChar": 5
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_8ecf1f68",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 204,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "represents",
      "range": {
        "startLine": 204,
        "startChar": 10,
        "endLine": 204,
        "endChar": 19
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_ff025feb",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 204,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_8ecf1f68",
      "range": {
        "startLine": 204,
        "startChar": 10,
        "endLine": 204,
        "endChar": 19
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_6eb50bd3",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 205,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "zero",
      "range": {
        "startLine": 205,
        "startChar": 18,
        "endLine": 205,
        "endChar": 22
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_dfff9bb5",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 205,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_6eb50bd3",
      "range": {
        "startLine": 205,
        "startChar": 18,
        "endLine": 205,
        "endChar": 22
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41260cae_96ad8cd1",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 213,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "End the sentence with a period.",
      "range": {
        "startLine": 213,
        "startChar": 60,
        "endLine": 213,
        "endChar": 61
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_bf0cd71f",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 213,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41260cae_96ad8cd1",
      "range": {
        "startLine": 213,
        "startChar": 60,
        "endLine": 213,
        "endChar": 61
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf663e5_a68d6882",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 217,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const HInstruction* const",
      "range": {
        "startLine": 217,
        "startChar": 2,
        "endLine": 217,
        "endChar": 15
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1afac331_202b04b0",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 217,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "I have changed it to HInstruction* const, because I think once we have made the HInstruction\u003c-\u003eSchedulingNode binding, it shouldn\u0027t change.\nBut we may still do operations on HInstruction, like schedule/move it inside the basic block.",
      "parentUuid": "dcf663e5_a68d6882",
      "range": {
        "startLine": 217,
        "startChar": 2,
        "endLine": 217,
        "endChar": 15
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_2ebf13b5",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 235,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "I\u0027d go with 4, 2 isn\u0027t worth the reserve() call.",
      "range": {
        "startLine": 235,
        "startChar": 54,
        "endLine": 235,
        "endChar": 55
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3afdc727_de07a53a",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 235,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_2ebf13b5",
      "range": {
        "startLine": 235,
        "startChar": 54,
        "endLine": 235,
        "endChar": 55
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0657a0_0ebc4fbc",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 247,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "kArenaAllocScheduling",
      "range": {
        "startLine": 247,
        "startChar": 35,
        "endLine": 247,
        "endChar": 36
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_a2fe003f",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 247,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0657a0_0ebc4fbc",
      "range": {
        "startLine": 247,
        "startChar": 35,
        "endLine": 247,
        "endChar": 36
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_4b974526",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 263,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 263,
        "startChar": 2,
        "endLine": 263,
        "endChar": 16
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "813d64bf_b082b84b",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 272,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 272,
        "startChar": 59,
        "endLine": 272,
        "endChar": 60
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_9f091310",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 272,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "813d64bf_b082b84b",
      "range": {
        "startLine": 272,
        "startChar": 59,
        "endLine": 272,
        "endChar": 60
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_4b6e6574",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 274,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const SchedulingNode*",
      "range": {
        "startLine": 274,
        "startChar": 34,
        "endLine": 274,
        "endChar": 77
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_a284c09d",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 274,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1c9c045_4b6e6574",
      "range": {
        "startLine": 274,
        "startChar": 34,
        "endLine": 274,
        "endChar": 77
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_6b73215d",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 276,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 276,
        "startChar": 35,
        "endLine": 276,
        "endChar": 78
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_82453c92",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 276,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1c9c045_6b73215d",
      "range": {
        "startLine": 276,
        "startChar": 35,
        "endLine": 276,
        "endChar": 78
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "011c1460_17cbb63c",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 283,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "Do we really need to expose this internal map?",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba129745_7a2c19c9",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 283,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "No we don\u0027t. I\u0027ve removed this function in the new patch.",
      "parentUuid": "011c1460_17cbb63c",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_eba71191",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 302,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 302,
        "startChar": 23,
        "endLine": 302,
        "endChar": 35
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1bcbc99_ca81e3e3",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 304,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 304,
        "startChar": 19,
        "endLine": 304,
        "endChar": 20
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_7ff64fe0",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 304,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1bcbc99_ca81e3e3",
      "range": {
        "startLine": 304,
        "startChar": 19,
        "endLine": 304,
        "endChar": 20
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "813d64bf_907fb481",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 306,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 306,
        "startChar": 17,
        "endLine": 306,
        "endChar": 18
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_5ffb8bc6",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 306,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "813d64bf_907fb481",
      "range": {
        "startLine": 306,
        "startChar": 17,
        "endLine": 306,
        "endChar": 18
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1bcbc99_ea7e271f",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 324,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "OVERRIDE",
      "range": {
        "startLine": 324,
        "startChar": 50,
        "endLine": 324,
        "endChar": 51
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_3ff0c7de",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 324,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1bcbc99_ea7e271f",
      "range": {
        "startLine": 324,
        "startChar": 50,
        "endLine": 324,
        "endChar": 51
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21ad986a_c581dae3",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 351,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "Alternatively, you could let the subclasses hold the container of nodes and have two functions:\n\n  virtual void AddCandidate(SchedulingNode* candidate) \u003d 0;\n  virtual SchedulingNode* PopHighestPriorityCandidate() \u003d 0;\n\n(Return `null` from `PopHighestPriorityCandidate()` to indicate we\u0027re done.; or count the number of scheduled instructions.)\nThat way, each subclass can choose a suitable container, for example a heap with its own comparator.",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "011c1460_d7ac1e6f",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 353,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "`static` instead of `const`; maybe `protected`?\n\n(Unless you take the alternative design above.)",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_825f7c8f",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 353,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done.\nI agree, static should be used here.",
      "parentUuid": "011c1460_d7ac1e6f",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1bcbc99_8a8bebff",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 452,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "Add top-level `const`s.",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 452,
        "endChar": 34
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_1ff503cf",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 452,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1bcbc99_8a8bebff",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 452,
        "endChar": 34
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1c9c045_cbaa555a",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 486,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-24T21:04:59Z",
      "side": 1,
      "message": "const",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_1fa3c3e6",
        "filename": "compiler/optimizing/scheduler.h",
        "patchSetId": 12
      },
      "lineNbr": 486,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-12T15:50:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1c9c045_cbaa555a",
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "411c4caf_a64b66c9",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-25T15:50:31Z",
      "side": 1,
      "message": "\"Float\"? This applies only to float division, right? (Unlike the kArm64MulFloatingPointLatency that applies to both float and double.)",
      "range": {
        "startLine": 39,
        "startChar": 34,
        "endLine": 39,
        "endChar": 47
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aeeb371_81c89a11",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "411c4caf_a64b66c9",
      "range": {
        "startLine": 39,
        "startChar": 34,
        "endLine": 39,
        "endChar": 47
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "411c4caf_264136a7",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-25T15:50:31Z",
      "side": 1,
      "message": "I\u0027d prefer a switch statement.",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 101,
        "endChar": 21
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_3f2687e7",
        "filename": "compiler/optimizing/scheduler_arm64.h",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "Done.\nI also think switch makes the code look cleaner. In previous patch sets, there is a \u0027false\u0027 in the if ()  which looks quite confusing to me.",
      "parentUuid": "411c4caf_264136a7",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 101,
        "endChar": 21
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "617f90e7_07bc16a3",
        "filename": "compiler/optimizing/scheduler_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 112,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-25T15:50:31Z",
      "side": 1,
      "message": "We don\u0027t need a vector here.\n\n    HInstruction* block_instructions[] \u003d {\n        add1,\n        ...\n    };",
      "range": {
        "startLine": 112,
        "startChar": 2,
        "endLine": 112,
        "endChar": 47
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_1f2bc3af",
        "filename": "compiler/optimizing/scheduler_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 112,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "I\u0027d like to keep the std::vector here, because it works really well with ReverseRange(Caintainer\u0026 c). Please see the ReverseRange() call below.\nIf we define it as array here, I think the following code has to write as something like \n ReverseRange\u003cHInstruction*, sizeof(block_instructions)\u003e(block_instructions);\nwhich looks quite awkward.",
      "parentUuid": "617f90e7_07bc16a3",
      "range": {
        "startLine": 112,
        "startChar": 2,
        "endLine": 112,
        "endChar": 47
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17237e9f_352230bc",
        "filename": "compiler/optimizing/scheduler_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 112,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-12-19T18:00:50Z",
      "side": 1,
      "message": "Are you saying that the template argument deduction for the array overload of ReverseRange() fails?",
      "parentUuid": "5af43b41_1f2bc3af",
      "range": {
        "startLine": 112,
        "startChar": 2,
        "endLine": 112,
        "endChar": 47
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "617f90e7_c7275e28",
        "filename": "compiler/optimizing/scheduler_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 140,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-25T15:50:31Z",
      "side": 1,
      "message": "scheduling graph",
      "range": {
        "startLine": 140,
        "startChar": 61,
        "endLine": 140,
        "endChar": 66
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "617f90e7_07e5f6c6",
        "filename": "compiler/optimizing/scheduler_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 143,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-25T15:50:31Z",
      "side": 1,
      "message": "This is ugly. I\u0027m going to add ReverseRange() helper functions to iteration_range.h .",
      "range": {
        "startLine": 141,
        "startChar": 7,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1bb48d0_39fe8ffc",
        "filename": "compiler/optimizing/scheduler_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 143,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-10-25T16:02:49Z",
      "side": 1,
      "message": "https://android-review.googlesource.com/#/c/294269/1/runtime/base/iteration_range.h",
      "parentUuid": "617f90e7_07e5f6c6",
      "range": {
        "startLine": 141,
        "startChar": 7,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af43b41_df3c3bf4",
        "filename": "compiler/optimizing/scheduler_test.cc",
        "patchSetId": 12
      },
      "lineNbr": 143,
      "author": {
        "id": 1096678
      },
      "writtenOn": "2016-12-09T14:07:23Z",
      "side": 1,
      "message": "Done.\nThe new helper functions make code much cleaner. Thanks!",
      "parentUuid": "a1bb48d0_39fe8ffc",
      "range": {
        "startLine": 141,
        "startChar": 7,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "d25b5ce8418ecdb7b2552bcb30b922a82887b75a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}