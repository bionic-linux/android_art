{
  "comments": [
    {
      "key": {
        "uuid": "f2b4c6fd_764710da",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T00:30:36Z",
      "side": 1,
      "message": "pushq \u0026 8?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92870a29_1e87f98f",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:05:10Z",
      "side": 1,
      "message": "Agreed with Mark.",
      "parentUuid": "f2b4c6fd_764710da",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_c3f1854e",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T03:40:14Z",
      "side": 1,
      "message": "Agreed. The macros aren\u0027t currently being used, but they will when I have a working set of library dependencies.",
      "parentUuid": "92870a29_1e87f98f",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_e3e4814d",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:05:10Z",
      "side": 1,
      "message": "pop should also be popq",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_8416e866",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "Offsets are incorrect for 64-bit",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_5c9179c8",
        "filename": "runtime/arch/x86_64/context_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:48:12Z",
      "side": 1,
      "message": "I don\u0027t get why rbx is being \"smashed\". Anyway, rsi, rdi, and r8-r11 are not kept across function calls.",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_10a9a56f",
        "filename": "runtime/arch/x86_64/context_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T03:39:15Z",
      "side": 1,
      "message": "This code is used when quick does a long jump to deliver an exception. In the event that the handler is an upcall into managed code we want to ensure the \"returned value\" (we\u0027re delivering an exception so there isn\u0027t a returned value) is 0. It would suffice to have RAX be zero, on 32bit we needed RAX and RDX. We know no temporary/argument registers are live when doing the exception long jump.",
      "parentUuid": "52811216_5c9179c8",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_c4fbd0e6",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "Missed declaration of some stubs (e.g. GENERATE_ALLOC_ENTRYPOINTS_ALLOC_ARRAY_RESOLVED), cause linker error",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_b6ab5824",
        "filename": "runtime/arch/x86_64/registers_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T00:30:36Z",
      "side": 1,
      "message": "\"rax\"?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_a08d546d",
        "filename": "runtime/arch/x86_64/thread_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "LDT entry related code is non functional in host mode",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_4410e069",
        "filename": "runtime/mirror/object.h",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "This field contains reference to monitor for fat locks. Do you think it could be reasonable to extend it to 64-bit?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_e0835c40",
        "filename": "runtime/mirror/string.h",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "Shouldn\u0027t we change private members of StringClass also?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_d0bb8da2",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T04:10:52Z",
      "side": 1,
      "message": "Is word the right type here?  I can\u0027t easily see the definition.  Also, does it handle compiler temps (not currently used, but...)",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_5025dd37",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T04:25:42Z",
      "side": 1,
      "message": "word is defined to be the size of a pointer, I can imagine it\u0027d be confusing with Intel\u0027s use of word meaning 16bit. I\u0027ll try to think of a more neutral term.",
      "parentUuid": "52811216_d0bb8da2",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92870a29_b290e1f4",
        "filename": "runtime/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T04:10:52Z",
      "side": 1,
      "message": "This seems weird.  Either the DCHECK will fail, or the masking isn\u0027t needed.\n\nIs the mask really needed, since the caller will only reference a uint32_t result?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_10f44568",
        "filename": "runtime/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T04:24:28Z",
      "side": 1,
      "message": "We have code that assumes a pointer as a uint32_t will be in the low 4GB, this is a cast \u0026 mask with a test to make sure the pointer was allocated in low memory.",
      "parentUuid": "92870a29_b290e1f4",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}