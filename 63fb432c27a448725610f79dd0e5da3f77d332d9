{
  "comments": [
    {
      "key": {
        "uuid": "d2b1820e_bbd1079c",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 716,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier",
      "range": {
        "startLine": 716,
        "startChar": 15,
        "endLine": 716,
        "endChar": 26
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_e159267d",
        "filename": "compiler/image_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 726,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier",
      "range": {
        "startLine": 726,
        "startChar": 11,
        "endLine": 726,
        "endChar": 22
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_61463697",
        "filename": "compiler/oat_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Might be worth to assert we have either quick code or portable code, not both ?",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 61
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_7b9b7fea",
        "filename": "compiler/oat_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 488,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Could you add a TODO or remove ?",
      "range": {
        "startLine": 488,
        "startChar": 6,
        "endLine": 488,
        "endChar": 61
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_4027b0c4",
        "filename": "disassembler/disassembler_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Include with \u003c \u003e ?",
      "range": {
        "startLine": 19,
        "startChar": 9,
        "endLine": 19,
        "endChar": 21
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_9993ec90",
        "filename": "runtime/arch/arm/context_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T17:08:31Z",
      "side": 1,
      "message": "Just out of curiosity, what is the lock needed for? Why is there a single mutator lock used everywhere for the runtime?",
      "range": {
        "startLine": 38,
        "startChar": 84,
        "endLine": 38,
        "endChar": 97
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92870a29_15dd17fa",
        "filename": "runtime/arch/arm/context_arm.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T17:29:58Z",
      "side": 1,
      "message": "Its a shared/exclusive lock (reader/writer) with mutators sharing the heap and the GC taking exclusive access during GC pauses. This arrangement avoids the GC busy waiting for mutators to suspend, a source of increased pause time. The lock forms part of the global order (locks.h) where the only thing that matters is we have an order so that we avoid deadlocks. Requiring via static analysis (annotalysis) that the mutator lock is held means that non-runnable threads aren\u0027t mutating the heap, which would break the GC. Having a share of the mutator lock is a proxy for saying the accessing thread is runnable.",
      "parentUuid": "f2b4c6fd_9993ec90",
      "range": {
        "startLine": 38,
        "startChar": 84,
        "endLine": 38,
        "endChar": 97
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_764710da",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T00:30:36Z",
      "side": 1,
      "message": "pushq \u0026 8?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92870a29_1e87f98f",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:05:10Z",
      "side": 1,
      "message": "Agreed with Mark.",
      "parentUuid": "f2b4c6fd_764710da",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_c3f1854e",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T03:40:14Z",
      "side": 1,
      "message": "Agreed. The macros aren\u0027t currently being used, but they will when I have a working set of library dependencies.",
      "parentUuid": "92870a29_1e87f98f",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_e3e4814d",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:05:10Z",
      "side": 1,
      "message": "pop should also be popq",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_8416e866",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "Offsets are incorrect for 64-bit",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_5c9179c8",
        "filename": "runtime/arch/x86_64/context_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:48:12Z",
      "side": 1,
      "message": "I don\u0027t get why rbx is being \"smashed\". Anyway, rsi, rdi, and r8-r11 are not kept across function calls.",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_10a9a56f",
        "filename": "runtime/arch/x86_64/context_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T03:39:15Z",
      "side": 1,
      "message": "This code is used when quick does a long jump to deliver an exception. In the event that the handler is an upcall into managed code we want to ensure the \"returned value\" (we\u0027re delivering an exception so there isn\u0027t a returned value) is 0. It would suffice to have RAX be zero, on 32bit we needed RAX and RDX. We know no temporary/argument registers are live when doing the exception long jump.",
      "parentUuid": "52811216_5c9179c8",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_c4fbd0e6",
        "filename": "runtime/arch/x86_64/quick_entrypoints_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "Missed declaration of some stubs (e.g. GENERATE_ALLOC_ENTRYPOINTS_ALLOC_ARRAY_RESOLVED), cause linker error",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_b6ab5824",
        "filename": "runtime/arch/x86_64/registers_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T00:30:36Z",
      "side": 1,
      "message": "\"rax\"?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_a08d546d",
        "filename": "runtime/arch/x86_64/thread_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "LDT entry related code is non functional in host mode",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_1b50fb47",
        "filename": "runtime/debugger.cc",
        "patchSetId": 2
      },
      "lineNbr": 1084,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Add a TODO to fix thread safety analysis later. I guess it\u0027s due to the template, right?",
      "range": {
        "startLine": 1084,
        "startChar": 4,
        "endLine": 1084,
        "endChar": 29
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_006648fe",
        "filename": "runtime/entrypoints/entrypoint_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 722,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Would be nice to track this in buganizer. Do we have a bug opened?",
      "range": {
        "startLine": 722,
        "startChar": 2,
        "endLine": 722,
        "endChar": 36
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_240ddc4f",
        "filename": "runtime/gc/accounting/mod_union_table.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier",
      "range": {
        "startLine": 85,
        "startChar": 15,
        "endLine": 85,
        "endChar": 26
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_e4837440",
        "filename": "runtime/gc/collector/semi_space.cc",
        "patchSetId": 2
      },
      "lineNbr": 606,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier",
      "range": {
        "startLine": 606,
        "startChar": 47,
        "endLine": 606,
        "endChar": 58
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_5eec3131",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Can we create a method/macro with this code and use it so we do not duplicate code at multiple locations?",
      "range": {
        "startLine": 249,
        "startChar": 17,
        "endLine": 249,
        "endChar": 35
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_249a7ca3",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Use a foreach loop ?",
      "range": {
        "startLine": 532,
        "startChar": 4,
        "endLine": 532,
        "endChar": 66
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_1ef6a901",
        "filename": "runtime/hprof/hprof.cc",
        "patchSetId": 2
      },
      "lineNbr": 558,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Use a foreach loop ?",
      "range": {
        "startLine": 558,
        "startChar": 4,
        "endLine": 558,
        "endChar": 66
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_a4644cf3",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Would be nice to use GetRawData(sizeof(T), 0) to avoid duplicating code. I missed this one when refactoring array for interpreter.",
      "range": {
        "startLine": 124,
        "startChar": 4,
        "endLine": 125,
        "endChar": 38
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_3e104569",
        "filename": "runtime/mirror/array.h",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Same than above.",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 130,
        "endChar": 38
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_de2de1aa",
        "filename": "runtime/mirror/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Why this change?",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 21
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_4048d048",
        "filename": "runtime/mirror/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "This probably will slow down invokes a bit going through this path since we need to do this test each time (plus the extra entrypoint). Wondering what\u0027s the impact here, especially for reflection. Interpreter could be impacted too because transition to compiled code take this route.",
      "range": {
        "startLine": 276,
        "startChar": 10,
        "endLine": 276,
        "endChar": 31
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_00e1a8ed",
        "filename": "runtime/mirror/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Remove extra semi-colon.",
      "range": {
        "startLine": 298,
        "startChar": 76,
        "endLine": 298,
        "endChar": 77
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_5e1af185",
        "filename": "runtime/mirror/art_method.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "I\u0027m pretty sure I\u0027ve already seen this log but I don\u0027t remember where. Is this happening only during compilation?",
      "range": {
        "startLine": 298,
        "startChar": 6,
        "endLine": 298,
        "endChar": 76
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_fe39bdb9",
        "filename": "runtime/mirror/art_method.h",
        "patchSetId": 2
      },
      "lineNbr": 427,
      "author": {
        "id": 1037216
      },
      "writtenOn": "2014-01-30T19:01:10Z",
      "side": 1,
      "message": "Are these uint64_t because of cross-compilation on the host?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_20dca434",
        "filename": "runtime/mirror/art_method.h",
        "patchSetId": 2
      },
      "lineNbr": 430,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Nice renaming! I prefer this one I think.",
      "range": {
        "startLine": 430,
        "startChar": 11,
        "endLine": 430,
        "endChar": 32
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_24c83c8f",
        "filename": "runtime/mirror/dex_cache.h",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Why not uintptr_t ?",
      "range": {
        "startLine": 153,
        "startChar": 2,
        "endLine": 153,
        "endChar": 10
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "929c6a85_4410e069",
        "filename": "runtime/mirror/object.h",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "This field contains reference to monitor for fat locks. Do you think it could be reasonable to extend it to 64-bit?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_be49f582",
        "filename": "runtime/mirror/object_array-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Why changing this line? GetWithoutChecks does this already.",
      "range": {
        "startLine": 58,
        "startChar": 9,
        "endLine": 58,
        "endChar": 54
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_40f690ab",
        "filename": "runtime/mirror/object_array-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Same than above for SetWithoutChecks.",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 54
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_20f384bb",
        "filename": "runtime/mirror/object_array-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "int32_t",
      "range": {
        "startLine": 107,
        "startChar": 9,
        "endLine": 107,
        "endChar": 12
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2b1820e_7e448d65",
        "filename": "runtime/mirror/object_array-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "int32_t",
      "range": {
        "startLine": 161,
        "startChar": 2,
        "endLine": 161,
        "endChar": 5
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_e0835c40",
        "filename": "runtime/mirror/string.h",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1039576
      },
      "writtenOn": "2014-01-30T11:22:35Z",
      "side": 1,
      "message": "Shouldn\u0027t we change private members of StringClass also?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_60c86c62",
        "filename": "runtime/native/java_lang_System.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "Why multiple UNLIKELYs rather than only one? Is the generated code different with this pattern?",
      "range": {
        "startLine": 76,
        "startChar": 6,
        "endLine": 76,
        "endChar": 14
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12a87aa1_e0a23c91",
        "filename": "runtime/profiler.cc",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 1029223
      },
      "writtenOn": "2014-01-30T15:18:12Z",
      "side": 1,
      "message": "As noticed earlier, we should move this to a separate method/macro and use it here.",
      "range": {
        "startLine": 443,
        "startChar": 10,
        "endLine": 443,
        "endChar": 29
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_d0bb8da2",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T04:10:52Z",
      "side": 1,
      "message": "Is word the right type here?  I can\u0027t easily see the definition.  Also, does it handle compiler temps (not currently used, but...)",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_5025dd37",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T04:25:42Z",
      "side": 1,
      "message": "word is defined to be the size of a pointer, I can imagine it\u0027d be confusing with Intel\u0027s use of word meaning 16bit. I\u0027ll try to think of a more neutral term.",
      "parentUuid": "52811216_d0bb8da2",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_33e153ee",
        "filename": "runtime/stack.cc",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T17:08:31Z",
      "side": 1,
      "message": "Yeah, this terminology also confused me when I started looking at quick. Then I realized you use \"word\" to refer to \"doubleword\" :)",
      "parentUuid": "52811216_5025dd37",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92870a29_b290e1f4",
        "filename": "runtime/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T04:10:52Z",
      "side": 1,
      "message": "This seems weird.  Either the DCHECK will fail, or the masking isn\u0027t needed.\n\nIs the mask really needed, since the caller will only reference a uint32_t result?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_10f44568",
        "filename": "runtime/utils.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T04:24:28Z",
      "side": 1,
      "message": "We have code that assumes a pointer as a uint32_t will be in the low 4GB, this is a cast \u0026 mask with a test to make sure the pointer was allocated in low memory.",
      "parentUuid": "92870a29_b290e1f4",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}