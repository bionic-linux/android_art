{
  "comments": [
    {
      "key": {
        "uuid": "f2b4c6fd_764710da",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T00:30:36Z",
      "side": 1,
      "message": "pushq \u0026 8?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92870a29_1e87f98f",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:05:10Z",
      "side": 1,
      "message": "Agreed with Mark.",
      "parentUuid": "f2b4c6fd_764710da",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_e3e4814d",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:05:10Z",
      "side": 1,
      "message": "pop should also be popq",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_5c9179c8",
        "filename": "runtime/arch/x86_64/context_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1013855
      },
      "writtenOn": "2014-01-30T02:48:12Z",
      "side": 1,
      "message": "I don\u0027t get why rbx is being \"smashed\". Anyway, rsi, rdi, and r8-r11 are not kept across function calls.",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52811216_10a9a56f",
        "filename": "runtime/arch/x86_64/context_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-01-30T03:39:15Z",
      "side": 1,
      "message": "This code is used when quick does a long jump to deliver an exception. In the event that the handler is an upcall into managed code we want to ensure the \"returned value\" (we\u0027re delivering an exception so there isn\u0027t a returned value) is 0. It would suffice to have RAX be zero, on 32bit we needed RAX and RDX. We know no temporary/argument registers are live when doing the exception long jump.",
      "parentUuid": "52811216_5c9179c8",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 36
      },
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b4c6fd_b6ab5824",
        "filename": "runtime/arch/x86_64/registers_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1036869
      },
      "writtenOn": "2014-01-30T00:30:36Z",
      "side": 1,
      "message": "\"rax\"?",
      "revId": "63fb432c27a448725610f79dd0e5da3f77d332d9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}