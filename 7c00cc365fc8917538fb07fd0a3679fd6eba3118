{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a48e4752_e50bcba9",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-18T21:59:03Z",
      "side": 1,
      "message": "Could you add a comment about what Updateable means?",
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b1f59ed_c40a9819",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T22:28:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a48e4752_e50bcba9",
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f670406e_67094853",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 2
      },
      "lineNbr": 980,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-18T21:59:03Z",
      "side": 1,
      "message": "Can this be const?\n\nIf so, the whole function could probably be constexpr.",
      "range": {
        "startLine": 980,
        "startChar": 54,
        "endLine": 980,
        "endChar": 67
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac2f9f20_6d333b09",
        "filename": "compiler/optimizing/reference_type_propagation.cc",
        "patchSetId": 2
      },
      "lineNbr": 980,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T22:28:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f670406e_67094853",
      "range": {
        "startLine": 980,
        "startChar": 54,
        "endLine": 980,
        "endChar": 67
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0e8a1a8_56edd465",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-18T21:59:03Z",
      "side": 1,
      "message": "Could this include go in the .cc file instead? It doesn\u0027t seem to be used here. Or is this from IWYU?",
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "520f748a_98463e0c",
        "filename": "compiler/optimizing/reference_type_propagation.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T22:28:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0e8a1a8_56edd465",
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "680d7569_f95a88ae",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-18T21:59:03Z",
      "side": 1,
      "message": "Could you add a comment about what this test does or how it works?",
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02ec50a5_440e3d51",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T22:28:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "680d7569_f95a88ae",
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b42454e_087ab606",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-18T21:59:03Z",
      "side": 1,
      "message": "I\u0027d use an explicit seed here (although there\u0027s a reasonable chance there\u0027s a fixed seed already). Otherwise, if this test ever fails it\u0027s going to be a pain to debug.\n\nIt may not hurt to run a few iterations of shuffling and running the test to get better coverage of weird orderings.",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b450317a_90520d28",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-18T22:28:40Z",
      "side": 1,
      "message": "Honestly no matter how this test fails it\u0027s going to be a pain to debug.\n\nYou can set the gtest random seed by passing `--no_isolate --gtest_random_seed\u003d\u003cnumber\u003e` so it should be easily repeatable at least.\n\nWe can\u0027t run it again without re-running everything.\n\nThis is mostly just here as a final sanity check.",
      "parentUuid": "4b42454e_087ab606",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a11a22b3_164fa03c",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-23T20:56:42Z",
      "side": 1,
      "message": "If I run the test and it fails, do I also get the seed that caused it to fail? `--gtest_random_seed` seems helpful, since we can control the seed ahead of time, but I also want to make sure that if we run this and it fails randomly that we can immediately re-run it with the same seed so that it will fail in the same way. Otherwise, we don\u0027t know if we fixed the bug or are just continuing to get lucky.",
      "parentUuid": "b450317a_90520d28",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8590f4b9_5a7d75bf",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-11-23T21:04:53Z",
      "side": 1,
      "message": "Nope. Honestly this is mostly just a basic test. I expect that if this starts failing it will fail on almost all configurations.",
      "parentUuid": "a11a22b3_164fa03c",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4a15fd4_00284ab5",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-11-23T21:25:06Z",
      "side": 1,
      "message": "Do you mean the other tests will start failing too? If so, does this test add any additional value? Or do you mean every permutation would fail?\n\nI like the idea of a random test to catch corner cases we didn\u0027t expect. I just worry that someday this will fail in TreeHugger and we\u0027ll have no way to figure out what went wrong. It could end up just being an inherently flaky test.",
      "parentUuid": "8590f4b9_5a7d75bf",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81290f83_5ceb7776",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-08T01:27:39Z",
      "side": 1,
      "message": "I agree that is a bit of a concern but for this case at least I think there is little risk of that and the benefits it gives outweigh that tiny risk.",
      "parentUuid": "f4a15fd4_00284ab5",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e74679c0_811867d2",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-12-08T20:22:33Z",
      "side": 1,
      "message": "What about adding a call to std::srand() at the beginning to make the test deterministic? Would that lose too much testing coverage?\n\nAlternatively, maybe this is something that should be a fuzzer instead.",
      "parentUuid": "81290f83_5ceb7776",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4590c65_d5a57806",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-09T16:36:48Z",
      "side": 1,
      "message": "I guess we could. I really don\u0027t think this is dangerous. I mostly added the test just because it\u0027s easy.\n\nIf you want I can remove it.",
      "parentUuid": "e74679c0_811867d2",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "845cd674_ff0c9dd8",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-12-09T22:38:51Z",
      "side": 1,
      "message": "Randomness removed.\n\nI honestly think this is a pretty clear case where we should allow it though.",
      "parentUuid": "b4590c65_d5a57806",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6845a85_cf62926f",
        "filename": "compiler/optimizing/reference_type_propagation_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1335232
      },
      "writtenOn": "2020-12-09T23:43:07Z",
      "side": 1,
      "message": "Thanks. I created http://b/175248896 about fuzz testing ART and added this as an example where fuzzing would make sense, so maybe we can add the truly random version at some point too.",
      "parentUuid": "845cd674_ff0c9dd8",
      "range": {
        "startLine": 275,
        "startChar": 31,
        "endLine": 275,
        "endChar": 42
      },
      "revId": "7c00cc365fc8917538fb07fd0a3679fd6eba3118",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}