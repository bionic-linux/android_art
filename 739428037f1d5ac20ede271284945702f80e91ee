{
  "comments": [
    {
      "key": {
        "uuid": "45ccfade_d81e2c6d",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3395,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-09-18T18:38:03Z",
      "side": 1,
      "message": "Should this also mention kVarHandleGetAcquire?",
      "range": {
        "startLine": 3394,
        "startChar": 10,
        "endLine": 3395,
        "endChar": 67
      },
      "revId": "739428037f1d5ac20ede271284945702f80e91ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c59345f9_437e3d5f",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3395,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-19T13:12:08Z",
      "side": 1,
      "message": "I think not. For getAcquire, the VarHandle documentation only guarantees the memory access is not reordered (https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html#getAcquire-java.lang.Object...-) but doesn\u0027t seem to guarantee atomicity.",
      "parentUuid": "45ccfade_d81e2c6d",
      "range": {
        "startLine": 3394,
        "startChar": 10,
        "endLine": 3395,
        "endChar": 67
      },
      "revId": "739428037f1d5ac20ede271284945702f80e91ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11252a3a_1f67de77",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3395,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-09-19T21:44:05Z",
      "side": 1,
      "message": "There\u0027s a better description by the author at http://gee.cs.oswego.edu/dl/html/j9mm.html .\n\nAcquire is definitely intended to guarantee bitwise atomicity, As the above document says, it\u0027s strictly stronger than Opaque.\n\nThe ordering actually doesn\u0027t make too much sense without the bitwise atomicity, but that\u0027s a longer discussion. Acquire and Volatile are basically C++ memory_order_acquire and memory_order_seq_cst. Plain and Opaque are a bit stronger than non-atomic and memory_order_relaxed accesses in C++, respectively. The specifications here are not always as clear as they should be.",
      "parentUuid": "c59345f9_437e3d5f",
      "range": {
        "startLine": 3394,
        "startChar": 10,
        "endLine": 3395,
        "endChar": 67
      },
      "revId": "739428037f1d5ac20ede271284945702f80e91ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74a87b7f_9bd22acd",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3395,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-20T08:50:24Z",
      "side": 1,
      "message": "You are right, I wasn\u0027t aware for that documentation. getAcquire needs to be included there. I fixed the condition. And this also means that setRelease has to be treated in the same way. I will upload a CL for fixing setRelease too.\n\nThank you for drawing my attention!",
      "parentUuid": "11252a3a_1f67de77",
      "range": {
        "startLine": 3394,
        "startChar": 10,
        "endLine": 3395,
        "endChar": 67
      },
      "revId": "739428037f1d5ac20ede271284945702f80e91ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3d48bc5_b6359488",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3448,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2020-09-18T18:38:03Z",
      "side": 1,
      "message": "Same question here.",
      "range": {
        "startLine": 3447,
        "startChar": 14,
        "endLine": 3448,
        "endChar": 70
      },
      "revId": "739428037f1d5ac20ede271284945702f80e91ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0801d948_90c0fad5",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3448,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-20T08:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3d48bc5_b6359488",
      "range": {
        "startLine": 3447,
        "startChar": 14,
        "endLine": 3448,
        "endChar": 70
      },
      "revId": "739428037f1d5ac20ede271284945702f80e91ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}