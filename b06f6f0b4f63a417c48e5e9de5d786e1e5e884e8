{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "011ca4f4_749ab522",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-11T14:54:17Z",
      "side": 1,
      "message": "We have several tests e.g. https://cs.android.com/android/platform/superproject/+/master:art/test/2230-profile-save-hotness/src-art/Main.java;drc\u003d61673dc4bdee2fa4770ee72fbc347cca595dd231 which use indent of 2 instead of 4. If we change something in those files are we going to get a huge diff?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6a98de9_6adede48",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T15:14:19Z",
      "side": 1,
      "message": "Yes, I noticed that too. At first I was going for a separate .clang-format in test/ to adapt better to the style there, but then I noticed there\u0027s a mix of 2 and 4 indents so I gave up on that.\n\nclang-format should only fix the lines that change, so I think it\u0027ll effectively adapt to the 2 space indent for small changes. For larger changes I suppose it\u0027d start producing a mix of 2 and 4 spaces.\n\nBut I don\u0027t know very well how it behaves in those situations. WDYT about giving this a go and see what it does? In the worst case we\u0027ll have to figure out a way to exclude the tests directory (path exclusions aren\u0027t as simple as I thought, but it\u0027s always possible to resort to some wrapper shell script).\n\nOr else just take the plunge and reformat the 2 space indent files to comply.",
      "parentUuid": "011ca4f4_749ab522",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7b94df0_fadec769",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-11T15:31:45Z",
      "side": 1,
      "message": "I ran `clang-format -i art/test/2230-profile-save-hotness/src-art/Main.java` without any change to the test itself and it formatted the whole file. Maybe the repo hook is smart enough to know the file hasn\u0027t changed. Otherwise, we are not going to be able to submit anything before all tests have been properly formatted.\n\nMy concern about reformatting everything is that the CL would be huge and it could be easy to miss an unwanted misformat.\n\n@vmarko@google.com any thoughts on making a reformat of our .java files in art/test to comply with clang-format?",
      "parentUuid": "e6a98de9_6adede48",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef3a914_3c664b83",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T15:42:35Z",
      "side": 1,
      "message": "Yes, clang-format itself doesn\u0027t know about diffs, it\u0027s `git clang-format` that does. To try it out create a commit with some change and do `git clang-format HEAD^`.",
      "parentUuid": "c7b94df0_fadec769",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70439a54_ed41bdf2",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-11T15:49:46Z",
      "side": 1,
      "message": "I patched your CL, modified `art/test/2230-profile-save-hotness/src-art/Main.java`, created a new commit on top of that and ran `git clang-format HEAD^`.\n\nDepending on what I add/modify in that file, the file gets formatted with 2 spaces or 4. For example, modifying a long line gave me a 4 space line, but adding a new line only got 2 spaces. Not sure how it decided which one to use.\n\nDepending on how many tests we would need to reformat I\u0027d rather do that in one go to avoid spacing inconsistencies within files in the future.",
      "parentUuid": "fef3a914_3c664b83",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc23d829_301969c9",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T19:06:36Z",
      "side": 1,
      "message": "Fair enough. Ideally we\u0027d do a reformat that solely changes indent, leaving everything else. With the right option in Gerrit it\u0027d be easy to review. Unfortunately I don\u0027t know of a formatter that works that way.\n\nThe other option is to reformat all the test java files, run the tests, and otherwise trust clang-format to not do anything bad.\n\nI took a quick look through a reformat and added a few more exceptions. A CL that actually does the reformat is better to submit separately, without any other changes: https://r.android.com/2300758 While doing it I noticed that clang-format is inconsistent in some cases. ðŸ˜ž",
      "parentUuid": "70439a54_ed41bdf2",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfbfb615_c125e837",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-14T09:24:47Z",
      "side": 1,
      "message": "Oh wow, that change is huge too (+139198, -138189). Not sure if it is worth it. A possible alternative could be to create different CLs sharded by the last two digits so that reviewing the changes is humanly doable. If enough folks in the team want to review it maybe we can spread it over some days. For example: 5 people, 20 shards each, a bot generates a CL every working day and we take ~1 months to format everything. Again, not sure it\u0027s worth it for the formatting consistency.\n\nI think we might be okay with landing the clang-format change and we can tackle art/test when we modify those files or create new ones.",
      "parentUuid": "bc23d829_301969c9",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a84b993b_c7212b5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T13:13:35Z",
      "side": 1,
      "message": "Feel free to point out more places I should exclude right away.",
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}