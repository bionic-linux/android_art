{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "011ca4f4_749ab522",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-11T14:54:17Z",
      "side": 1,
      "message": "We have several tests e.g. https://cs.android.com/android/platform/superproject/+/master:art/test/2230-profile-save-hotness/src-art/Main.java;drc\u003d61673dc4bdee2fa4770ee72fbc347cca595dd231 which use indent of 2 instead of 4. If we change something in those files are we going to get a huge diff?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6a98de9_6adede48",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T15:14:19Z",
      "side": 1,
      "message": "Yes, I noticed that too. At first I was going for a separate .clang-format in test/ to adapt better to the style there, but then I noticed there\u0027s a mix of 2 and 4 indents so I gave up on that.\n\nclang-format should only fix the lines that change, so I think it\u0027ll effectively adapt to the 2 space indent for small changes. For larger changes I suppose it\u0027d start producing a mix of 2 and 4 spaces.\n\nBut I don\u0027t know very well how it behaves in those situations. WDYT about giving this a go and see what it does? In the worst case we\u0027ll have to figure out a way to exclude the tests directory (path exclusions aren\u0027t as simple as I thought, but it\u0027s always possible to resort to some wrapper shell script).\n\nOr else just take the plunge and reformat the 2 space indent files to comply.",
      "parentUuid": "011ca4f4_749ab522",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7b94df0_fadec769",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-11T15:31:45Z",
      "side": 1,
      "message": "I ran `clang-format -i art/test/2230-profile-save-hotness/src-art/Main.java` without any change to the test itself and it formatted the whole file. Maybe the repo hook is smart enough to know the file hasn\u0027t changed. Otherwise, we are not going to be able to submit anything before all tests have been properly formatted.\n\nMy concern about reformatting everything is that the CL would be huge and it could be easy to miss an unwanted misformat.\n\n@vmarko@google.com any thoughts on making a reformat of our .java files in art/test to comply with clang-format?",
      "parentUuid": "e6a98de9_6adede48",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef3a914_3c664b83",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T15:42:35Z",
      "side": 1,
      "message": "Yes, clang-format itself doesn\u0027t know about diffs, it\u0027s `git clang-format` that does. To try it out create a commit with some change and do `git clang-format HEAD^`.",
      "parentUuid": "c7b94df0_fadec769",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70439a54_ed41bdf2",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-11T15:49:46Z",
      "side": 1,
      "message": "I patched your CL, modified `art/test/2230-profile-save-hotness/src-art/Main.java`, created a new commit on top of that and ran `git clang-format HEAD^`.\n\nDepending on what I add/modify in that file, the file gets formatted with 2 spaces or 4. For example, modifying a long line gave me a 4 space line, but adding a new line only got 2 spaces. Not sure how it decided which one to use.\n\nDepending on how many tests we would need to reformat I\u0027d rather do that in one go to avoid spacing inconsistencies within files in the future.",
      "parentUuid": "fef3a914_3c664b83",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc23d829_301969c9",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T19:06:36Z",
      "side": 1,
      "message": "Fair enough. Ideally we\u0027d do a reformat that solely changes indent, leaving everything else. With the right option in Gerrit it\u0027d be easy to review. Unfortunately I don\u0027t know of a formatter that works that way.\n\nThe other option is to reformat all the test java files, run the tests, and otherwise trust clang-format to not do anything bad.\n\nI took a quick look through a reformat and added a few more exceptions. A CL that actually does the reformat is better to submit separately, without any other changes: https://r.android.com/2300758 While doing it I noticed that clang-format is inconsistent in some cases. ðŸ˜ž",
      "parentUuid": "70439a54_ed41bdf2",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfbfb615_c125e837",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-14T09:24:47Z",
      "side": 1,
      "message": "Oh wow, that change is huge too (+139198, -138189). Not sure if it is worth it. A possible alternative could be to create different CLs sharded by the last two digits so that reviewing the changes is humanly doable. If enough folks in the team want to review it maybe we can spread it over some days. For example: 5 people, 20 shards each, a bot generates a CL every working day and we take ~1 months to format everything. Again, not sure it\u0027s worth it for the formatting consistency.\n\nI think we might be okay with landing the clang-format change and we can tackle art/test when we modify those files or create new ones.",
      "parentUuid": "bc23d829_301969c9",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1992f7f5_7eee9044",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-14T09:57:03Z",
      "side": 1,
      "message": "Please shard the changes. I\u0027ll review with \"Ignore leading and trailing whitespace\".\n\nWhy does it remove line breaks?\n\nhttps://android-review.git.corp.google.com/c/platform/art/+/2300758/1/test/162-method-resolution/src/Test2Base.java\n\nI think the reformatting should not take `AllowShortFunctionsOnASingleLine: Inline` as a license to reformat otherwise well-formatted code. (It\u0027s \"Allow\", not \"Force\".)",
      "parentUuid": "dfbfb615_c125e837",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d95c3c29_71d63b85",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-14T11:46:53Z",
      "side": 1,
      "message": "I found that the reformatting breaks line numbers in a lot of canned expected outputs, so something that only changes indentation would really be preferable. I looked around a little for such a tool, but couldn\u0027t find anything. Maybe an IDE like VSCode could help, but I don\u0027t use that.\n\nThen I think I\u0027ll come up with a way to exclude test/ instead, for now at least.\n\n\u003e I think the reformatting should not take AllowShortFunctionsOnASingleLine: Inline as a license to reformat otherwise well-formatted code. (It\u0027s \"Allow\", not \"Force\".)\n\nAccording to the [docs](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) there\u0027s no \"leave as-is\" option. Keep in mind that the point with clang-format is to be opinionated and resolve most formatting differences one way or the other. But I agree the name gives a different impression and that it could be better.",
      "parentUuid": "bc23d829_301969c9",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fb10d4c_e0e36b92",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-14T12:42:46Z",
      "side": 1,
      "message": "Find tests to process from a given shard with something like\n\n    git grep -E \u0027^  public static void main\\(String\\[\\]\u0027 -- \\\n       test/*42-*/src/Main.java | sed \u0027-es/\\/src\\/Main.java:.*//\u0027\n\nThen process indentation in their java files with\n   \n    sed -E \u0027-es/^((  )+)/\\1\\1/\u0027 --in-place \u003cfilename\u003e\n\nSomething like\n\n    for t in `\u003cfind-tests\u003e`; do find $t/ -name *.java | xargs \u003cindent\u003e; done\n\nwith the above commands inserted should take care of indentation changes.\n\n(Though this shall not work well for tests that have java files with mixed indentation.)\n\nWhen you create a commit, check for long lines with\n\n    git log -n1 -p | grep -E \u0027^\\+.{101}\u0027",
      "parentUuid": "d95c3c29_71d63b85",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7be30bde_4d237659",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-14T13:02:54Z",
      "side": 1,
      "message": "Shard *16: https://android-review.googlesource.com/2300941",
      "parentUuid": "2fb10d4c_e0e36b92",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1fec1e7_a5daf7c1",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-14T15:40:28Z",
      "side": 1,
      "message": "That won\u0027t deal with statement continuations correctly, e.g.\n\n```\n      System.out.println(clazz + \".\" + method_name +\n          \" doesn\u0027t have single implementation value of \" + b);\n```\n\nwill get the 2nd line indented differently compared to the previous one depending on the indentation of the whole statement. However, since Java afaik doesn\u0027t use the C++ style of aligning arguments etc with the opening parenthesis (which can easily create very deep indentation), it probably doesn\u0027t get too ugly. It\u0027d still be inconsistent though, so later clang-format runs may reformat them to some extent.\n\nThere\u0027s also the risk with multiline string literals, but given that they are fairly recent (JDK 13) it may be safe to assume no test files use them.\n\nPersonally I\u0027m fine with your approach, but I don\u0027t regard myself as the main audience of these files.\n\nI\u0027d prefer significantly less shards though, or even just one huge CL - I\u0027d only check with ignore indent diffing and rubber stamp (if it\u0027s too large for Gerrit I\u0027d download and diff locally). I don\u0027t see the point with going through the change more than that, but maybe I\u0027m missing something.",
      "parentUuid": "7be30bde_4d237659",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc8e892c_ac229b79",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-14T16:01:14Z",
      "side": 1,
      "message": "What\u0027s the correct indentation for multi-line `if`? https://android-review.git.corp.google.com/c/platform/art/+/2300941/3/test/1916-get-set-current-frame/src/art/Test1916.java#130\n\nWhat\u0027s the correct indentation for method arguments on the next line? https://android-review.git.corp.google.com/c/platform/art/+/2300941/3/test/1916-get-set-current-frame/src/art/Test1916.java#136 (In C++ we use double the base indentation, so should this be 8, or should it be just 4?)\n\nI think I may need to make some corrections now that the CL has been merged.",
      "parentUuid": "d1fec1e7_a5daf7c1",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fce3e866_284eddd4",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-11-14T16:04:28Z",
      "side": 1,
      "message": "It seems that the indentation in the merged CL agrees with https://android-review.git.corp.google.com/c/platform/art/+/2300758/1/test/1916-get-set-current-frame/src/art/Test1916.java (but the multi-line `if` has line breaks at different positions).",
      "parentUuid": "fc8e892c_ac229b79",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b025e1ac_4b3f80cd",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-14T16:22:05Z",
      "side": 1,
      "message": "\u003e What\u0027s the correct indentation for multi-line if?\n\nWe have `ContinuationIndentWidth: 8`, but I\u0027m not sure that there isn\u0027t some other setting that takes precedence. I\u0027d say the right answer is \"whatever clang-format does on that line\".\n\nIf you correct them in a separate CL, just do some dummy change on those lines, e.g. remove all indentation, submit, and `git clang-format HEAD^`(*). clang-format should correct the indentation on the changed lines only, however it may also decide to break them differently.\n\n*) `git clang-format --force` should work as an alternative to submit + `git clang-format HEAD^`.",
      "parentUuid": "fce3e866_284eddd4",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d64a5a3_9fb379c3",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-21T14:05:14Z",
      "side": 1,
      "message": "I\u0027ve excluded the tests directory for now.\n\nI noticed two other directories in tools/ with 2 space indent, so I created another style for that and symlinked it to local .clang-format\u0027s for them.\n\nWe could do a similar thing for run tests. It\u0027d be quite a few symlinks, but easy enough to add with a script. WDYT? If that\u0027s ok I can fix it that way in a follow-up CL.",
      "parentUuid": "b025e1ac_4b3f80cd",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c13f0c4e_a691f9a3",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-22T16:50:15Z",
      "side": 1,
      "message": "Santiago, any thoughts?",
      "parentUuid": "4d64a5a3_9fb379c3",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5df825c6_892ecf57",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-22T17:12:19Z",
      "side": 1,
      "message": "Sorry I missed this.\n\n\u003e I\u0027ve excluded the tests directory for now.\n\nThen can we remove the clang-format off in the test files in this CL?\n\n\u003e We could do a similar thing for run tests. It\u0027d be quite a few symlinks, but easy enough to add with a script. WDYT? If that\u0027s ok I can fix it that way in a follow-up CL.\n\nWe can leave that as a follow-up CL. I think that we should have consistent spacing in tests (2, 4, whatever but consistent) so I am not too sure that having two formatters for our tests make sense. I don\u0027t want the tests to block the formatter for the rest of the code so I think we can land this CL.",
      "parentUuid": "c13f0c4e_a691f9a3",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b26183c1_4d156395",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-22T18:05:25Z",
      "side": 1,
      "message": "\u003e Then can we remove the clang-format off in the test files in this CL?\n\nI opted to leave them in since they\u0027re still useful if anyone would want to run clang-format in some way on those files - the excludes aren\u0027t dependent on the clang-format style.\n\n\u003e I think that we should have consistent spacing in tests (2, 4, whatever but consistent) so I am not too sure that having two formatters for our tests make sense.\n\nNo doubt everyone would agree that making the tests consistent would be the best, but that\u0027s a lot of work. In the meantime it\u0027s either that or leaving out tests/ altogether. Neither fixes the problem with the inconsistencies, but at least with the symlinks you\u0027d get clang-format for new tests, and it wouldn\u0027t preclude anyone from working on reformatting the 2 space indent files to gradually whittle them down and remove the symlinks.",
      "parentUuid": "5df825c6_892ecf57",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c3402a5_46976ce1",
        "filename": ".clang-format",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2022-11-23T09:27:23Z",
      "side": 1,
      "message": "Ack. I\u0027d leave the symlinks for a follow-up though.",
      "parentUuid": "b26183c1_4d156395",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a84b993b_c7212b5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-11-11T13:13:35Z",
      "side": 1,
      "message": "Feel free to point out more places I should exclude right away.",
      "revId": "b06f6f0b4f63a417c48e5e9de5d786e1e5e884e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}