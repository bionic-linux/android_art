{
  "comments": [
    {
      "key": {
        "uuid": "3dd20dcb_63d81fbd",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 9028,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-18T14:03:23Z",
      "side": 1,
      "message": "This check is repeated four times for different arches, may be worth deduplicating.",
      "range": {
        "startLine": 9023,
        "startChar": 0,
        "endLine": 9028,
        "endChar": 7
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04b1b022_06c0e18c",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 9028,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-18T14:10:41Z",
      "side": 1,
      "message": "OK, I\u0027ll deduplicate by creating a helper template, I was thinking about doing that anyway. But note that the GetCriticalNativeDirectCallFrameSize() actually comes from 4 different namespaces, namely art::arm, art::arm64, art::x86 and art::x86_64.",
      "parentUuid": "3dd20dcb_63d81fbd",
      "range": {
        "startLine": 9023,
        "startChar": 0,
        "endLine": 9028,
        "endChar": 7
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26857dcb_03770d9f",
        "filename": "compiler/optimizing/code_generator_arm_vixl.cc",
        "patchSetId": 18
      },
      "lineNbr": 9028,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-18T14:56:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04b1b022_06c0e18c",
      "range": {
        "startLine": 9023,
        "startChar": 0,
        "endLine": 9028,
        "endChar": 7
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a632116d_6b6b67ab",
        "filename": "runtime/arch/x86/asm_support_x86.S",
        "patchSetId": 18
      },
      "lineNbr": 201,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-18T16:00:11Z",
      "side": 1,
      "message": "Same comment about LITERAL vs MACRO_LITERAL.",
      "range": {
        "startLine": 201,
        "startChar": 9,
        "endLine": 201,
        "endChar": 16
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb40cf9_f8260fb3",
        "filename": "runtime/arch/x86/asm_support_x86.S",
        "patchSetId": 18
      },
      "lineNbr": 201,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-18T16:17:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a632116d_6b6b67ab",
      "range": {
        "startLine": 201,
        "startChar": 9,
        "endLine": 201,
        "endChar": 16
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "856a0488_17a7b4e4",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 18
      },
      "lineNbr": 216,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-18T16:00:11Z",
      "side": 1,
      "message": "You don\u0027t care about the distinction between LITERAL and MACRO_LITERAL here and in DECREASE_FRAME (do we still build on __APPLE__)? If not, maybe get rid of MACRO_LITERAL in a follow-up CL?",
      "range": {
        "startLine": 216,
        "startChar": 9,
        "endLine": 216,
        "endChar": 16
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3856e817_07654ae7",
        "filename": "runtime/arch/x86_64/asm_support_x86_64.S",
        "patchSetId": 18
      },
      "lineNbr": 216,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-18T16:17:54Z",
      "side": 1,
      "message": "Done. (Nice catch! I don\u0027t want to see a revert because of a broken Mac build.)",
      "parentUuid": "856a0488_17a7b4e4",
      "range": {
        "startLine": 216,
        "startChar": 9,
        "endLine": 216,
        "endChar": 16
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b73a5fd_2e307cdd",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 18
      },
      "lineNbr": 305,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-18T16:00:11Z",
      "side": 1,
      "message": "Could atomics have different alignment guarantees?\nQuick search found http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4013.html by Hans, but it\u0027s old.",
      "range": {
        "startLine": 305,
        "startChar": 6,
        "endLine": 305,
        "endChar": 83
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bfe01a6_fe8714b4",
        "filename": "runtime/entrypoints/entrypoint_utils.cc",
        "patchSetId": 18
      },
      "lineNbr": 305,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-18T16:17:54Z",
      "side": 1,
      "message": "Even if the `ArtMethod*` had weaker alignment requirements than `std::atomic\u003cArtMethod*\u003e`, we\u0027re explicitly aligning it in the .bss section anyway. And I guess alignment requirement is never bigger than sizeof(). So as long as this check holds, the store below is OK. (And we\u0027re not running on architectures where this check would fail.)",
      "parentUuid": "9b73a5fd_2e307cdd",
      "range": {
        "startLine": 305,
        "startChar": 6,
        "endLine": 305,
        "endChar": 83
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5b3c5b3_12ded601",
        "filename": "runtime/interpreter/cfi_asm_support.h",
        "patchSetId": 18
      },
      "lineNbr": 58,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-06-18T16:00:11Z",
      "side": 1,
      "message": "Nit: DW_OP_BREG\u003cb\u003e to align with the comment to CFI_EXPRESSION_BREG_2",
      "range": {
        "startLine": 58,
        "startChar": 47,
        "endLine": 58,
        "endChar": 48
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec04c502_69717740",
        "filename": "runtime/interpreter/cfi_asm_support.h",
        "patchSetId": 18
      },
      "lineNbr": 58,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-06-18T16:17:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5b3c5b3_12ded601",
      "range": {
        "startLine": 58,
        "startChar": 47,
        "endLine": 58,
        "endChar": 48
      },
      "revId": "844b2a283134745fefeaba8acbcc053235fabeb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}