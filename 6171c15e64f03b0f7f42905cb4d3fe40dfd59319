{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fd9eefab_f8423c17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-03-15T18:07:30Z",
      "side": 1,
      "message": "\"to avoid a race with finalizers introduced by the dex file.\"",
      "range": {
        "startLine": 9,
        "startChar": 37,
        "endLine": 10,
        "endChar": 69
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bed33ea_a4372841",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-15T18:34:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd9eefab_f8423c17",
      "range": {
        "startLine": 9,
        "startChar": 37,
        "endLine": 10,
        "endChar": 69
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93166dac_b3545405",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-03-15T18:07:30Z",
      "side": 1,
      "message": "Looks fine to me, other than the two comments below. I only looked briefly at the finalization/cleaner code.",
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e002af55_d7063c90",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-15T18:44:57Z",
      "side": 1,
      "message": "Is this used from somewhere outside tests?",
      "range": {
        "startLine": 119,
        "startChar": 16,
        "endLine": 119,
        "endChar": 21
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41638f30_70f3bfde",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-15T18:50:11Z",
      "side": 1,
      "message": "Yes, it will be used in Pre-reboot Dexopt.",
      "parentUuid": "e002af55_d7063c90",
      "range": {
        "startLine": 119,
        "startChar": 16,
        "endLine": 119,
        "endChar": 21
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4458f60b_8b51f9e5",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-03-15T18:07:30Z",
      "side": 1,
      "message": "Please add the\n\nReference.reachabilityFence(this)\n\nback at the end of this. For dull correctness it should be in a finally clause as before, but it doesn\u0027t really matter.",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cdf0ed8_74d36abb",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-15T18:23:47Z",
      "side": 1,
      "message": "Originally, `Reference.reachabilityFence(this)` was for preventing the `close()` method from being called twice: once by our code and once by the finalizer concurrently. With `Cleaner`, this doesn\u0027t seem to possibility happen because [the doc](https://docs.oracle.com/javase%2F9%2Fdocs%2Fapi%2F%2F/java/lang/ref/Cleaner.Cleanable.html#clean--) says\n\n\u003e The cleanable\u0027s cleaning action is invoked at most once regardless of the number of calls to clean.\n\nTherefore, I don\u0027t think we need `Reference.reachabilityFence(this)` anymore. Am I missing anything?",
      "parentUuid": "4458f60b_8b51f9e5",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0b9a1ce_f396c870",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-15T18:34:43Z",
      "side": 1,
      "message": "Oh, wait, I see the race here. We may get a false warning before `mGuard.close()` is executed.\n\nDone.",
      "parentUuid": "9cdf0ed8_74d36abb",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "142050c6_568c9546",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-15T18:44:57Z",
      "side": 1,
      "message": "Can you please fill me in? The cleaner may only run if this object is phantom reachable. How do we get here then?",
      "parentUuid": "e0b9a1ce_f396c870",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e756adb_cbc1bbec",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-15T18:50:11Z",
      "side": 1,
      "message": "Let\u0027s say T0 is the main thread and T1 is the cleaner thread. Consider the following code:\n\n```\n1       try (var pin \u003d mArtdRefCache.new Pin()) {\n2           mArtdRefCache.getArtd();\n3       } \u003c----- `close()` is called.\n```\n\nAs soon as T0 reaches line 3, the pin object becomes phantom reachable, even if the `close()` method is still being executed. Then what can happen is:\n\n1. T0: Enter `close()`\n2. T1: Enter `Cleanup.run()`\n3. T1: Call `mGuard.warnIfOpen()` \u003c--- False warning",
      "parentUuid": "142050c6_568c9546",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c519da9_6ba37dd4",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-18T13:20:56Z",
      "side": 1,
      "message": "\u003e the pin object becomes phantom reachable, even if the close() method is still being executed.\n\nHmm, I thought there\u0027d be a strong ref on the stack during the whole `close` call, but the compiler may rearrange it like this then?\n\n```\n        public void close() {\n            CloseGuard g \u003d mGuard;\n            Cleaner.Cleanable c \u003d mCleanable;\n            // No longer need to access `this`, so the reference on the stack\n            // is cleared here and it becomes phantom reachable.\n            g.close();\n            c.clean();\n        }\n```\n\nIf so it\u0027s prudent to use a reachability fence for the sake of clarity, but I\u0027m curious if the compiler does things like that in practice - it\u0027s not obvious that it\u0027d provide any performance benefit.",
      "parentUuid": "5e756adb_cbc1bbec",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42e41a32_300983ea",
        "filename": "libartservice/service/java/com/android/server/art/ArtdRefCache.java",
        "patchSetId": 2
      },
      "lineNbr": 170,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-03-18T14:21:56Z",
      "side": 1,
      "message": "I think you are right! I only thought about the reachability of the object from the caller of `close`, but not from `close` itself. In fact, in `close` itself, like you said, `this` is strongly reachable until the execution reaches `mCleanable.clean()` (i.e., `this.mCleanable.clean()`), unless the compiler reorders the instructions. But for peace of mind, let\u0027s keep the reachability fence.",
      "parentUuid": "1c519da9_6ba37dd4",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "6171c15e64f03b0f7f42905cb4d3fe40dfd59319",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}