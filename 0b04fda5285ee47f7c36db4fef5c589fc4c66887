{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "abfaffef_a533ad85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-01-31T19:35:57Z",
      "side": 1,
      "message": "Currently this is failing in art/compiler/utils/assembler_thumb_test.cc:(66) Failure in test ArmVIXLAssemblerTest.VixlJniHelpers because some offsets changed. Can this happen due to 32-bit tls size changes?\n\nSpecifics:\n@@ -82,5 +82,5 @@\nf6: 18 bf         it ne\nf8: e3 46         movne r11, r12\n-      fa: d9 f8 8c c0   ldr.w r12, [r9, #140]\n+      fa: d9 f8 94 c0   ldr.w r12, [r9, #148]\nfe: bc f1 00 0f   cmp.w r12, #0\n102: 71 d1         bne 0x1e8     @ imm \u003d #226\n@@ -158,5 +158,5 @@\n21c: d9 f8 24 80   ldr.w r8, [r9, #36]\n220: 70 47         bx lr\n-     222: d9 f8 8c 00   ldr.w r0, [r9, #140]\n-     226: d9 f8 c0 e2   ldr.w lr, [r9, #704]\n+     222: d9 f8 94 00   ldr.w r0, [r9, #148]\n+     226: d9 f8 c8 e2   ldr.w lr, [r9, #712]\n22a: f0 47         blx lr\\n",
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff60e9cc_93455a2d",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1071,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-02-01T12:08:27Z",
      "side": 1,
      "message": "Remove spaces.",
      "range": {
        "startLine": 1071,
        "startChar": 12,
        "endLine": 1071,
        "endChar": 16
      },
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "535fcf9a_3facc679",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1242,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-02-01T16:28:13Z",
      "side": 1,
      "message": "I am trying to prove myself that is correct.\n\nIt is obvious the if the reader\u0027s num_name_readers release runs first:\n[reader] copy ; release 0 -\u003e (happens after) -\u003e [writer] acquire 0; free\n\nI keep scratching my head what the \"proof\" (by contradiction?) is if the reader\u0027s num_name_readers release runs second.\n[writer] acquire 0; free OLD -\u003e ???? -\u003e [reader] acquire 0; copy OLD\nIt seems obvious that the reader must see the new pointer as opposed to the old. But I keep wondering what is the formal way to prove it.",
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cad63438_d8c4d59d",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1242,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-02-01T23:51:31Z",
      "side": 1,
      "message": "It would be easy to see if it was compare_exchange(0, 0, order_acq_rel) here instead (I guess that is just like mutex lock/unlock in one operation, with nothing in the critical section). The added release here would mean the reader would have to see the updated name.",
      "parentUuid": "535fcf9a_3facc679",
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8869be3_2dd9ae62",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1242,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2022-02-02T00:51:49Z",
      "side": 1,
      "message": "Thanks! I think your doubts are well taken. We\u0027re counting on the ordering between the write in the xchg and the acquire load of num_name_readers, which currently doesn\u0027t hold.  The failing scenario is the one in which the load of the count effectively is executed in the middle of the xchg, and the increment and name access by the reader are executed between count load in the writer, and the xchg store.\n\nAt least the load in the writer needs to be seq_cst. At least the increment for this also needs to be for this to make sense.\n\nThen we have the following argument:\nAmong the three seq_cst operations, if the load is ordered after the xchg, it will see the new value, and there is no issue. If the load is ordered before the exchange, then the seq_cst order will also order the increment before the load, which means the load must see the increment.\n\nI think the release fro the decrement suffices. But this seems tricky enough to just use seq_cst for everything here.",
      "parentUuid": "535fcf9a_3facc679",
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3760f81_ed33dd45",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1247,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-02-01T16:28:13Z",
      "side": 1,
      "message": "SGTM. I guess \u00270\u0027 and \u0027i\u0027 would also be decent sleep times.",
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34425cdd_834e7256",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1388,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-02-01T12:08:27Z",
      "side": 1,
      "message": "We need to increment/decrement `num_name_readers` around this.",
      "range": {
        "startLine": 1383,
        "startChar": 2,
        "endLine": 1388,
        "endChar": 12
      },
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1693c31d_7b868284",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2022-02-01T16:28:13Z",
      "side": 1,
      "message": "Does it need to be seq_cst?",
      "range": {
        "startLine": 1408,
        "startChar": 27,
        "endLine": 1408,
        "endChar": 31
      },
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a709e42b_309100ef",
        "filename": "runtime/thread.cc",
        "patchSetId": 2
      },
      "lineNbr": 1968,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2022-02-01T12:08:27Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1968,
        "startChar": 4,
        "endLine": 1968,
        "endChar": 52
      },
      "revId": "0b04fda5285ee47f7c36db4fef5c589fc4c66887",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}