{
  "comments": [
    {
      "key": {
        "uuid": "b48efeed_20fd2ad1",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-01-22T09:55:33Z",
      "side": 1,
      "message": "Can we avoid this? It\u0027s pretty bizarre to move something to a void destination...",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "142fca8d_aee2571c",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-01-22T16:19:35Z",
      "side": 1,
      "message": "I was gonna get rid of it entirely but ARM64 and MIPS64 do sanity checks on it (if not kPrimVoid). So comes down to whether we want to preserve those DCHECKs.",
      "parentUuid": "b48efeed_20fd2ad1",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b408be64_50118c9d",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-01-25T09:26:35Z",
      "side": 1,
      "message": "Looking at the code in arm64, it\u0027s not just a sanity check is it? It actually affects what you\u0027re going to generate. So the method might get void in.",
      "parentUuid": "142fca8d_aee2571c",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3415ae84_84baa684",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-01-25T09:35:24Z",
      "side": 1,
      "message": "The default argument could be removed here and only apply to the overridden arm64 helper.",
      "parentUuid": "b408be64_50118c9d",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "940bba60_4f4c4dca",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-01-25T12:36:09Z",
      "side": 1,
      "message": "Yea, the argument is used to force the operation on a number of bits.\n \nI stumbled across it when I added the other locations helpers ... and I think it\u0027s not very intuitive.\n\nSince you\u0027re refactoring this, could we replace it with a boolean or enum to force the move to use 32 or 64bit types?",
      "parentUuid": "3415ae84_84baa684",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4feb66e_d203c4eb",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-01-25T13:53:45Z",
      "side": 1,
      "message": "So when exactly would we need to specify the width? Because arm64 and mips64 infer it from the locations if kPrimVoid and x86_64 never used it in the first place.",
      "parentUuid": "940bba60_4f4c4dca",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4feb66e_520fd40e",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-01-25T13:55:59Z",
      "side": 1,
      "message": "instead of passing the location, i\u0027d pass an enum\nkForce32BitMove\nkForce64BitMove\nkInferFromLocation // the default.\n\nIMO it will be cleaner then passing a void here.",
      "parentUuid": "f4feb66e_d203c4eb",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34fcce7c_ac3a23bd",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-01-25T14:18:34Z",
      "side": 1,
      "message": "Can we just remove it? It won\u0027t make any difference on codegens other than arm64 \u0026 mips64, and the remaining two don\u0027t use it to DCHECK width but core vs. fpu.",
      "parentUuid": "f4feb66e_520fd40e",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54edc2c8_adbdfd80",
        "filename": "compiler/optimizing/code_generator.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-01-25T14:19:52Z",
      "side": 1,
      "message": "if you can remove it, go for it.",
      "parentUuid": "34fcce7c_ac3a23bd",
      "range": {
        "startLine": 193,
        "startChar": 20,
        "endLine": 193,
        "endChar": 67
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3434cedb_cf66c12b",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 1021,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-01-22T09:55:33Z",
      "side": 1,
      "message": "Isn\u0027t that the other way around? The ParallelMoveResolver may request temp?",
      "range": {
        "startLine": 1021,
        "startChar": 5,
        "endLine": 1021,
        "endChar": 72
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4dc3efe_90e8f4cf",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 1021,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-01-22T16:19:35Z",
      "side": 1,
      "message": "This is my limited understanding of how the swap resolver works, so please correct me if I\u0027m wrong.\n\nIn the original Move32 function, a StackSlot-\u003eStackSlot moves the value through stack with push+pop. The ParallelMoveResolver, on the other hand, requests EAX with ScratchRegisterScope and does mov+mov with that temp register.\n\nNow that I\u0027m looking at how the ScratchRegisterScope works, however, it looks like we cannot do that - it would never spill EAX even if used by the caller of this. Which would mean that DoubleStackSlot-\u003eDoubleStackSlot in Move64 is broken because it uses the move resolver. Looking at use sites, it never hits that case though.",
      "parentUuid": "3434cedb_cf66c12b",
      "range": {
        "startLine": 1021,
        "startChar": 5,
        "endLine": 1021,
        "endChar": 72
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4ccf67e_e2cd468c",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 1021,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-01-25T09:26:35Z",
      "side": 1,
      "message": "Not sure why you\u0027re saying it\u0027s broken? We should just push eax and pop it?",
      "parentUuid": "b4dc3efe_90e8f4cf",
      "range": {
        "startLine": 1021,
        "startChar": 5,
        "endLine": 1021,
        "endChar": 72
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "742ac67b_3145aa2e",
        "filename": "compiler/optimizing/code_generator_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 1023,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-01-22T09:55:33Z",
      "side": 1,
      "message": "I don\u0027t see why this solves the temp issue stated before...",
      "range": {
        "startLine": 1022,
        "startChar": 5,
        "endLine": 1023,
        "endChar": 68
      },
      "revId": "3c449228324890b10b43d08738a17e950a6f2ba6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}