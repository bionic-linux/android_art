{
  "comments": [
    {
      "key": {
        "uuid": "3a0563fe_fc294929",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2014-11-10T10:48:05Z",
      "side": 1,
      "message": "Nit: why R12 instead of IP?",
      "range": {
        "startLine": 1180,
        "startChar": 61,
        "endLine": 1180,
        "endChar": 64
      },
      "revId": "52839d17c06175e19ca4a093fb878450d1c4310d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa358bd2_325490c3",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-10T10:58:40Z",
      "side": 1,
      "message": "Hmmm, good point. I just used the number used in Quick and did not realize that was IP.\n\nAndreas, Ian: Are we certain the call through IMT will not trash IP?",
      "parentUuid": "3a0563fe_fc294929",
      "range": {
        "startLine": 1180,
        "startChar": 61,
        "endLine": 1180,
        "endChar": 64
      },
      "revId": "52839d17c06175e19ca4a093fb878450d1c4310d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a4f777e_a876d342",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-11-10T19:04:07Z",
      "side": 1,
      "message": "Not sure I follow the question, you want called methods not to trash R12/IP? The hidden argument register is required to be IP for the stub, but this could be changed. You\u0027d be better off not having magic hidden register usage in the assemblers, this was the status pre-optimizing compiler work.",
      "parentUuid": "fa358bd2_325490c3",
      "range": {
        "startLine": 1180,
        "startChar": 61,
        "endLine": 1180,
        "endChar": 64
      },
      "revId": "52839d17c06175e19ca4a093fb878450d1c4310d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa83cbc2_a2ea9e09",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-11-10T20:04:44Z",
      "side": 1,
      "message": "This is a bit paranoid: when we take pointer to the invoke stub, are we sure it points right to the stub and not to a different compiler (GCC/clang) generated stub that would dispatch it to the invoke stub while trashing IP?\n\nAnd I think we\u0027re safe because the compiler needs to ensure that pointers to the function always compare equal and that would not be possible if it was returning pointers to extra stubs.",
      "parentUuid": "5a4f777e_a876d342",
      "range": {
        "startLine": 1180,
        "startChar": 61,
        "endLine": 1180,
        "endChar": 64
      },
      "revId": "52839d17c06175e19ca4a093fb878450d1c4310d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8dd3f4_e0d0a2d7",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-11T09:56:20Z",
      "side": 1,
      "message": "Like Vladimir says. This is not related to the assemblers.",
      "parentUuid": "fa83cbc2_a2ea9e09",
      "range": {
        "startLine": 1180,
        "startChar": 61,
        "endLine": 1180,
        "endChar": 64
      },
      "revId": "52839d17c06175e19ca4a093fb878450d1c4310d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a0563fe_1ced154e",
        "filename": "test/423-invoke-interface/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2014-11-10T12:06:08Z",
      "side": 1,
      "message": "does 20 bear any special meaning?",
      "range": {
        "startLine": 38,
        "startChar": 15,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "52839d17c06175e19ca4a093fb878450d1c4310d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9af64f48_7f92cfe3",
        "filename": "test/423-invoke-interface/src/Main.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2014-11-10T12:14:01Z",
      "side": 1,
      "message": "No, it\u0027s an arbitrary number that hopefully can trigger conflicts. See info.txt.",
      "parentUuid": "3a0563fe_1ced154e",
      "range": {
        "startLine": 38,
        "startChar": 15,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "52839d17c06175e19ca4a093fb878450d1c4310d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}