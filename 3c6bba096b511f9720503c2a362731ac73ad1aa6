{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6a45fb6d_ff47f468",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 4
      },
      "lineNbr": 334,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-17T17:01:03Z",
      "side": 1,
      "message": "I think unsigned comparisons (Above/AboveOrEqual/Below/BelowOrEqual) are not applicable to FP types.",
      "range": {
        "startLine": 334,
        "startChar": 6,
        "endLine": 334,
        "endChar": 71
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b6d44ef_ae61787a",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 4
      },
      "lineNbr": 334,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T09:43:46Z",
      "side": 1,
      "message": "You are right, removed that part of the if guard.",
      "parentUuid": "6a45fb6d_ff47f468",
      "range": {
        "startLine": 334,
        "startChar": 6,
        "endLine": 334,
        "endChar": 71
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d95971e_5c6c9dd1",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 4
      },
      "lineNbr": 418,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-17T17:01:03Z",
      "side": 1,
      "message": "FP operations can be simplified if they have the right `ComparisonBias`.",
      "range": {
        "startLine": 418,
        "startChar": 6,
        "endLine": 418,
        "endChar": 71
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a33bdede_8e814006",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 4
      },
      "lineNbr": 418,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T09:43:46Z",
      "side": 1,
      "message": "Ack, let\u0027s continue the conversation in the other message regarding `bias`",
      "parentUuid": "7d95971e_5c6c9dd1",
      "range": {
        "startLine": 418,
        "startChar": 6,
        "endLine": 418,
        "endChar": 71
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "722205bf_366d7b68",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 4
      },
      "lineNbr": 425,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-17T15:57:25Z",
      "side": 1,
      "message": "Related to this, I left a comment in the test file.",
      "range": {
        "startLine": 423,
        "startChar": 0,
        "endLine": 425,
        "endChar": 0
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98ac40a1_d2820cf4",
        "filename": "compiler/optimizing/constant_folding.cc",
        "patchSetId": 4
      },
      "lineNbr": 425,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T09:43:46Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "722205bf_366d7b68",
      "range": {
        "startLine": 423,
        "startChar": 0,
        "endLine": 425,
        "endChar": 0
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8294ef1b_5fec9099",
        "filename": "test/2046-checker-comparison/info.txt",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-17T17:01:03Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 1,
        "startChar": 14,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4064c6e5_0a8adc7f",
        "filename": "test/2046-checker-comparison/info.txt",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T09:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8294ef1b_5fec9099",
      "range": {
        "startLine": 1,
        "startChar": 14,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe50f17b_61aa3c7c",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-17T15:57:25Z",
      "side": 1,
      "message": "I was expecting HGreaterThan but since the builder stage I see this. It is odd because these comparisons are not the same as GreaterThan for float. For example:\n```\nFloat.NaN \u003e Float.Nan // false\nFloat.NaN \u003c\u003d Float.Nan // false\nNot (Float.NaN \u003c\u003d Float.NaN) // true\n```\n\nOddly enough, the results are fine which either means: A) LessThanOrEqual codegen returns the opposite of what it should be for NaN, or B) there is some special case handling that I\u0027m missing. Same for other comparisons.\n\nThis is blocking some optimizations taking place. For example, this method should be returning constant 0 every time.\n\nFor completeness sake, here\u0027s an x86 excerpt of the disassembly:\n```\n      0 1 z6 LessThanOrEqual [f0,f0] dex_pc:6 block:B1 loop:none\n0x00000030:                 0F2EC0    \t       ucomiss xmm0, xmm0\n0x00000033:                   7604    \t       jbe/na +4 (0x00000039)\n0x00000035:                   33C0    \t       xor eax, eax\n0x00000037:                   EB05    \t       jmp +5 (0x0000003e)\n0x00000039:             B801000000    \t       mov eax, 1\n \u003c|@\n      0 1 z20 BooleanNot [z6] dex_pc:n/a block:B1 loop:none\n0x0000003e:                 83F001    \t       xor eax, 1\n \u003c|@\n      0 0 v10 Return [z20] dex_pc:9 block:B1 loop:none\n0x00000041:                     C3    \t       ret \n```",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 289,
        "endChar": 57
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d732b851_377ce0f8",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-17T17:01:03Z",
      "side": 1,
      "message": "Please see the \"cmpkind vAA, vBB, vCC\" operation at https://source.android.com/docs/core/runtime/dalvik-bytecode . These can be combined with \"if-testz vAA, +BBBB\" in different ways to produce the same result.\n\nIn the `builder (after)` graph, you should see `HCompare` followed by some comparison with 0. Note that both\n\n    \u003c\u003cCmp:i\\d+\u003e\u003e Compare [\u003c\u003clhs\u003e\u003e,\u003c\u003crhs\u003e\u003e] bias:LtBias\n                 GreaterThen [\u003c\u003cCmp\u003e\u003e,\u003c\u003cConst0\u003e\u003e]\n\nand\n\n    \u003c\u003cCmp:i\\d+\u003e\u003e Compare [\u003c\u003crhs\u003e\u003e,\u003c\u003clhs\u003e\u003e] bias:GtBias\n                 LessThen [\u003c\u003cCmp\u003e\u003e,\u003c\u003cConst0\u003e\u003e]\n\nare valid expressions for \"lhs \u003e rhs\". Additionally, D8 can also choose arbitrary order of the then-block and else-block, thus potentially using the opposite comparisons.\n\nThe `HCompare` gets merged to the comparison in `InstructionSimplifier`. Have a look at that code. You may want to add `HGraphVisualizerPrinter::VisitCondition()` and print the bias just like in `HGraphVisualizerPrinter::VisitCompare()`.\n\nNote that by testing for a particular instruction, we are risking test breakage for javac and D8 updates.",
      "parentUuid": "fe50f17b_61aa3c7c",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 289,
        "endChar": 57
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc1e98a_349c4731",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T09:43:46Z",
      "side": 1,
      "message": "Added the `bias` locally and I am testing it. Using that same `testGreaterThanFloat` method, what would\n```\nz6 LessThanOrEqual [f0,f0] bias:lt \nz20 BooleanNot [z6]\nv10 Return [z20]\n```\ndo for NaN? Because I would have expected to be able to fold `LessThanOrEqual` into a constant `true`.\nHowever, `LessThanOrEqual bias:lt` doesn\u0027t return `true` for [IsFPConditionTrueIfNaN](https://cs.android.com/android/platform/superproject/+/master:art/compiler/optimizing/nodes.h;l\u003d3991;drc\u003d1adb0de639204485836068d2b848eb54a8fcd709)(). Is my assessment of `folding into constant` the one that\u0027s right? Or is the logic of that function the one that it is right?",
      "parentUuid": "d732b851_377ce0f8",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 289,
        "endChar": 57
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "182c4142_7018cee1",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-20T10:06:04Z",
      "side": 1,
      "message": "I would consider the `IsFPConditionTrueIfNaN()` and `IsFPConditionFalseIfNaN()` incomplete. Feel free to add the additional cases. Then you could change the simplification to rely on these functions to make it easier to understand the code.",
      "parentUuid": "7dc1e98a_349c4731",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 289,
        "endChar": 57
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bed9776e_8081fba7",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T14:15:44Z",
      "side": 1,
      "message": "Ack. I will leave it for a future CL.",
      "parentUuid": "182c4142_7018cee1",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 289,
        "endChar": 57
      },
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4fc795_0783e67f",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-17T17:01:03Z",
      "side": 1,
      "message": "Odd method ordering - move this after all \"Double\" tests.",
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eac43bdc_47e9abb4",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T09:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c4fc795_0783e67f",
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd231084_4cbad991",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-03-17T17:01:03Z",
      "side": 1,
      "message": "Odd method ordering - move the \"Object\" tests after \"Double\" tests.",
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e42ad61_7857bb87",
        "filename": "test/2046-checker-comparison/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-03-20T09:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd231084_4cbad991",
      "revId": "3c6bba096b511f9720503c2a362731ac73ad1aa6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}