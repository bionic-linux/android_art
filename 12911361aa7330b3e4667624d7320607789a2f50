{
  "comments": [
    {
      "key": {
        "uuid": "4bfa2b62_1f0fe12b",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3106,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-09T08:56:59Z",
      "side": 1,
      "message": "nit: block needs to be in braces.",
      "range": {
        "startLine": 3105,
        "startChar": 0,
        "endLine": 3106,
        "endChar": 21
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1744cd3_9b64924c",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3106,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bfa2b62_1f0fe12b",
      "range": {
        "startLine": 3105,
        "startChar": 0,
        "endLine": 3106,
        "endChar": 21
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8213c7c0_287b719a",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3110,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-09T08:56:59Z",
      "side": 1,
      "message": "Even single statement blocks need to be in braces.",
      "range": {
        "startLine": 3109,
        "startChar": 0,
        "endLine": 3110,
        "endChar": 21
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdf66f65_36e2b934",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3110,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8213c7c0_287b719a",
      "range": {
        "startLine": 3109,
        "startChar": 0,
        "endLine": 3110,
        "endChar": 21
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9519846a_9a404c3d",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3124,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T09:21:34Z",
      "side": 1,
      "message": "These shall need some extra checks. For now, they should be `UNREACHABLE()`.",
      "range": {
        "startLine": 3123,
        "startChar": 4,
        "endLine": 3124,
        "endChar": 68
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae3b8a5b_2cb62548",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3124,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9519846a_9a404c3d",
      "range": {
        "startLine": 3123,
        "startChar": 4,
        "endLine": 3124,
        "endChar": 68
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0406a73_60c6755b",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3127,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-09T08:56:59Z",
      "side": 1,
      "message": "braces",
      "range": {
        "startLine": 3126,
        "startChar": 0,
        "endLine": 3127,
        "endChar": 21
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5bb8413_c49b5ac0",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3127,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0406a73_60c6755b",
      "range": {
        "startLine": 3126,
        "startChar": 0,
        "endLine": 3127,
        "endChar": 21
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53546c86_9ac3f405",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3617,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T09:21:34Z",
      "side": 1,
      "message": "Unnecessary, new_value_type is the same as expected_value_type.",
      "range": {
        "startLine": 3616,
        "startChar": 2,
        "endLine": 3617,
        "endChar": 91
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45213bb2_194b0cb2",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3617,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53546c86_9ac3f405",
      "range": {
        "startLine": 3616,
        "startChar": 2,
        "endLine": 3617,
        "endChar": 91
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a03d9085_c1437da5",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3626,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T09:21:34Z",
      "side": 1,
      "message": "Do we need to check the expected value as well? If we pass the wrong type for comparison, does the operation throw or just fail the comparison?",
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d62438f_e923fcd2",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3626,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "I think only the primitive type should be checked, because for kReference we will check if it\u0027s the exact same object so I don\u0027t see why would we check the type.",
      "parentUuid": "a03d9085_c1437da5",
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e630d48_b3ee4b4f",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3626,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T12:03:22Z",
      "side": 1,
      "message": "I\u0027ve tried adding\n\n    try {\n        boolean result \u003d vh.compareAndSet(this, new Object(), Widget.ONE);\n        failUnreachable();\n    } catch (ClassCastException e) {\n    }\n\nto the end of VarHandleTypeConversionTests.SubtypeTest.doTest() and it succeeded, i.e. the vh.compareAndSet() threw ClassCastException.",
      "parentUuid": "6d62438f_e923fcd2",
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9747d569_353772f2",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3626,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-10T08:03:32Z",
      "side": 1,
      "message": "You\u0027re right. Sorry, I misunderstood what you were saying. Yes, the expected value type should be check because otherwise the operation will return false without executing and without raising the exception. I added the check.",
      "parentUuid": "0e630d48_b3ee4b4f",
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b370f7ec_4f1d8441",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3629,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T09:21:34Z",
      "side": 1,
      "message": "Not if `out` is FP reg.",
      "range": {
        "startLine": 3629,
        "startChar": 5,
        "endLine": 3629,
        "endChar": 36
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e8cee30_4c0df470",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3629,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "`out` can\u0027t be FP, the return type is bool. It is enforced to be a ByteRegister (more exactly, ECX). I should add this to the comment.",
      "parentUuid": "b370f7ec_4f1d8441",
      "range": {
        "startLine": 3629,
        "startChar": 5,
        "endLine": 3629,
        "endChar": 36
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d196c1f_91aa9085",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3651,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-09T08:56:59Z",
      "side": 1,
      "message": "kZero like GenCAS() is perhaps be more intuitive.",
      "range": {
        "startLine": 3651,
        "startChar": 14,
        "endLine": 3651,
        "endChar": 20
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62e26abd_63eb6af9",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3651,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d196c1f_91aa9085",
      "range": {
        "startLine": 3651,
        "startChar": 14,
        "endLine": 3651,
        "endChar": 20
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25900964_82e1c1b8",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3690,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2020-09-09T08:56:59Z",
      "side": 1,
      "message": "Should this also always_update_field as GenCAS() does? That seems like well tested code, does it make sense to align closer to it?",
      "range": {
        "startLine": 3690,
        "startChar": 63,
        "endLine": 3690,
        "endChar": 92
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21ded65d_c47eae03",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3690,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T09:21:34Z",
      "side": 1,
      "message": "I would not rely on the GenCAS for x86 as it\u0027s broken for references with read barrier. When the field contains a from-space reference, it shall fail.\n\nCompare it with the arm64 GenCas() where we have a slow path that can compare against both from-space and to-space reference for the CAS operation.",
      "parentUuid": "25900964_82e1c1b8",
      "range": {
        "startLine": 3690,
        "startChar": 63,
        "endLine": 3690,
        "endChar": 92
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e3cc83c_9a6167e0",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3690,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-09-09T09:27:02Z",
      "side": 1,
      "message": "Actually, the GenCAS() is probably OK. I just noticed that it calls GenerateReferenceLoadWithBakerReadBarrier() with `/* always_update_field\u003d */ true`, so we do not need to compare to the from-space reference.",
      "parentUuid": "21ded65d_c47eae03",
      "range": {
        "startLine": 3690,
        "startChar": 63,
        "endLine": 3690,
        "endChar": 92
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "490195de_de71ec89",
        "filename": "compiler/optimizing/intrinsics_x86.cc",
        "patchSetId": 3
      },
      "lineNbr": 3690,
      "author": {
        "id": 1725700
      },
      "writtenOn": "2020-09-09T10:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e3cc83c_9a6167e0",
      "range": {
        "startLine": 3690,
        "startChar": 63,
        "endLine": 3690,
        "endChar": 92
      },
      "revId": "12911361aa7330b3e4667624d7320607789a2f50",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}