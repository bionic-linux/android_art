{
  "comments": [
    {
      "key": {
        "uuid": "553efbfb_e11942b8",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1527,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-23T14:39:21Z",
      "side": 1,
      "message": "This could be simply std::swap(left, right) if you avoid all the helper Register variables. That would make it much better if we change EQ/NE/B/BE/A/AE to use CMP+SBCS and need to do the swap also for BE-\u003eAE and A-\u003eB. We\u0027d take the shared CMP+SBCS out of the switch and keep the switch just for condition rewriting and swapping operands.",
      "range": {
        "startLine": 1524,
        "startChar": 0,
        "endLine": 1527,
        "endChar": 28
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8686441_3ed77d92",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1527,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-24T14:03:16Z",
      "side": 1,
      "message": "Unless I am missing something, I don\u0027t see how CMP + SBCS would work for EQ and NE (consider 2 \u003d\u003d 1 and 0x100000000 !\u003d 1).",
      "parentUuid": "553efbfb_e11942b8",
      "range": {
        "startLine": 1524,
        "startChar": 0,
        "endLine": 1527,
        "endChar": 28
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4c4e30c_0f099ad5",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1527,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-24T14:46:35Z",
      "side": 1,
      "message": "You\u0027re right, EQ/NE needs to stay as CMP+IT+CMP.",
      "parentUuid": "b8686441_3ed77d92",
      "range": {
        "startLine": 1524,
        "startChar": 0,
        "endLine": 1527,
        "endChar": 28
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae304ca3_c8e69cad",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 1527,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-24T16:42:27Z",
      "side": 1,
      "message": "I will keep it for the unsigned comparisons as well (no potential data dependency on IP), but I agree that the code can be improved a bit.",
      "parentUuid": "b4c4e30c_0f099ad5",
      "range": {
        "startLine": 1524,
        "startChar": 0,
        "endLine": 1527,
        "endChar": 28
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26f02ef8_6dacf9c3",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2399,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-24T14:46:35Z",
      "side": 1,
      "message": "Do we ever want both to be constants?",
      "range": {
        "startLine": 2398,
        "startChar": 0,
        "endLine": 2399,
        "endChar": 80
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac854fe8_f7c4e9de",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2399,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-02-24T16:42:27Z",
      "side": 1,
      "message": "Looks like a pretty standard use to me:\nx \u003d\u003d y ? c1 : c2\n\nIf the output is not in the same register as the first input, then there will be an extra move (or two). However, I assume that Location::ArmEncodableConstantOrRegister() is used for both inputs.",
      "parentUuid": "26f02ef8_6dacf9c3",
      "range": {
        "startLine": 2398,
        "startChar": 0,
        "endLine": 2399,
        "endChar": 80
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3d6a8d4_76399b95",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2415,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-23T14:39:21Z",
      "side": 1,
      "message": "There is a 16-bit MOV (register) that can handle high registers. We need to check this only if the source is constant.",
      "range": {
        "startLine": 2407,
        "startChar": 0,
        "endLine": 2415,
        "endChar": 3
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09e838af_1d2ae400",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2415,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T13:07:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3d6a8d4_76399b95",
      "range": {
        "startLine": 2407,
        "startChar": 0,
        "endLine": 2415,
        "endChar": 3
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a92531e3_1508f9ae",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2458,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-23T14:39:21Z",
      "side": 1,
      "message": "There is a 16-bit CMP (register) that can handle high registers. We need to check this only if the other operand is constant. (But this is moot if you take my recommendation to use the CMP+SBCS approach for EQ/NE/B/BE/A/AE and use CanEncodeConstantAsImmediate() in the location builder.)",
      "range": {
        "startLine": 2458,
        "startChar": 10,
        "endLine": 2458,
        "endChar": 88
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a03d6bfd_dea41b97",
        "filename": "compiler/optimizing/code_generator_arm.cc",
        "patchSetId": 2
      },
      "lineNbr": 2458,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T13:07:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a92531e3_1508f9ae",
      "range": {
        "startLine": 2458,
        "startChar": 10,
        "endLine": 2458,
        "endChar": 88
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67dee0ae_417b2802",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-23T14:39:21Z",
      "side": 1,
      "message": "/// CHECK:                 Select\n/// CHECK-NEXT:            cmp {{r\\d+}}, {{r\\d+}}",
      "range": {
        "startLine": 375,
        "startChar": 6,
        "endLine": 375,
        "endChar": 12
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ffd5af_e2adc16f",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T13:07:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67dee0ae_417b2802",
      "range": {
        "startLine": 375,
        "startChar": 6,
        "endLine": 375,
        "endChar": 12
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64176f64_294cfa57",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 384,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2017-02-23T14:39:21Z",
      "side": 1,
      "message": "This is now obsolete. If you want to avoid inlining for tests (\"debug\" only), add the $noinline$ marker.",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 384,
        "endChar": 5
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd4372c7_0908dfea",
        "filename": "test/570-checker-select/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 384,
      "author": {
        "id": 1084448
      },
      "writtenOn": "2017-03-01T13:07:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64176f64_294cfa57",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 384,
        "endChar": 5
      },
      "revId": "5edb64bf5866dd3116882a609c231f068fa64dac",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}