{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6013f43c_7237212f",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2794,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-01-28T09:51:55Z",
      "side": 1,
      "message": "Remove. We actually need the one-parameter version, otherwise we\u0027ll generate the wrong IMUL. You don\u0027t need the `rax` variable anymore but we could\n\n  DCHECK_EQ(locations-\u003eInAt(0).AsRegister\u003cCpuRegister\u003e(), RAX);\n  DCHECK_EQ(locations-\u003eOut().AsRegister\u003cCpuRegister\u003e(), RDX);\n\nCan you run the tests, please? (And add a `Test: [...] --host [...]` to the commit message.)",
      "range": {
        "startLine": 2794,
        "startChar": 11,
        "endLine": 2794,
        "endChar": 16
      },
      "revId": "b9be60d84bd760c5aca9c8a48cf4771e4bdb16f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c6b2250_eac9b1f2",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2794,
      "author": {
        "id": 1373934
      },
      "writtenOn": "2021-02-08T16:29:09Z",
      "side": 1,
      "message": "Done. As for tests -- they\u0027re passing for both host and target. Is there a way to check that intrinsic is actually used and not the libcore implementation?",
      "parentUuid": "6013f43c_7237212f",
      "range": {
        "startLine": 2794,
        "startChar": 11,
        "endLine": 2794,
        "endChar": 16
      },
      "revId": "b9be60d84bd760c5aca9c8a48cf4771e4bdb16f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3fdbf6b_0f7acea2",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2794,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-02-08T16:41:03Z",
      "side": 1,
      "message": "You can find/write some benchmark and check that this CL improves it. Or you can change the intrinsic to deliberately emit code that crashes and verify that the test fails. (On x86-64, `__ movl(Address::Absolute(0, /*no_rip\u003d*/ true), Immediate(0));` should make the compiled code crash.)",
      "parentUuid": "2c6b2250_eac9b1f2",
      "range": {
        "startLine": 2794,
        "startChar": 11,
        "endLine": 2794,
        "endChar": 16
      },
      "revId": "b9be60d84bd760c5aca9c8a48cf4771e4bdb16f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64cb9307_99f9d4bb",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2794,
      "author": {
        "id": 1373934
      },
      "writtenOn": "2021-02-09T15:47:50Z",
      "side": 1,
      "message": "FTR\nThe fact that Math.multiplyHigh has been recently ported to the libcore makes it hard to use in tests. If you compile and dex a class that uses Math.multiplyHigh, it is replaced with a desugared implementation. \n\nI also tried to compile and dex a class that prints Math.multiplyHigh()\u0027s result and push and run this dex, disabling desugaring so the libcore\u0027s implementations gets called. But I still wasn\u0027t able to trigger intrinsic that should\u0027ve crashed.",
      "parentUuid": "a3fdbf6b_0f7acea2",
      "range": {
        "startLine": 2794,
        "startChar": 11,
        "endLine": 2794,
        "endChar": 16
      },
      "revId": "b9be60d84bd760c5aca9c8a48cf4771e4bdb16f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}