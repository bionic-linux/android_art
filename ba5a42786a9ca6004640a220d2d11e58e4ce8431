{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "122719a6_1e3c8575",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-19T21:26:59Z",
      "side": 1,
      "message": "It was added in https://r.android.com/1649428 to support e.g. `atest --host libunwindstack_unit_test`. Can you please test that it still works with prebuilts where these are gone?\n\n(That test links `libdexfile_support` statically, but that in turn has a [runtime dependency](https://cs.android.com/android/platform/superproject/main/+/main:art/libdexfile/Android.bp;l\u003d442;drc\u003d56ab4a69151d4fc9308058a6ba8059ee49d8633f) on `libdexfile`, even on host. Maybe the right way to go there is to link it statically into `libdexfile_support` on host, but I don\u0027t remember if there was a reason why we didn\u0027t take that route back then.)",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6869b285_51478fc6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-03-20T00:24:35Z",
      "side": 1,
      "message": "Thanks Martin, I verified the following for `cf_x86_64_phone` in internal main\n- Switched to prebuilts using `RELEASE_DEFAULT_MODULE_BUILD_FROM_SOURCE\u003dFalse`\n- Commented out the Android.bp defs of these two libs in `prebuilts/module_sdk`.\n\nThe following unit test passed.\n\n```\natest --host --no-bazel-mode libunwindstack_unit_test\n```\n\n(Aside: I was running into some pre-existing issues with atest\u0027s Bazel sandboxing, so I had to use the non bazel mode)",
      "parentUuid": "122719a6_1e3c8575",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ebb8450_5364680f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-21T18:55:25Z",
      "side": 1,
      "message": "Hmm, I don\u0027t see how that runtime dependency I pointed to above would work on host if libdexfile gets loaded - it appears to still load libartpalette and libartbase [dynamically there](https://cs.android.com/android/platform/superproject/main/+/main:art/libdexfile/Android.bp;l\u003d92,196).\n\nCould you please check that the host built `libdexfile.so` doesn\u0027t have `NEEDED` entries for either of the two dependencies? If it does, I don\u0027t think it\u0027ll work. If we don\u0027t need libdexfile.so on host at all then it\u0027d be better to remove its host library altogether, i.e. move `\"libdexfile\"` from `linux` to `android` in the art-module-sdk module.",
      "parentUuid": "6869b285_51478fc6",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68eaa4bd_7d1e7616",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-03-21T20:33:44Z",
      "side": 1,
      "message": "I think when art prebuilt sdk is used, the host `libdexfile` (source or prebuilt) does not get loaded at all. \n\nIn the context of `libunwindstack_unit_test-\u003elibdexfile_support` dependency, art\u0027s module sdk provides a prebuilt version of this static library. The prebuilt static library does not have `libdexfile` in its [runtime libs](https://source.corp.google.com/h/googleplex-android/platform/prebuilts/module_sdk/art/+/bd3df3053e9c58a093f54c01576a82b71c76a6ed:current/sdk/Android.bp;l\u003d1206-1252;drc\u003d512c7389fe7289ca25342ec08737e6f7f5580e15;bpv\u003d1;bpt\u003d0)",
      "parentUuid": "9ebb8450_5364680f",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c66cef9_6c10d6b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-21T21:12:21Z",
      "side": 1,
      "message": "I suspect that\u0027s just an effect of how the Soong SDK generation works - it just doesn\u0027t pass on `runtime_libs` into the prebuilt Soong modules. Be that as it may, libdexfile_support [does load](https://cs.android.com/android/platform/superproject/main/+/main:art/libdexfile/external/dex_file_supp.cc;l\u003d63;drc\u003df34513630c38f485454d93b6f6c5c86aed117b44) `libdexfile.so` (there\u0027s also a libdexfile_support_static that\u0027s linked statically with libdexfile, and if we have host tests that really needs it I think the best way would be to let the host version of libdexfile_support do exactly that).\n\nI suspect the test doesn\u0027t fail just because it (perhaps no longer?) tests dex dependent functionality very well. It\u0027ll only try to load `libdexfile.so` if it encounters dex frames in the unwound stack.\n\nIn any case, the point remains - it doesn\u0027t make sense to have a prebuilt `libdexfile.so` on host that depends on `libartpalette.so` and `libartbase.so` who no longer exists there.\n\nNote that the host version of `libdexfile.so` is in art-module-sdk, not art-module-host-exports. That\u0027s because of Soong limitations.",
      "parentUuid": "68eaa4bd_7d1e7616",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd439d1e_f1a76686",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-03-22T17:57:31Z",
      "side": 1,
      "message": "\u003e Be that as it may, libdexfile_support does load libdexfile.so\n\nAh you are right, I forgot to check dlopen usages in libdexfile_support\u0027s source code.\n\nLooking at the [archived snapshots](https://source.corp.google.com/search?q\u003dname.*libdexfile_support%5C%22\u0026ct\u003dos\u0026sq\u003drepo:googleplex-android%2Fplatform%2Fsuperproject%2Fmain%20b:main), it looks like we were never providing `libdexfile` as a runtime dependency of `libdexfile_support`?\n\n\u003e  it\u0027d be better to remove its host library altogether, i.e. move \"libdexfile\" from linux to android in the art-module-sdk module.\n\nThis sounds reasonable to me. I have moved it from `linux` to `android`. As an extension, would you have thoughts on\n(1) Whether we need to prebuilts of host variants of other libraries like `libandroidio` in module sdk?\n(2) Whether we need prebuilts of the static libraries (e.g. `libdexfile_support`) in module sdk? (Were these added for branch minimization?)\n\n\u003e Note that the host version of libdexfile.so is in art-module-sdk, not art-module-host-exports. That\u0027s because of Soong limitations.\n\nCould you elaborate on the soong limitation here? Is there a tracking bug for this?",
      "parentUuid": "6c66cef9_6c10d6b3",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "987eef50_fba47dce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-25T13:12:05Z",
      "side": 1,
      "message": "\u003e Looking at the archived snapshots, it looks like we were never providing libdexfile as a runtime dependency of libdexfile_support?\n\nYou mean there are no `runtime_lib` entries? No, but it doesn\u0027t matter if the .so file already is in the right place so that dlopen finds it.\n\n\u003e (1) Whether we need to prebuilts of host variants of other libraries like libandroidio in module sdk?\n\nMaybe not. Back then the goal was to completely unbundle ART from the platform, so that all build and test use cases would work with these prebuilt SDKs. That\u0027s no longer the case - with a smaller scope for the prebuilts it\u0027s entirely possible that many of them aren\u0027t used.\n\nI certainly wouldn\u0027t mind getting rid of as many of them as we can. Note though that we need to support prebuilt SDKs in older platform builds too, maybe as far back as S. I\u0027d be surprised if anyone takes a prebuilt SDK on any platform version, switches to the prebuilts, and expects to still be able to build tests (CTS, mostly). But who knows - it still requires testing. I know APE tests prebuilts they release to partners but I don\u0027t have the details.\n\n\u003e (2) Whether we need prebuilts of the static libraries (e.g. libdexfile_support) in module sdk? (Were these added for branch minimization?)\n\nIt should be the same thing there.\n\n\u003e Could you elaborate on the soong limitation here? Is there a tracking bug for this?\n\nCome to think of it, the limitation may be in the prebuilt SDK generation. You cannot have different variants of the same library in different SDK modules. Supporting that would make the innards quite a bit more complex.",
      "parentUuid": "fd439d1e_f1a76686",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3be6504e_04fa06fa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-03-25T20:45:55Z",
      "side": 1,
      "message": "\u003e I certainly wouldn\u0027t mind getting rid of as many of them as we can.\n\nAck, this would be my preference as well. It might be an O(N) effort, but it would be nice if we could remove them gradually.\n\n\u003e Note though that we need to support prebuilt SDKs in older platform builds too, maybe as far back as S.\n\nYou are right, I had completely forgot about this. I think this CL is not submittable as-is because the next drop of module sdk generated with this CL will not be compatible with \u003c\u003dU trees. In those trees, we disable sources of art modules when prebuilt module sdk is active. Therefore `libunwindstack` and co will emit a `missing host variant` of `libdexfile` error if we remove the host variant from prebuilts/module_sdk.\n\nWould you know how we have previously handled the scenario where we want to drop a soong module from module sdk without breaking older desserts? I have a WIP CL (aosp/3011798) that does this implicitly in `build/soong` by looking at `SOONG_SDK_SNAPSHOT_TARGET_BUILD_RELEASE`, but I am sure if this is the best solution.",
      "parentUuid": "987eef50_fba47dce",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f294a9fd_e71aa42a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-03-26T22:27:08Z",
      "side": 1,
      "message": "All right, please let me know if/when you\u0027d like to continue with this CL.\n\n\u003e Therefore libunwindstack and co will emit a missing host variant of libdexfile error if we remove the host variant from prebuilts/module_sdk.\n\nAh right, they may fail already at the Soong stage. (`SOONG_ALLOW_MISSING_DEPENDENCIES\u003dtrue` could help delay the error enough so that the relevant builds still go through, but that\u0027s probably not a viable workaround.)\n\n\u003e Would you know how we have previously handled the scenario where we want to drop a soong module from module sdk without breaking older desserts?\n\nNo, I\u0027ve never attempted to remove a prebuilt before. I suggest talking to paulduffin@ about that.\n\nIf you go with a hardcoded special case in Soong I\u0027d appreciate some comments next to the library entries here so we don\u0027t forget about it.\n\nBtw, there\u0027s active work on setting up prebuilt drop tests on main and released platforms (see ab/git_main-mainline-prebuilt-drop - I\u0027d share a doc about it but I noticed I don\u0027t have access to it myself).",
      "parentUuid": "3be6504e_04fa06fa",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "607aec3d_66a30fae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2024-03-28T00:11:56Z",
      "side": 1,
      "message": "I discussed this with Paul offline. In the current state, there is no nice way to conditionally drop these libraries based on the dessert version. I would like to propose this workaround in soong (aosp/3011798) for now.\n\nThis CL itself should be a no-op, but I have left some comments in Android.bp about the workaround that the host variants of these libraries will not be present in \u003e\u003dV snapshots.",
      "parentUuid": "f294a9fd_e71aa42a",
      "revId": "ba5a42786a9ca6004640a220d2d11e58e4ce8431",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}