{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "95e72de1_eab5f9bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T10:19:23Z",
      "side": 1,
      "message": "[CC Jiyong for the question about APEX stubs.]",
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a7e4b28_d61adef8",
        "filename": "dalvikvm/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-09T14:13:34Z",
      "side": 1,
      "message": "Unsure if the order matters here - we need libsigchain to be first among the DT_NEEDED entries, don\u0027t we? rprichard, enh, please advise.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da05a28b_26e6dc57",
        "filename": "dalvikvm/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-03-09T23:03:59Z",
      "side": 1,
      "message": "I don\u0027t believe the order here matters.",
      "parentUuid": "1a7e4b28_d61adef8",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1954ec5_67af1d21",
        "filename": "dalvikvm/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-03-10T09:32:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "da05a28b_26e6dc57",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42017f22_300596a7",
        "filename": "sigchainlib/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-09T14:13:34Z",
      "side": 1,
      "message": "Is it possible to use version_script instead? It would allow us to be more explicit with the symbols we expose globally. (It could be a different file from the one used for the APEX stubs, if necessary.)",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 31
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb711d37_2cb97521",
        "filename": "sigchainlib/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-03-09T23:03:59Z",
      "side": 1,
      "message": "The library needs to -Wl,-z,global so that the library appears in every linker namespace\u0027s \"global group\", which is necessary so that relocations for sig* APIs consistently prefer libsigchain.so over libc.so, even though an app\u0027s DSO doesn\u0027t depend on libsigchain.so.",
      "parentUuid": "42017f22_300596a7",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 31
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86fe30d1_eb64d113",
        "filename": "sigchainlib/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-03-10T09:32:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "eb711d37_2cb97521",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 31
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a7ce71a_1886c603",
        "filename": "sigchainlib/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T10:17:05Z",
      "side": 1,
      "message": "I take it then \"global\" in this sense is different from the \"global\" label in version script? It\u0027s a flag that put the symbols in the global group, but doesn\u0027t affect their visibilities like the version script does?\n\nIf so, I\u0027d appreciate if the comment could point that out more clearly.",
      "parentUuid": "eb711d37_2cb97521",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 31
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1117586_f3d176d8",
        "filename": "sigchainlib/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-03-11T00:37:09Z",
      "side": 1,
      "message": "That\u0027s right. -Wl,-z,global simply marks the binary with the DF_1_GLOBAL flag. It\u0027s independent from the version script.\n\nThe result is viewable using `readelf -d`. e.g.:\n\n    $ readelf -d \u003cpath-to-library\u003e\n    ...\n    0x000000006ffffffb (FLAGS_1)            Flags: NOW GLOBAL\n    ...",
      "parentUuid": "3a7ce71a_1886c603",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 36,
        "endChar": 31
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e637732e_036751f4",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-09T14:13:34Z",
      "side": 1,
      "message": "For the APEX stubs we don\u0027t need to export any symbols at all, but these will end up in them (if go/android-apex-build is still accurate). Does it work without any global symbols at all here (given this is only used as stubs.symbol_file)?",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd74519_9b38ba6a",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-03-09T14:23:31Z",
      "side": 1,
      "message": "I need at least one symbol, the tools generating the stubs complain without one.",
      "parentUuid": "e637732e_036751f4",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1697b53_9b57fbe5",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-03-09T23:03:59Z",
      "side": 1,
      "message": "The libsigchain.so on the device needs to expose the sig* APIs so it can interpose them. I think that means the sig* APIs need to be listed here.\n\nI think we also should rename these sigchain APIs so they don\u0027t collide with ordinary symbols somewhere else.\n\ne.g. If an app has its own EnsureFrontOfChain function, unrelated to signals or libsigchain, the app will generally end up calling into libsigchain instead of calling its own function, breaking the app. Ideally, the app wouldn\u0027t automatically be linked against a set of internal sigchain APIs, but I don\u0027t know if we can avoid that.\n\nAFAIK, this problem with EnsureFrontOfChain already exists in current versions of Android. e.g. On Q, if an app does this:\n\n    extern \"C\" int EnsureFrontOfChain() { return 42; }\n\n... then calls EnsureFrontOfChain, without hiding it in its DSO, and assuming Clang doesn\u0027t inline the call, then the app will instead call libsigchain\u0027s EnsureFrontOfChain.",
      "parentUuid": "5bd74519_9b38ba6a",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37c39037_42059b55",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-03-10T09:32:32Z",
      "side": 1,
      "message": "\u003e I think that means the sig* APIs need to be listed here.\nI thought this file was only used for creating stubs for the users to build-time link against? How else is it used which affects the linker?\n\n\u003e I think we also should rename these sigchain APIs so they don\u0027t collide with ordinary symbols somewhere else.\n\nDoesn\u0027t that apply also to sig* APIs? Like in your example, if an app has its own sigaction, due to libsigchain being present, they will actually call the one in libsigchain?",
      "parentUuid": "f1697b53_9b57fbe5",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00b5d9c3_5988bbcd",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T10:17:05Z",
      "side": 1,
      "message": "\u003e I need at least one symbol, the tools generating the stubs complain without one.\n\nCan we change that? +jiyong\n\n\u003e I think that means the sig* APIs need to be listed here.\n\nThis script is listed as stubs.symbol_file and nothing else, so I believe it\u0027s only used to build the APEX stubs. We need to expose both sig* and these functions in the implementation .so file, but nothing in the APEX stubs since there\u0027s no APEX API defined here.\n\n\u003e I think we also should rename these sigchain APIs so they don\u0027t collide with ordinary symbols somewhere else.\n\nIiuc we\u0027d ideally want to apply -Wl,-z,global to the sig* functions but not to EnsureFrontOfChain and the other functions here. Assuming we can\u0027t make that distinction I agree a namespace-like prefix that\u0027s unlikely to occur in apps would be good.\n\n\u003e AFAIK, this problem with EnsureFrontOfChain already exists in current versions of Android.\n\nThat means keeping the names doesn\u0027t introduce a de-facto app incompatibility, but it still may cause very weird behaviour for some unlucky app developer.",
      "parentUuid": "5bd74519_9b38ba6a",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "267f5ef1_697a6a2f",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-03-10T11:47:42Z",
      "side": 1,
      "message": "This file is used to create a stub library that is used when someone outside of the APEX has `shared_libs: [\"ligsigchain\"]`.\n\nThis library is not exposed to apps, so we basically don\u0027t need to worry about name collision, BUT I am not sure if \"-z,global\" nullifies the argument. Over to Ryan.\n\n#apex marker is not necessary here (it\u0027s not harmful though). That is required only when this library is an NDK library. In that case, the marker is used to hide a symbol to NDK clients, but not to APEX clients. Since this library is not an NDK library, it has only APEX clients and therefore we don\u0027t need to discriminate NDK/APEX APIs here.\n\n\u003e I need at least one symbol, the tools generating the stubs complain without one.\n\nThat\u0027s WAI. Why do you want to create a stub library having zero symbol? What would be the use of it?",
      "parentUuid": "00b5d9c3_5988bbcd",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7d8a492_3bf19f4a",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T12:20:02Z",
      "side": 1,
      "message": "This library overrides sigaction, sigprocmask etc from libc. Those are just overrides - they\u0027re part of the libc API and covered by its stubs.\n\nThen it defines the extra functions here, but those are only for ART internal use so shouldn\u0027t be listed here.\n\nHence the API is empty, but the library still needs to be loaded in app_process. (Indeed this is a quite odd special case, but here we are.)",
      "parentUuid": "267f5ef1_697a6a2f",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48fd8015_0e0ff956",
        "filename": "sigchainlib/libsigchain.map.txt",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2021-03-11T00:37:09Z",
      "side": 1,
      "message": "\u003e This library is not exposed to apps, so we basically don\u0027t need to worry about name collision, BUT I am not sure if \"-z,global\" nullifies the argument. Over to Ryan.\n\nYeah, the library being DF_1_GLOBAL (-z,global) makes it special, by placing it into the \"global group\" for all namespaces. A library that is loaded along with the executable, which is marked DF_1_GLOBAL, is treated the same way as the executable and LD_PRELOAD libraries. All three are part of the \"global group\" for all namespaces, so their symbols interpose everything, even though an app DSO doesn\u0027t explicitly link against them.\n\nThere isn\u0027t a mechanism for specifying just the sig* symbols in libsigchain.so as special interposing symbols.\n\nIt looks like the EnsureFrontOfChain et al functions have been overriding app DSOs since M, so it\u0027s not a recent thing.\n\nI think the change now is OK.\n\nI can\u0027t remember if we ever investigated whether sanitizers also want to hook sig* APIs. The sanitizers intercept a bunch of APIs, and I see interceptors for the sig* APIs. Previously, sigchain (i.e. the executable, app_process) had highest priority (i.e. relocations to sig* resolve to app_process), and then sigchain forwarded to something else using RTLD_NEXT. There was a problem with RTLD_NEXT, though (b/135284876), so in R, sigchain simply forwards to libc.so explicitly, which means that an LD_PRELOAD library can\u0027t currently interpose sig*.\n\nThat changes with libsigchain.so. A LD_PRELOAD library would hook sig* first, and then if it used RTLD_NEXT, it would forward to libsigchain.so, which would call libc.so. But maybe a sanitizer would want to be layered between sigchain and libc. Even if so, this CL isn\u0027t a regression from R, where (it appears) LD_PRELOAD can\u0027t interpose sig* APIs in app_process.",
      "parentUuid": "e7d8a492_3bf19f4a",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "333b8e8c_4a1de64b",
        "filename": "sigchainlib/sigchain_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 234,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2021-03-10T10:17:05Z",
      "side": 1,
      "message": "Was the test broken? Can this be done separately?",
      "range": {
        "startLine": 234,
        "startChar": 2,
        "endLine": 234,
        "endChar": 17
      },
      "revId": "4b0c2ea9734c6b57ddab24d43efaa19c3159ae99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}