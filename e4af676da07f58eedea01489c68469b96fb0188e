{
  "comments": [
    {
      "key": {
        "uuid": "ffc9f4e9_da70755d",
        "filename": "compiler/dex/quick/arm64/target_arm64.cc",
        "patchSetId": 11
      },
      "lineNbr": 152,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-06-12T16:05:06Z",
      "side": 1,
      "message": "This is broken (my fault - it was also previously broken).  A recent revision of the RegStorage encoding which moved the FP bit failed to update this code.  A core register should set a corresponding bit in 0..31, while a fp reg should set in 32..63.  Before the RegStorage encoding update, this code achieved that.  Now, we\u0027ll need something like what\u0027s done in x86\u0027s GetRegMaskCommon().",
      "revId": "e4af676da07f58eedea01489c68469b96fb0188e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fd6e483_d3c7be47",
        "filename": "compiler/dex/quick/arm64/target_arm64.cc",
        "patchSetId": 11
      },
      "lineNbr": 152,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-06-12T16:24:27Z",
      "side": 1,
      "message": "Should this be\n\n  (reg.IsFloat() ? kArm64FPReg0 : 0) + reg.GetRegNum())\n\nor do we need to take the StorageSize() into account as on X86_64?",
      "parentUuid": "ffc9f4e9_da70755d",
      "revId": "e4af676da07f58eedea01489c68469b96fb0188e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df74307d_78a4fd2c",
        "filename": "compiler/dex/quick/arm64/target_arm64.cc",
        "patchSetId": 11
      },
      "lineNbr": 152,
      "author": {
        "id": 1001578
      },
      "writtenOn": "2014-06-12T16:30:09Z",
      "side": 1,
      "message": "Yes -\n  (reg.IsFloat()....\nlooks good.  No, we don\u0027t need to take StorageSize() into account (at least until arm64 starts using vector registers for non-floating point purposes).",
      "parentUuid": "7fd6e483_d3c7be47",
      "revId": "e4af676da07f58eedea01489c68469b96fb0188e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}