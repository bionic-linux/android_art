{
  "comments": [
    {
      "key": {
        "uuid": "569062ca_81b79ca0",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2873,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-12T15:27:21Z",
      "side": 1,
      "message": "So Bind() doesn\u0027t count towards the \"single\" instruction that you can emit?\n\nBut having the Bind() before the guard would be broken because creating the guard can emit a veneer, right?",
      "range": {
        "startLine": 2873,
        "startChar": 8,
        "endLine": 2873,
        "endChar": 31
      },
      "revId": "4fade1f4f33c26e3e6e2b2366154bfe3f276bb88",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb005ff1_1bc07b9e",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2873,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2015-11-12T15:51:43Z",
      "side": 1,
      "message": "The `CheckScope` scopes only check the size of what is actually generated in the buffer. So `Bind`, which does not emit anything (it only attaches a label to the current position) does not impact that.\n\nYour second comment is correct.\nFor reference, the scope constructor checks that the underlying code buffer has enough space for `size` bytes (here 4 bytes), checks whether any pools need to be emitted before `current_position + size`, and then blocks the pools.\n\nNote that such guard scopes can be created for any size of code. So if that helps we could put this whole block of code under one guard that would guarantee nothing is emitted in the middle.",
      "parentUuid": "569062ca_81b79ca0",
      "range": {
        "startLine": 2873,
        "startChar": 8,
        "endLine": 2873,
        "endChar": 31
      },
      "revId": "4fade1f4f33c26e3e6e2b2366154bfe3f276bb88",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6bf9630_065f5cc1",
        "filename": "compiler/optimizing/code_generator_arm64.cc",
        "patchSetId": 2
      },
      "lineNbr": 2873,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2015-11-12T15:55:02Z",
      "side": 1,
      "message": "No, that\u0027s not necessary the relative patcher can deal with ADRP and LDR being further away from each other.",
      "parentUuid": "fb005ff1_1bc07b9e",
      "range": {
        "startLine": 2873,
        "startChar": 8,
        "endLine": 2873,
        "endChar": 31
      },
      "revId": "4fade1f4f33c26e3e6e2b2366154bfe3f276bb88",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}