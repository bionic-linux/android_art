{
  "comments": [
    {
      "key": {
        "uuid": "c43d6a4e_234ff456",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-11T11:08:21Z",
      "side": 1,
      "message": "So this methods returns either a length or an array. That\u0027s very bizarre, could we break it down into two different methods?",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 44
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4b0ae55_d1d4e426",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T15:11:17Z",
      "side": 1,
      "message": "Well please note that the bizarre behavior was already there in the original (length or array reference). I just added the ability to go back to the length over a new array\nso that e.g.\n\n\"n\" vs \"new int[n]\"\n\nmap to the same length. Since it is really only used at L156/157, I feel breaking up is a bit overkill, but I am open for suggestion on better comments to make the bizarre behavior more clear\n\n[I stared at it too for a while while learning this code, but it starts to make more sense after going through many examples]",
      "parentUuid": "c43d6a4e_234ff456",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 44
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24f726e3_c636241b",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 1170,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-11T11:08:21Z",
      "side": 1,
      "message": "Do you have a less generic name for this?",
      "range": {
        "startLine": 1170,
        "startChar": 49,
        "endLine": 1170,
        "endChar": 56
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a64628_ebb81101",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 1170,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T15:11:17Z",
      "side": 1,
      "message": "I am using the same name as used in range checking\n(context is where you use it, instruction is it value).\n\nI could call it calling site or something like that. For now I just improved the comment in the hope that makes it more clear.",
      "parentUuid": "24f726e3_c636241b",
      "range": {
        "startLine": 1170,
        "startChar": 49,
        "endLine": 1170,
        "endChar": 56
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0434e264_85f84485",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 1422,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-11T11:08:21Z",
      "side": 1,
      "message": "Do we still need this?",
      "range": {
        "startLine": 1417,
        "startChar": 0,
        "endLine": 1422,
        "endChar": 7
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64175efc_3518b0b0",
        "filename": "compiler/optimizing/bounds_check_elimination.cc",
        "patchSetId": 4
      },
      "lineNbr": 1422,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T15:11:17Z",
      "side": 1,
      "message": "Yes, the local analysis uses a few nifty tricks in e.g. straight line code (if (i \u003c x) a[i] without the context of a loop). I actually ran a test that check fails if local eliminates a bound that induction can *not* remove, and found those cases. So let\u0027s keep both.\n\nI do plan to remove the induction variable recognizer in this file though (used for the dynamic case). That now seems a lot of redundancy.",
      "parentUuid": "0434e264_85f84485",
      "range": {
        "startLine": 1417,
        "startChar": 0,
        "endLine": 1422,
        "endChar": 7
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a44076d4_22cdb09c",
        "filename": "compiler/optimizing/bounds_check_elimination.h",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-11T11:08:21Z",
      "side": 1,
      "message": "I\u0027d get rid of this constructor.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 92
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b72a4b_10e7841a",
        "filename": "compiler/optimizing/bounds_check_elimination.h",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T15:11:17Z",
      "side": 1,
      "message": "I will! I needed it to keep the unit tests of BCE running, but I plan to plug in induction analysis there too to get the full setting in the unit tests",
      "parentUuid": "a44076d4_22cdb09c",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 92
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24f726e3_a62b28b1",
        "filename": "compiler/optimizing/induction_var_range.h",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-11T11:08:21Z",
      "side": 1,
      "message": "nit: one per line",
      "range": {
        "startLine": 73,
        "startChar": 24,
        "endLine": 74,
        "endChar": 86
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_eccf8b8f",
        "filename": "compiler/optimizing/induction_var_range.h",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T15:11:17Z",
      "side": 1,
      "message": "You are right! Over the years I started to develop my own aligned layout of parameters, but I should adhere to the team style. Changed, also below.",
      "parentUuid": "24f726e3_a62b28b1",
      "range": {
        "startLine": 73,
        "startChar": 24,
        "endLine": 74,
        "endChar": 86
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24f726e3_86302c1e",
        "filename": "test/530-checker-loops/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2015-09-11T11:08:21Z",
      "side": 1,
      "message": "Java code starts with lower case for methods.",
      "range": {
        "startLine": 32,
        "startChar": 21,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4b0ae55_f1cf688f",
        "filename": "test/530-checker-loops/src/Main.java",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2015-09-11T15:11:17Z",
      "side": 1,
      "message": "You are right again. One should not mix Java and C++ too often :-)",
      "parentUuid": "24f726e3_86302c1e",
      "range": {
        "startLine": 32,
        "startChar": 21,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "a0e4c2920b2be8e6f69e6949fe4b0d8dd2447a03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}