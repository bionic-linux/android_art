{
  "comments": [
    {
      "key": {
        "uuid": "548b02a3_40dcb035",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-01-28T22:40:29Z",
      "side": 1,
      "message": "This seems a clever way of doing the compare(), but what do I know, I worked for intel :-). So please be nice, my first ARM code here.",
      "revId": "47fae318e5b20e55a1c4927b74ce061b34a2fb20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94ed7a3a_7fce8f88",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-01-28T23:27:21Z",
      "side": 1,
      "message": "This doesn\u0027t change cflags?",
      "range": {
        "startLine": 298,
        "startChar": 0,
        "endLine": 298,
        "endChar": 58
      },
      "revId": "47fae318e5b20e55a1c4927b74ce061b34a2fb20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "910e6c27_f7aba092",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-01-29T00:43:25Z",
      "side": 1,
      "message": "No, for ARM64 there is no MOV + setflags. If you are referring to the issue we have recently discussed that applies only to ARM Thumb2 code and in particular when instructions that set flags are used inside an IT block.",
      "parentUuid": "94ed7a3a_7fce8f88",
      "range": {
        "startLine": 298,
        "startChar": 0,
        "endLine": 298,
        "endChar": 58
      },
      "revId": "47fae318e5b20e55a1c4927b74ce061b34a2fb20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51207491_15a734cc",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1072549
      },
      "writtenOn": "2016-01-29T00:43:25Z",
      "side": 1,
      "message": "I guess we can do this without the MOV as follows:\n\nRegister zero_register \u003d is_long ? xzr : wzr;\n\n__Cinc(out, zero_register, gt);\n__Cinv(out, out, lt);\n\nPlease note that for ARM64 we have a dedicated zero register:\n- XZR - 64bit register view\n- WZR - 32bit register view\n\nHere are a couple of useful presentations on the ARM64 ISA:\nhttp://malideveloper.arm.com/downloads/ARMv8_InstructionSetOverview.pdf\nhttp://malideveloper.arm.com/downloads/ARMv8_64_bit_migration.pdf",
      "range": {
        "startLine": 299,
        "startChar": 1,
        "endLine": 300,
        "endChar": 86
      },
      "revId": "47fae318e5b20e55a1c4927b74ce061b34a2fb20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "548b02a3_a3c9fe36",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-01-29T01:01:37Z",
      "side": 1,
      "message": "Pure genius! I like it, very compact.\nThanks for the links. I even book an ARM book :-)",
      "parentUuid": "51207491_15a734cc",
      "range": {
        "startLine": 299,
        "startChar": 1,
        "endLine": 300,
        "endChar": 86
      },
      "revId": "47fae318e5b20e55a1c4927b74ce061b34a2fb20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_c0419294",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-01-29T01:22:56Z",
      "side": 1,
      "message": "Hmm. I am having trouble setting the rn to zero reg.\nThe code breaks on the 3th assertion below. What am I missing (btw. we don\u0027t need the is_long, since the output is 32-bit, so we can use wzr in all cases)\n\nvoid Cinc(const Register\u0026 rd, const Register\u0026 rn, Condition cond) {\n    VIXL_ASSERT(allow_macro_instructions_);\n    VIXL_ASSERT(!rd.IsZero());\n    VIXL_ASSERT(!rn.IsZero());\n    SingleEmissionCheckScope guard(this);\n    cinc(rd, rn, cond);\n  }",
      "parentUuid": "548b02a3_a3c9fe36",
      "range": {
        "startLine": 299,
        "startChar": 1,
        "endLine": 300,
        "endChar": 86
      },
      "revId": "47fae318e5b20e55a1c4927b74ce061b34a2fb20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5422228b_08ad87a8",
        "filename": "compiler/optimizing/intrinsics_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-01-29T01:35:01Z",
      "side": 1,
      "message": "Ah, I guess they force you to use the Cset, which is an alias for this case when rn is zero. Bit elaborate, but okay.\n\nPTAL",
      "parentUuid": "f465d6c4_c0419294",
      "range": {
        "startLine": 299,
        "startChar": 1,
        "endLine": 300,
        "endChar": 86
      },
      "revId": "47fae318e5b20e55a1c4927b74ce061b34a2fb20",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}