{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "12952e1d_23408ac2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-24T11:16:40Z",
      "side": 1,
      "message": "This is rather complex logic, what is the speedup?\n\nIt seems that to have a significant speedup, the range of of methods with the same name but different signature should be large (at least hundreds not tens). Is this a common case?\n\nAlso, to avoid name-based comparison altogether, maybe we can build a hash table of the methods and search by hash?",
      "range": {
        "startLine": 10,
        "startChar": 35,
        "endLine": 12,
        "endChar": 30
      },
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea1bc35_c51966ca",
        "filename": "libdexfile/dex/dex_file-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-24T11:16:40Z",
      "side": 1,
      "message": "utf8, not mutf8?",
      "range": {
        "startLine": 201,
        "startChar": 85,
        "endLine": 201,
        "endChar": 90
      },
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c910c51b_35358520",
        "filename": "libdexfile/dex/signature-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-24T09:57:57Z",
      "side": 1,
      "message": "Should this be \u0027\u0026\u0026\u0027 ?",
      "range": {
        "startLine": 82,
        "startChar": 27,
        "endLine": 82,
        "endChar": 30
      },
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1454836d_2772705d",
        "filename": "libdexfile/dex/signature-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-24T10:46:29Z",
      "side": 1,
      "message": "No, unfortunately \u0027L\u0027 in shorty can refer to an array type, and \u0027[\u0027 is after \u0027S\u0027, \u0027Z\u0027 and \u0027V\u0027. (And I did not want to over-optimize this to avoid the string comparison for other cases.)",
      "parentUuid": "c910c51b_35358520",
      "range": {
        "startLine": 82,
        "startChar": 27,
        "endLine": 82,
        "endChar": 30
      },
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67327196_4c658b89",
        "filename": "libdexfile/dex/signature-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-24T09:57:57Z",
      "side": 1,
      "message": "Can you add a comment of what a shorty size of 1 means?",
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6405b293_169ff65c",
        "filename": "libdexfile/dex/signature-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-24T10:46:29Z",
      "side": 1,
      "message": "I\u0027d think this is obvious as the shorty[0] is used for the return type above.\n\nTo understand the code, you need to understand what shorty stands for anyway. Or should we add links to https://source.android.com/devices/tech/dalvik/dex-format#shortydescriptor all around the code?",
      "parentUuid": "67327196_4c658b89",
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d25fc0a_05ebdeef",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 701,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-06-24T09:57:57Z",
      "side": 1,
      "message": "why does this need to be \u0027\u0026\u0026\u0027 ?",
      "range": {
        "startLine": 701,
        "startChar": 68,
        "endLine": 701,
        "endChar": 69
      },
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "505e9b9e_46686e26",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 701,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-24T10:46:29Z",
      "side": 1,
      "message": "This is more generic and allows binding to temporary objects (which yield const-qualified deduced `Compare`).",
      "parentUuid": "0d25fc0a_05ebdeef",
      "range": {
        "startLine": 701,
        "startChar": 68,
        "endLine": 701,
        "endChar": 69
      },
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db7bd0fa_2a6a4a11",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 2
      },
      "lineNbr": 827,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-24T11:16:40Z",
      "side": 1,
      "message": "Nit: why not pass size_t to ClassMemberBinarySearch? Or if that\u0027s inconvenient, then make ranges store uint32_t and convert on initialization.",
      "range": {
        "startLine": 826,
        "startChar": 0,
        "endLine": 827,
        "endChar": 62
      },
      "revId": "464cd45de55ae94de3d6c99a9e8ff2be69b7cca2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}