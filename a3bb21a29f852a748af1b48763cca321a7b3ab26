{
  "comments": [
    {
      "key": {
        "uuid": "346221c1_d7795ce3",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-06-15T14:27:54Z",
      "side": 1,
      "message": "Personally, I would have been happy with three bools.",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 164,
        "endChar": 2
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "346221c1_f779006a",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-06-16T11:21:23Z",
      "side": 1,
      "message": "Seems a bit overkill.",
      "parentUuid": "346221c1_d7795ce3",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 164,
        "endChar": 2
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "743659c9_c941b146",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-06-16T11:54:49Z",
      "side": 1,
      "message": "10 parameters for CompileMethod() are bad enough. Why would you want 12?",
      "parentUuid": "346221c1_f779006a",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 164,
        "endChar": 2
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "346221c1_57f8ecb9",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 4
      },
      "lineNbr": 164,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2016-06-16T13:28:12Z",
      "side": 1,
      "message": "3 bools in that class. You can keep EnabledCompilers, I agree 10 parameters are pretty bad already.",
      "parentUuid": "743659c9_c941b146",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 164,
        "endChar": 2
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "346221c1_57b70c3b",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 4
      },
      "lineNbr": 663,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2016-06-16T11:21:23Z",
      "side": 1,
      "message": "I know that this is copy paste, but why is the extract only reference here?",
      "range": {
        "startLine": 663,
        "startChar": 7,
        "endLine": 663,
        "endChar": 29
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b49451c2_5ba663d6",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 4
      },
      "lineNbr": 663,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-06-16T11:54:49Z",
      "side": 1,
      "message": "For extract-only (i.e. kVerifyAtRuntime) we prefer not to compile anything, not even the JNI stubs.",
      "parentUuid": "346221c1_57b70c3b",
      "range": {
        "startLine": 663,
        "startChar": 7,
        "endLine": 663,
        "endChar": 29
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "145fddcc_e9579112",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-06-15T15:23:44Z",
      "side": 1,
      "message": "Could you explain what you mean by this?",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "747f394d_cac9b716",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-06-16T09:40:12Z",
      "side": 1,
      "message": "A class SHALL NOT be defined twice in a dex file. Class definition\u0027s items SHALL refer to field and method ids with class_idx_ of that class.\n\nGiven that we shard on class definitions, this is enough; however, we would be fine even if sharding on method definitions because we also forbid unordered method definitions in a class def, filter out duplicates within \"direct\" and \"virtual\" and forbid the same method index in both \"direct\" and \"virtual\".",
      "parentUuid": "145fddcc_e9579112",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "540315bf_441c8bba",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-06-16T15:07:56Z",
      "side": 1,
      "message": "Thanks.\n\nNow since you touch the whole setup: which part of the spec forbids using the same data offset for two separate methods? What\u0027s the argument that we\u0027re fine running the dex-to-dex compiler in parallel (I believe we are OK)?",
      "parentUuid": "747f394d_cac9b716",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "346221c1_daa8a18e",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-06-16T15:21:43Z",
      "side": 1,
      "message": "Hmm, that\u0027s an interesting question. Why do you think we are OK?\n(If two threads try to quicken the same dex instruction, it can produce wrong results.)",
      "parentUuid": "540315bf_441c8bba",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "540315bf_447beba7",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-06-16T15:30:04Z",
      "side": 1,
      "message": "My best guess: Because Quickening works over symbols that include a class name.\n\nThen for it to be resolvable, the receiver (either this or a parameter/field value) must be a subclass of the symbol\u0027s class, which means the layout of it is fixed.\n\nSo even though we have a race, we should be writing the same value.\n\n\nNow what I think *may* be wrong (but isn\u0027t a race): if the code is OK for one class, but not another. Then quickening may or may not screw up the access-checks interpreter.",
      "parentUuid": "346221c1_daa8a18e",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "540315bf_848503b6",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-06-16T15:31:25Z",
      "side": 1,
      "message": "Of course that reasoning is half-assed, thinking about it. No reason for \"overlap\" to start at the same offset, so \"seeing\" the same instructions. :-(\n\nMaybe we should tighten the spec, or give a signal from the dex file verifier to punt compiling.",
      "parentUuid": "540315bf_447beba7",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "346221c1_ba012d68",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-06-16T17:04:57Z",
      "side": 1,
      "message": "There is no reason why two methods cannot share the same code_item, right? (The code item does not need to reference the declaring class in any way.) And trying to quicken the same code_item from two different threads shall race.",
      "parentUuid": "540315bf_848503b6",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "540315bf_adb0eba2",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-06-16T17:37:03Z",
      "side": 1,
      "message": "My argument was that yes it\u0027s a race, but it should quicken to the same index, if it quickens.\n\n(That\u0027s for the case that it\u0027s the exact code-item. The spec doesn\u0027t say [at least that I could find] that code-items may not overlap.)",
      "parentUuid": "346221c1_ba012d68",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "346221c1_fa300550",
        "filename": "compiler/driver/compiler_driver.h",
        "patchSetId": 4
      },
      "lineNbr": 697,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-06-16T18:04:11Z",
      "side": 1,
      "message": "As we\u0027ve seen before, quickening is not atomic. While one thread is quickening, another thread can see the non-quickened opcode and then the quickened offset instead of the index.",
      "parentUuid": "540315bf_adb0eba2",
      "range": {
        "startLine": 697,
        "startChar": 14,
        "endLine": 697,
        "endChar": 61
      },
      "revId": "a3bb21a29f852a748af1b48763cca321a7b3ab26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}