{
  "comments": [
    {
      "key": {
        "uuid": "04cafddd_a6580633",
        "filename": "compiler/dex/frontend.cc",
        "patchSetId": 1
      },
      "lineNbr": 874,
      "author": {
        "id": 1030338
      },
      "writtenOn": "2014-07-02T18:32:11Z",
      "side": 1,
      "message": "Removing kNullCheckElimination from here and doing: mma clean-oat \u0026\u0026 mma will hit the DCHECK(target_lir) issue.\n\nYou can also try running test 082 and it will fail in a similar way.",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "445eb5fe_f80491af",
        "filename": "compiler/dex/quick/arm64/int_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 500,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-07-03T11:48:12Z",
      "side": 1,
      "message": "Do we really need this? Shouldn\u0027t we just LoadValueWide() below and get rid of the As64BitReg()?",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "445315fd_b3a5c2a9",
        "filename": "compiler/dex/quick/arm64/int_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 500,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-03T17:18:28Z",
      "side": 1,
      "message": "I agree, this does not make sense. We\u0027ll change it as suggested.",
      "parentUuid": "445eb5fe_f80491af",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_4aacb78c",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 898,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T23:43:53Z",
      "side": 1,
      "message": "I was trying to find all cases where we get a 32b index.",
      "range": {
        "startLine": 898,
        "startChar": 2,
        "endLine": 898,
        "endChar": 26
      },
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c6c9d8_0517525f",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 931,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-02T18:35:39Z",
      "side": 1,
      "message": "The change above and the three analogous companions below are necessary to avoid problems with reference widths. Notice that without these changes, we would be asserting that references must be 32-bit wide. Notice that the one above is a hack, but a proper fix for this issue should probably come through a separate patch.",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c051c0_86750ce0",
        "filename": "compiler/dex/quick/arm64/utility_arm64.cc",
        "patchSetId": 1
      },
      "lineNbr": 931,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T23:43:53Z",
      "side": 1,
      "message": "This means we reach kReference through something that is not Load/Store*Ref*, and that is wrong, IMHO. I marked two cases in another file.",
      "parentUuid": "e4c6c9d8_0517525f",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "445eb5fe_183dc549",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1702,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-07-03T11:48:12Z",
      "side": 1,
      "message": "EvalLoc() calls EvalLocWide() for wide location. Why do we need to split this instead of initializing rl_result above as before?",
      "range": {
        "startLine": 1702,
        "startChar": 4,
        "endLine": 1702,
        "endChar": 67
      },
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "246381c5_3d26f720",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1702,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-03T17:18:28Z",
      "side": 1,
      "message": "You are right, this line can be moved above.",
      "parentUuid": "445eb5fe_183dc549",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a495b1be_1be13bb1",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1706,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-07-03T11:48:12Z",
      "side": 1,
      "message": "These can be merged, the LoadBaseIndexed() is correct for x86/x86_64 as well.",
      "range": {
        "startLine": 1703,
        "startChar": 0,
        "endLine": 1706,
        "endChar": 75
      },
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "246381c5_bdc207cb",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1706,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-03T17:18:28Z",
      "side": 1,
      "message": "OK, will do.",
      "parentUuid": "a495b1be_1be13bb1",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c051c0_26853881",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1716,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T23:43:53Z",
      "side": 1,
      "message": "Should be LoadRefIndexed when you have a ref.",
      "range": {
        "startLine": 1714,
        "startChar": 4,
        "endLine": 1716,
        "endChar": 56
      },
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "445eb5fe_78340164",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1757,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2014-07-03T11:48:12Z",
      "side": 1,
      "message": "These can be merged, the StoreBaseIndexed() is correct for x86/x86_64 as well.",
      "range": {
        "startLine": 1754,
        "startChar": 0,
        "endLine": 1757,
        "endChar": 75
      },
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04cafddd_7bf4e364",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1757,
      "author": {
        "id": 1037505
      },
      "writtenOn": "2014-07-03T17:18:28Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "445eb5fe_78340164",
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c385c9_aa89eb19",
        "filename": "compiler/dex/quick/gen_invoke.cc",
        "patchSetId": 1
      },
      "lineNbr": 1767,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2014-07-03T23:43:53Z",
      "side": 1,
      "message": "Should be StoreRefIndexed if you have a ref.",
      "range": {
        "startLine": 1766,
        "startChar": 4,
        "endLine": 1767,
        "endChar": 56
      },
      "revId": "13fcb988e341051ddcfaeefacfd104bb41226004",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}