{
  "comments": [
    {
      "key": {
        "uuid": "9cafbcbe_ba0db7f2",
        "filename": "runtime/mirror/class.cc",
        "patchSetId": 4
      },
      "lineNbr": 479,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-02T14:30:10Z",
      "side": 1,
      "message": "Actually I seem to recall I pointed out this method did not work with interfaces, as it doesn\u0027t check for default method inheritance. You can look at the previous CL for the comment history.",
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ea51c0c_0ed752bd",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3867,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-02T01:51:33Z",
      "side": 1,
      "message": "How does the Find* below get us a better error reporting?",
      "range": {
        "startLine": 3867,
        "startChar": 59,
        "endLine": 3867,
        "endChar": 71
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9637b1cb_3374f088",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3867,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-02T10:15:38Z",
      "side": 1,
      "message": "This is traditional and helps with screwy bytecode. It will tell you that, yes, a method exists, but that it\u0027s called incorrectly. This significantly helps debugging, as locally it\u0027s hard to see the differences.",
      "parentUuid": "5ea51c0c_0ed752bd",
      "range": {
        "startLine": 3867,
        "startChar": 59,
        "endLine": 3867,
        "endChar": 71
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d8d4c9c_8837c412",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3867,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-02T14:30:10Z",
      "side": 1,
      "message": "The intent of the new FindClassMethod,FindInterfaceMethod is that it always returns non-null if the method exists (even if it\u0027s private). Then the callers do the access checks.\n\nSo other than an ICCE (changing class\u003c-\u003einterface) we should never need to worry about getting null. For ICCE do we really need to know which method it *would\u0027ve* resolved? I don\u0027t think it is obvious we need that extra complexity.\n\nAlso see below.",
      "parentUuid": "9637b1cb_3374f088",
      "range": {
        "startLine": 3867,
        "startChar": 59,
        "endLine": 3867,
        "endChar": 71
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6331b6e5_27a44d73",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3867,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-08-02T17:08:59Z",
      "side": 1,
      "message": "\u003e The intent of the new FindClassMethod,FindInterfaceMethod is that it always returns non-null if the method exists (even if it\u0027s private). Then the callers do the access checks.\n\nThis isn\u0027t true. FindInterfaceMethod currently only returns public methods. Whether this is desirable is another question but it is the current state of the world.\n\n\u003e So other than an ICCE (changing class\u003c-\u003einterface) we should never need to worry about getting null. For ICCE do we really need to know which method it *would\u0027ve* resolved? I don\u0027t think it is obvious we need that extra complexity.\n\nThis is probably pretty useful when using things like proguard that make every method have the same name. Knowing that translation failed could be useful (let you figure out that you need to keep around some methods or something).",
      "parentUuid": "9d8d4c9c_8837c412",
      "range": {
        "startLine": 3867,
        "startChar": 59,
        "endLine": 3867,
        "endChar": 71
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "303da000_962690b9",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3867,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-02T18:09:17Z",
      "side": 1,
      "message": "Can you add Andreas\u0027s explanation as a code comment?",
      "parentUuid": "6331b6e5_27a44d73",
      "range": {
        "startLine": 3867,
        "startChar": 59,
        "endLine": 3867,
        "endChar": 71
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a53aac5e_846c9d75",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3870,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-02T01:51:33Z",
      "side": 1,
      "message": "I am not found of allowing this without a good reason. Long term this adds complexity. I guess depends on what \"better\" means above and if we really need it or is a nice to have.",
      "range": {
        "startLine": 3870,
        "startChar": 20,
        "endLine": 3870,
        "endChar": 48
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "885c7133_53426eb2",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3870,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-02T10:15:38Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "a53aac5e_846c9d75",
      "range": {
        "startLine": 3870,
        "startChar": 20,
        "endLine": 3870,
        "endChar": 48
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c53edaa_50483aa9",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3870,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-02T14:30:10Z",
      "side": 1,
      "message": "I think the problem it it\u0027s under-defined *and* under-tested what it means to call them in reverse. If it\u0027s totally normal and expected then we should\u0027ve documented that in class.h and made sure that it works in both cases, and there should\u0027ve been tests that it works in both cases.\n\nIn fact, one could do a\n\n  DCHECK(FindInterfaceMethod(x)) in FindClassMethod\n\nand a \n \n  DCHECK(FindClassMethod(x)) in FindInterfaceMethod\n\nand this will shake out a lot of bugs where we call one unexpectedly from the other.\n\nBetter yet there should\u0027ve been JNI tests to explicitly call these.",
      "parentUuid": "885c7133_53426eb2",
      "range": {
        "startLine": 3870,
        "startChar": 20,
        "endLine": 3870,
        "endChar": 48
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8fb8f57_4b63f0aa",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3870,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-08-02T17:08:59Z",
      "side": 1,
      "message": "That seems like much to large for a CL that needs to be as low risk as possible like this one. Good thing for future work though.",
      "parentUuid": "9c53edaa_50483aa9",
      "range": {
        "startLine": 3870,
        "startChar": 20,
        "endLine": 3870,
        "endChar": 48
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70169402_a59cc17e",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3873,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-02T01:51:33Z",
      "side": 1,
      "message": "Let\u0027s not reuse the same variable if this must fail. Introduce a new one.",
      "range": {
        "startLine": 3873,
        "startChar": 6,
        "endLine": 3873,
        "endChar": 16
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5216dab_359c0e75",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3873,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-02T10:15:38Z",
      "side": 1,
      "message": "It\u0027s reused so that the checks can be reused. Introducing a new one would exactly negate all of that.",
      "parentUuid": "70169402_a59cc17e",
      "range": {
        "startLine": 3873,
        "startChar": 6,
        "endLine": 3873,
        "endChar": 16
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd67fe10_692f6ff0",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3873,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-02T18:09:17Z",
      "side": 1,
      "message": "The code is hard to read because you expect this method to return null after this point yet there\u0027s no clear sign which of the statements below will cause that.\n\nI also don\u0027t follow your comment on L3959. Why would you return a possibly valid method when you assert this should fail? What does failure mean here?",
      "parentUuid": "b5216dab_359c0e75",
      "range": {
        "startLine": 3873,
        "startChar": 6,
        "endLine": 3873,
        "endChar": 16
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4acd5ca8_6ec8057e",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3959,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2017-08-02T01:51:33Z",
      "side": 1,
      "message": "see the comment above. Shouldn\u0027t we just return null and ignore res_method all together?",
      "range": {
        "startLine": 3958,
        "startChar": 2,
        "endLine": 3959,
        "endChar": 20
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "104368e6_82f516bb",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3959,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2017-08-02T10:15:38Z",
      "side": 1,
      "message": "Disagree. Conservatively we should maintain this for debuggability.\n\nIf there\u0027s one thing to complain here it\u0027s that the !must_fail check isn\u0027t documented.",
      "parentUuid": "4acd5ca8_6ec8057e",
      "range": {
        "startLine": 3958,
        "startChar": 2,
        "endLine": 3959,
        "endChar": 20
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eee21b8_6f876008",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3959,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-02T14:30:10Z",
      "side": 1,
      "message": "this:\n\n  DCHECK(!must_fail) \u003c\u003c PrettyMethod(res_method)",
      "parentUuid": "104368e6_82f516bb",
      "range": {
        "startLine": 3958,
        "startChar": 2,
        "endLine": 3959,
        "endChar": 20
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1ea72d1_7df794b9",
        "filename": "runtime/verifier/method_verifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 3959,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2017-08-02T17:08:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6eee21b8_6f876008",
      "range": {
        "startLine": 3958,
        "startChar": 2,
        "endLine": 3959,
        "endChar": 20
      },
      "revId": "523fd3440eff87601e97a8ca6dad71c82544e925",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}