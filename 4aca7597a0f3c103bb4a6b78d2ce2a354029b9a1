{
  "comments": [
    {
      "key": {
        "uuid": "fa36d45d_470ad5e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-03-17T15:54:29Z",
      "side": 1,
      "message": "(This was a top-level comment, you may have missed it, so putting it here instead)\n\nCurious whether alternatively we could not run the transactional interpreter with assume-verified?",
      "revId": "4aca7597a0f3c103bb4a6b78d2ce2a354029b9a1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99267711_0651e36e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-03-17T16:06:40Z",
      "side": 1,
      "message": "I don\u0027t understand. Did you want me to copy this \"top-level-comment\" to the SetAccessFlagsDuringLinking()? Than I guess it would be appropriate to clutter all the other changes to Class field setters with the same.\n\nNot running the transactional interpreter for assume-verified means not initializing many classes. And as we previously discussed offline, trying to do the initialization early in zygote has potential impact on memory use by stuff we will not be able to unload the way we do in ImageWriter.",
      "parentUuid": "fa36d45d_470ad5e9",
      "revId": "4aca7597a0f3c103bb4a6b78d2ce2a354029b9a1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47971e08_1d3c9173",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 3
      },
      "lineNbr": 223,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-03-17T17:56:23Z",
      "side": 1,
      "message": "Why not following the existing pattern with templates?",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 223,
        "endChar": 87
      },
      "revId": "4aca7597a0f3c103bb4a6b78d2ce2a354029b9a1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a77c4ff8_ca7ceae9",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 3
      },
      "lineNbr": 223,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-03-18T09:52:09Z",
      "side": 1,
      "message": "The prevalent pattern in this CL is to specify `\u003c/*kTransactionActive\u003d*/ false, /*kCheckTransaction\u003d*/ false\u003e` but that does not work for SetAccessFlags() which is used also after class creation (\"linking\"). I could have added the two template arguments but, as I didn\u0027t want to do the SetAccessFlagsDCheck() [*], I decided to use the other common pattern, i.e. \"DuringLinking\" which is used to provide different DCHECK()s. It was previously used only for getters but I think that setters using it is fine.\n\n[*] I want to eventually remove the unnecessary SetStatusForPrimitiveOrArray() call from ClassLinker::FinishArrayClassSetup(), but at this moment it would still trigger some DCHECK()s.",
      "parentUuid": "47971e08_1d3c9173",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 223,
        "endChar": 87
      },
      "revId": "4aca7597a0f3c103bb4a6b78d2ce2a354029b9a1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8192b000_2f66d0ff",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-03-17T15:39:20Z",
      "side": 1,
      "message": "Why do you use kCheckTransaction\u003dfalse (here and below)? Is the debug check in VerifyTransaction particularly slow? I mean this one:\n\n  DCHECK_EQ(kTransactionActive, Runtime::Current()-\u003eIsActiveTransaction());",
      "range": {
        "startLine": 410,
        "startChar": 4,
        "endLine": 411,
        "endChar": 62
      },
      "revId": "4aca7597a0f3c103bb4a6b78d2ce2a354029b9a1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04c947f9_8d2e8eb1",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2020-03-17T15:43:40Z",
      "side": 1,
      "message": "It\u0027s not about being slow. It\u0027s just plain wrong when creating an array class with an active Transaction (rhs\u003dtrue) while we do not want to record the write (lhs\u003dfalse).",
      "parentUuid": "8192b000_2f66d0ff",
      "range": {
        "startLine": 410,
        "startChar": 4,
        "endLine": 411,
        "endChar": 62
      },
      "revId": "4aca7597a0f3c103bb4a6b78d2ce2a354029b9a1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5bbfd45_3838f3aa",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-03-17T15:57:10Z",
      "side": 1,
      "message": "Ah.",
      "parentUuid": "04c947f9_8d2e8eb1",
      "range": {
        "startLine": 410,
        "startChar": 4,
        "endLine": 411,
        "endChar": 62
      },
      "revId": "4aca7597a0f3c103bb4a6b78d2ce2a354029b9a1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}