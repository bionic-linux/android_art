{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eda2e779_bce9ec99",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "Is this on device (on VM)?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 19
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa4ea26a_789aa4d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "On VM (I don\u0027t have a device.)",
      "parentUuid": "eda2e779_bce9ec99",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 19
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d6bfc07_3eee3113",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "Can\u0027t this be DCHECK_EQ for some reason?",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 10
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31dc7285_615d2ef8",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d6bfc07_3eee3113",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 10
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "362f3614_88dd49eb",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "So there are only two variants for ArgumentLocation, a register or a stack location, but not a constant, right? (Otherwise I don\u0027t see constants handled here.)",
      "range": {
        "startLine": 285,
        "startChar": 12,
        "endLine": 285,
        "endChar": 33
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee361dfb_7bdc442b",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "We\u0027re just moving arguments, we\u0027re not materializing new ones. So, yes, we deal only with registers and stack locations here.",
      "parentUuid": "362f3614_88dd49eb",
      "range": {
        "startLine": 285,
        "startChar": 12,
        "endLine": 285,
        "endChar": 33
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaa590ea_00d4b62d",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 287,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "Do you mean `Store` on line 293?",
      "range": {
        "startLine": 287,
        "startChar": 64,
        "endLine": 287,
        "endChar": 70
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "238dc8e7_315e741d",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 287,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eaa590ea_00d4b62d",
      "range": {
        "startLine": 287,
        "startChar": 64,
        "endLine": 287,
        "endChar": 70
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1ddbc0e_7398ad7c",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "Why? What guarantees it?\n\nAn alternative algorithm that would terminate for sure is:\n- initialize an all-zero `indegree` array\n- iterate over `srcs` once, incrementing `indegree[srcs[i]]`\n- loop over `dests` while you can find `j` such that `indegree[dests[j]] \u003d\u003d 0` (then it is safe to clobber `dests[j]`), moving `src[j] -\u003e dests[j]` and decrementing `indegree[src[j]]`.\n- When the loop breaks (you can\u0027t find such `j`) CHECK that all regs have been copied (e.g. empty mask or all-zero `indegree`).",
      "range": {
        "startLine": 298,
        "startChar": 5,
        "endLine": 298,
        "endChar": 30
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75ce710d_572c8eda",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "I\u0027d prefer to keep this time-tested algorithm (copied from arm64).\n\nThe `CHECK_NE()` and `DCHECK__EQ()` at the end of the loop guarantee that the `dest_regs` loses at least one bit each time.",
      "parentUuid": "f1ddbc0e_7398ad7c",
      "range": {
        "startLine": 298,
        "startChar": 5,
        "endLine": 298,
        "endChar": 30
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a23f2851_91d7bde6",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "Cannot NaN-boxing be done earlier, when we still have that information and load the float argument into a register?",
      "range": {
        "startLine": 318,
        "startChar": 9,
        "endLine": 318,
        "endChar": 88
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "027795b0_bab8a250",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "The information is in the calling convention and JNI compiler currently does not pass that information to the macro assembler.\n\nAnd there\u0027s no \"earlier\" for @CriticalNative. JNI compiler just calls `BuildFrame()` with no method or callee saves (essentially just `IncreaseFrame()`) and then `MoveArguments()`. So this information needs to be somehow passed to `MoveArguments()`, maybe by changing the `ArgumentLocation` to contain the type, not just the size.",
      "parentUuid": "a23f2851_91d7bde6",
      "range": {
        "startLine": 318,
        "startChar": 9,
        "endLine": 318,
        "endChar": 88
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e2cfb4f_e6118175",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 432,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "Why do you need a local variable here (why not use `TMP` in both cases)?",
      "range": {
        "startLine": 432,
        "startChar": 12,
        "endLine": 432,
        "endChar": 19
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "781ef449_9ff6fd9e",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 432,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e2cfb4f_e6118175",
      "range": {
        "startLine": 432,
        "startChar": 12,
        "endLine": 432,
        "endChar": 19
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "658a29f7_07905741",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 445,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "Is EBREAK better than UNIMP for the purpose of marking unreachable code?",
      "range": {
        "startLine": 445,
        "startChar": 2,
        "endLine": 445,
        "endChar": 14
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b2db0b0_9841a21c",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 445,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "I don\u0027t know. We have BRK on arm64, so I thought EBREAK is appropriate.",
      "parentUuid": "658a29f7_07905741",
      "range": {
        "startLine": 445,
        "startChar": 2,
        "endLine": 445,
        "endChar": 14
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ec99540_5e5b5de6",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 445,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-15T09:50:56Z",
      "side": 1,
      "message": "From the standard (2.8. Environment Call and Breakpoints, note for EBREAK and ECALL):\n\n\u003e EBREAK was primarily designed to be used by a debugger to cause execution\n\u003e to stop and fall back into the debugger. EBREAK is also used by the standard\n\u003e gcc compiler to mark code paths that should not be executed.\n\nAlso a bit further:\n\n\u003e Note that these three instructions must be 32-bit-wide instructions, i.e.,\n\u003e they mustn’t be among the compressed 16-bit instructions described in Chapter 18.\n\nI think it\u0027s fine as is, but EBREAK will always be 32-bit even after we move to compressed 16-bit UNIMP.C.",
      "parentUuid": "8b2db0b0_9841a21c",
      "range": {
        "startLine": 445,
        "startChar": 2,
        "endLine": 445,
        "endChar": 14
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f90abc6_e77ddc74",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-14T15:35:02Z",
      "side": 1,
      "message": "It would be best to add it as disabled and ensure that it fails as expected (to do Nan-boxing). But ok to leave as is for now.",
      "range": {
        "startLine": 265,
        "startChar": 2,
        "endLine": 265,
        "endChar": 89
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1846dfce_a09f4911",
        "filename": "compiler/utils/riscv64/jni_macro_assembler_riscv64_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-15T08:06:27Z",
      "side": 1,
      "message": "The interface shall need to change to pass the relevant information, so there is currently no way to write a test for NaN-boxing.",
      "parentUuid": "5f90abc6_e77ddc74",
      "range": {
        "startLine": 265,
        "startChar": 2,
        "endLine": 265,
        "endChar": 89
      },
      "revId": "71d89ec5971d47e86618358e1237b6465f09a37f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}