{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c77f47_39656315",
        "filename": "libdexfile/dex/dex_file_verifier.cc",
        "patchSetId": 7
      },
      "lineNbr": 1019,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-05T14:12:14Z",
      "side": 1,
      "message": "We could change this to\n\n    bool DexFileVerifier::CheckEncodedValues(size_t count) {\n      for (size_t i \u003d 0; i !\u003d count; ++i) {\n        ...\n        switch (...) {\n          ...\n          case DexFile::kDexAnnotationArray:\n            [check value_arg]\n            DECODE_UNSIGNED_CHECKED_FROM(ptr_, size);\n            count+\u003d size;  // + overflow check: either report error immediatelly,\n                           // or set to max size_t which shall eventually reach\n                           // EndOfFile() and report error.\n            break;\n          case DexFile::kDexAnnotationAnnotation:\n            [check value_arg]\n            [read and check anno_idx]\n            DECODE_UNSIGNED_CHECKED_FROM(ptr_, annotations_size);\n            todo_.emplace(/*remaining_values\u003d*/ count - i - 1u, annotations_size);\n            return true;\n          ...\n        }\n      }\n    }\n\nThen the only value type that needs to use the `todo_` stack is the `DexFile::kDexAnnotationAnnotation` and we would not really need to use a `std::function`.",
      "range": {
        "startLine": 1019,
        "startChar": 0,
        "endLine": 1019,
        "endChar": 43
      },
      "revId": "e0792d21fab910e653b756adb1e5789d19726f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a22bb3c_9d61d2d3",
        "filename": "libdexfile/dex/dex_file_verifier.cc",
        "patchSetId": 7
      },
      "lineNbr": 1019,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-02-05T15:15:37Z",
      "side": 1,
      "message": "It is still missing the `last_idx` capture, and with that added it just boils down to \"we can replace the automatic captures, with manual struct which is union/aggregate of the captures\".  So it is the same, just more verbose.\n\nHowever, your other point is that we could do a bit of inlining, and add the `count` argument.  I considered it but I didn\u0027t follow through because it causes bigger CL.  I will try (with the goal of removing the push/pop in array loop).",
      "parentUuid": "c6c77f47_39656315",
      "range": {
        "startLine": 1019,
        "startChar": 0,
        "endLine": 1019,
        "endChar": 43
      },
      "revId": "e0792d21fab910e653b756adb1e5789d19726f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f40fdab_398a430c",
        "filename": "libdexfile/dex/dex_file_verifier.cc",
        "patchSetId": 7
      },
      "lineNbr": 1019,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2024-02-05T16:15:58Z",
      "side": 1,
      "message": "What about this version (PS8)?  I am not giving up the `std::function`, but the `count` argument reduces the number of pushes/pops that we do.",
      "parentUuid": "9a22bb3c_9d61d2d3",
      "range": {
        "startLine": 1019,
        "startChar": 0,
        "endLine": 1019,
        "endChar": 43
      },
      "revId": "e0792d21fab910e653b756adb1e5789d19726f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ea7739d_7d605baf",
        "filename": "libdexfile/dex/dex_file_verifier.cc",
        "patchSetId": 7
      },
      "lineNbr": 1034,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-05T14:12:14Z",
      "side": 1,
      "message": "Can you add the missing checks for going beyond the end of file here and below?",
      "range": {
        "startLine": 1034,
        "startChar": 6,
        "endLine": 1034,
        "endChar": 12
      },
      "revId": "e0792d21fab910e653b756adb1e5789d19726f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c1b3b6b_3cd2a23d",
        "filename": "libdexfile/dex/dex_file_verifier.cc",
        "patchSetId": 7
      },
      "lineNbr": 1061,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2024-02-05T14:12:14Z",
      "side": 1,
      "message": "Can you rewrite `ReadUnsignedLittleEndian()` so that we can propagate the error from its `CheckListSize()` call?",
      "range": {
        "startLine": 1061,
        "startChar": 21,
        "endLine": 1061,
        "endChar": 45
      },
      "revId": "e0792d21fab910e653b756adb1e5789d19726f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdb1dad0_c95e692a",
        "filename": "libdexfile/dex/dex_file_verifier.cc",
        "patchSetId": 7
      },
      "lineNbr": 1163,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2024-02-02T08:32:33Z",
      "side": 1,
      "message": "Did the argument count you mentioned that triggers the allocation regarding the captured values? If so, we could enumerate them here to guard against future changes which could (unintendedly) trigger allocations.",
      "range": {
        "startLine": 1163,
        "startChar": 17,
        "endLine": 1163,
        "endChar": 18
      },
      "revId": "e0792d21fab910e653b756adb1e5789d19726f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}