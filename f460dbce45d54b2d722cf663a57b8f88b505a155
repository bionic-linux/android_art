{
  "comments": [
    {
      "key": {
        "uuid": "d3fbe723_e045ebe2",
        "filename": "runtime/imt_conflict_table.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-10-11T14:44:41Z",
      "side": 1,
      "message": "Why do you need the 64 here? It\u0027s already explicitly-passed in as a type parameter.\n\nSeems redundant to have the 64/32 versions?",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aaaba2fa_d755711f",
        "filename": "runtime/imt_conflict_table.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-10-11T14:49:51Z",
      "side": 1,
      "message": "Cross-compiling, probably?",
      "parentUuid": "d3fbe723_e045ebe2",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e002f3_64a0d34b",
        "filename": "runtime/imt_conflict_table.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-11T14:57:29Z",
      "side": 1,
      "message": "reinterpret_cast64\u003c\u003e() avoids sing-extending 32-bit ArtMethod* to 64 bits. (As shocking as it is, 32-bit pointers can be treated as signed for reinterpret_cast\u003cint64_t\u003e().)",
      "parentUuid": "aaaba2fa_d755711f",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5c66ed9_1043ec23",
        "filename": "runtime/imt_conflict_table.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-10-11T15:27:37Z",
      "side": 1,
      "message": "Not the point I was making. I realize reinterpret_cast32/64 is a custom function which does unsigned type extension (and it could\u0027ve been named differently to avoid this confusion).\n\nMy point is that your_custom_reinterpret_cast function doesn\u0027t need the two 64/32 versions, it\u0027s already explicit as the template parameter and the static asserts can\u0027t make them be used otherwise.\n\nSo it\u0027s just forcing everyone to type out 32 32 and 64 64.",
      "parentUuid": "12e002f3_64a0d34b",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a89c9751_1313259e",
        "filename": "runtime/imt_conflict_table.h",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-11T15:40:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a5c66ed9_1043ec23",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8363f2ab_38e042f6",
        "filename": "runtime/imtable.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-10-11T14:44:41Z",
      "side": 1,
      "message": "I\u0027d argue this is redundant too, since the 32vs64 is obvious from the parameter (value). If for some reason it wasn\u0027t obvious that call-site could pass it in explicitly reinterpret_cast64\u003cArtMethod*, uint64_t\u003e(value)",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf858537_81000009",
        "filename": "runtime/imtable.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-11T14:57:29Z",
      "side": 1,
      "message": "This adds a DCHECK() that the 64-bit `value` fits in the pointer.",
      "parentUuid": "8363f2ab_38e042f6",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86e72da5_cb84e243",
        "filename": "runtime/imtable.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2018-10-11T15:27:37Z",
      "side": 1,
      "message": "That can be done without 2 separate names.\n\n  template \u003ctypename Dest, typename Source\u003e\n  Dest my_safer_reinterpret_cast(Source src) {\n    static_assert(std::is_pointer_v\u003cDest\u003e);\n    static_assert(std::is_integral_v\u003cSource\u003e);\n\n    if constexpr (sizeof(src) \u003e sizeof(Dest)) {\n      DCHECK_EQ(static_cast\u003cSource\u003e(static_cast\u003cuintptr_t\u003e(source)), source);\n    }\n\n    return reinterpret_cast\u003cDest\u003e(static_cast\u003cuintptr_t\u003e(source));\n  }\n\n(Written in C++17 style for brevity but should be obvious how to rewrite in C++14)",
      "parentUuid": "cf858537_81000009",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14dfb2d1_7109bbdc",
        "filename": "runtime/imtable.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2018-10-11T15:40:42Z",
      "side": 1,
      "message": "If you\u0027re volunteering to do a rename, please go ahead. I cannot think of a better name than reinterpret_cast{32,64}.",
      "parentUuid": "86e72da5_cb84e243",
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daa5012e_fc3bdd37",
        "filename": "runtime/interpreter/unstarted_runtime.cc",
        "patchSetId": 2
      },
      "lineNbr": 1795,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-11T15:12:08Z",
      "side": 1,
      "message": "reinterpret_cast32?",
      "range": {
        "startLine": 1795,
        "startChar": 31,
        "endLine": 1795,
        "endChar": 47
      },
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a23c520_0170b361",
        "filename": "test/616-cha-unloading/cha_unload.cc",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-10-11T15:12:08Z",
      "side": 1,
      "message": "reinterpret_cast64?",
      "range": {
        "startLine": 55,
        "startChar": 9,
        "endLine": 55,
        "endChar": 25
      },
      "revId": "f460dbce45d54b2d722cf663a57b8f88b505a155",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}