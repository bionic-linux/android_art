{
  "comments": [
    {
      "key": {
        "uuid": "8a6a7464_2d36196f",
        "filename": "compiler/driver/compiler_driver.cc",
        "patchSetId": 16
      },
      "lineNbr": 1085,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-12T23:10:02Z",
      "side": 1,
      "message": "Perform a similar rewrite for dex-to-dex, perhaps fold into devirtualization for dex-to-dex?",
      "range": {
        "startLine": 1080,
        "startChar": 0,
        "endLine": 1085,
        "endChar": 3
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a6a7464_4d9eeddd",
        "filename": "runtime/arch/x86/quick_entrypoints_x86.S",
        "patchSetId": 16
      },
      "lineNbr": 1312,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-12T23:10:02Z",
      "side": 1,
      "message": "/* Build pointers to the start of string data */",
      "range": {
        "startLine": 1312,
        "startChar": 0,
        "endLine": 1312,
        "endChar": 39
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa5498b1_a359ba36",
        "filename": "runtime/asm_support.h",
        "patchSetId": 16
      },
      "lineNbr": 58,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "Update here, too, please. Note these numbers should be simply the values for the #ifndef USE_BAKER_OR_BROOKS_READ_BARRIER + 8.",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 27
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5e84cf_6f2881e9",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 16
      },
      "lineNbr": 74,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "So, these new string_init code fragments are dependent on the string factory method signatures, right? I wonder if there\u0027s a clearer/more robust way of coding/organizing/commenting this in case we change the string factory methods in the future.\n\nMaybe add a top-level comment that describes what new code fragments does? Or, add a comment to each of the code fragments to describe what they do?\n\nDo we have a test that matches the string constructors and the string factory methods signatures and detect inconsistencies between them?",
      "range": {
        "startLine": 74,
        "startChar": 8,
        "endLine": 74,
        "endChar": 19
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5e84cf_cf78950a",
        "filename": "runtime/interpreter/interpreter_common.cc",
        "patchSetId": 16
      },
      "lineNbr": 202,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "What does this code do?\n\nWhat\u0027s the old string?",
      "range": {
        "startLine": 202,
        "startChar": 7,
        "endLine": 202,
        "endChar": 16
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa7bb835_05044634",
        "filename": "runtime/interpreter/interpreter_goto_table_impl.cc",
        "patchSetId": 16
      },
      "lineNbr": 513,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-12T23:10:02Z",
      "side": 1,
      "message": "c \u003d mh.GetClassFromTypeIdx(inst-\u003e...)",
      "range": {
        "startLine": 513,
        "startChar": 14,
        "endLine": 513,
        "endChar": 15
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa7bb835_c5e4fe49",
        "filename": "runtime/interpreter/interpreter_switch_impl.cc",
        "patchSetId": 16
      },
      "lineNbr": 426,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-12T23:10:02Z",
      "side": 1,
      "message": "c \u003d mh.GetClassFromTypeIdx(inst-\u003e...)",
      "range": {
        "startLine": 426,
        "startChar": 18,
        "endLine": 426,
        "endChar": 19
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a6a7464_0dba355b",
        "filename": "runtime/interpreter/interpreter_switch_impl.cc",
        "patchSetId": 16
      },
      "lineNbr": 427,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-12T23:10:02Z",
      "side": 1,
      "message": "nullptr",
      "range": {
        "startLine": 427,
        "startChar": 24,
        "endLine": 427,
        "endChar": 28
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa7bb835_ba66ad2e",
        "filename": "runtime/mirror/class.h",
        "patchSetId": 16
      },
      "lineNbr": 434,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-12T23:10:02Z",
      "side": 1,
      "message": "we should consider replacing this with a modifier flag",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 434,
        "endChar": 76
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca570cb3_6428aae9",
        "filename": "runtime/mirror/object-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 346,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "We should pass in the read barrier (the enum) through to GetClass.",
      "range": {
        "startLine": 346,
        "startChar": 18,
        "endLine": 346,
        "endChar": 30
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a30447d_7fffc313",
        "filename": "runtime/mirror/object-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 351,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "Same.",
      "range": {
        "startLine": 351,
        "startChar": 18,
        "endLine": 351,
        "endChar": 30
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a30447d_1f0c8f9e",
        "filename": "runtime/mirror/object-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 397,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "This looks like dangerously mixing a boolean and an enum. Please use the enum, everywhere. We no longer use the boolean version.",
      "range": {
        "startLine": 397,
        "startChar": 33,
        "endLine": 397,
        "endChar": 51
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca570cb3_442b2ee7",
        "filename": "runtime/mirror/object.h",
        "patchSetId": 16
      },
      "lineNbr": 161,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "We\u0027re using an enum \"ReadBarrierOption kReadBarrierOption\" instead of a boolean for the read barrier flag. Can you switch to it?",
      "range": {
        "startLine": 161,
        "startChar": 70,
        "endLine": 161,
        "endChar": 84
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca570cb3_24b71274",
        "filename": "runtime/mirror/string-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 65,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "This isn\u0027t necessary?",
      "range": {
        "startLine": 65,
        "startChar": 46,
        "endLine": 65,
        "endChar": 60
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0af3e41b_1e6aed29",
        "filename": "runtime/mirror/string.cc",
        "patchSetId": 16
      },
      "lineNbr": 92,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-13T22:49:19Z",
      "side": 1,
      "message": "As discussed over chat, if you don\u0027t pass down allocator from the entrypoint it uses Heap::GetCurrentAllocator() which won\u0027t result in constant propagation. This means that there is a lot of redundant switch statements in the allocation code path. Also, this calls Alloc\u003ctrue\u003e which is the instrumented (slow) entrypoint. Consider looking at the Class::Alloc to see an example of a fast entrypoint.",
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaf9f8ff_dec88159",
        "filename": "runtime/mirror/string.cc",
        "patchSetId": 16
      },
      "lineNbr": 98,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2014-05-13T22:49:19Z",
      "side": 1,
      "message": "Another issue here, there is probably a race where other threads could miss the writes since there is no fence before the return. Maybe worth using a pre fence visitor to do the memcpy?",
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a1b4808_c02cf488",
        "filename": "runtime/mirror/string.h",
        "patchSetId": 16
      },
      "lineNbr": 47,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "Can we simply return \u0026value_?",
      "range": {
        "startLine": 47,
        "startChar": 39,
        "endLine": 47,
        "endChar": 47
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca570cb3_2422b209",
        "filename": "runtime/mirror/string.h",
        "patchSetId": 16
      },
      "lineNbr": 50,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "bool -\u003e enum",
      "range": {
        "startLine": 50,
        "startChar": 70,
        "endLine": 50,
        "endChar": 84
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a30447d_5f6d2740",
        "filename": "runtime/mirror/string.h",
        "patchSetId": 16
      },
      "lineNbr": 154,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "Should this be of type uint16_t?",
      "range": {
        "startLine": 154,
        "startChar": 2,
        "endLine": 154,
        "endChar": 9
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a30447d_9f109fb4",
        "filename": "runtime/native/java_lang_String.cc",
        "patchSetId": 16
      },
      "lineNbr": 30,
      "author": {
        "id": 1022530
      },
      "writtenOn": "2014-05-13T19:08:00Z",
      "side": 1,
      "message": "chatAt used to a non-native method. Do we have a compiler intrinsic for this? I worry about its performance.\n\nSame for compareTo, concat, etc.",
      "range": {
        "startLine": 30,
        "startChar": 13,
        "endLine": 30,
        "endChar": 26
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa7bb835_bae30d68",
        "filename": "runtime/reflection.cc",
        "patchSetId": 16
      },
      "lineNbr": 479,
      "author": {
        "id": 1010118
      },
      "writtenOn": "2014-05-12T23:10:02Z",
      "side": 1,
      "message": "this may evaluate to true for String.\u003cclinit\u003e, you can avoid this by placing in the \"if (!m-\u003eIsStatic())\" below.",
      "range": {
        "startLine": 479,
        "startChar": 0,
        "endLine": 479,
        "endChar": 63
      },
      "revId": "b7b68522d2af81f8532f09492ffab3b602303e6f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}