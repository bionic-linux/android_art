{
  "comments": [
    {
      "key": {
        "uuid": "0a848430_6e355be7",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-04-11T16:15:27Z",
      "side": 1,
      "message": "Why? The problem is test-specific, so don\u0027t make it a global check. We haven\u0027t given up on things like multiple runtimes in the same process, yet.",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "840161de_8e94a139",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-04-11T16:18:40Z",
      "side": 1,
      "message": "I don\u0027t follow what you mean. Having libartbase.so and libartbased.so in the same process is recipe for disaster, and the random memory corruptions took me long time to track down to this cause.",
      "parentUuid": "0a848430_6e355be7",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec27b395_e77dc599",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-04-11T16:28:20Z",
      "side": 1,
      "message": "But it\u0027s a test holding it wrong. *Nothing* speaks technically against having them in the same process, e.g., when you have both a debug and non-debug runtime active. It\u0027s the cross-interaction which is a failure of the caller/test, for which the core platform shouldn\u0027t be punished.",
      "parentUuid": "840161de_8e94a139",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "946a3e79_327b9405",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-04-11T16:41:55Z",
      "side": 1,
      "message": "At the moment, say dex2oatd, depends on both libraries at the same time.  Just executing dex2oatd can mix functions from different builds... which might disagree on layout.  The fact that dex2oatd currently runs at all is miracle and luck ... mostly thanks to the fact we don\u0027t diverge in the class layout much between builds ... and the paces where we do, don\u0027t seem to cause fatal corruptions.\n\nNow... you could probably do some sand-boxing to ensure you can have different versions/builds of libart running in the same process, but presumably such sandboxing should also sandbox this check.  So all is good.\n\nEither way, fixing and preventing random memory corruptions in all debug builds is higher priority.",
      "parentUuid": "ec27b395_e77dc599",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81a41da2_81f2c533",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-04-11T17:01:05Z",
      "side": 1,
      "message": "So dex2oatd is holding it wrong, so add a check there. If debug builds are priority, make it a *debug* check,",
      "parentUuid": "946a3e79_327b9405",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd34d79b_d5bed895",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-04-11T17:05:27Z",
      "side": 1,
      "message": "What do you mean holding it wrong?  dex2oatd ELF file depends on the libraries.  The linker will load them. \n\nIf you ever implement sandboxing, you are free to remove this check.  Although I would prefer if you replaced it with equivalent check to ensure libartbase \u0026 libartbased are not loaded at the same time within a sandbox.",
      "parentUuid": "81a41da2_81f2c533",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80b57a86_9ccf8f5b",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-04-11T14:08:05Z",
      "side": 1,
      "message": "What about\n\n  const char* wrong_libartbase \u003d kIsDebugBuild ? \"libartbase.so\" : \"libartbased.so\";\n  CHECK(dlopen(wrong_libartbase, RTLD_NOW | RTLD_NOLOAD) \u003d\u003d nullptr);",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bb996a7_6c4455ab",
        "filename": "libartbase/base/globals.cc",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-04-11T14:12:49Z",
      "side": 1,
      "message": "That wouldn\u0027t catch the case where for some reason dlopen returns nullptr for both.\nE.g. it took me a while to realize that I need the RTLD_NOW or else it always returns nullptr.",
      "parentUuid": "80b57a86_9ccf8f5b",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69dcae19_7084fe0e",
        "filename": "libdexfile/external/dex_file_supp.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2019-04-11T14:08:05Z",
      "side": 1,
      "message": "I\u0027d prefer the old code with minor modification that selects the lib name based on kIsDebugBuild.",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9598c860_ca118d65",
        "filename": "libdexfile/external/dex_file_supp.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2019-04-11T14:12:49Z",
      "side": 1,
      "message": "That is not possible here ... there is only one dexfile_support libarary.\n\nI.e. imagine this code being inlined in libunwind ... since there no libunwindd, this needs to be runtime choice.",
      "parentUuid": "69dcae19_7084fe0e",
      "revId": "cc6ba8f5141bae8cea00bcbb878be5d936bf3f40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}