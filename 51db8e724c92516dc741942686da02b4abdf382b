{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b90d0cae_d560a22a",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1855,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-09-12T11:49:14Z",
      "side": 1,
      "message": "Should we remove the parameter?",
      "range": {
        "startLine": 1855,
        "startChar": 2,
        "endLine": 1855,
        "endChar": 21
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f0cf838_5fdafd5e",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1855,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-13T07:48:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b90d0cae_d560a22a",
      "range": {
        "startLine": 1855,
        "startChar": 2,
        "endLine": 1855,
        "endChar": 21
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84ffb298_e86ca11a",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1898,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-09-12T11:49:14Z",
      "side": 1,
      "message": "Can we merge this with lines 1866-1868?",
      "range": {
        "startLine": 1894,
        "startChar": 0,
        "endLine": 1898,
        "endChar": 3
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4115df17_5145d5db",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1898,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-13T07:48:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84ffb298_e86ca11a",
      "range": {
        "startLine": 1894,
        "startChar": 0,
        "endLine": 1898,
        "endChar": 3
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d03800fe_6b6eae3b",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1902,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-09-12T11:49:14Z",
      "side": 1,
      "message": "Suggestion: Add\n```\n  DCHECK(instruction-\u003eIsInstanceFieldGet() ||\n         instruction-\u003eIsStaticFieldGet() ||\n         instruction-\u003eIsPredicatedInstanceFieldGet());\n```\nhere too",
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d9c8dd1_f86a4b4d",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1902,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-13T07:48:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d03800fe_6b6eae3b",
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b70054_8fa44122",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1928,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-11T11:19:25Z",
      "side": 1,
      "message": "Hans, do we want to implement volatile load with a memory barrier or LR? And do we want volatile store to use memory barriers or AMOSWAP for 32-bit and 64-bit fields?\n\n(We could use LR for narrow volatile loads and extract the right field but that\u0027s more instructions. For narrow volatile stores I would definitely prefer to use memory barriers as we would otherwise need a CAS.)",
      "range": {
        "startLine": 1928,
        "startChar": 4,
        "endLine": 1928,
        "endChar": 62
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3616ab7f_08c01467",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1928,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-09-11T15:57:51Z",
      "side": 1,
      "message": "The psABI document currently does not suggest using LR for volatile/seq_cst get. And I think that\u0027s correct. It may sometimes be faster, but it may also cause surprising scalability issues, since loads are likely to require exclusive cache line access. I would just go with the double fence version for now.\n\nI would use AMOSWAP for longer stores, though that\u0027s also a guess. Current implementation costs are all over the place. For narrow ones, I agree with you that we should use fences/barriers.\n\nThe current psABI atomics specification is at https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-atomic.adoc",
      "parentUuid": "e6b70054_8fa44122",
      "range": {
        "startLine": 1928,
        "startChar": 4,
        "endLine": 1928,
        "endChar": 62
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44bc574d_ef1d487b",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1928,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-11T16:22:16Z",
      "side": 1,
      "message": "We don\u0027t need to follow the current psABI C++ mappings for managed code. (We do not need to interact with libraries compiled with old mappings.)\n\nYou proposed removing one fence from the load and adding one to the store for C++, right? That\u0027s what I\u0027d like to do for managed code.",
      "parentUuid": "3616ab7f_08c01467",
      "range": {
        "startLine": 1928,
        "startChar": 4,
        "endLine": 1928,
        "endChar": 62
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af9f8242_75fbc8c3",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1928,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-09-11T18:05:44Z",
      "side": 1,
      "message": "I would prefer not to do that, for several reasons. The most straightfowrward argument against it is that it\u0027s incompatible with the current RMW-\u003eLR/SC mappings, since it would allow reordering of the final SC.rl with a volatile load.\n\nIMO, we should stick to the Table 1 mappings in the psABI, observing that the \"note 3\" mappings are fine for us, since we have no legacy issue.",
      "parentUuid": "44bc574d_ef1d487b",
      "range": {
        "startLine": 1928,
        "startChar": 4,
        "endLine": 1928,
        "endChar": 62
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7089c179_94e70923",
        "filename": "compiler/optimizing/code_generator_riscv64.cc",
        "patchSetId": 2
      },
      "lineNbr": 1928,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-13T07:48:34Z",
      "side": 1,
      "message": "Done (including updated `GenerateMemoryBarrier()`)",
      "parentUuid": "af9f8242_75fbc8c3",
      "range": {
        "startLine": 1928,
        "startChar": 4,
        "endLine": 1928,
        "endChar": 62
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88581670_b27c822e",
        "filename": "compiler/optimizing/code_generator_riscv64.h",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2023-09-12T11:49:14Z",
      "side": 1,
      "message": "This comment is (at least for now) not true. Are we planning on using `GenerateReferenceLoadWithBakerReadBarrier` like this comment suggests? The intrinsics part is the part that sounds the most unlikely to me.",
      "range": {
        "startLine": 720,
        "startChar": 0,
        "endLine": 721,
        "endChar": 63
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f72734d_68cc8517",
        "filename": "compiler/optimizing/code_generator_riscv64.h",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-09-13T07:48:34Z",
      "side": 1,
      "message": "I\u0027d prefer to keep this for now. I removed the intrinsics part because arm/arm64 intrinsics use it only indirectly via `GenerateFieldLoadWithBakerReadBarrier()`.",
      "parentUuid": "88581670_b27c822e",
      "range": {
        "startLine": 720,
        "startChar": 0,
        "endLine": 721,
        "endChar": 63
      },
      "revId": "51db8e724c92516dc741942686da02b4abdf382b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}