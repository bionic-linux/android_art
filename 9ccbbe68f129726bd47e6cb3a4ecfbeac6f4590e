{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1685251a_1addd728",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-06-22T01:48:01Z",
      "side": 1,
      "message": "I hadn\u0027t previously noticed that the spec requires atomicity on non-32-bit-platforms. That\u0027s actually rather odd, given that Java tries hard to be platform-independent.",
      "range": {
        "startLine": 3254,
        "startChar": 27,
        "endLine": 3254,
        "endChar": 59
      },
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a35253_416ffd46",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-22T08:43:11Z",
      "side": 1,
      "message": "I remember that Java allows tearing for 64-bit fields on 32-bit platforms but is tearing really allowed on 64-bit platforms as well?",
      "parentUuid": "1685251a_1addd728",
      "range": {
        "startLine": 3254,
        "startChar": 27,
        "endLine": 3254,
        "endChar": 59
      },
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b759039d_56ddbe99",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-22T11:23:14Z",
      "side": 1,
      "message": "\u003e the spec requires\n\nIt\u0027s not the spec, it\u0027s just my understanding of our own doc (go/varhandlesforandroid), so could be far from reality. I need to find and read the spec.",
      "parentUuid": "f6a35253_416ffd46",
      "range": {
        "startLine": 3254,
        "startChar": 27,
        "endLine": 3254,
        "endChar": 59
      },
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff66692e_8c29aef9",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-06-22T17:44:07Z",
      "side": 1,
      "message": "The JLS says:\n\"For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write.\"\n\nOn the other hand, https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/invoke/VarHandle.html says:\n\n\"Unless stated otherwise in the documentation of a factory method, the access modes get and set (if supported) provide atomic access for reference types and all primitives types, with the exception of long and double on 32-bit platforms.\"\n\nI presume we always align 8-byte align longs and doubles sufficiently, at least on 64-bit platforms, to make this feasible?",
      "parentUuid": "b759039d_56ddbe99",
      "range": {
        "startLine": 3254,
        "startChar": 27,
        "endLine": 3254,
        "endChar": 59
      },
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b64d4fa9_1f51e219",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-23T09:05:42Z",
      "side": 1,
      "message": "So, the code as written implements the stricter requirement from the VarHandle documentation. I think this is the right approach.\n\n(We do align `long` and `double` fields on 8-byte boundary in an Object and kObjectAlignment\u003d8 as well.)",
      "parentUuid": "ff66692e_8c29aef9",
      "range": {
        "startLine": 3254,
        "startChar": 27,
        "endLine": 3254,
        "endChar": 59
      },
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e22b34ad_49d75107",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3255,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-21T15:53:02Z",
      "side": 1,
      "message": "Can we just pass these as arguments to `GenerateVarHandleSet()`?",
      "range": {
        "startLine": 3254,
        "startChar": 2,
        "endLine": 3255,
        "endChar": 27
      },
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f054678_eebf35a1",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3255,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-22T11:23:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e22b34ad_49d75107",
      "range": {
        "startLine": 3254,
        "startChar": 2,
        "endLine": 3255,
        "endChar": 27
      },
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f314e829_662ec396",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3264,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-21T15:53:02Z",
      "side": 1,
      "message": "Add a `kAnyStore` barrier also for `volatile`. (Though it\u0027s a no-op.)",
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba975202_32294048",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3264,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-22T11:23:14Z",
      "side": 1,
      "message": "It is already done in HandleFieldSet: https://source.corp.google.com/aosp-master/art/compiler/optimizing/code_generator_x86_64.cc;l\u003d5034-5036\n\nI added a comment.",
      "parentUuid": "f314e829_662ec396",
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ed1dac4_658e7b10",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3285,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-21T15:53:02Z",
      "side": 1,
      "message": "For `volatile` we also need a `kAnyAny` barrier which is not a no-op. I\u0027m not sure if we need that for \"release\" operations.",
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c77a1ca2_7fa898b4",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3285,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-06-22T01:48:01Z",
      "side": 1,
      "message": "x86 load and store operations have acquire/release semantics by default. So you don\u0027t.\n\nIdeally an x86 volatile store should be compiled to an XCHG instruction. XCHG is generally faster than MFENCE and you get the store \"for free\". MOV; MFENCE is not too bad. It would probably be even better to always replace store; MFENCE with XCHG even if they\u0027re logically unrelated.",
      "parentUuid": "5ed1dac4_658e7b10",
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e962618_b81e9ee7",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3285,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-06-22T08:43:11Z",
      "side": 1,
      "message": "Note: We\u0027re not really using `mfence` for the barrier. We merged an Intel patch to use `lock addl 0, (%esp)`.",
      "parentUuid": "c77a1ca2_7fa898b4",
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c190a4e_cf5f0072",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3285,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2021-06-22T11:23:14Z",
      "side": 1,
      "message": "`kAnyAny` barrier for volatile is already done in HandleFieldSet: https://source.corp.google.com/aosp-master/art/compiler/optimizing/code_generator_x86_64.cc;l\u003d5149-5151\n\nI added a comment.",
      "parentUuid": "7e962618_b81e9ee7",
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d118af2c_93eec809",
        "filename": "compiler/optimizing/intrinsics_x86_64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3285,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-06-22T17:44:07Z",
      "side": 1,
      "message": "It sounds like this is all fine as is, though we could perhaps be turning mov; lock add into xchg at some point in the future?",
      "parentUuid": "7c190a4e_cf5f0072",
      "revId": "9ccbbe68f129726bd47e6cb3a4ecfbeac6f4590e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}