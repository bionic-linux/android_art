{
  "comments": [
    {
      "key": {
        "uuid": "b1b1b559_51ae34a9",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-03-30T09:29:42Z",
      "side": 1,
      "message": "else we rely on the \"next_\" link in the already removed instruction to still correctly point to the rest of the list that we still want to process. This is bogus and we should really just record the instructions that we want to merge into all uses and do the merging _after_ we have visited all the block\u0027s instructions.",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1d7097d_caa1c3bc",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-03-30T09:40:13Z",
      "side": 1,
      "message": "Ah, missed this - excellent point, Vladimir.\n\nYou don\u0027t need to record them though. The problem stems from the fact that HInstructionIterator pre-loads the `next_` pointer in Advance() in case the current instruction gets removed and does not account for forward removals.\n\nThe only time we can run into trouble is therefore if we remove the very next instruction. That could be accounted for with a custom iterator and without having to allocate a list.",
      "parentUuid": "b1b1b559_51ae34a9",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f17a4d32_2b0d9957",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1052304
      },
      "writtenOn": "2016-03-30T09:45:35Z",
      "side": 1,
      "message": "I fear deferred merging would be complicated for example if multiple patterns are able to merge an IR into others.",
      "parentUuid": "b1b1b559_51ae34a9",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1a6cd26_8bbeadd6",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-03-30T09:58:24Z",
      "side": 1,
      "message": "Yes, this can be done with a custom iteration. For example, we could keep the iterator in a member variable and update it as needed.\n\nThe pre-loading of the HInstructionIterator::next_ is also an oddity I\u0027d like to remove in future and make it very explicit in places where we rely on the pre-loading, such as HGraphVisitor::VisitBasicBlock().",
      "parentUuid": "f17a4d32_2b0d9957",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1da95a7_e9b3f50c",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-03-30T10:06:21Z",
      "side": 1,
      "message": "I\u0027d opt for an HInstructionFwdRemovalIterator (or something along those lines), but I\u0027ll leave it up to Aart.",
      "parentUuid": "f1a6cd26_8bbeadd6",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3174e57a_75dc082e",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-30T15:28:00Z",
      "side": 1,
      "message": "Yes, this solution works because the instruction iterator already preloads the next. and we cannot reach instructions that are removed \"farther forward\" because the next pointer of the instructions before them will no longer point to them (if you want to remove that oddity, there are probably a lot of other places that rely on that already).\n\nSo what do you guys want to change here?",
      "parentUuid": "b1da95a7_e9b3f50c",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1b1b559_11130c81",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-03-30T15:42:56Z",
      "side": 1,
      "message": "It doesn\u0027t work because if you\u0027re iterating over instruction X and delete X-\u003enext, the next iteration will look at X-\u003enext-\u003enext which is null.",
      "parentUuid": "3174e57a_75dc082e",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3174e57a_752968c7",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-30T15:46:01Z",
      "side": 1,
      "message": "Hmm, I do see a potential flaw though if we could remove a cascade of next instructions at once. Does not happen in this phase, but is that what you guys want to guard against?",
      "parentUuid": "3174e57a_75dc082e",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11ac4106_cce9ef9d",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-03-30T15:56:21Z",
      "side": 1,
      "message": "Sry, wrong facts on my part. It currently holds together because we don\u0027t set the \"next\" pointer to null when we remove an instruction from the doubly linked list.\n\nIf we wanted to do this properly, we should have an iterator that remembers the previous instruction instead. That way we can remove the current instruction or any subsequent instruction and always find the next one. \n\nWDYT, Vladimir? You had your the instruction lists in your crosshairs for a while.",
      "parentUuid": "3174e57a_752968c7",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3174e57a_353e10bd",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-30T16:11:14Z",
      "side": 1,
      "message": "I always assumed this was done by design to make this kind of stuff work :-)\n\nhow about a comment on that for now, and we brainstorm over a better fix (not only here) this Monday?",
      "parentUuid": "11ac4106_cce9ef9d",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1ae29f9_b257a0d7",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-03-30T16:36:20Z",
      "side": 1,
      "message": "For the moment, let\u0027s use whatever works here and add a comment. I\u0027ll clean this up later.\n\nAnd let\u0027s add `DCHECK(it.Current()-\u003eIsInBlock()` to HGraphVisitor::VisitBasicBlock() and see if anything else hits it.",
      "parentUuid": "3174e57a_353e10bd",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11ac4106_aca8e353",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-03-30T16:51:59Z",
      "side": 1,
      "message": "Different suggestion: rewrite the simplifier to not do forward removals. From quickly skimming it, it looks like it\u0027s only TryMergeIntoUsersShifterOperand causing trouble.\n\nBTW, TryMergeIntoShifterOperand seems unused.",
      "parentUuid": "d1ae29f9_b257a0d7",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3174e57a_f8b80dec",
        "filename": "compiler/optimizing/instruction_simplifier_arm64.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-30T16:58:16Z",
      "side": 1,
      "message": "sgtm ptal",
      "parentUuid": "d1ae29f9_b257a0d7",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1e62928_52c79481",
        "filename": "test/593-amd64-simplifier/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-03-30T08:22:19Z",
      "side": 1,
      "message": "Can we CHECK this pattern, please? Would be good to ensure it keeps testing the same thing in the future. For that, a $noinline$ might be in order as well.",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3174e57a_75f328b2",
        "filename": "test/593-amd64-simplifier/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-30T15:35:04Z",
      "side": 1,
      "message": "Sigh. Happy to do that too. I don\u0027t know what the convention for our typical regression test is, but this feels a bit odd. We don\u0027t necessarily want this particular pattern in our HIR per se, so someone changing something in the future may wonder why he/she has to preserve that particular set of operations.\n\nIt simply serves the fail-before/pass-after purpose for now with some sanity going forward.",
      "parentUuid": "d1e62928_52c79481",
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d198e991_45557c40",
        "filename": "test/593-amd64-simplifier/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2016-03-30T08:22:19Z",
      "side": 1,
      "message": "Nit: no space",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3174e57a_15fcb483",
        "filename": "test/593-amd64-simplifier/src/Main.java",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1074526
      },
      "writtenOn": "2016-03-30T15:35:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d198e991_45557c40",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "e27c8f028e55fdbd1d4579fef8317606fda7ad5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}