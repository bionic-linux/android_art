{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "96fd08c8_491e861b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:31:23Z",
      "side": 1,
      "message": "Vladimir PTAL\nDavid PTAL at stack map related changes (runtime/ and stack_map_stream.cc)",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a992c44b_cda26e0d",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 7
      },
      "lineNbr": 1813,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:31:23Z",
      "side": 1,
      "message": "This can be const. I will deal with it with the first round of comments.",
      "range": {
        "startLine": 1813,
        "startChar": 2,
        "endLine": 1813,
        "endChar": 6
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae078560_802317e2",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-11-03T11:05:49Z",
      "side": 1,
      "message": "Will this be encoded as 1 bit in the stack map?",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ea0bb43_0f08e8ce",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T11:15:37Z",
      "side": 1,
      "message": "Yes. It is either -1, or 0 and we are optimizing for that case.",
      "parentUuid": "ae078560_802317e2",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41919790_9794a976",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-11-03T11:50:03Z",
      "side": 1,
      "message": "kSameDexFile and kNotInBCP are -1, which is the common case, right?\n\nIf given stackmap field is -1 for all entries it takes 0 bits* (as there is nothing to encode).  The the mixed -1 and 0 case takes 1bit, yes.\n\n*It still takes 4 bits in the header to encode how many bits per column we have, but other than that, for the common case of (SameDexFile + NotInBCP), the two CLs have close to no extra stackmap cost.  (other than the fact that more inlining means more code which means more stackmaps)",
      "parentUuid": "9ea0bb43_0f08e8ce",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6d14eaf_81378556",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T12:29:14Z",
      "side": 1,
      "message": "Adding on top of that, kSameDexFile implies kNotInBCP. When the dex file is the same, the kIsInBootClassPath is ignored so we can set it to -1 (even when the dex file is actually in BCP)",
      "parentUuid": "41919790_9794a976",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b66c3b4a_4a6abe51",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:33:24Z",
      "side": 1,
      "message": "Linear scan. Might be improved if needed at the cost of space.\n\nPS: re-posting comment since it was in an older patchset and wasn\u0027t showing up.",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ba26469_b12a5677",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-11-03T11:05:49Z",
      "side": 1,
      "message": "Would it make sense to add a DexCache field to an OatDexFile?",
      "parentUuid": "b66c3b4a_4a6abe51",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "120ae49e_e1c5d8cb",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T11:15:37Z",
      "side": 1,
      "message": "That could be a solution. Alternatively, we can create a structure similar to dex_caches_ but with OatDexFile* as the key (instead of DexFile as the key).",
      "parentUuid": "0ba26469_b12a5677",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97c3b1f_98e4fd90",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-11-03T11:50:03Z",
      "side": 1,
      "message": "I would not want to have two mutable maps that both need to be kept in sync.\n\nIs there 1:1 OatDexFile:DexFile mapping?  Can we just replace the current DexFile key with OatDexFile key?\n\nBut adding DexCache field to an OatDexFile sounds simplest to me.",
      "parentUuid": "120ae49e_e1c5d8cb",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57b524fe_582a5ac7",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T12:29:14Z",
      "side": 1,
      "message": "As far as I understood, Dexfiles are not guaranteed to have an non-null OatDexFile* so we can\u0027t just replace the key.",
      "parentUuid": "f97c3b1f_98e4fd90",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6273f908_da1510a9",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 102,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:31:23Z",
      "side": 1,
      "message": "`dex_cache-\u003eGetClassLoader()` will always be nullptr for the BCP case, but I think we can sacrifice that tiny performance benefit for the sake of clarity in the method.",
      "range": {
        "startLine": 102,
        "startChar": 68,
        "endLine": 102,
        "endChar": 95
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}