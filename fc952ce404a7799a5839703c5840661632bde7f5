{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "96fd08c8_491e861b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:31:23Z",
      "side": 1,
      "message": "Vladimir PTAL\nDavid PTAL at stack map related changes (runtime/ and stack_map_stream.cc)",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06608b09_760dc402",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 7
      },
      "lineNbr": 1702,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "Too strict. We can use .bss for any dex file that\u0027s compiled into the oat file.\n\nBut this may need some changes in `quick_dexcache_enrypoints.cc` and possibly in code generators and `sharpening.cc`, so a TODO would be appropriate.",
      "range": {
        "startLine": 1702,
        "startChar": 9,
        "endLine": 1702,
        "endChar": 62
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13bde245_1ec37e95",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 7
      },
      "lineNbr": 1702,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "I think this is covered by the TODO in line 1876 regarding .bss support. There are some DCHECKs about .bss expecting the same dex file that I\u0027d rather not remove until it implement fully for the other cases too.",
      "parentUuid": "06608b09_760dc402",
      "range": {
        "startLine": 1702,
        "startChar": 9,
        "endLine": 1702,
        "endChar": 62
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e1b6c23_51187c3c",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 7
      },
      "lineNbr": 1702,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-08T09:54:38Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "13bde245_1ec37e95",
      "range": {
        "startLine": 1702,
        "startChar": 9,
        "endLine": 1702,
        "endChar": 62
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a992c44b_cda26e0d",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 7
      },
      "lineNbr": 1813,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:31:23Z",
      "side": 1,
      "message": "This can be const. I will deal with it with the first round of comments.",
      "range": {
        "startLine": 1813,
        "startChar": 2,
        "endLine": 1813,
        "endChar": 6
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a83d3ec6_50ddd122",
        "filename": "compiler/optimizing/inliner.cc",
        "patchSetId": 7
      },
      "lineNbr": 1813,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a992c44b_cda26e0d",
      "range": {
        "startLine": 1813,
        "startChar": 2,
        "endLine": 1813,
        "endChar": 6
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae078560_802317e2",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-11-03T11:05:49Z",
      "side": 1,
      "message": "Will this be encoded as 1 bit in the stack map?",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ea0bb43_0f08e8ce",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T11:15:37Z",
      "side": 1,
      "message": "Yes. It is either -1, or 0 and we are optimizing for that case.",
      "parentUuid": "ae078560_802317e2",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41919790_9794a976",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-11-03T11:50:03Z",
      "side": 1,
      "message": "kSameDexFile and kNotInBCP are -1, which is the common case, right?\n\nIf given stackmap field is -1 for all entries it takes 0 bits* (as there is nothing to encode).  The the mixed -1 and 0 case takes 1bit, yes.\n\n*It still takes 4 bits in the header to encode how many bits per column we have, but other than that, for the common case of (SameDexFile + NotInBCP), the two CLs have close to no extra stackmap cost.  (other than the fact that more inlining means more code which means more stackmaps)",
      "parentUuid": "9ea0bb43_0f08e8ce",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6d14eaf_81378556",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T12:29:14Z",
      "side": 1,
      "message": "Adding on top of that, kSameDexFile implies kNotInBCP. When the dex file is the same, the kIsInBootClassPath is ignored so we can set it to -1 (even when the dex file is actually in BCP)",
      "parentUuid": "41919790_9794a976",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdd06570_105563e7",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-11-03T13:05:19Z",
      "side": 1,
      "message": "Nit: That sounds reasonable, although does that mean the IsInBCP is \"wrong\" if it is in the SameDexFile?  Maybe we could rename it to something like DexFileIndexKind, which could be KindBCP or KindNonBCP.  No semantic change, but it makes it more obvious that if Index is -1, then IndexKind is irrelevant.",
      "parentUuid": "c6d14eaf_81378556",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c6e0e21_8e8d628b",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T13:35:20Z",
      "side": 1,
      "message": "Ack, DexFileIndexKind sounds good. I\u0027ll change that in the next patchset.",
      "parentUuid": "fdd06570_105563e7",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6c85008_e21e5fae",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "I would prefer a single index. The easiest would be to map indexes [0..num_oat_dex_files) to the dex files compiled into the oat file and then [num_oat_dex_files, num_oat_dex_files+num_bcp_dex_files) to the BCP dex files. Keep -1 as \"same dex file\".\n\n(The ranges could be reversed, but then we would want to add the number of BCP files to the oat header to avoid calculation from image \"bootclasspath-checksums\" string and loaded boot images.)",
      "parentUuid": "7c6e0e21_8e8d628b",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b887b01_4bc7ad06",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-11-05T14:53:13Z",
      "side": 1,
      "message": "I prefer the current approach. I don\u0027t see a reason to try to pack both into single field. It is just less explicit, less debuggable in oatdump, and you need to get the offset right to unpack it properly. It feels more complex / error-prone.",
      "parentUuid": "a6c85008_e21e5fae",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6285b8c3_c92508bf",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Given that the dex files are coming from two different places, I think it makes sense to have the current approach. The stack map infrastructure will deal with packing it efficiently for us.\n\nPS: Updated the name to `DexFileIndexKind` as we talked about in a previous comment.",
      "parentUuid": "5b887b01_4bc7ad06",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db3c80ee_8322f396",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-08T09:54:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6285b8c3_c92508bf",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f1c80ab_6af2fcdb",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 231,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "DCHECK(it !\u003d boot_class_path.end());",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99373e66_09927836",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 231,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "I removed it since we are verifying the maps below, and I wanted to leave this space only for the main purpose of BeginInlineInfoEntry. WDYT?",
      "parentUuid": "2f1c80ab_6af2fcdb",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae966ee4_447994d3",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 231,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-08T09:54:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "99373e66_09927836",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "625a9fdc_88126e96",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "I think you can reference only `codegen_-\u003eGetCompilerOptions().GetDexFilesForOatFile()`.",
      "range": {
        "startLine": 236,
        "startChar": 14,
        "endLine": 236,
        "endChar": 72
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23675677_990a0e9b",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Wouldn\u0027t we be missing the dex files in the Class Loader Context?",
      "parentUuid": "625a9fdc_88126e96",
      "range": {
        "startLine": 236,
        "startChar": 14,
        "endLine": 236,
        "endChar": 72
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7a13dd2_3d2cdbcf",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-08T09:54:38Z",
      "side": 1,
      "message": "Yes but there are no `OatDexFile`s for them.",
      "parentUuid": "23675677_990a0e9b",
      "range": {
        "startLine": 236,
        "startChar": 14,
        "endLine": 236,
        "endChar": 72
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "253fd1f5_fb3bea5f",
        "filename": "compiler/optimizing/stack_map_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T11:31:54Z",
      "side": 1,
      "message": "Ack. Updated code and commit message.",
      "parentUuid": "e7a13dd2_3d2cdbcf",
      "range": {
        "startLine": 236,
        "startChar": 14,
        "endLine": 236,
        "endChar": 72
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdf0a72f_d6324383",
        "filename": "dex2oat/dex/quick_compiler_callbacks.h",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "The `CompilerCallbacks` class is for communicating between the runtime and compiler when necessary. It should not be used as internal communication channel within compiler.",
      "range": {
        "startLine": 30,
        "startChar": 44,
        "endLine": 30,
        "endChar": 61
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "833e7ed6_906a4d4f",
        "filename": "dex2oat/dex/quick_compiler_callbacks.h",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Ack, keeping the comment open while we deal with the other comments and will come back to this.",
      "parentUuid": "fdf0a72f_d6324383",
      "range": {
        "startLine": 30,
        "startChar": 44,
        "endLine": 30,
        "endChar": 61
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6994963c_72aa90ac",
        "filename": "dex2oat/dex/quick_compiler_callbacks.h",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T11:31:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "833e7ed6_906a4d4f",
      "range": {
        "startLine": 30,
        "startChar": 44,
        "endLine": 30,
        "endChar": 61
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b66c3b4a_4a6abe51",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:33:24Z",
      "side": 1,
      "message": "Linear scan. Might be improved if needed at the cost of space.\n\nPS: re-posting comment since it was in an older patchset and wasn\u0027t showing up.",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ba26469_b12a5677",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2021-11-03T11:05:49Z",
      "side": 1,
      "message": "Would it make sense to add a DexCache field to an OatDexFile?",
      "parentUuid": "b66c3b4a_4a6abe51",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "120ae49e_e1c5d8cb",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T11:15:37Z",
      "side": 1,
      "message": "That could be a solution. Alternatively, we can create a structure similar to dex_caches_ but with OatDexFile* as the key (instead of DexFile as the key).",
      "parentUuid": "0ba26469_b12a5677",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97c3b1f_98e4fd90",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2021-11-03T11:50:03Z",
      "side": 1,
      "message": "I would not want to have two mutable maps that both need to be kept in sync.\n\nIs there 1:1 OatDexFile:DexFile mapping?  Can we just replace the current DexFile key with OatDexFile key?\n\nBut adding DexCache field to an OatDexFile sounds simplest to me.",
      "parentUuid": "120ae49e_e1c5d8cb",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57b524fe_582a5ac7",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T12:29:14Z",
      "side": 1,
      "message": "As far as I understood, Dexfiles are not guaranteed to have an non-null OatDexFile* so we can\u0027t just replace the key.",
      "parentUuid": "f97c3b1f_98e4fd90",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f166b06_77e0362c",
        "filename": "runtime/class_linker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4152,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T12:09:00Z",
      "side": 1,
      "message": "I think it is fine to leave it as-is since we shouldn\u0027t have that many dex_caches_ to begin with. I haven\u0027t done profiling but I would be surprised if this is a bottleneck. WDYT?",
      "parentUuid": "57b524fe_582a5ac7",
      "range": {
        "startLine": 4152,
        "startChar": 46,
        "endLine": 4152,
        "endChar": 68
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6273f908_da1510a9",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 102,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-03T09:31:23Z",
      "side": 1,
      "message": "`dex_cache-\u003eGetClassLoader()` will always be nullptr for the BCP case, but I think we can sacrifice that tiny performance benefit for the sake of clarity in the method.",
      "range": {
        "startLine": 102,
        "startChar": 68,
        "endLine": 102,
        "endChar": 95
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc87d89a_f2a0ec06",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "This is really obsolete now.",
      "range": {
        "startLine": 121,
        "startChar": 14,
        "endLine": 122,
        "endChar": 46
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1430597_68904acf",
        "filename": "runtime/entrypoints/entrypoint_utils-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "fc87d89a_f2a0ec06",
      "range": {
        "startLine": 121,
        "startChar": 14,
        "endLine": 122,
        "endChar": 46
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dbdf16d_40ee9a9d",
        "filename": "test/2237-checker-inline-multidex/info.txt",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "Add a newline at the end.",
      "range": {
        "startLine": 1,
        "startChar": 72,
        "endLine": 1,
        "endChar": 73
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c45cab63_9071de07",
        "filename": "test/2237-checker-inline-multidex/info.txt",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6dbdf16d_40ee9a9d",
      "range": {
        "startLine": 1,
        "startChar": 72,
        "endLine": 1,
        "endChar": 73
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17419c45_f12142f6",
        "filename": "test/2237-checker-inline-multidex/src-multidex/Multi.java",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "Mark as `$inline$`.",
      "range": {
        "startLine": 18,
        "startChar": 23,
        "endLine": 18,
        "endChar": 31
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89009c48_1b407d05",
        "filename": "test/2237-checker-inline-multidex/src-multidex/Multi.java",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17419c45_f12142f6",
      "range": {
        "startLine": 18,
        "startChar": 23,
        "endLine": 18,
        "endChar": 31
      },
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85fecb32_156dd11f",
        "filename": "test/2237-checker-inline-multidex/src-multidex/Multi.java",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "Add a newline at the end.",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "034ae03b_5a5ba850",
        "filename": "test/2237-checker-inline-multidex/src-multidex/Multi.java",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85fecb32_156dd11f",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5408b273_1ef98a73",
        "filename": "test/2237-checker-inline-multidex/src/Main.java",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-11-05T14:44:37Z",
      "side": 1,
      "message": "Fix indentation: Both InvokeStaticOrDirect shoud start at the same position.\n\nCheck inlined instruction:\n\n  /// CHECK-START: void Main.main(java.lang.String[]) inliner (after)\n  /// CHECK:       StringBuilderAppend",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad3f3df0_7727765d",
        "filename": "test/2237-checker-inline-multidex/src/Main.java",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1889741
      },
      "writtenOn": "2021-11-08T09:04:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5408b273_1ef98a73",
      "revId": "fc952ce404a7799a5839703c5840661632bde7f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}