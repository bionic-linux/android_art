{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "57ecaf0a_242fdd61",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1381,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "This is a bit fragile. A better approach would be to overload `MoveAllOrAbandon` with a wrapper that takes `std::string` in its arguments, converts them to `std::string_view`s and calls into the other one. The overhead is about the same anyway.",
      "range": {
        "startLine": 1379,
        "startChar": 0,
        "endLine": 1381,
        "endChar": 58
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6f7b71f_3de4466e",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1381,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "Thanks for the suggestion. It does make the code cleaner for this particular case, though it can\u0027t handle all cases. One day we may get yet another combination of argument types for `MoveAllOrAbandon` (e.g., `std::string_view` for the first argument and `std::string` for the second), and then we\u0027ll have to use template for the wrapper, but let\u0027s not worry about it for now.",
      "parentUuid": "57ecaf0a_242fdd61",
      "range": {
        "startLine": 1379,
        "startChar": 0,
        "endLine": 1381,
        "endChar": 58
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39994b40_08de8239",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1381,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-01T17:53:12Z",
      "side": 1,
      "message": "Yes, I entertained that thought too, but let\u0027s not worry about cases that don\u0027t exist. And if we would get a few extra string copies it\u0027s probably not a big deal in this code. I wouldn\u0027t mind if the string_view variant was scrapped altogether, even. But this is fine now.",
      "parentUuid": "e6f7b71f_3de4466e",
      "range": {
        "startLine": 1379,
        "startChar": 0,
        "endLine": 1381,
        "endChar": 58
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ea5ae7e_d2c182de",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1387,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "One could argue it\u0027d be more natural to pass in artifacts and profiles with the pre-reboot flags set here, because the sources are the staged files. I don\u0027t feel strongly about it though - the important bit is that there\u0027s no ambiguity and that\u0027s already the case here.",
      "range": {
        "startLine": 1387,
        "startChar": 4,
        "endLine": 1387,
        "endChar": 62
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0d37cc9_9432630c",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1387,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "I thought about it, but it considerably complicated the Java code, so I decided not to go with it.",
      "parentUuid": "3ea5ae7e_d2c182de",
      "range": {
        "startLine": 1387,
        "startChar": 4,
        "endLine": 1387,
        "endChar": 62
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b23c221_5de75aef",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1397,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "At first I thought we ought to log if this fails, also considering that successful moves are logged at the INFO level below. This failing could e.g. indicate a bug where paths become systematically wrong.\n\nHowever as I mention for `commitPreRebootStagedFiles` in ArtManagerLocal.java it seems this can get called for many more packages than what the dexopt job processed, so perhaps it\u0027d get too noisy?\n\nIf so it may be worth pointing out somewhere on the native side or in the aidl file that this API is intended to be called for a superset of the packages that we actually expect to have staged files, so missing files are expected.",
      "range": {
        "startLine": 1397,
        "startChar": 8,
        "endLine": 1397,
        "endChar": 55
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "272d966e_164bda27",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1397,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "\u003e it seems this can get called for many more packages than what the dexopt job processed, so perhaps it\u0027d get too noisy?\n\nIndeed.\n\nUpdated the comment in the AIDL file.",
      "parentUuid": "6b23c221_5de75aef",
      "range": {
        "startLine": 1397,
        "startChar": 8,
        "endLine": 1397,
        "endChar": 55
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37af8dfc_5a5b9855",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1409,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "Nit: Empty line here.",
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3edcdf26_e2e998a3",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1409,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37af8dfc_5a5b9855",
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7e6a732_dc7109e5",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1426,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "The goal is to ensure OAT files and profiles stay in sync, right? A couple of things then:\n\n1.  Only do this if we\u0027re moving the corresponding OAT file into place above, i.e. if the check on `src_artifacts-\u003eoat_path` succeeds.\n2.  Remove `dst_profile` if `src_profile` doesn\u0027t exist.\n\nI can imagine #1 is somewhat messy since you\u0027d need to correlate profile and artifact paths. If so, I think it\u0027s ok to skip it since it\u0027s a rare situation and it\u0027s fairly benign if they get out of sync. But it\u0027s worth a comment that the gap exists.",
      "range": {
        "startLine": 1421,
        "startChar": 0,
        "endLine": 1426,
        "endChar": 5
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "081694b6_d0aced82",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1426,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "The goal is to keep an invariant, which is that the ref profile is the profile used for the last profile-guided dexopt.\n\nFor #1, I can\u0027t see how it can normally happen that the oat file is missing when the profile is present. The tmp profile is [only committed (i.e., renamed from `*.prof.staged.*.tmp` to `*.prof.staged`) if dexopt succeeds](https://cs.android.com/android/platform/superproject/main/+/main:art/libartservice/service/java/com/android/server/art/Dexopter.java;l\u003d292;drc\u003d75d4422b08058ba92dfdeebc1bbe1f89d591b721). Maybe it can happen in extreme cases (due to some races or some other processes unexpectedly touching the ART managed files), but that\u0027s even too rare to just write a comment about it. I prefer to skip it.\n\nFor #2, we don\u0027t delete profiles, and the invariant can still hold. We don\u0027t do it for normal dexopt (e.g., `pm compile -m verify -f \u003cpackage-name\u003e`), so it makes sense that we don\u0027t do it for Pre-reboot Dexopt either. The benefit of keeping the profile is that it can still be used in the next profile-guided dexopt.",
      "parentUuid": "a7e6a732_dc7109e5",
      "range": {
        "startLine": 1421,
        "startChar": 0,
        "endLine": 1426,
        "endChar": 5
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f01d57e_801109db",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1426,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-01T17:53:12Z",
      "side": 1,
      "message": "Hmm, the fact that this is called with potentially staged files rather than files that we actually expect to be staged muddies the waters here as well. It forces us to pay attention to more use cases and rely on assumptions that aren\u0027t expressed in the code. But I suppose this is ultimately covered by the passus in the AIDL comment now.\n\nTo put one more thought on the table, would it be at all possible to do early (non-error) returns when files are missing? If that\u0027s the case then this nuance would disappear. But I guess it\u0027d mean having to fix the java side to make one call per split? I.e. we may dexopt different splits in the same package in different ways? Or can we get missing files even for a single correctly dexopted split, e.g. from unsupported ABIs?",
      "parentUuid": "081694b6_d0aced82",
      "range": {
        "startLine": 1421,
        "startChar": 0,
        "endLine": 1426,
        "endChar": 5
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3eb5eda_3071e037",
        "filename": "artd/artd.cc",
        "patchSetId": 16
      },
      "lineNbr": 1426,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-01T18:47:09Z",
      "side": 1,
      "message": "\u003e would it be at all possible to do early (non-error) returns when files are missing?\n\nWhich files can be missing? If you are talking about oat files, they can\u0027t be missing when the profile exists, as explained in the previous reply.",
      "parentUuid": "6f01d57e_801109db",
      "range": {
        "startLine": 1421,
        "startChar": 0,
        "endLine": 1426,
        "endChar": 5
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68574cea_39f5db44",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 893,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "Can this be protected? My thought is to make it more clear that the external entry point is in `DexUseManagerLocal`, not here.",
      "range": {
        "startLine": 893,
        "startChar": 4,
        "endLine": 893,
        "endChar": 10
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01a62fef_35d1c6ff",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 893,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "I don\u0027t think it can be protected, but it can be package-private. Changed.",
      "parentUuid": "68574cea_39f5db44",
      "range": {
        "startLine": 893,
        "startChar": 4,
        "endLine": 893,
        "endChar": 10
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d416358a_7e44dfea",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1100,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "Can you please add some rationale for why the commit is split for primary and secondary dex\u0027es?\n\nAlso consider replacing these two flags with a single flag or enum that tells when it\u0027s called (instead of what it should do). That way the logic for what it does when is concentrated here.",
      "range": {
        "startLine": 1100,
        "startChar": 12,
        "endLine": 1100,
        "endChar": 52
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "271217f1_461b74a6",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1100,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "Added a comment in `onBoot` and replaced two flags with one.",
      "parentUuid": "d416358a_7e44dfea",
      "range": {
        "startLine": 1100,
        "startChar": 12,
        "endLine": 1100,
        "endChar": 52
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "becc8811_9a548b00",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1102,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "It looks like the approach here is to somewhat bluntly just try to move staged files for all packages, regardless whether they were part of the dexopt job or not. That\u0027s worth pointing out; it can e.g. affect what\u0027s considered errors and WAI.",
      "range": {
        "startLine": 1102,
        "startChar": 17,
        "endLine": 1102,
        "endChar": 77
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "014ff07e_8908bb43",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1102,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "Updated the comment in the AIDL file.",
      "parentUuid": "becc8811_9a548b00",
      "range": {
        "startLine": 1102,
        "startChar": 17,
        "endLine": 1102,
        "endChar": 77
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6318fb7c_d490b2e6",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1102,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-01T17:53:12Z",
      "side": 1,
      "message": "That the API allows for it doesn\u0027t make it obvious that this loop is intentionally using it that way, so please add a comment here to say that.",
      "parentUuid": "014ff07e_8908bb43",
      "range": {
        "startLine": 1102,
        "startChar": 17,
        "endLine": 1102,
        "endChar": 77
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff3f07dc_c865066e",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1102,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-01T18:47:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6318fb7c_d490b2e6",
      "range": {
        "startLine": 1102,
        "startChar": 17,
        "endLine": 1102,
        "endChar": 77
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77ac27b7_b582fa82",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1123,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "Not sure how to interpret this word here. Should it be \"somewhat\"?",
      "range": {
        "startLine": 1123,
        "startChar": 57,
        "endLine": 1123,
        "endChar": 64
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3706e863_dac5697b",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1123,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "Ah, right.",
      "parentUuid": "77ac27b7_b582fa82",
      "range": {
        "startLine": 1123,
        "startChar": 57,
        "endLine": 1123,
        "endChar": 64
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b910d13_3de94275",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1125,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "How strict is this requirement? I thought it was just about avoiding losing some profile data, and if so the requirement is fairly loose. I.e. it\u0027s unfortunate - but not fatal - if one is committed and the other is not, and we only try to do it at approximately the same time but not really atomically (which I think would require flocks or similar, both in artd and in the runtime). Or have I missed something?",
      "range": {
        "startLine": 1125,
        "startChar": 23,
        "endLine": 1125,
        "endChar": 51
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56609adc_76e6c444",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1125,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "Failing to keep the atomicity can potentially cause a permanent performance regression. Consider the following case:\n\n1. Pre-reboot dexopt job was run. It generated a staged oat file and a staged profile file.\n1. The user used the app for a while, and the cur profile was changed.\n1. Background dexopt job was run. It merged the new cur profile into the ref profile.\n1. The user rebooted the device.\n1. During the reboot, we successfully committed the oat file, but failed to commit the profile file, meaning the ref profile file had more methods than the oat file at this point.\n1. The user used the app in exactly the same way as #2, and the methods used in #2 were added back to the cur profile (because they don\u0027t exist in the oat file and therefore JITed).\n1. Background dexopt job was run. It tried to merge the new cur profile into the ref profile, but it found no need to merge because the methods are already in the ref profile (added by #3), and it therefore skipped dexopt.\n\nFlocks won\u0027t help in this case. Flocks are more about avoiding races, but here we care more about error handling: if we fail to commit one file, we should also abandon the other. I think the best we can do it to use `moveAllOrAbandon`.",
      "parentUuid": "9b910d13_3de94275",
      "range": {
        "startLine": 1125,
        "startChar": 23,
        "endLine": 1125,
        "endChar": 51
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aff91aac_dd16fa18",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1125,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-01T17:53:12Z",
      "side": 1,
      "message": "I see, but atomicity means more than that - it also implies that an in-between state, where one file is in place and the other isn\u0027t, cannot be observed, and that\u0027s not true here (and it\u0027s why I mentioned flock). Rather, what we have here are (non-atomic) transactions.\n\nThey do become effectively atomic because - I think - no \"observing\" can happen during this call. Iow, we assume no profman in a background dexopt job will run concurrently with this. But for the purposes of this discussion it may be enough to use \"transactional\" instead of \"atomic\".\n\nI think it\u0027s also well worth putting down what the bad state we need to avoid is and why, even though that adds a bit to the comment. It\u0027s not at all obvious.",
      "parentUuid": "56609adc_76e6c444",
      "range": {
        "startLine": 1125,
        "startChar": 23,
        "endLine": 1125,
        "endChar": 51
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d1120bb_a9b10306",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1125,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-01T18:47:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aff91aac_dd16fa18",
      "range": {
        "startLine": 1125,
        "startChar": 23,
        "endLine": 1125,
        "endChar": 51
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96a24f5_aba40992",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1126,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "Another benefit with this is that it limits the size of the binder arguments. I haven\u0027t found any guidelines around that from binder side, but regardless I think it\u0027s good to avoid since it could lead to spikes with high memory pressure.\n\nSo perhaps extend this with \"and to limit binder call size\"?\n```suggestion\n                    // the package level just for simplicity and to limit the size of the binder\n                    // arguments.\n```",
      "range": {
        "startLine": 1126,
        "startChar": 41,
        "endLine": 1126,
        "endChar": 60
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d294eb5_8d0c5a9f",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1126,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "I don\u0027t get it. This approach actually increases the binder call size rather than reducing it because `artifacts` and `profiles` contain data for all splits of the same package.\n\nIn contrast, if we committed at the split level instead, we could call `commitPreRebootStagedFiles` for each split, meaning `artifacts` and `profiles` would only contain data for one split.\n\nHowever, I prefer not to worry about the binder call size until we get a crash from the field.",
      "parentUuid": "e96a24f5_aba40992",
      "range": {
        "startLine": 1126,
        "startChar": 41,
        "endLine": 1126,
        "endChar": 60
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23f3218f_d635a692",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1126,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-05-01T17:53:12Z",
      "side": 1,
      "message": "Oh, I interpreted it from the opposite direction, i.e. that the alternative would be a single call for _all_ the staged files. I guess I could\u0027ve read it a bit more carefully.\n\n\u003e However, I prefer not to worry about the binder call size until we get a crash from the field.\n\nSide point, but I suspect a problem with large binder calls, in particular in system_server, would have to get pretty bad before we\u0027d see it through crashes. We\u0027re already doing them in the GC, and I\u0027m not overly confident about that. Otoh there it\u0027s in unattended mode so it doesn\u0027t matter that much as long as the GC finishes.",
      "parentUuid": "6d294eb5_8d0c5a9f",
      "range": {
        "startLine": 1126,
        "startChar": 41,
        "endLine": 1126,
        "endChar": 60
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01bad0f7_5e00b229",
        "filename": "libartservice/service/java/com/android/server/art/ArtManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 1126,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-05-01T18:47:09Z",
      "side": 1,
      "message": "The current size limit is 1MB (http://go/android-reference/android/os/TransactionTooLargeException), so I think it\u0027s large enough for this call.",
      "parentUuid": "23f3218f_d635a692",
      "range": {
        "startLine": 1126,
        "startChar": 41,
        "endLine": 1126,
        "endChar": 60
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be47811b_fcc40499",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2024-04-30T19:51:38Z",
      "side": 1,
      "message": "(Hm, looks like layer inversion, but not much we can do about it now.)",
      "range": {
        "startLine": 172,
        "startChar": 8,
        "endLine": 172,
        "endChar": 53
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb9bcf3a_0078769a",
        "filename": "libartservice/service/java/com/android/server/art/DexUseManagerLocal.java",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2024-04-30T21:30:34Z",
      "side": 1,
      "message": "Right, we have discussed it in the team meeting.",
      "parentUuid": "be47811b_fcc40499",
      "range": {
        "startLine": 172,
        "startChar": 8,
        "endLine": 172,
        "endChar": 53
      },
      "revId": "f0556a4f9113b2d941146d9017e81968818599ba",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}