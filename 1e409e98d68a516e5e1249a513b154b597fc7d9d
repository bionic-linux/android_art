{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "397a468c_230fcc17",
        "filename": "artd/include/libdexopt/libdexopt.h",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "I believe libdexopt should eventually invoke dex2oat itself, so these two functions are just for temporary use? If so, please add a TODO.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 35,
        "endChar": 0
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92804137_fbacb12d",
        "filename": "artd/include/libdexopt/libdexopt.h",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "That\u0027s what I thought.  The problem is...\n1. Since we can\u0027t stablize the format (yet), we can\u0027t allow CompOS to *override* the FDs\n1.1. The FD numbers created in the VM can\u0027t just match magically, but we can map the FD back to the original.\n2. Because we need to map the FD *in dex2oat process*, this needs to happen *after exec* (i.e. after cmdline is constructed), before dex2oat\u0027s main.\n2.1. This is already supported and done with minijail.\n3. An API that directly exec dex2oat won\u0027t work, unless the API also takes a FD mapping.\n\nI\u0027m still trying to get close to the API.  But I thought this (internal) change itself is self\u003dcontained in any case, since we can\u0027t avoid this conversion.  Later, we can decide whether this exact API should be exposed (with some wrapping code to make it C friendly) or a different approach.",
      "parentUuid": "397a468c_230fcc17",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 35,
        "endChar": 0
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37d22ecc_95de9a6f",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "It\u0027s strange to me that most of the inputs are from the request (Dexopt*Args) while some are not. Should this also be passed though the request?",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "510e7632_e996aab1",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "If you consider \"inputs\" as files, that could be a bit weird.  Although the way I look at it is that these can be considered \"constants\" and shouldn\u0027t necessarily need to be customizable by the client.\n\nWe also discussed how *CLASSPATH should be derived in b/197285531.  Essentially, it\u0027ll be derived at early boot phase (and not necessarily match Android\u0027s).  dex2oat will just inherit the environment variables.\n\nHope that sounds reasonable?",
      "parentUuid": "37d22ecc_95de9a6f",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a8db8f_bc6640c8",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-16T03:12:35Z",
      "side": 1,
      "message": "I consider \"inputs\" as all dex2oat flags that are dynamic. For example, number of threads and CPU set are also inputs.\n\n`DEX2OATBOOTCLASSPATH` needs to match `bootClasspathFds` in Dexopt*Args, so it will be better if the client provides both, in order to prevent potential problems caused by inconsistency. In the CompOS \u0026 odrefresh case, odrefresh needs to open the classpath jars outside the VM and provide FDs, so it\u0027s inevitable that odrefresh has to know the right values of *CLASSPATH variables. Therefore, it makes more sense if odrefresh passes both the variable values and FDs, which match each other, in the same request. WDYT?",
      "parentUuid": "510e7632_e996aab1",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e77efd_e20a8dd0",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-16T18:17:49Z",
      "side": 1,
      "message": "\u003e In the CompOS \u0026 odrefresh case, odrefresh needs to open the classpath jars outside the VM and provide FDs\n\nActually the JARs are NOT visible in Android in case of staged APEXes.  Per previous discussion, we\u0027ll mount the APEXes in CompOS, and let dex2oat open by path in the VM.  The path comes from *CLASSPATH, which needs to be constructed in the VM as well.  In other words, we need *CLASSPATH from the VM, which may not be usable in Android.\n\n\u003e in order to prevent potential problems caused by inconsistency\n\nRight, odrefresh relies on *CLASSPATH to build -Xbootclasspathimagefds: and others. We have to override *CLASSPATH when executing odrefresh (just CC\u0027ed you in a change of \"composd\").  composd can tell the VM to return *CLASSPATH, then use it on exec odrefresh.  +Alan FYI\n \nWe\u0027ll need to modify odrefresh to not open files in /apex and pass -1 in -Xbootclasspath*fds ...  In other words, we only pass /system/frameworks/*.jar by FD.\n\nBack to the original question, should we pass *CLASSPATH in the request?  I don\u0027t mind if we prefer to, but I suspect how it\u0027ll be used in libdexopt is a simple string comparison with the real environment variable, and bail if different.\n\nWDYT?",
      "parentUuid": "d4a8db8f_bc6640c8",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7088f70a_4decbbaa",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-16T20:53:35Z",
      "side": 1,
      "message": "Another alternative is to change the Bcp*Args: replace the FD array(s), which may contains -1, with a Map\u003cString, int\u003e of \u003cJAR path -\u003e fd\u003e.  The path is used as a hint.  libdexopt will still use its own *CLASSPATH to generate -Xbootclasspath, but will use the map as a hint to build the FD array for -Xbootclasspath*fds.  There won\u0027t be the inconsistency in question.  How does this sound?",
      "parentUuid": "d1e77efd_e20a8dd0",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eff51863_d40c5002",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-17T08:17:14Z",
      "side": 1,
      "message": "Map\u003cString, int\u003e sounds good to me.",
      "parentUuid": "7088f70a_4decbbaa",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02459ca9_c8d57991",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-20T19:57:42Z",
      "side": 1,
      "message": "Unfortunately, Map is only supported in AIDL\u0027s Java backend... So I added String[] instead and added some checks in the \"backend\". In the future, odrefresh should only add jars in /system, not those in /apex.",
      "parentUuid": "eff51863_d40c5002",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6df0d63b_19ee9413",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-22T05:29:53Z",
      "side": 1,
      "message": "LGTM. Thank you for the change.",
      "parentUuid": "02459ca9_c8d57991",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "119b6d19_39765c57",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "\u0026",
      "range": {
        "startLine": 89,
        "startChar": 51,
        "endLine": 89,
        "endChar": 52
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "951f4e77_3368698e",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "119b6d19_39765c57",
      "range": {
        "startLine": 89,
        "startChar": 51,
        "endLine": 89,
        "endChar": 52
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbdd6657_891dc3ae",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "Please at least log the error.\n\nA better practice is to use Result\u003cT\u003e (https://cs.android.com/android/platform/superproject/+/master:system/libbase/include/android-base/result.h).",
      "range": {
        "startLine": 173,
        "startChar": 4,
        "endLine": 173,
        "endChar": 17
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f2f2e7d_83e98620",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbdd6657_891dc3ae",
      "range": {
        "startLine": 173,
        "startChar": 4,
        "endLine": 173,
        "endChar": 17
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02b7ad6c_7184fd00",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "We need the extension image to be passed through the request because odrefresh may choose to use the extension image on /system in the future (b/197176583).",
      "range": {
        "startLine": 266,
        "startChar": 2,
        "endLine": 266,
        "endChar": 97
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "859c950e_1cdda66d",
        "filename": "artd/libdexopt.cc",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Added a TODO",
      "parentUuid": "02b7ad6c_7184fd00",
      "range": {
        "startLine": 266,
        "startChar": 2,
        "endLine": 266,
        "endChar": 97
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "816d1482_c2adf5df",
        "filename": "odrefresh/odr_dexopt.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "Please use Result\u003cstd::unique_ptr\u003cOdrDexopt\u003e\u003e and return an error instead of nullptr on error.",
      "range": {
        "startLine": 40,
        "startChar": 9,
        "endLine": 40,
        "endChar": 35
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3725eefb_9b2b207b",
        "filename": "odrefresh/odr_dexopt.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "816d1482_c2adf5df",
      "range": {
        "startLine": 40,
        "startChar": 9,
        "endLine": 40,
        "endChar": 35
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ad7409b_d01c4691",
        "filename": "odrefresh/odr_dexopt.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "It\u0027s possible to define these methods as virtual and have sub-classes extend OdrDexopt. `OdrDexopt::Create` can be factory method that returns an instance of a sub-class based on the config. In this way, you won\u0027t need the delegate class.",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 49,
        "endChar": 57
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dcecd123_3cc7fb09",
        "filename": "odrefresh/odr_dexopt.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ad7409b_d01c4691",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 49,
        "endChar": 57
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0662fc5_f19863f1",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "Nit: Remove this space.",
      "range": {
        "startLine": 310,
        "startChar": 11,
        "endLine": 310,
        "endChar": 12
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b78635bd_05f9ba80",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0662fc5_f19863f1",
      "range": {
        "startLine": 310,
        "startChar": 11,
        "endLine": 310,
        "endChar": 12
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ad66450_7cd4acab",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "Please log the error.",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd145299_d27cf386",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ad66450_7cd4acab",
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d12563_c523ad9d",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 1362,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2021-09-15T05:08:03Z",
      "side": 1,
      "message": "Please handle the error/nullptr case.",
      "range": {
        "startLine": 1362,
        "startChar": 26,
        "endLine": 1362,
        "endChar": 32
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "334886e9_9b9615fc",
        "filename": "odrefresh/odrefresh.cc",
        "patchSetId": 2
      },
      "lineNbr": 1362,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2021-09-15T18:43:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04d12563_c523ad9d",
      "range": {
        "startLine": 1362,
        "startChar": 26,
        "endLine": 1362,
        "endChar": 32
      },
      "revId": "1e409e98d68a516e5e1249a513b154b597fc7d9d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}