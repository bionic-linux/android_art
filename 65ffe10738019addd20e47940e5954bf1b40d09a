{
  "comments": [
    {
      "key": {
        "uuid": "e2029df6_1cfe354e",
        "filename": "runtime/imtable-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-28T09:05:34Z",
      "side": 1,
      "message": "Do we need to use the expensive PrettyMethod()?\n\nWe could put together hashes from the name, argument types and return type without translating \"Lpackage/Class;\" to package.Class, \"I\" to \"int\", etc., and without doing heap allocations for the std::string.",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 61
      },
      "revId": "65ffe10738019addd20e47940e5954bf1b40d09a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5c1c7c3_0bb11e4e",
        "filename": "runtime/imtable-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-28T15:33:28Z",
      "side": 1,
      "message": "See comment on PS1. I\u0027d rather keep this simple for now. I think we can get a factor of 3 or so faster (just taking Compute...(GetDeclaringClassDescriptor()) takes 10% of this), but we\u0027ll still be three orders of magnitude slower. Is a follow-up OK with you?\n\nI want to try Hash(classname) + method_index, which would lose some stability (wrt/ methods in the interface), but should stay at the 10% mark.",
      "parentUuid": "e2029df6_1cfe354e",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 61
      },
      "revId": "65ffe10738019addd20e47940e5954bf1b40d09a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82172137_b97bdfb1",
        "filename": "runtime/imtable-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-28T15:52:46Z",
      "side": 1,
      "message": "I\u0027d prefer a fast and stable hash straight away. Can we do a hash on C strings, ignoring the modified UTF-8 stuff?\n\nAnd I think we need to bump the oat version as a part of this CL.",
      "parentUuid": "e5c1c7c3_0bb11e4e",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 61
      },
      "revId": "65ffe10738019addd20e47940e5954bf1b40d09a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5c1c7c3_8b2eae3f",
        "filename": "runtime/imtable-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-28T15:55:52Z",
      "side": 1,
      "message": "ComputeModifiedUtf8Hash already doesn\u0027t do anything for decoding...\n\nI pretty much dislike the complexity, but I\u0027ll make the change here.",
      "parentUuid": "82172137_b97bdfb1",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 61
      },
      "revId": "65ffe10738019addd20e47940e5954bf1b40d09a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2029df6_fc3ee9c3",
        "filename": "runtime/imtable-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2016-09-28T16:21:01Z",
      "side": 1,
      "message": "Oh, I see. Can we make ComputeModifiedUtf8Hash() inline to avoid the call overhead? (Given that we\u0027re going to make multiple calls.)",
      "parentUuid": "e5c1c7c3_8b2eae3f",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 61
      },
      "revId": "65ffe10738019addd20e47940e5954bf1b40d09a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5c1c7c3_eee01089",
        "filename": "runtime/imtable-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2016-09-28T16:29:05Z",
      "side": 1,
      "message": "With the computational complexity (see the bug, 30ns vs at least 40k ns), I was actually considering moving this into the cc file, because I thought the call overhead is now insignificant. I\u0027ll try it out, though.",
      "parentUuid": "e2029df6_fc3ee9c3",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 61
      },
      "revId": "65ffe10738019addd20e47940e5954bf1b40d09a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}