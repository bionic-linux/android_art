{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a979ba05_e39d7c10",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 150,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-16T14:47:04Z",
      "side": 1,
      "message": "Generic JNI call was handled on line 129 and couldn\u0027t reach here, so is there another case when GenericJNI frame is used?",
      "range": {
        "startLine": 150,
        "startChar": 14,
        "endLine": 150,
        "endChar": 91
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d779ae6_f8534613",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 150,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-19T11:37:25Z",
      "side": 1,
      "message": "Below, we\u0027re building a managed frame exactly like the one created in the GenericJNI trampoline, so I call it a GenericJNI frame.",
      "parentUuid": "a979ba05_e39d7c10",
      "range": {
        "startLine": 150,
        "startChar": 14,
        "endLine": 150,
        "endChar": 91
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71c02f6_658b6b1f",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-16T14:47:04Z",
      "side": 1,
      "message": "I don\u0027t follow what\u0027s going on here.\n\nIt seems that we allocate a frame on the stack (line 152), then copy some stack slots from that frame down below on the stack (lines 160 - 170).\n\nThe frame wasn\u0027t filled --- why are we copying anyting? As far as I can tell it\u0027s uninitialized stack data.\n\nWhy do you call it \"move\" not \"copy\"?\n\nWhat\u0027s the purpose of this copying anyway?",
      "range": {
        "startLine": 160,
        "startChar": 4,
        "endLine": 160,
        "endChar": 34
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f7a850f_9c5638a3",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-19T11:37:25Z",
      "side": 1,
      "message": "This function is reached with an arbitrary number of arguments for the native method on the stack filled by the caller (see also the `artCriticalNativeFrameSize()` call above) and a managed frame above that. We need to build another managed frame just below the incoming managed frame, therefore overlapping the stack arguments area, so we move these args somewhere else to preserve them for the native call. Move because there may be more than `FRAME_SIZE_SAVE_REFS_AND_ARGS+16` bytes, so that the destination area can overlap the source area.",
      "parentUuid": "a71c02f6_658b6b1f",
      "range": {
        "startLine": 160,
        "startChar": 4,
        "endLine": 160,
        "endChar": 34
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1af12f88_1d5547e7",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-19T11:54:20Z",
      "side": 1,
      "message": "I see, thanks for the explanation!",
      "parentUuid": "4f7a850f_9c5638a3",
      "range": {
        "startLine": 160,
        "startChar": 4,
        "endLine": 160,
        "endChar": 34
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dc3f973_6d5a51e7",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-16T14:47:04Z",
      "side": 1,
      "message": "Why do you copy them in pairs? Is there a guarantee that the number of args is even?",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 49
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a98364c_0a424bdf",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-19T11:37:25Z",
      "side": 1,
      "message": "The actual number of arguments is irrelevant, we copy the aligned out args area and we have `kStackAlignment \u003d 16`, `riscv64::kNativeStackAlignment \u003d 16`.",
      "parentUuid": "6dc3f973_6d5a51e7",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 49
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fae8898b_f5cb8a2a",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 225,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-16T14:47:04Z",
      "side": 1,
      "message": "RA?",
      "range": {
        "startLine": 225,
        "startChar": 73,
        "endLine": 225,
        "endChar": 75
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c167472_63570107",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 225,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-19T11:37:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fae8898b_f5cb8a2a",
      "range": {
        "startLine": 225,
        "startChar": 73,
        "endLine": 225,
        "endChar": 75
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d222805_27217de2",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-16T14:47:04Z",
      "side": 1,
      "message": "No backticks in other places for register names, remove?",
      "range": {
        "startLine": 269,
        "startChar": 53,
        "endLine": 269,
        "endChar": 57
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "095908c7_4c759165",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2023-06-19T11:37:25Z",
      "side": 1,
      "message": "Done. (Preferring uppercase `FP` in comments even though we\u0027re not really consistent here. We\u0027ve been inconsistent on other architectures and this just keeps spreading on riscv64.)",
      "parentUuid": "6d222805_27217de2",
      "range": {
        "startLine": 269,
        "startChar": 53,
        "endLine": 269,
        "endChar": 57
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea510ea1_a106d45e",
        "filename": "runtime/arch/riscv64/jni_entrypoints_riscv64.S",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2023-06-19T11:54:20Z",
      "side": 1,
      "message": "I also prefer capitals. Let\u0027s try to stick to them and maybe eventually make everything consistent.",
      "parentUuid": "095908c7_4c759165",
      "range": {
        "startLine": 269,
        "startChar": 53,
        "endLine": 269,
        "endChar": 57
      },
      "revId": "0a5f94a421eb2217ad2e2e78767f19d7142098e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}