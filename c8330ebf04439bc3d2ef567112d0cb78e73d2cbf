{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c1e01a57_2954721c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-05-30T15:51:19Z",
      "side": 1,
      "message": "While I doubt it fixes the linter warning here, maybe you can clarify that you\u0027re only changing the formatting of the comment, not actually changing the licensing in any way.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55b824fd_ec3baa46",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-05-30T17:54:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1e01a57_2954721c",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3dea245f_95ff5e6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-05-30T08:54:18Z",
      "side": 1,
      "message": "FYI: I believe the open source licensing error is a false positive.",
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7d33e7f_5034e7c5",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-05-30T15:51:19Z",
      "side": 1,
      "message": "There\u0027s no mention of this in http://go/artstyle, but judging from a few random .cc files in art/runtime I think we should have standard headers (unistd.h and string) first, then external Android headers, and then ART headers (i.e. BnArtd.h and tools/tools.h).\n\nThen it seems to be basically a coin toss whether \u003c \u003e or \" \" is used for Android headers. I\u0027d love to see a guideline on that. In any case, at least we can try to be consistent about it - afaik there\u0027s no reason to use \u003c \u003e for the Binder headers and \" \" for base/logging.h etc.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 28,
        "endChar": 24
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4425b1c4_3be625f5",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-05-30T17:54:01Z",
      "side": 1,
      "message": "Right, there is no mention of the order of includes in go/artstyle. Let\u0027s use the google3 style: go/cstyle#Names_and_Order_of_Includes\n\nThe google3 style does NOT require separating project headers from other headers, and I think we should NOT either. Unless we have an exhaustive list of external dependencies defined as `IncludeCategories` in \"art/.clang-format\", it will not be easy to achieve this because it requires a lot of manual efforts from both the author and the reviewer, every time. Very likely, we will mess up the grouping in the future by mistake. Plus, I don\u0027t see much benefit of this. If the goal is just to have a standard to follow, I\u0027d follow the google3 standard.\n\nI was also wondering about the use of \u003c\u003e and \"\", but I couldn\u0027t figure out the principle, so I kept it as is. Since you brought this up, I\u0027d change it to always using \"\" for Android headers.\n\nAlso fixed more wrong includes.",
      "parentUuid": "b7d33e7f_5034e7c5",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 28,
        "endChar": 24
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fc3fb12_f65f8fcd",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-05-30T21:56:17Z",
      "side": 1,
      "message": "Although it\u0027d be nice if clang-format could dtrt it\u0027s not a deciding factor (unless someone would go through and reformat all the existing code with it).\n\nStyle rules isn\u0027t just what guides mention explicitly (although that certainly helps settling arguments quicker), it\u0027s also what\u0027s de-facto used in the code base, and I see a strong dominance in art/ code to separate Android \"system\" includes from ART internal ones. Please let\u0027s not introduce a different style here.\n\n\u003e Since you brought this up, I\u0027d change it to always using \"\" for Android headers.\n\nSGTM.\n\n\u003e Also fixed more wrong includes.\n\nGood catch, I missed base/logging.h is an ART header. (I\u0027d say that\u0027s also a reason to separate them - it can after all matter which one is included.)",
      "parentUuid": "4425b1c4_3be625f5",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 28,
        "endChar": 24
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a40cbe06_6904c471",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-05-30T22:06:23Z",
      "side": 1,
      "message": "However I see this is touched by later CLs in your chain in internal, so I think it\u0027s fine to leave it as-is here and reformat afterwards instead.",
      "parentUuid": "9fc3fb12_f65f8fcd",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 28,
        "endChar": 24
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a7d94a4_b222cf20",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-05-31T09:53:21Z",
      "side": 1,
      "message": "It\u0027s okay to rebase the CL chain in internal. I need to do it anyway because this CL is already diverged from it.\n\nHowever, I\u0027m still not convinced that we should separate ART headers from Android headers. I have three concerns:\n\n1. How do we define \"ART headers\"?\n\nEverything under the \"art/\" folder? Everything that goes into the ART APEX? Or everything that the ART team maintains?\n\nFor example, are headers in \"libnativehelper\" regarded as \"ART headers\"?\n\n2. I don\u0027t see a consistency in the existing code.\n\nIf there were a consistency, I\u0027d be happy to keep it. However, there doesn\u0027t look to be one. Therefore, the best we can do is to have a standard to follow in new code. I would choose the google3 style because it is easy to follow and widely adopted at Google.\n\nThere seems to be some sort of consistency in terms of grouping \"libbase\" includes, but the consistency of placing other includes is poor. Examples:\n\n\"libbacktrace\": https://source.corp.google.com/search?q\u003d%22backtrace%2F%22%20lang:cc%20f:%5Eart\u0026sq\u003dpackage:%5Eandroid-internal$\n\"libnativehelper\": https://source.corp.google.com/search?q\u003d%22nativehelper%2F%22%20lang:cc%20f:%5Eart\u0026sq\u003dpackage:%5Eandroid-internal$\n\"libziparchive\": https://source.corp.google.com/search?q\u003d%22ziparchive%2F%22%20lang:cc%20f:%5Eart\u0026ss\u003dpiper%2FGoogle%2Fandroid-internal\n\nI think the reason why the consistency is poor is that trying to group headers correctly is not something easy to achieve, which also brings up the next concern.\n\n3. It\u0027s hard to group the headers correctly.\n\nIf we really want to achieve this, I do think automation is the key. Unless we have good automation support in \"art/.clang-format\", grouping the headers requires a lot of manual efforts from both the author and the reviewer, every time, and it\u0027s still error-prone. For example, it\u0027s easy to miss that \"base/logging.h\" is actually an \"ART header\". Therefore, such style is not sustainable as it will be broken sooner or later at some point.",
      "parentUuid": "a40cbe06_6904c471",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 28,
        "endChar": 24
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "640d8038_da3fba11",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-05-30T15:51:19Z",
      "side": 1,
      "message": "Nit: Since this is only used once I think it\u0027s better to avoid this indirection, but no big deal.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abd1f914_dbdef892",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-05-30T15:51:19Z",
      "side": 1,
      "message": "This doesn\u0027t include the binder_status_t code and may be just an empty string. Judging from the fallback code here, getDescription looks like a better option: https://cs.android.com/android/platform/superproject/+/master:prebuilts/runtime/mainline/platform/sdk/include/frameworks/native/libs/binder/ndk/include_cpp/android/binder_auto_utils.h;l\u003d270-293;drc\u003d0f3dbbd42dedaf0f5511e7625384182cc0660a25",
      "range": {
        "startLine": 59,
        "startChar": 24,
        "endLine": 59,
        "endChar": 41
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fb84cfe_891f09f1",
        "filename": "artd/artd.cc",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1884045
      },
      "writtenOn": "2022-05-30T17:54:01Z",
      "side": 1,
      "message": "Done. Thanks for the suggestion!",
      "parentUuid": "abd1f914_dbdef892",
      "range": {
        "startLine": 59,
        "startChar": 24,
        "endLine": 59,
        "endChar": 41
      },
      "revId": "c8330ebf04439bc3d2ef567112d0cb78e73d2cbf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}